{
  "mapping_summary": {
    "total_items": 10,
    "timestamp": "2025-08-18T01:19:37.859040",
    "coverage_breakdown": {
      "complete": 10,
      "partial": 0,
      "none": 0
    }
  },
  "mapping_results": [
    {
      "compliance_id": "2.1.1",
      "title": "Enable audit Logs",
      "existing_functions_mapped": [
        "aks_control_plane_audit_logs_enabled",
        "aks_control_plane_logging_to_monitor_enabled",
        "aks_control_plane_logs_azure_monitor_integrated",
        "aks_control_plane_logs_workspace_configured",
        "aks_control_plane_logs_retention_policy_set",
        "aks_control_plane_logs_security_center_integrated",
        "aks_control_plane_logs_application_insights_integrated"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "aks_control_plane_audit_logs_enabled",
            "aks_control_plane_logging_to_monitor_enabled",
            "aks_control_plane_logs_azure_monitor_integrated",
            "aks_control_plane_logs_workspace_configured",
            "aks_control_plane_logs_retention_policy_set",
            "aks_control_plane_logs_security_center_integrated",
            "aks_control_plane_logs_application_insights_integrated"
          ],
          "new_consolidated_function": "aks_control_plane_audit_logs_enabled",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar audit log functions into one comprehensive function."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "All existing functions related to AKS control plane audit logs have been identified and consolidated into one function, `aks_control_plane_audit_logs_enabled`, which covers the compliance requirement effectively. This consolidation reduces redundancy and adheres to naming standards."
    },
    {
      "compliance_id": "3.1.1",
      "title": "Ensure that the kubeconfig file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "kubernetes_kubeconfig_file_permissions_644_or_stricter",
        "kubernetes_kubeconfig_file_permissions_restrictive",
        "kubernetes_kubeconfig_file_permissions_secure",
        "kubernetes_kubeconfig_file_permissions_compliant",
        "kubernetes_kubeconfig_file_permissions_cis_benchmark"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubeconfig_file_permissions_644_or_stricter",
            "kubernetes_kubeconfig_file_permissions_restrictive",
            "kubernetes_kubeconfig_file_permissions_secure",
            "kubernetes_kubeconfig_file_permissions_compliant",
            "kubernetes_kubeconfig_file_permissions_cis_benchmark"
          ],
          "new_consolidated_function": "kubernetes_kubeconfig_file_permissions_644_or_more_restrictive",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check for kubeconfig file permissions."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "All existing functions related to kubeconfig file permissions were consolidated into one function to ensure clarity and compliance with naming standards. The new function name clearly indicates the requirement for permissions to be set to 644 or more restrictive."
    },
    {
      "compliance_id": "3.1.2",
      "title": "Ensure that the kubelet kubeconfig file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubernetes_kubelet_kubeconfig_root_owned",
        "kubernetes_kubeconfig_file_root_owned",
        "kubelet_kubeconfig_root_ownership",
        "kubelet_config_file_root_owned",
        "kubernetes_kubelet_config_root_ownership"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubelet_kubeconfig_root_owned",
            "kubernetes_kubeconfig_file_root_owned",
            "kubelet_kubeconfig_root_ownership",
            "kubelet_config_file_root_owned",
            "kubernetes_kubelet_config_root_ownership"
          ],
          "new_consolidated_function": "kubernetes_kubelet_kubeconfig_ownership_root",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar ownership checks for kubelet kubeconfig files."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "All existing functions related to kubelet kubeconfig ownership were consolidated into one function named 'kubernetes_kubelet_kubeconfig_ownership_root'. This naming follows the required structure and clearly indicates the service, resource, and requirement. The consolidation reduces redundancy and ensures that all compliance checks are covered under a single function."
    },
    {
      "compliance_id": "3.1.3",
      "title": "Ensure that the azure.json file has permissions set to 644 or more restrictive",
      "existing_functions_mapped": [
        "aks_config_file_permissions_644_or_stricter"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "aks_config_file_permissions_restrictive",
            "aks_config_file_permissions_secure",
            "aks_config_file_permissions_compliant",
            "aks_config_file_permissions_cis_benchmark"
          ],
          "new_consolidated_function": "aks_config_file_permissions_secure",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check for secure permissions on the azure.json file."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'aks_config_file_permissions_644_or_stricter' directly addresses the compliance requirement for the azure.json file permissions. The other functions were consolidated into 'aks_config_file_permissions_secure' to ensure all aspects of secure permissions are covered without redundancy. This approach maintains clarity and adheres to naming standards."
    },
    {
      "compliance_id": "3.1.4",
      "title": "Ensure that the azure.json file ownership is set to root:root",
      "existing_functions_mapped": [
        "aks_azure_json_file_owner_root"
      ],
      "functions_to_rename": [
        {
          "old_name": "aks_config_file_root_ownership",
          "new_name": "aks_config_file_owner_root",
          "rationale": "This rename improves clarity by specifying that it checks for ownership by root, aligning with naming standards."
        },
        {
          "old_name": "kubernetes_config_file_secure_ownership",
          "new_name": "kubernetes_config_file_owner_root",
          "rationale": "This rename clarifies that it checks for root ownership, following naming standards."
        },
        {
          "old_name": "cloud_provider_config_file_root_owned",
          "new_name": "cloud_provider_config_file_owner_root",
          "rationale": "This rename specifies that it checks for ownership by root, improving clarity and following naming standards."
        },
        {
          "old_name": "cloud_provider_json_file_root_owner",
          "new_name": "cloud_provider_json_file_owner_root",
          "rationale": "This rename clarifies that it checks for root ownership, aligning with naming standards."
        },
        {
          "old_name": "kubernetes_azure_config_file_root_ownership",
          "new_name": "kubernetes_azure_config_file_owner_root",
          "rationale": "This rename specifies that it checks for ownership by root, improving clarity and following naming standards."
        },
        {
          "old_name": "aks_config_file_owner_root",
          "new_name": "aks_config_file_owner_root",
          "rationale": "This function is already correctly named and does not require a change."
        }
      ],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "aks_azure_json_file_owner_root",
            "aks_config_file_owner_root",
            "kubernetes_config_file_owner_root",
            "cloud_provider_config_file_owner_root",
            "cloud_provider_json_file_owner_root",
            "kubernetes_azure_config_file_owner_root"
          ],
          "new_consolidated_function": "aks_config_file_owner_root",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar ownership checks across different configurations."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'aks_azure_json_file_owner_root' was identified as the best match for the compliance requirement. Other similar functions were consolidated into 'aks_config_file_owner_root' to minimize redundancy. All functions were renamed to follow the strict naming standards, ensuring clarity and consistency."
    },
    {
      "compliance_id": "3.2.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "kubernetes_kubelet_anonymous_auth_disabled",
        "kubernetes_kubelet_anonymous_requests_disabled"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubelet_anonymous_auth_disabled",
            "kubernetes_kubelet_anonymous_auth_set_false",
            "kubernetes_kubelet_anonymous_requests_disabled",
            "kubernetes_kubelet_auth_anonymous_disabled",
            "kubernetes_kubelet_auth_anonymous_set_false"
          ],
          "new_consolidated_function": "kubernetes_kubelet_anonymous_auth_disabled",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check the same requirement regarding anonymous authentication."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions related to anonymous authentication for the Kubelet server were consolidated into one function, `kubernetes_kubelet_anonymous_auth_disabled`, which effectively covers the compliance requirement to ensure that anonymous requests are disabled. This consolidation reduces redundancy and adheres to the naming standards."
    },
    {
      "compliance_id": "3.2.2",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "kubernetes_api_server_authorization_mode_not_always_allow",
        "kubernetes_api_server_always_allow_disabled"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_api_server_explicit_authorization_enabled",
            "kubernetes_api_server_authorization_restricted",
            "kubernetes_api_server_authorization_mode_secure"
          ],
          "new_consolidated_function": "kubernetes_api_server_explicit_authorization_enabled",
          "rationale": "Consolidation improves efficiency by combining similar checks related to explicit authorization into one function."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubernetes_api_server_authorization_mode_not_always_allow' directly addresses the compliance requirement. The other functions related to authorization were consolidated into 'kubernetes_api_server_explicit_authorization_enabled' to minimize redundancy while ensuring all aspects of explicit authorization are covered."
    },
    {
      "compliance_id": "3.2.3",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "kubernetes_kubelet_client_ca_file_set",
        "kubernetes_kubelet_certificate_authentication_enabled",
        "kubernetes_kubelet_client_ca_file_configured",
        "kubernetes_kubelet_authentication_certificates_valid",
        "kubernetes_kubelet_client_ca_file_appropriate"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubelet_client_ca_file_set",
            "kubernetes_kubelet_client_ca_file_configured",
            "kubernetes_kubelet_client_ca_file_appropriate"
          ],
          "new_consolidated_function": "kubernetes_kubelet_client_ca_file_enabled",
          "rationale": "Consolidation improves efficiency by reducing duplication of functions that check the same requirement regarding the client CA file."
        },
        {
          "old_functions": [
            "kubernetes_kubelet_certificate_authentication_enabled",
            "kubernetes_kubelet_authentication_certificates_valid"
          ],
          "new_consolidated_function": "kubernetes_kubelet_certificate_authentication_enabled",
          "rationale": "Consolidation of certificate authentication checks into one function simplifies the compliance checks related to certificate validation."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions were assessed for coverage of the compliance requirement. The functions related to the client CA file were consolidated into one function to streamline the checks. The naming convention was followed strictly, ensuring clarity and adherence to the required format."
    },
    {
      "compliance_id": "3.2.4",
      "title": "Ensure that the --read-only-port is secured",
      "existing_functions_mapped": [
        "mongodb_instance_read_only_port_disabled",
        "mongodb_cluster_read_only_port_secured",
        "database_instance_read_only_port_restricted",
        "mongodb_read_only_port_access_disabled",
        "database_read_only_port_protection_enabled"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "mongodb_instance_read_only_port_disabled",
            "mongodb_cluster_read_only_port_secured",
            "database_instance_read_only_port_restricted",
            "mongodb_read_only_port_access_disabled",
            "database_read_only_port_protection_enabled"
          ],
          "new_consolidated_function": "database_read_only_port_disabled",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check the status of the read-only port across different database resources."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "All existing functions related to the read-only port have been consolidated into one function, `database_read_only_port_disabled`, which clearly indicates the desired state of the read-only port being disabled. This consolidation reduces redundancy and adheres to the naming standards."
    },
    {
      "compliance_id": "3.2.5",
      "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
      "existing_functions_mapped": [
        "kubernetes_api_server_streaming_connection_idle_timeout_not_zero",
        "kubernetes_api_server_streaming_connection_timeout_enabled"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_api_server_streaming_connection_timeout_configured",
            "kubernetes_api_server_streaming_connection_idle_timeout_set",
            "kubernetes_api_server_streaming_connection_timeout_non_zero"
          ],
          "new_consolidated_function": "kubernetes_api_server_streaming_connection_timeout_non_zero",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar checks related to streaming connection timeouts."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'kubernetes_api_server_streaming_connection_idle_timeout_not_zero' and 'kubernetes_api_server_streaming_connection_timeout_enabled' cover the compliance requirement effectively. The consolidation of the other similar functions into 'kubernetes_api_server_streaming_connection_timeout_non_zero' ensures that we have a single function that checks for the non-zero timeout setting, thus adhering to the consolidation rules and minimizing function count."
    }
  ]
}