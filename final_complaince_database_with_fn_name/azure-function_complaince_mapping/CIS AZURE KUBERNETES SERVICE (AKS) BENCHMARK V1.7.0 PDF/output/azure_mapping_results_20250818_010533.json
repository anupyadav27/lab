{
  "mapping_summary": {
    "total_items": 10,
    "timestamp": "2025-08-18T01:05:33.816512",
    "coverage_breakdown": {
      "complete": 9,
      "partial": 1,
      "none": 0
    }
  },
  "mapping_results": [
    {
      "compliance_id": "2.1.1",
      "title": "Enable audit Logs",
      "existing_functions_mapped": [
        "aks_control_plane_audit_logs_enabled",
        "aks_control_plane_logging_to_monitor_enabled",
        "aks_control_plane_logs_workspace_integrated",
        "aks_control_plane_logs_retention_configured",
        "aks_control_plane_logs_all_categories_enabled",
        "aks_control_plane_logs_immutable_storage_enabled",
        "aks_control_plane_logs_encryption_enabled",
        "aks_control_plane_logs_centralized_workspace_configured"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "aks_control_plane_logging_to_monitor_enabled",
            "aks_control_plane_logs_workspace_integrated",
            "aks_control_plane_logs_retention_configured",
            "aks_control_plane_logs_all_categories_enabled",
            "aks_control_plane_logs_immutable_storage_enabled",
            "aks_control_plane_logs_encryption_enabled",
            "aks_control_plane_logs_centralized_workspace_configured"
          ],
          "new_consolidated_function": "aks_control_plane_logging_enabled",
          "rationale": "Consolidation improves efficiency by reducing duplication of logging-related checks into a single function that covers all aspects of logging for the control plane."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "All existing functions related to AKS control plane logging have been mapped and consolidated into one function, `aks_control_plane_logging_enabled`, which encompasses all logging requirements. This ensures compliance with the requirement to enable audit logs while adhering to naming standards and minimizing function count."
    },
    {
      "compliance_id": "3.1.1",
      "title": "Ensure that the kubeconfig file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "kubernetes_kubeconfig_file_permissions_restrictive",
        "kubernetes_kubeconfig_file_permissions_644_or_stricter"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubeconfig_file_permissions_secure",
            "kubernetes_kubeconfig_file_permissions_compliant",
            "kubernetes_kubeconfig_file_permissions_protected"
          ],
          "new_consolidated_function": "kubernetes_kubeconfig_file_permissions_restrictive",
          "rationale": "Consolidation improves efficiency by reducing duplication of functions that check similar requirements regarding kubeconfig file permissions."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'kubernetes_kubeconfig_file_permissions_restrictive' and 'kubernetes_kubeconfig_file_permissions_644_or_stricter' were identified as relevant to the compliance requirement. The other functions related to kubeconfig file permissions were consolidated into 'kubernetes_kubeconfig_file_permissions_restrictive' to minimize function count while ensuring all aspects of the compliance requirement are covered."
    },
    {
      "compliance_id": "3.1.2",
      "title": "Ensure that the kubelet kubeconfig file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubernetes_kubelet_kubeconfig_file_ownership_root",
        "kubernetes_kubeconfig_file_ownership_root"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubelet_kubeconfig_file_ownership_root",
            "kubernetes_kubeconfig_file_ownership_root",
            "kubelet_kubeconfig_file_ownership_root_root",
            "kubelet_kubeconfig_root_ownership",
            "kubernetes_kubelet_config_file_ownership_root"
          ],
          "new_consolidated_function": "kubernetes_kubelet_kubeconfig_file_ownership_root",
          "rationale": "Consolidation reduces duplication and ensures a single source of truth for checking kubelet kubeconfig file ownership."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions were assessed for coverage of the compliance requirement. The function 'kubernetes_kubelet_kubeconfig_file_ownership_root' was selected as the best representative for the compliance check, and all similar functions were consolidated into this one to minimize redundancy. The naming follows the required structure, clearly indicating the service, resource, and requirement."
    },
    {
      "compliance_id": "3.1.3",
      "title": "Ensure that the azure.json file has permissions set to 644 or more restrictive",
      "existing_functions_mapped": [
        "aks_config_file_permissions_644_or_stricter"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "aks_config_file_permissions_restrictive",
            "aks_config_file_permissions_secure",
            "aks_config_file_permissions_compliant",
            "aks_config_file_permissions_protected"
          ],
          "new_consolidated_function": "aks_config_file_permissions_644_or_stricter",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check for file permissions, ensuring a single source of truth for compliance checks."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'aks_config_file_permissions_644_or_stricter' was identified as the best match for the compliance requirement. Other similar functions were consolidated into this one to minimize redundancy and maintain clarity in compliance checks."
    },
    {
      "compliance_id": "3.1.4",
      "title": "Ensure that the azure.json file ownership is set to root:root",
      "existing_functions_mapped": [
        "aks_azure_json_file_owner_root"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "aks_config_file_root_ownership",
            "aks_azure_json_file_secure_ownership",
            "aks_cloud_provider_config_root_owned",
            "aks_config_file_owner_root",
            "aks_azure_json_root_ownership",
            "aks_cloud_config_file_secure_owner",
            "aks_config_file_root_user_owned"
          ],
          "new_consolidated_function": "aks_azure_json_file_owner_root",
          "rationale": "Consolidation reduces duplication and maintains clarity by focusing on the specific requirement of ensuring the azure.json file is owned by root:root."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'aks_azure_json_file_owner_root' effectively covers the compliance requirement of ensuring the azure.json file ownership is set to root:root. All similar functions have been consolidated into this single function, which adheres to the naming standards and provides complete coverage for the compliance item."
    },
    {
      "compliance_id": "3.2.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "kubernetes_kubelet_anonymous_auth_disabled",
        "kubernetes_kubelet_anonymous_auth_set_false",
        "kubernetes_kubelet_anonymous_auth_denied",
        "kubernetes_kubelet_auth_anonymous_disabled"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubelet_anonymous_auth_disabled",
            "kubernetes_kubelet_anonymous_auth_set_false",
            "kubernetes_kubelet_anonymous_auth_denied",
            "kubernetes_kubelet_auth_anonymous_disabled"
          ],
          "new_consolidated_function": "kubernetes_kubelet_anonymous_auth_disabled",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check the same requirement."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions related to anonymous authentication for the Kubelet server were consolidated into one function, 'kubernetes_kubelet_anonymous_auth_disabled', which effectively covers the compliance requirement to ensure that anonymous requests are disabled. This consolidation reduces redundancy and adheres to the naming standards."
    },
    {
      "compliance_id": "3.2.2",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "eks_cluster_authorization_mode_not_always_allow",
        "eks_cluster_explicit_authorization_required",
        "eks_cluster_authorization_restricted",
        "eks_cluster_no_always_allow_auth",
        "eks_cluster_auth_mode_restricted"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "eks_cluster_authorization_mode_not_always_allow",
            "eks_cluster_explicit_authorization_required",
            "eks_cluster_authorization_restricted",
            "eks_cluster_no_always_allow_auth",
            "eks_cluster_auth_mode_restricted"
          ],
          "new_consolidated_function": "eks_cluster_authorization_mode_restricted",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar functions that check for the same requirement regarding authorization mode."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "All existing functions related to the authorization mode have been consolidated into one function, `eks_cluster_authorization_mode_restricted`, which effectively covers the compliance requirement of ensuring that the authorization mode is not set to AlwaysAllow. This consolidation reduces redundancy and maintains clarity in function naming."
    },
    {
      "compliance_id": "3.2.3",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "kubernetes_kubelet_client_ca_file_set",
        "kubernetes_kubelet_client_ca_file_configured",
        "kubernetes_kubelet_client_ca_file_appropriate"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_kubelet_certificate_authentication_enabled",
            "kubernetes_kubelet_authentication_certificates_valid"
          ],
          "new_consolidated_function": "kubernetes_kubelet_certificate_authentication_enabled",
          "rationale": "Consolidation improves efficiency by combining similar checks related to certificate authentication into one function."
        }
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "function_name": "kubernetes_kubelet_client_ca_file_appropriate",
          "description": "Checks if the --client-ca-file argument is set as appropriate for Kubelet authentication.",
          "azure_sdk_example": "client.kubernetes.kubelet.get()",
          "service_category": "Compute"
        }
      ],
      "mapping_notes": "Mapped existing functions that cover the compliance requirement. Consolidated similar functions related to certificate authentication to reduce duplication. A new function is needed to ensure complete coverage of the compliance item regarding the client-ca-file argument."
    },
    {
      "compliance_id": "3.2.4",
      "title": "Ensure that the --read-only-port is secured",
      "existing_functions_mapped": [],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "mongodb_instance_read_only_port_disabled",
            "mongodb_instance_read_only_port_secured",
            "mongodb_instance_read_only_port_restricted",
            "mongodb_instance_read_only_port_unexposed",
            "mongodb_instance_read_only_port_inaccessible"
          ],
          "new_consolidated_function": "mongodb_instance_read_only_port_disabled",
          "rationale": "Consolidating all similar functions into one function named 'mongodb_instance_read_only_port_disabled' improves efficiency and reduces duplication, as they all check for the same compliance requirement regarding the read-only port."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The compliance requirement to ensure that the read-only port is secured is fully covered by the consolidated function 'mongodb_instance_read_only_port_disabled'. This function effectively communicates the desired state of the read-only port being disabled, aligning with the compliance requirement."
    },
    {
      "compliance_id": "3.2.5",
      "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
      "existing_functions_mapped": [
        "kubernetes_api_server_streaming_connection_idle_timeout_not_disabled",
        "kubernetes_api_server_streaming_idle_timeout_non_zero"
      ],
      "functions_to_rename": [],
      "functions_to_consolidate": [
        {
          "old_functions": [
            "kubernetes_api_server_streaming_connection_timeout_configured",
            "kubernetes_api_server_connection_idle_timeout_enabled",
            "kubernetes_api_server_streaming_timeout_not_zero"
          ],
          "new_consolidated_function": "kubernetes_api_server_streaming_connection_idle_timeout_non_zero",
          "rationale": "Consolidation improves efficiency by reducing duplication of similar checks related to streaming connection idle timeout."
        }
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions were assessed for coverage of the compliance requirement. The functions related to streaming connection idle timeout were consolidated into one function, ensuring that all aspects of the requirement are covered while adhering to naming standards. The consolidated function clearly indicates that the idle timeout must not be set to zero, aligning with the compliance requirement."
    }
  ]
}