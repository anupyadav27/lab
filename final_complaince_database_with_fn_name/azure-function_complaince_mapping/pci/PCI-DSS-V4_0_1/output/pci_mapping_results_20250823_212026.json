{
  "metadata": {
    "generated_at": "2025-08-23T21:20:26.861112",
    "compliance_framework": "PCI DSS",
    "compliance_file": "PCI-DSS-v4_0_1 copy.json",
    "azure_database_functions": 1093,
    "processing_stats": {
      "total_items": 248,
      "processed": 113,
      "mapped_complete": 0,
      "mapped_partial": 55,
      "mapped_none": 58,
      "new_functions_suggested": 108,
      "test_mode": false,
      "batches_processed": 50,
      "cache_hits": 1
    },
    "model_used": "gpt-4o-mini",
    "fallback_model": "gpt-4o",
    "batch_size": 5
  },
  "mapping_results": [
    {
      "compliance_id": "1.1.1",
      "title": "PCI DSS 1.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement focuses on documentation and procedural aspects which cannot be enforced or verified through Azure SDK/API calls."
    },
    {
      "compliance_id": "1.1.2",
      "title": "PCI DSS 1.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about documenting roles and responsibilities, which is not applicable for programmatic implementation via Azure SDK/API."
    },
    {
      "compliance_id": "1.2.1",
      "title": "PCI DSS 1.2.1",
      "existing_functions_mapped": [
        "network_nsgs_restrict_inbound_ssh",
        "network_route_table_no_public_internet_gateway"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_nsg_ruleset_configuration_check",
          "azure_api": "azure.network.network_security_groups.get()",
          "service": "azure_network",
          "rationale": "To programmatically verify NSG ruleset configurations against defined standards."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects of network security configurations, but a specific function to verify NSG ruleset configurations against defined standards is needed."
    },
    {
      "compliance_id": "1.2.2",
      "title": "PCI DSS 1.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_change_control_enforcement",
          "azure_api": "azure.network.network_security_groups.update()",
          "service": "azure_network",
          "rationale": "To ensure changes to network configurations are approved and logged in accordance with change control processes."
        }
      ],
      "mapping_notes": "There is no existing function to enforce or verify change control processes programmatically. A new function to manage and log changes is needed."
    },
    {
      "compliance_id": "1.2.3",
      "title": "PCI DSS 1.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_diagram_maintenance",
          "azure_api": "azure.network.topology.get()",
          "service": "azure_network",
          "rationale": "To programmatically generate and maintain an accurate network diagram showing all connections between the CDE and other networks."
        }
      ],
      "mapping_notes": "No existing function to programmatically maintain network diagrams. A new function to generate and update network diagrams is necessary."
    },
    {
      "compliance_id": "2.1.2",
      "title": "PCI DSS 2.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_role_assignment_tracking",
          "azure_api": "azure.ad.roleAssignments.list()",
          "service": "azure_ad",
          "rationale": "To programmatically verify that roles and responsibilities are assigned and tracked within Azure AD."
        }
      ],
      "mapping_notes": "Azure AD role assignments can be used to track and verify role responsibilities, but no existing function directly maps to documenting roles and responsibilities."
    },
    {
      "compliance_id": "2.2.1",
      "title": "PCI DSS 2.2.1",
      "existing_functions_mapped": [
        "compute_service_infrastructure_modification_monitoring",
        "storage_environment_restore_update_patch_config"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_hardening_standards_enforcement",
          "azure_api": "azure.compute.virtualMachines.update()",
          "service": "azure_compute",
          "rationale": "To ensure that configuration standards are enforced and updated according to industry-accepted hardening standards."
        }
      ],
      "mapping_notes": "Existing functions help in monitoring and updating configurations but do not fully enforce hardening standards across all system components."
    },
    {
      "compliance_id": "2.2.2",
      "title": "PCI DSS 2.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_default_account_management",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To programmatically manage and update vendor default accounts and passwords."
        }
      ],
      "mapping_notes": "There are no existing Azure functions that directly manage vendor default accounts and passwords, necessitating a new function."
    },
    {
      "compliance_id": "2.2.3",
      "title": "PCI DSS 2.2.3",
      "existing_functions_mapped": [
        "compute_virtualmachine_in_virtualnetwork"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_function_isolation",
          "azure_api": "azure.compute.virtualMachines.createOrUpdate()",
          "service": "azure_compute",
          "rationale": "To ensure primary functions with different security levels are isolated or secured appropriately."
        }
      ],
      "mapping_notes": "Existing functions support isolation through virtual networks, but additional controls are needed for function isolation based on security levels."
    },
    {
      "compliance_id": "2.2.4",
      "title": "PCI DSS 2.2.4",
      "existing_functions_mapped": [
        "network_nsgs_restrict_unauthorized_ports",
        "network_http_internet_access_restricted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_service_protocol_management",
          "azure_api": "azure.compute.virtualMachines.update()",
          "service": "azure_compute",
          "rationale": "To programmatically enable or disable services, protocols, and functions based on necessity."
        }
      ],
      "mapping_notes": "Existing functions help restrict access but do not fully manage the enablement or disablement of unnecessary services and protocols."
    },
    {
      "compliance_id": "2.2.5",
      "title": "PCI DSS 2.2.5",
      "existing_functions_mapped": [
        "network_http_internet_access_restricted",
        "network_nsgs_restricted_inbound_traffic_ports",
        "network_nsgs_restrict_unauthorized_ports"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_insecure_protocols_detection",
          "azure_api": "azure.network.protocols.list_insecure()",
          "service": "azure_network",
          "rationale": "To programmatically detect and list insecure protocols and services running in the network."
        }
      ],
      "mapping_notes": "Existing functions can restrict access but do not detect insecure protocols. A new function is needed to identify insecure services and protocols."
    },
    {
      "compliance_id": "2.2.6",
      "title": "PCI DSS 2.2.6",
      "existing_functions_mapped": [
        "compute_service_infrastructure_modification_monitoring",
        "virtual_machine_diagnostic_settings_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_security_parameters_configuration",
          "azure_api": "azure.compute.security.configure_parameters()",
          "service": "azure_compute",
          "rationale": "To ensure security parameters are configured correctly on compute resources."
        }
      ],
      "mapping_notes": "Existing functions monitor changes but do not configure security parameters. A new function is needed to enforce secure configurations."
    },
    {
      "compliance_id": "2.2.7",
      "title": "PCI DSS 2.2.7",
      "existing_functions_mapped": [
        "machinelearning_computeinstance_adminaccess_disabled",
        "ai_search_service_https_enforcement_tls_compliance"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_encryption_enforcement",
          "azure_api": "azure.network.encryption.enforce()",
          "service": "azure_network",
          "rationale": "To enforce encryption for all non-console administrative access."
        }
      ],
      "mapping_notes": "Existing functions ensure HTTPS and admin access control, but do not enforce encryption for all non-console access. A new function is needed for comprehensive encryption enforcement."
    },
    {
      "compliance_id": "2.3.1",
      "title": "PCI DSS 2.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_wireless_defaults_check",
          "azure_api": "azure.network.wireless.defaults_check()",
          "service": "azure_network",
          "rationale": "To check and ensure that all wireless vendor defaults are changed or confirmed secure."
        }
      ],
      "mapping_notes": "No existing functions address wireless vendor defaults. A new function is needed to verify and change default settings."
    },
    {
      "compliance_id": "2.3.2",
      "title": "PCI DSS 2.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_wireless_key_rotation",
          "azure_api": "azure.network.wireless.key_rotate()",
          "service": "azure_network",
          "rationale": "To automate the rotation of wireless encryption keys when personnel changes occur or keys are compromised."
        }
      ],
      "mapping_notes": "No existing functions handle wireless key rotation. A new function is needed to automate key management based on personnel changes or key compromise."
    },
    {
      "compliance_id": "3.6.1",
      "title": "PCI DSS 3.6.1",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed",
        "keyvault_rbac_secret_expiration_set"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_key_encryption_separation",
          "azure_api": "azure.keyvault.keys.create_key()",
          "service": "azure_keyvault",
          "rationale": "Ensure key-encrypting keys are stored separately from data-encrypting keys."
        }
      ],
      "mapping_notes": "Existing functions cover key management and access restrictions but do not ensure separation of key-encrypting keys from data-encrypting keys."
    },
    {
      "compliance_id": "3.6.1.1",
      "title": "PCI DSS 3.6.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_cryptographic_architecture_report",
          "azure_api": "azure.keyvault.keys.list_properties()",
          "service": "azure_keyvault",
          "rationale": "Automate reporting of cryptographic architecture including algorithms, protocols, and key details."
        }
      ],
      "mapping_notes": "No existing functions provide automated reporting of cryptographic architecture details."
    },
    {
      "compliance_id": "3.6.1.2",
      "title": "PCI DSS 3.6.1.2",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_secure_key_storage",
          "azure_api": "azure.keyvault.keys.import_key()",
          "service": "azure_keyvault",
          "rationale": "Ensure secret and private keys are stored securely using HSM or encrypted with key-encrypting keys."
        }
      ],
      "mapping_notes": "Existing functions ensure access control but do not verify secure storage forms."
    },
    {
      "compliance_id": "3.6.1.3",
      "title": "PCI DSS 3.6.1.3",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_cleartext_access_restriction",
          "azure_api": "azure.keyvault.keys.update_access_policy()",
          "service": "azure_keyvault",
          "rationale": "Restrict access to cleartext cryptographic key components to necessary personnel only."
        }
      ],
      "mapping_notes": "Existing functions restrict access but do not specifically target cleartext key components."
    },
    {
      "compliance_id": "3.6.1.4",
      "title": "PCI DSS 3.6.1.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_minimize_key_locations",
          "azure_api": "azure.keyvault.keys.list()",
          "service": "azure_keyvault",
          "rationale": "Ensure cryptographic keys are stored in the fewest possible locations."
        }
      ],
      "mapping_notes": "No existing functions ensure minimization of key storage locations."
    },
    {
      "compliance_id": "3.7.1",
      "title": "PCI DSS 3.7.1",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_generate_strong_keys",
          "azure_api": "azure.keyvault.keys.create_key()",
          "service": "azure_keyvault",
          "rationale": "To programmatically generate strong cryptographic keys in Azure Key Vault."
        }
      ],
      "mapping_notes": "The existing function ensures RBAC policies are enforced, but does not cover key generation. A new function is needed to generate strong keys."
    },
    {
      "compliance_id": "3.7.2",
      "title": "PCI DSS 3.7.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_secure_key_distribution",
          "azure_api": "azure.keyvault.keys.get_key()",
          "service": "azure_keyvault",
          "rationale": "To ensure cryptographic keys are securely distributed only to authorized users."
        }
      ],
      "mapping_notes": "No existing functions directly address secure distribution of keys. A new function is needed to manage secure distribution."
    },
    {
      "compliance_id": "3.7.3",
      "title": "PCI DSS 3.7.3",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed",
        "security_center_credentials_storage_secure"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_secure_key_storage",
          "azure_api": "azure.keyvault.keys.backup_key()",
          "service": "azure_keyvault",
          "rationale": "To ensure cryptographic keys are securely stored and protected in Azure Key Vault."
        }
      ],
      "mapping_notes": "Existing functions ensure secure storage and RBAC enforcement, but a specific function for secure key storage is needed."
    },
    {
      "compliance_id": "3.7.4",
      "title": "PCI DSS 3.7.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_manage_key_cryptoperiod",
          "azure_api": "azure.keyvault.keys.update_key_properties()",
          "service": "azure_keyvault",
          "rationale": "To manage cryptoperiods for keys, ensuring they are rotated at the end of their defined period."
        }
      ],
      "mapping_notes": "No existing functions manage key cryptoperiods. A new function is needed to automate key rotation based on cryptoperiods."
    },
    {
      "compliance_id": "3.7.5",
      "title": "PCI DSS 3.7.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_retire_replace_destroy_keys",
          "azure_api": "azure.keyvault.keys.delete_key()",
          "service": "azure_keyvault",
          "rationale": "To retire, replace, or destroy cryptographic keys that are compromised or have reached the end of their cryptoperiod."
        }
      ],
      "mapping_notes": "No existing functions handle key retirement or destruction. A new function is needed to manage the lifecycle of keys, including retirement and destruction."
    },
    {
      "compliance_id": "3.7.6",
      "title": "PCI DSS 3.7.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_key_split_knowledge_enforcement",
          "azure_api": "azure.keyvault.keys.split_knowledge_enforcement()",
          "service": "azure_keyvault",
          "rationale": "To enforce split knowledge and dual control for key management operations, ensuring no single person can access the entire cryptographic key."
        }
      ],
      "mapping_notes": "Azure Key Vault does not natively support split knowledge or dual control for manual key management operations. A new function is needed to enforce these controls programmatically."
    },
    {
      "compliance_id": "3.7.7",
      "title": "PCI DSS 3.7.7",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_prevent_key_substitution",
          "azure_api": "azure.keyvault.keys.prevent_substitution()",
          "service": "azure_keyvault",
          "rationale": "To prevent unauthorized substitution of cryptographic keys, ensuring that only authorized keys are used and managed."
        }
      ],
      "mapping_notes": "While existing RBAC controls can limit unauthorized actions, a specific function to prevent key substitution is needed for complete compliance."
    },
    {
      "compliance_id": "3.7.8",
      "title": "PCI DSS 3.7.8",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_key_custodian_acknowledgement",
          "azure_api": "azure.keyvault.keys.custodian_acknowledgement()",
          "service": "azure_keyvault",
          "rationale": "To ensure cryptographic key custodians formally acknowledge their responsibilities, which can be tracked electronically."
        }
      ],
      "mapping_notes": "There is no existing Azure function to electronically track custodian acknowledgements. A new function is needed to facilitate this process."
    },
    {
      "compliance_id": "3.7.9",
      "title": "PCI DSS 3.7.9",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_customer_key_guidance_distribution",
          "azure_api": "azure.keyvault.keys.customer_guidance_distribution()",
          "service": "azure_keyvault",
          "rationale": "To programmatically distribute guidance to customers on secure key management practices when sharing cryptographic keys."
        }
      ],
      "mapping_notes": "Currently, Azure does not provide a function to distribute key management guidance to customers. A new function is needed to automate this process."
    },
    {
      "compliance_id": "4.1.1",
      "title": "PCI DSS 4.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement focuses on documentation and communication of policies and procedures, which cannot be enforced or verified programmatically via Azure SDK/API calls."
    },
    {
      "compliance_id": "5.1.1",
      "title": "PCI DSS 5.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about documentation and policy management, which cannot be directly implemented or verified through Azure SDK/API calls."
    },
    {
      "compliance_id": "5.1.2",
      "title": "PCI DSS 5.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation of roles and responsibilities, which is not implementable through Azure SDK/API calls."
    },
    {
      "compliance_id": "5.2.1",
      "title": "PCI DSS 5.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_center_antimalware_solution_deployment",
          "azure_api": "azure.security_center.deploy_antimalware_solution()",
          "service": "Azure Security Center",
          "rationale": "A function to programmatically deploy anti-malware solutions across Azure resources to ensure compliance with anti-malware deployment requirements."
        }
      ],
      "mapping_notes": "No existing Azure function directly deploys anti-malware solutions. A new function is needed to automate this process."
    },
    {
      "compliance_id": "5.2.2",
      "title": "PCI DSS 5.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_center_antimalware_detection_configuration",
          "azure_api": "azure.security_center.configure_antimalware_detection()",
          "service": "Azure Security Center",
          "rationale": "A function to configure anti-malware solutions to detect and respond to all known types of malware."
        }
      ],
      "mapping_notes": "While Azure Security Center can monitor for threats, a specific function to configure detection settings is needed."
    },
    {
      "compliance_id": "5.2.3",
      "title": "PCI DSS 5.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_center_malware_risk_evaluation",
          "azure_api": "azure.security_center.evaluate_malware_risk()",
          "service": "Azure Security Center",
          "rationale": "A function to periodically evaluate system components for malware risk and update protection requirements."
        }
      ],
      "mapping_notes": "A new function is needed to automate the evaluation of system components for malware risk and ensure compliance with periodic evaluation requirements."
    },
    {
      "compliance_id": "5.2.3.1",
      "title": "PCI DSS 5.2.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_periodic_evaluation_schedule",
          "azure_api": "azure.securitycenter.schedules.create_or_update()",
          "service": "azure_security_center",
          "rationale": "To programmatically define and manage the frequency of periodic evaluations for systems not at risk for malware."
        }
      ],
      "mapping_notes": "No existing Azure function directly supports defining evaluation frequencies for systems not at risk for malware."
    },
    {
      "compliance_id": "5.3.1",
      "title": "PCI DSS 5.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_antimalware_auto_update",
          "azure_api": "azure.securitycenter.antimalware.update_settings()",
          "service": "azure_security_center",
          "rationale": "To ensure anti-malware solutions are kept current via automatic updates."
        }
      ],
      "mapping_notes": "No existing Azure function directly supports ensuring anti-malware solutions are automatically updated."
    },
    {
      "compliance_id": "5.3.2",
      "title": "PCI DSS 5.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_malware_scan_schedule",
          "azure_api": "azure.securitycenter.malware_scans.schedule()",
          "service": "azure_security_center",
          "rationale": "To schedule periodic and real-time malware scans programmatically."
        }
      ],
      "mapping_notes": "No existing Azure function directly supports scheduling periodic and real-time malware scans."
    },
    {
      "compliance_id": "5.3.2.1",
      "title": "PCI DSS 5.3.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_scan_frequency_management",
          "azure_api": "azure.securitycenter.scan_frequency.set()",
          "service": "azure_security_center",
          "rationale": "To define and manage the frequency of periodic malware scans based on risk analysis."
        }
      ],
      "mapping_notes": "No existing Azure function directly supports defining scan frequencies based on risk analysis."
    },
    {
      "compliance_id": "5.3.3",
      "title": "PCI DSS 5.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_removable_media_scan",
          "azure_api": "azure.securitycenter.removable_media.scan_on_insert()",
          "service": "azure_security_center",
          "rationale": "To automatically scan removable media upon insertion or connection."
        }
      ],
      "mapping_notes": "No existing Azure function directly supports automatic scanning of removable media upon insertion."
    },
    {
      "compliance_id": "5.3.4",
      "title": "PCI DSS 5.3.4",
      "existing_functions_mapped": [
        "monitor_activity_log_alert_public_ip_address_update_create",
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage",
        "servicebus_messages_delivery_status_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_center_antimalware_audit_log_retention",
          "azure_api": "azure.securitycenter.antimalware.setAuditLogRetention()",
          "service": "azure_security_center",
          "rationale": "To ensure audit logs for anti-malware solutions are enabled and retained according to PCI DSS requirements."
        }
      ],
      "mapping_notes": "Existing functions provide logging capabilities but do not specifically address anti-malware audit log retention. A new function is needed to ensure compliance with the retention requirement."
    },
    {
      "compliance_id": "5.3.5",
      "title": "PCI DSS 5.3.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_antimalware_protection_enforcement",
          "azure_api": "azure.securitycenter.antimalware.enforceProtection()",
          "service": "azure_security_center",
          "rationale": "To ensure anti-malware mechanisms cannot be disabled or altered by unauthorized users."
        }
      ],
      "mapping_notes": "No existing functions directly prevent unauthorized disabling of anti-malware solutions. A new function is required to enforce this control."
    },
    {
      "compliance_id": "5.4.1",
      "title": "PCI DSS 5.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_center_phishing_detection_protection",
          "azure_api": "azure.securitycenter.phishing.detectAndProtect()",
          "service": "azure_security_center",
          "rationale": "To implement automated mechanisms for detecting and protecting against phishing attacks."
        }
      ],
      "mapping_notes": "No existing functions specifically address phishing detection and protection. A new function is necessary to fulfill this requirement."
    },
    {
      "compliance_id": "6.1.1",
      "title": "PCI DSS 6.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to documentation and policy management, which cannot be implemented programmatically through Azure SDK/API calls."
    },
    {
      "compliance_id": "6.1.2",
      "title": "PCI DSS 6.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation of roles and responsibilities, which is outside the scope of programmatic implementation through Azure SDK/API calls."
    },
    {
      "compliance_id": "6.5.5",
      "title": "PCI DSS 6.5.5",
      "existing_functions_mapped": [
        "compute_virtualmachine_in_virtualnetwork",
        "network_http_internet_access_restricted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_pan_detection_preprod",
          "azure_api": "azure.storage.blob.list_blobs()",
          "service": "azure_storage",
          "rationale": "To programmatically scan storage accounts in pre-production environments for the presence of live PANs."
        }
      ],
      "mapping_notes": "Existing functions help ensure that pre-production environments are isolated and restricted from internet access, but do not directly verify the absence of live PANs."
    },
    {
      "compliance_id": "6.5.6",
      "title": "PCI DSS 6.5.6",
      "existing_functions_mapped": [
        "devops_pipeline_blob_storage_logs_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_test_account_cleanup",
          "azure_api": "azure.ad.user.delete()",
          "service": "azure_ad",
          "rationale": "To automate the removal of test accounts from Azure AD before systems go into production."
        }
      ],
      "mapping_notes": "While existing functions ensure encryption of logs, they do not address the removal of test data and accounts. A new function is needed to automate this process."
    },
    {
      "compliance_id": "7.1.1",
      "title": "PCI DSS 7.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement focuses on documentation and procedural aspects, which cannot be addressed programmatically with Azure SDK/API calls."
    },
    {
      "compliance_id": "7.1.2",
      "title": "PCI DSS 7.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documenting roles and responsibilities, which is outside the scope of programmatic Azure functions."
    },
    {
      "compliance_id": "7.2.1",
      "title": "PCI DSS 7.2.1",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero",
        "keyvault_key_rbac_blocked_actions_disallowed"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_access_control_model_definition",
          "azure_api": "azure.ad.role.assign()",
          "service": "azure_ad",
          "rationale": "To define and enforce an access control model based on job roles and least privilege principles."
        }
      ],
      "mapping_notes": "Existing functions help enforce authentication and RBAC policies but do not fully define an access control model. A new function is needed to programmatically manage role assignments."
    },
    {
      "compliance_id": "8.2.2",
      "title": "PCI DSS 8.2.2",
      "existing_functions_mapped": [
        "azure_ad_user_action_without_authentication",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_shared_id_usage_monitoring",
          "azure_api": "azure.ad.audit_logs.list()",
          "service": "azure_ad",
          "rationale": "To monitor and log the usage of shared IDs to ensure actions are attributable to individual users."
        },
        {
          "name": "azure_ad_shared_id_exception_management",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To programmatically manage exceptions for shared ID usage, ensuring they are only used when necessary and with proper approval."
        }
      ],
      "mapping_notes": "Existing functions help ensure authentication and reconfirmation, but additional functions are needed to monitor and manage shared ID usage and exceptions."
    },
    {
      "compliance_id": "8.2.3",
      "title": "PCI DSS 8.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_unique_authentication_per_customer",
          "azure_api": "azure.ad.conditional_access.create()",
          "service": "azure_ad",
          "rationale": "To enforce unique authentication factors for each customer premises, ensuring credentials are not reused across customers."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement for unique authentication factors per customer. A new function is needed to enforce this."
    },
    {
      "compliance_id": "8.2.4",
      "title": "PCI DSS 8.2.4",
      "existing_functions_mapped": [
        "azure_ad_keyvault_inline_policy_blocked_actions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_user_id_lifecycle_management",
          "azure_api": "azure.ad.user.lifecycle()",
          "service": "azure_ad",
          "rationale": "To manage the lifecycle of user IDs, ensuring additions, deletions, and modifications are authorized and auditable."
        }
      ],
      "mapping_notes": "Existing functions provide some control over actions, but a specific function for managing user ID lifecycle events is needed."
    },
    {
      "compliance_id": "8.2.5",
      "title": "PCI DSS 8.2.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_terminate_user_access",
          "azure_api": "azure.ad.user.delete()",
          "service": "azure_ad",
          "rationale": "To immediately revoke access for terminated users, ensuring their accounts cannot be used post-termination."
        }
      ],
      "mapping_notes": "No existing functions directly address immediate revocation of access for terminated users. A new function is needed for this purpose."
    },
    {
      "compliance_id": "8.2.6",
      "title": "PCI DSS 8.2.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_inactive_account_management",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To automatically disable or remove inactive user accounts after 90 days of inactivity."
        }
      ],
      "mapping_notes": "No existing functions directly address the management of inactive accounts. A new function is needed to automate this process."
    },
    {
      "compliance_id": "8.2.7",
      "title": "PCI DSS 8.2.7",
      "existing_functions_mapped": [
        "azure_ad_user_action_without_authentication",
        "monitor_activity_log_alert_public_ip_address_update_create"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_third_party_access_time_restriction",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To programmatically enable and disable third-party accounts based on time schedules."
        },
        {
          "name": "azure_ad_third_party_access_monitoring",
          "azure_api": "azure.monitor.activity_log.list()",
          "service": "azure_monitor",
          "rationale": "To monitor and log third-party access activities for unexpected behavior."
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage by monitoring unauthorized actions and public IP updates. New functions are needed to automate account enable/disable based on time and monitor third-party access."
    },
    {
      "compliance_id": "8.2.8",
      "title": "PCI DSS 8.2.8",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_session_idle_timeout_enforcement",
          "azure_api": "azure.ad.session.update()",
          "service": "azure_ad",
          "rationale": "To enforce re-authentication after a session has been idle for a specified period."
        }
      ],
      "mapping_notes": "Existing function enforces re-authentication but does not specifically address idle session timeout. A new function is needed to enforce session idle timeouts."
    },
    {
      "compliance_id": "8.3.1",
      "title": "PCI DSS 8.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_multi_factor_authentication_enforcement",
          "azure_api": "azure.ad.mfa.policy.update()",
          "service": "azure_ad",
          "rationale": "To enforce multi-factor authentication for all user access to system components."
        }
      ],
      "mapping_notes": "No existing functions directly enforce MFA for all user access. A new function is needed to ensure MFA is applied."
    },
    {
      "compliance_id": "8.3.2",
      "title": "PCI DSS 8.3.2",
      "existing_functions_mapped": [
        "ai_search_service_https_enforcement_tls_compliance"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authentication_factor_encryption",
          "azure_api": "azure.ad.authentication.encryption.update()",
          "service": "azure_ad",
          "rationale": "To ensure strong cryptography is used for all authentication factors during transmission and storage."
        }
      ],
      "mapping_notes": "Existing function ensures TLS compliance but does not cover encryption of authentication factors specifically. A new function is needed for comprehensive coverage."
    },
    {
      "compliance_id": "8.3.3",
      "title": "PCI DSS 8.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_user_identity_verification_before_auth_factor_change",
          "azure_api": "azure.ad.user.identity.verify()",
          "service": "azure_ad",
          "rationale": "To verify user identity before allowing changes to authentication factors."
        }
      ],
      "mapping_notes": "No existing functions verify user identity before authentication factor changes. A new function is needed to ensure identity verification."
    },
    {
      "compliance_id": "8.3.9",
      "title": "PCI DSS 8.3.9",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_dynamic_security_posture_analysis",
          "azure_api": "azure.ad.dynamicSecurityPostureAnalysis()",
          "service": "azure_ad",
          "rationale": "To dynamically analyze the security posture of accounts and determine real-time access to resources based on factors like device integrity and location."
        }
      ],
      "mapping_notes": "The existing function ensures password change policies are enforced, but does not cover dynamic security posture analysis, which is needed for complete compliance."
    },
    {
      "compliance_id": "8.3.10",
      "title": "PCI DSS 8.3.10",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_customer_password_guidance",
          "azure_api": "azure.ad.customerPasswordGuidance()",
          "service": "azure_ad",
          "rationale": "To provide automated guidance to customer users on when and how to change their passwords, ensuring compliance with periodic change requirements."
        }
      ],
      "mapping_notes": "No existing Azure function provides guidance to customer users on password management. A new function is required to automate this guidance."
    },
    {
      "compliance_id": "8.3.10.1",
      "title": "PCI DSS 8.3.10.1",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_dynamic_security_posture_analysis",
          "azure_api": "azure.ad.dynamicSecurityPostureAnalysis()",
          "service": "azure_ad",
          "rationale": "To dynamically analyze the security posture of accounts and determine real-time access to resources, similar to requirement 8.3.9."
        }
      ],
      "mapping_notes": "Similar to 8.3.9, the existing function partially addresses password change requirements but lacks dynamic analysis capabilities."
    },
    {
      "compliance_id": "8.3.11",
      "title": "PCI DSS 8.3.11",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_individual_authentication_factor_assignment",
          "azure_api": "azure.ad.individualAuthenticationFactorAssignment()",
          "service": "azure_ad",
          "rationale": "To ensure that authentication factors are assigned to individual users and not shared, enhancing security by preventing unauthorized access."
        }
      ],
      "mapping_notes": "No current function ensures individual assignment of authentication factors. A new function is necessary to enforce this control."
    },
    {
      "compliance_id": "8.4.1",
      "title": "PCI DSS 8.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_mfa_non_console_access",
          "azure_api": "azure.ad.mfaNonConsoleAccess()",
          "service": "azure_ad",
          "rationale": "To enforce MFA for all non-console access into the CDE for personnel with administrative access, ensuring compliance with multi-factor authentication requirements."
        }
      ],
      "mapping_notes": "No existing function specifically enforces MFA for non-console administrative access to the CDE. A new function is required to implement this control."
    },
    {
      "compliance_id": "8.4.2",
      "title": "PCI DSS 8.4.2",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_mfa_enforcement_non_console_access",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To enforce MFA for all non-console access into the CDE."
        }
      ],
      "mapping_notes": "The existing function ensures MFA re-confirmation but does not specifically enforce MFA for non-console access. A new function is needed to enforce MFA for all non-console access."
    },
    {
      "compliance_id": "8.4.3",
      "title": "PCI DSS 8.4.3",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_mfa_enforcement_remote_access",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To enforce MFA for all remote access originating from outside the entity’s network that could access or impact the CDE."
        }
      ],
      "mapping_notes": "The existing function ensures MFA re-confirmation but does not specifically target remote access. A new function is needed to enforce MFA for remote access."
    },
    {
      "compliance_id": "8.5",
      "title": "PCI DSS 8.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_mfa_configuration_protection",
          "azure_api": "azure.ad.mfa.configure()",
          "service": "azure_ad",
          "rationale": "To configure MFA systems to prevent misuse, including preventing replay attacks and ensuring all factors are successful before granting access."
        }
      ],
      "mapping_notes": "No existing functions directly address the prevention of replay attacks or the configuration of MFA systems to ensure all factors are successful. A new function is needed for comprehensive protection."
    },
    {
      "compliance_id": "8.6.1",
      "title": "PCI DSS 8.6.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_system_account_interactive_login_restriction",
          "azure_api": "azure.ad.user.update()",
          "service": "azure_ad",
          "rationale": "To manage system and application accounts by preventing interactive login unless exceptional and ensuring all actions are attributable to an individual."
        }
      ],
      "mapping_notes": "No existing functions manage interactive login restrictions for system and application accounts. A new function is needed to enforce these restrictions."
    },
    {
      "compliance_id": "8.6.2",
      "title": "PCI DSS 8.6.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_password_protection_enforcement",
          "azure_api": "azure.keyvault.secret.set()",
          "service": "azure_keyvault",
          "rationale": "To ensure passwords/passphrases for application and system accounts are not hard-coded and are stored securely in Azure Key Vault."
        }
      ],
      "mapping_notes": "No existing functions ensure that passwords are not hard-coded in scripts or configuration files. A new function is needed to enforce secure storage of passwords."
    },
    {
      "compliance_id": "9.2.2",
      "title": "PCI DSS 9.2.2",
      "existing_functions_mapped": [
        "network_nsgs_restricted_inbound_traffic_ports",
        "network_http_internet_access_restricted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_jack_access_control",
          "azure_api": "azure.network.jackAccessControl()",
          "service": "azure_network",
          "rationale": "To programmatically control and restrict access to network jacks in public areas."
        }
      ],
      "mapping_notes": "Existing functions can restrict network access but do not specifically address physical network jacks. A new function is needed to manage network jack access."
    },
    {
      "compliance_id": "9.2.3",
      "title": "PCI DSS 9.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_hardware_access_control",
          "azure_api": "azure.network.hardwareAccessControl()",
          "service": "azure_network",
          "rationale": "To manage and restrict physical access to networking hardware programmatically."
        }
      ],
      "mapping_notes": "No existing functions address physical access to networking hardware. A new function is necessary to enforce these controls."
    },
    {
      "compliance_id": "9.2.4",
      "title": "PCI DSS 9.2.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_compute_console_lock_enforcement",
          "azure_api": "azure.compute.consoleLockEnforcement()",
          "service": "azure_compute",
          "rationale": "To ensure consoles in sensitive areas are locked when not in use, preventing unauthorized access."
        }
      ],
      "mapping_notes": "No existing functions specifically address locking consoles. A new function is required to enforce console lock policies."
    },
    {
      "compliance_id": "9.3.1",
      "title": "PCI DSS 9.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_physical_access_management",
          "azure_api": "azure.ad.physicalAccessManagement()",
          "service": "azure_ad",
          "rationale": "To manage and authorize physical access to CDE areas based on personnel roles."
        }
      ],
      "mapping_notes": "No existing functions manage physical access authorization. A new function is needed to handle personnel access management."
    },
    {
      "compliance_id": "9.3.1.1",
      "title": "PCI DSS 9.3.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_access_revocation_on_termination",
          "azure_api": "azure.ad.accessRevocationOnTermination()",
          "service": "azure_ad",
          "rationale": "To ensure access is revoked immediately upon personnel termination and access mechanisms are disabled."
        }
      ],
      "mapping_notes": "No existing functions ensure immediate revocation of physical access upon termination. A new function is required for this purpose."
    },
    {
      "compliance_id": "9.3.2",
      "title": "PCI DSS 9.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_visitor_access_management",
          "azure_api": "azure.ad.visitorAccessManagement()",
          "service": "azure_ad",
          "rationale": "To programmatically manage and authorize visitor access to facilities using Azure AD."
        }
      ],
      "mapping_notes": "Azure currently lacks a specific API for managing physical visitor access, necessitating a new function for integration with physical access systems."
    },
    {
      "compliance_id": "9.3.3",
      "title": "PCI DSS 9.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_visitor_badge_deactivation",
          "azure_api": "azure.ad.visitorBadgeDeactivation()",
          "service": "azure_ad",
          "rationale": "To ensure visitor badges are deactivated automatically upon expiration or exit using Azure AD."
        }
      ],
      "mapping_notes": "No existing Azure functions manage the deactivation of physical visitor badges, requiring a new function for this purpose."
    },
    {
      "compliance_id": "9.3.4",
      "title": "PCI DSS 9.3.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_ad_visitor_log_management",
          "azure_api": "azure.ad.visitorLogManagement()",
          "service": "azure_ad",
          "rationale": "To maintain and manage visitor logs programmatically, ensuring compliance with retention policies."
        }
      ],
      "mapping_notes": "Azure does not provide a direct API for managing physical visitor logs, indicating a need for a new function."
    },
    {
      "compliance_id": "9.4.1",
      "title": "PCI DSS 9.4.1",
      "existing_functions_mapped": [
        "storage_information_assets_secure_reuse_disposal"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_media_physical_security",
          "azure_api": "azure.storage.mediaPhysicalSecurity()",
          "service": "azure_storage",
          "rationale": "To ensure physical security of media containing cardholder data, complementing existing logical security functions."
        }
      ],
      "mapping_notes": "Existing functions cover logical security, but physical security of media is not fully addressed."
    },
    {
      "compliance_id": "9.4.1.1",
      "title": "PCI DSS 9.4.1.1",
      "existing_functions_mapped": [
        "backup_policy_compliant_frequency_retention"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_offline_backup_security",
          "azure_api": "azure.storage.offlineBackupSecurity()",
          "service": "azure_storage",
          "rationale": "To ensure offline backups are stored securely and access is restricted to authorized personnel."
        }
      ],
      "mapping_notes": "While backup policies exist, ensuring the physical security of offline backups requires additional functionality."
    },
    {
      "compliance_id": "10.2.1",
      "title": "PCI DSS requirement 10.2.1",
      "existing_functions_mapped": [
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_audit_logs_enabled",
          "azure_api": "azure.monitor.enable_audit_logs()",
          "service": "azure_monitor",
          "rationale": "This function is needed to ensure that audit logs are enabled and active for all system components and cardholder data."
        }
      ],
      "mapping_notes": "Existing function partially covers the requirement by enabling diagnostic logging, but a dedicated function for audit logs is necessary for full compliance."
    },
    {
      "compliance_id": "10.2.1.1",
      "title": "PCI DSS requirement 10.2.1.1",
      "existing_functions_mapped": [
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_user_access_logging_enabled",
          "azure_api": "azure.monitor.enable_user_access_logging()",
          "service": "azure_monitor",
          "rationale": "This function is needed to capture all individual user access to cardholder data."
        }
      ],
      "mapping_notes": "Existing function provides general logging but does not specifically address user access to cardholder data."
    },
    {
      "compliance_id": "10.2.1.2",
      "title": "PCI DSS requirement 10.2.1.2",
      "existing_functions_mapped": [
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_admin_access_logging_enabled",
          "azure_api": "azure.monitor.enable_admin_access_logging()",
          "service": "azure_monitor",
          "rationale": "This function is needed to capture all actions taken by individuals with administrative access."
        }
      ],
      "mapping_notes": "Existing function does not specifically capture administrative access actions, which is critical for compliance."
    },
    {
      "compliance_id": "10.2.1.3",
      "title": "PCI DSS requirement 10.2.1.3",
      "existing_functions_mapped": [
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_audit_log_access_logging_enabled",
          "azure_api": "azure.monitor.enable_audit_log_access_logging()",
          "service": "azure_monitor",
          "rationale": "This function is needed to capture all access to audit logs."
        }
      ],
      "mapping_notes": "Existing function does not cover access to audit logs, which is crucial for tracking potential tampering."
    },
    {
      "compliance_id": "10.2.1.4",
      "title": "PCI DSS requirement 10.2.1.4",
      "existing_functions_mapped": [
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_invalid_access_attempts_logging_enabled",
          "azure_api": "azure.monitor.enable_invalid_access_attempts_logging()",
          "service": "azure_monitor",
          "rationale": "This function is needed to capture all invalid logical access attempts."
        }
      ],
      "mapping_notes": "Existing function does not specifically log invalid access attempts, which is necessary for identifying unauthorized access attempts."
    },
    {
      "compliance_id": "10.2.1.5",
      "title": "PCI DSS 10.2.1.5",
      "existing_functions_mapped": [
        "azure_ad_user_action_without_authentication",
        "monitor_activity_log_alert_public_ip_address_update_create"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_audit_log_account_changes",
          "azure_api": "azure.ad.auditlogs.list()",
          "service": "azure_ad",
          "rationale": "To capture all changes to identification and authentication credentials, including creation, deletion, and privilege elevation."
        }
      ],
      "mapping_notes": "Existing functions partially cover the requirement by monitoring user actions and public IP updates, but a specific function to log all account changes is needed."
    },
    {
      "compliance_id": "10.2.1.6",
      "title": "PCI DSS 10.2.1.6",
      "existing_functions_mapped": [
        "monitor_activity_log_alert_public_ip_address_update_create"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_audit_log_status_changes",
          "azure_api": "azure.monitor.activitylogs.list()",
          "service": "azure_monitor",
          "rationale": "To capture all initialization, starting, stopping, or pausing of audit logs."
        }
      ],
      "mapping_notes": "Existing functions provide some monitoring capabilities, but specific tracking of audit log status changes is required."
    },
    {
      "compliance_id": "10.2.1.7",
      "title": "PCI DSS 10.2.1.7",
      "existing_functions_mapped": [
        "compute_service_infrastructure_modification_monitoring"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_system_object_changes",
          "azure_api": "azure.monitor.activitylogs.list()",
          "service": "azure_monitor",
          "rationale": "To log all creation and deletion of system-level objects."
        }
      ],
      "mapping_notes": "While infrastructure modifications are monitored, specific logging for system-level object changes is needed."
    },
    {
      "compliance_id": "10.2.2",
      "title": "PCI DSS 10.2.2",
      "existing_functions_mapped": [
        "monitor_metric_alert_configured_resource",
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_monitor_detailed_audit_event_logging",
          "azure_api": "azure.monitor.diagnostics.list()",
          "service": "azure_monitor",
          "rationale": "To ensure all required details for each auditable event are logged."
        }
      ],
      "mapping_notes": "Existing functions provide some logging capabilities, but comprehensive event detail logging is necessary."
    },
    {
      "compliance_id": "10.3.1",
      "title": "PCI DSS 10.3.1",
      "existing_functions_mapped": [
        "keyvault_key_rbac_blocked_actions_disallowed",
        "azure_ad_keyvault_inline_policy_blocked_actions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_audit_log_access_control",
          "azure_api": "azure.storage.accesscontrol.list()",
          "service": "azure_storage",
          "rationale": "To enforce read access limitations on audit log files based on job-related need."
        }
      ],
      "mapping_notes": "Existing functions help control access, but specific access control for audit log files is needed."
    },
    {
      "compliance_id": "11.1.1",
      "title": "PCI DSS 11.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 11.1.1 focuses on documentation and policy management, which cannot be directly implemented or verified using Azure SDK/API calls."
    },
    {
      "compliance_id": "11.1.2",
      "title": "PCI DSS 11.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 11.1.2 involves documentation of roles and responsibilities, which is not directly implementable or verifiable using Azure SDK/API calls."
    },
    {
      "compliance_id": "11.2.1",
      "title": "PCI DSS 11.2.1",
      "existing_functions_mapped": [
        "network_nsgs_restricted_inbound_traffic_ports",
        "network_http_internet_access_restricted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_wireless_access_point_detection",
          "azure_api": "azure.network.wireless_detection()",
          "service": "azure_network",
          "rationale": "To programmatically detect and identify authorized and unauthorized wireless access points."
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage by restricting unauthorized network access, but specific detection of wireless access points requires additional functionality."
    },
    {
      "compliance_id": "11.2.2",
      "title": "PCI DSS 11.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_authorized_wireless_inventory_maintenance",
          "azure_api": "azure.network.wireless_inventory()",
          "service": "azure_network",
          "rationale": "To maintain an inventory of authorized wireless access points with business justification."
        }
      ],
      "mapping_notes": "No existing Azure functions directly support maintaining an inventory of authorized wireless access points."
    },
    {
      "compliance_id": "11.3.1",
      "title": "PCI DSS 11.3.1",
      "existing_functions_mapped": [
        "monitor_metric_alert_configured_resource",
        "security_center_credentials_storage_secure"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_internal_vulnerability_scan",
          "azure_api": "azure.security.vulnerability_scan()",
          "service": "azure_security",
          "rationale": "To perform internal vulnerability scans and verify remediation of high-risk vulnerabilities."
        }
      ],
      "mapping_notes": "Existing functions provide partial support for monitoring and alerting, but specific internal vulnerability scanning requires additional functionality."
    },
    {
      "compliance_id": "11.3.1.1",
      "title": "PCI DSS 11.3.1.1",
      "existing_functions_mapped": [
        "security_event_assessment_categorization",
        "monitor_metric_alert_configured_resource"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_vulnerability_management",
          "azure_api": "azure.security.vulnerability_management()",
          "service": "azure_security_center",
          "rationale": "To automate the management and tracking of vulnerabilities based on risk analysis."
        }
      ],
      "mapping_notes": "Existing functions cover event categorization and alerting but do not fully automate vulnerability management based on risk analysis."
    },
    {
      "compliance_id": "11.3.1.2",
      "title": "PCI DSS 11.3.1.2",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_non_zero",
        "security_center_credentials_storage_secure"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_authenticated_scan_configure",
          "azure_api": "azure.security.authenticated_scan()",
          "service": "azure_security_center",
          "rationale": "To configure and perform authenticated scans with appropriate credentials."
        }
      ],
      "mapping_notes": "While existing functions ensure credential security, they do not configure or perform authenticated scans."
    },
    {
      "compliance_id": "11.3.1.3",
      "title": "PCI DSS 11.3.1.3",
      "existing_functions_mapped": [
        "compute_service_infrastructure_modification_monitoring"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_post_change_vulnerability_scan",
          "azure_api": "azure.security.post_change_scan()",
          "service": "azure_security_center",
          "rationale": "To automate vulnerability scans after significant changes in the environment."
        }
      ],
      "mapping_notes": "Existing function monitors infrastructure changes but does not trigger vulnerability scans post-change."
    },
    {
      "compliance_id": "11.3.2",
      "title": "PCI DSS 11.3.2",
      "existing_functions_mapped": [
        "network_application_gateway_load_balancer_azure_key_vault_certificates_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_external_vulnerability_scan_schedule",
          "azure_api": "azure.security.external_scan_schedule()",
          "service": "azure_security_center",
          "rationale": "To schedule and manage external vulnerability scans at required intervals."
        }
      ],
      "mapping_notes": "Existing functions ensure secure configurations but do not handle scheduling of external vulnerability scans."
    },
    {
      "compliance_id": "11.3.2.1",
      "title": "PCI DSS 11.3.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_external_post_change_scan",
          "azure_api": "azure.security.external_post_change_scan()",
          "service": "azure_security_center",
          "rationale": "To perform external vulnerability scans after significant changes, ensuring vulnerabilities are resolved."
        }
      ],
      "mapping_notes": "No existing functions cover external scans post-significant changes; new function needed to address this."
    },
    {
      "compliance_id": "11.4.1",
      "title": "PCI DSS 11.4.1",
      "existing_functions_mapped": [
        "network_nsgs_restricted_inbound_traffic_ports",
        "network_nsgs_restrict_unauthorized_ports",
        "network_http_internet_access_restricted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_penetration_testing_schedule",
          "azure_api": "azure.security.schedule_penetration_test()",
          "service": "azure_security",
          "rationale": "To automate the scheduling and execution of penetration tests covering both application and network layers."
        },
        {
          "name": "azure_security_penetration_test_results_retention",
          "azure_api": "azure.storage.blob.store_test_results()",
          "service": "azure_storage",
          "rationale": "To ensure retention of penetration testing results for at least 12 months."
        }
      ],
      "mapping_notes": "Existing functions help restrict unauthorized access but do not cover the full scope of penetration testing requirements."
    },
    {
      "compliance_id": "11.4.2",
      "title": "PCI DSS 11.4.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_internal_penetration_testing",
          "azure_api": "azure.security.perform_internal_test()",
          "service": "azure_security",
          "rationale": "To automate internal penetration testing according to defined methodologies."
        }
      ],
      "mapping_notes": "No existing Azure functions directly support the automation of internal penetration testing as per PCI DSS requirements."
    },
    {
      "compliance_id": "11.4.3",
      "title": "PCI DSS 11.4.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_external_penetration_testing",
          "azure_api": "azure.security.perform_external_test()",
          "service": "azure_security",
          "rationale": "To automate external penetration testing according to defined methodologies."
        }
      ],
      "mapping_notes": "No existing Azure functions directly support the automation of external penetration testing as per PCI DSS requirements."
    },
    {
      "compliance_id": "11.4.4",
      "title": "PCI DSS 11.4.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_vulnerability_remediation_verification",
          "azure_api": "azure.security.verify_remediation()",
          "service": "azure_security",
          "rationale": "To verify that vulnerabilities identified during penetration testing have been remediated."
        }
      ],
      "mapping_notes": "No existing Azure functions directly support the verification of vulnerability remediation post-penetration testing."
    },
    {
      "compliance_id": "11.4.5",
      "title": "PCI DSS 11.4.5",
      "existing_functions_mapped": [
        "network_nsgs_restricted_inbound_traffic_ports",
        "network_nsgs_restrict_unauthorized_ports"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_segmentation_testing",
          "azure_api": "azure.network.test_segmentation()",
          "service": "azure_network",
          "rationale": "To automate the testing of segmentation controls to ensure the CDE is isolated from out-of-scope systems."
        }
      ],
      "mapping_notes": "Existing functions help manage network security but do not verify segmentation controls' effectiveness."
    },
    {
      "compliance_id": "11.4.6",
      "title": "PCI DSS 11.4.6",
      "existing_functions_mapped": [
        "network_nsgs_restricted_inbound_traffic_ports",
        "network_nsgs_restrict_unauthorized_ports"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_segmentation_penetration_test_schedule",
          "azure_api": "azure.network.security_groups.schedule_penetration_test()",
          "service": "azure_network",
          "rationale": "To programmatically schedule and verify penetration tests on network segmentation controls."
        }
      ],
      "mapping_notes": "Existing functions help restrict unauthorized access but do not cover scheduling or verifying penetration tests. A new function is needed to automate penetration test scheduling and verification."
    },
    {
      "compliance_id": "11.4.7",
      "title": "PCI DSS 11.4.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_customer_penetration_test_support",
          "azure_api": "azure.network.security_groups.allow_customer_test_access()",
          "service": "azure_network",
          "rationale": "To provide programmatic support for customer penetration testing requests, ensuring access or evidence is provided."
        }
      ],
      "mapping_notes": "No existing functions directly support customer penetration testing. A new function is needed to facilitate customer access or provide evidence of testing."
    },
    {
      "compliance_id": "11.5.1",
      "title": "PCI DSS 11.5.1",
      "existing_functions_mapped": [
        "monitor_activity_log_alert_public_ip_address_update_create",
        "network_http_internet_access_restricted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_intrusion_detection_configuration",
          "azure_api": "azure.network.security_groups.configure_ids_ips()",
          "service": "azure_network",
          "rationale": "To ensure IDS/IPS configurations are programmatically managed and monitored for all critical network points."
        }
      ],
      "mapping_notes": "Existing functions provide some monitoring capabilities but do not fully cover IDS/IPS deployment and management. A new function is needed for comprehensive intrusion detection configuration."
    },
    {
      "compliance_id": "11.5.1.1",
      "title": "PCI DSS 11.5.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_network_covert_communication_detection",
          "azure_api": "azure.network.security_groups.detect_covert_channels()",
          "service": "azure_network",
          "rationale": "To detect and alert on covert malware communication channels, enhancing IDS/IPS capabilities."
        }
      ],
      "mapping_notes": "No existing functions address covert communication detection. A new function is needed to detect and manage covert channels programmatically."
    },
    {
      "compliance_id": "11.5.2",
      "title": "PCI DSS 11.5.2",
      "existing_functions_mapped": [
        "monitor_metric_alert_configured_resource"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_file_integrity_monitoring",
          "azure_api": "azure.storage.files.monitor_integrity()",
          "service": "azure_storage",
          "rationale": "To programmatically monitor and alert on unauthorized modifications to critical files."
        }
      ],
      "mapping_notes": "Existing monitoring functions provide alerts but do not specifically cover file integrity monitoring. A new function is needed to ensure file integrity is maintained and monitored."
    },
    {
      "compliance_id": "12.10.5",
      "title": "PCI DSS 12.10.5",
      "existing_functions_mapped": [
        "security_event_assessment_categorization",
        "network_nsgs_restricted_inbound_traffic_ports",
        "monitor_activity_log_alert_public_ip_address_update_create",
        "servicebus_namespace_diagnostic_logging_enabled_azmon_storage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_intrusion_detection_alerts_configured",
          "azure_api": "azure.network.intrusion_detection_alerts()",
          "service": "azure_network",
          "rationale": "To ensure alerts are configured for intrusion detection systems."
        },
        {
          "name": "azure_security_change_detection_mechanism_configured",
          "azure_api": "azure.security.change_detection_mechanism()",
          "service": "azure_security",
          "rationale": "To monitor changes and tamper-detection mechanisms for critical files and payment pages."
        },
        {
          "name": "azure_network_unauthorized_wireless_access_detection",
          "azure_api": "azure.network.unauthorized_wireless_access_detection()",
          "service": "azure_network",
          "rationale": "To detect unauthorized wireless access points."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects like network security and logging, but additional functions are needed for intrusion detection, change detection, and unauthorized wireless access."
    },
    {
      "compliance_id": "12.10.6",
      "title": "PCI DSS 12.10.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_security_incident_response_plan_update",
          "azure_api": "azure.security.incident_response_plan_update()",
          "service": "azure_security",
          "rationale": "To programmatically update the incident response plan based on lessons learned and industry developments."
        }
      ],
      "mapping_notes": "No existing Azure functions directly support the update of incident response plans based on lessons learned. A new function is needed to automate this process."
    },
    {
      "compliance_id": "12.10.7",
      "title": "PCI DSS 12.10.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_storage_pan_detection_response",
          "azure_api": "azure.storage.pan_detection_response()",
          "service": "azure_storage",
          "rationale": "To detect and respond to the presence of PAN outside the CDE, including secure deletion or migration."
        },
        {
          "name": "azure_security_sensitive_data_audit",
          "azure_api": "azure.security.sensitive_data_audit()",
          "service": "azure_security",
          "rationale": "To audit and identify sensitive authentication data stored with PAN."
        }
      ],
      "mapping_notes": "No existing Azure functions address the detection and response to stored PAN outside the CDE. New functions are needed for detection, secure deletion, and auditing."
    }
  ]
}