{
  "metadata": {
    "generated_at": "2025-08-23T23:06:07.714108",
    "compliance_framework": "PCI Secure Software Standard",
    "compliance_file": "PCI-Secure-Software-Standard-v1_2_1.json",
    "azure_database_functions": 1198,
    "processing_stats": {
      "total_items": 177,
      "processed": 141,
      "mapped_complete": 2,
      "mapped_partial": 138,
      "mapped_none": 1,
      "new_functions_suggested": 477,
      "test_mode": false
    }
  },
  "mapping_results": [
    {
      "compliance_id": "Requirement_1",
      "title": "PCI Secure Software Standard Requirement #1",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_identify_sensitive_data",
          "azure_api": "azure.storage.blobs().list()",
          "service": "azure_storage",
          "rationale": "To identify all sensitive data stored in Azure Storage"
        },
        {
          "name": "azure_compute_identify_sensitive_data",
          "azure_api": "azure.compute.vms().list()",
          "service": "azure_compute",
          "rationale": "To identify all sensitive data processed by Azure Compute"
        },
        {
          "name": "azure_network_identify_sensitive_data_transmission",
          "azure_api": "azure.network.networkWatchers().getFlowLogs()",
          "service": "azure_network",
          "rationale": "To identify all sensitive data transmitted by Azure Network"
        },
        {
          "name": "azure_keyvault_identify_sensitive_keys",
          "azure_api": "azure.keyvault.vaults().listKeys()",
          "service": "azure_keyvault",
          "rationale": "To identify all cryptographic keys and related data stored in Azure Key Vault"
        }
      ],
      "mapping_notes": "The existing Azure functions provide partial coverage for the PCI Secure Software Standard requirement. They help with enforcing SSL connections, preventing key substitution, enforcing MFA, reviewing public access to storage, managing inactive accounts, reconfirming authentication, and logging audit events. However, new functions are needed to specifically identify all sensitive data stored, processed, or transmitted by Azure services, as well as to identify all cryptographic keys and related data."
    },
    {
      "compliance_id": "Requirement_2",
      "title": "PCI Secure Software Standard Requirement #2",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_storage_public_access_review",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_identification",
          "azure_api": "azure.storage.identifySensitiveData()",
          "service": "azure_storage",
          "rationale": "To identify all sensitive data that is stored, processed, and/or transmitted by the software"
        },
        {
          "name": "azure_storage_sensitive_data_location_identification",
          "azure_api": "azure.storage.identifySensitiveDataLocation()",
          "service": "azure_storage",
          "rationale": "To identify where sensitive data is stored including in temporary, semi-permanent, and non-volatile storage"
        },
        {
          "name": "azure_security_sensitive_data_protection_controls",
          "azure_api": "azure.security.getProtectionControls()",
          "service": "azure_security",
          "rationale": "To describe the security controls that are implemented to protect sensitive data"
        },
        {
          "name": "azure_security_sensitive_data_transaction_identification",
          "azure_api": "azure.security.identifySensitiveDataTransactions()",
          "service": "azure_security",
          "rationale": "To identify the transaction types and/or card data elements that are supported by the software"
        },
        {
          "name": "azure_security_cryptographic_implementation_identification",
          "azure_api": "azure.security.identifyCryptographicImplementations()",
          "service": "azure_security",
          "rationale": "To identify the cryptographic implementations that are supported by the software"
        },
        {
          "name": "azure_ad_account_authentication_credentials_identification",
          "azure_api": "azure.ad.identifyAccountAuthenticationCredentials()",
          "service": "azure_ad",
          "rationale": "To identify the accounts and authentication credentials supported by the software"
        },
        {
          "name": "azure_security_configuration_options_identification",
          "azure_api": "azure.security.identifyConfigurationOptions()",
          "service": "azure_security",
          "rationale": "To identify the configuration options provided by the software that can impact sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions provide some coverage for the PCI Secure Software Standard requirement, but they do not fully cover the requirement. New functions are needed to identify and manage sensitive data, its location, protection controls, transaction types, cryptographic implementations, accounts and authentication credentials, and configuration options that can impact sensitive data."
    },
    {
      "compliance_id": "Requirement_3",
      "title": "PCI Secure Software Standard Requirement #3",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_identify_sensitive_data",
          "azure_api": "azure.storage.BlobServiceClient().get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To identify all sensitive data stored in Azure Storage"
        },
        {
          "name": "azure_compute_identify_sensitive_data",
          "azure_api": "azure.mgmt.compute.VirtualMachinesOperations().get()",
          "service": "azure_compute",
          "rationale": "To identify all sensitive data processed by Azure Compute resources"
        },
        {
          "name": "azure_network_identify_sensitive_data_transmission",
          "azure_api": "azure.mgmt.network.NetworkWatchersOperations().get_packet_capture()",
          "service": "azure_network",
          "rationale": "To identify all sensitive data transmitted over Azure Network"
        },
        {
          "name": "azure_security_center_get_security_controls",
          "azure_api": "azure.mgmt.security.SecurityCenter().get_security_controls()",
          "service": "azure_security_center",
          "rationale": "To get information about the security controls implemented to protect sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help with enforcing access policies, preventing key substitution, and auditing. However, they do not provide a complete solution for identifying all sensitive data stored, processed, or transmitted by the software, or for describing the security controls implemented to protect such data. Therefore, new functions are needed for these purposes."
    },
    {
      "compliance_id": "Requirement_4",
      "title": "PCI Secure Software Standard Requirement #4",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_identify_sensitive_data",
          "azure_api": "azure.storage.blob.BlobServiceClient().get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To identify all sensitive data stored in Azure Storage"
        },
        {
          "name": "azure_keyvault_identify_sensitive_keys",
          "azure_api": "azure.keyvault.secrets.SecretClient().get_secret()",
          "service": "azure_keyvault",
          "rationale": "To identify all sensitive keys stored in Azure Key Vault"
        },
        {
          "name": "azure_ad_identify_sensitive_accounts",
          "azure_api": "azure.ad.User().get()",
          "service": "azure_ad",
          "rationale": "To identify all sensitive accounts in Azure AD"
        },
        {
          "name": "azure_compute_identify_sensitive_configuration",
          "azure_api": "azure.compute.VirtualMachines().get()",
          "service": "azure_compute",
          "rationale": "To identify all sensitive configuration options in Azure Compute"
        }
      ],
      "mapping_notes": "The existing functions cover some aspects of the PCI Secure Software Standard requirement, such as logging, SSL connection enforcement, key substitution prevention, authentication reconfirmation, vulnerability remediation verification, public access review, inactive account management, and detailed audit event logging. However, new functions are needed to identify all sensitive data, keys, accounts, and configuration options in Azure Storage, Key Vault, AD, and Compute respectively."
    },
    {
      "compliance_id": "Requirement_5",
      "title": "PCI Secure Software Standard Requirement #5",
      "existing_functions_mapped": [
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_identify_sensitive_data",
          "azure_api": "azure.storage.blob.BlobServiceClient().get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To identify sensitive data stored in Azure Storage"
        },
        {
          "name": "azure_compute_identify_sensitive_data",
          "azure_api": "azure.mgmt.compute.ComputeManagementClient().virtual_machines.get()",
          "service": "azure_compute",
          "rationale": "To identify sensitive data processed by Azure Compute instances"
        },
        {
          "name": "azure_network_identify_sensitive_data_transmission",
          "azure_api": "azure.mgmt.network.NetworkManagementClient().network_interfaces.get()",
          "service": "azure_network",
          "rationale": "To identify sensitive data transmitted over Azure Network"
        },
        {
          "name": "azure_security_verify_sensitive_data_controls",
          "azure_api": "azure.mgmt.security.SecurityCenter().assessments.get()",
          "service": "azure_security",
          "rationale": "To verify the security controls protecting sensitive data"
        }
      ],
      "mapping_notes": "The existing functions partially cover the PCI Secure Software Standard requirement. They can identify and manage sensitive data, enforce authentication and access controls, and log audit events. However, new functions are needed to specifically identify sensitive data in storage, processing, and transmission, and to verify the security controls protecting such data."
    },
    {
      "compliance_id": "Requirement_6",
      "title": "PCI Secure Software Standard Requirement #6",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_inactive_account_management",
        "azure_ad_access_policy_enforcement"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sensitive_data_identification",
          "azure_api": "azure.security.identifySensitiveData()",
          "service": "azure_security",
          "rationale": "To programmatically identify all sensitive data stored, processed, or transmitted by the software"
        },
        {
          "name": "azure_security_sensitive_data_storage_location",
          "azure_api": "azure.security.getSensitiveDataStorageLocation()",
          "service": "azure_security",
          "rationale": "To programmatically identify where sensitive data is stored"
        },
        {
          "name": "azure_security_sensitive_data_protection_controls",
          "azure_api": "azure.security.getSensitiveDataProtectionControls()",
          "service": "azure_security",
          "rationale": "To programmatically identify the security controls that are implemented to protect sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions can partially cover the PCI Secure Software Standard requirement #6. However, there are no existing functions that can programmatically identify all sensitive data stored, processed, or transmitted by the software, identify where sensitive data is stored, and identify the security controls that are implemented to protect sensitive data. Therefore, new functions are needed to fully cover this requirement."
    },
    {
      "compliance_id": "Requirement_7",
      "title": "PCI Secure Software Standard Requirement #7",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_ad_authentication_reconfirm_days_not_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_list_user_accounts",
          "azure_api": "azure.ad.user_accounts.list()",
          "service": "azure_ad",
          "rationale": "To identify all the accounts supported by the software, including both default and user-created accounts"
        },
        {
          "name": "azure_ad_list_authentication_credentials",
          "azure_api": "azure.ad.authentication_credentials.list()",
          "service": "azure_ad",
          "rationale": "To identify all the authentication credentials supported by the software, including both default and user-created credentials"
        }
      ],
      "mapping_notes": "The existing functions can enforce MFA and reconfirm authentication for Azure AD accounts, and manage inactive accounts. However, they do not provide a way to programmatically list all user accounts and authentication credentials supported by the software. Therefore, two new functions are proposed: azure_ad_list_user_accounts and azure_ad_list_authentication_credentials."
    },
    {
      "compliance_id": "Requirement_8",
      "title": "PCI Secure Software Standard Requirement #8",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_storage_information_assets_secure_reuse_disposal"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sensitive_data_identification",
          "azure_api": "azure.security.identify_sensitive_data()",
          "service": "azure_security",
          "rationale": "To identify all sensitive data stored, processed, or transmitted by the software"
        },
        {
          "name": "azure_security_sensitive_data_storage_location_identification",
          "azure_api": "azure.security.identify_sensitive_data_storage_location()",
          "service": "azure_security",
          "rationale": "To identify where sensitive data is stored, including temporary, semi-permanent, and non-volatile storage"
        },
        {
          "name": "azure_security_sensitive_data_protection_controls_identification",
          "azure_api": "azure.security.identify_sensitive_data_protection_controls()",
          "service": "azure_security",
          "rationale": "To identify the security controls that are implemented to protect sensitive data"
        },
        {
          "name": "azure_security_sensitive_data_transaction_types_identification",
          "azure_api": "azure.security.identify_sensitive_data_transaction_types()",
          "service": "azure_security",
          "rationale": "To identify the transaction types and/or card data elements that are supported by the software"
        },
        {
          "name": "azure_security_sensitive_data_cryptographic_implementations_identification",
          "azure_api": "azure.security.identify_sensitive_data_cryptographic_implementations()",
          "service": "azure_security",
          "rationale": "To identify the cryptographic implementations that are supported by the software"
        },
        {
          "name": "azure_security_sensitive_data_accounts_credentials_identification",
          "azure_api": "azure.security.identify_sensitive_data_accounts_credentials()",
          "service": "azure_security",
          "rationale": "To identify the accounts and authentication credentials supported by the software"
        },
        {
          "name": "azure_security_sensitive_data_configuration_options_identification",
          "azure_api": "azure.security.identify_sensitive_data_configuration_options()",
          "service": "azure_security",
          "rationale": "To identify the configuration options provided by the software that can impact sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully identify all sensitive data, its storage locations, protection controls, transaction types, cryptographic implementations, accounts and credentials, and configuration options that can impact sensitive data."
    },
    {
      "compliance_id": "Requirement_9",
      "title": "PCI Secure Software Standard Requirement #9",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "storage_blob_access_public_access_disabled",
        "storage_information_assets_secure_reuse_disposal",
        "azure_monitor_detailed_audit_event_logging",
        "azure_policies_unauthorized_components_detection_interval",
        "azure_ad_global_administrator_mfa_required"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sensitive_function_resource_identification",
          "azure_api": "azure.security.identify_sensitive_functions_resources()",
          "service": "azure_security",
          "rationale": "To programmatically identify all sensitive functions and resources provided or used by the software"
        },
        {
          "name": "azure_security_sensitive_data_storage_location_identification",
          "azure_api": "azure.security.identify_sensitive_data_storage_location()",
          "service": "azure_security",
          "rationale": "To programmatically identify how and where the sensitive data associated with these functions and resources is stored"
        },
        {
          "name": "azure_security_third_party_software_compliance_check",
          "azure_api": "azure.security.check_third_party_software_compliance()",
          "service": "azure_security",
          "rationale": "To programmatically check if third-party software or systems providing sensitive functions or resources correctly follow available guidance"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #9. They help in enforcing access policies, managing inactive accounts, preventing key substitution, reconfirming authentication, and monitoring for unauthorized components. However, new functions are needed to specifically identify sensitive functions and resources, their data storage locations, and to check the compliance of third-party software or systems."
    },
    {
      "compliance_id": "Requirement_11",
      "title": "PCI Secure Software Standard Requirement #11",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sensitive_functions_resources_identification",
          "azure_api": "azure.security.identify_sensitive_functions_resources()",
          "service": "azure_security",
          "rationale": "To programmatically identify all sensitive functions and resources provided or used by the software"
        },
        {
          "name": "azure_storage_sensitive_data_storage_location",
          "azure_api": "azure.storage.get_sensitive_data_storage_location()",
          "service": "azure_storage",
          "rationale": "To programmatically maintain information on where the sensitive data associated with the functions and resources is stored"
        },
        {
          "name": "azure_security_third_party_software_compliance_check",
          "azure_api": "azure.security.check_third_party_software_compliance()",
          "service": "azure_security",
          "rationale": "To programmatically confirm that the software correctly follows available guidance for the third-party software"
        }
      ],
      "mapping_notes": "The existing Azure functions can partially cover the PCI Secure Software Standard requirement #11. They can enforce access policies, review public access to storage, verify vulnerability remediation, prevent key substitution, enforce MFA for non-console access, prevent instance creation in unused regions, reconfirm authentication every non-zero number of days, and log detailed audit events. However, new functions are needed to fully cover the requirement, including identifying all sensitive functions and resources, maintaining information on where sensitive data is stored, and confirming compliance with third-party software guidance."
    },
    {
      "compliance_id": "Requirement_13",
      "title": "PCI Secure Software Standard Requirement #13",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "aad_global_administrator_mfa_required",
        "identity_accesscontrol_ephi_access_appropriate",
        "api_management_api_stage_waf_web_acl_is_expected",
        "network_route_table_no_public_routes_to_igw",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "firewall_policy_stateless_fragpackets_default_action",
        "azure_policies_unauthorized_components_detection_interval",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "dms_replication_task_logging_severity_enabled",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "purview_account_status_enabled_per_region",
        "security_policy_management_review_interval",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "cognitive_search_domain_rbac_enabled",
        "storage_electronic_protected_health_info_backup_maintenance",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_interface_exposure_verification",
          "azure_api": "azure.security.verifyInterfaceExposure()",
          "service": "azure_security",
          "rationale": "To verify and document the exposure of software interfaces and justify their use as part of the software architecture"
        },
        {
          "name": "azure_security_external_resource_authentication_verification",
          "azure_api": "azure.security.verifyExternalResourceAuthentication()",
          "service": "azure_security",
          "rationale": "To verify the implementation of authentication methods for interfaces that rely on external resources"
        },
        {
          "name": "azure_security_sensitive_data_protection_verification",
          "azure_api": "azure.security.verifySensitiveDataProtection()",
          "service": "azure_security",
          "rationale": "To verify the implementation of protection methods for sensitive data during transmission for interfaces that rely on external resources"
        },
        {
          "name": "azure_security_vulnerability_exposure_verification",
          "azure_api": "azure.security.verifyVulnerabilityExposure()",
          "service": "azure_security",
          "rationale": "To verify if any exposed interfaces have publicly disclosed vulnerabilities"
        },
        {
          "name": "azure_security_third_party_module_verification",
          "azure_api": "azure.security.verifyThirdPartyModule()",
          "service": "azure_security",
          "rationale": "To identify any third-party modules used by the software and confirm that any functions exposed by each module are disabled or justified"
        }
      ],
      "mapping_notes": "The existing Azure functions can be used to implement or verify some aspects of this PCI Secure Software Standard requirement. However, new functions are needed to fully cover the requirements, specifically for verifying and documenting the exposure of software interfaces, verifying the implementation of authentication and protection methods for interfaces that rely on external resources, verifying if any exposed interfaces have publicly disclosed vulnerabilities, and identifying any third-party modules used by the software."
    },
    {
      "compliance_id": "Requirement_14",
      "title": "PCI Secure Software Standard Requirement #14",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_interface_exposure_verification",
          "azure_api": "azure.security.verify_interface_exposure()",
          "service": "azure_security",
          "rationale": "To verify if any software APIs or other interfaces are exposed by default upon installation, initialization, or first use."
        },
        {
          "name": "azure_security_external_resource_authentication_verification",
          "azure_api": "azure.security.verify_external_resource_authentication()",
          "service": "azure_security",
          "rationale": "To verify if any of the identified interfaces rely on external resources for authentication."
        },
        {
          "name": "azure_security_external_resource_data_protection_verification",
          "azure_api": "azure.security.verify_external_resource_data_protection()",
          "service": "azure_security",
          "rationale": "To verify if any of the identified interfaces rely on external resources for the protection of sensitive data during transmission."
        },
        {
          "name": "azure_security_vulnerability_exposure_verification",
          "azure_api": "azure.security.verify_vulnerability_exposure()",
          "service": "azure_security",
          "rationale": "To verify if any of the identified interfaces expose functions or services that have publicly disclosed vulnerabilities."
        },
        {
          "name": "azure_security_third_party_module_verification",
          "azure_api": "azure.security.verify_third_party_module()",
          "service": "azure_security",
          "rationale": "To identify any third-party modules used by the software and to confirm that any such functions exposed by each module are disabled or documented and justified."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully verify the exposure of software APIs or interfaces, reliance on external resources for authentication and data protection, exposure of vulnerabilities, and use of third-party modules."
    },
    {
      "compliance_id": "Requirement_16",
      "title": "PCI Secure Software Standard Requirement #16",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "network_route_table_no_public_routes_to_igw",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "azure_policies_unauthorized_components_detection_interval",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "backup_recovery_point_retention_period",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_interface_exposure_verification",
          "azure_api": "azure.security.verifyInterfaceExposure()",
          "service": "azure_security",
          "rationale": "To verify that all exposed interfaces are documented and justified as part of the software architecture"
        },
        {
          "name": "azure_security_external_resource_authentication_verification",
          "azure_api": "azure.security.verifyExternalResourceAuthentication()",
          "service": "azure_security",
          "rationale": "To verify that methods are implemented to ensure that proper authentication remains in place for interfaces relying on external resources"
        },
        {
          "name": "azure_security_sensitive_data_protection_verification",
          "azure_api": "azure.security.verifySensitiveDataProtection()",
          "service": "azure_security",
          "rationale": "To verify that methods are implemented to ensure proper protection remains in place for interfaces relying on external resources for the protection of sensitive data during transmission"
        },
        {
          "name": "azure_security_vulnerability_exposure_verification",
          "azure_api": "azure.security.verifyVulnerabilityExposure()",
          "service": "azure_security",
          "rationale": "To verify whether any of the interfaces expose functions or services that have publicly disclosed vulnerabilities"
        },
        {
          "name": "azure_security_third_party_module_verification",
          "azure_api": "azure.security.verifyThirdPartyModule()",
          "service": "azure_security",
          "rationale": "To identify any third-party modules used by the software and confirm that any such functions exposed by each module are disabled, unable to be accessed through mitigation methods implemented by the software, or formally documented and justified by the software vendor"
        }
      ],
      "mapping_notes": "The existing Azure functions provide partial coverage for the PCI Secure Software Standard Requirement #16. However, new functions are needed to fully cover the requirement, specifically for verifying the exposure of interfaces, the implementation of authentication and protection methods for interfaces relying on external resources, the exposure of vulnerabilities, and the use of third-party modules."
    },
    {
      "compliance_id": "Requirement_17",
      "title": "PCI Secure Software Standard Requirement #17",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "network_route_table_no_public_routes_to_igw",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "purview_account_status_enabled_per_region",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "cognitive_search_domain_rbac_enabled",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "functionapp_settings_match_expected",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_interface_exposure_verification",
          "azure_api": "azure.security.verifyInterfaceExposure()",
          "service": "Azure Security",
          "rationale": "To verify and document all exposed interfaces and their justification as part of the software architecture"
        },
        {
          "name": "azure_security_external_resource_authentication_verification",
          "azure_api": "azure.security.verifyExternalResourceAuthentication()",
          "service": "Azure Security",
          "rationale": "To confirm that proper authentication remains in place for interfaces that rely on external resources for authentication"
        },
        {
          "name": "azure_security_sensitive_data_protection_verification",
          "azure_api": "azure.security.verifySensitiveDataProtection()",
          "service": "Azure Security",
          "rationale": "To confirm that proper protection remains in place for interfaces that rely on external resources for the protection of sensitive data during transmission"
        },
        {
          "name": "azure_security_vulnerability_exposure_verification",
          "azure_api": "azure.security.verifyVulnerabilityExposure()",
          "service": "Azure Security",
          "rationale": "To determine whether any of the interfaces expose functions or services that have publicly disclosed vulnerabilities"
        },
        {
          "name": "azure_security_third_party_module_verification",
          "azure_api": "azure.security.verifyThirdPartyModule()",
          "service": "Azure Security",
          "rationale": "To identify any third-party modules used by the software and confirm that any such functions exposed by each module are disabled, unable to be accessed, or formally documented and justified"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #17. However, new functions are needed to fully cover the requirement, particularly for verifying and documenting all exposed interfaces, confirming proper authentication and protection for interfaces that rely on external resources, determining vulnerability exposure, and verifying third-party module usage."
    },
    {
      "compliance_id": "Requirement_18",
      "title": "PCI Secure Software Standard Requirement #18",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "aad_global_administrator_mfa_required",
        "identity_accesscontrol_ephi_access_appropriate",
        "api_management_api_stage_waf_web_acl_is_expected",
        "network_route_table_no_public_routes_to_igw",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "firewall_policy_stateless_fragpackets_default_action",
        "azure_policies_unauthorized_components_detection_interval",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "dms_replication_task_logging_severity_enabled",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "purview_account_status_enabled_per_region",
        "security_policy_management_review_interval",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "cognitive_search_domain_rbac_enabled",
        "storage_electronic_protected_health_info_backup_maintenance",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_interface_exposure_verification",
          "azure_api": "azure.security.verify_interface_exposure()",
          "service": "Azure Security",
          "rationale": "To verify and document the exposure of software interfaces as part of the software architecture"
        },
        {
          "name": "azure_security_external_resource_authentication_verification",
          "azure_api": "azure.security.verify_external_resource_authentication()",
          "service": "Azure Security",
          "rationale": "To verify the implementation of methods ensuring proper authentication with external resources"
        },
        {
          "name": "azure_security_external_resource_data_protection_verification",
          "azure_api": "azure.security.verify_external_resource_data_protection()",
          "service": "Azure Security",
          "rationale": "To verify the implementation of methods ensuring proper protection of sensitive data during transmission with external resources"
        },
        {
          "name": "azure_security_vulnerability_exposure_verification",
          "azure_api": "azure.security.verify_vulnerability_exposure()",
          "service": "Azure Security",
          "rationale": "To verify whether exposed interfaces have publicly disclosed vulnerabilities"
        },
        {
          "name": "azure_security_third_party_module_verification",
          "azure_api": "azure.security.verify_third_party_module()",
          "service": "Azure Security",
          "rationale": "To identify and verify the use of third-party modules and their exposed functions"
        }
      ],
      "mapping_notes": "The existing Azure functions can partially cover the requirements of PCI Secure Software Standard Requirement #18. However, new functions are needed to fully cover the requirements, especially for verifying and documenting the exposure of software interfaces, verifying the implementation of methods ensuring proper authentication and data protection with external resources, verifying whether exposed interfaces have publicly disclosed vulnerabilities, and identifying and verifying the use of third-party modules and their exposed functions."
    },
    {
      "compliance_id": "Requirement_19",
      "title": "PCI Secure Software Standard Requirement #19",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "purview_account_status_enabled_per_region",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "functionapp_settings_match_expected",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_controls_initialization_check",
          "azure_api": "azure.security.controls.initialization_check()",
          "service": "Azure Security",
          "rationale": "To verify that all security controls are enabled upon software installation, initialization, or first use."
        },
        {
          "name": "azure_security_controls_user_input_check",
          "azure_api": "azure.security.controls.user_input_check()",
          "service": "Azure Security",
          "rationale": "To verify that user input or interaction is required to enable software security controls, features, or functions."
        }
      ],
      "mapping_notes": "The existing Azure functions can help in enforcing and verifying various security controls, features, and functions. However, there is no specific function to check if all these controls are enabled upon software installation, initialization, or first use. Also, there is no function to check if user input or interaction is required to enable these controls. Therefore, new functions 'azure_security_controls_initialization_check' and 'azure_security_controls_user_input_check' are suggested."
    },
    {
      "compliance_id": "Requirement_20",
      "title": "PCI Secure Software Standard Requirement #20",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "backup_recovery_point_encrypted_sse_cmk",
        "firewall_policy_stateless_fragpackets_default_action",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_controls_initialization_verification",
          "azure_api": "azure.security.controls.verifyInitialization()",
          "service": "Azure Security",
          "rationale": "To verify that all security controls are enabled upon software installation, initialization, or first use"
        },
        {
          "name": "azure_security_controls_user_input_verification",
          "azure_api": "azure.security.controls.verifyUserInput()",
          "service": "Azure Security",
          "rationale": "To verify that user input or interaction is required to enable software security controls"
        }
      ],
      "mapping_notes": "The existing Azure functions can help to ensure that security controls are enabled and properly configured. However, they do not cover the full scope of the PCI Secure Software Standard requirement. Specifically, they do not verify that all security controls are enabled upon software installation, initialization, or first use, or that user input or interaction is required to enable software security controls. Therefore, two new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_21",
      "title": "PCI Secure Software Standard Requirement #21",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_controls_initialization_verification",
          "azure_api": "azure.security.controls.initialization.verify()",
          "service": "Azure Security",
          "rationale": "To verify that all security controls, features, and functions are enabled upon software installation, initialization, or first use."
        },
        {
          "name": "azure_security_controls_user_input_verification",
          "azure_api": "azure.security.controls.user_input.verify()",
          "service": "Azure Security",
          "rationale": "To verify that user input or interaction is required to enable software security controls, features, or functions."
        }
      ],
      "mapping_notes": "The existing Azure functions can help in enforcing and verifying some of the security controls, features, and functions. However, there is no specific function to verify that all security controls, features, and functions are enabled upon software installation, initialization, or first use, and that user input or interaction is required to enable software security controls, features, or functions. Therefore, new functions are proposed to cover these requirements."
    },
    {
      "compliance_id": "Requirement_22",
      "title": "PCI Secure Software Standard Requirement #22",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_check_default_credentials",
          "azure_api": "azure.identity.DefaultAzureCredential()",
          "service": "Azure Identity",
          "rationale": "To check if default credentials are used after installation, initialization, or first use"
        },
        {
          "name": "azure_keyvault_check_default_keys",
          "azure_api": "azure.keyvault.secrets.SecretClient.get_secret()",
          "service": "Azure Key Vault",
          "rationale": "To check if default keys are used after installation, initialization, or first use"
        },
        {
          "name": "azure_compute_check_builtin_account_credentials",
          "azure_api": "azure.mgmt.compute.ComputeManagementClient.virtual_machines.get()",
          "service": "Azure Compute",
          "rationale": "To check if default credentials or keys for built-in accounts are used after installation, initialization, or first use"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They can check if Azure AD authentication is configured, if reconfirmation days are not zero, if key substitution is prevented, and if MFA enforcement is enabled for non-console access. However, there are no existing functions to check if default credentials or keys are used after installation, initialization, or first use. Therefore, new functions are needed to fully comply with the requirement."
    },
    {
      "compliance_id": "Requirement_23",
      "title": "PCI Secure Software Standard Requirement #23",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_access_policy_enforcement",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_check_default_credential_usage",
          "azure_api": "azure.ad.authentication.checkDefaultCredentialUsage()",
          "service": "Azure Active Directory",
          "rationale": "To ensure that no default credentials are being used after installation, initialization, or first use."
        },
        {
          "name": "azure_keyvault_check_key_usage",
          "azure_api": "azure.keyvault.keys.checkKeyUsage()",
          "service": "Azure Key Vault",
          "rationale": "To ensure that cryptographic keys used for authentication are not used for other purposes, such as protecting sensitive data during storage and transmission."
        },
        {
          "name": "azure_compute_check_builtin_account_key_usage",
          "azure_api": "azure.compute.instances.checkBuiltinAccountKeyUsage()",
          "service": "Azure Compute",
          "rationale": "To ensure that default authentication credentials or keys for built-in accounts are not used by the authentication and access control mechanisms implemented by the software after software installation, initialization, or first use."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #23. Functions for checking default credential usage, key usage for different purposes, and built-in account key usage need to be developed to fully meet the requirement. The new functions suggested would use Azure SDK/API calls to programmatically check these aspects and ensure compliance."
    },
    {
      "compliance_id": "Requirement_24",
      "title": "PCI Secure Software Standard Requirement #24",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_default_credential_replacement",
          "azure_api": "azure.ad.credentials.replace_default()",
          "service": "Azure Active Directory",
          "rationale": "To ensure that default credentials are replaced after first use"
        },
        {
          "name": "azure_keyvault_default_key_replacement",
          "azure_api": "azure.keyvault.keys.replace_default()",
          "service": "Azure Key Vault",
          "rationale": "To ensure that default keys are replaced after first use"
        },
        {
          "name": "azure_storage_default_sas_token_replacement",
          "azure_api": "azure.storage.sas.replace_default()",
          "service": "Azure Storage",
          "rationale": "To ensure that default SAS tokens are replaced after first use"
        },
        {
          "name": "azure_compute_default_ssh_key_replacement",
          "azure_api": "azure.compute.ssh_keys.replace_default()",
          "service": "Azure Compute",
          "rationale": "To ensure that default SSH keys are replaced after first use"
        }
      ],
      "mapping_notes": "The existing functions can help enforce MFA, configure Azure AD authentication, manage inactive accounts, and prevent key substitution. However, they do not cover the replacement of default credentials, keys, SAS tokens, and SSH keys after first use. New functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_25",
      "title": "PCI Secure Software Standard Requirement #25",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_inactive_account_management",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_prevent_key_substitution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_default_credential_check",
          "azure_api": "azure.identity.DefaultAzureCredential()",
          "service": "azure_ad",
          "rationale": "To check if default credentials are being used after installation, initialization, or first use."
        },
        {
          "name": "azure_keyvault_default_key_check",
          "azure_api": "azure.keyvault.keys.KeyClient()",
          "service": "azure_keyvault",
          "rationale": "To check if default keys are being used after installation, initialization, or first use."
        },
        {
          "name": "azure_storage_default_sas_token_check",
          "azure_api": "azure.storage.blob.BlobServiceClient()",
          "service": "azure_storage",
          "rationale": "To check if default SAS tokens are being used after installation, initialization, or first use."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help in configuring and enforcing Azure AD authentication, managing inactive accounts, reconfirming authentication, and preventing key substitution in Azure Key Vault. However, there are no existing functions to specifically check if default credentials or keys are being used after installation, initialization, or first use. Therefore, new functions are needed to fully comply with the requirement."
    },
    {
      "compliance_id": "Requirement_26",
      "title": "PCI Secure Software Standard Requirement #26",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_default_credentials_check",
          "azure_api": "azure.ad.credentials().default()",
          "service": "azure_ad",
          "rationale": "To check if default credentials are being used"
        },
        {
          "name": "azure_keyvault_key_usage_check",
          "azure_api": "azure.keyvault.keys().usage()",
          "service": "azure_keyvault",
          "rationale": "To check if keys used for authentication are used for other purposes"
        },
        {
          "name": "azure_compute_instance_default_credentials_check",
          "azure_api": "azure.compute.instances().default_credentials()",
          "service": "azure_compute",
          "rationale": "To check if default credentials are being used in compute instances"
        }
      ],
      "mapping_notes": "The existing functions cover some aspects of the requirement, such as checking for Azure AD authentication configuration, MFA enforcement, and key substitution prevention in Azure Key Vault. However, there are no existing functions that specifically check if default credentials are being used or if keys used for authentication are used for other purposes. Hence, new functions are needed for these checks."
    },
    {
      "compliance_id": "Requirement_27",
      "title": "PCI Secure Software Standard Requirement #27",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_monitor_detailed_audit_event_logging",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "network_security_group_association_required",
        "storage_blob_access_public_access_disabled",
        "storage_queue_enable_logging_for_read_write_delete",
        "virtual_machine_diagnostic_settings_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_software_required_privileges_validation",
          "azure_api": "azure.compute.software.get_required_privileges()",
          "service": "azure_compute",
          "rationale": "To validate the privileges and resources required by the software"
        },
        {
          "name": "azure_compute_software_access_permissions_check",
          "azure_api": "azure.compute.software.get_access_permissions()",
          "service": "azure_compute",
          "rationale": "To check the access permissions and privileges of the software and its resources"
        },
        {
          "name": "azure_compute_software_legacy_features_check",
          "azure_api": "azure.compute.software.get_legacy_features_usage()",
          "service": "azure_compute",
          "rationale": "To confirm that the software does not use legacy features and only implements recent and secured functionality"
        }
      ],
      "mapping_notes": "The existing functions provide partial coverage for the PCI Secure Software Standard requirement. They help in enforcing access policies, reconfirming authentication days, preventing key substitution, monitoring detailed audit event logging, reviewing public access, and enabling logging for read/write/delete operations. However, new functions are needed to specifically validate the required privileges and resources by the software, check the access permissions and privileges of the software and its resources, and confirm that the software does not use legacy features and only implements recent and secured functionality."
    },
    {
      "compliance_id": "Requirement_28",
      "title": "PCI Secure Software Standard Requirement #28",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "network_security_group_association_required",
        "network_secure_transmission_policy_established",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_limit_resource_access",
          "azure_api": "azure.compute.limitAccess()",
          "service": "azure_compute",
          "rationale": "To limit the privileges and resources requested by the software from its execution environment"
        },
        {
          "name": "azure_storage_limit_resource_access",
          "azure_api": "azure.storage.limitAccess()",
          "service": "azure_storage",
          "rationale": "To limit the privileges and resources requested by the software from its execution environment"
        },
        {
          "name": "azure_ad_limit_privilege_access",
          "azure_api": "azure.ad.limitAccess()",
          "service": "azure_ad",
          "rationale": "To limit the privileges and resources requested by the software from its execution environment"
        },
        {
          "name": "azure_compute_verify_legacy_feature_usage",
          "azure_api": "azure.compute.verifyLegacyFeatureUsage()",
          "service": "azure_compute",
          "rationale": "To ensure that software execution environment does not use legacy features"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help in enforcing access policies, managing inactive accounts, preventing key substitution, and auditing. However, new functions are needed to limit the privileges and resources requested by the software from its execution environment and to verify the usage of legacy features in the software execution environment."
    },
    {
      "compliance_id": "Requirement_29",
      "title": "PCI Secure Software Standard Requirement #29",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "network_security_group_association_required",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_software_privilege_limitation",
          "azure_api": "azure.compute.software_privilege_limitation()",
          "service": "azure_compute",
          "rationale": "To programmatically limit the privileges and resources requested by the software from its execution environment"
        },
        {
          "name": "azure_compute_software_resource_access_limitation",
          "azure_api": "azure.compute.software_resource_access_limitation()",
          "service": "azure_compute",
          "rationale": "To programmatically limit the resources accessed by the software from its execution environment"
        },
        {
          "name": "azure_compute_software_legacy_feature_usage_detection",
          "azure_api": "azure.compute.software_legacy_feature_usage_detection()",
          "service": "azure_compute",
          "rationale": "To programmatically detect if the software execution environment provides legacy features for use by older versions of the software"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #29. They help in enforcing access policies, reconfirming authentication, managing inactive accounts, enforcing MFA, preventing key substitution, guiding key distribution, remediating vulnerabilities, reviewing public access, and prohibiting public access with private endpoints or access restrictions. However, new functions are needed to specifically limit the privileges and resources requested by the software, limit the resources accessed by the software, and detect the usage of legacy features in the software execution environment."
    },
    {
      "compliance_id": "Requirement_30",
      "title": "PCI Secure Software Standard Requirement #30",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_ad_access_policy_enforcement",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_software_execution_environment_security_check",
          "azure_api": "azure.compute.check_execution_environment()",
          "service": "azure_compute",
          "rationale": "To check if the software execution environment provides legacy features for use by older versions of the software and confirm that these are not used, and that only recent and secured functionality is implemented."
        },
        {
          "name": "azure_compute_software_privilege_and_resource_limit_check",
          "azure_api": "azure.compute.check_privilege_and_resource_limit()",
          "service": "azure_compute",
          "rationale": "To examine evidence to identify the privileges and resources required by the software and to confirm that information is maintained that describes and reasonably justifies all privileges and resources required."
        },
        {
          "name": "azure_compute_software_access_permission_check",
          "azure_api": "azure.compute.check_access_permission()",
          "service": "azure_compute",
          "rationale": "To test the software to confirm that access permissions and privileges are assigned according to the evidence examined."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #30. However, there are no existing Azure functions that directly map to the requirement of limiting the privileges and resources requested by the software from its execution environment to those necessary for the operation of the software. New functions are needed to check the software execution environment, privileges and resources, and access permissions."
    },
    {
      "compliance_id": "Requirement_31",
      "title": "PCI Secure Software Standard Requirement #31",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "network_security_group_association_required",
        "sqlserver_azuread_authentication_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_default_account_privilege_verification",
          "azure_api": "azure.ad.accounts.get_default_accounts()",
          "service": "Azure Active Directory",
          "rationale": "To identify all default accounts provided by the software and confirm that the privileges assigned to these accounts are justified and reasonable."
        },
        {
          "name": "azure_ad_api_interface_protection",
          "azure_api": "azure.ad.apis.get_protected_interfaces()",
          "service": "Azure Active Directory",
          "rationale": "To confirm that exposed interfaces, such as APIs, are protected from attempts by unauthorized users to modify account privileges and elevate user access rights."
        }
      ],
      "mapping_notes": "The existing Azure functions provide a partial coverage for the PCI Secure Software Standard Requirement #31. They help in enforcing access policies, authenticating and managing accounts, and monitoring security vulnerabilities. However, there are no specific functions to verify the privileges of default accounts and protect exposed interfaces. Therefore, new functions 'azure_ad_default_account_privilege_verification' and 'azure_ad_api_interface_protection' are needed."
    },
    {
      "compliance_id": "Requirement_32",
      "title": "PCI Secure Software Standard Requirement #32",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "sqlserver_azuread_authentication_configured",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_storage_public_access_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_default_account_privilege_verification",
          "azure_api": "azure.ad.accounts.get_default_privileges()",
          "service": "Azure Active Directory",
          "rationale": "To verify that default accounts have only necessary privileges"
        },
        {
          "name": "azure_ad_default_account_exposed_interface_protection",
          "azure_api": "azure.ad.accounts.get_exposed_interfaces_protection_status()",
          "service": "Azure Active Directory",
          "rationale": "To verify that exposed interfaces are protected from unauthorized access"
        }
      ],
      "mapping_notes": "The existing functions cover aspects of account management, authentication, and access control. However, there is no specific function to verify the privileges of default accounts or to check the protection status of exposed interfaces. Therefore, two new functions are suggested to cover these aspects."
    },
    {
      "compliance_id": "Requirement_34",
      "title": "PCI Secure Software Standard Requirement #34",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "storage_blob_access_public_access_disabled",
        "azure_storage_public_access_review",
        "backup_recovery_point_retention_period",
        "azure_ad_inactive_account_management",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_retention_period",
          "azure_api": "azure.storage.set_retention_period()",
          "service": "azure_storage",
          "rationale": "To control the retention period of sensitive data stored in Azure Storage"
        },
        {
          "name": "azure_storage_sensitive_data_retention_justification",
          "azure_api": "azure.storage.set_retention_justification()",
          "service": "azure_storage",
          "rationale": "To provide justification for the retention of sensitive data in Azure Storage"
        },
        {
          "name": "azure_storage_sensitive_data_debugging_protection",
          "azure_api": "azure.storage.set_debugging_protection()",
          "service": "azure_storage",
          "rationale": "To ensure sensitive data is protected during debugging, error finding or testing of systems"
        },
        {
          "name": "azure_storage_sensitive_data_user_configurable_retention",
          "azure_api": "azure.storage.set_user_configurable_retention()",
          "service": "azure_storage",
          "rationale": "To allow user configuration of the retention period of sensitive data in Azure Storage"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the requirements of the PCI Secure Software Standard. However, there are gaps in the ability to control and justify the retention period of sensitive data, protect sensitive data during debugging, and allow user configuration of the retention period. New functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_35",
      "title": "PCI Secure Software Standard Requirement #35",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_storage_public_access_review",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_retention_limit",
          "azure_api": "azure.storage.set_retention_limit()",
          "service": "azure_storage",
          "rationale": "To programmatically set and enforce the retention limit for sensitive data in Azure Storage"
        },
        {
          "name": "azure_storage_sensitive_data_retention_justification",
          "azure_api": "azure.storage.get_retention_justification()",
          "service": "azure_storage",
          "rationale": "To programmatically retrieve the justification for retaining sensitive data in Azure Storage"
        },
        {
          "name": "azure_storage_sensitive_data_debugging_protection",
          "azure_api": "azure.storage.set_debugging_protection()",
          "service": "azure_storage",
          "rationale": "To programmatically set and enforce protection of sensitive data during debugging in Azure Storage"
        },
        {
          "name": "azure_storage_sensitive_data_deletion_after_debugging",
          "azure_api": "azure.storage.delete_after_debugging()",
          "service": "azure_storage",
          "rationale": "To programmatically ensure secure deletion of sensitive data after debugging in Azure Storage"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #35. They can help in managing access to sensitive data, setting retention periods, reviewing public access, and logging events. However, new functions are needed to fully comply with the requirement, specifically for setting and justifying retention limits, protecting sensitive data during debugging, and securely deleting sensitive data after debugging."
    },
    {
      "compliance_id": "Requirement_36",
      "title": "PCI Secure Software Standard Requirement #36",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "backup_recovery_point_retention_period",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_retention_control",
          "azure_api": "azure.storage.set_retention_policy()",
          "service": "azure_storage",
          "rationale": "To control the retention period of sensitive data in storage, ensuring it is only kept for the necessary duration."
        },
        {
          "name": "azure_storage_sensitive_data_debugging_protection",
          "azure_api": "azure.storage.set_debugging_protection()",
          "service": "azure_storage",
          "rationale": "To ensure sensitive data is protected during debugging, error finding, or testing of systems."
        },
        {
          "name": "azure_storage_sensitive_data_deletion_after_closure",
          "azure_api": "azure.storage.set_auto_delete_after_closure()",
          "service": "azure_storage",
          "rationale": "To ensure sensitive data is securely deleted after the software is closed."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They can control public access to sensitive data, prevent key substitution, review public access, reconfirm authentication, control the retention period of recovery points, and verify vulnerability remediation. However, there are no existing functions to control the retention period of sensitive data, protect sensitive data during debugging, or delete sensitive data after software closure. Therefore, new functions are needed for these purposes."
    },
    {
      "compliance_id": "Requirement_37",
      "title": "PCI Secure Software Standard Requirement #37",
      "existing_functions_mapped": [
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_storage_public_access_review",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_retention_configurable",
          "azure_api": "azure.storage.set_retention_period()",
          "service": "azure_storage",
          "rationale": "To allow users to configure the retention period of sensitive data"
        },
        {
          "name": "azure_storage_data_retention_justification",
          "azure_api": "azure.storage.get_retention_justification()",
          "service": "azure_storage",
          "rationale": "To provide evidence that the retention of sensitive data is justified and reasonable"
        },
        {
          "name": "azure_storage_debugging_data_protection",
          "azure_api": "azure.storage.set_debugging_data_protection()",
          "service": "azure_storage",
          "rationale": "To ensure that sensitive data stored for debugging, error finding or testing of systems is protected"
        },
        {
          "name": "azure_storage_debugging_data_removal",
          "azure_api": "azure.storage.remove_debugging_data()",
          "service": "azure_storage",
          "rationale": "To ensure that sensitive data stored for debugging is securely deleted when the software is closed"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the requirements of the PCI Secure Software Standard Requirement #37. However, new functions are needed to fully comply with the requirement, specifically around allowing users to configure the retention period of sensitive data, providing evidence that the retention of sensitive data is justified and reasonable, ensuring that sensitive data stored for debugging, error finding or testing of systems is protected, and ensuring that sensitive data stored for debugging is securely deleted when the software is closed."
    },
    {
      "compliance_id": "Requirement_38",
      "title": "PCI Secure Software Standard Requirement #38",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "backup_recovery_point_encrypted_sse_cmk",
        "backup_recovery_point_retention_period",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_transient_data_deletion_trigger",
          "azure_api": "azure.storage.delete_transient_data()",
          "service": "azure_storage",
          "rationale": "To programmatically delete transient sensitive data after it has served its purpose"
        },
        {
          "name": "azure_storage_transient_data_retention_justification",
          "azure_api": "azure.storage.get_transient_data_retention_justification()",
          "service": "azure_storage",
          "rationale": "To programmatically retrieve the justification for retaining transient sensitive data"
        },
        {
          "name": "azure_storage_transient_data_in_memory_check",
          "azure_api": "azure.storage.check_transient_data_in_memory()",
          "service": "azure_storage",
          "rationale": "To programmatically check if transient sensitive data is stored only in memory during the operation of the software"
        },
        {
          "name": "azure_storage_debugging_state_termination",
          "azure_api": "azure.storage.terminate_debugging_state()",
          "service": "azure_storage",
          "rationale": "To programmatically ensure that the debugging state is terminated when the software is closed, requiring explicit re-enablement when the software is next executed"
        }
      ],
      "mapping_notes": "The existing functions can help with logging, encryption, and retention of data, but new functions are needed to specifically handle transient sensitive data, including its deletion, retention justification, in-memory storage, and debugging state termination."
    },
    {
      "compliance_id": "Requirement_39",
      "title": "PCI Secure Software Standard Requirement #39",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_transient_data_retention_limit",
          "azure_api": "azure.storage.set_transient_data_retention_limit()",
          "service": "azure_storage",
          "rationale": "To ensure transient sensitive data is retained only for the duration necessary to fulfill a legitimate business purpose"
        },
        {
          "name": "azure_storage_secure_transient_data_deletion",
          "azure_api": "azure.storage.set_secure_transient_data_deletion()",
          "service": "azure_storage",
          "rationale": "To ensure secure deletion of transient sensitive data after its purpose is fulfilled"
        },
        {
          "name": "azure_storage_debugging_state_termination",
          "azure_api": "azure.storage.set_debugging_state_termination()",
          "service": "azure_storage",
          "rationale": "To ensure closure of the software results in the termination of the debugging state and secure deletion of any transient sensitive data"
        }
      ],
      "mapping_notes": "The existing functions can help in logging and monitoring the access and usage of sensitive data, preventing key substitution, and reviewing public access to storage. However, there are no specific functions to control the retention limit of transient sensitive data, ensure secure deletion of such data, or manage the debugging state. Therefore, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "Requirement_41",
      "title": "PCI Secure Software Standard Requirement #41",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_storage_public_access_review",
        "backup_recovery_point_retention_period",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_transient_data_retention_control",
          "azure_api": "azure.storage.set_transient_data_retention_policy()",
          "service": "azure_storage",
          "rationale": "To control the retention period of transient sensitive data in Azure Storage"
        },
        {
          "name": "azure_storage_transient_data_secure_deletion",
          "azure_api": "azure.storage.delete_transient_data_securely()",
          "service": "azure_storage",
          "rationale": "To securely delete transient sensitive data from Azure Storage"
        },
        {
          "name": "azure_storage_debugging_data_protection",
          "azure_api": "azure.storage.protect_debugging_data()",
          "service": "azure_storage",
          "rationale": "To protect transient sensitive data stored for debugging purposes in Azure Storage"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard Requirement #41. However, there are no existing functions that directly control the retention period of transient sensitive data, securely delete this data, or protect this data when it is stored for debugging purposes. Therefore, new functions are needed to fully comply with this requirement."
    },
    {
      "compliance_id": "Requirement_42",
      "title": "PCI Secure Software Standard Requirement #42",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_security_vulnerability_remediation_verification",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_at_rest",
          "azure_api": "azure.storage.blob.BlobServiceClient()",
          "service": "azure_storage",
          "rationale": "To ensure the encryption of data at rest in Azure storage"
        },
        {
          "name": "azure_storage_data_encryption_in_transit",
          "azure_api": "azure.storage.blob.BlobServiceClient()",
          "service": "azure_storage",
          "rationale": "To ensure the encryption of data in transit in Azure storage"
        },
        {
          "name": "azure_keyvault_key_rotation",
          "azure_api": "azure.keyvault.keys.KeyClient()",
          "service": "azure_keyvault",
          "rationale": "To ensure the regular rotation of keys in Azure Key Vault"
        }
      ],
      "mapping_notes": "The existing functions can partially cover the PCI Secure Software Standard requirement #42. However, there are gaps in ensuring the encryption of data both at rest and in transit in Azure storage, and in ensuring the regular rotation of keys in Azure Key Vault. Therefore, new functions are needed to cover these aspects."
    },
    {
      "compliance_id": "Requirement_43",
      "title": "PCI Secure Software Standard Requirement #43",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "azure_monitor_detailed_audit_event_logging",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_verification",
          "azure_api": "azure.storage.blob.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To verify that sensitive data stored in Azure Storage is encrypted at rest"
        },
        {
          "name": "azure_keyvault_key_cryptography_verification",
          "azure_api": "azure.keyvault.keys.KeyClient.get_key()",
          "service": "azure_keyvault",
          "rationale": "To verify that the cryptographic keys used for data encryption comply with Control Objective 7 of the PCI Secure Software Standard"
        },
        {
          "name": "azure_sql_database_data_encryption_verification",
          "azure_api": "azure.mgmt.sql.SqlManagementClient.databases.get()",
          "service": "azure_sql",
          "rationale": "To verify that sensitive data stored in Azure SQL Database is encrypted at rest"
        }
      ],
      "mapping_notes": "The existing Azure functions can help to enforce and verify some of the controls required by PCI Secure Software Standard Requirement #43, such as enforcing SSL connections, encrypting data at rest, and disabling public access to sensitive data. However, additional functions are needed to verify the encryption of sensitive data stored in Azure Storage and Azure SQL Database, and to verify the compliance of cryptographic keys used for data encryption with Control Objective 7 of the standard."
    },
    {
      "compliance_id": "Requirement_44",
      "title": "PCI Secure Software Standard Requirement #44",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "backup_recovery_point_encrypted_sse_cmk",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_verification",
          "azure_api": "azure.storage.BlobServiceClient().get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To verify that sensitive data stored in Azure Storage is encrypted"
        },
        {
          "name": "azure_keyvault_cryptography_compliance_verification",
          "azure_api": "azure.keyvault.SecretsClient().get_secret()",
          "service": "azure_keyvault",
          "rationale": "To verify that the cryptographic implementation in Azure Key Vault complies with Control Objective 7 of the PCI Secure Software Standard"
        },
        {
          "name": "azure_compute_disk_encryption_verification",
          "azure_api": "azure.compute.ComputeManagementClient().disks.get()",
          "service": "azure_compute",
          "rationale": "To verify that sensitive data stored on Azure Compute disks is encrypted"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement for protecting the confidentiality and integrity of sensitive data during retention. However, new functions are needed to verify that sensitive data stored in Azure Storage and on Azure Compute disks is encrypted, and that the cryptographic implementation in Azure Key Vault complies with the relevant standard."
    },
    {
      "compliance_id": "Requirement_45",
      "title": "PCI Secure Software Standard Requirement #45",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_at_rest",
          "azure_api": "azure.storage.blob.BlobServiceClient.set_blob_service_properties()",
          "service": "azure_storage",
          "rationale": "To ensure that sensitive data is encrypted at rest in Azure Storage"
        },
        {
          "name": "azure_storage_data_encryption_in_transit",
          "azure_api": "azure.storage.blob.BlobServiceClient.set_blob_service_properties()",
          "service": "azure_storage",
          "rationale": "To ensure that sensitive data is encrypted in transit in Azure Storage"
        },
        {
          "name": "azure_keyvault_key_rotation",
          "azure_api": "azure.keyvault.keys.KeyClient.update_key_properties()",
          "service": "azure_keyvault",
          "rationale": "To ensure that keys used for encryption are rotated regularly"
        }
      ],
      "mapping_notes": "The existing functions cover a wide range of Azure services and security controls, but there are some gaps. For example, there are no existing functions that specifically address the requirement for encryption of sensitive data at rest and in transit in Azure Storage, or the requirement for key rotation in Azure KeyVault. The new functions suggested would help to fill these gaps."
    },
    {
      "compliance_id": "Requirement_46",
      "title": "PCI Secure Software Standard Requirement #46",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_check",
          "azure_api": "azure.storage.checkEncryption()",
          "service": "azure_storage",
          "rationale": "To check if data at rest is encrypted in storage"
        },
        {
          "name": "azure_compute_data_encryption_check",
          "azure_api": "azure.compute.checkEncryption()",
          "service": "azure_compute",
          "rationale": "To check if data in transit is encrypted in compute instances"
        },
        {
          "name": "azure_keyvault_cryptography_standard_check",
          "azure_api": "azure.keyvault.checkCryptographyStandard()",
          "service": "azure_keyvault",
          "rationale": "To check if the cryptography standard used complies with Control Objective 7 of the PCI Secure Software Standard"
        }
      ],
      "mapping_notes": "The existing Azure functions cover some aspects of the PCI Secure Software Standard requirement, such as enforcing SSL connections, enabling server-side encryption, preventing key substitution, and disabling public network access. However, there are gaps in checking if data at rest and in transit is encrypted, and if the cryptography standard used complies with the PCI Secure Software Standard. New functions are needed to cover these gaps."
    },
    {
      "compliance_id": "Requirement_47",
      "title": "PCI Secure Software Standard Requirement #47",
      "existing_functions_mapped": [
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "azure_storage_public_access_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_data_deletion",
          "azure_api": "azure.storage.blob.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure the secure deletion of sensitive data in Azure Storage, a function that programmatically deletes blobs in a secure manner is required. This function should overwrite the data before deletion, ensuring it is irretrievable."
        },
        {
          "name": "azure_keyvault_delete_encryption_keys",
          "azure_api": "azure.keyvault.keys.delete_key()",
          "service": "azure_keyvault",
          "rationale": "To ensure the secure deletion of encryption keys used for sensitive data, a function that programmatically deletes keys in Azure Key Vault is required. This function should ensure the key is irretrievable after deletion."
        },
        {
          "name": "azure_storage_data_residue_forensic_check",
          "azure_api": "azure.storage.blob.list_blobs()",
          "service": "azure_storage",
          "rationale": "To ensure no sensitive data residue is left after deletion, a function that programmatically checks for any remaining blobs in Azure Storage is required. This function should provide a forensic level of detail, examining file systems at the allocation level and translating data formats to identify sensitive data elements."
        }
      ],
      "mapping_notes": "The existing functions partially cover the PCI Secure Software Standard requirement for securely deleting persistent sensitive data. However, they do not provide a complete solution as they do not ensure the data is overwritten before deletion, the encryption keys are securely deleted, or that a forensic level check is performed to ensure no data residue is left. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_48",
      "title": "PCI Secure Software Standard Requirement #48",
      "existing_functions_mapped": [
        "storage_information_assets_secure_reuse_disposal",
        "azure_storage_public_access_review",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_inactive_account_management"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_data_deletion",
          "azure_api": "azure.storage.BlobService.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure that sensitive data is securely deleted when it is no longer required, a new function that uses Azure Storage Service's delete_blob method is needed. This function should overwrite the data to render it irretrievable."
        },
        {
          "name": "azure_keyvault_delete_cryptographic_keys",
          "azure_api": "azure.keyvault.KeyVaultClient.delete_key()",
          "service": "azure_keyvault",
          "rationale": "To ensure that cryptographic keys used to encrypt sensitive data are securely deleted when they are no longer required, a new function that uses Azure Key Vault's delete_key method is needed."
        },
        {
          "name": "azure_storage_detect_data_residue",
          "azure_api": "azure.storage.BlobService.list_blobs()",
          "service": "azure_storage",
          "rationale": "To detect any non-transient sensitive data residue in the execution environment, a new function that uses Azure Storage Service's list_blobs method is needed. This function should analyze the data structures and methods used to store the sensitive data."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help in managing and reviewing the access to sensitive data, preventing key substitution, and securely reusing or disposing information assets. However, they do not provide specific methods for securely deleting sensitive data or cryptographic keys, or for detecting data residue. Therefore, new functions are needed to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_49",
      "title": "PCI Secure Software Standard Requirement #49",
      "existing_functions_mapped": [
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_deletion",
          "azure_api": "azure.storage.BlobService.delete_blob()",
          "service": "azure_storage",
          "rationale": "This function is needed to ensure that sensitive data is securely deleted when it is no longer required, as per PCI requirement 3.4.a and 3.4.b"
        },
        {
          "name": "azure_storage_check_residual_data",
          "azure_api": "azure.storage.BlobService.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "This function is needed to check for any residual sensitive data after deletion, as per PCI requirement 3.4.c"
        }
      ],
      "mapping_notes": "The existing functions 'storage_information_assets_secure_reuse_disposal' and 'backup_recovery_point_retention_period' partially cover the requirement for secure deletion of sensitive data. However, they do not fully cover the requirement for ensuring that the data is rendered unrecoverable after deletion, and for checking for residual data after deletion. Therefore, two new functions 'azure_storage_secure_deletion' and 'azure_storage_check_residual_data' are proposed to fully cover these requirements."
    },
    {
      "compliance_id": "Requirement_50",
      "title": "PCI Secure Software Standard Requirement #50",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_transient_data_deletion",
          "azure_api": "azure.storage.delete_transient_data()",
          "service": "azure_storage",
          "rationale": "To ensure that transient sensitive data is securely deleted from temporary storage facilities automatically by the software once the purpose for which it is retained is satisfied."
        },
        {
          "name": "azure_compute_memory_data_cleanup",
          "azure_api": "azure.compute.clear_memory_data()",
          "service": "azure_compute",
          "rationale": "To ensure that sensitive data which may be stored only temporarily in program memory / variables during operation of the software is securely deleted."
        },
        {
          "name": "azure_security_transient_data_residue_analysis",
          "azure_api": "azure.security.analyze_transient_data_residue()",
          "service": "azure_security",
          "rationale": "To identify any sensitive data residue in the execution environment and confirm that the methods implemented are implemented correctly and enforced for all transient sensitive data."
        }
      ],
      "mapping_notes": "The existing Azure functions can help to ensure that sensitive data is securely stored and access is controlled. However, specific functions for securely deleting transient data from temporary storage and memory, and for analyzing data residue in the execution environment, are not available and need to be implemented."
    },
    {
      "compliance_id": "Requirement_51",
      "title": "PCI Secure Software Standard Requirement #51",
      "existing_functions_mapped": [
        "azure_storage_public_access_review",
        "azure_keyvault_prevent_key_substitution",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_customer_key_guidance_distribution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_transient_data_deletion",
          "azure_api": "azure.storage.BlobService.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure that transient sensitive data is securely deleted from temporary storage facilities automatically by the software once the purpose for which it is retained is satisfied."
        },
        {
          "name": "azure_compute_memory_data_cleanup",
          "azure_api": "azure.compute.VirtualMachines.deallocate()",
          "service": "azure_compute",
          "rationale": "To ensure that sensitive data stored temporarily in program memory is securely deleted after processing is complete."
        },
        {
          "name": "azure_storage_swap_file_data_cleanup",
          "azure_api": "azure.storage.FileService.delete_file()",
          "service": "azure_storage",
          "rationale": "To ensure that sensitive data stored temporarily in swap files is securely deleted after processing is complete."
        }
      ],
      "mapping_notes": "The existing functions can help to some extent in ensuring that sensitive data is securely deleted from storage and that security vulnerabilities are remediated. However, there are no specific functions for securely deleting transient sensitive data from temporary storage facilities, program memory, and swap files. Therefore, new functions are needed for these tasks."
    },
    {
      "compliance_id": "Requirement_52",
      "title": "PCI Secure Software Standard Requirement #52",
      "existing_functions_mapped": [
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_transient_data_deletion_verification",
          "azure_api": "azure.storage.BlobServiceClient.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure that transient sensitive data is securely deleted from temporary storage facilities automatically by the software once the purpose for which it is retained is satisfied."
        },
        {
          "name": "azure_compute_memory_data_residue_check",
          "azure_api": "azure.compute.VirtualMachinesOperations.get()",
          "service": "azure_compute",
          "rationale": "To check for any sensitive data residue in the execution environment and confirm that the methods implemented are implemented correctly and enforced for all transient sensitive data."
        },
        {
          "name": "azure_storage_data_structure_analysis",
          "azure_api": "azure.storage.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To accommodate for the data structures and methods used to store the sensitive data and cover all non-transient sensitive data types."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help in reviewing public access to storage, verifying remediation of vulnerabilities, and logging detailed audit events. However, there are no existing functions that directly ensure secure deletion of transient sensitive data from temporary storage, check for data residue in the execution environment, or analyze data structures used for storing sensitive data. Therefore, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "Requirement_53",
      "title": "PCI Secure Software Standard Requirement #53",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_inactive_account_management",
        "azure_ad_access_policy_enforcement",
        "azure_policies_unauthorized_components_detection_interval",
        "azure_ad_global_administrator_mfa_required",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "sqlserver_azuread_authentication_configured",
        "ai_search_service_https_enforcement_tls_version",
        "network_security_group_association_required",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_memory_dump_encryption",
          "azure_api": "azure.compute.virtual_machines.encrypt_memory_dump()",
          "service": "azure_compute",
          "rationale": "To ensure that memory dumps do not expose sensitive data"
        },
        {
          "name": "azure_compute_error_log_encryption",
          "azure_api": "azure.compute.virtual_machines.encrypt_error_logs()",
          "service": "azure_compute",
          "rationale": "To ensure that error logs do not expose sensitive data"
        },
        {
          "name": "azure_storage_swap_file_encryption",
          "azure_api": "azure.storage.blobs.encrypt_swap_files()",
          "service": "azure_storage",
          "rationale": "To ensure that swap files do not expose sensitive data"
        },
        {
          "name": "azure_compute_keyboard_input_encryption",
          "azure_api": "azure.compute.virtual_machines.encrypt_keyboard_input()",
          "service": "azure_compute",
          "rationale": "To ensure that keyboard inputs do not expose sensitive data"
        },
        {
          "name": "azure_compute_camera_input_encryption",
          "azure_api": "azure.compute.virtual_machines.encrypt_camera_input()",
          "service": "azure_compute",
          "rationale": "To ensure that camera inputs do not expose sensitive data"
        },
        {
          "name": "azure_compute_nfc_input_encryption",
          "azure_api": "azure.compute.virtual_machines.encrypt_nfc_input()",
          "service": "azure_compute",
          "rationale": "To ensure that NFC inputs do not expose sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions provide a partial coverage for the PCI Secure Software Standard requirement #53. They help in ensuring that sensitive data is not disclosed through unintended channels such as error messages, error logs, memory dumps, execution environments, automatic storage or exposure of sensitive data by the underlying execution environment, and sensors or services provided by the execution environment. However, there are no specific functions for encrypting memory dumps, error logs, swap files, keyboard inputs, camera inputs, and NFC inputs. Therefore, new functions are needed for these areas."
    },
    {
      "compliance_id": "Requirement_54",
      "title": "PCI Secure Software Standard Requirement #54",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_keyvault_prevent_key_substitution",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_leakage_prevention",
          "azure_api": "azure.storage.preventDataLeakage()",
          "service": "azure_storage",
          "rationale": "To prevent sensitive data from being leaked through storage services"
        },
        {
          "name": "azure_compute_memory_dump_protection",
          "azure_api": "azure.compute.protectMemoryDump()",
          "service": "azure_compute",
          "rationale": "To prevent sensitive data from being leaked through memory dumps"
        },
        {
          "name": "azure_network_side_channel_attack_protection",
          "azure_api": "azure.network.protectSideChannelAttack()",
          "service": "azure_network",
          "rationale": "To prevent sensitive data from being leaked through side channel attacks"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, there are gaps in preventing sensitive data leakage through storage services, memory dumps, and side channel attacks. Therefore, new functions are needed to fully comply with the requirement."
    },
    {
      "compliance_id": "Requirement_55",
      "title": "PCI Secure Software Standard Requirement #55",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sensitive_data_leakage_prevention",
          "azure_api": "azure.security.preventSensitiveDataLeakage()",
          "service": "Azure Security",
          "rationale": "To prevent sensitive data from being disclosed through unintended channels such as error messages, logs, or memory dumps"
        },
        {
          "name": "azure_security_sensitive_data_exposure_detection",
          "azure_api": "azure.security.detectSensitiveDataExposure()",
          "service": "Azure Security",
          "rationale": "To detect any sensitive data residue in the execution environment and confirm that protection methods are implemented correctly"
        },
        {
          "name": "azure_security_cryptography_protection_methods",
          "azure_api": "azure.security.implementCryptographyProtectionMethods()",
          "service": "Azure Security",
          "rationale": "To implement methods to protect against unintended disclosure of sensitive data, such as the use of cryptography or blinding/masking of cryptographic operations"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help with logging, encryption, key substitution prevention, TLS security policy enforcement, MFA enforcement, vulnerability remediation verification, prevention of instance creation in unused regions, audit logging, public access restriction, and detailed audit event logging. However, new functions are needed to specifically prevent sensitive data leakage, detect sensitive data exposure, and implement cryptography protection methods."
    },
    {
      "compliance_id": "Requirement_56",
      "title": "PCI Secure Software Standard Requirement #56",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "ai_search_service_https_enforcement_tls_version",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sensitive_data_leak_prevention",
          "azure_api": "azure.security.preventSensitiveDataLeak()",
          "service": "azure_security",
          "rationale": "To prevent sensitive data from being leaked through error messages, logs, memory dumps, and other unintended channels"
        },
        {
          "name": "azure_security_sensitive_data_residue_check",
          "azure_api": "azure.security.checkSensitiveDataResidue()",
          "service": "azure_security",
          "rationale": "To check for any sensitive data residue in the execution environment"
        },
        {
          "name": "azure_security_protection_methods_verification",
          "azure_api": "azure.security.verifyProtectionMethods()",
          "service": "azure_security",
          "rationale": "To verify that protection methods are correctly implemented and do not expose sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions can help to enforce SSL connections, prevent key substitution, disable public network access, enforce access policies, and enable detailed audit event logging. However, there are no specific functions for preventing sensitive data leakage, checking for sensitive data residue, and verifying the correct implementation of protection methods. Therefore, new functions are needed for these purposes."
    },
    {
      "compliance_id": "Requirement_60",
      "title": "PCI Secure Software Standard Requirement #60",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "network_route_table_no_public_routes_to_igw",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "firewall_policy_stateless_fragpackets_default_action",
        "azure_policies_unauthorized_components_detection_interval",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "dms_replication_task_logging_severity_enabled",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "purview_account_status_enabled_per_region",
        "security_policy_management_review_interval",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "cognitive_search_domain_rbac_enabled",
        "storage_electronic_protected_health_info_backup_maintenance",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_check_mitigation_status",
          "azure_api": "azure.security.checkMitigationStatus()",
          "service": "azure_security",
          "rationale": "To check if the mitigation methods are active and in place prior to being launched and periodically throughout execution."
        },
        {
          "name": "azure_security_check_mitigation_controls",
          "azure_api": "azure.security.checkMitigationControls()",
          "service": "azure_security",
          "rationale": "To check if the mitigation controls are applied by default upon installation, initialization, or first use of the software."
        },
        {
          "name": "azure_security_check_user_input_mitigation",
          "azure_api": "azure.security.checkUserInputMitigation()",
          "service": "azure_security",
          "rationale": "To check if user input or interaction can disable, remove, or bypass any mitigations and if such action requires authentication and authorization."
        }
      ],
      "mapping_notes": "The existing functions can partially cover the requirements of PCI Secure Software Standard Requirement #60. However, there are no specific functions to check the status of mitigation controls, whether they are applied by default, and if user input can disable, remove, or bypass any mitigations. Therefore, new functions are needed to fully cover these requirements."
    },
    {
      "compliance_id": "Requirement_61",
      "title": "PCI Secure Software Standard Requirement #61",
      "existing_functions_mapped": [
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_access_policy_enforcement",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_policies_unauthorized_components_detection_interval",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_mitigation_controls_verification",
          "azure_api": "azure.security.verifyMitigationControls()",
          "service": "azure_security",
          "rationale": "To programmatically verify that mitigation controls are in place and active prior to being launched and periodically throughout execution."
        },
        {
          "name": "azure_security_mitigation_controls_default_settings_verification",
          "azure_api": "azure.security.verifyDefaultSettings()",
          "service": "azure_security",
          "rationale": "To programmatically verify that mitigation controls settings are applied by default upon installation, initialization, or first use of the software."
        },
        {
          "name": "azure_security_user_input_authentication_verification",
          "azure_api": "azure.security.verifyUserInputAuthentication()",
          "service": "azure_security",
          "rationale": "To programmatically verify that user input or interaction that can disable, remove, or bypass any mitigations requires authentication and authorization."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They help in enforcing authentication, preventing key substitution, verifying vulnerabilities, logging audit events, reviewing public access, managing inactive accounts, preventing instance creation in unused regions, enforcing access policies, distributing customer key guidance, and detecting unauthorized components. However, new functions are needed to specifically verify mitigation controls, their default settings, and user input authentication."
    },
    {
      "compliance_id": "Requirement_62",
      "title": "PCI Secure Software Standard Requirement #62",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_user_input_auth_verification",
          "azure_api": "azure.ad.authentication.verify()",
          "service": "Azure Active Directory",
          "rationale": "To programmatically verify that user input or interaction that can disable, remove, or bypass any mitigations requires authentication and authorization"
        },
        {
          "name": "azure_security_mitigation_status_check",
          "azure_api": "azure.security.mitigation.check()",
          "service": "Azure Security Center",
          "rationale": "To programmatically check if the software checks for these mitigations are in place and active prior to being launched and periodically throughout execution"
        }
      ],
      "mapping_notes": "The existing functions can enforce multi-factor authentication, reconfirm authentication, enforce access policies, and verify vulnerability remediation. However, they do not fully cover the requirement of verifying that user input or interaction that can disable, remove, or bypass any mitigations requires authentication and authorization, and that software checks for these mitigations are in place and active prior to being launched and periodically throughout execution. Therefore, new functions 'azure_ad_user_input_auth_verification' and 'azure_security_mitigation_status_check' are needed."
    },
    {
      "compliance_id": "Requirement_63",
      "title": "PCI Secure Software Standard Requirement #63",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_mitigation_guidance_distribution",
          "azure_api": "azure.security.distributeMitigationGuidance()",
          "service": "azure_security",
          "rationale": "To provide stakeholders with guidance on how to enable mitigation settings in the execution environment"
        },
        {
          "name": "azure_security_mitigation_status_check",
          "azure_api": "azure.security.checkMitigationStatus()",
          "service": "azure_security",
          "rationale": "To confirm that software checks for these mitigations are in place and active prior to being launched and periodically throughout execution"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They provide mechanisms for enforcing access policies, distributing key guidance, reconfirming authentication, enforcing MFA, verifying vulnerability remediation, reviewing public access, managing inactive accounts, and logging audit events. However, there are no existing functions that specifically provide guidance to stakeholders on enabling mitigation settings in the execution environment or check the status of these mitigations. Therefore, two new functions are proposed: azure_security_mitigation_guidance_distribution and azure_security_mitigation_status_check."
    },
    {
      "compliance_id": "Requirement_64",
      "title": "PCI Secure Software Standard Requirement #64",
      "existing_functions_mapped": [
        "azure_monitor_detailed_audit_event_logging",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_mitigation_status_check",
          "azure_api": "azure.security.checkMitigationStatus()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically check the status of mitigation controls prior to software launch and periodically throughout execution, as required by PCI Secure Software Standard Requirement #64."
        },
        {
          "name": "azure_security_mitigation_authentication_check",
          "azure_api": "azure.security.checkMitigationAuthentication()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically check that any user action to disable, remove, or bypass mitigations requires authentication and authorization, as required by PCI Secure Software Standard Requirement #64."
        }
      ],
      "mapping_notes": "The existing Azure functions can help with logging, vulnerability remediation verification, multi-factor authentication enforcement, and key guidance distribution. However, there are gaps in checking the status of mitigation controls and ensuring that any user action to disable, remove, or bypass mitigations requires authentication and authorization. Therefore, new functions are needed to fully meet the requirements of PCI Secure Software Standard Requirement #64."
    },
    {
      "compliance_id": "Requirement_65",
      "title": "PCI Secure Software Standard Requirement #65",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_critical_asset_role_authentication_requirements",
          "azure_api": "azure.ad.authentication.requirements()",
          "service": "Azure Active Directory",
          "rationale": "To programmatically define and enforce authentication requirements for all roles based on critical asset classification, type of access, and level of privilege."
        },
        {
          "name": "azure_ad_external_mechanism_authentication_guidance",
          "azure_api": "azure.ad.external.mechanism.guidance()",
          "service": "Azure Active Directory",
          "rationale": "To provide programmatically guidance on how to configure authentication mechanisms correctly for external mechanisms such as third-party VPNs, remote desktop features, etc."
        },
        {
          "name": "azure_keyvault_sensitive_data_classification",
          "azure_api": "azure.keyvault.data.classification()",
          "service": "Azure Key Vault",
          "rationale": "To programmatically identify sensitive data associated with authentication credentials, including public keys, as a critical asset."
        }
      ],
      "mapping_notes": "The existing Azure functions can help to enforce and manage authentication requirements, multi-factor authentication, reconfirmation of authentication, inactive account management, and key management. However, there are no existing functions to define authentication requirements for all roles based on critical asset classification, provide guidance on configuring authentication for external mechanisms, and classify sensitive data associated with authentication credentials as a critical asset. Therefore, new functions are needed to fully meet the PCI Secure Software Standard requirement."
    },
    {
      "compliance_id": "Requirement_66",
      "title": "PCI Secure Software Standard Requirement #66",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_critical_asset_authentication_enforcement",
          "azure_api": "azure.ad.authentication.enforce()",
          "service": "Azure Active Directory",
          "rationale": "To enforce and verify authentication requirements for all roles based on critical asset classification, the type of access, and level of privilege."
        },
        {
          "name": "azure_ad_external_mechanism_authentication_guidance",
          "azure_api": "azure.ad.authentication.externalMechanismGuidance()",
          "service": "Azure Active Directory",
          "rationale": "To provide guidance on how to configure authentication mechanisms correctly when the software relies on external mechanisms for secure access."
        },
        {
          "name": "azure_ad_sensitive_data_authentication_asset_identification",
          "azure_api": "azure.ad.authentication.sensitiveDataAssetIdentification()",
          "service": "Azure Active Directory",
          "rationale": "To identify sensitive data associated with authentication credentials as a critical asset."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #66. They ensure that multi-factor authentication is enforced for non-console access, Azure AD authentication is configured for SQL server, and public access to storage is reviewed. However, there are no existing functions to enforce and verify authentication requirements based on critical asset classification, provide guidance for configuring authentication mechanisms when using external mechanisms, and identify sensitive data associated with authentication credentials as a critical asset. Therefore, new functions are needed to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_67",
      "title": "PCI Secure Software Standard Requirement #67",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_inactive_account_management"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_critical_asset_authentication",
          "azure_api": "azure.active_directory.authenticate_critical_asset()",
          "service": "Azure Active Directory",
          "rationale": "To ensure that authentication requirements are defined for all roles based on critical asset classification, type of access, and level of privilege."
        },
        {
          "name": "azure_ad_authentication_mechanism_verification",
          "azure_api": "azure.active_directory.verify_authentication_mechanism()",
          "service": "Azure Active Directory",
          "rationale": "To confirm that access to critical assets is authenticated and authentication mechanisms are implemented correctly."
        },
        {
          "name": "azure_ad_external_mechanism_guidance",
          "azure_api": "azure.active_directory.provide_external_mechanism_guidance()",
          "service": "Azure Active Directory",
          "rationale": "To provide guidance on how to configure authentication mechanisms correctly when external mechanisms are used."
        },
        {
          "name": "azure_keyvault_sensitive_data_identification",
          "azure_api": "azure.keyvault.identify_sensitive_data()",
          "service": "Azure Key Vault",
          "rationale": "To confirm that sensitive data associated with authentication credentials, including public keys, is identified as a critical asset."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They enforce multi-factor authentication for non-console access, reconfirm authentication periodically, distribute guidance on customer keys, enforce access policies, and manage inactive accounts. However, new functions are needed to fully meet the requirement, including defining authentication requirements for critical assets, verifying the correct implementation of authentication mechanisms, providing guidance for external mechanisms, and identifying sensitive data as critical assets."
    },
    {
      "compliance_id": "Requirement_68",
      "title": "PCI Secure Software Standard Requirement #68",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_inactive_account_management",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_critical_asset_authentication_enforcement",
          "azure_api": "azure.ad.authentication.enforce()",
          "service": "Azure Active Directory",
          "rationale": "To ensure that access to critical assets is authenticated as per the defined requirements."
        },
        {
          "name": "azure_keyvault_sensitive_data_classification",
          "azure_api": "azure.keyvault.data.classify()",
          "service": "Azure Key Vault",
          "rationale": "To identify sensitive data associated with authentication credentials, including public keys, as a critical asset."
        },
        {
          "name": "azure_ad_external_mechanism_authentication_guidance",
          "azure_api": "azure.ad.authentication.externalMechanismGuidance()",
          "service": "Azure Active Directory",
          "rationale": "To provide guidance on how to configure authentication mechanisms correctly for external mechanisms such as third-party VPNs, remote desktop features, etc."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #68. They provide mechanisms for enforcing multi-factor authentication, authenticating with Azure AD, reconfirming authentication, managing inactive accounts, and reviewing public access. However, new functions are needed to ensure that access to critical assets is authenticated as per the defined requirements, to identify sensitive data associated with authentication credentials as a critical asset, and to provide guidance on configuring authentication mechanisms for external mechanisms."
    },
    {
      "compliance_id": "Requirement_69",
      "title": "PCI Secure Software Standard Requirement #69",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_inactive_account_management",
        "azure_storage_public_access_review",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_unique_identification_enforcement",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "Azure Active Directory",
          "rationale": "To ensure that each user, program, or system accessing critical assets has a unique identification."
        },
        {
          "name": "azure_network_secure_transmission_credentials",
          "azure_api": "azure.network.NetworkSecurityGroup()",
          "service": "Azure Network",
          "rationale": "To protect authentication credentials from being intercepted in transit when supplied across a non-console interface."
        },
        {
          "name": "azure_ad_unique_identification_guidance",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "Azure Active Directory",
          "rationale": "To provide guidance to stakeholders that identification and authentication parameters should not be shared in a way that prevents unique identification of each access to a critical asset."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement for unique identification for access to critical assets. However, new functions are needed to fully enforce unique identification, protect credentials in transit, and provide guidance on unique identification."
    },
    {
      "compliance_id": "Requirement_70",
      "title": "PCI Secure Software Standard Requirement #70",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_inactive_account_management",
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_unique_identification_enforcement",
          "azure_api": "azure.identity.Credential.get_token()",
          "service": "azure_ad",
          "rationale": "To enforce unique identification for each access to a critical asset"
        },
        {
          "name": "azure_ad_api_unique_identification_enforcement",
          "azure_api": "azure.identity.ClientSecretCredential.get_token()",
          "service": "azure_ad",
          "rationale": "To enforce unique identification for each program or system accessing the critical assets through APIs"
        },
        {
          "name": "azure_network_secure_transmission_enforcement",
          "azure_api": "azure.network.NetworkSecurityGroup.create_or_update()",
          "service": "azure_network",
          "rationale": "To protect authentication credentials from attacks that attempt to intercept them in transit"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They ensure that unique identification is required for non-console access, and that re-authentication is required at regular intervals. However, they do not specifically enforce unique identification for each access to a critical asset, or for each program or system accessing the critical assets through APIs. They also do not specifically protect authentication credentials from interception in transit. Therefore, new functions are needed to fully comply with this requirement."
    },
    {
      "compliance_id": "Requirement_71",
      "title": "PCI Secure Software Standard Requirement #71",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_unique_identification_enforcement",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "azure_ad",
          "rationale": "To ensure that each user, program, or system accessing critical assets has a unique identification"
        },
        {
          "name": "azure_network_secure_transmission",
          "azure_api": "azure.network.NetworkSecurityGroup()",
          "service": "azure_network",
          "rationale": "To protect authentication credentials from interception during transit"
        },
        {
          "name": "azure_ad_authentication_parameters_unique",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "azure_ad",
          "rationale": "To ensure that authentication parameters are not shared between individuals, programs, or systems"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They enforce multi-factor authentication for non-console access, reconfirmation of authentication, prevention of key substitution, review of public access, management of inactive accounts, and enforcement of access policy. However, new functions are needed to enforce unique identification for each user, program, or system accessing critical assets, to protect authentication credentials from interception during transit, and to ensure that authentication parameters are not shared between individuals, programs, or systems."
    },
    {
      "compliance_id": "Requirement_72",
      "title": "PCI Secure Software Standard Requirement #72",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_access_policy_enforcement"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_unique_identification_enforcement",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "azure_ad",
          "rationale": "To ensure that unique identification is enforced for all users and automated systems accessing critical assets."
        },
        {
          "name": "azure_network_secure_transmission_credentials",
          "azure_api": "azure.network.NetworkSecurityGroup()",
          "service": "azure_network",
          "rationale": "To ensure that authentication credentials are protected from interception during transmission across non-console interfaces."
        }
      ],
      "mapping_notes": "The existing Azure functions provide partial coverage for the PCI Secure Software Standard requirement. They cover the enforcement of unique identification and authentication for users and automated systems, as well as the review and management of access policies. However, there are no existing functions that specifically address the protection of authentication credentials during transmission across non-console interfaces or the enforcement of unique identification for all access to critical assets. Therefore, two new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_73",
      "title": "PCI Secure Software Standard Requirement #73",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_inactive_account_management"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authentication_method_vulnerability_check",
          "azure_api": "azure.identity.AuthenticationMethod.check_vulnerability()",
          "service": "azure_identity",
          "rationale": "To programmatically check if the authentication methods implemented by the software have any known vulnerabilities or attack methods"
        },
        {
          "name": "azure_ad_authentication_method_robustness_check",
          "azure_api": "azure.identity.AuthenticationMethod.check_robustness()",
          "service": "azure_identity",
          "rationale": "To programmatically check if the implemented authentication methods are robust and evaluated using industry-accepted methods"
        },
        {
          "name": "azure_ad_authentication_method_implementation_check",
          "azure_api": "azure.identity.AuthenticationMethod.check_implementation()",
          "service": "azure_identity",
          "rationale": "To programmatically test if the authentication methods are implemented correctly and do not expose vulnerabilities"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #73. They handle aspects such as Azure AD authentication configuration, MFA enforcement, and account management. However, there are no existing functions to programmatically check for vulnerabilities in the authentication methods, evaluate their robustness, and test their implementation. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_74",
      "title": "PCI Secure Software Standard Requirement #74",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authentication_method_evaluation",
          "azure_api": "azure.ad.authentication.method_evaluation()",
          "service": "Azure Active Directory",
          "rationale": "To evaluate the strength and robustness of authentication methods implemented by the software and identify known vulnerabilities or attack methods"
        },
        {
          "name": "azure_ad_authentication_method_implementation_verification",
          "azure_api": "azure.ad.authentication.method_implementation_verification()",
          "service": "Azure Active Directory",
          "rationale": "To test the software to confirm that the authentication methods are implemented correctly and do not expose vulnerabilities"
        }
      ],
      "mapping_notes": "The existing Azure functions can help enforce multi-factor authentication, configure Azure AD authentication, prevent key substitution, enforce access policies, remediate vulnerabilities, manage inactive accounts, log audit events, and review public access. However, there are no existing functions that specifically evaluate the strength and robustness of authentication methods or verify the correct implementation of these methods. Therefore, two new functions are proposed: azure_ad_authentication_method_evaluation and azure_ad_authentication_method_implementation_verification."
    },
    {
      "compliance_id": "Requirement_75",
      "title": "PCI Secure Software Standard Requirement #75",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authentication_strength_evaluation",
          "azure_api": "azure.ad.authentication.evaluate_strength()",
          "service": "Azure Active Directory",
          "rationale": "To evaluate the strength and robustness of the implemented authentication methods and identify any known vulnerabilities or attack methods"
        },
        {
          "name": "azure_ad_authentication_robustness_test",
          "azure_api": "azure.ad.authentication.test_robustness()",
          "service": "Azure Active Directory",
          "rationale": "To test the robustness of the implemented authentication methods and confirm that they do not expose vulnerabilities"
        }
      ],
      "mapping_notes": "The existing Azure functions can enforce multi-factor authentication, configure Azure AD authentication, and manage inactive accounts. However, there are no existing functions that directly evaluate the strength and robustness of the implemented authentication methods or test their robustness to confirm that they do not expose vulnerabilities. Therefore, new functions are needed for these purposes."
    },
    {
      "compliance_id": "Requirement_77",
      "title": "PCI Secure Software Standard Requirement #77",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "storage_blob_access_public_access_disabled",
        "network_security_group_association_required",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_critical_assets_access_verification",
          "azure_api": "azure.active_directory.access_control.verify_access()",
          "service": "Azure Active Directory",
          "rationale": "To programmatically verify and test the level of access provided to critical assets in accordance with PCI Secure Software Standard Requirement #77"
        },
        {
          "name": "azure_security_critical_assets_access_restriction",
          "azure_api": "azure.security.access_control.restrict_access()",
          "service": "Azure Security",
          "rationale": "To programmatically restrict access to critical assets to only those accounts and services that require such access, in accordance with PCI Secure Software Standard Requirement #77"
        }
      ],
      "mapping_notes": "The existing Azure functions can enforce access policies, reconfirm authentication, manage inactive accounts, enforce MFA for non-console access, prevent key substitution, review public access, and prohibit public access with private endpoints or access restrictions. However, there are no existing functions that can specifically verify and test the level of access provided to critical assets, or restrict access to critical assets to only those accounts and services that require such access, as required by PCI Secure Software Standard Requirement #77. Therefore, two new functions, azure_ad_critical_assets_access_verification and azure_security_critical_assets_access_restriction, are proposed to fully cover this requirement."
    },
    {
      "compliance_id": "Requirement_78",
      "title": "PCI Secure Software Standard Requirement #78",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_at_rest",
          "azure_api": "azure.storage.blob.BlobServiceClient()",
          "service": "azure_storage",
          "rationale": "To ensure that all sensitive data stored in Azure Storage is encrypted at rest"
        },
        {
          "name": "azure_keyvault_key_rotation",
          "azure_api": "azure.keyvault.keys.KeyClient()",
          "service": "azure_keyvault",
          "rationale": "To ensure that cryptographic keys used for securing sensitive data are rotated regularly"
        },
        {
          "name": "azure_compute_disk_encryption",
          "azure_api": "azure.mgmt.compute.ComputeManagementClient()",
          "service": "azure_compute",
          "rationale": "To ensure that all disks attached to Azure Compute instances are encrypted"
        }
      ],
      "mapping_notes": "The existing Azure functions cover several aspects of the PCI Secure Software Standard requirement, such as enforcing SSL connections, encrypting backup recovery points, preventing key substitution in Azure Key Vault, and disabling public access to storage blobs. However, there are gaps in ensuring encryption of all stored sensitive data, rotating cryptographic keys, and encrypting all disks attached to compute instances. Therefore, new functions are needed to cover these areas."
    },
    {
      "compliance_id": "Requirement_79",
      "title": "PCI Secure Software Standard Requirement #79",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_encryption_check",
          "azure_api": "azure.storage.blob.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To check if sensitive data stored in Azure Storage is encrypted"
        },
        {
          "name": "azure_keyvault_cryptography_compliance_check",
          "azure_api": "azure.keyvault.keys.KeyClient.get_key_properties()",
          "service": "azure_keyvault",
          "rationale": "To check if methods implementing cryptography for securing sensitive data comply with Control Objective 7"
        },
        {
          "name": "azure_compute_execution_environment_security_check",
          "azure_api": "azure.mgmt.compute.ComputeManagementClient.virtual_machines.get()",
          "service": "azure_compute",
          "rationale": "To check if the security properties of the execution environment are valid for all platforms where the software is intended to be deployed"
        }
      ],
      "mapping_notes": "The existing Azure functions cover a range of security controls related to data storage, encryption, access control, and logging. However, they do not fully cover the requirements of PCI Secure Software Standard Requirement #79, particularly in relation to cryptography compliance, execution environment security, and third-party software vulnerability assessment. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_80",
      "title": "PCI Secure Software Standard Requirement #80",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_keyvault_prevent_key_substitution",
        "backup_recovery_point_encrypted_sse_cmk",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_inactive_account_management",
        "azure_ad_access_policy_enforcement",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_compute_instance_creation_in_unused_regions_prevented"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_encryption_verification",
          "azure_api": "azure.storage.blob.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To verify that encryption is applied to all stored sensitive data"
        },
        {
          "name": "azure_keyvault_cryptography_compliance_check",
          "azure_api": "azure.keyvault.keys.KeyClient.get_key()",
          "service": "azure_keyvault",
          "rationale": "To verify that the methods implementing cryptography for securing sensitive data comply with Control Objective 7"
        },
        {
          "name": "azure_storage_index_token_generation_verification",
          "azure_api": "azure.storage.blob.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To verify that index tokens are generated in a way that ensures there is no correlation between the value and the sensitive data"
        }
      ],
      "mapping_notes": "The existing Azure functions can partially cover the requirements of PCI Secure Software Standard Requirement #80. However, there are no existing functions that directly verify the use of cryptography for securing sensitive data, the generation of index tokens, and the security properties of the execution environment and third-party software. New functions are needed to fully cover these aspects."
    },
    {
      "compliance_id": "Requirement_81",
      "title": "PCI Secure Software Standard Requirement #81",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "storage_blob_access_public_access_disabled",
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_at_rest",
          "azure_api": "azure.storage.BlobServiceProperties.set_default_service_version()",
          "service": "azure_storage",
          "rationale": "Needed to ensure encryption at rest for all stored data"
        },
        {
          "name": "azure_keyvault_key_rotation",
          "azure_api": "azure.keyvault.keys.update_key_properties()",
          "service": "azure_keyvault",
          "rationale": "Needed to ensure regular key rotation for cryptographic protection of data"
        },
        {
          "name": "azure_storage_tokenization_validation",
          "azure_api": "azure.storage.BlobServiceProperties.generate_blob_sas()",
          "service": "azure_storage",
          "rationale": "Needed to confirm that tokenization of sensitive data is implemented properly and there is no correlation between the value and the sensitive data"
        }
      ],
      "mapping_notes": "The existing functions provide a good starting point for securing sensitive data in Azure. However, they do not fully cover the requirements of PCI Secure Software Standard Requirement #81. The new functions suggested would help to ensure encryption at rest, regular key rotation, and proper tokenization of sensitive data. These are crucial for the protection of sensitive data during storage and to address all defined protection requirements and identified attack scenarios."
    },
    {
      "compliance_id": "Requirement_82",
      "title": "PCI Secure Software Standard Requirement #82",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "backup_recovery_point_encrypted_sse_cmk",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "backup_recovery_point_retention_period",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_encryption",
          "azure_api": "azure.storage.blob.BlobServiceClient()",
          "service": "azure_storage",
          "rationale": "To ensure sensitive data is encrypted at rest in Azure storage"
        },
        {
          "name": "azure_compute_vm_disk_encryption",
          "azure_api": "azure.mgmt.compute.ComputeManagementClient()",
          "service": "azure_compute",
          "rationale": "To ensure sensitive data is encrypted at rest in Azure virtual machine disks"
        },
        {
          "name": "azure_keyvault_secret_encryption",
          "azure_api": "azure.keyvault.secrets.SecretClient()",
          "service": "azure_keyvault",
          "rationale": "To ensure sensitive data is encrypted at rest in Azure Key Vault"
        }
      ],
      "mapping_notes": "The existing functions cover a range of Azure services and security controls, but there are gaps in ensuring the encryption of sensitive data at rest in Azure storage, virtual machine disks, and Key Vault. New functions are proposed to address these gaps."
    },
    {
      "compliance_id": "Requirement_83",
      "title": "PCI Secure Software Standard Requirement #83",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_keyvault_prevent_key_substitution",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_encryption_at_rest",
          "azure_api": "azure.storage.blob.BlobServiceClient()",
          "service": "azure_storage",
          "rationale": "To ensure sensitive data is encrypted at rest in Azure storage"
        },
        {
          "name": "azure_keyvault_key_rotation",
          "azure_api": "azure.keyvault.keys.KeyClient()",
          "service": "azure_keyvault",
          "rationale": "To ensure keys used for data encryption are regularly rotated"
        },
        {
          "name": "azure_security_third_party_software_vulnerability_check",
          "azure_api": "azure.security.SecurityCenter()",
          "service": "azure_security",
          "rationale": "To verify that there are no unmitigated vulnerabilities in third-party software"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, there are gaps in ensuring data encryption at rest, key rotation for data encryption, and checking vulnerabilities in third-party software. Therefore, new functions are needed to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_84",
      "title": "PCI Secure Software Standard Requirement #84",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "ai_search_service_https_enforcement_tls_version",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_secure_transmission_verification",
          "azure_api": "azure.network.verify_secure_transmission()",
          "service": "azure_network",
          "rationale": "To verify that all data transmission points are secured with strong encryption and endpoint authentication"
        },
        {
          "name": "azure_storage_data_transmission_encryption_check",
          "azure_api": "azure.storage.check_data_transmission_encryption()",
          "service": "azure_storage",
          "rationale": "To check if sensitive data is encrypted during transmission in storage services"
        },
        {
          "name": "azure_compute_data_transmission_encryption_check",
          "azure_api": "azure.compute.check_data_transmission_encryption()",
          "service": "azure_compute",
          "rationale": "To check if sensitive data is encrypted during transmission in compute services"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. The functions ensure secure transmission by enforcing SSL connections, enabling server-side encryption, enforcing minimum TLS 1.2 security policy, enforcing MFA, enforcing HTTPS and detailed audit logging. However, there are no specific functions to verify that all data transmission points are secured with strong encryption and endpoint authentication, and to check if sensitive data is encrypted during transmission in storage and compute services. Therefore, new functions are needed for these purposes."
    },
    {
      "compliance_id": "Requirement_85",
      "title": "PCI Secure Software Standard Requirement #85",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "ai_search_service_https_enforcement_tls_version",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_secure_transmission_enforcement",
          "azure_api": "azure.network.enforce_secure_transmission()",
          "service": "azure_network",
          "rationale": "To enforce secure transmission of sensitive data and confirm the use of strong cryptography at all times during transmission."
        },
        {
          "name": "azure_network_endpoint_authentication_verification",
          "azure_api": "azure.network.verify_endpoint_authentication()",
          "service": "azure_network",
          "rationale": "To confirm that all ingress and egress methods enforce a secure version of the protocol with end-point authentication prior to transmission."
        }
      ],
      "mapping_notes": "The existing Azure functions can help to enforce SSL connections, enable server-side encryption, enforce minimum TLS version, enforce MFA for non-console access, audit logs to Azure monitor, and disable public access. However, there are no existing functions to enforce secure transmission of sensitive data and confirm the use of strong cryptography at all times during transmission, and to confirm that all ingress and egress methods enforce a secure version of the protocol with end-point authentication prior to transmission. Therefore, new functions are needed for these requirements."
    },
    {
      "compliance_id": "Requirement_86",
      "title": "PCI Secure Software Standard Requirement #86",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "ai_search_service_https_enforcement_tls_version"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_secure_transmission_enforcement",
          "azure_api": "azure.network.enforce_secure_transmission()",
          "service": "azure_network",
          "rationale": "To enforce secure transmission of sensitive data, including strong encryption and endpoint authentication"
        },
        {
          "name": "azure_storage_data_encryption_pre_transmission",
          "azure_api": "azure.storage.encrypt_data_pre_transmission()",
          "service": "azure_storage",
          "rationale": "To ensure sensitive data is encrypted before transmission"
        },
        {
          "name": "azure_compute_execution_environment_security_configuration_guidance",
          "azure_api": "azure.compute.provide_security_configuration_guidance()",
          "service": "azure_compute",
          "rationale": "To provide guidance on security configuration of execution environment features, especially when third-party features are relied upon for security"
        }
      ],
      "mapping_notes": "The existing Azure functions can enforce SSL connections, server-side encryption, minimum TLS version, and prevent key substitution. However, there are no specific functions to enforce secure transmission of sensitive data, encrypt data before transmission, and provide security configuration guidance for execution environment features. Hence, new functions are proposed."
    },
    {
      "compliance_id": "Requirement_87",
      "title": "PCI Secure Software Standard Requirement #87",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "ai_search_service_https_enforcement_tls_version",
        "network_secure_transmission_policy_established"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_secure_endpoint_authentication",
          "azure_api": "azure.network.enforceSecureEndpointAuthentication()",
          "service": "azure_network",
          "rationale": "To ensure that all ingress and egress methods enforce a secure version of the protocol with end-point authentication prior to transmission"
        },
        {
          "name": "azure_security_data_transmission_encryption_enforcement",
          "azure_api": "azure.security.enforceDataTransmissionEncryption()",
          "service": "azure_security",
          "rationale": "To confirm that data is encrypted with strong cryptography prior to transmission or is transmitted over an encrypted channel using strong cryptography"
        }
      ],
      "mapping_notes": "The existing functions partially cover the requirement of securing sensitive data during transmission. They enforce SSL connection, TLS1.2 security policy, and HTTPS enforcement. However, they do not cover the enforcement of secure endpoint authentication for all ingress and egress methods, and the enforcement of data encryption prior to transmission or transmission over an encrypted channel. Therefore, new functions are needed for these aspects."
    },
    {
      "compliance_id": "Requirement_88",
      "title": "PCI Secure Software Standard Requirement #88",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "network_secure_transmission_policy_established",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "ai_search_service_https_enforcement_tls_version"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_secure_data_transmission_verification",
          "azure_api": "azure.network.verify_secure_data_transmission()",
          "service": "azure_network",
          "rationale": "To verify that all ingress and egress methods enforce a secure version of the protocol with end-point authentication prior to transmission."
        },
        {
          "name": "azure_security_strong_cryptography_enforcement_verification",
          "azure_api": "azure.security.verify_strong_cryptography_enforcement()",
          "service": "azure_security",
          "rationale": "To verify that the software enforces the use of strong cryptography at all times during transmission."
        }
      ],
      "mapping_notes": "The existing Azure functions can help enforce and verify secure data transmission and the use of strong cryptography. However, they do not cover all aspects of the PCI Secure Software Standard requirement. Specifically, there are no existing functions to verify that all ingress and egress methods enforce a secure version of the protocol with end-point authentication prior to transmission, and that the software enforces the use of strong cryptography at all times during transmission. Therefore, two new functions are proposed: azure_network_secure_data_transmission_verification and azure_security_strong_cryptography_enforcement_verification."
    },
    {
      "compliance_id": "Requirement_89",
      "title": "PCI Secure Software Standard Requirement #89",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "backup_recovery_point_encrypted_sse_cmk",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_cryptography_compliance_check",
          "azure_api": "azure.keyvault.CryptographyClient()",
          "service": "azure_keyvault",
          "rationale": "This function is needed to programmatically verify that the use of cryptography in the application is compliant with Control Objective 7 of the PCI Secure Software Standard."
        },
        {
          "name": "azure_security_third_party_cryptography_configuration_guidance_check",
          "azure_api": "azure.security.CryptographyClient()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically verify that guidance on configuring third-party cryptographic methods during the installation, initialization, or first use of the software is provided to stakeholders in accordance with Control Objective 12.1 of the PCI Secure Software Standard."
        },
        {
          "name": "azure_security_asymmetric_cryptography_private_key_usage_check",
          "azure_api": "azure.security.CryptographyClient()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically verify that private keys are not used for providing confidentiality protection to the data when asymmetric cryptography such as RSA or ECC is used."
        }
      ],
      "mapping_notes": "The existing functions partially cover the requirements of PCI Secure Software Standard Requirement #89. However, there are no existing functions that specifically check for compliance with Control Objective 7, provide guidance on configuring third-party cryptographic methods, or verify that private keys are not used for providing confidentiality protection to the data when asymmetric cryptography is used. Therefore, new functions are needed to fully meet these requirements."
    },
    {
      "compliance_id": "Requirement_91",
      "title": "PCI Secure Software Standard Requirement #91",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_asymmetric_key_confidentiality_check",
          "azure_api": "azure.keyvault.keys.get_key()",
          "service": "azure_keyvault",
          "rationale": "To verify that private keys are not used for providing confidentiality protection to the data when asymmetric cryptography such as RSA or ECC is used."
        },
        {
          "name": "azure_keyvault_cryptography_compliance_check",
          "azure_api": "azure.keyvault.keys.get_key()",
          "service": "azure_keyvault",
          "rationale": "To confirm that the use of cryptography is compliant to Control Objective 7."
        },
        {
          "name": "azure_keyvault_third_party_cryptography_guidance_check",
          "azure_api": "azure.keyvault.keys.get_key()",
          "service": "azure_keyvault",
          "rationale": "To confirm that guidance on configuring cryptographic methods during the installation, initialization, or first use of the software is provided to stakeholders in accordance with Control Objective 12.1."
        }
      ],
      "mapping_notes": "The existing Azure functions can help to prevent key substitution and provide guidance on key distribution. However, they do not fully cover the requirements of PCI Secure Software Standard Requirement #91. New functions are needed to verify the use of private keys in asymmetric cryptography, confirm the compliance of cryptographic use, and check the guidance provided for configuring third-party cryptographic methods."
    },
    {
      "compliance_id": "Requirement_92",
      "title": "PCI Secure Software Standard Requirement #92",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_monitor_detailed_audit_event_logging",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "virtual_machine_diagnostic_settings_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_user_activity_tracking",
          "azure_api": "azure.active_directory.track_user_activity()",
          "service": "Azure Active Directory",
          "rationale": "To track all user activities and map them to a unique user as required by the PCI Secure Software Standard"
        },
        {
          "name": "azure_storage_asset_access_tracking",
          "azure_api": "azure.storage.track_asset_access()",
          "service": "Azure Storage",
          "rationale": "To track all access attempts and usage of critical assets and map them to a unique user, system, or entity as required by the PCI Secure Software Standard"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement of tracking and tracing all access attempts and usage of critical assets to a unique user, system, or entity. Functions like 'storage_queue_enable_logging_for_read_write_delete', 'eventhubs_stream_analytics_server_side_encryption_enabled', 'azure_monitor_detailed_audit_event_logging', 'mysql_flexible_server_audit_log_to_azure_monitor_logs', and 'virtual_machine_diagnostic_settings_enabled' can be used to track and log access attempts and usage. However, these functions do not ensure that all activities are traceable to a unique user, system, or entity, which is a key requirement of the PCI Secure Software Standard. Therefore, new functions 'azure_ad_user_activity_tracking' and 'azure_storage_asset_access_tracking' are proposed to fully meet this requirement."
    },
    {
      "compliance_id": "Requirement_93",
      "title": "PCI Secure Software Standard Requirement #93",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_monitor_detailed_audit_event_logging",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_activity_tracking",
          "azure_api": "azure.security.activity_tracking()",
          "service": "Azure Security",
          "rationale": "To ensure all activities are tracked and logged in detail, including privileged operations, encryption changes, data export, failed authentication attempts, and security control modifications."
        },
        {
          "name": "azure_security_activity_tracking_confidential_data_protection",
          "azure_api": "azure.security.activity_tracking_confidential_data_protection()",
          "service": "Azure Security",
          "rationale": "To ensure that confidential data is not directly recorded in the tracking data."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They provide mechanisms for logging and auditing activities, enforcing MFA and reconfirmation of authentication, and reviewing public access to storage. However, they do not fully cover the requirement of tracking all specific activities in detail, especially those related to privileged operations, encryption changes, data export, failed authentication attempts, and security control modifications. Also, there is no specific function to ensure that confidential data is not directly recorded in the tracking data. Therefore, two new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_94",
      "title": "PCI Secure Software Standard Requirement #94",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_ad_access_policy_enforcement",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_activity_tracking",
          "azure_api": "azure.security.activity.track()",
          "service": "azure_security",
          "rationale": "This function is needed to ensure all activities are tracked in detail, including who performed them, when they were performed, and what assets were affected."
        },
        {
          "name": "azure_security_confidential_data_protection",
          "azure_api": "azure.security.data.protect()",
          "service": "azure_security",
          "rationale": "This function is needed to ensure that confidential data is not directly recorded in the tracking data."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. Functions such as 'storage_queue_enable_logging_for_read_write_delete', 'azure_ad_access_policy_enforcement', and 'azure_monitor_detailed_audit_event_logging' help in tracking activities, providing unique identification, and timestamping events. However, there are no specific functions to ensure that confidential data is not directly recorded in the tracking data. Therefore, new functions 'azure_security_activity_tracking' and 'azure_security_confidential_data_protection' are suggested."
    },
    {
      "compliance_id": "Requirement_95",
      "title": "PCI Secure Software Standard Requirement #95",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_monitor_detailed_audit_event_logging",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_activity_tracking_detail",
          "azure_api": "azure.security.ActivityLogs.list()",
          "service": "azure_security",
          "rationale": "To capture all activity in sufficient and necessary detail including who performed them, the time they were performed, and the critical assets that were affected."
        },
        {
          "name": "azure_security_confidential_data_tracking",
          "azure_api": "azure.security.ActivityLogs.list()",
          "service": "azure_security",
          "rationale": "To ensure that confidential data is not directly recorded in the tracking data."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the requirements of PCI Secure Software Standard Requirement #95. Functions like 'storage_queue_enable_logging_for_read_write_delete', 'azure_monitor_detailed_audit_event_logging', and 'mysql_flexible_server_audit_log_to_azure_monitor_logs' can be used to capture specific activities performed. However, new functions 'azure_security_activity_tracking_detail' and 'azure_security_confidential_data_tracking' are needed to fully cover the requirement, including capturing all activity in sufficient detail and ensuring that confidential data is not directly recorded in the tracking data."
    },
    {
      "compliance_id": "Requirement_96",
      "title": "PCI Secure Software Standard Requirement #96",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_monitor_detailed_audit_event_logging",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_activity_record_protection",
          "azure_api": "azure.storage.blob.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To ensure the completeness, accuracy, and integrity of the activity records managed by the software"
        },
        {
          "name": "azure_network_secure_transmission_of_tracking_data",
          "azure_api": "azure.network.NetworkManagementClient.network_interfaces.get()",
          "service": "azure_network",
          "rationale": "To secure the authenticity of the tracking data during transmission to the log storage system"
        },
        {
          "name": "azure_storage_external_logging_system_integration",
          "azure_api": "azure.storage.blob.BlobServiceClient.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To provide guidance on the correct and complete setup and/or integration of the software with the external or third-party system(s)"
        }
      ],
      "mapping_notes": "The existing Azure functions provide partial coverage for the PCI Secure Software Standard requirement. The functions can be used to enable logging, audit event logging, and public access review. However, new functions are needed to ensure the protection of activity records, secure transmission of tracking data, and guidance on the integration with external logging systems."
    },
    {
      "compliance_id": "Requirement_97",
      "title": "PCI Secure Software Standard Requirement #97",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_monitor_detailed_audit_event_logging",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "virtual_machine_diagnostic_settings_enabled",
        "eventhubs_stream_analytics_server_side_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_activity_records_protection",
          "azure_api": "azure.storage.BlobServiceProperties.set_logging()",
          "service": "azure_storage",
          "rationale": "To ensure the protection of activity records in terms of completeness, accuracy, and integrity"
        },
        {
          "name": "azure_network_secure_transmission_to_log_storage",
          "azure_api": "azure.network.NetworkSecurityGroup.create_or_update()",
          "service": "azure_network",
          "rationale": "To secure the authenticity of the tracking data during transmission to the log storage system"
        },
        {
          "name": "azure_ad_authentication_parameters_protection",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "azure_ad",
          "rationale": "To protect any account or authentication parameters used for access to an external logging system"
        }
      ],
      "mapping_notes": "The existing functions can enable logging and monitor logs for various Azure services, but they do not fully cover the protection of activity records and secure transmission to log storage system. New functions are needed to ensure the completeness, accuracy, integrity and authenticity of activity records, and to protect authentication parameters for accessing external logging system."
    },
    {
      "compliance_id": "Requirement_98",
      "title": "PCI Secure Software Standard Requirement #98",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "network_secure_transmission_policy_established"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_activity_records",
          "azure_api": "azure.storage.BlobService.set_service_properties()",
          "service": "azure_storage",
          "rationale": "To ensure the secure retention of activity records in Azure Storage, including protection of completeness, accuracy, and integrity"
        },
        {
          "name": "azure_network_secure_data_transmission",
          "azure_api": "azure.network.NetworkSecurityGroup.create_or_update()",
          "service": "azure_network",
          "rationale": "To secure the authenticity of tracking data during transmission to the log storage system"
        },
        {
          "name": "azure_ad_authenticate_log_server_access",
          "azure_api": "azure.ad.AuthenticationContext.acquire_token()",
          "service": "azure_ad",
          "rationale": "To protect account or authentication parameters used for access to an external logging system"
        }
      ],
      "mapping_notes": "The existing functions partially cover the requirement. They enable logging, secure data transmission, and enforce authentication and authorization policies. However, they do not explicitly ensure the secure retention of activity records or the protection of account or authentication parameters used for access to an external logging system. Therefore, new functions are needed to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_99",
      "title": "PCI Secure Software Standard Requirement #99",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_append_only_access_control",
          "azure_api": "azure.storage.blob.set_blob_properties()",
          "service": "azure_storage",
          "rationale": "To ensure that the software applies, where possible, suitable file privileges to assist with maintaining the integrity of the tracking dataset (such as applying an append-only access control to a dataset once created)"
        },
        {
          "name": "azure_storage_unique_dataset_name_protection",
          "azure_api": "azure.storage.blob.create_blob()",
          "service": "azure_storage",
          "rationale": "To ensure that other software (including another instance of the same software) cannot overwrite or render invalid existing datasets"
        },
        {
          "name": "azure_storage_dataset_integrity_check",
          "azure_api": "azure.storage.blob.get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To confirm that the failure of the activity-tracking mechanism(s) does not violate the integrity of existing records"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. Functions for enabling logging, server-side encryption, and public access review can help maintain the integrity of activity records. However, there are no existing functions that specifically handle failures in activity-tracking mechanisms in the manner described in the requirement. Therefore, new functions are needed to apply append-only access control to datasets, protect unique dataset names, and check the integrity of datasets."
    },
    {
      "compliance_id": "Requirement_100",
      "title": "PCI Secure Software Standard Requirement #100",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_prevent_key_substitution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_append_only_access_control",
          "azure_api": "azure.storage.BlobServiceProperties.set_append_blob_access_policy()",
          "service": "azure_storage",
          "rationale": "To ensure that the software applies, where possible, suitable file privileges to assist with maintaining the integrity of the tracking dataset (such as applying an append-only access control to a dataset once created)."
        },
        {
          "name": "azure_storage_prevent_overwrite_existing_datasets",
          "azure_api": "azure.storage.BlobServiceProperties.set_overwrite_protection_policy()",
          "service": "azure_storage",
          "rationale": "To ensure that the software does not overwrite existing tracking data upon a restart of the software. Each new start shall only append to existing datasets or shall create a new tracking dataset."
        },
        {
          "name": "azure_storage_handle_dataset_access_failure",
          "azure_api": "azure.storage.BlobServiceProperties.set_dataset_access_failure_policy()",
          "service": "azure_storage",
          "rationale": "To confirm that the software handles the inability to access this dataset in a secure way, such as by creating a new dataset or preventing further use of the software."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the requirements of the PCI Secure Software Standard. Specifically, they provide mechanisms for logging and monitoring activity, preventing unauthorized access, and preserving the integrity of data. However, additional functions are needed to fully meet the requirements, particularly around handling failures in activity-tracking mechanisms and preserving the integrity of existing activity records. The proposed new functions provide these capabilities."
    },
    {
      "compliance_id": "Requirement_101",
      "title": "PCI Secure Software Standard Requirement #101",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_ad_access_policy_enforcement",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_anomaly_detection",
          "azure_api": "azure.security.detect_anomaly()",
          "service": "azure_security",
          "rationale": "To detect and alert upon detection of anomalous behavior, such as changes in post-deployment configurations or obvious attack behavior."
        },
        {
          "name": "azure_security_validate_software_integrity",
          "azure_api": "azure.security.validate_integrity()",
          "service": "azure_security",
          "rationale": "To validate the integrity of software executables and any configuration options, files, and datasets that the software relies upon for operation."
        },
        {
          "name": "azure_security_protect_cryptographic_primitives",
          "azure_api": "azure.security.protect_cryptography()",
          "service": "azure_security",
          "rationale": "To ensure that the cryptographic primitives are protected."
        },
        {
          "name": "azure_security_protect_stored_values",
          "azure_api": "azure.security.protect_stored_values()",
          "service": "azure_security",
          "rationale": "To ensure that stored values used by any anomaly detection methods are considered sensitive data and are protected accordingly."
        },
        {
          "name": "azure_security_prevent_brute_force_attacks",
          "azure_api": "azure.security.prevent_brute_force_attacks()",
          "service": "azure_security",
          "rationale": "To implement controls to prevent brute-force attacks on account, password, or cryptographic-key input fields."
        }
      ],
      "mapping_notes": "The existing Azure functions provide partial coverage for the PCI Secure Software Standard requirement. However, there are gaps in the areas of anomaly detection, software integrity validation, cryptographic primitives protection, stored values protection, and brute force attacks prevention. New functions are proposed to address these gaps."
    },
    {
      "compliance_id": "Requirement_102",
      "title": "PCI Secure Software Standard Requirement #102",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_software_integrity_check",
          "azure_api": "azure.security.check_integrity()",
          "service": "azure_security",
          "rationale": "To validate the integrity of software executables and any configuration options, files, and datasets that the software relies upon for operation."
        },
        {
          "name": "azure_security_anomaly_detection",
          "azure_api": "azure.security.detect_anomaly()",
          "service": "azure_security",
          "rationale": "To detect and alert upon detection of anomalous behavior, such as changes in post-deployment configurations or obvious attack behavior."
        },
        {
          "name": "azure_security_cryptographic_protection",
          "azure_api": "azure.security.protect_cryptography()",
          "service": "azure_security",
          "rationale": "To ensure that cryptographic primitives used by any anomaly detection methods are protected."
        },
        {
          "name": "azure_security_sensitive_data_protection",
          "azure_api": "azure.security.protect_sensitive_data()",
          "service": "azure_security",
          "rationale": "To ensure that stored values used by any anomaly detection methods are considered sensitive data and are protected accordingly."
        },
        {
          "name": "azure_security_brute_force_prevention",
          "azure_api": "azure.security.prevent_brute_force()",
          "service": "azure_security",
          "rationale": "To implement controls to prevent brute-force attacks on account, password, or cryptographic-key input fields."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully implement the control objectives, specifically for software integrity checks, anomaly detection, cryptographic protection, sensitive data protection, and brute force prevention. These functions would need to be implemented programmatically using Azure SDK/API calls."
    },
    {
      "compliance_id": "Requirement_103",
      "title": "PCI Secure Software Standard Requirement #103",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_anomaly_detection_configuration_change",
          "azure_api": "azure.security.anomaly_detection.detect_configuration_change()",
          "service": "Azure Security Center",
          "rationale": "To detect and alert upon detection of anomalous behavior, such as changes in post-deployment configurations"
        },
        {
          "name": "azure_security_anomaly_detection_attack_behavior",
          "azure_api": "azure.security.anomaly_detection.detect_attack_behavior()",
          "service": "Azure Security Center",
          "rationale": "To detect and alert upon detection of obvious attack behavior"
        },
        {
          "name": "azure_security_integrity_check_software_executables",
          "azure_api": "azure.security.integrity_check.validate_software_executables()",
          "service": "Azure Security Center",
          "rationale": "To validate the integrity of software executables and any configuration options, files, and datasets that the software relies upon for operation"
        },
        {
          "name": "azure_security_integrity_check_dataset_values",
          "azure_api": "azure.security.integrity_check.validate_dataset_values()",
          "service": "Azure Security Center",
          "rationale": "To validate the integrity of dataset values used by the software for secure operation"
        },
        {
          "name": "azure_security_brute_force_attack_prevention",
          "azure_api": "azure.security.attack_prevention.prevent_brute_force_attacks()",
          "service": "Azure Security Center",
          "rationale": "To implement controls to prevent brute-force attacks on account, password, or cryptographic-key input fields"
        }
      ],
      "mapping_notes": "The existing Azure functions can partially cover the PCI Secure Software Standard requirement #103. However, there are no existing functions that specifically handle anomaly detection for changes in post-deployment configurations or attack behavior, integrity checks for software executables and dataset values, and brute-force attack prevention. Therefore, new functions are needed to fully cover this requirement."
    },
    {
      "compliance_id": "Requirement_104",
      "title": "PCI Secure Software Standard Requirement #104",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_anomaly_detection_protection",
          "azure_api": "azure.security.anomaly_detection()",
          "service": "azure_security",
          "rationale": "To detect and alert upon detection of anomalous behavior, such as changes in post-deployment configurations or obvious attack behavior"
        },
        {
          "name": "azure_security_integrity_validation",
          "azure_api": "azure.security.integrity_validation()",
          "service": "azure_security",
          "rationale": "To validate the integrity of software executables and any configuration options, files, and datasets that the software relies upon for operation"
        },
        {
          "name": "azure_security_cryptographic_protection",
          "azure_api": "azure.security.cryptographic_protection()",
          "service": "azure_security",
          "rationale": "To protect cryptographic primitives used by any anomaly detection methods"
        },
        {
          "name": "azure_security_sensitive_data_protection",
          "azure_api": "azure.security.sensitive_data_protection()",
          "service": "azure_security",
          "rationale": "To protect stored values used by any anomaly detection methods"
        },
        {
          "name": "azure_security_dataset_integrity_validation",
          "azure_api": "azure.security.dataset_integrity_validation()",
          "service": "azure_security",
          "rationale": "To validate dataset integrity after the update"
        },
        {
          "name": "azure_security_brute_force_attack_prevention",
          "azure_api": "azure.security.brute_force_attack_prevention()",
          "service": "azure_security",
          "rationale": "To prevent brute-force attacks on account, password, or cryptographic-key input fields"
        },
        {
          "name": "azure_security_third_party_tools_configuration_guidance",
          "azure_api": "azure.security.third_party_tools_configuration_guidance()",
          "service": "azure_security",
          "rationale": "To provide guidance on how to configure third-party tools and services to support this control objective"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully implement the control objectives. These new functions will need to be developed and implemented using the Azure SDK/APIs."
    },
    {
      "compliance_id": "Requirement_105",
      "title": "PCI Secure Software Standard Requirement #105",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_software_integrity_validation",
          "azure_api": "azure.security.validate_integrity()",
          "service": "azure_security",
          "rationale": "To validate the integrity of software executables and any configuration options, files, and datasets that the software relies upon for operation. This will help in detecting unauthorized post-deployment changes."
        },
        {
          "name": "azure_security_software_execution_integrity_check",
          "azure_api": "azure.security.check_execution_integrity()",
          "service": "azure_security",
          "rationale": "To check the integrity values used by the software and dataset(s) upon which it relies for secure operation upon software execution, and at least every 36 hours thereafter."
        },
        {
          "name": "azure_security_cryptographic_primitives_protection",
          "azure_api": "azure.security.protect_cryptographic_primitives()",
          "service": "azure_security",
          "rationale": "To protect the cryptographic primitives used by any anomaly detection methods."
        },
        {
          "name": "azure_security_sensitive_data_protection",
          "azure_api": "azure.security.protect_sensitive_data()",
          "service": "azure_security",
          "rationale": "To protect the stored values used by any anomaly detection methods, considering these values as sensitive data."
        },
        {
          "name": "azure_security_dataset_integrity_protection",
          "azure_api": "azure.security.protect_dataset_integrity()",
          "service": "azure_security",
          "rationale": "To implement integrity protections for configuration or other dataset values that can be modified by the software during execution."
        },
        {
          "name": "azure_security_brute_force_attack_prevention",
          "azure_api": "azure.security.prevent_brute_force_attack()",
          "service": "azure_security",
          "rationale": "To implement controls to prevent brute-force attacks on account, password, or cryptographic-key input fields."
        },
        {
          "name": "azure_security_third_party_attack_detection_configuration",
          "azure_api": "azure.security.configure_third_party_attack_detection()",
          "service": "azure_security",
          "rationale": "To provide guidance on how to configure third-party tools and services to provide attack detection capabilities."
        }
      ],
      "mapping_notes": "The existing functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully implement and verify the control objectives related to software integrity validation, execution integrity check, cryptographic primitives protection, sensitive data protection, dataset integrity protection, brute force attack prevention, and third-party attack detection configuration."
    },
    {
      "compliance_id": "Requirement_106",
      "title": "PCI Secure Software Standard Requirement #106",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_monitor_detailed_audit_event_logging",
        "azure_compute_instance_creation_in_unused_regions_prevented"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_anomaly_detection",
          "azure_api": "azure.security.anomaly_detection()",
          "service": "Azure Security Center",
          "rationale": "To detect and alert upon detection of anomalous behavior, such as changes in post-deployment configurations or obvious attack behavior."
        },
        {
          "name": "azure_security_integrity_validation",
          "azure_api": "azure.security.integrity_validation()",
          "service": "Azure Security Center",
          "rationale": "To validate the integrity of software executables and any configuration options, files, and datasets that the software relies upon for operation."
        },
        {
          "name": "azure_security_cryptographic_protection",
          "azure_api": "azure.security.cryptographic_protection()",
          "service": "Azure Security Center",
          "rationale": "To protect cryptographic primitives used by any anomaly detection methods."
        },
        {
          "name": "azure_security_sensitive_data_protection",
          "azure_api": "azure.security.sensitive_data_protection()",
          "service": "Azure Security Center",
          "rationale": "To protect stored values used by any anomaly detection methods, considering these values as sensitive data."
        },
        {
          "name": "azure_security_brute_force_prevention",
          "azure_api": "azure.security.brute_force_prevention()",
          "service": "Azure Security Center",
          "rationale": "To implement controls to prevent brute-force attacks on account, password, or cryptographic-key input fields."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #106. However, there are no specific functions for anomaly detection, integrity validation, cryptographic protection, sensitive data protection, and brute force prevention. Therefore, new functions are needed for these areas."
    },
    {
      "compliance_id": "Requirement_107",
      "title": "PCI Secure Software Standard Requirement #107",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_anomaly_detection_configuration",
          "azure_api": "azure.security.anomaly_detection.configure()",
          "service": "azure_security",
          "rationale": "To provide a function for configuring anomaly detection in Azure security"
        },
        {
          "name": "azure_security_anomaly_detection_alerts",
          "azure_api": "azure.security.anomaly_detection.alerts()",
          "service": "azure_security",
          "rationale": "To provide a function for alerting on detected anomalies in Azure security"
        },
        {
          "name": "azure_security_software_integrity_validation",
          "azure_api": "azure.security.software.integrity.validate()",
          "service": "azure_security",
          "rationale": "To provide a function for validating the integrity of software executables and configuration options"
        },
        {
          "name": "azure_security_brute_force_attack_prevention",
          "azure_api": "azure.security.attack_prevention.configure()",
          "service": "azure_security",
          "rationale": "To provide a function for implementing controls to prevent brute-force attacks"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, there are gaps in the areas of anomaly detection, software integrity validation, and brute-force attack prevention. New functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_108",
      "title": "PCI Secure Software Standard Requirement #108",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_access_policy_enforcement",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_policies_unauthorized_components_detection_interval",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_authentication_reconfirm_days_not_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_threat_identification",
          "azure_api": "azure.security.threats.identify()",
          "service": "azure_security",
          "rationale": "To identify software threats and vulnerabilities as per PCI requirement 10.1.a"
        },
        {
          "name": "azure_security_threat_validation",
          "azure_api": "azure.security.threats.validate()",
          "service": "azure_security",
          "rationale": "To validate identified attacks against software as per PCI requirement 10.1.b"
        },
        {
          "name": "azure_security_mitigation_implementation",
          "azure_api": "azure.security.mitigations.implement()",
          "service": "azure_security",
          "rationale": "To implement mitigations against each identified attack as per PCI requirement 10.1.c"
        },
        {
          "name": "azure_security_mitigation_validation",
          "azure_api": "azure.security.mitigations.validate()",
          "service": "azure_security",
          "rationale": "To validate the existence of mitigations as part of the software release process as per PCI requirement 10.1.c"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement 10.1. They help in vulnerability remediation verification, detailed audit event logging, key guidance distribution, MFA enforcement, authentication reconfirmation, public access review, inactive account management, access policy enforcement, prevention of instance creation in unused regions, unauthorized components detection, and key substitution prevention. However, new functions are needed for threat identification, threat validation, mitigation implementation, and mitigation validation to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_109",
      "title": "PCI Secure Software Standard Requirement #109",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_keyvault_prevent_key_substitution",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_access_policy_enforcement",
        "azure_compute_instance_creation_in_unused_regions_prevented"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_threat_identification",
          "azure_api": "azure.security.threat_identification()",
          "service": "azure_security",
          "rationale": "To identify software threats and vulnerabilities"
        },
        {
          "name": "azure_security_threat_assessment",
          "azure_api": "azure.security.threat_assessment()",
          "service": "azure_security",
          "rationale": "To assess identified software threats and vulnerabilities"
        },
        {
          "name": "azure_security_threat_mitigation",
          "azure_api": "azure.security.threat_mitigation()",
          "service": "azure_security",
          "rationale": "To implement mitigations against each identified attack"
        },
        {
          "name": "azure_security_release_validation",
          "azure_api": "azure.security.release_validation()",
          "service": "azure_security",
          "rationale": "To validate the existence of mitigations in the software release process"
        }
      ],
      "mapping_notes": "The existing Azure functions can help in enforcing access policies, managing inactive accounts, enforcing multi-factor authentication, and preventing unauthorized instance creation. However, they do not fully cover the requirements of identifying, assessing, and addressing software threats and vulnerabilities, and validating the existence of mitigations in the software release process. Therefore, new functions are needed for these tasks."
    },
    {
      "compliance_id": "Requirement_110",
      "title": "PCI Secure Software Standard Requirement #110",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_access_policy_enforcement"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_threat_identification",
          "azure_api": "azure.security.threat_identification()",
          "service": "azure_security",
          "rationale": "To identify software threats and vulnerabilities as per PCI Secure Software Standard Requirement #110"
        },
        {
          "name": "azure_security_threat_assessment",
          "azure_api": "azure.security.threat_assessment()",
          "service": "azure_security",
          "rationale": "To assess identified threats and vulnerabilities as per PCI Secure Software Standard Requirement #110"
        },
        {
          "name": "azure_security_threat_mitigation_validation",
          "azure_api": "azure.security.threat_mitigation_validation()",
          "service": "azure_security",
          "rationale": "To validate the implementation of mitigations against each identified threat as per PCI Secure Software Standard Requirement #110"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard Requirement #110. However, specific functions for threat identification, assessment, and mitigation validation are needed to fully comply with the requirement. The new functions suggested are based on Azure Security service and are intended to programmatically identify, assess, and validate the mitigation of software threats and vulnerabilities."
    },
    {
      "compliance_id": "Requirement_111",
      "title": "PCI Secure Software Standard Requirement #111",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_access_policy_enforcement",
        "azure_policies_unauthorized_components_detection_interval",
        "azure_keyvault_customer_key_guidance_distribution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_vulnerability_testing_pre_release",
          "azure_api": "azure.security.vulnerability_testing_pre_release()",
          "service": "Azure Security",
          "rationale": "To ensure vulnerabilities in the software and third-party components are tested for and fixed prior to release."
        },
        {
          "name": "azure_security_vulnerability_ranking_system",
          "azure_api": "azure.security.vulnerability_ranking_system()",
          "service": "Azure Security",
          "rationale": "To ensure an industry-standard vulnerability-ranking system is used to classify/categorize vulnerabilities."
        },
        {
          "name": "azure_security_vulnerability_remediation_plan",
          "azure_api": "azure.security.vulnerability_remediation_plan()",
          "service": "Azure Security",
          "rationale": "To ensure a remediation plan is maintained for all detected vulnerabilities that ensures vulnerabilities do not remain unmitigated for an indefinite period."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard Requirement #111. However, there are no existing functions that specifically address the need for pre-release vulnerability testing, the use of an industry-standard vulnerability-ranking system, and the maintenance of a remediation plan for all detected vulnerabilities. Therefore, new functions are needed to fully comply with this requirement."
    },
    {
      "compliance_id": "Requirement_112",
      "title": "PCI Secure Software Standard Requirement #112",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_prevent_key_substitution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_vulnerability_detection_in_third_party_components",
          "azure_api": "azure.security.detect_vulnerabilities()",
          "service": "azure_security",
          "rationale": "To detect vulnerabilities in third-party, open-source, or shared components and libraries"
        },
        {
          "name": "azure_security_vulnerability_ranking_system",
          "azure_api": "azure.security.rank_vulnerabilities()",
          "service": "azure_security",
          "rationale": "To classify/categorize vulnerabilities using an industry-standard vulnerability-ranking system"
        },
        {
          "name": "azure_security_vulnerability_remediation_plan_maintenance",
          "azure_api": "azure.security.maintain_remediation_plan()",
          "service": "azure_security",
          "rationale": "To maintain a remediation plan for all detected vulnerabilities"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They provide mechanisms for vulnerability remediation verification, detailed audit event logging, authentication reconfirmation, key guidance distribution, public access review, inactive account management, and prevention of key substitution. However, there are no existing functions for detecting vulnerabilities in third-party components, classifying vulnerabilities using an industry-standard ranking system, and maintaining a remediation plan for all detected vulnerabilities. Therefore, new functions are needed for these tasks."
    },
    {
      "compliance_id": "Requirement_113",
      "title": "PCI Secure Software Standard Requirement #113",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_vulnerability_classification",
          "azure_api": "azure.security.vulnerability.classification()",
          "service": "Azure Security",
          "rationale": "This function is needed to classify/categorize vulnerabilities using an industry-standard vulnerability-ranking system such as CVSS."
        },
        {
          "name": "azure_security_vulnerability_remediation_plan_maintenance",
          "azure_api": "azure.security.vulnerability.remediation_plan.maintenance()",
          "service": "Azure Security",
          "rationale": "This function is needed to maintain a remediation plan for all detected vulnerabilities, ensuring that vulnerabilities do not remain unmitigated for an indefinite period."
        },
        {
          "name": "azure_security_software_vulnerability_testing",
          "azure_api": "azure.security.software.vulnerability.testing()",
          "service": "Azure Security",
          "rationale": "This function is needed to confirm that robust testing processes are used throughout the software lifecycle to manage vulnerabilities in software and to verify that the mitigations used to secure the software against attacks remain in place and are effective."
        },
        {
          "name": "azure_security_third_party_component_vulnerability_detection",
          "azure_api": "azure.security.third_party.component.vulnerability.detection()",
          "service": "Azure Security",
          "rationale": "This function is needed to detect vulnerabilities in third-party, open-source, or shared components and libraries."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, there are gaps in the ability to classify/categorize vulnerabilities using an industry-standard vulnerability-ranking system such as CVSS, maintain a remediation plan for all detected vulnerabilities, confirm that robust testing processes are used throughout the software lifecycle, and detect vulnerabilities in third-party, open-source, or shared components and libraries. New functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_114",
      "title": "PCI Secure Software Standard Requirement #114",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_patch_release_criteria_verification",
          "azure_api": "azure.security.PatchManagement.getReleaseCriteria()",
          "service": "azure_security",
          "rationale": "To verify that reasonable criteria are defined for releasing software updates to fix security vulnerabilities."
        },
        {
          "name": "azure_security_patch_distribution_verification",
          "azure_api": "azure.security.PatchManagement.getDistributionStatus()",
          "service": "azure_security",
          "rationale": "To confirm that security updates are made available to stakeholders in accordance with the defined criteria."
        }
      ],
      "mapping_notes": "The existing functions can help in verifying the remediation of vulnerabilities and logging of audit events. However, there are no existing functions that directly check the criteria for releasing software updates and their distribution to stakeholders. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_115",
      "title": "PCI Secure Software Standard Requirement #115",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_patch_update_verification",
          "azure_api": "azure.security.update().verify()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically verify that software updates to fix known vulnerabilities are made available to stakeholders in a timely manner. It should check the availability of updates, their timeliness, and whether they address known vulnerabilities."
        },
        {
          "name": "azure_security_patch_update_criteria_check",
          "azure_api": "azure.security.update().criteria_check()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically check that the criteria for releasing software updates to fix security vulnerabilities are defined and followed. It should check the criteria and the release of updates against these criteria."
        }
      ],
      "mapping_notes": "The existing functions 'azure_security_vulnerability_remediation_verification' and 'azure_monitor_detailed_audit_event_logging' can be used to verify that vulnerabilities are remediated and to log audit events, respectively. However, they do not fully cover the requirement of making software updates available to stakeholders in a timely manner and in accordance with defined criteria. Therefore, new functions 'azure_security_patch_update_verification' and 'azure_security_patch_update_criteria_check' are suggested to fully meet this requirement."
    },
    {
      "compliance_id": "Requirement_118",
      "title": "PCI Secure Software Standard Requirement #118",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_keyvault_prevent_key_substitution",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_software_update_integrity_verification",
          "azure_api": "azure.security.software.update.verify()",
          "service": "azure_security",
          "rationale": "Needed to programmatically verify the integrity of software updates during transmission and installation"
        },
        {
          "name": "azure_security_software_update_notification",
          "azure_api": "azure.security.software.update.notify()",
          "service": "azure_security",
          "rationale": "Needed to programmatically notify stakeholders of software updates and provide guidance on how they may be obtained and installed"
        },
        {
          "name": "azure_security_vulnerability_notification",
          "azure_api": "azure.security.vulnerability.notify()",
          "service": "azure_security",
          "rationale": "Needed to programmatically notify stakeholders when known vulnerabilities are detected in software that has not yet been updated with a fix"
        },
        {
          "name": "azure_security_software_update_coverage_verification",
          "azure_api": "azure.security.software.update.coverage.verify()",
          "service": "azure_security",
          "rationale": "Needed to programmatically verify that the software update mechanisms cover all software, configuration files, and other metadata that may be used by the software for security purposes or which may in some way affect the security of the software"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement #118. They can enforce SSL connections, enforce minimum TLS versions, prevent key substitution, verify vulnerability remediation, and log detailed audit events. However, there are no existing functions that can programmatically verify the integrity of software updates during transmission and installation, notify stakeholders of software updates and provide guidance on how they may be obtained and installed, notify stakeholders when known vulnerabilities are detected in software that has not yet been updated with a fix, and verify that the software update mechanisms cover all software, configuration files, and other metadata that may be used by the software for security purposes or which may in some way affect the security of the software. Therefore, new functions are needed to fully meet this requirement."
    },
    {
      "compliance_id": "Requirement_119",
      "title": "PCI Secure Software Standard Requirement #119",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "azure_keyvault_prevent_key_substitution",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_software_update_integrity_check",
          "azure_api": "azure.compute.update().integrity_check()",
          "service": "azure_compute",
          "rationale": "To ensure the integrity of software updates during transmission and installation"
        },
        {
          "name": "azure_compute_software_update_notification",
          "azure_api": "azure.compute.update().notification()",
          "service": "azure_compute",
          "rationale": "To notify stakeholders of software updates and provide guidance on how they may be obtained and installed"
        },
        {
          "name": "azure_security_vulnerability_notification",
          "azure_api": "azure.security.vulnerability().notification()",
          "service": "azure_security",
          "rationale": "To notify stakeholders when known vulnerabilities are detected in software that has not yet been updated with a fix"
        },
        {
          "name": "azure_compute_software_update_coverage_check",
          "azure_api": "azure.compute.update().coverage_check()",
          "service": "azure_compute",
          "rationale": "To ensure that the software update mechanisms cover all software, configuration files, and other metadata that may be used by the software for security purposes"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully comply with the requirement, particularly in areas of software update integrity check, software update notification, vulnerability notification, and software update coverage check."
    },
    {
      "compliance_id": "Requirement_120",
      "title": "PCI Secure Software Standard Requirement #120",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_policies_unauthorized_components_detection_interval"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_software_update_integrity_verification",
          "azure_api": "azure.security.software.update.integrity.verify()",
          "service": "azure_security",
          "rationale": "To ensure the integrity of software updates during transmission and installation"
        },
        {
          "name": "azure_security_software_update_user_input_validation_guidance",
          "azure_api": "azure.security.software.update.user.input.validation.guidance()",
          "service": "azure_security",
          "rationale": "To provide guidance to stakeholders on how to validate the integrity of software updates"
        },
        {
          "name": "azure_security_software_update_tls_connection_verification",
          "azure_api": "azure.security.software.update.tls.connection.verify()",
          "service": "azure_security",
          "rationale": "To verify the use of a TLS connection for software updates when the integrity method is not cryptographically secure"
        },
        {
          "name": "azure_security_software_update_notification_and_guidance",
          "azure_api": "azure.security.software.update.notification.and.guidance()",
          "service": "azure_security",
          "rationale": "To notify stakeholders of software updates and provide guidance on how they may be obtained and installed"
        },
        {
          "name": "azure_security_vulnerability_notification_and_mitigation_guidance",
          "azure_api": "azure.security.vulnerability.notification.and.mitigation.guidance()",
          "service": "azure_security",
          "rationale": "To notify stakeholders when known vulnerabilities are detected in software that has not yet been updated with a fix, and provide suggested mitigations"
        },
        {
          "name": "azure_security_software_update_coverage_verification",
          "azure_api": "azure.security.software.update.coverage.verify()",
          "service": "azure_security",
          "rationale": "To verify that the software update mechanisms cover all software, configuration files, and other metadata that may affect the security of the software"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. However, new functions are needed to fully ensure the secure delivery of software releases and updates, including the verification of software update integrity, providing guidance on user input validation, verifying the use of a TLS connection for software updates, notifying stakeholders of software updates and vulnerabilities, and verifying the coverage of software update mechanisms."
    },
    {
      "compliance_id": "Requirement_124",
      "title": "PCI Secure Software Standard Requirement #124",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_inactive_account_management"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_sensitive_data_retention_check",
          "azure_api": "azure.storage.BlobServiceClient().get_blob_properties()",
          "service": "azure_storage",
          "rationale": "To programmatically check if sensitive authentication data is stored after authorization in Azure Storage"
        },
        {
          "name": "azure_sql_sensitive_data_retention_check",
          "azure_api": "azure.sql.SqlDatabaseClient().get_database()",
          "service": "azure_sql",
          "rationale": "To programmatically check if sensitive authentication data is stored after authorization in Azure SQL databases"
        },
        {
          "name": "azure_keyvault_sensitive_data_retention_check",
          "azure_api": "azure.keyvault.SecretsClient().get_secret()",
          "service": "azure_keyvault",
          "rationale": "To programmatically check if sensitive authentication data is stored after authorization in Azure Key Vault"
        }
      ],
      "mapping_notes": "The existing functions partially cover the PCI requirement as they enable logging, prevent key substitution, review public access, monitor audit events, and manage inactive accounts. However, they do not specifically check if sensitive authentication data is stored after authorization. Therefore, new functions are needed to check for data retention in Azure Storage, SQL databases, and Key Vault."
    },
    {
      "compliance_id": "Requirement_125",
      "title": "PCI Secure Software Standard Requirement #125",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "backup_recovery_point_retention_period",
        "backup_recovery_point_encrypted_sse_cmk"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_delete_cardholder_data",
          "azure_api": "azure.storage.delete()",
          "service": "azure_storage",
          "rationale": "Needed to securely delete cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_mask_pan_display",
          "azure_api": "azure.storage.mask()",
          "service": "azure_storage",
          "rationale": "Needed to restrict or otherwise mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_render_pan_unreadable",
          "azure_api": "azure.storage.encrypt()",
          "service": "azure_storage",
          "rationale": "Needed to render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        },
        {
          "name": "azure_storage_prevent_pan_correlation",
          "azure_api": "azure.storage.preventCorrelation()",
          "service": "azure_storage",
          "rationale": "Needed to ensure that tokenized and truncated PAN values cannot be correlated to reconstruct the full PAN"
        }
      ],
      "mapping_notes": "The existing Azure functions can help to enforce some of the PCI Secure Software Standard requirements, such as disabling public access to storage blobs, preventing key substitution in Azure Key Vault, reviewing public access to Azure Storage, enforcing MFA for non-console access in Azure AD, and encrypting backup recovery points. However, new functions are needed to securely delete cardholder data after expiration of defined retention periods, mask PAN displays, render PAN unreadable, and prevent correlation of tokenized and truncated PAN values."
    },
    {
      "compliance_id": "Requirement_126",
      "title": "PCI Secure Software Standard Requirement #126",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_deletion_after_retention",
          "azure_api": "azure.storage.blob.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure secure deletion of cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_mask_pan_display",
          "azure_api": "azure.storage.blob.update_blob_properties()",
          "service": "azure_storage",
          "rationale": "To restrict or otherwise mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_render_pan_unreadable",
          "azure_api": "azure.storage.blob.upload_blob()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        },
        {
          "name": "azure_storage_prevent_pan_reconstruction",
          "azure_api": "azure.storage.blob.generate_blob_sas()",
          "service": "azure_storage",
          "rationale": "To ensure that tokenized and truncated versions of the same PAN cannot be correlated to reconstruct the original PAN"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements, specifically around restricting access to data, enforcing multi-factor authentication, and managing keys. However, there are no existing functions that specifically address secure deletion of cardholder data after retention periods, masking of PAN displays, rendering PAN unreadable in storage, and preventing reconstruction of PAN from tokenized and truncated versions. New functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_127",
      "title": "PCI Secure Software Standard Requirement #127",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_monitor_detailed_audit_event_logging",
        "storage_blob_access_public_access_disabled",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "backup_recovery_point_retention_period"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_deletion_after_retention_period",
          "azure_api": "azure.storage.BlobService.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure secure deletion of cardholder data after expiration of defined retention period"
        },
        {
          "name": "azure_storage_mask_pan_display",
          "azure_api": "azure.storage.TableService.update_entity()",
          "service": "azure_storage",
          "rationale": "To restrict or mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_render_pan_unreadable",
          "azure_api": "azure.storage.TableService.update_entity()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        },
        {
          "name": "azure_storage_token_truncate_pan_correlation_prevention",
          "azure_api": "azure.storage.TableService.update_entity()",
          "service": "azure_storage",
          "rationale": "To ensure tokenized and truncated versions of the same PAN cannot be correlated to reconstruct the original PAN"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements. However, there are no existing functions that directly address secure deletion of cardholder data after retention period, restricting or masking PAN displays, rendering PAN unreadable when stored, and preventing correlation of tokenized and truncated PAN. Therefore, new functions are needed to fully comply with these requirements."
    },
    {
      "compliance_id": "Requirement_128",
      "title": "PCI Secure Software Standard Requirement #128",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_blob_access_public_access_disabled",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_inactive_account_management",
        "monitor_cloud_services_enumeration",
        "backup_recovery_point_retention_period"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_data_deletion",
          "azure_api": "azure.storage.delete_blob()",
          "service": "azure_storage",
          "rationale": "Needed to securely delete cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_pan_masking",
          "azure_api": "azure.storage.mask_pan()",
          "service": "azure_storage",
          "rationale": "Needed to mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_pan_unreadable_storage",
          "azure_api": "azure.storage.encrypt_pan()",
          "service": "azure_storage",
          "rationale": "Needed to render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        },
        {
          "name": "azure_storage_pan_unreadable_export",
          "azure_api": "azure.storage.encrypt_export()",
          "service": "azure_storage",
          "rationale": "Needed to render PAN unreadable in files generated for use outside the software"
        }
      ],
      "mapping_notes": "Existing Azure functions provide partial coverage for PCI Secure Software Standard Requirement #128. However, there are gaps in the ability to securely delete cardholder data after defined retention periods, mask PAN displays, render PAN unreadable in storage and exports. New functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_129",
      "title": "PCI Secure Software Standard Requirement #129",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "backup_recovery_point_encrypted_sse_cmk",
        "backup_recovery_point_retention_period",
        "azure_storage_public_access_review",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_deletion_after_retention_period",
          "azure_api": "azure.storage.BlobService.delete_blob()",
          "service": "azure_storage",
          "rationale": "To ensure secure deletion of cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_pan_masking",
          "azure_api": "azure.storage.BlobService.update_blob_properties()",
          "service": "azure_storage",
          "rationale": "To restrict or otherwise mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_pan_unreadable_storage",
          "azure_api": "azure.storage.BlobService.update_blob_properties()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        }
      ],
      "mapping_notes": "The existing Azure functions can partially cover the PCI Secure Software Standard requirements. However, there are no existing functions that can programmatically ensure secure deletion of cardholder data after defined retention periods, restrict or mask all displays of PAN to the minimum number of digits required, and render PAN unreadable anywhere it is stored. New functions are proposed to cover these gaps."
    },
    {
      "compliance_id": "Requirement_130",
      "title": "PCI Secure Software Standard Requirement #130",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "backup_recovery_point_encrypted_sse_cmk",
        "backup_recovery_point_retention_period",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_deletion_guidance",
          "azure_api": "azure.storage.delete()",
          "service": "azure_storage",
          "rationale": "To provide guidance on secure deletion of cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_pan_masking",
          "azure_api": "azure.storage.mask()",
          "service": "azure_storage",
          "rationale": "To restrict or mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_pan_unreadable_storage",
          "azure_api": "azure.storage.encrypt()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored by using truncation, index tokens and pads, or strong cryptography"
        }
      ],
      "mapping_notes": "The existing functions cover aspects of logging, encryption, retention, and authentication. However, they do not fully cover the requirements for secure deletion, PAN masking, and rendering PAN unreadable in storage. New functions are proposed to address these gaps."
    },
    {
      "compliance_id": "Requirement_131",
      "title": "PCI Secure Software Standard Requirement #131",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "backup_recovery_point_encrypted_sse_cmk",
        "backup_recovery_point_retention_period",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_deletion_guidance",
          "azure_api": "azure.storage.delete()",
          "service": "azure_storage",
          "rationale": "To provide guidance for secure deletion of cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_pan_masking",
          "azure_api": "azure.storage.mask()",
          "service": "azure_storage",
          "rationale": "To restrict or otherwise mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_pan_unreadable_storage",
          "azure_api": "azure.storage.encrypt()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements. They provide mechanisms for logging, encryption, retention, and public access review. However, there are no specific functions for secure deletion of cardholder data, PAN masking, and rendering PAN unreadable when stored. Therefore, new functions are proposed to cover these aspects."
    },
    {
      "compliance_id": "Requirement_132",
      "title": "PCI Secure Software Standard Requirement #132",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_access_policy_enforcement",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_ad_access_policy_enforcement"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_secure_delete_cardholder_data",
          "azure_api": "azure.storage.delete()",
          "service": "azure_storage",
          "rationale": "Needed to securely delete cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_mask_pan_display",
          "azure_api": "azure.storage.mask()",
          "service": "azure_storage",
          "rationale": "Needed to restrict or mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_render_pan_unreadable",
          "azure_api": "azure.storage.encrypt()",
          "service": "azure_storage",
          "rationale": "Needed to render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        },
        {
          "name": "azure_storage_prevent_pan_reconstruction",
          "azure_api": "azure.storage.preventReconstruction()",
          "service": "azure_storage",
          "rationale": "Needed to ensure that tokenized and truncated versions of the same PAN cannot be correlated to reconstruct the original PAN"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements. However, new functions are needed to fully comply with the requirements, specifically for securely deleting cardholder data, restricting or masking PAN displays, rendering PAN unreadable, and preventing the reconstruction of PAN from tokenized and truncated versions."
    },
    {
      "compliance_id": "Requirement_133",
      "title": "PCI Secure Software Standard Requirement #133",
      "existing_functions_mapped": [
        "storage_blob_access_public_access_disabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_storage_public_access_review",
        "azure_keyvault_prevent_key_substitution",
        "backup_recovery_point_retention_period",
        "backup_recovery_point_encrypted_sse_cmk",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_deletion_after_retention_period",
          "azure_api": "azure.storage.delete()",
          "service": "azure_storage",
          "rationale": "To ensure secure deletion of cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_pan_masking",
          "azure_api": "azure.storage.mask()",
          "service": "azure_storage",
          "rationale": "To restrict or otherwise mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_pan_unreadable_storage",
          "azure_api": "azure.storage.encrypt()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. The functions handle aspects such as data access control, key management, and vulnerability remediation. However, there are no specific functions for secure deletion of cardholder data after a defined retention period, masking of PAN data, and rendering PAN unreadable in storage. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_134",
      "title": "PCI Secure Software Standard Requirement #134",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "backup_recovery_point_encrypted_sse_cmk",
        "backup_recovery_point_retention_period",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_inactive_account_management",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_storage_data_deletion_after_retention_period",
          "azure_api": "azure.storage.delete()",
          "service": "azure_storage",
          "rationale": "To ensure secure deletion of cardholder data after expiration of defined retention period(s)"
        },
        {
          "name": "azure_storage_pan_masking",
          "azure_api": "azure.storage.mask_pan()",
          "service": "azure_storage",
          "rationale": "To restrict or mask all displays of PAN to the minimum number of digits required"
        },
        {
          "name": "azure_storage_pan_unreadable_storage",
          "azure_api": "azure.storage.encrypt_pan()",
          "service": "azure_storage",
          "rationale": "To render PAN unreadable anywhere it is stored using truncation, index tokens and pads, or strong cryptography"
        }
      ],
      "mapping_notes": "Existing Azure functions partially cover the PCI Secure Software Standard requirement. Functions for secure deletion of cardholder data after retention period, PAN masking and rendering PAN unreadable in storage are needed to fully comply with the requirement."
    },
    {
      "compliance_id": "Requirement_141",
      "title": "PCI Secure Software Standard Requirement #141",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_rng_function_verification",
          "azure_api": "azure.keyvault.keys.get()",
          "service": "azure_keyvault",
          "rationale": "To verify that only the RNG functions included in the PTS evaluation are used and no custom RNG functions are implemented"
        },
        {
          "name": "azure_keyvault_cryptography_verification",
          "azure_api": "azure.keyvault.keys.get()",
          "service": "azure_keyvault",
          "rationale": "To verify that the software does not bypass or render ineffective any encryption methods or account data security methods implemented by the payment terminal"
        },
        {
          "name": "azure_storage_account_data_sharing_verification",
          "azure_api": "azure.storage.blob.get()",
          "service": "azure_storage",
          "rationale": "To verify that the software does not provide sharing of clear-text account data directly with other software (except terminal firmware)"
        },
        {
          "name": "azure_compute_application_segregation_verification",
          "azure_api": "azure.compute.virtualMachines.get()",
          "service": "azure_compute",
          "rationale": "To verify that the software does not bypass or render ineffective any application segregation enforced by the terminal"
        },
        {
          "name": "azure_storage_file_signature_verification",
          "azure_api": "azure.storage.blob.get()",
          "service": "azure_storage",
          "rationale": "To verify that all software files are cryptographically signed to enable cryptographic authentication by the terminal firmware"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements. However, there are several specific requirements related to RNG functions, encryption methods, account data sharing, application segregation, and file signatures that are not directly covered by the existing functions. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_145",
      "title": "PCI Secure Software Standard Requirement #145",
      "existing_functions_mapped": [
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_cryptographic_signature_verification",
          "azure_api": "azure.keyvault.keys.verify()",
          "service": "azure_keyvault",
          "rationale": "This function is needed to verify the cryptographic signatures of software files, ensuring their authenticity and integrity."
        },
        {
          "name": "azure_storage_blob_cryptographic_signature_check",
          "azure_api": "azure.storage.blob.verify()",
          "service": "azure_storage",
          "rationale": "This function is needed to verify the cryptographic signatures of software files stored in Azure Storage, ensuring their authenticity and integrity."
        },
        {
          "name": "azure_compute_software_files_signature_verification",
          "azure_api": "azure.compute.virtual_machines.verify()",
          "service": "azure_compute",
          "rationale": "This function is needed to verify the cryptographic signatures of software files deployed on Azure Virtual Machines, ensuring their authenticity and integrity."
        }
      ],
      "mapping_notes": "The existing Azure functions provide some coverage for the requirement of cryptographically signing all software files for terminal firmware authentication. However, they do not fully cover the requirement as they do not provide functions to verify the cryptographic signatures of the software files. The new functions suggested would provide the ability to programmatically verify the cryptographic signatures of software files, thus ensuring their authenticity and integrity."
    },
    {
      "compliance_id": "Requirement_146",
      "title": "PCI Secure Software Standard Requirement #146",
      "existing_functions_mapped": [
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_mfa_enforcement_non_console_access"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_keyvault_verify_signature",
          "azure_api": "azure.keyvault.verify_signature()",
          "service": "azure_keyvault",
          "rationale": "To verify the cryptographic signature of software files and prompt files"
        },
        {
          "name": "azure_keyvault_verify_encryption",
          "azure_api": "azure.keyvault.verify_encryption()",
          "service": "azure_keyvault",
          "rationale": "To verify that the software does not bypass or render ineffective any encryption methods implemented by the payment terminal"
        },
        {
          "name": "azure_keyvault_verify_rng",
          "azure_api": "azure.keyvault.verify_rng()",
          "service": "azure_keyvault",
          "rationale": "To verify that the software uses only the RNG functions included in the PTS evaluation and does not implement its own"
        },
        {
          "name": "azure_network_verify_communication_methods",
          "azure_api": "azure.network.verify_communication_methods()",
          "service": "azure_network",
          "rationale": "To verify that the software uses only the external communication methods included in the payment terminal’s PTS device evaluation"
        }
      ],
      "mapping_notes": "The existing Azure functions can help to enforce and verify some aspects of the PCI Secure Software Standard requirement, such as cryptographic key management, public access review, detailed audit event logging, and MFA enforcement for non-console access. However, new functions are needed to fully implement and verify this requirement, specifically to verify the cryptographic signature of software files and prompt files, verify that the software does not bypass or render ineffective any encryption methods implemented by the payment terminal, verify that the software uses only the RNG functions included in the PTS evaluation and does not implement its own, and verify that the software uses only the external communication methods included in the payment terminal’s PTS device evaluation."
    },
    {
      "compliance_id": "Requirement_149",
      "title": "PCI Secure Software Standard Requirement #149",
      "existing_functions_mapped": [
        "azure_monitor_detailed_audit_event_logging",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_input_validation",
          "azure_api": "azure.compute.validate_input()",
          "service": "azure_compute",
          "rationale": "To validate all user and other external inputs as per requirement B.3.1"
        },
        {
          "name": "azure_compute_string_input_validation",
          "azure_api": "azure.compute.validate_string_input()",
          "service": "azure_compute",
          "rationale": "To validate all string values as per requirement B.3.1.1"
        },
        {
          "name": "azure_compute_buffer_size_validation",
          "azure_api": "azure.compute.validate_buffer_size()",
          "service": "azure_compute",
          "rationale": "To check inputs and reject or securely handle any inputs that violate buffer size or memory allocation thresholds as per requirement B.3.1.2"
        },
        {
          "name": "azure_compute_return_value_check",
          "azure_api": "azure.compute.check_return_value()",
          "service": "azure_compute",
          "rationale": "To check return values and handle error conditions securely as per requirement B.3.2"
        },
        {
          "name": "azure_compute_race_condition_mitigation",
          "azure_api": "azure.compute.mitigate_race_condition()",
          "service": "azure_compute",
          "rationale": "To avoid race conditions as per requirement B.3.3"
        }
      ],
      "mapping_notes": "The existing functions provide a partial coverage for the PCI Secure Software Standard requirement #149. The azure_monitor_detailed_audit_event_logging function can be used to log and monitor the software behavior and the azure_security_vulnerability_remediation_verification function can be used to verify the remediation of identified vulnerabilities. However, there are no existing functions that directly map to the specific requirements for input validation, return value checks, and race condition mitigation. Therefore, new functions are proposed for these requirements."
    },
    {
      "compliance_id": "Requirement_150",
      "title": "PCI Secure Software Standard Requirement #150",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_software_vulnerability_testing",
          "azure_api": "azure.security.software_vulnerability_testing()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically test software for vulnerabilities prior to each update or release, covering the presence or use of unnecessary ports and protocols, unintended handling of clear-text account data, hard-coded authentication credentials, test data or accounts, and any faulty or ineffective security controls."
        },
        {
          "name": "azure_security_remove_test_data_and_accounts",
          "azure_api": "azure.security.remove_test_data_and_accounts()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically ensure that test data and accounts are removed from the software prior to each update or release."
        },
        {
          "name": "azure_security_remove_hardcoded_credentials",
          "azure_api": "azure.security.remove_hardcoded_credentials()",
          "service": "azure_security",
          "rationale": "This function is needed to programmatically ensure that hardcoded credentials are removed from the software prior to each update or release."
        }
      ],
      "mapping_notes": "The existing Azure functions 'azure_security_vulnerability_remediation_verification' and 'azure_monitor_detailed_audit_event_logging' partially cover the PCI Secure Software Standard requirement for testing software for vulnerabilities prior to each update or release. However, additional functions are needed to fully cover the requirement, including functions to programmatically test for specific vulnerabilities, remove test data and accounts, and remove hardcoded credentials."
    },
    {
      "compliance_id": "Requirement_155",
      "title": "PCI Secure Software Standard Requirement #155",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "azure_compute_generate_sbom",
          "azure_api": "azure.compute.generate_sbom()",
          "service": "azure_compute",
          "rationale": "To generate a Software Bill of Materials (SBOM) for each software update, providing a comprehensive list of all software components and services, including proprietary libraries, third-party frameworks, and APIs."
        },
        {
          "name": "azure_compute_get_sbom",
          "azure_api": "azure.compute.get_sbom()",
          "service": "azure_compute",
          "rationale": "To retrieve the SBOM for a specific software version, enabling tracking across the software supply chain."
        },
        {
          "name": "azure_compute_verify_third_party_components",
          "azure_api": "azure.compute.verify_third_party_components()",
          "service": "azure_compute",
          "rationale": "To verify the authenticity of software components fetched from third-party systems each time they are fetched."
        },
        {
          "name": "azure_security_monitor_vulnerabilities",
          "azure_api": "azure.security.monitor_vulnerabilities()",
          "service": "azure_security",
          "rationale": "To regularly monitor vulnerabilities in third-party components and services and ensure they are patched or mitigated in a timely manner."
        }
      ],
      "mapping_notes": "The PCI Secure Software Standard requirements related to the Software Bill of Materials (SBOM) are not directly covered by any existing Azure functions. New functions are proposed to generate and retrieve the SBOM, verify the authenticity of third-party components, and monitor vulnerabilities in these components. These functions would need to be implemented programmatically using Azure SDK/API calls."
    },
    {
      "compliance_id": "Requirement_158",
      "title": "PCI Secure Software Standard Requirement #158",
      "existing_functions_mapped": [
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_monitor_detailed_audit_event_logging"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_sbom_generation",
          "azure_api": "azure.security.generate_sbom()",
          "service": "azure_security",
          "rationale": "To generate a Software Bill of Materials (SBOM) each time the software is updated, as required by PCI Secure Software Standard Requirement #158"
        },
        {
          "name": "azure_security_sbom_dependency_tracking",
          "azure_api": "azure.security.track_sbom_dependencies()",
          "service": "azure_security",
          "rationale": "To track primary and secondary dependencies in the SBOM, as required by the standard"
        },
        {
          "name": "azure_security_sbom_production_dependency_inclusion",
          "azure_api": "azure.security.include_production_dependencies_in_sbom()",
          "service": "azure_security",
          "rationale": "To include software dependencies present in the production environment in the SBOM, as required by the standard"
        },
        {
          "name": "azure_security_sbom_authenticity_verification",
          "azure_api": "azure.security.verify_sbom_authenticity()",
          "service": "azure_security",
          "rationale": "To verify the authenticity of software components fetched from third-party systems each time they are fetched, as required by the standard"
        }
      ],
      "mapping_notes": "The existing Azure security functions partially cover the requirements of PCI Secure Software Standard Requirement #158. However, there are no existing functions that directly address the creation, tracking, and verification of a Software Bill of Materials (SBOM), which is a key requirement of the standard. Therefore, new functions are proposed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_160",
      "title": "PCI Secure Software Standard Requirement #160",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_access_policy_enforcement",
        "azure_storage_public_access_review",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_inactive_account_management",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_global_administrator_mfa_required",
        "sqlserver_azuread_authentication_configured",
        "network_security_group_association_required",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_enforce_strong_authentication_methods",
          "azure_api": "azure.ad.authentication.enforce_strong_methods()",
          "service": "azure_ad",
          "rationale": "To ensure that the authentication methods used are sufficiently strong and robust to protect authentication credentials."
        },
        {
          "name": "azure_ad_enforce_secure_area_authentication",
          "azure_api": "azure.ad.authentication.enforce_secure_area()",
          "service": "azure_ad",
          "rationale": "To ensure that authentication decisions are enforced within a secure area of the software."
        },
        {
          "name": "azure_ad_enforce_fine_grained_access_control",
          "azure_api": "azure.ad.access.enforce_fine_grained_control()",
          "service": "azure_ad",
          "rationale": "To ensure that access to all software functions and resources exposed through Internet-accessible interfaces is restricted to explicitly authorized users only."
        },
        {
          "name": "azure_ad_enforce_authorization_per_request",
          "azure_api": "azure.ad.authorization.enforce_per_request()",
          "service": "azure_ad",
          "rationale": "To ensure that authorization rules are enforced upon each user request to access software functions and resources."
        },
        {
          "name": "azure_ad_enforce_secure_area_access_control",
          "azure_api": "azure.ad.access.enforce_secure_area()",
          "service": "azure_ad",
          "rationale": "To ensure that access control decisions are enforced within a secure area of the software architecture."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements. However, new functions are needed to fully enforce strong authentication methods, secure area for authentication and access control, fine-grained access control, authorization per request, and secure area for access control decisions."
    },
    {
      "compliance_id": "Requirement_161",
      "title": "PCI Secure Software Standard Requirement #161",
      "existing_functions_mapped": [
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_access_policy_enforcement",
        "azure_storage_public_access_review",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "network_security_group_association_required",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_sensitive_functions_resources",
          "azure_api": "azure.identity.authenticate()",
          "service": "Azure Identity",
          "rationale": "This function is needed to authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces."
        },
        {
          "name": "azure_network_enforce_secure_area_authentication",
          "azure_api": "azure.network.enforceSecureArea()",
          "service": "Azure Network",
          "rationale": "This function is needed to enforce that authentication decisions are made within a secure area of the software."
        },
        {
          "name": "azure_network_enforce_secure_area_authorization",
          "azure_api": "azure.network.enforceSecureArea()",
          "service": "Azure Network",
          "rationale": "This function is needed to enforce that authorization decisions are made within a secure area of the software."
        },
        {
          "name": "azure_network_restrict_interface_access",
          "azure_api": "azure.network.restrictAccess()",
          "service": "Azure Network",
          "rationale": "This function is needed to restrict access to all Internet-accessible interfaces to explicitly authorized users only."
        },
        {
          "name": "azure_network_restrict_function_resource_access",
          "azure_api": "azure.network.restrictAccess()",
          "service": "Azure Network",
          "rationale": "This function is needed to restrict access to all software functions and resources exposed through Internet-accessible interfaces to explicitly authorized users only."
        },
        {
          "name": "azure_network_enforce_fine_grained_access_control",
          "azure_api": "azure.network.enforceFineGrainedAccessControl()",
          "service": "Azure Network",
          "rationale": "This function is needed to enforce fine-grained access control at both the function level and resource level."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements for web software access controls. However, new functions are needed to fully authenticate and authorize user access to sensitive functions and resources, enforce decisions within a secure area of the software, restrict access to Internet-accessible interfaces, and enforce fine-grained access control."
    },
    {
      "compliance_id": "Requirement_162",
      "title": "PCI Secure Software Standard Requirement #162",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification",
        "network_security_group_association_required",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "azure_policies_unauthorized_components_detection_interval",
        "azure_ad_global_administrator_mfa_required",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_user_access",
          "azure_api": "azure.ad.authenticate_user_access()",
          "service": "Azure AD",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces"
        },
        {
          "name": "azure_ad_enforce_authentication_decisions",
          "azure_api": "azure.ad.enforce_authentication_decisions()",
          "service": "Azure AD",
          "rationale": "To enforce authentication decisions within a secure area of the software"
        },
        {
          "name": "azure_ad_authorize_user_access",
          "azure_api": "azure.ad.authorize_user_access()",
          "service": "Azure AD",
          "rationale": "To restrict access to all Internet-accessible interfaces to explicitly authorized users only"
        },
        {
          "name": "azure_ad_enforce_authorization_decisions",
          "azure_api": "azure.ad.enforce_authorization_decisions()",
          "service": "Azure AD",
          "rationale": "To enforce access control decisions within a secure area of the software architecture"
        }
      ],
      "mapping_notes": "The existing Azure functions provide a partial coverage for the PCI Secure Software Standard requirements. However, there are gaps in authenticating and authorizing user access to sensitive functions and resources, enforcing authentication and authorization decisions, and restricting access to Internet-accessible interfaces. New functions are needed to fill these gaps."
    },
    {
      "compliance_id": "Requirement_163",
      "title": "PCI Secure Software Standard Requirement #163",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_access_policy_enforcement",
        "azure_storage_public_access_review",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "network_security_group_association_required",
        "azure_keyvault_prevent_key_substitution"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_user_access",
          "azure_api": "azure.ad.authenticate_user_access()",
          "service": "Azure Active Directory",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces"
        },
        {
          "name": "azure_ad_enforce_authentication_decisions",
          "azure_api": "azure.ad.enforce_authentication_decisions()",
          "service": "Azure Active Directory",
          "rationale": "To ensure authentication decisions are enforced within a secure area of the software"
        },
        {
          "name": "azure_network_restrict_internet_accessible_interfaces",
          "azure_api": "azure.network.restrict_internet_accessible_interfaces()",
          "service": "Azure Network",
          "rationale": "To restrict access to all Internet-accessible interfaces to explicitly authorized users only"
        },
        {
          "name": "azure_network_enforce_authorization_rules",
          "azure_api": "azure.network.enforce_authorization_rules()",
          "service": "Azure Network",
          "rationale": "To enforce authorization rules upon each user request to access software functions and resources"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements. However, new functions are needed to fully authenticate user access, enforce authentication decisions, restrict access to Internet-accessible interfaces, and enforce authorization rules."
    },
    {
      "compliance_id": "Requirement_164",
      "title": "PCI Secure Software Standard Requirement #164",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_access_policy_enforcement",
        "azure_security_vulnerability_remediation_verification",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_prevent_key_substitution",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "network_security_group_association_required",
        "network_secure_transmission_policy_established",
        "sqlserver_azuread_authentication_configured",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_sensitive_functions_resources",
          "azure_api": "azure.ad.authenticate()",
          "service": "Azure Active Directory",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces."
        },
        {
          "name": "azure_ad_authorize_access_to_interfaces",
          "azure_api": "azure.ad.authorize()",
          "service": "Azure Active Directory",
          "rationale": "To restrict access to all Internet-accessible interfaces to explicitly authorized users only."
        },
        {
          "name": "azure_ad_authorize_access_to_functions_resources",
          "azure_api": "azure.ad.authorize()",
          "service": "Azure Active Directory",
          "rationale": "To restrict access to all software functions and resources exposed through Internet-accessible interfaces to explicitly authorized users only."
        },
        {
          "name": "azure_ad_enforce_access_control_rules",
          "azure_api": "azure.ad.enforceAccessControl()",
          "service": "Azure Active Directory",
          "rationale": "To ensure enforcement of access control rules at both the function level and resource level with fine-grained access control."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements for web software access controls. However, new functions are needed to fully authenticate and authorize user access to sensitive functions and resources, restrict access to Internet-accessible interfaces, and enforce access control rules at both the function level and resource level."
    },
    {
      "compliance_id": "Requirement_165",
      "title": "PCI Secure Software Standard Requirement #165",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_access_policy_enforcement",
        "network_security_group_association_required",
        "azure_storage_public_access_review",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_compute_instance_creation_in_unused_regions_prevented"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_user_access",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "Azure Identity",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces."
        },
        {
          "name": "azure_ad_authorize_user_access",
          "azure_api": "azure.identity.ClientSecretCredential()",
          "service": "Azure Identity",
          "rationale": "To authorize user access to sensitive functions and resources exposed through Internet-accessible interfaces."
        },
        {
          "name": "azure_network_restrict_internet_accessible_interfaces",
          "azure_api": "azure.mgmt.network.NetworkManagementClient()",
          "service": "Azure Network",
          "rationale": "To restrict access to all Internet-accessible interfaces to explicitly authorized users only."
        },
        {
          "name": "azure_security_enforce_access_control_rules",
          "azure_api": "azure.mgmt.security.SecurityCenter()",
          "service": "Azure Security Center",
          "rationale": "To enforce access control rules at both the function level and resource level with fine-grained access control."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They provide mechanisms for enforcing access policies, authenticating users, and restricting public access. However, there are no specific functions for authenticating and authorizing user access to sensitive functions and resources, restricting access to all Internet-accessible interfaces, and enforcing access control rules at both the function level and resource level. Therefore, new functions are needed to fully cover the requirement."
    },
    {
      "compliance_id": "Requirement_166",
      "title": "PCI Secure Software Standard Requirement #166",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "network_security_group_association_required",
        "storage_blob_access_public_access_disabled",
        "sqlserver_azuread_authentication_configured",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_sensitive_function_access_authentication",
          "azure_api": "azure.ad.authentication.verify()",
          "service": "Azure Active Directory",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces"
        },
        {
          "name": "azure_network_sensitive_resource_access_authorization",
          "azure_api": "azure.network.authorization.verify()",
          "service": "Azure Network",
          "rationale": "To enforce authorization rules upon each user request to access software functions and resources"
        },
        {
          "name": "azure_security_enforce_secure_area_authentication",
          "azure_api": "azure.security.authentication.enforce()",
          "service": "Azure Security",
          "rationale": "To ensure authentication decisions are enforced within a secure area of the software"
        },
        {
          "name": "azure_security_enforce_secure_area_authorization",
          "azure_api": "azure.security.authorization.enforce()",
          "service": "Azure Security",
          "rationale": "To ensure authorization and access control decisions are enforced within secure areas of the software"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements for web software access controls. They provide mechanisms for enforcing access policies, authenticating users, and restricting public access. However, they do not fully cover the requirements for authenticating access to sensitive functions and resources, enforcing authorization rules for each user request, and enforcing authentication and authorization decisions within secure areas of the software. Therefore, new functions are needed to achieve full compliance."
    },
    {
      "compliance_id": "Requirement_167",
      "title": "PCI Secure Software Standard Requirement #167",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_access_policy_enforcement",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "azure_security_vulnerability_remediation_verification",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_keyvault_prevent_key_substitution",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "network_security_group_association_required",
        "network_route_table_no_public_routes_to_igw",
        "network_secure_transmission_policy_established",
        "firewall_policy_stateless_fragpackets_default_action",
        "storage_queue_enable_logging_for_read_write_delete",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "sqlserver_azuread_authentication_configured",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "ai_search_service_https_enforcement_tls_version",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "cognitive_search_domain_rbac_enabled",
        "backup_recovery_point_retention_period",
        "backup_recovery_point_encrypted_sse_cmk",
        "dms_replication_task_logging_severity_enabled",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "virtual_machine_diagnostic_settings_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing Azure functions provide comprehensive coverage for the PCI Secure Software Standard requirement. They ensure that authorization rules are enforced upon each user request to access software functions and resources. The functions cover aspects such as multi-factor authentication, access policy enforcement, reconfirmation of authentication, public access review, vulnerability remediation verification, key guidance distribution, prevention of key substitution, restriction of instance creation in unused regions, detailed audit event logging, network security group association, secure transmission policy establishment, logging for read/write/delete operations on storage queues, public access disabling for storage blobs, prohibition of public access with private endpoints or access restrictions, Azure AD authentication configuration for SQL Server, audit log to Azure Monitor logs for MySQL flexible server, SSL connection enforcement for MySQL standard database server, WAF policy association with application gateway/API management/front door, server-side encryption enabling for Event Hubs stream analytics, minimum TLS 1.2 security policy for Front Door CDN profiles, HTTPS enforcement and TLS version for AI Search service, snapshot retention within limit for Synapse Analytics SQL pool, RBAC enabling for Cognitive Search domain, retention period and encryption for backup recovery point, logging severity enabling for DMS replication task, public network access disabling and NSG port restriction for HDInsight cluster, and diagnostic settings enabling for virtual machines."
    },
    {
      "compliance_id": "Requirement_168",
      "title": "PCI Secure Software Standard Requirement #168",
      "existing_functions_mapped": [
        "azure_ad_access_policy_enforcement",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_storage_public_access_review",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_inactive_account_management",
        "sqlserver_azuread_authentication_configured",
        "network_security_group_association_required",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_user_access_authentication",
          "azure_api": "azure.ad.user.authenticate()",
          "service": "Azure Active Directory",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces."
        },
        {
          "name": "azure_ad_authentication_strength_check",
          "azure_api": "azure.ad.authentication.checkStrength()",
          "service": "Azure Active Directory",
          "rationale": "To ensure the methods implemented are sufficiently strong and robust to protect authentication credentials."
        },
        {
          "name": "azure_ad_secure_area_authentication_enforcement",
          "azure_api": "azure.ad.authentication.enforceSecureArea()",
          "service": "Azure Active Directory",
          "rationale": "To enforce authentication decisions within a secure area of the software."
        },
        {
          "name": "azure_ad_authorization_rule_enforcement",
          "azure_api": "azure.ad.authorization.enforceRules()",
          "service": "Azure Active Directory",
          "rationale": "To enforce authorization rules upon each user request to access software functions and resources."
        },
        {
          "name": "azure_ad_secure_area_access_control_enforcement",
          "azure_api": "azure.ad.accessControl.enforceSecureArea()",
          "service": "Azure Active Directory",
          "rationale": "To enforce access control decisions within a secure area of the software architecture."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirements related to web software access controls. However, new functions are needed to fully address the requirements for user authentication, authentication strength, secure area enforcement for authentication and access control, and per-request authorization rule enforcement."
    },
    {
      "compliance_id": "Requirement_169",
      "title": "PCI Secure Software Standard Requirement #169",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_ad_access_policy_enforcement"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_sensitive_functions_resources",
          "azure_api": "azure.identity.authenticate()",
          "service": "Azure Identity",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces."
        },
        {
          "name": "azure_network_restrict_internet_accessible_interfaces",
          "azure_api": "azure.network.restrictAccess()",
          "service": "Azure Network",
          "rationale": "To restrict access to all Internet-accessible interfaces to explicitly authorized users only."
        },
        {
          "name": "azure_network_restrict_function_resource_access",
          "azure_api": "azure.network.restrictAccess()",
          "service": "Azure Network",
          "rationale": "To restrict access to all software functions and resources exposed through Internet-accessible interfaces to explicitly authorized users only."
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They provide mechanisms for enforcing multi-factor authentication, reconfirming user authentication, preventing creation of instances in unused regions, reviewing public access to storage, managing inactive accounts, logging detailed audit events, and enforcing access policies. However, there are no specific functions for authenticating user access to sensitive functions and resources, restricting access to Internet-accessible interfaces, and restricting access to software functions and resources exposed through these interfaces. Therefore, new functions are needed to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_170",
      "title": "PCI Secure Software Standard Requirement #170",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_monitor_detailed_audit_event_logging",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_access_policy_enforcement",
        "azure_keyvault_prevent_key_substitution",
        "azure_ad_global_administrator_mfa_required",
        "network_security_group_association_required",
        "network_route_table_no_public_routes_to_igw",
        "network_secure_transmission_policy_established",
        "firewall_policy_stateless_fragpackets_default_action",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "functionapp_settings_match_expected",
        "storage_blob_access_public_access_disabled",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "sqlserver_azuread_authentication_configured",
        "storage_queue_enable_logging_for_read_write_delete",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_encrypted_sse_cmk",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "ai_search_service_https_enforcement_tls_version",
        "purview_account_status_enabled_per_region",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing Azure functions cover the PCI Secure Software Standard requirement for web software access controls. The functions ensure that user access to sensitive functions and resources through Internet-accessible interfaces is authenticated using industry-standard mechanisms. The functions also ensure that access to all Internet-accessible interfaces, software functions, and resources is restricted to explicitly authorized users only. Furthermore, the functions ensure that authentication and access control decisions are enforced within a secure area of the software architecture. No new functions are needed."
    },
    {
      "compliance_id": "Requirement_171",
      "title": "PCI Secure Software Standard Requirement #171",
      "existing_functions_mapped": [
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_keyvault_prevent_key_substitution",
        "azure_storage_public_access_review",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "azure_monitor_detailed_audit_event_logging",
        "azure_security_vulnerability_remediation_verification",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_global_administrator_mfa_required",
        "azure_ad_access_policy_enforcement",
        "storage_blob_access_public_access_disabled",
        "network_security_group_association_required",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_ad_authenticate_user_access",
          "azure_api": "azure.ad.authenticate_user_access()",
          "service": "Azure Active Directory",
          "rationale": "To authenticate user access to sensitive functions and resources exposed through Internet-accessible interfaces"
        },
        {
          "name": "azure_network_secure_area_enforcement",
          "azure_api": "azure.network.secure_area_enforcement()",
          "service": "Azure Network",
          "rationale": "To ensure that all authentication and access control decisions are enforced within a secure area of the software architecture"
        },
        {
          "name": "azure_ad_authorize_user_access",
          "azure_api": "azure.ad.authorize_user_access()",
          "service": "Azure Active Directory",
          "rationale": "To authorize user access to sensitive functions and resources exposed through Internet-accessible interfaces"
        }
      ],
      "mapping_notes": "The existing Azure functions provide partial coverage for the PCI Secure Software Standard requirement. They cover aspects of user authentication, access control, and secure area enforcement. However, there are gaps in the existing functions, particularly in terms of authenticating and authorizing user access to sensitive functions and resources exposed through Internet-accessible interfaces. Therefore, new functions are needed to fully meet the requirement."
    },
    {
      "compliance_id": "Requirement_172",
      "title": "PCI Secure Software Standard Requirement #172",
      "existing_functions_mapped": [
        "compute_extension_approved_only",
        "mysql_standard_database_server_enforce_ssl_connection",
        "waf_policy_associated_application_gateway_api_management_front_door",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "network_route_table_no_public_routes_to_igw",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "azure_policies_unauthorized_components_detection_interval",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "dms_replication_task_logging_severity_enabled",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "storage_information_assets_secure_reuse_disposal",
        "backup_recovery_point_retention_period",
        "synapse_analytics_sql_pool_snapshot_retention_within_limit",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "purview_account_status_enabled_per_region",
        "security_policy_management_review_interval",
        "virtual_machine_diagnostic_settings_enabled",
        "azure_keyvault_customer_key_guidance_distribution",
        "network_security_group_association_required",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "cognitive_search_domain_rbac_enabled",
        "storage_electronic_protected_health_info_backup_maintenance",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "functionapp_settings_match_expected",
        "azure_monitor_detailed_audit_event_logging",
        "system_network_access_multifactor_authentication_privileged_nonprivileged",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_security_parser_interpreter_restriction",
          "azure_api": "azure.security.parser_interpreter_restriction()",
          "service": "azure_security",
          "rationale": "To ensure parsers and interpreters are configured with the most restrictive configuration feasible."
        },
        {
          "name": "azure_security_resource_starvation_mitigation",
          "azure_api": "azure.security.resource_starvation_mitigation()",
          "service": "azure_security",
          "rationale": "To implement software security controls to protect software interfaces from resource starvation attacks."
        },
        {
          "name": "azure_security_file_upload_mitigation",
          "azure_api": "azure.security.file_upload_mitigation()",
          "service": "azure_security",
          "rationale": "To implement software security controls to protect Internet accessible interfaces from malicious file content."
        },
        {
          "name": "azure_security_hostile_object_creation_mitigation",
          "azure_api": "azure.security.hostile_object_creation_mitigation()",
          "service": "azure_security",
          "rationale": "To implement software security controls to protect Internet accessible interfaces from hostile object creation and data tampering."
        },
        {
          "name": "azure_security_cross_origin_resource_sharing_mitigation",
          "azure_api": "azure.security.cross_origin_resource_sharing_mitigation()",
          "service": "azure_security",
          "rationale": "To implement software security controls to protect Internet accessible interfaces from attacks that exploit multi-origin resource sharing."
        }
      ],
      "mapping_notes": "The existing Azure functions provide a partial coverage for the PCI Secure Software Standard requirement. However, new functions are needed to fully cover the requirement, particularly in areas of parser and interpreter configuration, resource starvation attacks mitigation, malicious file content protection, hostile object creation and data tampering protection, and cross-origin resource sharing mitigation."
    },
    {
      "compliance_id": "Requirement_173",
      "title": "PCI Secure Software Standard Requirement #173",
      "existing_functions_mapped": [
        "storage_queue_enable_logging_for_read_write_delete",
        "mysql_standard_database_server_enforce_ssl_connection",
        "aad_global_administrator_mfa_required",
        "api_management_api_stage_waf_web_acl_is_expected",
        "backup_recovery_point_encrypted_sse_cmk",
        "network_secure_transmission_policy_established",
        "azure_policies_unauthorized_components_detection_interval",
        "eventhubs_stream_analytics_server_side_encryption_enabled",
        "azure_keyvault_prevent_key_substitution",
        "hdinsight_cluster_public_network_access_disabled_nsg_port_restriction",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_access_policy_enforcement",
        "sqlserver_azuread_authentication_configured",
        "azure_ad_mfa_enforcement_non_console_access",
        "backup_recovery_point_retention_period",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_security_vulnerability_remediation_verification",
        "azure_compute_instance_creation_in_unused_regions_prevented",
        "mysql_flexible_server_audit_log_to_azure_monitor_logs",
        "azure_ad_authentication_reconfirm_days_non_zero",
        "storage_blob_access_public_access_disabled",
        "functionapp_policy_prohibit_public_access_with_private_endpoints_or_access_restrictions",
        "azure_storage_public_access_review",
        "azure_ad_inactive_account_management",
        "ai_search_service_https_enforcement_tls_version",
        "keyvault_secret_unused_days",
        "subscription_root_user_no_access_key",
        "monitor_cloud_services_enumeration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_compute_parser_interpreter_restrictive_config",
          "azure_api": "azure.compute.parser_interpreter_restrictive_config()",
          "service": "Azure Compute",
          "rationale": "To ensure parsers and interpreters are configured with the most restrictive configuration feasible."
        },
        {
          "name": "azure_storage_file_upload_security_controls",
          "azure_api": "azure.storage.file_upload_security_controls()",
          "service": "Azure Storage",
          "rationale": "To implement software security controls to protect against attacks on file upload mechanisms."
        },
        {
          "name": "azure_network_cross_origin_access_restrictions",
          "azure_api": "azure.network.cross_origin_access_restrictions()",
          "service": "Azure Network",
          "rationale": "To protect against attacks that exploit multi-origin resource sharing."
        }
      ],
      "mapping_notes": "The existing functions can partially cover the PCI Secure Software Standard requirements. However, there are gaps in ensuring parsers and interpreters are configured restrictively, implementing security controls for file uploads, and managing cross-origin access restrictions. Therefore, new functions are needed to fully comply with the requirements."
    },
    {
      "compliance_id": "Requirement_177",
      "title": "PCI Secure Software Standard Requirement #177",
      "existing_functions_mapped": [
        "mysql_standard_database_server_enforce_ssl_connection",
        "network_secure_transmission_policy_established",
        "frontdoor_cdn_profiles_min_tls12_security_policy",
        "azure_ad_mfa_enforcement_non_console_access",
        "azure_keyvault_customer_key_guidance_distribution",
        "azure_ad_authentication_reconfirm_days_not_zero",
        "azure_ad_authentication_reconfirm_days_non_zero"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "azure_network_tls_cipher_suite_enforcement",
          "azure_api": "azure.network.set_tls_cipher_suite()",
          "service": "azure_network",
          "rationale": "To enforce the use of strong cryptography for all communications"
        },
        {
          "name": "azure_network_mutual_authentication_enforcement",
          "azure_api": "azure.network.set_mutual_authentication()",
          "service": "azure_network",
          "rationale": "To enforce mutual authentication for server-to-server communications"
        },
        {
          "name": "azure_keyvault_self_signed_certificate_limitation",
          "azure_api": "azure.keyvault.limit_self_signed_certificates()",
          "service": "azure_keyvault",
          "rationale": "To limit the use of internally generated or self-signed certificates"
        }
      ],
      "mapping_notes": "The existing Azure functions partially cover the PCI Secure Software Standard requirement. They ensure encrypted data transmission, enforce SSL connection, and manage authentication. However, they do not explicitly enforce the use of strong cryptography for all communications, mutual authentication for server-to-server communications, and limitation on the use of internally generated or self-signed certificates. Therefore, new functions are needed to fully comply with the requirement."
    }
  ]
}