{
  "metadata": {
    "generated_at": "2025-08-17T06:17:54.804103",
    "total_new_functions": 8,
    "description": "New Kubernetes security functions suggested by compliance mapper for Python code generation"
  },
  "new_functions": [
    {
      "function_name": "scheduler_bind_address_localhost_check",
      "service": "scheduler",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "rationale": "To ensure that the scheduler service is bound to the loopback address (127.0.0.1), a new function is needed to check the bind address argument of the scheduler service.",
      "compliance_id": "1.4.2",
      "compliance_title": "Ensure that the --bind-address argument is set to 127.0.0.1",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing function 'scheduler_bind_address_check' can check if the bind address argument is set, but it does not check if the bind address is set to 127.0.0.1. Therefore, a new function 'scheduler_bind_address_localhost_check' is suggested to fill this gap."
    },
    {
      "function_name": "apiserver_limit_secrets_read_access",
      "service": "apiserver",
      "kubernetes_api": "kubectl auth can-i get secrets --all-namespaces",
      "rationale": "To ensure that read access to secrets is limited to necessary users only",
      "compliance_id": "5.1.2",
      "compliance_title": "Minimize access to secrets",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide mechanisms to minimize and restrict access to secrets, but do not specifically address limiting read and write access to secrets. New functions are suggested to fill this gap."
    },
    {
      "function_name": "apiserver_limit_secrets_write_access",
      "service": "apiserver",
      "kubernetes_api": "kubectl auth can-i create secrets --all-namespaces",
      "rationale": "To ensure that write access to secrets is limited to necessary users only",
      "compliance_id": "5.1.2",
      "compliance_title": "Minimize access to secrets",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide mechanisms to minimize and restrict access to secrets, but do not specifically address limiting read and write access to secrets. New functions are suggested to fill this gap."
    },
    {
      "function_name": "rbac_minimize_privileged_service_account_pod_creation",
      "service": "apiserver",
      "kubernetes_api": "kubectl get rolebindings,clusterrolebindings --all-namespaces",
      "rationale": "To ensure that privileged service accounts are not used to create pods",
      "compliance_id": "5.1.4",
      "compliance_title": "Minimize access to create pods",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide partial coverage. They ensure that access to create pods is minimized and that Pod Security Policies are enforced. However, they do not specifically check for the use of privileged service accounts during pod creation or the mounting of hostPaths. New functions are suggested to cover these aspects."
    },
    {
      "function_name": "rbac_minimize_hostpath_mount_in_pod_creation",
      "service": "core",
      "kubernetes_api": "kubectl get pods --all-namespaces -o json",
      "rationale": "To ensure that hostPaths are not mounted during pod creation",
      "compliance_id": "5.1.4",
      "compliance_title": "Minimize access to create pods",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide partial coverage. They ensure that access to create pods is minimized and that Pod Security Policies are enforced. However, they do not specifically check for the use of privileged service accounts during pod creation or the mounting of hostPaths. New functions are suggested to cover these aspects."
    },
    {
      "function_name": "core_minimize_hostpath_pv_creation",
      "service": "core",
      "kubernetes_api": "kubectl get pv --all-namespaces",
      "rationale": "To ensure that persistent volumes are not created with hostPath, which can lead to privilege escalation",
      "compliance_id": "5.1.9",
      "compliance_title": "Minimize access to create persistent volumes",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing function 'rbac_minimize_pv_creation_access' can help to minimize the access to create persistent volumes. However, it does not cover the specific case of preventing the creation of hostPath volumes, which is a potential security risk. Therefore, a new function 'core_minimize_hostpath_pv_creation' is suggested to cover this gap."
    },
    {
      "function_name": "rbac_limit_service_account_token_creation",
      "service": "rbac",
      "kubernetes_api": "kubectl get clusterrolebindings -o json",
      "rationale": "To ensure that only specific roles have the ability to create service account tokens, a new function to limit the creation of service account tokens to specific roles is needed.",
      "compliance_id": "5.1.13",
      "compliance_title": "Minimize access to the service account token creation",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing functions 'apiserver_disable_service_account_token_for_users' and 'rbac_minimize_service_account_token_creation' partially cover the compliance requirement by disabling service account tokens for users and minimizing their creation. However, they do not fully address the requirement of minimizing access to service account token creation at a cluster level. Therefore, a new function 'rbac_limit_service_account_token_creation' is suggested to limit the creation of service account tokens to specific roles."
    },
    {
      "function_name": "namespace_network_policy_enforcement_check",
      "service": "core",
      "kubernetes_api": "kubectl get networkpolicy --all-namespaces",
      "rationale": "This function is needed to ensure that all namespaces have network policies defined and enforced",
      "compliance_id": "5.3.2",
      "compliance_title": "Ensure that all Namespaces have Network Policies defined",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing functions 'core_namespace_network_policy_check' and 'network_policy_isolation_check' partially cover the compliance requirement. However, they do not ensure that all namespaces have network policies defined and enforced. Therefore, a new function 'namespace_network_policy_enforcement_check' is suggested."
    }
  ]
}