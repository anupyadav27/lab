{
  "metadata": {
    "generated_at": "2025-08-17T06:17:54.750705",
    "compliance_framework": "CIS_KUBERNETES_BENCHMARK_V1.9.0 PDF.json",
    "kubernetes_database_functions": 207,
    "processing_stats": {
      "total_items": 130,
      "processed": 128,
      "skipped_manual": 2,
      "mapped_complete": 122,
      "mapped_partial": 6,
      "mapped_none": 0,
      "new_functions_suggested": 8
    }
  },
  "mapping_results": [
    {
      "compliance_id": "1.1.1",
      "title": "Ensure that the API server pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "apiserver_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the API server pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.2",
      "title": "Ensure that the API server pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring that the API server pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.3",
      "title": "Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "controllermanager_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the controller manager pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.4",
      "title": "Ensure that the controller manager pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "controllermanager_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring the controller manager pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.5",
      "title": "Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "scheduler_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the scheduler pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.6",
      "title": "Ensure that the scheduler pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "scheduler_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring the scheduler pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.7",
      "title": "Ensure that the etcd pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "etcd_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the etcd pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.8",
      "title": "Ensure that the etcd pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "etcd_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring that the etcd pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.9",
      "title": "Ensure that the Container Network Interface file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "container_network_interface_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'container_network_interface_file_permissions' directly addresses the compliance requirement of ensuring that the Container Network Interface file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.10",
      "title": "Ensure that the Container Network Interface file ownership is set to root:root",
      "existing_functions_mapped": [
        "container_network_interface_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'container_network_interface_file_ownership' directly addresses the compliance requirement of ensuring that the Container Network Interface file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.11",
      "title": "Ensure that the etcd data directory permissions are set to 700 or more restrictive",
      "existing_functions_mapped": [
        "etcd_data_directory_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_data_directory_permissions_check' directly addresses the requirement of checking the permissions of the etcd data directory."
    },
    {
      "compliance_id": "1.1.12",
      "title": "Ensure that the etcd data directory ownership is set to etcd:etcd",
      "existing_functions_mapped": [
        "etcd_data_directory_ownership_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_data_directory_ownership_check' directly addresses the compliance requirement of ensuring that the etcd data directory ownership is set to etcd:etcd."
    },
    {
      "compliance_id": "1.1.13",
      "title": "Ensure that the default administrative credential file permissions are set to 600",
      "existing_functions_mapped": [
        "admin_conf_file_permissions",
        "super_admin_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'admin_conf_file_permissions' and 'super_admin_conf_file_permissions' directly address the compliance requirement of ensuring that the admin.conf file and super-admin.conf file have permissions of 600."
    },
    {
      "compliance_id": "1.1.14",
      "title": "Ensure that the default administrative credential file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_admin_conf_file_ownership",
        "super_admin_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_admin_conf_file_ownership' and 'super_admin_conf_file_ownership' directly address the compliance requirement of ensuring the ownership of admin.conf and super-admin.conf files is set to root:root."
    },
    {
      "compliance_id": "1.1.15",
      "title": "Ensure that the scheduler.conf file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "scheduler_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_conf_file_permissions' directly addresses the compliance requirement of ensuring that the scheduler.conf file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.16",
      "title": "Ensure that the scheduler.conf file ownership is set to root:root",
      "existing_functions_mapped": [
        "scheduler_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_conf_file_ownership' directly addresses the compliance requirement of ensuring the scheduler.conf file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.17",
      "title": "Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "controllermanager_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_conf_file_permissions' directly addresses the compliance requirement of ensuring that the controller-manager.conf file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.18",
      "title": "Ensure that the controller-manager.conf file ownership is set to root:root",
      "existing_functions_mapped": [
        "controllermanager_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_conf_file_ownership' directly addresses the compliance requirement of ensuring the controller-manager.conf file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.19",
      "title": "Ensure that the Kubernetes PKI directory and file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubernetes_pki_directory_file_ownership_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubernetes_pki_directory_file_ownership_check' directly addresses the compliance requirement of ensuring that the Kubernetes PKI directory and file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.20",
      "title": "Ensure that the Kubernetes PKI certificate file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "apiserver_pki_cert_file_permissions",
        "apiserver_ca_file_permissions_check",
        "kubelet_ca_file_permissions_check",
        "kubernetes_pki_key_file_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of checking the permissions of the Kubernetes PKI certificate files. These functions check the permissions of the PKI certificate files in the apiserver and kubelet, as well as the CA file permissions."
    },
    {
      "compliance_id": "1.1.21",
      "title": "Ensure that the Kubernetes PKI key file permissions are set to 600",
      "existing_functions_mapped": [
        "kubernetes_pki_key_file_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubernetes_pki_key_file_permissions_check' directly addresses the compliance requirement of ensuring that the Kubernetes PKI key file permissions are set to 600."
    },
    {
      "compliance_id": "1.2.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "apiserver_anonymous_requests",
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_anonymous_requests' and 'kubelet_disable_anonymous_auth' provide complete coverage for this compliance requirement as they ensure that anonymous requests are disabled in the API server and Kubelet respectively."
    },
    {
      "compliance_id": "1.2.2",
      "title": "Ensure that the --token-auth-file parameter is not set",
      "existing_functions_mapped": [
        "apiserver_no_token_auth_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_token_auth_file' directly addresses the compliance requirement of ensuring that the --token-auth-file parameter is not set."
    },
    {
      "compliance_id": "1.2.3",
      "title": "Ensure that the DenyServiceExternalIPs is set",
      "existing_functions_mapped": [
        "apiserver_deny_service_external_ips"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_deny_service_external_ips' directly addresses the compliance requirement of ensuring that the DenyServiceExternalIPs is set."
    },
    {
      "compliance_id": "1.2.4",
      "title": "Ensure that the --kubelet-client-certificate and --kubelet- client-key arguments are set as appropriate",
      "existing_functions_mapped": [
        "kubelet_client_certificate_and_key_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_client_certificate_and_key_check' directly addresses the compliance requirement of ensuring that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate."
    },
    {
      "compliance_id": "1.2.5",
      "title": "Ensure that the --kubelet-certificate-authority argument is set as appropriate",
      "existing_functions_mapped": [
        "kubelet_certificate_authority_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_certificate_authority_check' directly addresses the compliance requirement of verifying the kubelet's certificate before establishing a connection."
    },
    {
      "compliance_id": "1.2.6",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "1.2.7",
      "title": "Ensure that the --authorization-mode argument includes Node",
      "existing_functions_mapped": [
        "apiserver_auth_mode_include_node"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_include_node' directly addresses the compliance requirement of ensuring that the --authorization-mode argument includes Node."
    },
    {
      "compliance_id": "1.2.8",
      "title": "Ensure that the --authorization-mode argument includes RBAC",
      "existing_functions_mapped": [
        "apiserver_auth_mode_include_rbac"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_include_rbac' directly addresses the compliance requirement of ensuring that the --authorization-mode argument includes RBAC."
    },
    {
      "compliance_id": "1.2.9",
      "title": "Ensure that the admission control plugin EventRateLimit is set",
      "existing_functions_mapped": [
        "apiserver_event_rate_limit"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_event_rate_limit' directly addresses the compliance requirement of setting the EventRateLimit admission control plugin."
    },
    {
      "compliance_id": "1.2.10",
      "title": "Ensure that the admission control plugin AlwaysAdmit is not set",
      "existing_functions_mapped": [
        "apiserver_no_always_admit_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_always_admit_plugin' directly addresses the compliance requirement of ensuring that the AlwaysAdmit admission control plugin is not set."
    },
    {
      "compliance_id": "1.2.11",
      "title": "Ensure that the admission control plugin AlwaysPullImages is set",
      "existing_functions_mapped": [
        "apiserver_always_pull_images_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_always_pull_images_plugin' directly addresses the compliance requirement of ensuring the AlwaysPullImages admission control plugin is set."
    },
    {
      "compliance_id": "1.2.12",
      "title": "Ensure that the admission control plugin ServiceAccount is set",
      "existing_functions_mapped": [
        "apiserver_service_account_plugin",
        "apiserver_service_account_key_file_set",
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_service_account_plugin', 'apiserver_service_account_key_file_set', and 'apiserver_service_account_lookup_true' collectively ensure that the ServiceAccount admission control plugin is set and properly configured, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "1.2.13",
      "title": "Ensure that the admission control plugin NamespaceLifecycle is set",
      "existing_functions_mapped": [
        "apiserver_namespace_lifecycle_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_namespace_lifecycle_plugin' directly addresses the compliance requirement of setting the NamespaceLifecycle admission control plugin."
    },
    {
      "compliance_id": "1.2.14",
      "title": "Ensure that the admission control plugin NodeRestriction is set",
      "existing_functions_mapped": [
        "apiserver_node_restriction_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_node_restriction_plugin' directly addresses the compliance requirement of setting the NodeRestriction admission control plugin."
    },
    {
      "compliance_id": "1.2.15",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_profiling' directly addresses the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.2.16",
      "title": "Ensure that the --audit-log-path argument is set",
      "existing_functions_mapped": [
        "apiserver_audit_log_path_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_audit_log_path_set' directly addresses the requirement of setting the --audit-log-path argument."
    },
    {
      "compliance_id": "1.2.17",
      "title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxage_set",
        "apiserver_audit_log_maxage_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxage_set' and 'apiserver_audit_log_maxage_value_check' cover the compliance requirement of setting the --audit-log-maxage argument to 30 or as appropriate."
    },
    {
      "compliance_id": "1.2.18",
      "title": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxbackup_set",
        "apiserver_audit_log_maxbackup_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxbackup_set' and 'apiserver_audit_log_maxbackup_value_check' provide complete coverage for this compliance item. The first function checks if the --audit-log-maxbackup argument is set, and the second function checks if the value of this argument is set to 10 or an appropriate number."
    },
    {
      "compliance_id": "1.2.19",
      "title": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxsize_set",
        "apiserver_audit_log_maxsize_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxsize_set' and 'apiserver_audit_log_maxsize_value_check' adequately cover the compliance requirement of ensuring the --audit-log-maxsize argument is set to 100 or as appropriate. No new functions are needed."
    },
    {
      "compliance_id": "1.2.20",
      "title": "Ensure that the --request-timeout argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_request_timeout_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_request_timeout_set' directly addresses the compliance requirement of setting the --request-timeout argument appropriately."
    },
    {
      "compliance_id": "1.2.21",
      "title": "Ensure that the --service-account-lookup argument is set to true",
      "existing_functions_mapped": [
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_lookup_true' directly addresses the compliance requirement of ensuring that the --service-account-lookup argument is set to true."
    },
    {
      "compliance_id": "1.2.22",
      "title": "Ensure that the --service-account-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_service_account_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_key_file_set' directly addresses the compliance requirement of setting the --service-account-key-file argument appropriately."
    },
    {
      "compliance_id": "1.2.23",
      "title": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_certfile_and_keyfile_set' directly addresses the compliance requirement of ensuring that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate."
    },
    {
      "compliance_id": "1.2.24",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "1.2.25",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_client_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_client_ca_file_set' directly addresses the compliance requirement of ensuring the --client-ca-file argument is set appropriately in the API server."
    },
    {
      "compliance_id": "1.2.26",
      "title": "Ensure that the --etcd-cafile argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_etcd_cafile_set",
        "apiserver_etcd_tls_config"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_etcd_cafile_set' and 'apiserver_etcd_tls_config' cover the requirement of setting the --etcd-cafile argument and ensuring TLS encryption for etcd client connections respectively."
    },
    {
      "compliance_id": "1.2.27",
      "title": "Ensure that the --encryption-provider-config argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_encryption_provider_config_check",
        "apiserver_encryption_provider_config_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_encryption_provider_config_check' and 'apiserver_encryption_provider_config_set' directly address the requirement of ensuring the --encryption-provider-config argument is set appropriately."
    },
    {
      "compliance_id": "1.2.29",
      "title": "Ensure that the API Server only makes use of Strong Cryptographic Ciphers",
      "existing_functions_mapped": [
        "apiserver_strong_ciphers_only"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_strong_ciphers_only' directly addresses the requirement of ensuring that the API server only uses strong cryptographic ciphers."
    },
    {
      "compliance_id": "1.3.1",
      "title": "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate",
      "existing_functions_mapped": [
        "controllermanager_terminated_pod_gc_threshold_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_terminated_pod_gc_threshold_set' directly addresses the compliance requirement of setting the --terminated-pod-gc-threshold argument as appropriate."
    },
    {
      "compliance_id": "1.3.2",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling",
        "controllermanager_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_disable_profiling' and 'controllermanager_disable_profiling' adequately cover the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.3.3",
      "title": "Ensure that the --use-service-account-credentials argument is set to true",
      "existing_functions_mapped": [
        "controllermanager_service_account_credentials"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_service_account_credentials' checks if the --use-service-account-credentials argument is set to true in the controller manager, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "1.3.4",
      "title": "Ensure that the --service-account-private-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "controllermanager_service_account_private_key_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_service_account_private_key_file' directly checks the --service-account-private-key-file argument in the controller manager, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "1.3.5",
      "title": "Ensure that the --root-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_root_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_root_ca_file_set' directly addresses the compliance requirement of ensuring that the --root-ca-file argument is set as appropriate."
    },
    {
      "compliance_id": "1.3.6",
      "title": "Ensure that the RotateKubeletServerCertificate argument is set to true",
      "existing_functions_mapped": [
        "controllermanager_rotate_kubelet_server_cert"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_rotate_kubelet_server_cert' directly addresses the compliance requirement of ensuring that the RotateKubeletServerCertificate argument is set to true."
    },
    {
      "compliance_id": "1.3.7",
      "title": "Ensure that the --bind-address argument is set to 127.0.0.1",
      "existing_functions_mapped": [
        "controllermanager_bind_address"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_bind_address' checks the bind address of the controller manager, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "1.4.1",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling",
        "controllermanager_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_disable_profiling' and 'controllermanager_disable_profiling' adequately cover the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.4.2",
      "title": "Ensure that the --bind-address argument is set to 127.0.0.1",
      "existing_functions_mapped": [
        "scheduler_bind_address_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "scheduler_bind_address_localhost_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
          "service": "scheduler",
          "rationale": "To ensure that the scheduler service is bound to the loopback address (127.0.0.1), a new function is needed to check the bind address argument of the scheduler service."
        }
      ],
      "mapping_notes": "The existing function 'scheduler_bind_address_check' can check if the bind address argument is set, but it does not check if the bind address is set to 127.0.0.1. Therefore, a new function 'scheduler_bind_address_localhost_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "2.1",
      "title": "Ensure that the --cert-file and --key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_certfile_and_keyfile_set",
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions etcd_certfile_and_keyfile_set, apiserver_tls_cert_file_set, and apiserver_tls_private_key_file_set cover the requirement of setting the --cert-file and --key-file arguments as appropriate for etcd service and apiserver."
    },
    {
      "compliance_id": "2.2",
      "title": "Ensure that the --client-cert-auth argument is set to true",
      "existing_functions_mapped": [
        "etcd_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_client_cert_auth' directly addresses the compliance requirement of enabling client authentication on etcd service."
    },
    {
      "compliance_id": "2.3",
      "title": "Ensure that the --auto-tls argument is not set to true",
      "existing_functions_mapped": [
        "apiserver_no_auto_tls",
        "etcd_no_auto_tls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_no_auto_tls' and 'etcd_no_auto_tls' adequately cover the compliance requirement of ensuring that the --auto-tls argument is not set to true, thus no new functions are needed."
    },
    {
      "compliance_id": "2.4",
      "title": "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_peer_cert_file_set",
        "etcd_peer_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'etcd_peer_cert_file_set' and 'etcd_peer_key_file_set' directly address the compliance requirement of setting the --peer-cert-file and --peer-key-file arguments respectively."
    },
    {
      "compliance_id": "2.5",
      "title": "Ensure that the --peer-client-cert-auth argument is set to true",
      "existing_functions_mapped": [
        "etcd_peer_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_peer_client_cert_auth' directly addresses the requirement of setting the --peer-client-cert-auth argument to true, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "2.6",
      "title": "Ensure that the --peer-auto-tls argument is not set to true",
      "existing_functions_mapped": [
        "etcd_no_peer_auto_tls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_no_peer_auto_tls' directly addresses the compliance requirement of ensuring that the --peer-auto-tls argument is not set to true."
    },
    {
      "compliance_id": "2.7",
      "title": "Ensure that a unique Certificate Authority is used for etcd",
      "existing_functions_mapped": [
        "apiserver_etcd_cafile_set",
        "etcd_unique_ca"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_etcd_cafile_set' and 'etcd_unique_ca' ensure that a unique Certificate Authority is set for etcd, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "3.1.1",
      "title": "Client certificate authentication should not be used for users",
      "existing_functions_mapped": [
        "apiserver_disable_user_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_user_client_cert_auth' directly addresses the requirement of the compliance item. It disables the use of client certificates for user authentication in the API server, which is exactly what the compliance item mandates."
    },
    {
      "compliance_id": "3.1.2",
      "title": "Service account token authentication should not be used for users",
      "existing_functions_mapped": [
        "apiserver_disable_service_account_token_for_users"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_service_account_token_for_users' directly addresses the compliance requirement of not using service account token authentication for users."
    },
    {
      "compliance_id": "3.1.3",
      "title": "Bootstrap token authentication should not be used for users",
      "existing_functions_mapped": [
        "apiserver_bootstrap_token_auth_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_bootstrap_token_auth_check' directly addresses the compliance requirement of ensuring bootstrap token authentication is not used for users."
    },
    {
      "compliance_id": "3.2.1",
      "title": "Ensure that a minimal audit policy is created",
      "existing_functions_mapped": [
        "apiserver_audit_policy_file_set",
        "apiserver_audit_policy_minimal_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_policy_file_set' and 'apiserver_audit_policy_minimal_check' collectively ensure that an audit policy file is set and that it meets the minimum requirements. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "3.2.2",
      "title": "Ensure that the audit policy covers key security concerns",
      "existing_functions_mapped": [
        "apiserver_audit_policy_file_set",
        "apiserver_audit_policy_minimal_check",
        "apiserver_audit_policy_security_concerns_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_policy_file_set', 'apiserver_audit_policy_minimal_check', and 'apiserver_audit_policy_security_concerns_check' collectively ensure that the audit policy is set, has a minimal configuration, and covers key security concerns respectively. Therefore, the coverage is assessed as complete."
    },
    {
      "compliance_id": "4.1.1",
      "title": "Ensure that the kubelet service file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_service_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_service_file_permissions' directly addresses the compliance requirement of ensuring that the kubelet service file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.2",
      "title": "Ensure that the kubelet service file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_service_file_ownership_root"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_service_file_ownership_root' directly addresses the compliance requirement of ensuring that the kubelet service file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.3",
      "title": "If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "proxy_kubeconfig_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'proxy_kubeconfig_file_permissions' directly addresses the compliance requirement of ensuring the permissions of the proxy kubeconfig file are set to 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.4",
      "title": "If proxy kubeconfig file exists ensure ownership is set to root:root",
      "existing_functions_mapped": [
        "kube_proxy_kubeconfig_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kube_proxy_kubeconfig_file_ownership' directly addresses the compliance requirement of ensuring the kube-proxy kubeconfig file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.5",
      "title": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_conf_file_permissions' directly addresses the compliance requirement of ensuring the kubelet.conf file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.6",
      "title": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_conf_file_ownership' directly addresses the compliance requirement of ensuring the kubelet.conf file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.7",
      "title": "Ensure that the certificate authorities file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "apiserver_ca_file_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_ca_file_permissions_check' directly addresses the compliance requirement of ensuring that the certificate authorities file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.8",
      "title": "Ensure that the client certificate authorities file ownership is set to root:root",
      "existing_functions_mapped": [
        "check_client_ca_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'check_client_ca_file_ownership' directly addresses the compliance requirement of ensuring the client certificate authorities file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.9",
      "title": "If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_config_yaml_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_config_yaml_permissions' directly addresses the compliance requirement of validating the permissions of the kubelet config.yaml file."
    },
    {
      "compliance_id": "4.1.10",
      "title": "If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_config_yaml_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_config_yaml_ownership' directly addresses the requirement of validating the file ownership of kubelet config.yaml configuration file."
    },
    {
      "compliance_id": "4.2.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_disable_anonymous_auth' directly addresses the requirement of disabling anonymous requests to the Kubelet server, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "4.2.2",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "4.2.3",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_client_ca_file_set",
        "kubelet_client_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_client_ca_file_set' and 'kubelet_client_ca_file_set' adequately cover the compliance requirement of ensuring the --client-ca-file argument is set as appropriate."
    },
    {
      "compliance_id": "4.2.4",
      "title": "Verify that the --read-only-port argument is set to 0",
      "existing_functions_mapped": [
        "kubelet_disable_read_only_port"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_disable_read_only_port' directly addresses the compliance requirement of disabling the read-only port."
    },
    {
      "compliance_id": "4.2.5",
      "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
      "existing_functions_mapped": [
        "kubelet_streaming_connection_timeout"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_streaming_connection_timeout' checks the streaming connection idle timeout argument, which directly relates to the compliance requirement."
    },
    {
      "compliance_id": "4.2.6",
      "title": "Ensure that the --make-iptables-util-chains argument is set to true",
      "existing_functions_mapped": [
        "kubelet_manage_iptables"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_manage_iptables' appears to cover the requirement of ensuring that the --make-iptables-util-chains argument is set to true."
    },
    {
      "compliance_id": "4.2.7",
      "title": "Ensure that the --hostname-override argument is not set",
      "existing_functions_mapped": [
        "kubelet_no_hostname_override"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_no_hostname_override' directly addresses the requirement of the compliance item, ensuring that the --hostname-override argument is not set."
    },
    {
      "compliance_id": "4.2.8",
      "title": "Ensure that the eventRecordQPS argument is set to a level which ensures appropriate event capture",
      "existing_functions_mapped": [
        "kubelet_event_record_qps"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_event_record_qps' directly addresses the compliance requirement of setting the eventRecordQPS argument to an appropriate level to ensure event capture."
    },
    {
      "compliance_id": "4.2.9",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "4.2.10",
      "title": "Ensure that the --rotate-certificates argument is not set to false",
      "existing_functions_mapped": [
        "kubelet_rotate_certificates"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_rotate_certificates' directly addresses the compliance requirement of ensuring that the --rotate-certificates argument is not set to false."
    },
    {
      "compliance_id": "4.2.11",
      "title": "Verify that the RotateKubeletServerCertificate argument is set to true",
      "existing_functions_mapped": [
        "kubelet_rotate_certificates"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_rotate_certificates' directly addresses the requirement of this compliance item, hence no new functions are needed."
    },
    {
      "compliance_id": "4.2.12",
      "title": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers",
      "existing_functions_mapped": [
        "kubelet_strong_ciphers_only"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_strong_ciphers_only' directly addresses the requirement of ensuring that the Kubelet only makes use of strong cryptographic ciphers."
    },
    {
      "compliance_id": "4.2.13",
      "title": "Ensure that a limit is set on pod PIDs",
      "existing_functions_mapped": [
        "kubelet_set_pod_pid_limit"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_set_pod_pid_limit' directly addresses the requirement of setting a limit on pod PIDs."
    },
    {
      "compliance_id": "4.3.1",
      "title": "Ensure that the kube-proxy metrics service is bound to localhost",
      "existing_functions_mapped": [
        "kube_proxy_metrics_bind_to_localhost"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kube_proxy_metrics_bind_to_localhost' directly addresses the requirement of ensuring that the kube-proxy metrics service is bound to localhost, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "5.1.1",
      "title": "Ensure that the cluster-admin role is only used where required",
      "existing_functions_mapped": [
        "rbac_cluster_admin_role_assignment_check",
        "rbac_cluster_admin_usage"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'rbac_cluster_admin_role_assignment_check' and 'rbac_cluster_admin_usage' provide complete coverage for this compliance item as they ensure that the cluster-admin role is only assigned and used where necessary."
    },
    {
      "compliance_id": "5.1.2",
      "title": "Minimize access to secrets",
      "existing_functions_mapped": [
        "apiserver_minimize_secrets_access",
        "apiserver_restrict_secrets_access",
        "apiserver_restrict_secrets_creation",
        "core_avoid_secrets_usage",
        "core_no_secrets_envs",
        "core_no_secrets_in_envs",
        "rbac_limit_secrets_access",
        "rbac_minimize_secret_access"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "apiserver_limit_secrets_read_access",
          "kubernetes_api": "kubectl auth can-i get secrets --all-namespaces",
          "service": "apiserver",
          "rationale": "To ensure that read access to secrets is limited to necessary users only"
        },
        {
          "name": "apiserver_limit_secrets_write_access",
          "kubernetes_api": "kubectl auth can-i create secrets --all-namespaces",
          "service": "apiserver",
          "rationale": "To ensure that write access to secrets is limited to necessary users only"
        }
      ],
      "mapping_notes": "Existing functions provide mechanisms to minimize and restrict access to secrets, but do not specifically address limiting read and write access to secrets. New functions are suggested to fill this gap."
    },
    {
      "compliance_id": "5.1.3",
      "title": "Minimize wildcard use in Roles and ClusterRoles",
      "existing_functions_mapped": [
        "rbac_minimize_wildcard_use_roles"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_minimize_wildcard_use_roles' appears to directly address the compliance requirement of minimizing wildcard use in Roles and ClusterRoles. Therefore, no new functions are suggested."
    },
    {
      "compliance_id": "5.1.4",
      "title": "Minimize access to create pods",
      "existing_functions_mapped": [
        "rbac_minimize_pod_creation_access",
        "apiserver_admission_control_policy_pod_security_policy_check",
        "enforce_pod_security_policies",
        "create_pod_security_policies"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rbac_minimize_privileged_service_account_pod_creation",
          "kubernetes_api": "kubectl get rolebindings,clusterrolebindings --all-namespaces",
          "service": "apiserver",
          "rationale": "To ensure that privileged service accounts are not used to create pods"
        },
        {
          "name": "rbac_minimize_hostpath_mount_in_pod_creation",
          "kubernetes_api": "kubectl get pods --all-namespaces -o json",
          "service": "core",
          "rationale": "To ensure that hostPaths are not mounted during pod creation"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage. They ensure that access to create pods is minimized and that Pod Security Policies are enforced. However, they do not specifically check for the use of privileged service accounts during pod creation or the mounting of hostPaths. New functions are suggested to cover these aspects."
    },
    {
      "compliance_id": "5.1.5",
      "title": "Ensure that default service accounts are not actively used.",
      "existing_functions_mapped": [
        "core_default_service_account_usage_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_default_service_account_usage_check' appears to cover the requirements of this compliance item as it checks for the usage of default service accounts."
    },
    {
      "compliance_id": "5.1.6",
      "title": "Ensure that Service Account Tokens are only mounted where necessary",
      "existing_functions_mapped": [
        "core_minimize_service_account_token_mount"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_service_account_token_mount' appears to cover the requirements of this compliance item, as it ensures that service account tokens are minimized and thus only mounted where necessary."
    },
    {
      "compliance_id": "5.1.7",
      "title": "Avoid use of system:masters group",
      "existing_functions_mapped": [
        "avoid_system_masters_group_usage"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'avoid_system_masters_group_usage' directly addresses the compliance requirement of avoiding the use of the system:masters group."
    },
    {
      "compliance_id": "5.1.8",
      "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
      "existing_functions_mapped": [
        "rbac_limit_bind_permission",
        "rbac_limit_escalate_permission",
        "rbac_limit_impersonate_permission"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'rbac_limit_bind_permission', 'rbac_limit_escalate_permission', and 'rbac_limit_impersonate_permission' directly address the compliance requirement of limiting the use of Bind, Impersonate, and Escalate permissions in the Kubernetes cluster."
    },
    {
      "compliance_id": "5.1.9",
      "title": "Minimize access to create persistent volumes",
      "existing_functions_mapped": [
        "rbac_minimize_pv_creation_access"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "core_minimize_hostpath_pv_creation",
          "kubernetes_api": "kubectl get pv --all-namespaces",
          "service": "core",
          "rationale": "To ensure that persistent volumes are not created with hostPath, which can lead to privilege escalation"
        }
      ],
      "mapping_notes": "The existing function 'rbac_minimize_pv_creation_access' can help to minimize the access to create persistent volumes. However, it does not cover the specific case of preventing the creation of hostPath volumes, which is a potential security risk. Therefore, a new function 'core_minimize_hostpath_pv_creation' is suggested to cover this gap."
    },
    {
      "compliance_id": "5.1.10",
      "title": "Minimize access to the proxy sub-resource of nodes",
      "existing_functions_mapped": [
        "rbac_minimize_node_proxy_subresource_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_minimize_node_proxy_subresource_access' directly addresses the requirement to minimize access to the proxy sub-resource of nodes. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.1.11",
      "title": "Minimize access to the approval sub-resource of certificatesigningrequests objects",
      "existing_functions_mapped": [
        "rbac_minimize_csr_approval_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_minimize_csr_approval_access' directly addresses the requirement of minimizing access to the approval sub-resource of certificatesigningrequests objects."
    },
    {
      "compliance_id": "5.1.12",
      "title": "Minimize access to webhook configuration objects",
      "existing_functions_mapped": [
        "rbac_minimize_mutatingwebhookconfigurations_access",
        "rbac_minimize_validatingwebhookconfigurations_access",
        "rbac_minimize_webhook_config_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'rbac_minimize_mutatingwebhookconfigurations_access', 'rbac_minimize_validatingwebhookconfigurations_access', and 'rbac_minimize_webhook_config_access' cover the requirement of minimizing access to webhook configuration objects. No new functions are needed."
    },
    {
      "compliance_id": "5.1.13",
      "title": "Minimize access to the service account token creation",
      "existing_functions_mapped": [
        "apiserver_disable_service_account_token_for_users",
        "rbac_minimize_service_account_token_creation"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rbac_limit_service_account_token_creation",
          "kubernetes_api": "kubectl get clusterrolebindings -o json",
          "service": "rbac",
          "rationale": "To ensure that only specific roles have the ability to create service account tokens, a new function to limit the creation of service account tokens to specific roles is needed."
        }
      ],
      "mapping_notes": "The existing functions 'apiserver_disable_service_account_token_for_users' and 'rbac_minimize_service_account_token_creation' partially cover the compliance requirement by disabling service account tokens for users and minimizing their creation. However, they do not fully address the requirement of minimizing access to service account token creation at a cluster level. Therefore, a new function 'rbac_limit_service_account_token_creation' is suggested to limit the creation of service account tokens to specific roles."
    },
    {
      "compliance_id": "5.2.1",
      "title": "Ensure that the cluster has at least one active policy control mechanism in place",
      "existing_functions_mapped": [
        "apiserver_policy_control_mechanism_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_policy_control_mechanism_check' appears to directly address the compliance requirement of ensuring at least one active policy control mechanism is in place for the cluster."
    },
    {
      "compliance_id": "5.2.2",
      "title": "Minimize the admission of privileged containers",
      "existing_functions_mapped": [
        "core_minimize_privileged_containers",
        "apply_security_context_to_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_minimize_privileged_containers' and 'apply_security_context_to_containers' adequately cover the compliance requirement of minimizing the admission of privileged containers by ensuring that the security context is applied to containers and that privileged containers are minimized."
    },
    {
      "compliance_id": "5.2.3",
      "title": "Minimize the admission of containers wishing to share the host process ID namespace",
      "existing_functions_mapped": [
        "core_minimize_hostPID_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_hostPID_containers' directly addresses the requirement of minimizing the admission of containers wishing to share the host process ID namespace. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.4",
      "title": "Minimize the admission of containers wishing to share the host IPC namespace",
      "existing_functions_mapped": [
        "core_minimize_hostIPC_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_hostIPC_containers' directly addresses the requirement of minimizing the admission of containers wishing to share the host IPC namespace. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.5",
      "title": "Minimize the admission of containers wishing to share the host network namespace",
      "existing_functions_mapped": [
        "core_minimize_hostNetwork_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_hostNetwork_containers' directly addresses the requirement of minimizing the admission of containers wishing to share the host network namespace. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.6",
      "title": "Minimize the admission of containers with allowPrivilegeEscalation",
      "existing_functions_mapped": [
        "core_minimize_allowPrivilegeEscalation_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_allowPrivilegeEscalation_containers' directly addresses the compliance requirement of minimizing the admission of containers with allowPrivilegeEscalation set to true."
    },
    {
      "compliance_id": "5.2.7",
      "title": "Minimize the admission of root containers",
      "existing_functions_mapped": [
        "core_minimize_root_containers_admission"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_root_containers_admission' directly addresses the compliance requirement of minimizing the admission of root containers."
    },
    {
      "compliance_id": "5.2.8",
      "title": "Minimize the admission of containers with the NET_RAW capability",
      "existing_functions_mapped": [
        "core_minimize_net_raw_capability_admission"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_net_raw_capability_admission' directly addresses the compliance requirement of minimizing the admission of containers with the NET_RAW capability."
    },
    {
      "compliance_id": "5.2.9",
      "title": "Minimize the admission of containers with added capabilities",
      "existing_functions_mapped": [
        "core_minimize_containers_added_capabilities"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_containers_added_capabilities' directly addresses the compliance requirement of minimizing the admission of containers with added capabilities. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.10",
      "title": "Minimize the admission of containers with capabilities assigned",
      "existing_functions_mapped": [
        "core_minimize_containers_capabilities_assigned"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_containers_capabilities_assigned' directly addresses the compliance requirement of minimizing the admission of containers with capabilities assigned. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.11",
      "title": "Minimize the admission of Windows HostProcess Containers",
      "existing_functions_mapped": [
        "core_minimize_admission_windows_hostprocess_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_admission_windows_hostprocess_containers' directly addresses the compliance requirement of minimizing the admission of Windows HostProcess containers."
    },
    {
      "compliance_id": "5.2.12",
      "title": "Minimize the admission of HostPath volumes",
      "existing_functions_mapped": [
        "core_minimize_admission_hostpath_volumes"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_admission_hostpath_volumes' directly addresses the compliance requirement to minimize the admission of HostPath volumes."
    },
    {
      "compliance_id": "5.2.13",
      "title": "Minimize the admission of containers which use HostPorts",
      "existing_functions_mapped": [
        "core_minimize_admission_hostport_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_admission_hostport_containers' directly addresses the compliance requirement to minimize the admission of containers which use HostPorts."
    },
    {
      "compliance_id": "5.3.1",
      "title": "Ensure that the CNI in use supports Network Policies",
      "existing_functions_mapped": [
        "cni_network_policy_support_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cni_network_policy_support_check' directly addresses the compliance requirement of ensuring the CNI in use supports Network Policies."
    },
    {
      "compliance_id": "5.3.2",
      "title": "Ensure that all Namespaces have Network Policies defined",
      "existing_functions_mapped": [
        "core_namespace_network_policy_check",
        "network_policy_isolation_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "namespace_network_policy_enforcement_check",
          "kubernetes_api": "kubectl get networkpolicy --all-namespaces",
          "service": "core",
          "rationale": "This function is needed to ensure that all namespaces have network policies defined and enforced"
        }
      ],
      "mapping_notes": "The existing functions 'core_namespace_network_policy_check' and 'network_policy_isolation_check' partially cover the compliance requirement. However, they do not ensure that all namespaces have network policies defined and enforced. Therefore, a new function 'namespace_network_policy_enforcement_check' is suggested."
    },
    {
      "compliance_id": "5.4.1",
      "title": "Prefer using secrets as files over secrets as environment variables",
      "existing_functions_mapped": [
        "core_secrets_as_files",
        "core_no_secrets_in_envs"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_secrets_as_files' and 'core_no_secrets_in_envs' adequately cover the compliance requirement of preferring secrets as files over environment variables."
    },
    {
      "compliance_id": "5.4.2",
      "title": "Consider external secret storage",
      "existing_functions_mapped": [
        "external_secret_storage_check",
        "external_secret_storage_authentication_check",
        "external_secret_storage_audit_check",
        "external_secret_storage_encryption_check",
        "external_secret_storage_rotation_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover all aspects of the compliance requirement. They ensure the use of an external secrets storage, require authentication to access secrets, audit access to and use of secrets, encrypt secrets, and facilitate secrets rotation."
    },
    {
      "compliance_id": "5.7.1",
      "title": "Create administrative boundaries between resources using namespaces",
      "existing_functions_mapped": [
        "namespace_boundaries_enforcement_check",
        "namespace_creation_and_usage_check",
        "namespace_isolation_check",
        "namespace_network_policy_enforcement_check",
        "namespace_resource_isolation_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of creating administrative boundaries using namespaces. They ensure the enforcement of namespace boundaries, proper creation and usage of namespaces, isolation of resources within namespaces, and enforcement of network policies within namespaces."
    },
    {
      "compliance_id": "5.7.2",
      "title": "Ensure that the seccomp profile is set to docker/default in your pod definitions",
      "existing_functions_mapped": [
        "core_seccomp_profile_docker_default"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_seccomp_profile_docker_default' directly addresses the compliance requirement of ensuring the seccomp profile is set to docker/default in pod definitions."
    },
    {
      "compliance_id": "5.7.3",
      "title": "Apply Security Context to Your Pods and Containers",
      "existing_functions_mapped": [
        "apply_security_context_to_containers",
        "apply_security_context_to_pods"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apply_security_context_to_containers' and 'apply_security_context_to_pods' directly address the compliance requirement of applying security context to pods and containers."
    },
    {
      "compliance_id": "5.7.4",
      "title": "The default namespace should not be used",
      "existing_functions_mapped": [
        "default_namespace_usage_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'default_namespace_usage_check' directly addresses the compliance requirement of not using the default namespace."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "scheduler_bind_address_localhost_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "service": "scheduler",
      "rationale": "To ensure that the scheduler service is bound to the loopback address (127.0.0.1), a new function is needed to check the bind address argument of the scheduler service."
    },
    {
      "name": "apiserver_limit_secrets_read_access",
      "kubernetes_api": "kubectl auth can-i get secrets --all-namespaces",
      "service": "apiserver",
      "rationale": "To ensure that read access to secrets is limited to necessary users only"
    },
    {
      "name": "apiserver_limit_secrets_write_access",
      "kubernetes_api": "kubectl auth can-i create secrets --all-namespaces",
      "service": "apiserver",
      "rationale": "To ensure that write access to secrets is limited to necessary users only"
    },
    {
      "name": "rbac_minimize_privileged_service_account_pod_creation",
      "kubernetes_api": "kubectl get rolebindings,clusterrolebindings --all-namespaces",
      "service": "apiserver",
      "rationale": "To ensure that privileged service accounts are not used to create pods"
    },
    {
      "name": "rbac_minimize_hostpath_mount_in_pod_creation",
      "kubernetes_api": "kubectl get pods --all-namespaces -o json",
      "service": "core",
      "rationale": "To ensure that hostPaths are not mounted during pod creation"
    },
    {
      "name": "core_minimize_hostpath_pv_creation",
      "kubernetes_api": "kubectl get pv --all-namespaces",
      "service": "core",
      "rationale": "To ensure that persistent volumes are not created with hostPath, which can lead to privilege escalation"
    },
    {
      "name": "rbac_limit_service_account_token_creation",
      "kubernetes_api": "kubectl get clusterrolebindings -o json",
      "service": "rbac",
      "rationale": "To ensure that only specific roles have the ability to create service account tokens, a new function to limit the creation of service account tokens to specific roles is needed."
    },
    {
      "name": "namespace_network_policy_enforcement_check",
      "kubernetes_api": "kubectl get networkpolicy --all-namespaces",
      "service": "core",
      "rationale": "This function is needed to ensure that all namespaces have network policies defined and enforced"
    }
  ]
}