{
  "metadata": {
    "generated_at": "2025-08-17T04:57:05.614850",
    "total_new_functions": 35,
    "description": "New Kubernetes security functions suggested by compliance mapper for Python code generation"
  },
  "new_functions": [
    {
      "function_name": "apiserver_no_basic_auth_file",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'basic-auth-file'",
      "rationale": "This function is needed to ensure that the --basic-auth-file argument is not set in the apiserver, as basic authentication is not recommended.",
      "compliance_id": "1.1.3",
      "compliance_title": "Ensure that the --basic-auth-file argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly address the requirement of ensuring that the --basic-auth-file argument is not set. Therefore, a new function 'apiserver_no_basic_auth_file' is suggested."
    },
    {
      "function_name": "apiserver_insecure_allow_any_token_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}' | grep 'kube-apiserver' | grep '--insecure-allow-any-token'",
      "rationale": "This function is needed to ensure that the --insecure-allow-any-token argument is not set in the apiserver, as it would allow any token, including insecure ones, to be accepted by the apiserver.",
      "compliance_id": "1.1.4",
      "compliance_title": "Ensure that the --insecure-allow-any-token argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if the --insecure-allow-any-token argument is set in the apiserver."
    },
    {
      "function_name": "kubelet_https_argument_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "rationale": "This function is needed to ensure that the --kubelet-https argument is set to true, which is a requirement for secure communication with the kubelet.",
      "compliance_id": "1.1.5",
      "compliance_title": "Ensure that the --kubelet-https argument is set to true",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly check for the --kubelet-https argument. A new function 'kubelet_https_argument_check' is suggested to fill this gap."
    },
    {
      "function_name": "apiserver_insecure_bind_address_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver'",
      "rationale": "This function is needed to check if the --insecure-bind-address argument is set in the kube-apiserver command. If it is set, it means that the API server is binding to a non-loopback insecure address, which is a security risk.",
      "compliance_id": "1.1.6",
      "compliance_title": "Ensure that the --insecure-bind-address argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the kube-apiserver command for the --insecure-bind-address argument."
    },
    {
      "function_name": "apiserver_insecure_port_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "rationale": "This function is needed to ensure that the --insecure-port argument is set to 0, which is a requirement for compliance item 1.1.7. This will prevent the API server from binding to an insecure port.",
      "compliance_id": "1.1.7",
      "compliance_title": "Ensure that the --insecure-port argument is set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_insecure_port_check' is suggested to check the --insecure-port argument of the API server."
    },
    {
      "function_name": "apiserver_secure_port_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "rationale": "This function is needed to ensure that the --secure-port argument is not set to 0, which would disable the secure port.",
      "compliance_id": "1.1.8",
      "compliance_title": "Ensure that the --secure-port argument is not set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_secure_port_check' is suggested to check the --secure-port argument of the apiserver."
    },
    {
      "function_name": "apiserver_repair_malformed_updates_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'apiserver' | grep '--repair-malformed-updates=false'",
      "rationale": "This function is needed to ensure that the --repair-malformed-updates argument is set to false in the apiserver configuration, as per compliance requirement 1.1.10",
      "compliance_id": "1.1.10",
      "compliance_title": "Ensure that the --repair-malformed-updates argument is set to false",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the --repair-malformed-updates argument in the apiserver configuration."
    },
    {
      "function_name": "apiserver_deny_escalating_exec_admission_control",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].securityContext.privileged}{\"\\n\"}{end}'",
      "rationale": "This function is needed to ensure that the admission control policy is set to DenyEscalatingExec, which denies execution of exec and attach commands in privileged pods.",
      "compliance_id": "1.1.13",
      "compliance_title": "Ensure that the admission control policy is set to DenyEscalatingExec",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of setting the admission control policy to DenyEscalatingExec. A new function is proposed to fill this gap."
    },
    {
      "function_name": "apiserver_admission_control_policy_pod_security_policy_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.securityContext}{\"\\n\"}'",
      "rationale": "This function is needed to ensure that the admission control policy is set to PodSecurityPolicy, which is a requirement for compliance item 1.1.25.",
      "compliance_id": "1.1.25",
      "compliance_title": "Ensure that the admission control policy is set to PodSecurityPolicy",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function is suggested to check if the admission control policy is set to PodSecurityPolicy."
    },
    {
      "function_name": "kubelet_insecure_experimental_approve_all_csrs_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.taints}{\"\\n\"}'",
      "rationale": "This function is needed to ensure that the --insecure-experimental-approve-all-kubelet-csrs- for-group argument is not set, as this could potentially allow unauthorized access to the cluster.",
      "compliance_id": "1.3.3",
      "compliance_title": "Ensure that the --insecure-experimental-approve-all-kubelet-csrs- for-group argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function is proposed to check the kubelet configuration for the insecure experimental approve all csrs argument."
    },
    {
      "function_name": "apiserver_file_permissions_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl exec -it <pod_name> -- ls -l /etc/kubernetes/apiserver",
      "rationale": "This function is needed to check the file permissions of the apiserver file and ensure they are set to 644 or more restrictive.",
      "compliance_id": "1.4.1",
      "compliance_title": "Ensure that the apiserver file permissions are set to 644 or more restrictive",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly address the requirement of checking the file permissions of the apiserver file. A new function, apiserver_file_permissions_check, is suggested to fill this gap."
    },
    {
      "function_name": "general_config_file_ownership_check",
      "service": "core",
      "kubernetes_api": "ls -l /etc/kubernetes/",
      "rationale": "To ensure that all config files, not just those for specific services, are owned by root:root",
      "compliance_id": "1.4.4",
      "compliance_title": "Ensure that the config file ownership is set to root:root",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions cover the ownership check for specific services' config files. However, a general function is needed to check the ownership of all config files."
    },
    {
      "function_name": "etcd_conf_file_permissions_check",
      "service": "etcd",
      "kubernetes_api": "kubectl exec -it etcd-master -- ls -l /etc/etcd/etcd.conf",
      "rationale": "To ensure that the etcd.conf file permissions are set to 644 or more restrictive, a specific function is needed that checks the permissions of this file.",
      "compliance_id": "1.4.7",
      "compliance_title": "Ensure that the etcd.conf file permissions are set to 644 or more restrictive",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing function 'etcd_pod_spec_file_permissions' partially covers the compliance requirement as it checks the permissions of the etcd pod specification file. However, it does not specifically check the permissions of the etcd.conf file. Therefore, a new function 'etcd_conf_file_permissions_check' is suggested."
    },
    {
      "function_name": "etcd_conf_file_ownership_check",
      "service": "etcd",
      "kubernetes_api": "ls -l /etc/etcd/etcd.conf",
      "rationale": "This function is needed to ensure that the etcd.conf file ownership is set to root:root, which is a requirement for compliance item 1.4.8",
      "compliance_id": "1.4.8",
      "compliance_title": "Ensure that the etcd.conf file ownership is set to root:root",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'etcd_conf_file_ownership_check' is suggested to fill this gap."
    },
    {
      "function_name": "flanneld_file_permissions_check",
      "service": "core",
      "kubernetes_api": "kubectl exec -it <pod_name> -- ls -l /etc/cni/net.d/10-flannel.conflist",
      "rationale": "This function is needed to check the permissions of the flanneld file and ensure they are set to 644 or more restrictive",
      "compliance_id": "1.4.9",
      "compliance_title": "Ensure that the flanneld file permissions are set to 644 or more restrictive",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'flanneld_file_permissions_check' is suggested to check the permissions of the flanneld file."
    },
    {
      "function_name": "flanneld_file_ownership_check",
      "service": "flanneld",
      "kubernetes_api": "ls -l /etc/sysconfig/flanneld",
      "rationale": "To ensure that the flanneld file ownership is set to root:root, a new function is needed that checks the ownership of the flanneld file.",
      "compliance_id": "1.4.10",
      "compliance_title": "Ensure that the flanneld file ownership is set to root:root",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function 'flanneld_file_ownership_check' is suggested to check the ownership of the flanneld file."
    },
    {
      "function_name": "etcd_wal_dir_argument_check",
      "service": "etcd",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "rationale": "This function is needed to ensure that the --wal-dir argument is set appropriately for etcd, which helps in storing etcd logs separately from etcd data.",
      "compliance_id": "1.5.7",
      "compliance_title": "Ensure that the --wal-dir argument is set as appropriate",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of checking the --wal-dir argument in etcd. Therefore, a new function 'etcd_wal_dir_argument_check' is suggested."
    },
    {
      "function_name": "apiserver_max_wals_argument_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "rationale": "This function is needed to ensure that the --max-wals argument is set to 0 in the apiserver configuration, which is a requirement for compliance item 1.5.8.",
      "compliance_id": "1.5.8",
      "compliance_title": "Ensure that the --max-wals argument is set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function is suggested to check the --max-wals argument in the apiserver configuration."
    },
    {
      "function_name": "rbac_cluster_admin_role_assignment_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get clusterrolebindings -o json",
      "rationale": "To ensure that the cluster-admin role is only assigned to the necessary service accounts or users",
      "compliance_id": "1.6.1",
      "compliance_title": "Ensure that the cluster-admin role is only used where required",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing function 'rbac_cluster_admin_usage' can be used to check if the cluster-admin role is being used. However, it does not provide a way to ensure that the role is only assigned where required. Therefore, a new function 'rbac_cluster_admin_role_assignment_check' is suggested to fill this gap."
    },
    {
      "function_name": "create_pod_security_policies",
      "service": "apiserver",
      "kubernetes_api": "kubectl create -f podsecuritypolicy.yaml",
      "rationale": "This function is needed to create Pod Security Policies for the cluster",
      "compliance_id": "1.6.2",
      "compliance_title": "Create Pod Security Policies for your cluster",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of creating and enforcing Pod Security Policies for the cluster. Therefore, two new functions are suggested."
    },
    {
      "function_name": "enforce_pod_security_policies",
      "service": "apiserver",
      "kubernetes_api": "kubectl apply -f podsecuritypolicy.yaml",
      "rationale": "This function is needed to enforce the created Pod Security Policies on the cluster",
      "compliance_id": "1.6.2",
      "compliance_title": "Create Pod Security Policies for your cluster",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of creating and enforcing Pod Security Policies for the cluster. Therefore, two new functions are suggested."
    },
    {
      "function_name": "network_policy_isolation_check",
      "service": "core",
      "kubernetes_api": "kubectl get networkpolicies --all-namespaces",
      "rationale": "To ensure that network policies are properly isolating the cluster network",
      "compliance_id": "1.6.4",
      "compliance_title": "Create network segmentation using Network Policies",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide checks for network policy enforcement at the namespace level, but a more comprehensive check is needed to ensure network segmentation across the entire cluster."
    },
    {
      "function_name": "core_avoid_secrets_usage",
      "service": "core",
      "kubernetes_api": "kubectl get secrets --all-namespaces",
      "rationale": "To ensure that Kubernetes secrets are not being used across all namespaces",
      "compliance_id": "1.6.5",
      "compliance_title": "Avoid using Kubernetes Secrets",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide partial coverage as they restrict and minimize the access to secrets but do not completely avoid the usage of Kubernetes secrets. New functions are suggested to avoid the usage and creation of secrets."
    },
    {
      "function_name": "apiserver_restrict_secrets_creation",
      "service": "apiserver",
      "kubernetes_api": "kubectl auth can-i create secrets",
      "rationale": "To ensure that the creation of new secrets is restricted",
      "compliance_id": "1.6.5",
      "compliance_title": "Avoid using Kubernetes Secrets",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide partial coverage as they restrict and minimize the access to secrets but do not completely avoid the usage of Kubernetes secrets. New functions are suggested to avoid the usage and creation of secrets."
    },
    {
      "function_name": "kubelet_protect_kernel_defaults_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.taints}{\"\\n\"}'",
      "rationale": "This function is needed to check if the --protect-kernel-defaults argument is set to true in kubelet configuration",
      "compliance_id": "2.1.7",
      "compliance_title": "Ensure that the --protect-kernel-defaults argument is set to true",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'kubelet_protect_kernel_defaults_check' is suggested to check if the --protect-kernel-defaults argument is set to true in kubelet configuration."
    },
    {
      "function_name": "keep_terminated_pod_volumes_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.spec.volumes[*].persistentVolumeClaim.claimName}{\"\\n\"}{end}'",
      "rationale": "This function is needed to ensure that the --keep-terminated-pod-volumes argument is set to false, which is a requirement for compliance item 2.1.9. This will help to unmount volumes from the nodes on pod termination.",
      "compliance_id": "2.1.9",
      "compliance_title": "Ensure that the --keep-terminated-pod-volumes argument is set to false",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement, hence a new function is proposed."
    },
    {
      "function_name": "apiserver_event_qps_zero_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "rationale": "This function is needed to ensure that the --event-qps argument is set to 0, which means that there is no limit on the rate of events that can be created.",
      "compliance_id": "2.1.11",
      "compliance_title": "Ensure that the --event-qps argument is set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing function in the database matches the compliance requirement of ensuring that the --event-qps argument is set to 0. Therefore, a new function is proposed."
    },
    {
      "function_name": "apiserver_cadvisor_port_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "rationale": "This function is needed to ensure that the --cadvisor-port argument is set to 0, disabling cAdvisor as per the compliance requirement.",
      "compliance_id": "2.1.13",
      "compliance_title": "Ensure that the --cadvisor-port argument is set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring that the --cadvisor-port argument is set to 0. A new function, apiserver_cadvisor_port_check, is proposed to fill this gap."
    },
    {
      "function_name": "config_file_permissions_check",
      "service": "core",
      "kubernetes_api": "kubectl exec -it pod -- ls -l /path/to/config/file",
      "rationale": "To ensure that the config file permissions are set to 644 or more restrictive across all Kubernetes services and components",
      "compliance_id": "2.2.1",
      "compliance_title": "Ensure that the config file permissions are set to 644 or more restrictive",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide partial coverage as they check the permissions of config files for specific services like apiserver, controllermanager, kubelet, and scheduler. However, a more generic function is needed to check the permissions of config files across all Kubernetes services and components."
    },
    {
      "function_name": "general_config_file_ownership_check",
      "service": "core",
      "kubernetes_api": "ls -l /etc/kubernetes/",
      "rationale": "To ensure that all config files, not just those for specific services, are owned by root:root",
      "compliance_id": "2.2.2",
      "compliance_title": "Ensure that the config file ownership is set to root:root",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions cover ownership checks for specific services' config files, but a general function is needed to check all config files."
    },
    {
      "function_name": "apiserver_no_basic_auth_file",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver' | grep '--basic-auth-file'",
      "rationale": "This function is needed to ensure that the --basic-auth-file argument is not set in the kube-apiserver, as basic authentication is not recommended.",
      "compliance_id": "3.1.2",
      "compliance_title": "Ensure that the --basic-auth-file argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_no_basic_auth_file' is suggested to check if the --basic-auth-file argument is set in the kube-apiserver."
    },
    {
      "function_name": "apiserver_insecure_allow_any_token_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}' | grep 'kube-apiserver' | grep '--insecure-allow-any-token'",
      "rationale": "This function is needed to check if the --insecure-allow-any-token argument is set in the kube-apiserver, which would allow any token, including insecure ones.",
      "compliance_id": "3.1.3",
      "compliance_title": "Ensure that the --insecure-allow-any-token argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly check for the --insecure-allow-any-token argument in the kube-apiserver. A new function is proposed to fill this gap."
    },
    {
      "function_name": "apiserver_insecure_bind_address_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver'",
      "rationale": "This function is needed to check if the --insecure-bind-address argument is set in the kube-apiserver command, which would indicate a potential security risk.",
      "compliance_id": "3.1.4",
      "compliance_title": "Ensure that the --insecure-bind-address argument is not set",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly address the --insecure-bind-address argument for the kube-apiserver. A new function is proposed to fill this gap."
    },
    {
      "function_name": "apiserver_insecure_port_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "rationale": "This function is needed to ensure that the --insecure-port argument is set to 0, which is a requirement for compliance item 3.1.5. This will prevent the API server from binding to an insecure port.",
      "compliance_id": "3.1.5",
      "compliance_title": "Ensure that the --insecure-port argument is set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database directly check for the --insecure-port argument in the API server configuration. A new function, apiserver_insecure_port_check, is proposed to fill this gap."
    },
    {
      "function_name": "apiserver_secure_port_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "rationale": "This function is needed to ensure that the --secure-port argument is not set to 0, which would disable the secure port.",
      "compliance_id": "3.1.6",
      "compliance_title": "Ensure that the --secure-port argument is not set to 0",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_secure_port_check' is suggested to check the --secure-port argument of the apiserver."
    }
  ]
}