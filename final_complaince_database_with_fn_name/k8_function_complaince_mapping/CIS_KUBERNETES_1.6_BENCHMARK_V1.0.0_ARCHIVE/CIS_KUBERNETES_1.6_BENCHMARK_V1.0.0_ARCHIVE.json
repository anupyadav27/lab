[
  {
    "id": "1.1.1",
    "title": "Ensure that the --allow-privileged argument is set to false",
    "assessment": "Scored",
    "description": "Do not allow privileged containers.",
    "rationale": "The privileged container has all the system capabilities, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker and hence should be avoided for production workloads.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --allow-privileged argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/config file on the master node and set the KUBE_ALLOW_PRIV parameter to \"--allow-privileged=false\": KUBE_ALLOW_PRIV=\"--allow-privileged=false\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service  13 | P a g e Impact: You will not be able to run any privileged containers. Note: A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Care should be taken in ensuring that the use of such plugins is minimized and in particular any use of privileged containers outside of the kube-system namespace should be scrutinized. Where possible, review the rights required by such plugins to determine if a more fine grained permission set can be applied. Default Value: By default, privileged containers are not allowed. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/user-guide/security-context/",
    "function_names": [
      "container_runtime_allow_privileged_disabled",
      "container_runtime_privileged_containers_blocked",
      "container_runtime_privileged_mode_disabled",
      "container_runtime_no_privileged_containers",
      "container_runtime_privileged_flag_false"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will not be able to run any privileged containers. Note: A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Care should be taken in ensuring that the use of such plugins is minimized and in particular any use of privileged containers outside of the kube-system namespace should be scrutinized. Where possible, review the rights required by such plugins to determine if a more fine grained permission set can be applied. Default Value: By default, privileged containers are not allowed.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/user-guide/security-context/"
  },
  {
    "id": "1.1.2",
    "title": "Ensure that the --anonymous-auth argument is set to false",
    "assessment": "Scored",
    "description": "Disable anonymous requests to the API server.",
    "rationale": "When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the API server. You should rely on authentication to authorize access and disallow anonymous requests.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --anonymous-auth argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--anonymous-auth=false\": KUBE_API_ARGS=\"--anonymous-auth=false\" Based on your system, restart the kube-apiserver service. For example, systemctl restart kube-apiserver.service Impact: Anonymous requests will be rejected. Default Value: By default, anonymous access is enabled. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/authentication/#anonymous-requests  15 | P a g e",
    "function_names": [
      "kubernetes_api_server_anonymous_auth_disabled",
      "kubernetes_api_server_auth_enabled",
      "kubernetes_api_server_no_anonymous_access"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Anonymous requests will be rejected. Default Value: By default, anonymous access is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/authentication/#anonymous-requests  15 | P a g e"
  },
  {
    "id": "1.1.3",
    "title": "Ensure that the --basic-auth-file argument is not set",
    "assessment": "Scored",
    "description": "Do not use basic authentication.",
    "rationale": "Basic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --basic-auth-file argument does not exist.",
    "remediation": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the /etc/kubernetes/apiserver file on the master node and remove the \"--basic- auth-file=<filename>\" argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: You will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used. Default Value: By default, basic authentication is not set. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/  17 | P a g e 2. https://kubernetes.io/docs/admin/authentication/#static-password-file",
    "function_names": [
      "kubernetes_api_server_no_basic_auth_file",
      "kubernetes_api_server_basic_auth_disabled",
      "kubernetes_api_server_auth_file_unset",
      "kubernetes_api_server_no_basic_auth",
      "kubernetes_api_server_auth_file_empty"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used. Default Value: By default, basic authentication is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/  17 | P a g e 2. https://kubernetes.io/docs/admin/authentication/#static-password-file"
  },
  {
    "id": "1.1.4",
    "title": "Ensure that the --insecure-allow-any-token argument is not set",
    "assessment": "Scored",
    "description": "Do not allow any insecure tokens",
    "rationale": "Accepting insecure tokens would allow any token without actually authenticating anything. User information is parsed from the token and connections are allowed.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --insecure-allow-any-token argument does not exist.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and remove the --insecure- allow-any-token argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, insecure tokens are not allowed. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/   19 | P a g e",
    "function_names": [
      "kubernetes_api_server_insecure_allow_any_token_disabled",
      "kubernetes_api_server_token_authentication_restricted",
      "kubernetes_api_server_secure_token_validation_enabled",
      "kubernetes_api_server_insecure_token_argument_absent",
      "kubernetes_api_server_token_security_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, insecure tokens are not allowed.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/   19 | P a g e"
  },
  {
    "id": "1.1.5",
    "title": "Ensure that the --kubelet-https argument is set to true",
    "assessment": "Scored",
    "description": "Use https for kubelet connections.",
    "rationale": "Connections from apiserver to kubelets could potentially carry sensitive data such as secrets and keys. It is thus important to use in-transit encryption for any communication between the apiserver and kubelets.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --kubelet-https argument either does not exist or is set to true.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and remove the --kubelet- https argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: You require TLS to be configured on apiserver as well as kubelets. Default Value: By default, kubelet connections are over https. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/   21 | P a g e",
    "function_names": [
      "kubernetes_kubelet_https_enabled",
      "kubernetes_kubelet_secure_connection_required",
      "kubernetes_kubelet_tls_enabled",
      "kubernetes_kubelet_encrypted_communication_required",
      "kubernetes_kubelet_https_only_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You require TLS to be configured on apiserver as well as kubelets. Default Value: By default, kubelet connections are over https.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/   21 | P a g e"
  },
  {
    "id": "1.1.6",
    "title": "Ensure that the --insecure-bind-address argument is not set",
    "assessment": "Scored",
    "description": "Do not bind to non-loopback insecure addresses.",
    "rationale": "If you bind the apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to your master node. The apiserver doesn't do any authentication checking for insecure binds and neither the insecure traffic is encrypted. Hence, you should not bind the apiserver to an insecure address.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --insecure-bind-address argument does not exist or is set to 127.0.0.1.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and remove the --insecure- bind-address argument from the KUBE_API_ADDRESS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, insecure bind address is set to 127.0.0.1.   23 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/",
    "function_names": [
      "kubernetes_api_server_insecure_bind_address_disabled",
      "kubernetes_api_server_loopback_bind_address_required",
      "kubernetes_api_server_secure_bind_address_enabled",
      "kubernetes_api_server_insecure_address_binding_blocked"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, insecure bind address is set to 127.0.0.1.   23 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/"
  },
  {
    "id": "1.1.7",
    "title": "Ensure that the --insecure-port argument is set to 0",
    "assessment": "Scored",
    "description": "Do not bind to insecure port.",
    "rationale": "Setting up the apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to your master node. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster. But, as a defense in depth measure, you should not use an insecure port.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --insecure-port argument is set to 0.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set --insecure-port=0 in the KUBE_API_PORT parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: All components that use the API must connect via the secured port, authenticate themselves, and be authorized to use the API. This includes: \u2022 kube-controller-manager \u2022 kube-proxy \u2022 kube-scheduler \u2022 kubelets   25 | P a g e Default Value: By default, the insecure port is set to 8080. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/",
    "function_names": [
      "kubernetes_api_server_insecure_port_disabled",
      "kubernetes_api_server_insecure_port_zero",
      "kubernetes_api_server_secure_port_only",
      "kubernetes_api_server_insecure_bind_disabled",
      "kubernetes_api_server_port_zero_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "All components that use the API must connect via the secured port, authenticate themselves, and be authorized to use the API. This includes: \u2022 kube-controller-manager \u2022 kube-proxy \u2022 kube-scheduler \u2022 kubelets   25 | P a g e Default Value: By default, the insecure port is set to 8080.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/"
  },
  {
    "id": "1.1.8",
    "title": "Ensure that the --secure-port argument is not set to 0",
    "assessment": "Scored",
    "description": "Do not disable the secure port.",
    "rationale": "The secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --secure-port argument is either not set or is set to an integer value between 1 and 65535.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and either remove the -- secure-port argument from the KUBE_API_ARGS parameter or set it to a different desired port. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: You need to set the apiserver up with the right TLS certificates. Default Value: By default, port 6443 is used as the secure port. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/   27 | P a g e",
    "function_names": [
      "kubernetes_api_server_secure_port_not_disabled",
      "kubernetes_api_server_secure_port_enabled",
      "kubernetes_api_server_secure_port_valid",
      "kubernetes_api_server_secure_port_configured",
      "kubernetes_api_server_secure_port_non_zero"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You need to set the apiserver up with the right TLS certificates. Default Value: By default, port 6443 is used as the secure port.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/   27 | P a g e"
  },
  {
    "id": "1.1.9",
    "title": "Ensure that the --profiling argument is set to false",
    "assessment": "Scored",
    "description": "Disable profiling, if not needed.",
    "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --profiling argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--profiling=false\": KUBE_API_ARGS=\"--profiling=false\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: Profiling information would not be available. Default Value: By default, profiling is enabled. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/  29 | P a g e 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md",
    "function_names": [
      "kubernetes_api_server_profiling_disabled",
      "kubernetes_api_server_profiling_not_enabled",
      "kubernetes_api_server_profiling_set_false",
      "kubernetes_api_server_profiling_config_disabled",
      "kubernetes_api_server_profiling_flag_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Profiling information would not be available. Default Value: By default, profiling is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/  29 | P a g e 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md"
  },
  {
    "id": "1.1.10",
    "title": "Ensure that the --repair-malformed-updates argument is set to false",
    "assessment": "Scored",
    "description": "Disable fixing of malformed updates.",
    "rationale": "The apiserver will potentially attempt to fix the update requests to pass the validation even if the requests are malformed. Malformed requests are one of the potential ways to interact with a service without legitimate information. Such requests could potentially be used to sabotage apiserver responses.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --repair-malformed-updates argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--repair-malformed-updates=false\": KUBE_API_ARGS=\"--repair-malformed-updates=false\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: Malformed requests from clients would be rejected. Default Value: By default, malformed updates are allowed.   31 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/15580",
    "function_names": [
      "eks_cluster_repair_malformed_updates_disabled",
      "eks_node_repair_malformed_updates_disabled",
      "kubernetes_cluster_repair_malformed_updates_disabled",
      "kubernetes_node_repair_malformed_updates_disabled",
      "container_service_repair_malformed_updates_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Malformed requests from clients would be rejected. Default Value: By default, malformed updates are allowed.   31 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/15580"
  },
  {
    "id": "1.1.11",
    "title": "Ensure that the admission control policy is not set to AlwaysAdmit",
    "assessment": "Scored",
    "description": "Do not allow all requests.",
    "rationale": "Setting admission control policy to AlwaysAdmit allows all requests and do not filter any requests.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that does not include AlwaysAdmit.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to a value that does not include AlwaysAdmit. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: Only requests explicitly allowed by the admissions control policy would be served. Default Value: By default, AlwaysAdmit is used if no --admission-control flag is provided. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#alwaysadmit  33 | P a g e",
    "function_names": [
      "kubernetes_admission_policy_not_always_admit",
      "kubernetes_admission_policy_restrictive",
      "admission_control_policy_deny_all",
      "kubernetes_admission_policy_secure",
      "admission_policy_not_always_admit"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Only requests explicitly allowed by the admissions control policy would be served. Default Value: By default, AlwaysAdmit is used if no --admission-control flag is provided.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#alwaysadmit  33 | P a g e"
  },
  {
    "id": "1.1.12",
    "title": "Ensure that the admission control policy is set to AlwaysPullImages",
    "assessment": "Scored",
    "description": "Always pull images.",
    "rationale": "Setting admission control policy to AlwaysPullImages forces every new pod to pull the required images every time. In a multitenant cluster users can be assured that their private images can only be used by those who have the credentials to pull them. Without this admisssion control policy, once an image has been pulled to a node, any pod from any user can use it simply by knowing the image\u2019s name, without any authorization check against the image ownership. When this plug-in is enabled, images are always pulled prior to starting containers, which means valid credentials are required.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that includes AlwaysPullImages.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to \"--admission- control=...,AlwaysPullImages,...\": KUBE_ADMISSION_CONTROL=\"--admission-control=...,AlwaysPullImages,...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: Credentials would be required to pull the private images every time. Also, in trusted environments, this might increases load on network, registry, and decreases speed.  35 | P a g e Default Value: By default, AlwaysPullImages is not set. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#alwayspullimages",
    "function_names": [
      "kubernetes_pod_admission_control_always_pull_images",
      "kubernetes_pod_image_pull_policy_always",
      "kubernetes_admission_controller_always_pull_images",
      "kubernetes_pod_spec_image_pull_policy_always",
      "kubernetes_workload_image_pull_policy_always_pull"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Credentials would be required to pull the private images every time. Also, in trusted environments, this might increases load on network, registry, and decreases speed.  35 | P a g e Default Value: By default, AlwaysPullImages is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#alwayspullimages"
  },
  {
    "id": "1.1.13",
    "title": "Ensure that the admission control policy is set to DenyEscalatingExec",
    "assessment": "Scored",
    "description": "Deny execution of exec and attach commands in privileged pods.",
    "rationale": "Setting admission control policy to DenyEscalatingExec denies exec and attach commands to pods that run with escalated privileges that allow host access. This includes pods that run as privileged, have access to the host IPC namespace, and have access to the host PID namespace.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that includes DenyEscalatingExec.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to \"--admission- control=...,DenyEscalatingExec,...\": KUBE_ADMISSION_CONTROL=\"--admission-control=...,DenyEscalatingExec,...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: exec and attach commands will not work in privileged pods. Default Value: By default, DenyEscalatingExec is not set.  37 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#denyescalatingexec",
    "function_names": [
      "kubernetes_admission_policy_deny_escalating_exec",
      "kubernetes_pod_exec_privileged_denied",
      "kubernetes_admission_control_deny_privileged_exec",
      "kubernetes_pod_security_deny_escalating_exec",
      "kubernetes_admission_policy_exec_privilege_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "exec and attach commands will not work in privileged pods. Default Value: By default, DenyEscalatingExec is not set.  37 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#denyescalatingexec"
  },
  {
    "id": "1.1.14",
    "title": "Ensure that the admission control policy is set to SecurityContextDeny",
    "assessment": "Scored",
    "description": "Restrict pod level SecurityContext customization. Instead of using a customized SecurityContext for your pods, use a Pod Security Policy (PSP), which is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access.",
    "rationale": "Setting admission control policy to SecurityContextDeny denies the pod level SecurityContext customization. Any attempts to customize the SecurityContexts that are not explicitly defined in the Pod Security Policy (PSP) are blocked. This ensures that all the pods adhere to the PSP defined by your organization and you have a uniform pod level security posture.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that includes SecurityContextDeny.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to \"--admission- control=...,SecurityContextDeny,...\": KUBE_ADMISSION_CONTROL=\"--admission-control=...,SecurityContextDeny,...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None  39 | P a g e Default Value: By default, SecurityContextDeny is set. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#securitycontextdeny 3. https://kubernetes.io/docs/user-guide/pod-security-policy/#working-with-rbac",
    "function_names": [
      "kubernetes_pod_security_context_denied",
      "kubernetes_admission_policy_security_context_deny",
      "kubernetes_pod_security_policy_enforced",
      "kubernetes_admission_control_security_context_restricted",
      "kubernetes_pod_security_context_customization_denied"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None  39 | P a g e Default Value: By default, SecurityContextDeny is set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#securitycontextdeny 3. https://kubernetes.io/docs/user-guide/pod-security-policy/#working-with-rbac"
  },
  {
    "id": "1.1.15",
    "title": "Ensure that the admission control policy is set to NamespaceLifecycle",
    "assessment": "Scored",
    "description": "Reject creating objects in a namespace that is undergoing termination.",
    "rationale": "Setting admission control policy to NamespaceLifecycle ensures that objects cannot be created in non-existent namespaces, and that namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that includes NamespaceLifecycle.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to \"--admission- control=NamespaceLifecycle,...\": KUBE_ADMISSION_CONTROL=\"--admission-control=NamespaceLifecycle,...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, NamespaceLifecycle is set.  41 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#namespacelifecycle",
    "function_names": [
      "kubernetes_admission_policy_namespace_lifecycle",
      "kubernetes_namespace_admission_policy_termination_protected",
      "kubernetes_admission_controller_namespace_lifecycle_enabled",
      "kubernetes_namespace_lifecycle_admission_policy_enforced",
      "kubernetes_admission_policy_terminating_namespace_blocked"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, NamespaceLifecycle is set.  41 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#namespacelifecycle"
  },
  {
    "id": "1.1.16",
    "title": "Ensure that the --audit-log-path argument is set as appropriate",
    "assessment": "Scored",
    "description": "Enable auditing on kubernetes apiserver and set the desired audit log path as appropriate.",
    "rationale": "Auditing Kubernetes apiserver provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --audit-log-path argument is set as appropriate.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--audit-log-path=<filename>\": KUBE_API_ARGS=\"--audit-log-path=/var/log/apiserver/audit.log\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, auditing is not enabled.   43 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22",
    "function_names": [
      "kubernetes_apiserver_audit_logging_enabled",
      "kubernetes_apiserver_audit_log_path_set",
      "kubernetes_apiserver_audit_log_path_valid",
      "kubernetes_apiserver_audit_logging_configured",
      "kubernetes_apiserver_audit_log_path_customized"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.   43 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22"
  },
  {
    "id": "1.1.17",
    "title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
    "assessment": "Scored",
    "description": "Retain the logs for at least 30 days or as appropriate.",
    "rationale": "Retaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --audit-log-maxage argument is set to 30 or as appropriate.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--audit-log-maxage=30\": KUBE_API_ARGS=\"--audit-log-maxage=30\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, auditing is not enabled. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/  45 | P a g e 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22",
    "function_names": [
      "kubernetes_api_server_audit_log_maxage_30d",
      "kubernetes_api_server_audit_log_retention_configured",
      "kubernetes_audit_log_maxage_set",
      "kubernetes_audit_log_retention_30d",
      "kubernetes_api_server_audit_log_retention_compliant"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/  45 | P a g e 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22"
  },
  {
    "id": "1.1.18",
    "title": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
    "assessment": "Scored",
    "description": "Retain 10 or an appropriate number of old log files.",
    "rationale": "Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --audit-log-maxbackup argument is set to 10 or as appropriate.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--audit-log-maxbackup=10\": KUBE_API_ARGS=\"--audit-log-maxbackup=10\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, auditing is not enabled.   47 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22",
    "function_names": [
      "kubernetes_api_server_audit_log_maxbackup_set",
      "kubernetes_api_server_audit_log_maxbackup_sufficient",
      "kubernetes_api_server_audit_log_retention_configured",
      "kubernetes_api_server_audit_log_backup_limit_enforced",
      "kubernetes_api_server_audit_log_maxbackup_compliant"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.   47 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22"
  },
  {
    "id": "1.1.19",
    "title": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
    "assessment": "Scored",
    "description": "Rotate log files on reaching 100 MB or as appropriate.",
    "rationale": "Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --audit-log-maxsize argument is set to 100 or as appropriate.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--audit-log-maxsize=100\": KUBE_API_ARGS=\"--audit-log-maxsize=100\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, auditing is not enabled.   49 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22",
    "function_names": [
      "kubernetes_api_server_audit_log_maxsize_set",
      "kubernetes_api_server_audit_log_maxsize_100mb",
      "kubernetes_audit_log_rotation_size_configured",
      "kubernetes_audit_log_maxsize_within_limit",
      "kubernetes_api_server_audit_log_size_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.   49 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/concepts/cluster-administration/audit/ 3. https://github.com/kubernetes/features/issues/22"
  },
  {
    "id": "1.1.20",
    "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
    "assessment": "Scored",
    "description": "Do not always authorize all requests.",
    "rationale": "The apiserver, by default, allows all requests. You should restrict this behavior to only allow the authorization modes that you explicitly use in your environment. For example, if you don't use REST APIs in your environment, it is a good security best practice to switch off that capability.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --authorization-mode argument exists and is not set to AlwaysAllow.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to values other than --authorization-mode=AlwaysAllow. One such example could be as below: KUBE_API_ARGS=\"--authorization-mode=RBAC\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: Only authorized requests will be served. Default Value: By default, AlwaysAllow is enabled.   51 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/authorization/",
    "function_names": [
      "eks_cluster_authorization_mode_not_always_allow",
      "eks_cluster_authorization_mode_restricted",
      "eks_cluster_authorization_mode_secure",
      "eks_cluster_authorization_mode_compliant",
      "eks_cluster_authorization_mode_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Only authorized requests will be served. Default Value: By default, AlwaysAllow is enabled.   51 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/authorization/"
  },
  {
    "id": "1.1.21",
    "title": "Ensure that the --token-auth-file parameter is not set",
    "assessment": "Scored",
    "description": "Do not use token based authentication.",
    "rationale": "The token-based authentication utilizes static tokens to authenticate requests to the apiserver. The tokens are stored in clear-text in a file on the apiserver, and cannot be revoked or rotated without restarting the apiserver. Hence, do not use static token-based authentication.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --token-auth-file argument does not exist.",
    "remediation": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the /etc/kubernetes/apiserver file on the master node and remove the \"--token- auth-file=<filename>\" argument from the KUBE_API_ARGS parameter. Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used. Default Value: By default, --token-auth-file argument is not set. References: 1. https://kubernetes.io/docs/admin/authentication/#static-token-file  53 | P a g e 2. https://kubernetes.io/docs/admin/kube-apiserver/",
    "function_names": [
      "kubernetes_api_server_token_auth_disabled",
      "kubernetes_api_server_no_token_auth_file",
      "kubernetes_auth_token_file_unset",
      "kubernetes_api_server_token_auth_removed",
      "kubernetes_auth_token_file_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used. Default Value: By default, --token-auth-file argument is not set.",
    "references": "1. https://kubernetes.io/docs/admin/authentication/#static-token-file  53 | P a g e 2. https://kubernetes.io/docs/admin/kube-apiserver/"
  },
  {
    "id": "1.1.22",
    "title": "Ensure that the --kubelet-certificate-authority argument is set as appropriate",
    "assessment": "Scored",
    "description": "Verify kubelet's certificate before establishing connection.",
    "rationale": "The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet\u2019s port-forwarding functionality. These connections terminate at the kubelet\u2019s HTTPS endpoint. By default, the apiserver does not verify the kubelet\u2019s serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --kubelet-certificate-authority argument exists and is set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--kubelet-certificate-authority=<ca-string>\": KUBE_API_ARGS=\"--kubelet-certificate-authority=<ca-string>\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: You require TLS to be configured on apiserver as well as kubelets.   55 | P a g e Default Value: By default, --kubelet-certificate-authority argument is not set. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/ 3. https://kubernetes.io/docs/concepts/cluster-administration/master-node- communication/#apiserver---kubelet",
    "function_names": [
      "kubernetes_kubelet_certificate_authority_configured",
      "kubernetes_kubelet_certificate_authority_valid",
      "kubernetes_kubelet_certificate_authority_secure",
      "kubernetes_kubelet_certificate_authority_trusted",
      "kubernetes_kubelet_certificate_authority_verified"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You require TLS to be configured on apiserver as well as kubelets.   55 | P a g e Default Value: By default, --kubelet-certificate-authority argument is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/ 3. https://kubernetes.io/docs/concepts/cluster-administration/master-node- communication/#apiserver---kubelet"
  },
  {
    "id": "1.1.23",
    "title": "Ensure that the --kubelet-client-certificate and --kubelet-client- key arguments are set as appropriate",
    "assessment": "Scored",
    "description": "Enable certificate based kubelet authentication.",
    "rationale": "The apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate- based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --kubelet-client-certificate and --kubelet-client-key arguments exist and they are set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and kubelets. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--kubelet-client- certificate=<path/to/client-certificate-file>\" and \"--kubelet-client- key=<path/to/client-key-file>\": KUBE_API_ARGS=\"--kubelet-client-certificate=<path/to/client-certificate-file> --kubelet-client-key=<path/to/client-key-file>\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: You require TLS to be configured on apiserver as well as kubelets.   57 | P a g e Default Value: By default, certificate-based kublet authentication is not set. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/ 3. https://kubernetes.io/docs/concepts/cluster-administration/master-node- communication/#apiserver---kubelet",
    "function_names": [
      "kubernetes_kubelet_certificate_authentication_enabled",
      "kubernetes_kubelet_client_certificate_configured",
      "kubernetes_kubelet_client_key_configured",
      "kubernetes_kubelet_tls_authentication_enabled",
      "kubernetes_kubelet_certificate_based_auth_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You require TLS to be configured on apiserver as well as kubelets.   57 | P a g e Default Value: By default, certificate-based kublet authentication is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/ 3. https://kubernetes.io/docs/concepts/cluster-administration/master-node- communication/#apiserver---kubelet"
  },
  {
    "id": "1.1.24",
    "title": "Ensure that the --service-account-lookup argument is set to true",
    "assessment": "Scored",
    "description": "Validate service account before validating token.",
    "rationale": "By default, the apiserver only verifies that the authentication token is valid. However, it does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --service-account-lookup argument exists and is set to true.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--service-account-lookup=true\": KUBE_API_ARGS=\"--service-account-lookup=true\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: None Default Value: By default, --service-account-lookup argument is set to false.   59 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/24167 3. https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use",
    "function_names": [
      "kubernetes_api_server_service_account_lookup_enabled",
      "kubernetes_api_server_service_account_validation_enabled",
      "kubernetes_api_server_service_account_pre_validation_enabled",
      "kubernetes_api_server_service_account_lookup_before_token_validation_enabled",
      "kubernetes_api_server_service_account_secure_validation_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, --service-account-lookup argument is set to false.   59 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/24167 3. https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use"
  },
  {
    "id": "1.1.25",
    "title": "Ensure that the admission control policy is set to PodSecurityPolicy",
    "assessment": "Scored",
    "description": "Reject creating pods that do not match Pod Security Policies.",
    "rationale": "A Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The PodSecurityPolicy objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that includes PodSecurityPolicy.",
    "remediation": "Follow the documentation and create Pod Security Policy objects as per your environment. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to \"--admission- control=...,PodSecurityPolicy,...\": KUBE_ADMISSION_CONTROL=\"--admission-control=...,PodSecurityPolicy,...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: The policy objects must be created and granted before pod creation would be allowed.   61 | P a g e Default Value: By default, PodSecurityPolicy is not set. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#podsecuritypolicy 3. https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod- security-policies",
    "function_names": [
      "kubernetes_admission_control_policy_pod_security_policy_enabled",
      "kubernetes_pod_security_policy_admission_control_enabled",
      "kubernetes_admission_controller_pod_security_policy_enforced",
      "kubernetes_pod_security_policy_admission_controller_required",
      "kubernetes_admission_policy_pod_security_policy_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "The policy objects must be created and granted before pod creation would be allowed.   61 | P a g e Default Value: By default, PodSecurityPolicy is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#podsecuritypolicy 3. https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod- security-policies"
  },
  {
    "id": "1.1.26",
    "title": "Ensure that the --service-account-key-file argument is set as appropriate",
    "assessment": "Scored",
    "description": "Explicitly set a service account public key file for service accounts on the apiserver.",
    "rationale": "By default, if no --service-account-key-file is specified to the apiserver, it uses the private key from the TLS serving certificate to verify service account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with --service-account-key-file.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --service-account-key-file argument exists and is set as appropriate.",
    "remediation": "Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--service-account-key-file=<filename>\": KUBE_API_ARGS=\"--service-account-key-file=<filename>\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.   63 | P a g e Default Value: By default, --service-account-key-file argument is not set, and the private key from the TLS serving certificate is used. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/24167",
    "function_names": [
      "kubernetes_apiserver_service_account_key_file_set",
      "kubernetes_apiserver_service_account_key_file_configured",
      "kubernetes_apiserver_service_account_key_file_valid",
      "kubernetes_apiserver_service_account_key_file_secure",
      "kubernetes_apiserver_service_account_key_file_explicitly_set"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.   63 | P a g e Default Value: By default, --service-account-key-file argument is not set, and the private key from the TLS serving certificate is used.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/24167"
  },
  {
    "id": "1.1.27",
    "title": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate",
    "assessment": "Scored",
    "description": "etcd should be configured to make use of TLS encryption for client connections.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --etcd-certfile and --etcd-keyfile arguments exist and they are set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include \"--etcd-certfile=<path/to/client- certificate-file>\" and \"--etcd-keyfile=<path/to/client-key-file>\": KUBE_API_ARGS=\"... --etcd-certfile=<path/to/client-certificate-file> --etcd- keyfile=<path/to/client-key-file> ...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: TLS and client certificate authentication must be configured for etcd.   65 | P a g e Default Value: By default, --etcd-certfile and --etcd-keyfile arguments are not set References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://coreos.com/etcd/docs/latest/op-guide/security.html",
    "function_names": [
      "etcd_server_tls_encryption_enabled",
      "etcd_server_certfile_configured",
      "etcd_server_keyfile_configured",
      "etcd_client_connection_tls_enabled",
      "etcd_certfile_keyfile_valid_pair",
      "etcd_tls_certificate_expiry_valid",
      "etcd_tls_private_key_permissions_secure",
      "etcd_tls_certificate_permissions_secure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for etcd.   65 | P a g e Default Value: By default, --etcd-certfile and --etcd-keyfile arguments are not set",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://coreos.com/etcd/docs/latest/op-guide/security.html"
  },
  {
    "id": "1.1.28",
    "title": "Ensure that the admission control policy is set to ServiceAccount",
    "assessment": "Scored",
    "description": "Automate service accounts management.",
    "rationale": "When you create a pod, if you do not specify a service account, it is automatically assigned the default service account in the same namespace. You should create your own service account and let the API server manage its security tokens.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --admission-control argument is set to a value that includes ServiceAccount.",
    "remediation": "Follow the documentation and create ServiceAccount objects as per your environment. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_ADMISSION_CONTROL parameter to \"--admission- control=...,ServiceAccount,...\": KUBE_ADMISSION_CONTROL=\"--admission-control=...,ServiceAccount,...\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: The ServiceAccount objects must be created and granted before pod creation would be allowed. Default Value: By default, ServiceAccount is not set.  67 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#serviceaccount 3. https://kubernetes.io/docs/tasks/configure-pod-container/configure-service- account/",
    "function_names": [
      "kubernetes_admission_control_policy_service_account",
      "kubernetes_service_account_admission_control_enabled",
      "admission_control_policy_service_account_required",
      "service_account_admission_control_enforced",
      "kubernetes_pod_admission_service_account_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "The ServiceAccount objects must be created and granted before pod creation would be allowed. Default Value: By default, ServiceAccount is not set.  67 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://kubernetes.io/docs/admin/admission-controllers/#serviceaccount 3. https://kubernetes.io/docs/tasks/configure-pod-container/configure-service- account/"
  },
  {
    "id": "1.1.29",
    "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
    "assessment": "Scored",
    "description": "Setup TLS connection on the API server.",
    "rationale": "API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --tls-cert-file and --tls-private-key-file arguments exist and they are set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include \"--tls-cert-file=<path/to/tls-certificate- file>\" and \"--tls-private-key-file=<path/to/tls-key-file>\": KUBE_API_ARGS=\"--tls-cert-file=<path/to/tls-certificate-file> --tls-private- key-file=<path/to/tls-key-file>\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.   69 | P a g e Default Value: By default, --tls-cert-file and --tls-private-key-file arguments are not set. If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide",
    "function_names": [
      "kubernetes_api_server_tls_cert_file_set",
      "kubernetes_api_server_tls_private_key_file_set",
      "kubernetes_api_server_tls_cert_and_key_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.   69 | P a g e Default Value: By default, --tls-cert-file and --tls-private-key-file arguments are not set. If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide"
  },
  {
    "id": "1.1.30",
    "title": "Ensure that the --client-ca-file argument is set as appropriate",
    "assessment": "Scored",
    "description": "Setup TLS connection on the API server.",
    "rationale": "API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic. If --client-ca-file argument is set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --client-ca-file argument exists and it is set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include \"--client-ca-file=<path/to/client-ca-file>\": KUBE_API_ARGS=\"--client-ca-file=<path/to/client-ca-file>\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: TLS and client certificate authentication must be configured for your Kubernetes cluster deployment. Default Value: By default, --client-ca-file argument is not set.  71 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide",
    "function_names": [
      "kubernetes_api_server_client_ca_file_configured",
      "kubernetes_api_server_tls_authentication_enabled",
      "kubernetes_api_server_client_certificate_validation_enabled",
      "kubernetes_api_server_secure_client_authentication_required",
      "kubernetes_api_server_client_ca_file_specified"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for your Kubernetes cluster deployment. Default Value: By default, --client-ca-file argument is not set.  71 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide"
  },
  {
    "id": "1.1.31",
    "title": "Ensure that the --etcd-cafile argument is set as appropriate",
    "assessment": "Scored",
    "description": "etcd should be configured to make use of TLS encryption for client connections.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a SSL Certificate Authority file.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-apiserver Verify that the --etcd-cafile argument exists and it is set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd. Then, edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to include \"--etcd-cafile=<path/to/ca-file>\": KUBE_API_ARGS=\"--etcd-cafile=<path/to/ca-file>\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Impact: TLS and client certificate authentication must be configured for etcd. Default Value: By default, --etcd-cafile is not set.   73 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://coreos.com/etcd/docs/latest/op-guide/security.html",
    "function_names": [
      "kubernetes_etcd_tls_encryption_enabled",
      "kubernetes_etcd_cafile_configured",
      "kubernetes_etcd_client_tls_enabled",
      "kubernetes_etcd_secure_connection_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for etcd. Default Value: By default, --etcd-cafile is not set.   73 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/ 2. https://coreos.com/etcd/docs/latest/op-guide/security.html"
  },
  {
    "id": "1.2.1",
    "title": "Ensure that the --profiling argument is set to false",
    "assessment": "Scored",
    "description": "Disable profiling, if not needed.",
    "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-scheduler Verify that the --profiling argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/scheduler file on the master node and set the KUBE_SCHEDULER_ARGS parameter to \"--profiling=false\": KUBE_SCHEDULER_ARGS=\"--profiling=false\" Based on your system, restart the kube-scheduler service. For example: systemctl restart kube-scheduler.service Impact: Profiling information would not be available.   75 | P a g e Default Value: By default, profiling is enabled. References: 1. https://kubernetes.io/docs/admin/kube-scheduler/ 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md",
    "function_names": [
      "kubernetes_api_server_profiling_disabled",
      "kubernetes_api_server_profiling_set_false",
      "kubernetes_api_server_no_profiling_enabled",
      "kubernetes_api_server_profiling_config_disabled",
      "kubernetes_api_server_profiling_argument_false"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Profiling information would not be available.   75 | P a g e Default Value: By default, profiling is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/kube-scheduler/ 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md"
  },
  {
    "id": "1.3.1",
    "title": "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate",
    "assessment": "Scored",
    "description": "Activate garbage collector on pod termination, as appropriate.",
    "rationale": "Garbage collection is important to ensure sufficient resource availability and avoiding degraded performance and availability. In the worst case, the system might crash or just be unusable for a long period of time. The current setting for garbage collection is 12,500 terminated pods which might be too high for your system to sustain. Based on your system resources and tests, choose an appropriate threshold value to activate garbage collection.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-controller-manager Verify that the --terminated-pod-gc-threshold argument is set as appropriate.",
    "remediation": "Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to \"--terminated-pod-gc- threshold=<appropriate-number>\": KUBE_CONTROLLER_MANAGER_ARGS=\"--terminated-pod-gc-threshold=10\" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service Impact: None  77 | P a g e Default Value: By default, --terminated-pod-gc-threshold is set to 12500. References: 1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://github.com/kubernetes/kubernetes/issues/28484",
    "function_names": [
      "kubernetes_pod_garbage_collection_enabled",
      "kubernetes_pod_termination_threshold_set",
      "kubernetes_pod_gc_threshold_configured",
      "kubernetes_pod_termination_cleanup_active",
      "kubernetes_pod_garbage_collection_threshold_appropriate"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None  77 | P a g e Default Value: By default, --terminated-pod-gc-threshold is set to 12500.",
    "references": "1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://github.com/kubernetes/kubernetes/issues/28484"
  },
  {
    "id": "1.3.2",
    "title": "Ensure that the --profiling argument is set to false",
    "assessment": "Scored",
    "description": "Disable profiling, if not needed.",
    "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-controller-manager Verify that the --profiling argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to \"--profiling=false\": KUBE_CONTROLLER_MANAGER_ARGS=\"--profiling=false\" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service Impact: Profiling information would not be available. Default Value: By default, profiling is enabled. References: 1. https://kubernetes.io/docs/admin/kube-controller-manager/  79 | P a g e 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md",
    "function_names": [
      "kubernetes_api_server_profiling_disabled",
      "kubernetes_api_server_profiling_set_false",
      "kubernetes_api_server_profiling_not_enabled",
      "kubernetes_api_server_profiling_config_disabled",
      "kubernetes_api_server_profiling_flag_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Profiling information would not be available. Default Value: By default, profiling is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/kube-controller-manager/  79 | P a g e 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md"
  },
  {
    "id": "1.3.3",
    "title": "Ensure that the --insecure-experimental-approve-all-kubelet-csrs- for-group argument is not set",
    "assessment": "Scored",
    "description": "Do not accept all certificates.",
    "rationale": "Setting the --insecure-experimental-approve-all-kubelet-csrs-for-group flag circumvents the desired \u201capproval\u201d process. All the certificates are auto-approved without checking their integrity. This flag is meant to be used for development and testing purposes only and hence should not be used in the production.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-controller-manager Verify that the --insecure-experimental-approve-all-kubelet-csrs-for-group argument is not set.",
    "remediation": "Edit the /etc/kubernetes/controller-manager file on the master node and remove the -- insecure-experimental-approve-all-kubelet-csrs-for-group argument from the KUBE_CONTROLLER_MANAGER_ARGS parameter. Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service Impact: Invalid certificates will be rejected. Default Value: By default, --insecure-experimental-approve-all-kubelet-csrs-for-group is not set.   81 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#auto-approval",
    "function_names": [
      "kubernetes_cluster_no_insecure_approve_all_csrs",
      "kubernetes_cluster_secure_certificate_signing",
      "kubernetes_cluster_csr_approval_restricted",
      "kubernetes_cluster_no_experimental_csr_approval",
      "kubernetes_cluster_csr_validation_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Invalid certificates will be rejected. Default Value: By default, --insecure-experimental-approve-all-kubelet-csrs-for-group is not set.   81 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#auto-approval"
  },
  {
    "id": "1.3.4",
    "title": "Ensure that the --use-service-account-credentials argument is set to true",
    "assessment": "Scored",
    "description": "Use individual service account credentials for each controller.",
    "rationale": "The controller manager creates a service account per controller in the kube-system namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. Setting the --use-service-account- credentials to true runs each control loop within the controller manager using a separate service account credential. When used in combination with RBAC, this ensures that the control loops run with the minimum permissions required to perform their intended tasks.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-controller-manager Verify that the --use-service-account-credentials argument is set to true.",
    "remediation": "Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to --use-service-account- credentials=true: KUBE_CONTROLLER_MANAGER_ARGS=\"--use-service-account-credentials=true\" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service Impact: Whatever authorizer is configured for the cluster, it must grant sufficient permissions to the service accounts to perform their intended tasks. When using the RBAC authorizer, those roles are created and bound to the appropriate service accounts in the kube-system  83 | P a g e namespace automatically with default roles and rolebindings that are auto-reconciled on startup. If using other authorization methods (ABAC, Webhook, etc), the cluster deployer is responsible for granting appropriate permissions to the service accounts (the required permissions can be seen by inspecting the controller-roles.yaml and controller-role- bindings.yaml files for the RBAC roles. Default Value: By default, --use-service-account-credentials is not set. References: 1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://kubernetes.io/docs/admin/service-accounts-admin/ 3. https://github.com/kubernetes/kubernetes/blob/release- 1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller- roles.yaml 4. https://github.com/kubernetes/kubernetes/blob/release- 1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-role- bindings.yaml 5. https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles",
    "function_names": [
      "gke_cluster_use_service_account_credentials_enabled",
      "gke_controller_service_account_credentials_required",
      "gke_cluster_service_account_credentials_enabled",
      "gke_controller_individual_service_account_credentials",
      "gke_cluster_service_account_credentials_true"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Whatever authorizer is configured for the cluster, it must grant sufficient permissions to the service accounts to perform their intended tasks. When using the RBAC authorizer, those roles are created and bound to the appropriate service accounts in the kube-system  83 | P a g e namespace automatically with default roles and rolebindings that are auto-reconciled on startup. If using other authorization methods (ABAC, Webhook, etc), the cluster deployer is responsible for granting appropriate permissions to the service accounts (the required permissions can be seen by inspecting the controller-roles.yaml and controller-role- bindings.yaml files for the RBAC roles. Default Value: By default, --use-service-account-credentials is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://kubernetes.io/docs/admin/service-accounts-admin/ 3. https://github.com/kubernetes/kubernetes/blob/release- 1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller- roles.yaml 4. https://github.com/kubernetes/kubernetes/blob/release- 1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-role- bindings.yaml 5. https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles"
  },
  {
    "id": "1.3.5",
    "title": "Ensure that the --service-account-private-key-file argument is set as appropriate",
    "assessment": "Scored",
    "description": "Explicitly set a service account private key file for service accounts on the controller manager.",
    "rationale": "To ensure that keys for service account tokens can be rotated as needed, a separate public/private key pair should be used for signing service account tokens. The private key should be specified to the controller manager with --service-account-private-key-file as appropriate.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-controller-manager Verify that the --service-account-private-key-file argument is set as appropriate.",
    "remediation": "Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to --service-account-private-key- file=<filename>: KUBE_CONTROLLER_MANAGER_ARGS=\"--service-account-private-key-file=<filename>\" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service Impact: You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy. Default Value: By default, --service-account-private-key-file is not set.  85 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-controller-manager/",
    "function_names": [
      "kubernetes_controller_manager_service_account_private_key_file_set",
      "kubernetes_controller_manager_service_account_private_key_file_configured",
      "kubernetes_controller_manager_service_account_private_key_file_specified",
      "kubernetes_controller_manager_service_account_private_key_file_valid",
      "kubernetes_controller_manager_service_account_private_key_file_secure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy. Default Value: By default, --service-account-private-key-file is not set.  85 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-controller-manager/"
  },
  {
    "id": "1.3.6",
    "title": "Ensure that the --root-ca-file argument is set as appropriate",
    "assessment": "Scored",
    "description": "Allow pods to verify the API server's serving certificate before establishing connections.",
    "rationale": "Processes running within pods that need to contact the API server must verify the API server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks. Providing the root certificate for the API server's serving certificate to the controller manager with the --root-ca-file argument allows the controller manager to inject the trusted bundle into pods so that they can verify TLS connections to the API server.",
    "audit": "Run the following command on the master node: ps -ef | grep kube-controller-manager Verify that the --root-ca-file argument exists and is set to a certificate bundle file containing the root certificate for the API server's serving certificate.",
    "remediation": "Edit the /etc/kubernetes/controller-manager file on the master node and set the KUBE_CONTROLLER_MANAGER_ARGS parameter to include --root-ca-file=<file>: KUBE_CONTROLLER_MANAGER_ARGS=\"--root-ca-file=<file>\" Based on your system, restart the kube-controller-manager service. For example: systemctl restart kube-controller-manager.service Impact: You need to setup and maintain root certificate authority file. Default Value: By default, --root-ca-file is not set  87 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://github.com/kubernetes/kubernetes/issues/11000",
    "function_names": [
      "kubernetes_pod_root_ca_file_configured",
      "kubernetes_pod_api_server_certificate_verified",
      "kubernetes_pod_secure_api_connection_enabled",
      "kubernetes_pod_root_ca_file_valid",
      "kubernetes_pod_api_server_trusted_certificate"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You need to setup and maintain root certificate authority file. Default Value: By default, --root-ca-file is not set  87 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-controller-manager/ 2. https://github.com/kubernetes/kubernetes/issues/11000"
  },
  {
    "id": "1.4.1",
    "title": "Ensure that the apiserver file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the apiserver file has permissions of 644 or more restrictive.",
    "rationale": "The apiserver file controls various parameters that set the behavior of the API server. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %a /etc/kubernetes/apiserver Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/kubernetes/apiserver Impact: None Default Value: By default, apiserver file has permissions of 644.   89 | P a g e References: 1. https://kubernetes.io/docs/admin/kube-apiserver/",
    "function_names": [
      "kubernetes_apiserver_file_permissions_restrictive",
      "kubernetes_apiserver_file_permissions_644_or_stricter",
      "kubernetes_apiserver_file_permissions_secure",
      "kubernetes_apiserver_file_permissions_compliant",
      "kubernetes_apiserver_file_permissions_cis_benchmark"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, apiserver file has permissions of 644.   89 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/"
  },
  {
    "id": "1.4.2",
    "title": "Ensure that the apiserver file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the apiserver file ownership is set to root:root.",
    "rationale": "The apiserver file controls various parameters that set the behavior of the API server. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %U:%G /etc/kubernetes/apiserver Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/kubernetes/apiserver Impact: None Default Value: By default, apiserver file ownership is set to root:root. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/   91 | P a g e",
    "function_names": [
      "kubernetes_apiserver_file_ownership_root",
      "kubernetes_apiserver_file_ownership_root_root",
      "kubernetes_apiserver_file_owner_root",
      "kubernetes_apiserver_file_group_root",
      "kubernetes_apiserver_file_permissions_root"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, apiserver file ownership is set to root:root.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/   91 | P a g e"
  },
  {
    "id": "1.4.3",
    "title": "Ensure that the config file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the config file has permissions of 644 or more restrictive.",
    "rationale": "The config file controls various parameters that set the behavior of various components of the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %a /etc/kubernetes/config Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/kubernetes/config Impact: None Default Value: By default, config file has permissions of 644. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/   93 | P a g e",
    "function_names": [
      "config_file_permissions_644_or_restrictive",
      "config_file_permissions_not_world_writable",
      "config_file_permissions_not_group_writable",
      "config_file_permissions_not_world_readable",
      "config_file_permissions_not_group_readable",
      "config_file_permissions_not_world_executable",
      "config_file_permissions_not_group_executable"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, config file has permissions of 644.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/   93 | P a g e"
  },
  {
    "id": "1.4.4",
    "title": "Ensure that the config file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the config file ownership is set to root:root.",
    "rationale": "The config file controls various parameters that set the behavior of various components of the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %U:%G /etc/kubernetes/config Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/kubernetes/config Impact: None Default Value: By default, config file ownership is set to root:root. References: 1. https://kubernetes.io/docs/admin/kube-apiserver/   95 | P a g e",
    "function_names": [
      "config_file_root_ownership",
      "config_file_root_group_ownership",
      "config_file_ownership_root_root",
      "config_file_secure_ownership",
      "config_file_root_user_ownership",
      "config_file_root_group_ownership_set",
      "config_file_ownership_restricted_to_root"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, config file ownership is set to root:root.",
    "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/   95 | P a g e"
  },
  {
    "id": "1.4.5",
    "title": "Ensure that the scheduler file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the scheduler file has permissions of 644 or more restrictive.",
    "rationale": "The scheduler file controls various parameters that set the behavior of the kube- scheduler service in the master node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %a /etc/kubernetes/scheduler Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/kubernetes/scheduler Impact: None Default Value: By default, scheduler file has permissions of 644. References: 1. https://kubernetes.io/docs/admin/kube-scheduler/  97 | P a g e",
    "function_names": [
      "compute_scheduler_file_permissions_644_or_restrictive",
      "compute_scheduler_file_permissions_restrictive",
      "scheduler_file_permissions_644_or_stricter",
      "scheduler_file_permissions_restrictive",
      "compute_scheduler_file_permissions_strict"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, scheduler file has permissions of 644.",
    "references": "1. https://kubernetes.io/docs/admin/kube-scheduler/  97 | P a g e"
  },
  {
    "id": "1.4.6",
    "title": "Ensure that the scheduler file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the scheduler file ownership is set to root:root.",
    "rationale": "The scheduler file controls various parameters that set the behavior of the kube- scheduler service in the master node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %U:%G /etc/kubernetes/scheduler Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/kubernetes/scheduler Impact: None Default Value: By default, scheduler file ownership is set to root:root. References: 1. https://kubernetes.io/docs/admin/kube-scheduler/",
    "function_names": [
      "scheduler_file_ownership_root_root",
      "scheduler_file_root_ownership",
      "scheduler_root_ownership",
      "scheduler_file_secure_ownership",
      "scheduler_file_root_user_group"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, scheduler file ownership is set to root:root.",
    "references": "1. https://kubernetes.io/docs/admin/kube-scheduler/"
  },
  {
    "id": "1.4.7",
    "title": "Ensure that the etcd.conf file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the etcd.conf file has permissions of 644 or more restrictive.",
    "rationale": "The etcd.conf file controls various parameters that set the behavior of the etcd service in the master node. etcd is a highly-available key value store which Kubernetes uses for persistent storage of all of its REST API object. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %a /etc/etcd/etcd.conf Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/etcd/etcd.conf Impact: None Default Value: By default, etcd.conf file has permissions of 644. References: 1. https://coreos.com/etcd  101 | P a g e 2. https://kubernetes.io/docs/admin/etcd/",
    "function_names": [
      "etcd_conf_file_permissions_644_or_restrictive",
      "etcd_conf_file_permissions_restrictive",
      "etcd_conf_file_permissions_secure",
      "etcd_conf_file_permissions_compliant",
      "etcd_conf_file_permissions_cis_benchmark"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, etcd.conf file has permissions of 644.",
    "references": "1. https://coreos.com/etcd  101 | P a g e 2. https://kubernetes.io/docs/admin/etcd/"
  },
  {
    "id": "1.4.8",
    "title": "Ensure that the etcd.conf file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the etcd.conf file ownership is set to root:root.",
    "rationale": "The etcd.conf file controls various parameters that set the behavior of the etcd service in the master node. etcd is a highly-available key value store which Kubernetes uses for persistent storage of all of its REST API object. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %U:%G /etc/etcd/etcd.conf Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/etcd/etcd.conf Impact: None Default Value: By default, etcd.conf file ownership is set to root:root. References: 1. https://coreos.com/etcd 2. https://kubernetes.io/docs/admin/etcd/   103 | P a g e",
    "function_names": [
      "etcd_config_file_root_ownership",
      "etcd_conf_root_user_group",
      "etcd_config_root_ownership",
      "etcd_file_root_ownership",
      "etcd_conf_file_root_owner"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, etcd.conf file ownership is set to root:root.",
    "references": "1. https://coreos.com/etcd 2. https://kubernetes.io/docs/admin/etcd/   103 | P a g e"
  },
  {
    "id": "1.4.9",
    "title": "Ensure that the flanneld file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the flanneld file has permissions of 644 or more restrictive.",
    "rationale": "The flanneld file controls various parameters that set the behavior of the flanneld service in the master node. Flannel is one of the various options for a simple overlay network. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %a /etc/sysconfig/flanneld Verify that the permissions are 644 or more restrictive. Note: Flannel is an optional component of Kubernetes. If you are not using Flannel then this requirement is not applicable. If you are using any other option for configuring your networking, please extend this recommendation to cover important configuration files as appropriate.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chmod 644 /etc/sysconfig/flanneld Impact: None   105 | P a g e Default Value: Note: Flannel is an optional component of Kubernetes and there are other alternatives that might be used in its place. Please checkout the Kubernetes documentation for other options. If you are using Flannel for setting up your networking then, by default, flanneld file has permissions of 644. References: 1. https://coreos.com/flannel/docs/latest/ 2. https://kubernetes.io/docs/concepts/cluster-administration/networking/#flannel",
    "function_names": [
      "flannel_file_permissions_restrictive",
      "flannel_file_permissions_644_or_stricter",
      "flannel_config_file_permissions_restrictive",
      "flannel_config_file_permissions_644_or_stricter",
      "flannel_file_permissions_secure",
      "flannel_config_file_permissions_secure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None   105 | P a g e Default Value: Note: Flannel is an optional component of Kubernetes and there are other alternatives that might be used in its place. Please checkout the Kubernetes documentation for other options. If you are using Flannel for setting up your networking then, by default, flanneld file has permissions of 644.",
    "references": "1. https://coreos.com/flannel/docs/latest/ 2. https://kubernetes.io/docs/concepts/cluster-administration/networking/#flannel"
  },
  {
    "id": "1.4.10",
    "title": "Ensure that the flanneld file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the flanneld file ownership is set to root:root.",
    "rationale": "The flanneld file controls various parameters that set the behavior of the flanneld service in the master node. Flannel is one of the various options for a simple overlay network. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the master node. For example, stat -c %U:%G /etc/sysconfig/flanneld Verify that the ownership is set to root:root. Note: Flannel is an optional component of Kubernetes. If you are not using Flannel then this requirement is not applicable. If you are using any other option for configuring your networking, please extend this recommendation to cover important configuration files as appropriate.",
    "remediation": "Run the below command (based on the file location on your system) on the master node. For example, chown root:root /etc/sysconfig/flanneld Impact: None   107 | P a g e Default Value: Note: Flannel is an optional component of Kubernetes and there are other alternatives that might be used in its place. Please checkout the Kubernetes documentation for other options. If you are using Flannel for setting up your networking then, by default, flanneld file ownership is set to root:root. References: 1. https://coreos.com/flannel/docs/latest/ 2. https://kubernetes.io/docs/concepts/cluster-administration/networking/#flannel",
    "function_names": [
      "flannel_file_root_ownership",
      "flannel_config_root_ownership",
      "flanneld_file_secure_ownership",
      "flanneld_config_secure_ownership",
      "flannel_daemon_file_root_ownership"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None   107 | P a g e Default Value: Note: Flannel is an optional component of Kubernetes and there are other alternatives that might be used in its place. Please checkout the Kubernetes documentation for other options. If you are using Flannel for setting up your networking then, by default, flanneld file ownership is set to root:root.",
    "references": "1. https://coreos.com/flannel/docs/latest/ 2. https://kubernetes.io/docs/concepts/cluster-administration/networking/#flannel"
  },
  {
    "id": "1.4.11",
    "title": "Ensure that the etcd data directory permissions are set to 700 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the etcd data directory has permissions of 700 or more restrictive.",
    "rationale": "etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should not be readable or writable by any group members or the world.",
    "audit": "On the etcd server node, get the etcd data directory, passed as an argument --data-dir, from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, stat -c %a /var/lib/etcd/default.etcd Verify that the permissions are 700 or more restrictive.",
    "remediation": "On the etcd server node, get the etcd data directory, passed as an argument --data-dir, from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, chmod 700 /var/lib/etcd/default.etcd Impact: None   109 | P a g e Default Value: By default, etcd data directory has permissions of 700. References: 1. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir 2. https://kubernetes.io/docs/admin/etcd/",
    "function_names": [
      "etcd_data_directory_permissions_restrictive",
      "etcd_data_directory_permissions_700_or_stricter",
      "etcd_directory_permissions_restrictive",
      "etcd_directory_permissions_700_or_less",
      "etcd_data_directory_permissions_secure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None   109 | P a g e Default Value: By default, etcd data directory has permissions of 700.",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir 2. https://kubernetes.io/docs/admin/etcd/"
  },
  {
    "id": "1.4.12",
    "title": "Ensure that the etcd data directory ownership is set to etcd:etcd",
    "assessment": "Scored",
    "description": "Ensure that the etcd data directory ownership is set to etcd:etcd.",
    "rationale": "etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should be owned by etcd:etcd.",
    "audit": "On the etcd server node, get the etcd data directory, passed as an argument --data-dir, from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, stat -c %U:%G /var/lib/etcd/default.etcd Verify that the ownership is set to etcd:etcd.",
    "remediation": "On the etcd server node, get the etcd data directory, passed as an argument --data-dir, from the below command: ps -ef | grep etcd Run the below command (based on the etcd data directory found above). For example, chown etcd:etcd /var/lib/etcd/default.etcd Impact: None Default Value: By default, etcd data directory ownership is set to etcd:etcd.  111 | P a g e References: 1. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir 2. https://kubernetes.io/docs/admin/etcd/",
    "function_names": [
      "etcd_data_directory_ownership_etcd_etcd",
      "etcd_directory_permissions_etcd_etcd",
      "etcd_data_directory_correct_ownership",
      "etcd_directory_ownership_secure",
      "etcd_data_directory_user_group_etcd"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, etcd data directory ownership is set to etcd:etcd.  111 | P a g e",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir 2. https://kubernetes.io/docs/admin/etcd/"
  },
  {
    "id": "1.5.1",
    "title": "Ensure that the --cert-file and --key-file arguments are set as appropriate",
    "assessment": "Scored",
    "description": "Configure TLS encryption for the etcd service.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit.",
    "audit": "Run the following command on the etcd server node ps -ef | grep etcd Verify that the --cert-file and the --key-file arguments are set as appropriate.",
    "remediation": "Follow the etcd service documentation and configure TLS encryption. Impact: Client connections only over TLS would be served. Default Value: By default, TLS encryption is not set. References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/  113 | P a g e",
    "function_names": [
      "etcd_service_tls_encryption_enabled",
      "etcd_service_cert_file_configured",
      "etcd_service_key_file_configured",
      "etcd_service_tls_certificates_valid",
      "etcd_service_tls_secure_configuration"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Client connections only over TLS would be served. Default Value: By default, TLS encryption is not set.",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/  113 | P a g e"
  },
  {
    "id": "1.5.2",
    "title": "Ensure that the --client-cert-auth argument is set to true",
    "assessment": "Scored",
    "description": "Enable client authentication on etcd service.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that the --client-cert-auth argument is set to true.",
    "remediation": "Edit the etcd envrironment file (for example, /etc/etcd/etcd.conf) on the etcd server node and set the ETCD_CLIENT_CERT_AUTH parameter to \"true\": ETCD_CLIENT_CERT_AUTH=\"true\" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service) and configure the startup parameter for --client- cert-auth and set it to \\\"${ETCD_CLIENT_CERT_AUTH}\\\": ExecStart=/bin/bash -c \"GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\\\"${ETCD_NAME}\\\" --data-dir=\\\"${ETCD_DATA_DIR}\\\" --listen-client- urls=\\\"${ETCD_LISTEN_CLIENT_URLS}\\\" --client-cert- auth=\\\"${ETCD_CLIENT_CERT_AUTH}\\\"\" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service Impact: All clients attempting to access the etcd server will require a valid client certificate.  115 | P a g e Default Value: By default, the etcd service can be queried by unauthenticated clients. References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#client-cert-auth",
    "function_names": [
      "etcd_service_client_auth_enabled",
      "etcd_client_cert_auth_required",
      "etcd_tls_client_authentication_enabled",
      "etcd_client_certificate_auth_enabled",
      "etcd_auth_client_cert_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "All clients attempting to access the etcd server will require a valid client certificate.  115 | P a g e Default Value: By default, the etcd service can be queried by unauthenticated clients.",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#client-cert-auth"
  },
  {
    "id": "1.5.3",
    "title": "Ensure that the --auto-tls argument is not set to true",
    "assessment": "Scored",
    "description": "Do not use self-signed certificates for TLS.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that if the --auto-tls argument exists, it is not set to true.",
    "remediation": "Edit the etcd environment file (for example, /etc/etcd/etcd.conf) on the etcd server node and comment out the ETCD_AUTO_TLS parameter. #ETCD_AUTO_TLS=\"true\" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service) and remove the startup parameter for --auto-tls. Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service Impact: Clients will not be able to use self-signed certificates for TLS. Default Value: By default, --auto-tls is set to false.   117 | P a g e References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#auto-tls",
    "function_names": [
      "cloud_cdn_domain_auto_tls_disabled",
      "cloud_cdn_domain_self_signed_certificates_disabled",
      "cloud_cdn_domain_tls_certificate_valid",
      "cloud_cdn_domain_tls_managed_certificates_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Clients will not be able to use self-signed certificates for TLS. Default Value: By default, --auto-tls is set to false.   117 | P a g e",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#auto-tls"
  },
  {
    "id": "1.5.4",
    "title": "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate",
    "assessment": "Scored",
    "description": "etcd should be configured to make use of TLS encryption for peer connections.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that the --peer-cert-file and --peer-key-file arguments are set as appropriate. Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable.",
    "remediation": "Follow the etcd service documentation and configure peer TLS encryption as appropriate for your etcd cluster. Impact: etcd cluster peers would need to set up TLS for their communication. Default Value: Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable. By default, peer communication over TLS is not configured.   119 | P a g e References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/",
    "function_names": [
      "etcd_peer_cert_file_set",
      "etcd_peer_key_file_set",
      "etcd_peer_tls_encryption_enabled",
      "etcd_peer_cert_file_configured",
      "etcd_peer_key_file_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "etcd cluster peers would need to set up TLS for their communication. Default Value: Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable. By default, peer communication over TLS is not configured.   119 | P a g e",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/"
  },
  {
    "id": "1.5.5",
    "title": "Ensure that the --peer-client-cert-auth argument is set to true",
    "assessment": "Scored",
    "description": "etcd should be configured for peer authentication.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that the --peer-client-cert-auth argument is set to true. Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable.",
    "remediation": "Edit the etcd environment file (for example, /etc/etcd/etcd.conf) on the etcd server node and set the ETCD_PEER_CLIENT_CERT_AUTH parameter to \"true\": ETCD_PEER_CLIENT_CERT_AUTH=\"true\" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service) and configure the startup parameter for --peer- client-cert-auth and set it to \\\"${ETCD_PEER_CLIENT_CERT_AUTH}\\\": ExecStart=/bin/bash -c \"GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\\\"${ETCD_NAME}\\\" --data-dir=\\\"${ETCD_DATA_DIR}\\\" --listen-client- urls=\\\"${ETCD_LISTEN_CLIENT_URLS}\\\" --peer-client-cert- auth=\\\"${ETCD_PEER_CLIENT_CERT_AUTH}\\\"\" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service  121 | P a g e Impact: All peers attempting to communicate with the etcd server will require a valid client certificate for authentication. Default Value: Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable. By default, --peer-client-cert-auth argument is set to false. References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-client- cert-auth",
    "function_names": [
      "etcd_peer_client_cert_auth_enabled",
      "etcd_peer_authentication_required",
      "etcd_client_cert_auth_enabled",
      "etcd_peer_tls_auth_enabled",
      "etcd_secure_peer_communication_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "All peers attempting to communicate with the etcd server will require a valid client certificate for authentication. Default Value: Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable. By default, --peer-client-cert-auth argument is set to false.",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-client- cert-auth"
  },
  {
    "id": "1.5.6",
    "title": "Ensure that the --peer-auto-tls argument is not set to true",
    "assessment": "Scored",
    "description": "Do not use automatically generated self-signed certificates for TLS connections between peers.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster. Hence, do not use self- signed certificates for authentication.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that if the --peer-auto-tls argument exists, it is not set to true. Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable.",
    "remediation": "Edit the etcd environment file (for example, /etc/etcd/etcd.conf) on the etcd server node and comment out the ETCD_PEER_AUTO_TLS parameter: #ETCD_PEER_AUTO_TLS=\"true\" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service) and remove the startup parameter for --peer-auto- tls. Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service Impact: All peers attempting to communicate with the etcd server will require a valid client certificate for authentication.  123 | P a g e Default Value: Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable. By default, --peer-auto-tls argument is set to false. References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-auto-tls",
    "function_names": [
      "compute_cluster_peer_auto_tls_disabled",
      "compute_cluster_peer_tls_manual_certificates",
      "compute_cluster_peer_tls_self_signed_disabled",
      "compute_cluster_peer_tls_auto_generated_disabled",
      "compute_cluster_peer_tls_custom_certificates_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "All peers attempting to communicate with the etcd server will require a valid client certificate for authentication.  123 | P a g e Default Value: Note: This recommendation is applicable only for etcd clusters. If you are using only one etcd server in your environment then this recommendation is not applicable. By default, --peer-auto-tls argument is set to false.",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html 2. https://kubernetes.io/docs/admin/etcd/ 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-auto-tls"
  },
  {
    "id": "1.5.7",
    "title": "Ensure that the --wal-dir argument is set as appropriate",
    "assessment": "Scored",
    "description": "Store etcd logs separately from etcd data.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be mixed with log data. Keeping the log data separate from the etcd data also ensures that those two types of data could individually be safeguarded. Also, you could use a centralized and remote log directory for persistent logging. Additionally, this separation also helps to avoid IO competition between logging and other IO operations.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that --wal-dir argument exists, and it is set as appropriate. At the minimum, it should not be set to the same directory as set for --data-dir argument.",
    "remediation": "Edit the etcd environment file (for example, /etc/etcd/etcd.conf) on the etcd server node and set the ETCD_WAL_DIR parameter as appropriate: ETCD_WAL_DIR=\"<dir-name>\" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service) and configure the startup parameter for --wal-dir and set it to \\\"${ETCD_WAL_DIR}\\\": ExecStart=/bin/bash -c \"GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\\\"${ETCD_NAME}\\\" --data-dir=\\\"${ETCD_DATA_DIR}\\\" --listen-client- urls=\\\"${ETCD_LISTEN_CLIENT_URLS}\\\" --wal-dir=\\\"${ETCD_WAL_DIR}\\\"\" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service  125 | P a g e Impact: None Default Value: By default, --wal-dir argument is not set. References: 1. https://kubernetes.io/docs/admin/etcd/ 2. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#wal-dir 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir",
    "function_names": [
      "etcd_cluster_wal_dir_configured",
      "etcd_cluster_logs_separate_from_data",
      "etcd_cluster_wal_dir_appropriate",
      "etcd_cluster_log_storage_isolated",
      "etcd_cluster_wal_dir_valid_path"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, --wal-dir argument is not set.",
    "references": "1. https://kubernetes.io/docs/admin/etcd/ 2. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#wal-dir 3. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir"
  },
  {
    "id": "1.5.8",
    "title": "Ensure that the --max-wals argument is set to 0",
    "assessment": "Scored",
    "description": "Do not auto rotate logs.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. You should avoid automatic log rotation and instead safeguard the logs in a centralized repository or through a separate log management system.",
    "audit": "Run the following command on the etcd server node: ps -ef | grep etcd Verify that --max-wals argument exists and it is set to 0.",
    "remediation": "Edit the etcd environment file (for example, /etc/etcd/etcd.conf) on the etcd server node and set the ETCD_MAX_WALS parameter to 0: ETCD_MAX_WALS=\"0\" Edit the etcd startup file (for example, /etc/systemd/system/multi- user.target.wants/etcd.service) and configure the startup parameter for --max-wals and set it to \\\"${ETCD_MAX_WALS}\\\": ExecStart=/bin/bash -c \"GOMAXPROCS=$(nproc) /usr/bin/etcd -- name=\\\"${ETCD_NAME}\\\" --data-dir=\\\"${ETCD_DATA_DIR}\\\" --listen-client- urls=\\\"${ETCD_LISTEN_CLIENT_URLS}\\\" --max-walsr=\\\"${ETCD_MAX_WALS}\\\"\" Based on your system, reload the daemon and restart the etcd service. For example, systemctl daemon-reload systemctl restart etcd.service Impact: You will have to manage log rotation and archiving.  127 | P a g e Default Value: By default, --max-wals argument is set to 5. References: 1. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#max-wals 2. https://kubernetes.io/docs/admin/etcd/",
    "function_names": [
      "etcd_cluster_max_wals_disabled",
      "etcd_log_rotation_disabled",
      "etcd_max_wals_zero",
      "etcd_auto_rotation_disabled",
      "etcd_wal_retention_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will have to manage log rotation and archiving.  127 | P a g e Default Value: By default, --max-wals argument is set to 5.",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/configuration.html#max-wals 2. https://kubernetes.io/docs/admin/etcd/"
  },
  {
    "id": "1.5.9",
    "title": "Ensure that a unique Certificate Authority is used for etcd",
    "assessment": "Not Scored",
    "description": "Use a different certificate authority for etcd from the one used for Kubernetes.",
    "rationale": "etcd is a highly available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. Its access should be restricted to specifically designated clients and peers only. Authentication to etcd is based on whether the certificate presented was issued by a trusted certificate authority. There is no checking of certificate attributes such as common name or subject alternative name. As such, if any attackers were able to gain access to any certificate issued by the trusted certificate authority, they would be able to gain full access to the etcd database.",
    "audit": "Review the CA used by the etcd environment and ensure that it does not match the CA certificate used by Kubernetes. Run the following command on the etcd server node: ps -ef | grep etcd Review the file referenced by the --trusted-ca-file argument and ensure that the referenced CA is not the same one as is used for management of the overall Kubernetes cluster.",
    "remediation": "Follow the etcd documentation and create a dedicated certificate authority setup for the etcd service. Impact: Additional management of the certificates and keys for the dedicated certificate authority will be required.  129 | P a g e Default Value: NA References: 1. https://coreos.com/etcd/docs/latest/op-guide/security.html",
    "function_names": [
      "kubernetes_etcd_unique_certificate_authority",
      "etcd_certificate_authority_separate_from_kubernetes",
      "etcd_ca_not_shared_with_kubernetes",
      "kubernetes_etcd_ca_distinct",
      "etcd_ca_unique_per_cluster"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Additional management of the certificates and keys for the dedicated certificate authority will be required.  129 | P a g e Default Value: NA",
    "references": "1. https://coreos.com/etcd/docs/latest/op-guide/security.html"
  },
  {
    "id": "1.6.1",
    "title": "Ensure that the cluster-admin role is only used where required",
    "assessment": "Not Scored",
    "description": "The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.",
    "rationale": "Kubernetes provides a set of default roles where RBAC is used. Some of these roles such as cluster-admin provide wide-ranging privileges which should only be applied where absolutely necessary. Roles such as cluster-admin allow super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the rolebinding's namespace, including the namespace itself.",
    "audit": "Obtain a list of the principals who have access to the cluster-admin role by reviewing the clusterrolebinding output for each role binding that has access to the cluster-admin role. kubectl get clusterrolebindings -o=custom- columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name Review each principal listed and ensure that cluster-admin privilege is required for it.",
    "remediation": "Remove any unneeded clusterrolebindings:  131 | P a g e kubectl delete clusterrolebinding [name] Impact: Care should be taken before removing any clusterrolebindings from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to clusterrolebindings with the system: prefix as they are required for the operation of system components. Default Value: By default a single clusterrolebinding called cluster-admin is provided with the system:masters group as its principal. References: 1. https://kubernetes.io/docs/admin/authorization/rbac/#user-facing-roles",
    "function_names": [
      "kubernetes_role_no_cluster_admin",
      "kubernetes_role_cluster_admin_restricted",
      "kubernetes_role_cluster_admin_minimal_usage",
      "kubernetes_role_cluster_admin_least_privilege",
      "kubernetes_role_cluster_admin_required_only"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Care should be taken before removing any clusterrolebindings from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to clusterrolebindings with the system: prefix as they are required for the operation of system components. Default Value: By default a single clusterrolebinding called cluster-admin is provided with the system:masters group as its principal.",
    "references": "1. https://kubernetes.io/docs/admin/authorization/rbac/#user-facing-roles"
  },
  {
    "id": "1.6.2",
    "title": "Create Pod Security Policies for your cluster",
    "assessment": "Not Scored",
    "description": "Create and enforce Pod Security Policies for your cluster.",
    "rationale": "A Pod Security Policy is a cluster-level resource that controls the actions that a pod can perform and what it has the ability to access. The PodSecurityPolicy objects define a set of conditions that a pod must run with in order to be accepted into the system. Pod Security Policies are comprised of settings and strategies that control the security features a pod has access to and hence this must be used to control pod access permissions.",
    "audit": "Run the below command and review the Pod Security Policies enforced on the cluster. kubectl get psp Ensure that these policies are configured as per your security requirements.",
    "remediation": "Follow the documentation and create and enforce Pod Security Policies for your cluster. Additionally, you could refer the \"CIS Security Benchmark for Docker\" and follow the suggested Pod Security Policies for your environment. Impact: Pods must align with the Pod Security Policies enforced on the cluster. Default Value: By default, Pod Security Policies are not created. References: 1. https://kubernetes.io/docs/concepts/policy/pod-security-policy/ 2. https://benchmarks.cisecurity.org/downloads/browse/index.cfm?category=bench marks.servers.virtualization.docker  133 | P a g e",
    "function_names": [
      "kubernetes_cluster_pod_security_policy_enabled",
      "kubernetes_cluster_pod_security_policy_enforced",
      "kubernetes_cluster_pod_security_policy_defined",
      "kubernetes_cluster_pod_security_policy_applied",
      "kubernetes_cluster_pod_security_policy_restrictive"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Pods must align with the Pod Security Policies enforced on the cluster. Default Value: By default, Pod Security Policies are not created.",
    "references": "1. https://kubernetes.io/docs/concepts/policy/pod-security-policy/ 2. https://benchmarks.cisecurity.org/downloads/browse/index.cfm?category=bench marks.servers.virtualization.docker  133 | P a g e"
  },
  {
    "id": "1.6.3",
    "title": "Create administrative boundaries between resources using namespaces",
    "assessment": "Not Scored",
    "description": "Use namespaces to isolate your Kubernetes objects.",
    "rationale": "Limiting the scope of user permissions can reduce the impact of mistakes or malicious activities. A Kubernetes namespace allows you to partition created resources into logically named groups. Resources created in one namespace can be hidden from other namespaces. By default, each resource created by a user in Kubernetes cluster runs in a default namespace, called default. You can create additional namespaces and attach resources and users to them. You can use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users.",
    "audit": "Run the below command and review the namespaces created in the cluster. kubectl get namespaces Ensure that these namespaces are the ones you need and are adequately administered as per your requirements.",
    "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need them. Impact: You need to switch between namespaces for administration. Default Value: By default, Kubernetes starts with two initial namespaces: 1. default - The default namespace for objects with no other namespace 2. kube-system - The namespace for objects created by the Kubernetes system  135 | P a g e References: 1. https://kubernetes.io/docs/concepts/overview/working-with- objects/namespaces/ 2. http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes- deployment.html",
    "function_names": [
      "kubernetes_namespace_isolation_enabled",
      "kubernetes_namespace_admin_boundaries_enforced",
      "kubernetes_namespace_resource_separation_required",
      "kubernetes_namespace_default_deny_policy",
      "kubernetes_namespace_network_policies_enforced",
      "kubernetes_namespace_rbac_restricted",
      "kubernetes_namespace_resource_quotas_set",
      "kubernetes_namespace_pod_security_policies_enabled",
      "kubernetes_namespace_label_selector_restrictions",
      "kubernetes_namespace_immutable_labels_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You need to switch between namespaces for administration. Default Value: By default, Kubernetes starts with two initial namespaces: 1. default - The default namespace for objects with no other namespace 2. kube-system - The namespace for objects created by the Kubernetes system  135 | P a g e",
    "references": "1. https://kubernetes.io/docs/concepts/overview/working-with- objects/namespaces/ 2. http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes- deployment.html"
  },
  {
    "id": "1.6.4",
    "title": "Create network segmentation using Network Policies",
    "assessment": "Not Scored",
    "description": "Use network policies to isolate your cluster network.",
    "rationale": "Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints. NetworkPolicy resources use labels to select pods and define whitelist rules which allow traffic to the selected pods in addition to what is allowed by the isolation policy for a given namespace.",
    "audit": "Run the below command and review the NetworkPolicy objects created in the cluster. kubectl get pods --namespace=kube-system Ensure that these NetworkPolicy objects are the ones you need and are adequately administered as per your requirements.",
    "remediation": "Follow the documentation and create NetworkPolicy objects as you need them. Impact: You need a networking solution which supports NetworkPolicy - simply creating the resource without a controller to implement it will have no effect. Default Value: By default, network policies are not created. References: 1. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/  137 | P a g e 2. http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes- deployment.html 3. https://kubernetes.io/docs/tasks/configure-pod-container/declare-network- policy/",
    "function_names": [
      "kubernetes_network_policy_segmentation_enabled",
      "kubernetes_network_policy_isolation_required",
      "kubernetes_network_policy_traffic_restricted",
      "kubernetes_network_policy_ingress_egress_controlled",
      "kubernetes_network_policy_default_deny_enabled",
      "kubernetes_network_policy_pod_isolation_required",
      "kubernetes_network_policy_namespace_isolation_required",
      "kubernetes_network_policy_minimal_access_required"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "You need a networking solution which supports NetworkPolicy - simply creating the resource without a controller to implement it will have no effect. Default Value: By default, network policies are not created.",
    "references": "1. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/  137 | P a g e 2. http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes- deployment.html 3. https://kubernetes.io/docs/tasks/configure-pod-container/declare-network- policy/"
  },
  {
    "id": "1.6.5",
    "title": "Avoid using Kubernetes Secrets",
    "assessment": "Not Scored",
    "description": "Avoid using Kubernetes secret.",
    "rationale": "Kubernetes objects of type secret are intended to hold sensitive information, such as passwords, OAuth tokens, and ssh keys. Its current implementation is very basic. It has plenty of risks as highlighted in the reference links including storing secrets as plaintext. Avoid using Kubernetes secrets until you have devised a mechanism to protect them using your own means.",
    "audit": "Run the below command and review if there are any secret objects created in the cluster. kubectl get secrets Ensure that these secret objects are the ones you need and are adequately administered as per your requirements.",
    "remediation": "Use other mechanisms such as vaults to manage your cluster secrets. Impact: You need to use other mechanisms for managing secrets in your cluster. Default Value: By default, Kubernetes automatically creates secrets which contain credentials for accessing the API and it automatically modifies your pods to use this type of secret. Please note that those default token secrets are automatically created and deleting them won't be of any use, because Kubernetes will just recreate them. References: 1. https://kubernetes.io/docs/concepts/configuration/secret/#risks 2. https://github.com/kubernetes/kubernetes/issues/10439  139 | P a g e 3. https://github.com/kubernetes/community/blob/master/contributors/design- proposals/secrets.md",
    "function_names": [
      "kubernetes_secret_avoid_usage",
      "kubernetes_secret_not_used",
      "kubernetes_secret_disabled",
      "kubernetes_secret_prohibited",
      "kubernetes_secret_restricted"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "You need to use other mechanisms for managing secrets in your cluster. Default Value: By default, Kubernetes automatically creates secrets which contain credentials for accessing the API and it automatically modifies your pods to use this type of secret. Please note that those default token secrets are automatically created and deleting them won't be of any use, because Kubernetes will just recreate them.",
    "references": "1. https://kubernetes.io/docs/concepts/configuration/secret/#risks 2. https://github.com/kubernetes/kubernetes/issues/10439  139 | P a g e 3. https://github.com/kubernetes/community/blob/master/contributors/design- proposals/secrets.md"
  },
  {
    "id": "1.6.6",
    "title": "Ensure that the seccomp profile is set to docker/default in your pod definitions",
    "assessment": "Not Scored",
    "description": "Enable docker/default seccomp profile in your pod definitions.",
    "rationale": "Seccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. You should enable it to ensure that the workloads have restricted actions available within the container.",
    "audit": "Review the pod definitions in your cluster. It should create a line as below: annotations: seccomp.security.alpha.kubernetes.io/pod: docker/default",
    "remediation": "Seccomp is an alpha feature currently. By default, all alpha features are disabled. So, you would need to enable alpha features in the apiserver by passing \"--feature- gates=AllAlpha=true\" argument. Edit the /etc/kubernetes/apiserver file on the master node and set the KUBE_API_ARGS parameter to \"--feature-gates=AllAlpha=true\" KUBE_API_ARGS=\"--feature-gates=AllAlpha=true\" Based on your system, restart the kube-apiserver service. For example: systemctl restart kube-apiserver.service Use annotations to enable the docker/default seccomp profile in your pod definitions. An example is as below: apiVersion: v1 kind: Pod metadata:  141 | P a g e name: trustworthy-pod annotations: seccomp.security.alpha.kubernetes.io/pod: docker/default spec: containers: - name: trustworthy-container image: sotrustworthy:latest Impact: If the docker/default seccomp profile is too restrictive for you, you would have to create/manage your own seccomp profiles. Also, you need to enable all alpha features for this to work. There is no individual switch to turn on this feature. Default Value: By default, seccomp profile is set to unconfined which means that no seccomp profiles are enabled. References: 1. https://github.com/kubernetes/kubernetes/issues/39845 2. https://github.com/kubernetes/kubernetes/pull/21790 3. https://github.com/kubernetes/community/blob/master/contributors/design- proposals/seccomp.md#examples 4. https://docs.docker.com/engine/security/seccomp/",
    "function_names": [
      "kubernetes_pod_seccomp_profile_docker_default",
      "kubernetes_pod_seccomp_profile_enabled",
      "kubernetes_pod_security_profile_docker_default",
      "kubernetes_pod_security_seccomp_enabled",
      "kubernetes_pod_security_seccomp_docker_default"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "If the docker/default seccomp profile is too restrictive for you, you would have to create/manage your own seccomp profiles. Also, you need to enable all alpha features for this to work. There is no individual switch to turn on this feature. Default Value: By default, seccomp profile is set to unconfined which means that no seccomp profiles are enabled.",
    "references": "1. https://github.com/kubernetes/kubernetes/issues/39845 2. https://github.com/kubernetes/kubernetes/pull/21790 3. https://github.com/kubernetes/community/blob/master/contributors/design- proposals/seccomp.md#examples 4. https://docs.docker.com/engine/security/seccomp/"
  },
  {
    "id": "1.6.7",
    "title": "Apply Security Context to Your Pods and Containers",
    "assessment": "Not Scored",
    "description": "Apply Security Context to Your Pods and Containers",
    "rationale": "A security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing your containers and pods, make sure that you configure the security context for your pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context.",
    "audit": "Review the pod definitions in your cluster and verify that you have security contexts defined as appropriate.",
    "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker Containers. Impact: If you incorrectly apply security contexts, you may have trouble running the pods. Default Value: By default, no security contexts are automatically applied to pods. References: 1. https://kubernetes.io/docs/concepts/policy/security-context/ 2. https://learn.cisecurity.org/benchmarks",
    "function_names": [
      "kubernetes_pod_security_context_applied",
      "kubernetes_container_security_context_applied",
      "kubernetes_pod_privilege_escalation_disabled",
      "kubernetes_container_privilege_escalation_disabled",
      "kubernetes_pod_read_only_root_filesystem_enabled",
      "kubernetes_container_read_only_root_filesystem_enabled",
      "kubernetes_pod_run_as_non_root_enabled",
      "kubernetes_container_run_as_non_root_enabled",
      "kubernetes_pod_capabilities_dropped",
      "kubernetes_container_capabilities_dropped"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "If you incorrectly apply security contexts, you may have trouble running the pods. Default Value: By default, no security contexts are automatically applied to pods.",
    "references": "1. https://kubernetes.io/docs/concepts/policy/security-context/ 2. https://learn.cisecurity.org/benchmarks"
  },
  {
    "id": "1.6.8",
    "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
    "assessment": "Not Scored",
    "description": "Configure Image Provenance for your deployment.",
    "rationale": "Kubernetes supports plugging in provenance rules to accept or reject the images in your deployments. You could configure such rules to ensure that only approved images are deployed in the cluster.",
    "audit": "Review the pod definitions in your cluster and verify that image provenance is configured as appropriate.",
    "remediation": "Follow the Kubernetes documentation and setup image provenance. Impact: You need to regularly maintain your provenance configuration based on container image updates. Default Value: By default, image provenance is not set. References: 1. https://kubernetes.io/docs/admin/admission-controllers/#imagepolicywebhook 2. https://github.com/kubernetes/community/blob/master/contributors/design- proposals/image-provenance.md 3. https://hub.docker.com/r/dnurmi/anchore-toolbox/ 4. https://github.com/kubernetes/kubernetes/issues/22888   145 | P a g e",
    "function_names": [
      "kubernetes_image_provenance_enabled",
      "kubernetes_image_policy_webhook_enabled",
      "kubernetes_admission_controller_image_provenance_enabled",
      "kubernetes_image_provenance_webhook_configured",
      "kubernetes_image_policy_webhook_configured",
      "kubernetes_admission_controller_image_policy_webhook_enabled",
      "kubernetes_image_provenance_validation_enabled",
      "kubernetes_image_policy_webhook_validation_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "You need to regularly maintain your provenance configuration based on container image updates. Default Value: By default, image provenance is not set.",
    "references": "1. https://kubernetes.io/docs/admin/admission-controllers/#imagepolicywebhook 2. https://github.com/kubernetes/community/blob/master/contributors/design- proposals/image-provenance.md 3. https://hub.docker.com/r/dnurmi/anchore-toolbox/ 4. https://github.com/kubernetes/kubernetes/issues/22888   145 | P a g e"
  },
  {
    "id": "2.1.1",
    "title": "Ensure that the --allow-privileged argument is set to false",
    "assessment": "Scored",
    "description": "Do not allow privileged containers.",
    "rationale": "The privileged container has all the system capabilities, and it also lifts all the limitations enforced by the device cgroup controller. In other words, the container can then do almost everything that the host can do. This flag exists to allow special use-cases, like running Docker within Docker and hence should be avoided for production workloads.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --allow-privileged argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/config file on each node and set the KUBE_ALLOW_PRIV parameter to \"--allow-privileged=false\": KUBE_ALLOW_PRIV=\"--allow-privileged=false\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: You will not be able to run any privileged containers.  147 | P a g e Note: A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Care should be taken in ensuring that the use of such plugins is minimized and in particular any use of privileged containers outside of the kube-system namespace should be scrutinized. Where possible, review the rights required by such plugins to determine if a more fine grained permission set can be applied. Default Value: By default, privileged containers are not allowed. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/user-guide/security-context/",
    "function_names": [
      "container_runtime_privileged_disabled",
      "container_runtime_allow_privileged_false",
      "container_runtime_privileged_containers_blocked",
      "container_runtime_privileged_mode_disabled",
      "container_runtime_privileged_flag_false"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will not be able to run any privileged containers.  147 | P a g e Note: A number of components used by Kubernetes clusters currently make use of privileged containers (e.g. Container Network Interface plugins). Care should be taken in ensuring that the use of such plugins is minimized and in particular any use of privileged containers outside of the kube-system namespace should be scrutinized. Where possible, review the rights required by such plugins to determine if a more fine grained permission set can be applied. Default Value: By default, privileged containers are not allowed.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/user-guide/security-context/"
  },
  {
    "id": "2.1.2",
    "title": "Ensure that the --anonymous-auth argument is set to false",
    "assessment": "Scored",
    "description": "Disable anonymous requests to the Kubelet server.",
    "rationale": "When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --anonymous-auth argument is set to false.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--anonymous-auth=false\": KUBELET_ARGS=\"--anonymous-auth=false\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Anonymous requests will be rejected. Default Value: By default, anonymous access is enabled. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet- authentication  149 | P a g e",
    "function_names": [
      "kubernetes_kubelet_anonymous_auth_disabled",
      "kubernetes_kubelet_anonymous_auth_set_false",
      "kubernetes_kubelet_anonymous_auth_blocked",
      "kubernetes_kubelet_anonymous_requests_disabled",
      "kubernetes_kubelet_auth_anonymous_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Anonymous requests will be rejected. Default Value: By default, anonymous access is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet- authentication  149 | P a g e"
  },
  {
    "id": "2.1.3",
    "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
    "assessment": "Scored",
    "description": "Do not allow all requests. Enable explicit authorization.",
    "rationale": "Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --authorization-mode argument exists and is not set to AlwaysAllow.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--authorization-mode=Webhook\": KUBELET_ARGS=\"--authorization-mode=Webhook\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Unauthorized requests will be denied. Default Value: By default, --authorization-mode argument is set to AlwaysAllow. References: 1. https://kubernetes.io/docs/admin/kubelet/  151 | P a g e 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet- authentication",
    "function_names": [
      "kubernetes_api_server_authorization_mode_not_always_allow",
      "kubernetes_api_server_explicit_authorization_enabled",
      "kubernetes_api_server_authorization_restricted",
      "kubernetes_api_server_always_allow_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Unauthorized requests will be denied. Default Value: By default, --authorization-mode argument is set to AlwaysAllow.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/  151 | P a g e 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet- authentication"
  },
  {
    "id": "2.1.4",
    "title": "Ensure that the --client-ca-file argument is set as appropriate",
    "assessment": "Scored",
    "description": "Enable Kubelet authentication using certificates.",
    "rationale": "The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet\u2019s port-forwarding functionality. These connections terminate at the kubelet\u2019s HTTPS endpoint. By default, the apiserver does not verify the kubelet\u2019s serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --client-ca-file argument exists and is set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and setup the TLS connection between the apiserver and kubelets. Then, edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--client-ca-file=<path/to/client-ca-file>\": KUBELET_ARGS=\"--client-ca-file=<path/to/client-ca-file>\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: You require TLS to be configured on apiserver as well as kubelets.   153 | P a g e Default Value: By default, --client-ca-file argument is not set. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet- authentication",
    "profile_applicability": "\u2022  Level 1",
    "impact": "You require TLS to be configured on apiserver as well as kubelets.   153 | P a g e Default Value: By default, --client-ca-file argument is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet- authentication"
  },
  {
    "id": "2.1.5",
    "title": "Ensure that the --read-only-port argument is set to 0",
    "assessment": "Scored",
    "description": "Disable the read-only port.",
    "rationale": "The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --read-only-port argument exists and is set to 0.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--read-only-port=0\" KUBELET_ARGS=\"--read-only-port=0\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API. Default Value: By default, --read-only-port is set to 10255/TCP. References: 1. https://kubernetes.io/docs/admin/kubelet/  155 | P a g e",
    "function_names": [
      "kubernetes_api_server_read_only_port_disabled",
      "kubernetes_api_server_read_only_port_set_zero",
      "kubernetes_api_server_read_only_port_secure",
      "kubernetes_api_server_read_only_port_unset",
      "kubernetes_api_server_read_only_port_0"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API. Default Value: By default, --read-only-port is set to 10255/TCP.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/  155 | P a g e"
  },
  {
    "id": "2.1.6",
    "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
    "assessment": "Scored",
    "description": "Do not disable timeouts on streaming connections.",
    "rationale": "Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports. Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --streaming-connection-idle-timeout argument is not set to 0.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--streaming-connection-idle-timeout=<appropriate-timeout-value>\" KUBELET_ARGS=\"--streaming-connection-idle-timeout=5m\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Long-lived connections could be interrupted. Default Value: By default, --streaming-connection-idle-timeout is set to 4 hours.  157 | P a g e References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/pull/18552",
    "function_names": [
      "kubernetes_api_server_streaming_connection_idle_timeout_not_zero",
      "kubernetes_api_server_streaming_connection_timeout_enabled",
      "kubernetes_api_server_streaming_connection_timeout_configured",
      "kubernetes_api_server_streaming_connection_timeout_non_zero",
      "kubernetes_api_server_streaming_connection_timeout_valid"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Long-lived connections could be interrupted. Default Value: By default, --streaming-connection-idle-timeout is set to 4 hours.  157 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/pull/18552"
  },
  {
    "id": "2.1.7",
    "title": "Ensure that the --protect-kernel-defaults argument is set to true",
    "assessment": "Scored",
    "description": "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.",
    "rationale": "Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --protect-kernel-defaults argument is set to true.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--protect-kernel-defaults=true\" KUBELET_ARGS=\"--protect-kernel-defaults=true\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: You would have to re-tune kernel parameters to match kubelet parameters. Default Value: By default, --protect-kernel-defaults is not set.   159 | P a g e References: 1. https://kubernetes.io/docs/admin/kubelet/",
    "function_names": [
      "kubernetes_kubelet_protect_kernel_defaults_enabled",
      "kubernetes_kubelet_kernel_defaults_protected",
      "kubernetes_kubelet_kernel_parameters_protected",
      "kubernetes_kubelet_kernel_defaults_preserved",
      "kubernetes_kubelet_kernel_tuned_protection_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You would have to re-tune kernel parameters to match kubelet parameters. Default Value: By default, --protect-kernel-defaults is not set.   159 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/"
  },
  {
    "id": "2.1.8",
    "title": "Ensure that the --make-iptables-util-chains argument is set to true",
    "assessment": "Scored",
    "description": "Allow Kubelet to manage iptables.",
    "rationale": "Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that if the --make-iptables-util-chains argument exists then it is set to true.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and remove the --make-iptables- util-chains argument from the KUBELET_ARGS parameter. Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts. Default Value: By default, --make-iptables-util-chains argument is set to true.   161 | P a g e References: 1. https://kubernetes.io/docs/admin/kubelet/",
    "function_names": [
      "kubernetes_kubelet_iptables_util_chains_enabled",
      "kubernetes_kubelet_iptables_management_enabled",
      "kubernetes_kubelet_iptables_chains_configured",
      "kubernetes_kubelet_iptables_util_chains_set",
      "kubernetes_kubelet_iptables_util_chains_true"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts. Default Value: By default, --make-iptables-util-chains argument is set to true.   161 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/"
  },
  {
    "id": "2.1.9",
    "title": "Ensure that the --keep-terminated-pod-volumes argument is set to false",
    "assessment": "Scored",
    "description": "Unmount volumes from the nodes on pod termination.",
    "rationale": "On pod termination, you should unmount the volumes. Those volumes might have sensitive data that might be exposed if kept mounted on the node without any use. Additionally, such mounted volumes could be modified and later could be mounted on pods. Also, if you retain all mounted volumes for a long time, it might exhaust system resources and you might not be able to mount any more volumes on new pods.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that --keep-terminated-pod-volumes argument exists and is set to false.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--keep-terminated-pod-volumes=false\": KUBELET_ARGS=\"--keep-terminated-pod-volumes=false\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Volumes will not be available for debugging. Default Value: By default, --keep-terminated-pod-volumes argument is set to true.   163 | P a g e References: 1. https://kubernetes.io/docs/admin/kubelet/",
    "function_names": [
      "kubernetes_pod_volumes_unmounted_on_termination",
      "kubernetes_pod_keep_terminated_volumes_disabled",
      "kubernetes_pod_termination_volumes_cleanup_enabled",
      "kubernetes_pod_volumes_auto_unmount_enabled",
      "kubernetes_pod_terminated_volumes_retained_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Volumes will not be available for debugging. Default Value: By default, --keep-terminated-pod-volumes argument is set to true.   163 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/"
  },
  {
    "id": "2.1.10",
    "title": "Ensure that the --hostname-override argument is not set",
    "assessment": "Scored",
    "description": "Do not override node hostnames.",
    "rationale": "Overriding hostnames could potentially break TLS setup between the kubelet and the apiserver. Additionally, with overridden hostnames, it becomes increasingly difficult to associate logs with a particular node and process them for security analytics. Hence, you should setup your kubelet nodes with resolvable FQDNs and avoid overriding the hostnames with IPs.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that --hostname-override argument does not exist.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_HOSTNAME parameter to \"\": KUBELET_HOSTNAME=\"\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: Node hostnames should have resolvable FQDNs. Default Value: By default, --hostname-override argument is not set. References: 1. https://kubernetes.io/docs/admin/kubelet/  165 | P a g e 2. https://github.com/kubernetes/kubernetes/issues/22063",
    "function_names": [
      "kubernetes_node_hostname_override_disabled",
      "kubernetes_node_hostname_default",
      "kubernetes_node_hostname_unchanged",
      "kubernetes_node_hostname_override_not_set",
      "kubernetes_node_hostname_preserved"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Node hostnames should have resolvable FQDNs. Default Value: By default, --hostname-override argument is not set.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/  165 | P a g e 2. https://github.com/kubernetes/kubernetes/issues/22063"
  },
  {
    "id": "2.1.11",
    "title": "Ensure that the --event-qps argument is set to 0",
    "assessment": "Scored",
    "description": "Do not limit event creation.",
    "rationale": "It is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that --event-qps argument exists and is set to 0.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--event-qps=0\": KUBELET_ARGS=\"--event-qps=0\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: You might need to scale up your event storage and processing capabilitles. Default Value: By default, --event-qps argument is set to 5. References: 1. https://kubernetes.io/docs/admin/kubelet/   167 | P a g e",
    "function_names": [
      "cloudtrail_trail_event_qps_unlimited",
      "cloudtrail_event_qps_zero",
      "cloudtrail_trail_event_qps_disabled",
      "cloudtrail_event_qps_no_limit",
      "cloudtrail_trail_event_qps_unrestricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You might need to scale up your event storage and processing capabilitles. Default Value: By default, --event-qps argument is set to 5.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/   167 | P a g e"
  },
  {
    "id": "2.1.12",
    "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
    "assessment": "Scored",
    "description": "Setup TLS connection on the Kubelets.",
    "rationale": "Kubelet communication contains sensitive parameters that should remain encrypted in transit. Configure the Kubelets to serve only HTTPS traffic.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that the --tls-cert-file and --tls-private-key-file arguments exist and they are set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the Kubelet. Then, edit the /etc/kubernetes/kubelet file on the master node and set the KUBELET_ARGS parameter to include \"--tls-cert-file=<path/to/tls-certificate-file>\" and \"--tls- private-key-file=<path/to/tls-key-file>\": KUBELET_ARGS=\"--tls-cert-file=<path/to/tls-certificate-file> --tls-private- key-file=<path/to/tls-key-file>\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.   169 | P a g e Default Value: By default, --tls-cert-file and --tls-private-key-file arguments are not set. If -- tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory passed to --cert-dir. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide",
    "function_names": [
      "kubernetes_kubelet_tls_cert_file_set",
      "kubernetes_kubelet_tls_private_key_file_set",
      "kubernetes_kubelet_tls_configured",
      "kubernetes_kubelet_tls_cert_and_key_valid",
      "kubernetes_kubelet_tls_connection_secure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.   169 | P a g e Default Value: By default, --tls-cert-file and --tls-private-key-file arguments are not set. If -- tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory passed to --cert-dir.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide"
  },
  {
    "id": "2.1.13",
    "title": "Ensure that the --cadvisor-port argument is set to 0",
    "assessment": "Scored",
    "description": "Disable cAdvisor.",
    "rationale": "cAdvisor provides potentially sensitive data and there's currently no way to block access to it using anything other than iptables. It does not require authentication/authorization to connect to the cAdvisor port. Hence, you should disable the port.",
    "audit": "Run the following command on each node: ps -ef | grep kubelet Verify that --cadvisor-port argument exists and is set to 0.",
    "remediation": "Edit the /etc/kubernetes/kubelet file on each node and set the KUBELET_ARGS parameter to \"--cadvisor-port=0\": KUBELET_ARGS=\"--cadvisor-port=0\" Based on your system, restart the kubelet service. For example: systemctl restart kubelet.service Impact: cAdvisor will not be available directly. You need to work with /metrics endpoint on the API server. Default Value: By default, --cadvisor-port argument is set to 4194. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/issues/11710  171 | P a g e 3. https://github.com/kubernetes/kubernetes/issues/32638 4. https://raesene.github.io/blog/2016/10/14/Kubernetes-Attack-Surface-cAdvisor/",
    "function_names": [
      "compute_container_cadvisor_disabled",
      "container_runtime_cadvisor_port_unset",
      "kubernetes_node_cadvisor_deactivated",
      "cadvisor_port_zero_enforced",
      "container_engine_cadvisor_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "cAdvisor will not be available directly. You need to work with /metrics endpoint on the API server. Default Value: By default, --cadvisor-port argument is set to 4194.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/issues/11710  171 | P a g e 3. https://github.com/kubernetes/kubernetes/issues/32638 4. https://raesene.github.io/blog/2016/10/14/Kubernetes-Attack-Surface-cAdvisor/"
  },
  {
    "id": "2.2.1",
    "title": "Ensure that the config file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the config file has permissions of 644 or more restrictive.",
    "rationale": "The config file controls various parameters that set the behavior of various components of the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the each worker node. For example, stat -c %a /etc/kubernetes/config Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/config Impact: None Default Value: By default, config file has permissions of 644.   173 | P a g e References: 1. https://kubernetes.io/docs/admin/kubelet/",
    "function_names": [
      "config_file_permissions_restrictive",
      "config_file_permissions_644_or_stricter",
      "config_file_permissions_not_world_writable",
      "config_file_permissions_secure",
      "config_file_permissions_min_644"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, config file has permissions of 644.   173 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/"
  },
  {
    "id": "2.2.2",
    "title": "Ensure that the config file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the config file ownership is set to root:root.",
    "rationale": "The config file controls various parameters that set the behavior of various components of the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the each worker node. For example, stat -c %U:%G /etc/kubernetes/config Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/config Impact: None Default Value: By default, config file ownership is set to root:root. References: 1. https://kubernetes.io/docs/admin/kubelet/   175 | P a g e",
    "function_names": [
      "config_file_ownership_root_root",
      "config_file_owner_root",
      "config_file_group_root",
      "config_file_root_ownership",
      "config_file_secure_ownership"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, config file ownership is set to root:root.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/   175 | P a g e"
  },
  {
    "id": "2.2.3",
    "title": "Ensure that the kubelet file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the kubelet file has permissions of 644 or more restrictive.",
    "rationale": "The kubelet file controls various parameters that set the behavior of the kubelet service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the each worker node. For example, stat -c %a /etc/kubernetes/kubelet Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/kubelet Impact: None Default Value: By default, kubelet file has permissions of 644. References: 1. https://kubernetes.io/docs/admin/kubelet/   177 | P a g e",
    "function_names": [
      "kubernetes_kubelet_file_permissions_644_or_stricter",
      "kubernetes_kubelet_file_permissions_restrictive",
      "kubernetes_kubelet_config_file_permissions_secure",
      "kubernetes_kubelet_file_permissions_compliant",
      "kubernetes_kubelet_config_file_permissions_644_or_lower"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, kubelet file has permissions of 644.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/   177 | P a g e"
  },
  {
    "id": "2.2.4",
    "title": "Ensure that the kubelet file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the kubelet file ownership is set to root:root.",
    "rationale": "The kubelet file controls various parameters that set the behavior of the kubelet service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the each worker node. For example, stat -c %U:%G /etc/kubernetes/kubelet Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/kubelet Impact: None Default Value: By default, kubelet file ownership is set to root:root. References: 1. https://kubernetes.io/docs/admin/kubelet/   179 | P a g e",
    "function_names": [
      "kubernetes_kubelet_file_ownership_root_root",
      "kubernetes_kubelet_file_permissions_root_only",
      "kubernetes_kubelet_config_secure_ownership",
      "kubernetes_kubelet_privileged_file_ownership",
      "kubernetes_kubelet_sensitive_file_root_owned"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, kubelet file ownership is set to root:root.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/   179 | P a g e"
  },
  {
    "id": "2.2.5",
    "title": "Ensure that the proxy file permissions are set to 644 or more restrictive",
    "assessment": "Scored",
    "description": "Ensure that the proxy file has permissions of 644 or more restrictive.",
    "rationale": "The proxy file controls various parameters that set the behavior of the kube-proxy service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.",
    "audit": "Run the below command (based on the file location on your system) on the each worker node. For example, stat -c %a /etc/kubernetes/proxy Verify that the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 /etc/kubernetes/proxy Impact: None Default Value: By default, proxy file has permissions of 644. References: 1. https://kubernetes.io/docs/admin/kube-proxy/   181 | P a g e",
    "function_names": [
      "compute_proxy_file_permissions_restrictive",
      "compute_proxy_file_permissions_644_or_stricter",
      "compute_proxy_file_permissions_secure",
      "compute_proxy_file_permissions_compliant",
      "compute_proxy_file_permissions_cis_benchmark"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, proxy file has permissions of 644.",
    "references": "1. https://kubernetes.io/docs/admin/kube-proxy/   181 | P a g e"
  },
  {
    "id": "2.2.6",
    "title": "Ensure that the proxy file ownership is set to root:root",
    "assessment": "Scored",
    "description": "Ensure that the proxy file ownership is set to root:root.",
    "rationale": "The proxy file controls various parameters that set the behavior of the kube-proxy service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.",
    "audit": "Run the below command (based on the file location on your system) on the each worker node. For example, stat -c %U:%G /etc/kubernetes/proxy Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chown root:root /etc/kubernetes/proxy Impact: None Default Value: By default, proxy file ownership is set to root:root. References: 1. https://kubernetes.io/docs/admin/kube-proxy/   183 | P a g e",
    "function_names": [
      "proxy_file_root_ownership",
      "proxy_file_root_group_ownership",
      "proxy_file_ownership_root_root",
      "proxy_file_secure_ownership",
      "proxy_file_root_user_ownership",
      "proxy_file_root_group_ownership_set",
      "proxy_file_ownership_restricted_to_root"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, proxy file ownership is set to root:root.",
    "references": "1. https://kubernetes.io/docs/admin/kube-proxy/   183 | P a g e"
  },
  {
    "id": "3.1.1",
    "title": "Ensure that the --anonymous-auth argument is set to false",
    "assessment": "Scored",
    "description": "Disable anonymous requests to the federation API server.",
    "rationale": "When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the federation API server. You should rely on authentication to authorize access and disallow anonymous requests.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --anonymous-auth argument is set to false.",
    "remediation": "Edit the deployment specs and set --anonymous-auth=false. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: Anonymous requests will be rejected.   185 | P a g e Default Value: By default, anonymous access is enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_anonymous_auth_disabled",
      "federation_api_anonymous_auth_disabled",
      "api_server_anonymous_auth_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Anonymous requests will be rejected.   185 | P a g e Default Value: By default, anonymous access is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.2",
    "title": "Ensure that the --basic-auth-file argument is not set",
    "assessment": "Scored",
    "description": "Do not use basic authentication.",
    "rationale": "Basic authentication uses plaintext credentials for authentication. Currently, the basic authentication credentials last indefinitely, and the password cannot be changed without restarting the federation API server. The basic authentication is currently supported for convenience. Hence, basic authentication should not be used.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --basic-auth-file argument does not exist.",
    "remediation": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove \"--basic-auth-file=<filename>\". kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: You will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used. Default Value: By default, basic authentication is not set. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml  187 | P a g e 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_basic_auth_disabled",
      "kubernetes_api_server_no_basic_auth_file",
      "kubernetes_api_server_auth_file_unset",
      "kubernetes_api_server_basic_auth_file_removed",
      "kubernetes_api_server_auth_file_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will have to configure and use alternate authentication mechanisms such as tokens and certificates. Username and password for basic authentication could no more be used. Default Value: By default, basic authentication is not set.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml  187 | P a g e 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.3",
    "title": "Ensure that the --insecure-allow-any-token argument is not set",
    "assessment": "Scored",
    "description": "Do not allow any insecure tokens.",
    "rationale": "Accepting insecure tokens would allow any token without actually authenticating anything. User information is parsed from the token and connections are allowed.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --insecure-allow-any-token argument does not exist.",
    "remediation": "Edit the deployment specs and remove --insecure-allow-any-token. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, insecure tokens are not allowed. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/   189 | P a g e",
    "function_names": [
      "kubernetes_api_server_insecure_allow_any_token_disabled",
      "kubernetes_api_server_token_authentication_restricted",
      "kubernetes_api_server_secure_token_validation_enabled",
      "kubernetes_api_server_insecure_token_argument_absent",
      "kubernetes_api_server_token_authentication_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, insecure tokens are not allowed.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/   189 | P a g e"
  },
  {
    "id": "3.1.4",
    "title": "Ensure that the --insecure-bind-address argument is not set",
    "assessment": "Scored",
    "description": "Do not bind to insecure addresses.",
    "rationale": "If you bind the federation apiserver to an insecure address, basically anyone who could connect to it over the insecure port, would have unauthenticated and unencrypted access to it. The federation apiserver doesn't do any authentication checking for insecure binds and neither the insecure traffic is encrypted. Hence, you should not bind the federation apiserver to an insecure address.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --insecure-bind-address argument does not exist or is set to 127.0.0.1.",
    "remediation": "Edit the deployment specs and remove --insecure-bind-address. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, insecure bind address is set to 127.0.0.1. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/  191 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_insecure_bind_address_disabled",
      "kubernetes_api_server_bind_address_secure",
      "kubernetes_api_server_insecure_config_removed",
      "kubernetes_api_server_secure_bind_address_enabled",
      "kubernetes_api_server_insecure_argument_unset"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, insecure bind address is set to 127.0.0.1.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/  191 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.5",
    "title": "Ensure that the --insecure-port argument is set to 0",
    "assessment": "Scored",
    "description": "Do not bind to insecure port.",
    "rationale": "Setting up the federation apiserver to serve on an insecure port would allow unauthenticated and unencrypted access to it. It is assumed that firewall rules are set up such that this port is not reachable from outside of the cluster. But, as a defense in depth measure, you should not use an insecure port.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --insecure-port argument is set to 0.",
    "remediation": "Edit the deployment specs and set --insecure-port=0. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, the insecure port is set to 8080. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  193 | P a g e",
    "function_names": [
      "kubernetes_api_server_insecure_port_disabled",
      "kubernetes_api_server_insecure_port_zero",
      "kubernetes_api_server_secure_port_only",
      "kubernetes_api_server_insecure_port_unset",
      "kubernetes_api_server_port_security_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, the insecure port is set to 8080.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  193 | P a g e"
  },
  {
    "id": "3.1.6",
    "title": "Ensure that the --secure-port argument is not set to 0",
    "assessment": "Scored",
    "description": "Do not disable the secure port.",
    "rationale": "The secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --secure-port argument is either not set or is set to an integer value between 1 and 65535.",
    "remediation": "Edit the deployment specs and set the --secure-port argument to the desired port. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: You need to set the federation apiserver up with the right TLS certificates. Default Value: By default, port 6443 is used as the secure port. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/   195 | P a g e",
    "function_names": [
      "kubernetes_api_server_secure_port_not_disabled",
      "kubernetes_api_server_secure_port_enabled",
      "kubernetes_api_server_secure_port_valid",
      "kubernetes_api_server_secure_port_non_zero",
      "kubernetes_api_server_secure_port_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You need to set the federation apiserver up with the right TLS certificates. Default Value: By default, port 6443 is used as the secure port.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/   195 | P a g e"
  },
  {
    "id": "3.1.7",
    "title": "Ensure that the --profiling argument is set to false",
    "assessment": "Scored",
    "description": "Disable profiling, if not needed.",
    "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --profiling argument is set to false.",
    "remediation": "Edit the deployment specs and set \"--profiling=false\": kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: Profiling information would not be available. Default Value: By default, profiling is enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  197 | P a g e",
    "function_names": [
      "eks_cluster_profiling_disabled",
      "kubernetes_cluster_profiling_disabled",
      "container_service_profiling_disabled",
      "k8s_cluster_profiling_disabled",
      "managed_kubernetes_profiling_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Profiling information would not be available. Default Value: By default, profiling is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  197 | P a g e"
  },
  {
    "id": "3.1.8",
    "title": "Ensure that the admission control policy is not set to AlwaysAdmit",
    "assessment": "Scored",
    "description": "Do not allow all requests.",
    "rationale": "Setting admission control policy to AlwaysAdmit allows all requests and do not filter any requests.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --admission-control argument is set to a value that does not include AlwaysAdmit.",
    "remediation": "Edit the deployment specs and set --admission-control argument to a value that does not include AlwaysAdmit. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: Only requests explicitly allowed by the admissions control policy would be served. Default Value: By default, AlwaysAdmit is used if no --admission-control flag is provided. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml  199 | P a g e 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_admission_policy_not_always_admit",
      "kubernetes_admission_controller_restrictive_policy",
      "admission_control_policy_deny_all_requests",
      "kubernetes_admission_policy_secure_defaults",
      "admission_controller_policy_restrictive_settings"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Only requests explicitly allowed by the admissions control policy would be served. Default Value: By default, AlwaysAdmit is used if no --admission-control flag is provided.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml  199 | P a g e 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.9",
    "title": "Ensure that the admission control policy is set to NamespaceLifecycle",
    "assessment": "Scored",
    "description": "Reject creating objects in a namespace that is undergoing termination.",
    "rationale": "Setting admission control policy to NamespaceLifecycle ensures that the namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --admission-control argument is set to a value that includes NamespaceLifecycle.",
    "remediation": "Edit the deployment specs and set --admission-control argument to a value that includes NamespaceLifecycle. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, NamespaceLifecycle is set. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/  201 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_namespace_admission_control_policy_namespace_lifecycle",
      "kubernetes_namespace_termination_protection_enabled",
      "kubernetes_admission_policy_namespace_lifecycle_enforced",
      "kubernetes_namespace_lifecycle_admission_control_enabled",
      "kubernetes_admission_control_namespace_termination_protected"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, NamespaceLifecycle is set.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/  201 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.10",
    "title": "Ensure that the --audit-log-path argument is set as appropriate",
    "assessment": "Scored",
    "description": "Enable auditing on kubernetes federation apiserver and set the desired audit log path as appropriate.",
    "rationale": "Auditing Kubernetes federation apiserver provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --audit-log-path argument is set as appropriate.",
    "remediation": "Edit the deployment specs and set --audit-log-path argument as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, auditing is not enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/  203 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_apiserver_audit_log_path_set",
      "kubernetes_apiserver_audit_logging_enabled",
      "kubernetes_apiserver_audit_log_path_configured",
      "kubernetes_federation_audit_log_path_set",
      "kubernetes_federation_audit_logging_enabled",
      "kubernetes_federation_audit_log_path_configured",
      "kubernetes_audit_log_path_valid",
      "kubernetes_audit_logging_active"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/  203 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.11",
    "title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
    "assessment": "Scored",
    "description": "Retain the logs for at least 30 days or as appropriate.",
    "rationale": "Retaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --audit-log-maxage argument is set to 30 or as appropriate.",
    "remediation": "Edit the deployment specs and set --audit-log-maxage to 30 or as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, auditing is not enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  205 | P a g e",
    "function_names": [
      "kubernetes_api_server_audit_log_maxage_set",
      "kubernetes_api_server_audit_log_retention_30d",
      "kubernetes_audit_log_maxage_configured",
      "kubernetes_audit_log_retention_min_30d",
      "kubernetes_api_server_audit_log_retention_valid",
      "kubernetes_audit_log_maxage_compliant",
      "kubernetes_audit_log_retention_appropriate",
      "kubernetes_api_server_audit_log_maxage_30d"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  205 | P a g e"
  },
  {
    "id": "3.1.12",
    "title": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
    "assessment": "Scored",
    "description": "Retain 10 or an appropriate number of old log files.",
    "rationale": "Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --audit-log-maxbackup argument is set to 10 or as appropriate.",
    "remediation": "Edit the deployment specs and set --audit-log-maxbackup to 10 or as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, auditing is not enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver  207 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_audit_log_maxbackup_set",
      "kubernetes_api_server_audit_log_maxbackup_10_or_appropriate",
      "kubernetes_audit_log_retention_configured",
      "kubernetes_audit_log_maxbackup_valid",
      "kubernetes_api_server_log_retention_compliant"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver  207 | P a g e 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.13",
    "title": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
    "assessment": "Scored",
    "description": "Rotate log files on reaching 100 MB or as appropriate.",
    "rationale": "Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --audit-log-maxsize argument is set to 100 or as appropriate.",
    "remediation": "Edit the deployment specs and set --audit-log-maxsize=100 to 100 or as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, auditing is not enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  209 | P a g e",
    "function_names": [
      "kubernetes_api_server_audit_log_maxsize_set",
      "kubernetes_api_server_audit_log_maxsize_100mb",
      "kubernetes_api_server_audit_log_rotation_enabled",
      "kubernetes_api_server_audit_log_size_limited",
      "kubernetes_api_server_audit_log_maxsize_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, auditing is not enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/  209 | P a g e"
  },
  {
    "id": "3.1.14",
    "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
    "assessment": "Scored",
    "description": "Do not always authorize all requests.",
    "rationale": "The federation apiserver, by default, allows all requests. You should restrict this behavior to only allow the authorization modes that you explicitly use in your environment. For example, if you don't use REST APIs in your environment, it is a good security best practice to switch-off that capability.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --authorization-mode argument exists and is not set to AlwaysAllow.",
    "remediation": "Edit the deployment specs and set --authorization-mode argument to a value other than AlwaysAllow kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: Only authorized requests will be served. Default Value: By default, AlwaysAllow is enabled. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml  211 | P a g e 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_authorization_mode_not_always_allow",
      "kubernetes_api_server_authorization_mode_restricted",
      "kubernetes_api_server_secure_authorization_mode",
      "kubernetes_api_server_no_always_allow_auth",
      "kubernetes_api_server_auth_mode_compliant"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Only authorized requests will be served. Default Value: By default, AlwaysAllow is enabled.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml  211 | P a g e 3. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.15",
    "title": "Ensure that the --token-auth-file parameter is not set",
    "assessment": "Scored",
    "description": "Do not use token based authentication.",
    "rationale": "The token-based authentication utilizes static tokens to authenticate requests to the federation apiserver. The tokens are stored in clear-text in a file on the federation apiserver, and cannot be revoked or rotated without restarting the federation apiserver. Hence, do not use static token-based authentication.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --token-auth-file argument does not exist.",
    "remediation": "Follow the documentation and configure alternate mechanisms for authentication. Then, edit the deployment specs and remove the --token-auth-file=<filename> argument. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used. Default Value: By default, --token-auth-file argument is not set. References: 1. https://kubernetes.io/docs/admin/authentication/#static-token-file 2. https://kubernetes.io/docs/admin/federation-apiserver/  213 | P a g e 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 4. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_token_auth_disabled",
      "kubernetes_api_server_no_token_auth_file",
      "kubernetes_api_server_token_auth_file_unset",
      "kubernetes_api_server_token_auth_not_configured",
      "kubernetes_api_server_token_auth_file_absent"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used. Default Value: By default, --token-auth-file argument is not set.",
    "references": "1. https://kubernetes.io/docs/admin/authentication/#static-token-file 2. https://kubernetes.io/docs/admin/federation-apiserver/  213 | P a g e 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 4. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.16",
    "title": "Ensure that the --service-account-lookup argument is set to true",
    "assessment": "Scored",
    "description": "Validate service account before validating token.",
    "rationale": "By default, the apiserver only verifies that the authentication token is valid. However, it does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --service-account-lookup argument exists and is set to true.",
    "remediation": "Edit the deployment specs and set \"--service-account-lookup=true\". kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: None Default Value: By default, --service-account-lookup argument is set to false. References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/24167 3. https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use  215 | P a g e 4. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 5. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_service_account_lookup_enabled",
      "kubernetes_api_server_service_account_validation_enabled",
      "kubernetes_api_server_service_account_pre_authentication_enabled",
      "kubernetes_api_server_service_account_lookup_required",
      "kubernetes_api_server_service_account_validation_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None Default Value: By default, --service-account-lookup argument is set to false.",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://github.com/kubernetes/kubernetes/issues/24167 3. https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use  215 | P a g e 4. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 5. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.17",
    "title": "Ensure that the --service-account-key-file argument is set as appropriate",
    "assessment": "Scored",
    "description": "Explicitly set a service account public key file for service accounts on the federation apiserver.",
    "rationale": "By default, if no --service-account-key-file is specified to the federation apiserver, it uses the private key from the TLS serving certificate to verify the account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with --service-account-key-file.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --service-account-key-file argument exists and is set as appropriate.",
    "remediation": "Edit the deployment specs and set --service-account-key-file argument as appropriate. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy. Default Value: By default, --service-account-key-file argument is not set, and the private key from the TLS serving certificate is used.  217 | P a g e References: 1. https://kubernetes.io/docs/admin/federation-apiserver 2. https://github.com/kubernetes/kubernetes/issues/24167 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 4. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "federation_apiserver_service_account_key_file_set",
      "federation_apiserver_service_account_key_file_configured",
      "federation_apiserver_service_account_key_file_valid",
      "federation_apiserver_service_account_key_file_secure",
      "federation_apiserver_service_account_key_file_protected"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy. Default Value: By default, --service-account-key-file argument is not set, and the private key from the TLS serving certificate is used.  217 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver 2. https://github.com/kubernetes/kubernetes/issues/24167 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 4. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.18",
    "title": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate",
    "assessment": "Scored",
    "description": "etcd should be configured to make use of TLS encryption for client connections.",
    "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the federation API server to identify itself to the etcd server using a client certificate and key.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --etcd-certfile and --etcd-keyfile arguments exist and they are set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the federation apiserver and etcd. Then, edit the deployment specs and set \"--etcd- certfile=<path/to/client-certificate-file>\" and \"--etcd- keyfile=<path/to/client-key-file>\" arguments. kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: TLS and client certificate authentication must be configured for etcd. Default Value: By default, --etcd-certfile and --etcd-keyfile arguments are not set   219 | P a g e References: 1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://coreos.com/etcd/docs/latest/op-guide/security.html 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 4. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_etcd_tls_encryption_enabled",
      "kubernetes_etcd_certfile_configured",
      "kubernetes_etcd_keyfile_configured",
      "kubernetes_etcd_client_tls_enabled",
      "kubernetes_etcd_secure_client_connections"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for etcd. Default Value: By default, --etcd-certfile and --etcd-keyfile arguments are not set   219 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver/ 2. https://coreos.com/etcd/docs/latest/op-guide/security.html 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 4. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.1.19",
    "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
    "assessment": "Scored",
    "description": "Setup TLS connection on the federation API server.",
    "rationale": "Federation API server communication contains sensitive parameters that should remain encrypted in transit. Configure the federation API server to serve only HTTPS traffic.",
    "audit": "Run the following command: ps -ef | grep federation-apiserver Verify that the --tls-cert-file and --tls-private-key-file arguments exist and they are set as appropriate.",
    "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the federation apiserver. Then, edit the deployment specs and set \"--tls-cert-file=<path/to/tls- certificate-file>\" and \"--tls-private-key-file=<path/to/tls-key-file>\": kubectl edit deployments federation-apiserver-deployment -- namespace=federation-system Impact: TLS and client certificate authentication must be configured for your Kubernetes cluster deployment. Default Value: By default, --tls-cert-file and --tls-private-key-file arguments are not set. If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.  221 | P a g e References: 1. https://kubernetes.io/docs/admin/federation-apiserver 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide 4. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 5. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/",
    "function_names": [
      "kubernetes_api_server_tls_cert_file_set",
      "kubernetes_api_server_tls_private_key_file_set",
      "kubernetes_api_server_tls_cert_file_valid",
      "kubernetes_api_server_tls_private_key_file_valid",
      "kubernetes_api_server_tls_cert_file_secure",
      "kubernetes_api_server_tls_private_key_file_secure",
      "kubernetes_api_server_tls_cert_file_configured",
      "kubernetes_api_server_tls_private_key_file_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "TLS and client certificate authentication must be configured for your Kubernetes cluster deployment. Default Value: By default, --tls-cert-file and --tls-private-key-file arguments are not set. If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.  221 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/federation-apiserver 2. http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/ 3. https://github.com/kelseyhightower/docker-kubernetes-tls-guide 4. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-apiserver-deployment.yaml 5. https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"
  },
  {
    "id": "3.2.1",
    "title": "Ensure that the --profiling argument is set to false",
    "assessment": "Scored",
    "description": "Disable profiling, if not needed.",
    "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.",
    "audit": "Run the following command: ps -ef | grep federation-controller-manager Verify that the --profiling argument is set to false.",
    "remediation": "Edit the deployment specs and set \"--profiling=false\": kubectl edit deployments federation-controller-manager-deployment -- namespace=federation-system Impact: Profiling information would not be available. Default Value: By default, profiling is enabled.   223 | P a g e References: 1. https://kubernetes.io/docs/admin/federation-controller-manager/ 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-controller-manager-deployment.yaml",
    "function_names": [
      "eks_cluster_profiling_disabled",
      "kubernetes_cluster_profiling_disabled",
      "container_service_profiling_disabled",
      "k8s_cluster_profiling_disabled",
      "managed_kubernetes_profiling_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Profiling information would not be available. Default Value: By default, profiling is enabled.   223 | P a g e",
    "references": "1. https://kubernetes.io/docs/admin/federation-controller-manager/ 2. https://github.com/kubernetes/community/blob/master/contributors/devel/profi ling.md 3. https://github.com/kubernetes/kubernetes/blob/master/federation/manifests/fe deration-controller-manager-deployment.yaml"
  }
]