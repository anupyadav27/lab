{
  "metadata": {
    "generated_at": "2025-08-17T04:57:05.549719",
    "compliance_framework": "CIS_KUBERNETES_1.6_BENCHMARK_V1.0.0_ARCHIVE.json",
    "kubernetes_database_functions": 178,
    "processing_stats": {
      "total_items": 106,
      "processed": 106,
      "skipped_manual": 0,
      "mapped_complete": 73,
      "mapped_partial": 7,
      "mapped_none": 26,
      "new_functions_suggested": 35
    }
  },
  "mapping_results": [
    {
      "compliance_id": "1.1.1",
      "title": "Ensure that the --allow-privileged argument is set to false",
      "existing_functions_mapped": [
        "core_minimize_privileged_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_privileged_containers' checks for the minimization of privileged containers, which aligns with the compliance requirement of ensuring that the --allow-privileged argument is set to false."
    },
    {
      "compliance_id": "1.1.2",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "apiserver_anonymous_requests",
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_anonymous_requests' and 'kubelet_disable_anonymous_auth' cover the requirement of disabling anonymous requests to the API server."
    },
    {
      "compliance_id": "1.1.3",
      "title": "Ensure that the --basic-auth-file argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_no_basic_auth_file",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'basic-auth-file'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --basic-auth-file argument is not set in the apiserver, as basic authentication is not recommended."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the requirement of ensuring that the --basic-auth-file argument is not set. Therefore, a new function 'apiserver_no_basic_auth_file' is suggested."
    },
    {
      "compliance_id": "1.1.4",
      "title": "Ensure that the --insecure-allow-any-token argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_insecure_allow_any_token_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}' | grep 'kube-apiserver' | grep '--insecure-allow-any-token'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --insecure-allow-any-token argument is not set in the apiserver, as it would allow any token, including insecure ones, to be accepted by the apiserver."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if the --insecure-allow-any-token argument is set in the apiserver."
    },
    {
      "compliance_id": "1.1.5",
      "title": "Ensure that the --kubelet-https argument is set to true",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubelet_https_argument_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
          "service": "kubelet",
          "rationale": "This function is needed to ensure that the --kubelet-https argument is set to true, which is a requirement for secure communication with the kubelet."
        }
      ],
      "mapping_notes": "No existing functions in the database directly check for the --kubelet-https argument. A new function 'kubelet_https_argument_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.1.6",
      "title": "Ensure that the --insecure-bind-address argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_insecure_bind_address_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver'",
          "service": "apiserver",
          "rationale": "This function is needed to check if the --insecure-bind-address argument is set in the kube-apiserver command. If it is set, it means that the API server is binding to a non-loopback insecure address, which is a security risk."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the kube-apiserver command for the --insecure-bind-address argument."
    },
    {
      "compliance_id": "1.1.7",
      "title": "Ensure that the --insecure-port argument is set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_insecure_port_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --insecure-port argument is set to 0, which is a requirement for compliance item 1.1.7. This will prevent the API server from binding to an insecure port."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_insecure_port_check' is suggested to check the --insecure-port argument of the API server."
    },
    {
      "compliance_id": "1.1.8",
      "title": "Ensure that the --secure-port argument is not set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_secure_port_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --secure-port argument is not set to 0, which would disable the secure port."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_secure_port_check' is suggested to check the --secure-port argument of the apiserver."
    },
    {
      "compliance_id": "1.1.9",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_profiling' directly addresses the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.1.10",
      "title": "Ensure that the --repair-malformed-updates argument is set to false",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_repair_malformed_updates_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'apiserver' | grep '--repair-malformed-updates=false'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --repair-malformed-updates argument is set to false in the apiserver configuration, as per compliance requirement 1.1.10"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the --repair-malformed-updates argument in the apiserver configuration."
    },
    {
      "compliance_id": "1.1.11",
      "title": "Ensure that the admission control policy is not set to AlwaysAdmit",
      "existing_functions_mapped": [
        "apiserver_no_always_admit_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_always_admit_plugin' directly addresses the compliance requirement of ensuring that the admission control policy is not set to AlwaysAdmit."
    },
    {
      "compliance_id": "1.1.12",
      "title": "Ensure that the admission control policy is set to AlwaysPullImages",
      "existing_functions_mapped": [
        "apiserver_always_pull_images_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_always_pull_images_plugin' directly addresses the compliance requirement of setting the admission control policy to AlwaysPullImages."
    },
    {
      "compliance_id": "1.1.13",
      "title": "Ensure that the admission control policy is set to DenyEscalatingExec",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_deny_escalating_exec_admission_control",
          "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].securityContext.privileged}{\"\\n\"}{end}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the admission control policy is set to DenyEscalatingExec, which denies execution of exec and attach commands in privileged pods."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of setting the admission control policy to DenyEscalatingExec. A new function is proposed to fill this gap."
    },
    {
      "compliance_id": "1.1.14",
      "title": "Ensure that the admission control policy is set to SecurityContextDeny",
      "existing_functions_mapped": [
        "apiserver_security_context_deny_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_security_context_deny_plugin' directly addresses the compliance requirement of setting the admission control policy to SecurityContextDeny."
    },
    {
      "compliance_id": "1.1.15",
      "title": "Ensure that the admission control policy is set to NamespaceLifecycle",
      "existing_functions_mapped": [
        "apiserver_namespace_lifecycle_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_namespace_lifecycle_plugin' directly addresses the compliance requirement of setting the admission control policy to NamespaceLifecycle, hence no new functions are needed."
    },
    {
      "compliance_id": "1.1.16",
      "title": "Ensure that the --audit-log-path argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_path_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_audit_log_path_set' directly addresses the compliance requirement of setting the --audit-log-path argument appropriately."
    },
    {
      "compliance_id": "1.1.17",
      "title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxage_set",
        "apiserver_audit_log_maxage_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxage_set' and 'apiserver_audit_log_maxage_value_check' collectively ensure that the --audit-log-maxage argument is set and validate its value, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "1.1.18",
      "title": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxbackup_set",
        "apiserver_audit_log_maxbackup_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxbackup_set' and 'apiserver_audit_log_maxbackup_value_check' provide complete coverage for this compliance requirement. The first function checks if the --audit-log-maxbackup argument is set, and the second function checks if the value of this argument is set to 10 or an appropriate number."
    },
    {
      "compliance_id": "1.1.19",
      "title": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxsize_set",
        "apiserver_audit_log_maxsize_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxsize_set' and 'apiserver_audit_log_maxsize_value_check' adequately cover the compliance requirement of ensuring the --audit-log-maxsize argument is set to 100 or as appropriate."
    },
    {
      "compliance_id": "1.1.20",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "1.1.21",
      "title": "Ensure that the --token-auth-file parameter is not set",
      "existing_functions_mapped": [
        "apiserver_no_token_auth_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_token_auth_file' directly addresses the compliance requirement of ensuring that the --token-auth-file parameter is not set."
    },
    {
      "compliance_id": "1.1.22",
      "title": "Ensure that the --kubelet-certificate-authority argument is set as appropriate",
      "existing_functions_mapped": [
        "kubelet_certificate_authority_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_certificate_authority_check' directly addresses the compliance requirement of verifying the kubelet's certificate before establishing a connection."
    },
    {
      "compliance_id": "1.1.23",
      "title": "Ensure that the --kubelet-client-certificate and --kubelet-client- key arguments are set as appropriate",
      "existing_functions_mapped": [
        "kubelet_client_certificate_and_key_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_client_certificate_and_key_check' directly addresses the compliance requirement of ensuring that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate."
    },
    {
      "compliance_id": "1.1.24",
      "title": "Ensure that the --service-account-lookup argument is set to true",
      "existing_functions_mapped": [
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_lookup_true' directly addresses the compliance requirement of ensuring that the --service-account-lookup argument is set to true."
    },
    {
      "compliance_id": "1.1.25",
      "title": "Ensure that the admission control policy is set to PodSecurityPolicy",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_admission_control_policy_pod_security_policy_check",
          "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.securityContext}{\"\\n\"}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the admission control policy is set to PodSecurityPolicy, which is a requirement for compliance item 1.1.25."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function is suggested to check if the admission control policy is set to PodSecurityPolicy."
    },
    {
      "compliance_id": "1.1.26",
      "title": "Ensure that the --service-account-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_service_account_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_key_file_set' directly addresses the compliance requirement of setting the --service-account-key-file argument appropriately."
    },
    {
      "compliance_id": "1.1.27",
      "title": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_certfile_and_keyfile_set' directly addresses the compliance requirement of ensuring that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate."
    },
    {
      "compliance_id": "1.1.28",
      "title": "Ensure that the admission control policy is set to ServiceAccount",
      "existing_functions_mapped": [
        "apiserver_service_account_plugin",
        "apiserver_service_account_key_file_set",
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of setting the admission control policy to ServiceAccount. The 'apiserver_service_account_plugin' function ensures that the ServiceAccount admission control plugin is enabled. The 'apiserver_service_account_key_file_set' function checks that the ServiceAccount public key file is set. The 'apiserver_service_account_lookup_true' function ensures that ServiceAccount tokens are tied to the corresponding ServiceAccount."
    },
    {
      "compliance_id": "1.1.29",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "1.1.30",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_client_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_client_ca_file_set' directly addresses the compliance requirement of ensuring the --client-ca-file argument is set appropriately in the API server."
    },
    {
      "compliance_id": "1.1.31",
      "title": "Ensure that the --etcd-cafile argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_etcd_cafile_set",
        "apiserver_etcd_tls_config"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_etcd_cafile_set' and 'apiserver_etcd_tls_config' ensure that the --etcd-cafile argument is set and that etcd is configured to use TLS encryption for client connections, respectively. Therefore, they provide complete coverage for this compliance item."
    },
    {
      "compliance_id": "1.2.1",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_profiling' directly addresses the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.3.1",
      "title": "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate",
      "existing_functions_mapped": [
        "controllermanager_terminated_pod_gc_threshold_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_terminated_pod_gc_threshold_set' directly checks if the --terminated-pod-gc-threshold argument is set, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "1.3.2",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_profiling' directly addresses the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.3.3",
      "title": "Ensure that the --insecure-experimental-approve-all-kubelet-csrs- for-group argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubelet_insecure_experimental_approve_all_csrs_check",
          "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.taints}{\"\\n\"}'",
          "service": "kubelet",
          "rationale": "This function is needed to ensure that the --insecure-experimental-approve-all-kubelet-csrs- for-group argument is not set, as this could potentially allow unauthorized access to the cluster."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function is proposed to check the kubelet configuration for the insecure experimental approve all csrs argument."
    },
    {
      "compliance_id": "1.3.4",
      "title": "Ensure that the --use-service-account-credentials argument is set to true",
      "existing_functions_mapped": [
        "controllermanager_service_account_credentials"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_service_account_credentials' checks if the --use-service-account-credentials argument is set to true in the controller manager, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "1.3.5",
      "title": "Ensure that the --service-account-private-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "controllermanager_service_account_private_key_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_service_account_private_key_file' directly checks if the --service-account-private-key-file argument is set in the controller manager, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "1.3.6",
      "title": "Ensure that the --root-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_root_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_root_ca_file_set' directly addresses the compliance requirement of ensuring that the --root-ca-file argument is set as appropriate."
    },
    {
      "compliance_id": "1.4.1",
      "title": "Ensure that the apiserver file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_file_permissions_check",
          "kubernetes_api": "kubectl exec -it <pod_name> -- ls -l /etc/kubernetes/apiserver",
          "service": "apiserver",
          "rationale": "This function is needed to check the file permissions of the apiserver file and ensure they are set to 644 or more restrictive."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the requirement of checking the file permissions of the apiserver file. A new function, apiserver_file_permissions_check, is suggested to fill this gap."
    },
    {
      "compliance_id": "1.4.2",
      "title": "Ensure that the apiserver file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_admin_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_admin_conf_file_ownership' directly addresses the requirement of ensuring that the apiserver file ownership is set to root:root."
    },
    {
      "compliance_id": "1.4.3",
      "title": "Ensure that the config file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "admin_conf_file_permissions",
        "apiserver_admin_conf_file_ownership",
        "controllermanager_conf_file_permissions",
        "kubelet_conf_file_permissions",
        "scheduler_conf_file_permissions",
        "super_admin_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of checking the permissions of the config files for various Kubernetes components such as admin, apiserver, controller manager, kubelet, scheduler, and super admin. No new functions are needed as the existing ones provide complete coverage."
    },
    {
      "compliance_id": "1.4.4",
      "title": "Ensure that the config file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_admin_conf_file_ownership",
        "controllermanager_conf_file_ownership",
        "kubelet_conf_file_ownership",
        "scheduler_conf_file_ownership",
        "super_admin_conf_file_ownership"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "general_config_file_ownership_check",
          "kubernetes_api": "ls -l /etc/kubernetes/",
          "service": "core",
          "rationale": "To ensure that all config files, not just those for specific services, are owned by root:root"
        }
      ],
      "mapping_notes": "Existing functions cover the ownership check for specific services' config files. However, a general function is needed to check the ownership of all config files."
    },
    {
      "compliance_id": "1.4.5",
      "title": "Ensure that the scheduler file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "scheduler_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_conf_file_permissions' directly addresses the requirement of ensuring that the scheduler file permissions are set to 644 or more restrictive."
    },
    {
      "compliance_id": "1.4.6",
      "title": "Ensure that the scheduler file ownership is set to root:root",
      "existing_functions_mapped": [
        "scheduler_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_conf_file_ownership' directly addresses the compliance requirement of ensuring that the scheduler file ownership is set to root:root."
    },
    {
      "compliance_id": "1.4.7",
      "title": "Ensure that the etcd.conf file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "etcd_pod_spec_file_permissions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "etcd_conf_file_permissions_check",
          "kubernetes_api": "kubectl exec -it etcd-master -- ls -l /etc/etcd/etcd.conf",
          "service": "etcd",
          "rationale": "To ensure that the etcd.conf file permissions are set to 644 or more restrictive, a specific function is needed that checks the permissions of this file."
        }
      ],
      "mapping_notes": "The existing function 'etcd_pod_spec_file_permissions' partially covers the compliance requirement as it checks the permissions of the etcd pod specification file. However, it does not specifically check the permissions of the etcd.conf file. Therefore, a new function 'etcd_conf_file_permissions_check' is suggested."
    },
    {
      "compliance_id": "1.4.8",
      "title": "Ensure that the etcd.conf file ownership is set to root:root",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "etcd_conf_file_ownership_check",
          "kubernetes_api": "ls -l /etc/etcd/etcd.conf",
          "service": "etcd",
          "rationale": "This function is needed to ensure that the etcd.conf file ownership is set to root:root, which is a requirement for compliance item 1.4.8"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'etcd_conf_file_ownership_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.4.9",
      "title": "Ensure that the flanneld file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "flanneld_file_permissions_check",
          "kubernetes_api": "kubectl exec -it <pod_name> -- ls -l /etc/cni/net.d/10-flannel.conflist",
          "service": "core",
          "rationale": "This function is needed to check the permissions of the flanneld file and ensure they are set to 644 or more restrictive"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'flanneld_file_permissions_check' is suggested to check the permissions of the flanneld file."
    },
    {
      "compliance_id": "1.4.10",
      "title": "Ensure that the flanneld file ownership is set to root:root",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "flanneld_file_ownership_check",
          "kubernetes_api": "ls -l /etc/sysconfig/flanneld",
          "service": "flanneld",
          "rationale": "To ensure that the flanneld file ownership is set to root:root, a new function is needed that checks the ownership of the flanneld file."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function 'flanneld_file_ownership_check' is suggested to check the ownership of the flanneld file."
    },
    {
      "compliance_id": "1.4.11",
      "title": "Ensure that the etcd data directory permissions are set to 700 or more restrictive",
      "existing_functions_mapped": [
        "etcd_data_directory_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_data_directory_permissions_check' directly addresses the compliance requirement of ensuring that the etcd data directory permissions are set to 700 or more restrictive."
    },
    {
      "compliance_id": "1.4.12",
      "title": "Ensure that the etcd data directory ownership is set to etcd:etcd",
      "existing_functions_mapped": [
        "etcd_data_directory_ownership_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_data_directory_ownership_check' directly addresses the compliance requirement of ensuring the etcd data directory ownership is set to etcd:etcd."
    },
    {
      "compliance_id": "1.5.1",
      "title": "Ensure that the --cert-file and --key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_cert_file_and_key_file_set",
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'etcd_cert_file_and_key_file_set' and 'etcd_certfile_and_keyfile_set' directly address the compliance requirement of ensuring that the --cert-file and --key-file arguments are set as appropriate for the etcd service."
    },
    {
      "compliance_id": "1.5.2",
      "title": "Ensure that the --client-cert-auth argument is set to true",
      "existing_functions_mapped": [
        "etcd_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_client_cert_auth' directly addresses the requirement of enabling client authentication on etcd service."
    },
    {
      "compliance_id": "1.5.3",
      "title": "Ensure that the --auto-tls argument is not set to true",
      "existing_functions_mapped": [
        "apiserver_no_auto_tls",
        "etcd_no_auto_tls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_no_auto_tls' and 'etcd_no_auto_tls' adequately cover the compliance requirement of ensuring that the --auto-tls argument is not set to true, thus no new functions are needed."
    },
    {
      "compliance_id": "1.5.4",
      "title": "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_peer_cert_file_set",
        "etcd_peer_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'etcd_peer_cert_file_set' and 'etcd_peer_key_file_set' directly address the compliance requirement of setting the --peer-cert-file and --peer-key-file arguments respectively."
    },
    {
      "compliance_id": "1.5.5",
      "title": "Ensure that the --peer-client-cert-auth argument is set to true",
      "existing_functions_mapped": [
        "etcd_peer_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_peer_client_cert_auth' directly checks if the --peer-client-cert-auth argument is set to true in etcd, which satisfies the compliance requirement completely."
    },
    {
      "compliance_id": "1.5.6",
      "title": "Ensure that the --peer-auto-tls argument is not set to true",
      "existing_functions_mapped": [
        "etcd_no_peer_auto_tls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_no_peer_auto_tls' directly addresses the compliance requirement of ensuring that the --peer-auto-tls argument is not set to true."
    },
    {
      "compliance_id": "1.5.7",
      "title": "Ensure that the --wal-dir argument is set as appropriate",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "etcd_wal_dir_argument_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
          "service": "etcd",
          "rationale": "This function is needed to ensure that the --wal-dir argument is set appropriately for etcd, which helps in storing etcd logs separately from etcd data."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of checking the --wal-dir argument in etcd. Therefore, a new function 'etcd_wal_dir_argument_check' is suggested."
    },
    {
      "compliance_id": "1.5.8",
      "title": "Ensure that the --max-wals argument is set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_max_wals_argument_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --max-wals argument is set to 0 in the apiserver configuration, which is a requirement for compliance item 1.5.8."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function is suggested to check the --max-wals argument in the apiserver configuration."
    },
    {
      "compliance_id": "1.5.9",
      "title": "Ensure that a unique Certificate Authority is used for etcd",
      "existing_functions_mapped": [
        "etcd_unique_ca"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_unique_ca' appears to directly address the requirement of ensuring a unique Certificate Authority for etcd."
    },
    {
      "compliance_id": "1.6.1",
      "title": "Ensure that the cluster-admin role is only used where required",
      "existing_functions_mapped": [
        "rbac_cluster_admin_usage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rbac_cluster_admin_role_assignment_check",
          "kubernetes_api": "kubectl get clusterrolebindings -o json",
          "service": "apiserver",
          "rationale": "To ensure that the cluster-admin role is only assigned to the necessary service accounts or users"
        }
      ],
      "mapping_notes": "The existing function 'rbac_cluster_admin_usage' can be used to check if the cluster-admin role is being used. However, it does not provide a way to ensure that the role is only assigned where required. Therefore, a new function 'rbac_cluster_admin_role_assignment_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.6.2",
      "title": "Create Pod Security Policies for your cluster",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "create_pod_security_policies",
          "kubernetes_api": "kubectl create -f podsecuritypolicy.yaml",
          "service": "apiserver",
          "rationale": "This function is needed to create Pod Security Policies for the cluster"
        },
        {
          "name": "enforce_pod_security_policies",
          "kubernetes_api": "kubectl apply -f podsecuritypolicy.yaml",
          "service": "apiserver",
          "rationale": "This function is needed to enforce the created Pod Security Policies on the cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of creating and enforcing Pod Security Policies for the cluster. Therefore, two new functions are suggested."
    },
    {
      "compliance_id": "1.6.3",
      "title": "Create administrative boundaries between resources using namespaces",
      "existing_functions_mapped": [
        "namespace_boundaries_enforcement_check",
        "namespace_creation_and_usage_check",
        "namespace_isolation_check",
        "namespace_network_policy_enforcement_check",
        "namespace_resource_isolation_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of creating administrative boundaries using namespaces. They ensure that namespaces are created and used correctly, that boundaries are enforced, and that resources are isolated within namespaces."
    },
    {
      "compliance_id": "1.6.4",
      "title": "Create network segmentation using Network Policies",
      "existing_functions_mapped": [
        "namespace_network_policy_enforcement_check",
        "core_namespace_network_policy_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "network_policy_isolation_check",
          "kubernetes_api": "kubectl get networkpolicies --all-namespaces",
          "service": "core",
          "rationale": "To ensure that network policies are properly isolating the cluster network"
        }
      ],
      "mapping_notes": "Existing functions provide checks for network policy enforcement at the namespace level, but a more comprehensive check is needed to ensure network segmentation across the entire cluster."
    },
    {
      "compliance_id": "1.6.5",
      "title": "Avoid using Kubernetes Secrets",
      "existing_functions_mapped": [
        "apiserver_minimize_secrets_access",
        "apiserver_restrict_secrets_access",
        "core_no_secrets_envs",
        "core_no_secrets_in_envs",
        "rbac_limit_secrets_access",
        "rbac_minimize_secret_access"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "core_avoid_secrets_usage",
          "kubernetes_api": "kubectl get secrets --all-namespaces",
          "service": "core",
          "rationale": "To ensure that Kubernetes secrets are not being used across all namespaces"
        },
        {
          "name": "apiserver_restrict_secrets_creation",
          "kubernetes_api": "kubectl auth can-i create secrets",
          "service": "apiserver",
          "rationale": "To ensure that the creation of new secrets is restricted"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage as they restrict and minimize the access to secrets but do not completely avoid the usage of Kubernetes secrets. New functions are suggested to avoid the usage and creation of secrets."
    },
    {
      "compliance_id": "1.6.6",
      "title": "Ensure that the seccomp profile is set to docker/default in your pod definitions",
      "existing_functions_mapped": [
        "core_seccomp_profile_docker_default"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_seccomp_profile_docker_default' directly addresses the requirement of ensuring the seccomp profile is set to docker/default in pod definitions."
    },
    {
      "compliance_id": "1.6.7",
      "title": "Apply Security Context to Your Pods and Containers",
      "existing_functions_mapped": [
        "apply_security_context_to_containers",
        "apply_security_context_to_pods"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apply_security_context_to_containers' and 'apply_security_context_to_pods' directly address the compliance requirement of applying security context to pods and containers."
    },
    {
      "compliance_id": "1.6.8",
      "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
      "existing_functions_mapped": [
        "apiserver_image_policy_webhook_config"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_image_policy_webhook_config' directly addresses the compliance requirement of configuring Image Provenance using ImagePolicyWebhook admission controller."
    },
    {
      "compliance_id": "2.1.1",
      "title": "Ensure that the --allow-privileged argument is set to false",
      "existing_functions_mapped": [
        "core_minimize_privileged_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_privileged_containers' appears to cover the requirement of ensuring that the --allow-privileged argument is set to false, as it seems to be designed to minimize the use of privileged containers in the Kubernetes environment."
    },
    {
      "compliance_id": "2.1.2",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_disable_anonymous_auth' directly addresses the requirement of disabling anonymous requests to the Kubelet server, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "2.1.3",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "2.1.4",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_client_ca_file_set",
        "kubelet_client_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_client_ca_file_set' and 'kubelet_client_ca_file_set' cover the requirement of ensuring the --client-ca-file argument is set as appropriate for both the API server and the Kubelet."
    },
    {
      "compliance_id": "2.1.5",
      "title": "Ensure that the --read-only-port argument is set to 0",
      "existing_functions_mapped": [
        "kubelet_disable_read_only_port"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_disable_read_only_port' directly addresses the compliance requirement of disabling the read-only port."
    },
    {
      "compliance_id": "2.1.6",
      "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
      "existing_functions_mapped": [
        "kubelet_streaming_connection_timeout"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_streaming_connection_timeout' checks the streaming connection idle timeout argument, which directly relates to the compliance requirement."
    },
    {
      "compliance_id": "2.1.7",
      "title": "Ensure that the --protect-kernel-defaults argument is set to true",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubelet_protect_kernel_defaults_check",
          "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.taints}{\"\\n\"}'",
          "service": "kubelet",
          "rationale": "This function is needed to check if the --protect-kernel-defaults argument is set to true in kubelet configuration"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'kubelet_protect_kernel_defaults_check' is suggested to check if the --protect-kernel-defaults argument is set to true in kubelet configuration."
    },
    {
      "compliance_id": "2.1.8",
      "title": "Ensure that the --make-iptables-util-chains argument is set to true",
      "existing_functions_mapped": [
        "kubelet_manage_iptables"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_manage_iptables' appears to cover the requirement of ensuring that the --make-iptables-util-chains argument is set to true."
    },
    {
      "compliance_id": "2.1.9",
      "title": "Ensure that the --keep-terminated-pod-volumes argument is set to false",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "keep_terminated_pod_volumes_check",
          "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.spec.volumes[*].persistentVolumeClaim.claimName}{\"\\n\"}{end}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --keep-terminated-pod-volumes argument is set to false, which is a requirement for compliance item 2.1.9. This will help to unmount volumes from the nodes on pod termination."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement, hence a new function is proposed."
    },
    {
      "compliance_id": "2.1.10",
      "title": "Ensure that the --hostname-override argument is not set",
      "existing_functions_mapped": [
        "kubelet_no_hostname_override"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_no_hostname_override' directly addresses the compliance requirement of ensuring that the --hostname-override argument is not set."
    },
    {
      "compliance_id": "2.1.11",
      "title": "Ensure that the --event-qps argument is set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_event_qps_zero_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --event-qps argument is set to 0, which means that there is no limit on the rate of events that can be created."
        }
      ],
      "mapping_notes": "No existing function in the database matches the compliance requirement of ensuring that the --event-qps argument is set to 0. Therefore, a new function is proposed."
    },
    {
      "compliance_id": "2.1.12",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "2.1.13",
      "title": "Ensure that the --cadvisor-port argument is set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_cadvisor_port_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --cadvisor-port argument is set to 0, disabling cAdvisor as per the compliance requirement."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring that the --cadvisor-port argument is set to 0. A new function, apiserver_cadvisor_port_check, is proposed to fill this gap."
    },
    {
      "compliance_id": "2.2.1",
      "title": "Ensure that the config file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "admin_conf_file_permissions",
        "apiserver_admin_conf_file_ownership",
        "controllermanager_conf_file_permissions",
        "kubelet_conf_file_permissions",
        "scheduler_conf_file_permissions",
        "super_admin_conf_file_permissions"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "config_file_permissions_check",
          "kubernetes_api": "kubectl exec -it pod -- ls -l /path/to/config/file",
          "service": "core",
          "rationale": "To ensure that the config file permissions are set to 644 or more restrictive across all Kubernetes services and components"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage as they check the permissions of config files for specific services like apiserver, controllermanager, kubelet, and scheduler. However, a more generic function is needed to check the permissions of config files across all Kubernetes services and components."
    },
    {
      "compliance_id": "2.2.2",
      "title": "Ensure that the config file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_admin_conf_file_ownership",
        "controllermanager_conf_file_ownership",
        "kubelet_conf_file_ownership",
        "scheduler_conf_file_ownership",
        "super_admin_conf_file_ownership"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "general_config_file_ownership_check",
          "kubernetes_api": "ls -l /etc/kubernetes/",
          "service": "core",
          "rationale": "To ensure that all config files, not just those for specific services, are owned by root:root"
        }
      ],
      "mapping_notes": "Existing functions cover ownership checks for specific services' config files, but a general function is needed to check all config files."
    },
    {
      "compliance_id": "2.2.3",
      "title": "Ensure that the kubelet file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_conf_file_permissions' checks the permissions of the kubelet configuration file, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "2.2.4",
      "title": "Ensure that the kubelet file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_conf_file_ownership",
        "kubelet_service_file_ownership_root"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'kubelet_conf_file_ownership' and 'kubelet_service_file_ownership_root' already ensure that the kubelet file ownership is set to root:root, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "2.2.5",
      "title": "Ensure that the proxy file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "proxy_kubeconfig_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'proxy_kubeconfig_file_permissions' checks the permissions of the proxy file, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "2.2.6",
      "title": "Ensure that the proxy file ownership is set to root:root",
      "existing_functions_mapped": [
        "kube_proxy_kubeconfig_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kube_proxy_kubeconfig_file_ownership' checks the ownership of the kube-proxy configuration file, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "3.1.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "apiserver_anonymous_requests",
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_anonymous_requests' and 'kubelet_disable_anonymous_auth' cover the requirement of disabling anonymous requests to the federation API server."
    },
    {
      "compliance_id": "3.1.2",
      "title": "Ensure that the --basic-auth-file argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_no_basic_auth_file",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver' | grep '--basic-auth-file'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --basic-auth-file argument is not set in the kube-apiserver, as basic authentication is not recommended."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_no_basic_auth_file' is suggested to check if the --basic-auth-file argument is set in the kube-apiserver."
    },
    {
      "compliance_id": "3.1.3",
      "title": "Ensure that the --insecure-allow-any-token argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_insecure_allow_any_token_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}' | grep 'kube-apiserver' | grep '--insecure-allow-any-token'",
          "service": "apiserver",
          "rationale": "This function is needed to check if the --insecure-allow-any-token argument is set in the kube-apiserver, which would allow any token, including insecure ones."
        }
      ],
      "mapping_notes": "No existing functions in the database directly check for the --insecure-allow-any-token argument in the kube-apiserver. A new function is proposed to fill this gap."
    },
    {
      "compliance_id": "3.1.4",
      "title": "Ensure that the --insecure-bind-address argument is not set",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_insecure_bind_address_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver'",
          "service": "apiserver",
          "rationale": "This function is needed to check if the --insecure-bind-address argument is set in the kube-apiserver command, which would indicate a potential security risk."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the --insecure-bind-address argument for the kube-apiserver. A new function is proposed to fill this gap."
    },
    {
      "compliance_id": "3.1.5",
      "title": "Ensure that the --insecure-port argument is set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_insecure_port_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --insecure-port argument is set to 0, which is a requirement for compliance item 3.1.5. This will prevent the API server from binding to an insecure port."
        }
      ],
      "mapping_notes": "No existing functions in the database directly check for the --insecure-port argument in the API server configuration. A new function, apiserver_insecure_port_check, is proposed to fill this gap."
    },
    {
      "compliance_id": "3.1.6",
      "title": "Ensure that the --secure-port argument is not set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apiserver_secure_port_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --secure-port argument is not set to 0, which would disable the secure port."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'apiserver_secure_port_check' is suggested to check the --secure-port argument of the apiserver."
    },
    {
      "compliance_id": "3.1.7",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling",
        "controllermanager_disable_profiling",
        "scheduler_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of disabling profiling for apiserver, controllermanager, and scheduler. No new functions are needed."
    },
    {
      "compliance_id": "3.1.8",
      "title": "Ensure that the admission control policy is not set to AlwaysAdmit",
      "existing_functions_mapped": [
        "apiserver_no_always_admit_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_always_admit_plugin' directly addresses the compliance requirement of ensuring that the admission control policy is not set to AlwaysAdmit."
    },
    {
      "compliance_id": "3.1.9",
      "title": "Ensure that the admission control policy is set to NamespaceLifecycle",
      "existing_functions_mapped": [
        "apiserver_namespace_lifecycle_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_namespace_lifecycle_plugin' directly addresses the compliance requirement of setting the admission control policy to NamespaceLifecycle. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "3.1.10",
      "title": "Ensure that the --audit-log-path argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_path_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_audit_log_path_set' directly addresses the requirement of setting the --audit-log-path argument as appropriate."
    },
    {
      "compliance_id": "3.1.11",
      "title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxage_set",
        "apiserver_audit_log_maxage_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxage_set' and 'apiserver_audit_log_maxage_value_check' collectively ensure that the --audit-log-maxage argument is set and validate its value, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "3.1.12",
      "title": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxbackup_set",
        "apiserver_audit_log_maxbackup_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxbackup_set' and 'apiserver_audit_log_maxbackup_value_check' provide complete coverage for this compliance item as they ensure the --audit-log-maxbackup argument is set and validate its value respectively."
    },
    {
      "compliance_id": "3.1.13",
      "title": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxsize_set",
        "apiserver_audit_log_maxsize_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxsize_set' and 'apiserver_audit_log_maxsize_value_check' provide complete coverage for this compliance item as they ensure the --audit-log-maxsize argument is set and validate its value respectively."
    },
    {
      "compliance_id": "3.1.14",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "3.1.15",
      "title": "Ensure that the --token-auth-file parameter is not set",
      "existing_functions_mapped": [
        "apiserver_no_token_auth_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_token_auth_file' directly addresses the compliance requirement of ensuring that the --token-auth-file parameter is not set in the apiserver."
    },
    {
      "compliance_id": "3.1.16",
      "title": "Ensure that the --service-account-lookup argument is set to true",
      "existing_functions_mapped": [
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_lookup_true' directly addresses the compliance requirement of ensuring the --service-account-lookup argument is set to true."
    },
    {
      "compliance_id": "3.1.17",
      "title": "Ensure that the --service-account-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_service_account_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_key_file_set' directly addresses the compliance requirement of ensuring the --service-account-key-file argument is set appropriately."
    },
    {
      "compliance_id": "3.1.18",
      "title": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_certfile_and_keyfile_set' directly addresses the compliance requirement of ensuring that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate."
    },
    {
      "compliance_id": "3.1.19",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "3.2.1",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_profiling' directly addresses the compliance requirement of ensuring that the --profiling argument is set to false."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "apiserver_no_basic_auth_file",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'basic-auth-file'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --basic-auth-file argument is not set in the apiserver, as basic authentication is not recommended."
    },
    {
      "name": "apiserver_insecure_allow_any_token_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}' | grep 'kube-apiserver' | grep '--insecure-allow-any-token'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --insecure-allow-any-token argument is not set in the apiserver, as it would allow any token, including insecure ones, to be accepted by the apiserver."
    },
    {
      "name": "kubelet_https_argument_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "service": "kubelet",
      "rationale": "This function is needed to ensure that the --kubelet-https argument is set to true, which is a requirement for secure communication with the kubelet."
    },
    {
      "name": "apiserver_insecure_bind_address_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver'",
      "service": "apiserver",
      "rationale": "This function is needed to check if the --insecure-bind-address argument is set in the kube-apiserver command. If it is set, it means that the API server is binding to a non-loopback insecure address, which is a security risk."
    },
    {
      "name": "apiserver_insecure_port_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --insecure-port argument is set to 0, which is a requirement for compliance item 1.1.7. This will prevent the API server from binding to an insecure port."
    },
    {
      "name": "apiserver_secure_port_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --secure-port argument is not set to 0, which would disable the secure port."
    },
    {
      "name": "apiserver_repair_malformed_updates_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'apiserver' | grep '--repair-malformed-updates=false'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --repair-malformed-updates argument is set to false in the apiserver configuration, as per compliance requirement 1.1.10"
    },
    {
      "name": "apiserver_deny_escalating_exec_admission_control",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].securityContext.privileged}{\"\\n\"}{end}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the admission control policy is set to DenyEscalatingExec, which denies execution of exec and attach commands in privileged pods."
    },
    {
      "name": "apiserver_admission_control_policy_pod_security_policy_check",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.securityContext}{\"\\n\"}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the admission control policy is set to PodSecurityPolicy, which is a requirement for compliance item 1.1.25."
    },
    {
      "name": "kubelet_insecure_experimental_approve_all_csrs_check",
      "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.taints}{\"\\n\"}'",
      "service": "kubelet",
      "rationale": "This function is needed to ensure that the --insecure-experimental-approve-all-kubelet-csrs- for-group argument is not set, as this could potentially allow unauthorized access to the cluster."
    },
    {
      "name": "apiserver_file_permissions_check",
      "kubernetes_api": "kubectl exec -it <pod_name> -- ls -l /etc/kubernetes/apiserver",
      "service": "apiserver",
      "rationale": "This function is needed to check the file permissions of the apiserver file and ensure they are set to 644 or more restrictive."
    },
    {
      "name": "general_config_file_ownership_check",
      "kubernetes_api": "ls -l /etc/kubernetes/",
      "service": "core",
      "rationale": "To ensure that all config files, not just those for specific services, are owned by root:root"
    },
    {
      "name": "etcd_conf_file_permissions_check",
      "kubernetes_api": "kubectl exec -it etcd-master -- ls -l /etc/etcd/etcd.conf",
      "service": "etcd",
      "rationale": "To ensure that the etcd.conf file permissions are set to 644 or more restrictive, a specific function is needed that checks the permissions of this file."
    },
    {
      "name": "etcd_conf_file_ownership_check",
      "kubernetes_api": "ls -l /etc/etcd/etcd.conf",
      "service": "etcd",
      "rationale": "This function is needed to ensure that the etcd.conf file ownership is set to root:root, which is a requirement for compliance item 1.4.8"
    },
    {
      "name": "flanneld_file_permissions_check",
      "kubernetes_api": "kubectl exec -it <pod_name> -- ls -l /etc/cni/net.d/10-flannel.conflist",
      "service": "core",
      "rationale": "This function is needed to check the permissions of the flanneld file and ensure they are set to 644 or more restrictive"
    },
    {
      "name": "flanneld_file_ownership_check",
      "kubernetes_api": "ls -l /etc/sysconfig/flanneld",
      "service": "flanneld",
      "rationale": "To ensure that the flanneld file ownership is set to root:root, a new function is needed that checks the ownership of the flanneld file."
    },
    {
      "name": "etcd_wal_dir_argument_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "service": "etcd",
      "rationale": "This function is needed to ensure that the --wal-dir argument is set appropriately for etcd, which helps in storing etcd logs separately from etcd data."
    },
    {
      "name": "apiserver_max_wals_argument_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --max-wals argument is set to 0 in the apiserver configuration, which is a requirement for compliance item 1.5.8."
    },
    {
      "name": "rbac_cluster_admin_role_assignment_check",
      "kubernetes_api": "kubectl get clusterrolebindings -o json",
      "service": "apiserver",
      "rationale": "To ensure that the cluster-admin role is only assigned to the necessary service accounts or users"
    },
    {
      "name": "create_pod_security_policies",
      "kubernetes_api": "kubectl create -f podsecuritypolicy.yaml",
      "service": "apiserver",
      "rationale": "This function is needed to create Pod Security Policies for the cluster"
    },
    {
      "name": "enforce_pod_security_policies",
      "kubernetes_api": "kubectl apply -f podsecuritypolicy.yaml",
      "service": "apiserver",
      "rationale": "This function is needed to enforce the created Pod Security Policies on the cluster"
    },
    {
      "name": "network_policy_isolation_check",
      "kubernetes_api": "kubectl get networkpolicies --all-namespaces",
      "service": "core",
      "rationale": "To ensure that network policies are properly isolating the cluster network"
    },
    {
      "name": "core_avoid_secrets_usage",
      "kubernetes_api": "kubectl get secrets --all-namespaces",
      "service": "core",
      "rationale": "To ensure that Kubernetes secrets are not being used across all namespaces"
    },
    {
      "name": "apiserver_restrict_secrets_creation",
      "kubernetes_api": "kubectl auth can-i create secrets",
      "service": "apiserver",
      "rationale": "To ensure that the creation of new secrets is restricted"
    },
    {
      "name": "kubelet_protect_kernel_defaults_check",
      "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.taints}{\"\\n\"}'",
      "service": "kubelet",
      "rationale": "This function is needed to check if the --protect-kernel-defaults argument is set to true in kubelet configuration"
    },
    {
      "name": "keep_terminated_pod_volumes_check",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.spec.volumes[*].persistentVolumeClaim.claimName}{\"\\n\"}{end}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --keep-terminated-pod-volumes argument is set to false, which is a requirement for compliance item 2.1.9. This will help to unmount volumes from the nodes on pod termination."
    },
    {
      "name": "apiserver_event_qps_zero_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --event-qps argument is set to 0, which means that there is no limit on the rate of events that can be created."
    },
    {
      "name": "apiserver_cadvisor_port_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --cadvisor-port argument is set to 0, disabling cAdvisor as per the compliance requirement."
    },
    {
      "name": "config_file_permissions_check",
      "kubernetes_api": "kubectl exec -it pod -- ls -l /path/to/config/file",
      "service": "core",
      "rationale": "To ensure that the config file permissions are set to 644 or more restrictive across all Kubernetes services and components"
    },
    {
      "name": "general_config_file_ownership_check",
      "kubernetes_api": "ls -l /etc/kubernetes/",
      "service": "core",
      "rationale": "To ensure that all config files, not just those for specific services, are owned by root:root"
    },
    {
      "name": "apiserver_no_basic_auth_file",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver' | grep '--basic-auth-file'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --basic-auth-file argument is not set in the kube-apiserver, as basic authentication is not recommended."
    },
    {
      "name": "apiserver_insecure_allow_any_token_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}' | grep 'kube-apiserver' | grep '--insecure-allow-any-token'",
      "service": "apiserver",
      "rationale": "This function is needed to check if the --insecure-allow-any-token argument is set in the kube-apiserver, which would allow any token, including insecure ones."
    },
    {
      "name": "apiserver_insecure_bind_address_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'kube-apiserver'",
      "service": "apiserver",
      "rationale": "This function is needed to check if the --insecure-bind-address argument is set in the kube-apiserver command, which would indicate a potential security risk."
    },
    {
      "name": "apiserver_insecure_port_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --insecure-port argument is set to 0, which is a requirement for compliance item 3.1.5. This will prevent the API server from binding to an insecure port."
    },
    {
      "name": "apiserver_secure_port_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[?(@.metadata.labels.component==\"kube-apiserver\")].spec.containers[0].command}'",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --secure-port argument is not set to 0, which would disable the secure port."
    }
  ]
}