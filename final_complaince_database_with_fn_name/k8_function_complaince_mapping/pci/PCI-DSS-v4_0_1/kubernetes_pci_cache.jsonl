{"key": "5424304ad4a23d063cd43ac6cafc3ac56cfce0a0b6783652cbfe4871a7e09af7", "value": {"batch_results": [{"compliance_id": "1.1.1", "title": "PCI DSS 1.1.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is focused on policy documentation and dissemination, which cannot be directly implemented or verified using Kubernetes APIs."}, {"compliance_id": "1.1.2", "title": "PCI DSS 1.1.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement involves documentation of roles and responsibilities, which is not something that can be enforced or verified through Kubernetes APIs."}, {"compliance_id": "1.2.1", "title": "PCI DSS 1.2.1", "existing_functions_mapped": ["network_policy_isolation_check", "core_namespace_network_policy_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_nsc_configuration_check", "kubernetes_api": "k8s.api.networking.v1.NetworkPolicy", "service": "networking", "rationale": "To ensure NSC configuration standards are defined, implemented, and maintained, a function to check specific network policy configurations is needed."}], "mapping_notes": "Existing functions can check for network policy isolation but do not cover all aspects of NSC configuration standards."}, {"compliance_id": "1.2.2", "title": "PCI DSS 1.2.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_change_control_approval_check", "kubernetes_api": "k8s.api.networking.v1.NetworkPolicy", "service": "networking", "rationale": "To ensure changes to network configurations are approved and managed, a function to verify change control processes is needed."}], "mapping_notes": "This requirement involves change control processes, which are not directly enforceable via Kubernetes APIs, but a function to verify approval status could be developed."}, {"compliance_id": "1.2.3", "title": "PCI DSS 1.2.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_diagram_maintenance_check", "kubernetes_api": "k8s.api.networking.v1.NetworkPolicy", "service": "networking", "rationale": "To maintain an accurate network diagram, a function to verify network connections and configurations against a documented diagram is needed."}], "mapping_notes": "Maintaining a network diagram is a documentation task, but a function to compare current configurations with a documented diagram could assist in maintaining accuracy."}]}}
{"key": "46d9a6cfd5e7eb56f7357c7d3141877ccae15a8354f9db2cbb74389885033aa2", "value": {"batch_results": [{"compliance_id": "1.2.4", "title": "PCI DSS 1.2.4", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_data_flow_diagram_maintain", "kubernetes_api": "k8s.networking.v1.NetworkPolicy", "service": "k8s_network", "rationale": "To programmatically track and maintain data flow diagrams across Kubernetes network policies."}], "mapping_notes": "Kubernetes does not natively support maintaining data-flow diagrams. A new function is required to track and visualize data flows using network policies."}, {"compliance_id": "1.2.5", "title": "PCI DSS 1.2.5", "existing_functions_mapped": ["kubelet_manage_iptables", "scheduler_bind_address"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_allowed_services_protocols_ports", "kubernetes_api": "k8s.networking.v1.NetworkPolicy", "service": "k8s_network", "rationale": "To enforce and audit allowed services, protocols, and ports within the Kubernetes cluster."}], "mapping_notes": "Existing functions partially cover the requirement by managing network access. A new function is needed to enforce and audit allowed services, protocols, and ports."}, {"compliance_id": "1.2.6", "title": "PCI DSS 1.2.6", "existing_functions_mapped": ["apiserver_disable_profiling", "apiserver_auth_mode_include_node"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_secure_insecure_services", "kubernetes_api": "k8s.networking.v1.NetworkPolicy", "service": "k8s_network", "rationale": "To define and implement security features for insecure services, protocols, and ports."}], "mapping_notes": "Current functions provide partial security features. A new function is needed to specifically address insecure services, protocols, and ports."}, {"compliance_id": "1.2.7", "title": "PCI DSS 1.2.7", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_nsc_configuration_review", "kubernetes_api": "k8s.networking.v1.NetworkPolicy", "service": "k8s_network", "rationale": "To automate the review of NSC configurations to ensure they are relevant and effective."}], "mapping_notes": "No existing functions support periodic review of NSC configurations. A new function is needed to automate this process."}, {"compliance_id": "1.2.8", "title": "PCI DSS 1.2.8", "existing_functions_mapped": ["config_file_permissions_check", "etcd_conf_file_permissions_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_nsc_config_file_security", "kubernetes_api": "k8s.api.core.v1.ConfigMap", "service": "k8s_network", "rationale": "To ensure NSC configuration files are secured from unauthorized access and kept consistent with active configurations."}], "mapping_notes": "Existing functions partially cover securing configuration files. A new function is needed to ensure consistency with active configurations."}]}}
{"key": "cf55876e79e542b895487d6e3754adf2b61339536a6234385992f768a8fa5151", "value": {"batch_results": [{"compliance_id": "1.3.1", "title": "PCI DSS 1.3.1", "existing_functions_mapped": ["k8s_network_policy_enforce"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_policy_deny_all_inbound", "kubernetes_api": "networking.k8s.io/v1.NetworkPolicy", "service": "k8s_network", "rationale": "To ensure all inbound traffic is denied by default unless explicitly allowed."}], "mapping_notes": "Existing network policies can restrict traffic, but a specific deny-all inbound policy is needed to ensure compliance."}, {"compliance_id": "1.3.2", "title": "PCI DSS 1.3.2", "existing_functions_mapped": ["k8s_network_policy_enforce"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_policy_deny_all_outbound", "kubernetes_api": "networking.k8s.io/v1.NetworkPolicy", "service": "k8s_network", "rationale": "To ensure all outbound traffic is denied by default unless explicitly allowed."}], "mapping_notes": "Existing network policies can restrict traffic, but a specific deny-all outbound policy is needed to ensure compliance."}, {"compliance_id": "1.3.3", "title": "PCI DSS 1.3.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_policy_deny_wireless_to_cde", "kubernetes_api": "networking.k8s.io/v1.NetworkPolicy", "service": "k8s_network", "rationale": "To deny all wireless traffic to the CDE by default and only allow authorized traffic."}], "mapping_notes": "No existing functions specifically address wireless traffic restrictions to the CDE."}, {"compliance_id": "1.4.1", "title": "PCI DSS 1.4.1", "existing_functions_mapped": ["k8s_network_policy_enforce"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_policy_trusted_untrusted_boundary", "kubernetes_api": "networking.k8s.io/v1.NetworkPolicy", "service": "k8s_network", "rationale": "To enforce network security controls between trusted and untrusted networks."}], "mapping_notes": "Existing network policies can help, but specific boundary policies are needed for complete compliance."}, {"compliance_id": "1.4.2", "title": "PCI DSS 1.4.2", "existing_functions_mapped": ["k8s_network_policy_enforce"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_network_policy_inbound_restriction", "kubernetes_api": "networking.k8s.io/v1.NetworkPolicy", "service": "k8s_network", "rationale": "To restrict inbound traffic from untrusted networks to only authorized services."}], "mapping_notes": "Existing functions can restrict traffic, but specific policies for inbound restrictions from untrusted networks are required."}]}}
{"key": "b1e0754c787b1a7bc9fb2db1fc2ac8f5fab7423617a13a309e9805c6ecaab40d", "value": {"batch_results": [{"compliance_id": "2.2.5", "title": "PCI DSS 2.2.5", "existing_functions_mapped": ["apiserver_disable_profiling", "apiserver_auth_mode_include_rbac", "apiserver_auth_mode_include_node"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_service_insecure_protocols_detection", "kubernetes_api": "k8s.api.networking.v1.NetworkPolicy()", "service": "k8s_network", "rationale": "Detect and alert on the use of insecure protocols and services within Kubernetes clusters."}], "mapping_notes": "Existing functions provide some security features but do not fully cover the detection and mitigation of insecure services, protocols, or daemons. A new function to detect insecure protocols is suggested."}, {"compliance_id": "2.2.6", "title": "PCI DSS 2.2.6", "existing_functions_mapped": ["apply_security_context_to_pods", "enforce_pod_security_policies", "config_file_permissions_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_pod_security_parameters_enforcement", "kubernetes_api": "k8s.api.core.v1.PodSecurityPolicy()", "service": "k8s_pod", "rationale": "Ensure all pods have security parameters configured to prevent misuse and misconfiguration."}], "mapping_notes": "While existing functions help in securing configurations, they do not fully enforce all security parameters. A new function for enforcing security parameters is needed."}, {"compliance_id": "2.2.7", "title": "PCI DSS 2.2.7", "existing_functions_mapped": ["etcd_tls_encryption", "kubelet_tls_cert_and_key", "apiserver_tls_private_key_file_set"], "coverage_assessment": "complete", "new_functions_needed": [], "mapping_notes": "Existing functions ensure that non-console administrative access is encrypted using strong cryptography, covering the requirement completely."}, {"compliance_id": "2.3.1", "title": "PCI DSS 2.3.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_change_default_wireless_settings", "kubernetes_api": "k8s.api.networking.v1.NetworkPolicy()", "service": "k8s_network", "rationale": "Ensure that all wireless network defaults are changed from vendor settings to secure configurations."}], "mapping_notes": "No existing Kubernetes functions directly address wireless network configurations. A new function is needed to ensure wireless defaults are changed."}, {"compliance_id": "2.3.2", "title": "PCI DSS 2.3.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_network_wireless_key_rotation", "kubernetes_api": "k8s.api.networking.v1.NetworkPolicy()", "service": "k8s_network", "rationale": "Automate the rotation of wireless encryption keys to ensure they are changed when personnel changes occur or when keys are suspected to be compromised."}], "mapping_notes": "No existing Kubernetes functions address wireless key management. A new function to automate key rotation is necessary."}]}}
{"key": "d9229af54a15c597de216575fed68930987f3683e8032a72a62ff4465376c863", "value": {"batch_results": [{"compliance_id": "3.7.1", "title": "PCI DSS 3.7.1", "existing_functions_mapped": ["etcd_tls_encryption"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_secret_generate_strong_keys", "kubernetes_api": "k8s.api.core.v1.Secret.create()", "service": "k8s_secret", "rationale": "To ensure that secrets are generated with strong cryptographic keys."}], "mapping_notes": "Existing etcd_tls_encryption ensures encryption in transit but does not cover key generation. A new function is needed to programmatically generate strong cryptographic keys for secrets."}, {"compliance_id": "3.7.2", "title": "PCI DSS 3.7.2", "existing_functions_mapped": ["rbac_limit_secrets_access"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_secret_secure_distribution", "kubernetes_api": "k8s.api.core.v1.Secret.get()", "service": "k8s_secret", "rationale": "To ensure that cryptographic keys are securely distributed only to authorized entities."}], "mapping_notes": "RBAC can limit access to secrets, but a specific function to ensure secure distribution of keys is needed."}, {"compliance_id": "3.7.3", "title": "PCI DSS 3.7.3", "existing_functions_mapped": ["etcd_tls_encryption"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_secret_secure_storage", "kubernetes_api": "k8s.api.core.v1.Secret.create()", "service": "k8s_secret", "rationale": "To ensure that cryptographic keys are stored securely, potentially using HSM or similar solutions."}], "mapping_notes": "While etcd_tls_encryption provides encryption, secure storage of keys requires additional measures such as HSM integration."}, {"compliance_id": "3.7.4", "title": "PCI DSS 3.7.4", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_secret_key_rotation", "kubernetes_api": "k8s.api.core.v1.Secret.update()", "service": "k8s_secret", "rationale": "To automate the rotation of cryptographic keys based on defined cryptoperiods."}], "mapping_notes": "No existing functions cover key rotation based on cryptoperiods. A new function is needed to handle this requirement."}, {"compliance_id": "3.7.5", "title": "PCI DSS 3.7.5", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_secret_key_retirement", "kubernetes_api": "k8s.api.core.v1.Secret.delete()", "service": "k8s_secret", "rationale": "To manage the retirement, replacement, or destruction of cryptographic keys when necessary."}], "mapping_notes": "No existing functions handle the retirement or destruction of keys. A new function is needed to ensure keys are managed according to their lifecycle."}]}}
{"key": "ee1148122b4cd03e2b3f9e06f6915be4c540b995afef66eb12e0663afce42278", "value": {"batch_results": [{"compliance_id": "3.7.6", "title": "PCI DSS 3.7.6", "existing_functions_mapped": ["etcd_tls_encryption", "apiserver_encryption_provider_config_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_split_knowledge_enforcement", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.create()", "service": "k8s_rbac", "rationale": "To enforce split knowledge by ensuring no single user has access to all key components."}, {"name": "k8s_rbac_dual_control_enforcement", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.create()", "service": "k8s_rbac", "rationale": "To enforce dual control by requiring multiple users to authenticate for key management operations."}], "mapping_notes": "Existing functions ensure encryption but do not enforce split knowledge or dual control."}, {"compliance_id": "3.7.7", "title": "PCI DSS 3.7.7", "existing_functions_mapped": ["etcd_tls_encryption", "apiserver_encryption_provider_config_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_pod_prevent_key_substitution", "kubernetes_api": "k8s.api.core.v1.PodSecurityPolicy.create()", "service": "k8s_pod", "rationale": "To prevent unauthorized substitution of cryptographic keys by controlling access to key management pods."}], "mapping_notes": "Existing functions provide encryption but do not prevent unauthorized key substitution."}, {"compliance_id": "3.7.8", "title": "PCI DSS 3.7.8", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_key_custodian_acknowledgement", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.create()", "service": "k8s_rbac", "rationale": "To ensure key custodians acknowledge their responsibilities electronically through role bindings."}], "mapping_notes": "No existing Kubernetes functions address key custodian acknowledgement."}, {"compliance_id": "3.7.9", "title": "PCI DSS 3.7.9", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_service_key_management_guidance_distribution", "kubernetes_api": "k8s.api.core.v1.ConfigMap.create()", "service": "k8s_service", "rationale": "To distribute key management guidance to customers using ConfigMaps."}], "mapping_notes": "No existing Kubernetes functions provide guidance distribution for key management."}, {"compliance_id": "4.1.1", "title": "PCI DSS 4.1.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement focuses on documentation and procedural aspects, which are outside the scope of programmatic Kubernetes functions."}]}}
{"key": "3b5bc5f3c936594fcfeed4ed937d61d9f8e14f0f8951bd705a9bf0fd231ddb09", "value": {"batch_results": [{"compliance_id": "5.2.3.1", "title": "PCI DSS 5.2.3.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_pod_periodic_evaluation_schedule", "kubernetes_api": "k8s.api.batch.v1.CronJob.create()", "service": "k8s_batch", "rationale": "To programmatically schedule and manage periodic evaluations of system components not at risk for malware."}], "mapping_notes": "No existing Kubernetes function directly supports periodic evaluations based on risk analysis. A new function is needed to manage scheduling of such evaluations."}, {"compliance_id": "5.3.1", "title": "PCI DSS 5.3.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_pod_automatic_update_check", "kubernetes_api": "k8s.api.apps.v1.Deployment.update()", "service": "k8s_apps", "rationale": "To ensure that anti-malware solutions within containers are automatically updated by checking and applying updates programmatically."}], "mapping_notes": "Kubernetes does not inherently manage anti-malware updates. A new function is needed to ensure automatic updates of anti-malware solutions."}, {"compliance_id": "5.3.2", "title": "PCI DSS 5.3.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_pod_malware_scan_schedule", "kubernetes_api": "k8s.api.batch.v1.CronJob.create()", "service": "k8s_batch", "rationale": "To schedule and perform periodic and real-time malware scans within Kubernetes environments."}], "mapping_notes": "Kubernetes lacks built-in malware scanning capabilities. A new function is needed to schedule and perform malware scans."}, {"compliance_id": "5.3.2.1", "title": "PCI DSS 5.3.2.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_pod_scan_frequency_management", "kubernetes_api": "k8s.api.batch.v1.CronJob.update()", "service": "k8s_batch", "rationale": "To manage and adjust the frequency of malware scans based on risk analysis."}], "mapping_notes": "No existing Kubernetes function supports dynamic adjustment of scan frequencies. A new function is needed for managing scan schedules."}, {"compliance_id": "5.3.3", "title": "PCI DSS 5.3.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_pod_removable_media_scan", "kubernetes_api": "k8s.api.core.v1.Event.watch()", "service": "k8s_core", "rationale": "To detect and automatically scan removable media when connected to Kubernetes nodes."}], "mapping_notes": "Kubernetes does not natively handle removable media scanning. A new function is needed to monitor and scan removable media."}]}}
{"key": "b8fcf98f6c197b3f018c8c584ce01d408036e51e978fc3c91b0d286eef4f814a", "value": {"batch_results": [{"compliance_id": "6.5.5", "title": "PCI DSS 6.5.5", "existing_functions_mapped": ["rbac_limit_secrets_access", "apiserver_restrict_secrets_creation"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_pod_verify_no_live_pan", "kubernetes_api": "k8s.api.list_pods()", "service": "k8s_pod", "rationale": "To ensure that no live PANs are present in pre-production environments by scanning for PAN patterns in pod data."}], "mapping_notes": "Existing functions can restrict access to secrets, but do not verify the presence of live PANs. A new function is needed to scan for PAN patterns in pod data."}, {"compliance_id": "6.5.6", "title": "PCI DSS 6.5.6", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management", "rbac_limit_service_account_token_creation"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_pod_remove_test_data", "kubernetes_api": "k8s.api.delete_pod()", "service": "k8s_pod", "rationale": "To programmatically remove test data and accounts from system components before production deployment."}], "mapping_notes": "Existing RBAC functions manage account lifecycle but do not specifically target the removal of test data. A new function is needed to automate the removal of test data."}, {"compliance_id": "7.1.1", "title": "PCI DSS 7.1.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is focused on policy and documentation, which cannot be enforced programmatically using Kubernetes APIs."}, {"compliance_id": "7.1.2", "title": "PCI DSS 7.1.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement involves documentation of roles and responsibilities, which is outside the scope of programmatic enforcement via Kubernetes APIs."}, {"compliance_id": "7.2.1", "title": "PCI DSS 7.2.1", "existing_functions_mapped": ["apiserver_auth_mode_include_rbac", "rbac_limit_secrets_access"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_define_access_control_model", "kubernetes_api": "k8s.api.create_role()", "service": "k8s_rbac", "rationale": "To define and enforce an access control model based on job functions and least privilege principles."}], "mapping_notes": "Existing RBAC functions provide a basis for access control, but a new function is needed to define and enforce a comprehensive access control model."}]}}
{"key": "578c8541278ac6b80c385f59d70f68ef7445f7acc7645573a84e8409156e51ea", "value": {"batch_results": [{"compliance_id": "7.2.2", "title": "PCI DSS 7.2.2", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management", "rbac_limit_secrets_access", "rbac_limit_service_account_token_creation", "rbac_minimize_pv_creation_access"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_least_privilege_enforcement", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.create()", "service": "k8s_rbac", "rationale": "To ensure that roles are assigned with the least privilege necessary for job functions."}], "mapping_notes": "Existing RBAC functions help manage access but do not fully enforce least privilege based on job classification and function."}, {"compliance_id": "7.2.3", "title": "PCI DSS 7.2.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_privilege_approval_tracking", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.create()", "service": "k8s_rbac", "rationale": "To track and ensure privileges are approved by authorized personnel."}], "mapping_notes": "No existing Kubernetes functions ensure documented approval of privileges; a new function is needed to track approval."}, {"compliance_id": "7.2.4", "title": "PCI DSS 7.2.4", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_periodic_access_review", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.list()", "service": "k8s_rbac", "rationale": "To automate the periodic review of user accounts and access privileges."}], "mapping_notes": "Existing functions manage account lifecycles but do not automate periodic reviews."}, {"compliance_id": "7.2.5", "title": "PCI DSS 7.2.5", "existing_functions_mapped": ["rbac_limit_secrets_access", "rbac_limit_service_account_token_creation"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_least_privilege_system_accounts", "kubernetes_api": "k8s.api.rbac.v1.Role.create()", "service": "k8s_rbac", "rationale": "To ensure system accounts are assigned the least privileges necessary for operability."}], "mapping_notes": "Existing functions limit access but do not specifically address least privilege for system accounts."}, {"compliance_id": "7.2.5.1", "title": "PCI DSS 7.2.5.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_system_account_access_review", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding.list()", "service": "k8s_rbac", "rationale": "To automate the periodic review of system account access privileges."}], "mapping_notes": "No existing Kubernetes functions automate the periodic review of system account access privileges."}]}}
{"key": "09551ba6f33e179ce1ba72725f6e49955020367e100c19a5d7376c088e53b955", "value": {"batch_results": [{"compliance_id": "8.2.2", "title": "PCI DSS 8.2.2", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management", "rbac_limit_service_account_token_creation", "rbac_limit_secrets_access"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_audit_shared_id_usage", "kubernetes_api": "k8s.api.audit()", "service": "k8s_rbac", "rationale": "To audit and track usage of shared IDs to ensure actions are attributable to individual users."}], "mapping_notes": "Existing functions help manage account lifecycle and limit access, but additional auditing is needed to track shared ID usage."}, {"compliance_id": "8.2.3", "title": "PCI DSS 8.2.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_unique_authentication_per_customer", "kubernetes_api": "k8s.api.authentication()", "service": "k8s_rbac", "rationale": "Ensure unique authentication factors for service providers accessing different customer environments."}], "mapping_notes": "No existing functions directly address unique authentication factors per customer. A new function is needed to enforce this requirement."}, {"compliance_id": "8.2.4", "title": "PCI DSS 8.2.4", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management", "apiserver_audit_log_maxbackup_set", "apiserver_audit_log_maxsize_set"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_authorization_enforcement", "kubernetes_api": "k8s.api.authorization()", "service": "k8s_rbac", "rationale": "To enforce that user ID lifecycle events are authorized and auditable."}], "mapping_notes": "Existing functions manage lifecycle and logging, but additional authorization enforcement is needed."}, {"compliance_id": "8.2.5", "title": "PCI DSS 8.2.5", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_terminate_user_access", "kubernetes_api": "k8s.api.user()", "service": "k8s_rbac", "rationale": "To immediately revoke access for terminated users."}], "mapping_notes": "Account lifecycle management exists, but immediate revocation of access for terminated users needs explicit implementation."}, {"compliance_id": "8.2.6", "title": "PCI DSS 8.2.6", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_disable_inactive_accounts", "kubernetes_api": "k8s.api.user()", "service": "k8s_rbac", "rationale": "To automatically disable or remove inactive user accounts after 90 days."}], "mapping_notes": "Lifecycle management covers account handling, but automation for disabling inactive accounts is required."}]}}
{"key": "ae66381552d82d4da53e79d24345f2799ff5d5241438afdb4766364cc581aa6d", "value": {"batch_results": [{"compliance_id": "8.3.4", "title": "PCI DSS 8.3.4", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_account_lockout_policy", "kubernetes_api": "k8s.api.create_rbac_policy()", "service": "k8s_rbac", "rationale": "Implement account lockout policies to limit invalid authentication attempts and enforce lockout durations."}], "mapping_notes": "Kubernetes does not natively support account lockout mechanisms. A new function to manage account lockout policies is needed."}, {"compliance_id": "8.3.5", "title": "PCI DSS 8.3.5", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_password_reset_policy", "kubernetes_api": "k8s.api.update_user_password()", "service": "k8s_rbac", "rationale": "Ensure passwords are set to a unique value for first-time use and forced to change immediately after first use."}], "mapping_notes": "Kubernetes lacks direct support for password reset policies. A new function to enforce unique and changeable passwords upon reset is required."}, {"compliance_id": "8.3.6", "title": "PCI DSS 8.3.6", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_password_complexity_policy", "kubernetes_api": "k8s.api.enforce_password_complexity()", "service": "k8s_rbac", "rationale": "Enforce password complexity requirements to ensure minimum length and character diversity."}], "mapping_notes": "Kubernetes does not enforce password complexity natively. A new function to enforce complexity standards is necessary."}, {"compliance_id": "8.3.7", "title": "PCI DSS 8.3.7", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_password_history_policy", "kubernetes_api": "k8s.api.track_password_history()", "service": "k8s_rbac", "rationale": "Track password history to prevent reuse of the last four passwords."}], "mapping_notes": "Kubernetes does not have a built-in mechanism to track password history. A new function to manage password history is needed."}, {"compliance_id": "8.3.8", "title": "PCI DSS 8.3.8", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement pertains to documentation and communication, which cannot be enforced programmatically through Kubernetes APIs."}]}}
{"key": "40f49af2d2cc69171fbd602efbff991fd5c62c7ed7ad1040c51efd4bd7a9050b", "value": {"batch_results": [{"compliance_id": "8.3.9", "title": "PCI DSS 8.3.9", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_password_expiration_policy", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding()", "service": "k8s_rbac", "rationale": "Implement a policy to enforce password expiration for Kubernetes RBAC users."}, {"name": "k8s_rbac_dynamic_access_analysis", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding()", "service": "k8s_rbac", "rationale": "Analyze user access patterns and dynamically adjust permissions based on security posture."}], "mapping_notes": "Existing RBAC functions manage user accounts but do not enforce password expiration or dynamic analysis of security posture."}, {"compliance_id": "8.3.10", "title": "PCI DSS 8.3.10", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_customer_password_guidance", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding()", "service": "k8s_rbac", "rationale": "Provide guidance to customers on password change policies and circumstances."}], "mapping_notes": "No existing Kubernetes functions provide guidance to customers on password management."}, {"compliance_id": "8.3.10.1", "title": "PCI DSS 8.3.10.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_password_expiration_policy", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding()", "service": "k8s_rbac", "rationale": "Implement a policy to enforce password expiration for Kubernetes RBAC users."}, {"name": "k8s_rbac_dynamic_access_analysis", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding()", "service": "k8s_rbac", "rationale": "Analyze user access patterns and dynamically adjust permissions based on security posture."}], "mapping_notes": "Similar requirements to 8.3.9 but specific to service providers, requiring password expiration or dynamic analysis."}, {"compliance_id": "8.3.11", "title": "PCI DSS 8.3.11", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_unique_authentication_factor", "kubernetes_api": "k8s.api.rbac.v1.RoleBinding()", "service": "k8s_rbac", "rationale": "Ensure authentication factors are uniquely assigned and not shared among users."}], "mapping_notes": "Existing RBAC functions manage accounts but do not ensure unique assignment of authentication factors."}, {"compliance_id": "8.4.1", "title": "PCI DSS 8.4.1", "existing_functions_mapped": ["apiserver_auth_mode_include_rbac"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_mfa_enforcement", "kubernetes_api": "k8s.api.authentication.v1.TokenReview()", "service": "k8s_authentication", "rationale": "Enforce multi-factor authentication for non-console administrative access."}], "mapping_notes": "RBAC can manage access but does not enforce MFA, which is required for compliance."}]}}
{"key": "bdad945d6cd8498d14b911c4caff21ac25c93cf0033f6dee7b30c45a5882035b", "value": {"batch_results": [{"compliance_id": "8.4.2", "title": "PCI DSS 8.4.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_mfa_enforcement", "kubernetes_api": "k8s.api.authentication()", "service": "k8s_rbac", "rationale": "To enforce MFA for non-console access to Kubernetes clusters, ensuring that access cannot be obtained by a single authentication factor."}], "mapping_notes": "Kubernetes does not natively enforce MFA for API access; external tools or plugins are typically required. A new function is needed to integrate MFA enforcement directly into Kubernetes RBAC."}, {"compliance_id": "8.4.3", "title": "PCI DSS 8.4.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_remote_mfa_enforcement", "kubernetes_api": "k8s.api.authentication()", "service": "k8s_rbac", "rationale": "To enforce MFA for remote access to Kubernetes clusters from outside the entity\u2019s network, preventing access with a single authentication factor."}], "mapping_notes": "Kubernetes lacks built-in support for enforcing MFA specifically for remote access. A new function is needed to ensure MFA is applied to remote access scenarios."}, {"compliance_id": "8.5", "title": "PCI DSS 8.5", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_mfa_configuration_check", "kubernetes_api": "k8s.api.authentication()", "service": "k8s_rbac", "rationale": "To verify that MFA systems are configured to prevent misuse, including replay attacks, and require success of all factors before granting access."}], "mapping_notes": "Kubernetes does not provide native MFA configuration checks. A new function is needed to ensure proper MFA configuration and resistance to attacks."}, {"compliance_id": "8.6.1", "title": "PCI DSS 8.6.1", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_interactive_login_prevention", "kubernetes_api": "k8s.api.authorization()", "service": "k8s_rbac", "rationale": "To prevent interactive login for system and application accounts unless explicitly authorized."}], "mapping_notes": "While account lifecycle management is partially covered, a specific function to prevent interactive logins for system accounts is needed."}, {"compliance_id": "8.6.2", "title": "PCI DSS 8.6.2", "existing_functions_mapped": ["core_no_secrets_in_envs"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_rbac_prevent_hardcoded_passwords", "kubernetes_api": "k8s.api.core.v1.ConfigMap", "service": "k8s_rbac", "rationale": "To ensure passwords are not hardcoded in scripts or configuration files, enhancing security of authentication factors."}], "mapping_notes": "Existing function checks for secrets in environment variables, but additional checks are needed for hardcoded passwords in scripts or configuration files."}]}}
{"key": "20b1da0799b5d5cdc96009871ec224c9cce73c04086cc2cd5b5beb7dd19e3166", "value": {"batch_results": [{"compliance_id": "8.6.3", "title": "PCI DSS 8.6.3", "existing_functions_mapped": ["k8s_rbac_account_lifecycle_management", "rbac_limit_service_account_token_creation"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "k8s_service_account_password_policy_enforcement", "kubernetes_api": "k8s.api.patch()", "service": "k8s_rbac", "rationale": "Enforce password complexity and rotation policies for service accounts."}], "mapping_notes": "Existing functions manage account lifecycle and limit token creation but do not enforce password complexity or rotation policies."}, {"compliance_id": "9.1.1", "title": "PCI DSS 9.1.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is about documentation and procedural management, which cannot be enforced programmatically using Kubernetes APIs."}, {"compliance_id": "9.1.2", "title": "PCI DSS 9.1.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement involves documentation of roles and responsibilities, which is outside the scope of programmatic enforcement via Kubernetes APIs."}, {"compliance_id": "9.2.1", "title": "PCI DSS 9.2.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Physical access controls are not applicable to Kubernetes API functions as they pertain to physical security measures."}, {"compliance_id": "9.2.1.1", "title": "PCI DSS 9.2.1.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Monitoring physical access with video cameras or physical mechanisms is outside the scope of Kubernetes API capabilities."}]}}
{"key": "39528c026fa6c4265dbc801dec167434273403ee37092eb0274b677b3cc71877", "value": {"batch_results": [{"compliance_id": "11.6.1", "title": "PCI DSS 11.6.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_ingress_http_header_monitoring", "kubernetes_api": "k8s.networking.v1.Ingress", "service": "k8s_network", "rationale": "A function to monitor and detect changes in HTTP headers of ingress resources to identify unauthorized modifications."}, {"name": "k8s_pod_script_integrity_check", "kubernetes_api": "k8s.core.v1.Pod", "service": "k8s_pod", "rationale": "A function to verify the integrity of scripts running within pods, ensuring no unauthorized changes have been made."}], "mapping_notes": "Current Kubernetes functions do not cover monitoring HTTP headers or script integrity for PCI DSS compliance. New functions are needed to detect unauthorized changes."}, {"compliance_id": "12.1.1", "title": "PCI DSS 12.1.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is policy-based and cannot be implemented programmatically using Kubernetes APIs."}, {"compliance_id": "12.1.2", "title": "PCI DSS 12.1.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is policy-based and cannot be implemented programmatically using Kubernetes APIs."}, {"compliance_id": "12.1.3", "title": "PCI DSS 12.1.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is policy-based and cannot be implemented programmatically using Kubernetes APIs."}, {"compliance_id": "12.1.4", "title": "PCI DSS 12.1.4", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement is policy-based and cannot be implemented programmatically using Kubernetes APIs."}]}}
{"key": "349de4f882d4a4c0a511ba58fcb65a652739e4254537b6eecba5e45226a5986e", "value": {"batch_results": [{"compliance_id": "12.5.2.1", "title": "PCI DSS 12.5.2.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_service_scope_validation", "kubernetes_api": "k8s.api.get()", "service": "k8s_service", "rationale": "Automate the validation of PCI DSS scope by checking for changes in Kubernetes resources and configurations that might affect the scope."}], "mapping_notes": "This requirement involves validating the PCI DSS scope, which is not directly covered by existing Kubernetes functions. A new function to automate scope validation is suggested."}, {"compliance_id": "12.5.3", "title": "PCI DSS 12.5.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_service_org_change_monitor", "kubernetes_api": "k8s.api.watch()", "service": "k8s_service", "rationale": "Monitor for significant organizational changes that could impact PCI DSS scope and controls."}], "mapping_notes": "This requirement involves reviewing the impact of organizational changes on PCI DSS scope, which requires monitoring capabilities not covered by existing Kubernetes functions."}, {"compliance_id": "12.6.1", "title": "PCI DSS 12.6.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement pertains to security awareness training, which is not applicable to Kubernetes API functions. No programmatic function can address this requirement."}, {"compliance_id": "12.6.2", "title": "PCI DSS 12.6.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement involves reviewing and updating security awareness programs, which is outside the scope of Kubernetes API functions."}, {"compliance_id": "12.6.3", "title": "PCI DSS 12.6.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement involves security awareness training and acknowledgment, which cannot be implemented programmatically using Kubernetes APIs."}]}}
{"key": "851adccef37d433e52a8dd7bff9c8f9a84f72a5136985757fd8bb5a3aef766c7", "value": {"batch_results": [{"compliance_id": "12.6.3.1", "title": "PCI DSS 12.6.3.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement focuses on security awareness training, which is not directly implementable via Kubernetes APIs. No Kubernetes functions can address this requirement."}, {"compliance_id": "12.6.3.2", "title": "PCI DSS 12.6.3.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This requirement pertains to security awareness training about acceptable use of technologies, which cannot be implemented programmatically using Kubernetes APIs."}, {"compliance_id": "12.7.1", "title": "PCI DSS 12.7.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Screening of personnel is a procedural requirement and cannot be implemented or verified using Kubernetes APIs."}, {"compliance_id": "12.8.1", "title": "PCI DSS 12.8.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Maintaining a list of third-party service providers is a documentation requirement and cannot be implemented or verified using Kubernetes APIs."}, {"compliance_id": "12.8.2", "title": "PCI DSS 12.8.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Maintaining written agreements with TPSPs is a contractual requirement and cannot be implemented or verified using Kubernetes APIs."}]}}
{"key": "9b149acd84d539240e4497358f39d76f36db29d38db88312ba9b272782a01d27", "value": {"batch_results": [{"compliance_id": "12.8.3", "title": "PCI DSS 12.8.3", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_tpsp_engagement_tracking", "kubernetes_api": "k8s.api.customResourceDefinition()", "service": "k8s_rbac", "rationale": "A function to track and manage third-party service provider engagements, ensuring due diligence is performed programmatically."}], "mapping_notes": "This requirement is primarily procedural and involves due diligence processes for engaging TPSPs. No existing Kubernetes functions directly support this requirement, necessitating a new function to track TPSP engagements."}, {"compliance_id": "12.8.4", "title": "PCI DSS 12.8.4", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_tpsp_compliance_monitoring", "kubernetes_api": "k8s.api.customResourceDefinition()", "service": "k8s_rbac", "rationale": "A function to programmatically monitor and record TPSP PCI DSS compliance status on an annual basis."}], "mapping_notes": "This requirement involves monitoring TPSP compliance status, which is not directly supported by existing Kubernetes functions. A new function is needed to automate compliance monitoring."}, {"compliance_id": "12.8.5", "title": "PCI DSS 12.8.5", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_tpsp_responsibility_matrix", "kubernetes_api": "k8s.api.customResourceDefinition()", "service": "k8s_rbac", "rationale": "A function to maintain a responsibility matrix for PCI DSS requirements managed by TPSPs and the entity."}], "mapping_notes": "This requirement involves maintaining a responsibility matrix, which is not covered by existing Kubernetes functions. A new function is needed to automate the tracking of responsibilities."}, {"compliance_id": "12.9.1", "title": "PCI DSS 12.9.1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_tpsp_acknowledgment_tracking", "kubernetes_api": "k8s.api.customResourceDefinition()", "service": "k8s_rbac", "rationale": "A function to track TPSP acknowledgments of their security responsibilities programmatically."}], "mapping_notes": "This requirement involves written agreements and acknowledgments, which are not directly supported by existing Kubernetes functions. A new function is needed to track these acknowledgments."}, {"compliance_id": "12.9.2", "title": "PCI DSS 12.9.2", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "k8s_rbac_tpsp_information_provision", "kubernetes_api": "k8s.api.customResourceDefinition()", "service": "k8s_rbac", "rationale": "A function to manage and provide TPSP compliance information and responsibility details to customers."}], "mapping_notes": "This requirement involves providing compliance information and responsibility details, which are not covered by existing Kubernetes functions. A new function is needed to automate this process."}]}}
