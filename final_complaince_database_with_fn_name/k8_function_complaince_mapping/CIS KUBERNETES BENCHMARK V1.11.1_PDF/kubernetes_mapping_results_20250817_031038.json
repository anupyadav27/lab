{
  "metadata": {
    "generated_at": "2025-08-17T03:37:39.090507",
    "compliance_framework": "CIS KUBERNETES BENCHMARK V1.11.1_PDF.json",
    "kubernetes_database_functions": 172,
    "processing_stats": {
      "total_items": 134,
      "processed": 133,
      "skipped_manual": 1,
      "mapped_complete": 127,
      "mapped_partial": 6,
      "mapped_none": 0,
      "new_functions_suggested": 7
    }
  },
  "mapping_results": [
    {
      "compliance_id": "1.1.1",
      "title": "Ensure that the API server pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "apiserver_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the API server pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.2",
      "title": "Ensure that the API server pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring that the API server pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.3",
      "title": "Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "controllermanager_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the controller manager pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.4",
      "title": "Ensure that the controller manager pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "controllermanager_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring that the controller manager pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.5",
      "title": "Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "scheduler_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_pod_spec_file_permissions' directly addresses the compliance requirement of ensuring that the scheduler pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.6",
      "title": "Ensure that the scheduler pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "scheduler_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring the scheduler pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.7",
      "title": "Ensure that the etcd pod specification file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "etcd_pod_spec_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_pod_spec_file_permissions' directly addresses the requirement of ensuring that the etcd pod specification file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.8",
      "title": "Ensure that the etcd pod specification file ownership is set to root:root",
      "existing_functions_mapped": [
        "etcd_pod_spec_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_pod_spec_file_ownership' directly addresses the compliance requirement of ensuring that the etcd pod specification file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.9",
      "title": "Ensure that the Container Network Interface file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "container_network_interface_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'container_network_interface_file_permissions' directly addresses the compliance requirement of ensuring that the Container Network Interface file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.10",
      "title": "Ensure that the Container Network Interface file ownership is set to root:root",
      "existing_functions_mapped": [
        "container_network_interface_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'container_network_interface_file_ownership' directly addresses the compliance requirement of ensuring that the Container Network Interface file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.11",
      "title": "Ensure that the etcd data directory permissions are set to 700 or more restrictive",
      "existing_functions_mapped": [
        "etcd_data_directory_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_data_directory_permissions_check' directly addresses the compliance requirement of ensuring that the etcd data directory permissions are set to 700 or more restrictive."
    },
    {
      "compliance_id": "1.1.12",
      "title": "Ensure that the etcd data directory ownership is set to etcd:etcd",
      "existing_functions_mapped": [
        "etcd_data_directory_ownership_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_data_directory_ownership_check' directly addresses the compliance requirement of ensuring the etcd data directory ownership is set to etcd:etcd."
    },
    {
      "compliance_id": "1.1.13",
      "title": "Ensure that the default administrative credential file permissions are set to 600",
      "existing_functions_mapped": [
        "admin_conf_file_permissions",
        "super_admin_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'admin_conf_file_permissions' and 'super_admin_conf_file_permissions' directly address the compliance requirement of ensuring that the admin.conf file and super-admin.conf file have permissions of 600."
    },
    {
      "compliance_id": "1.1.14",
      "title": "Ensure that the default administrative credential file ownership is set to root:root",
      "existing_functions_mapped": [
        "apiserver_admin_conf_file_ownership",
        "super_admin_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_admin_conf_file_ownership' and 'super_admin_conf_file_ownership' directly address the compliance requirement of ensuring the ownership of admin.conf and super-admin.conf files is set to root:root."
    },
    {
      "compliance_id": "1.1.15",
      "title": "Ensure that the scheduler.conf file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "scheduler_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_conf_file_permissions' directly addresses the compliance requirement of ensuring that the scheduler.conf file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.16",
      "title": "Ensure that the scheduler.conf file ownership is set to root:root",
      "existing_functions_mapped": [
        "scheduler_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'scheduler_conf_file_ownership' directly addresses the compliance requirement of ensuring the scheduler.conf file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.17",
      "title": "Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "controllermanager_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_conf_file_permissions' directly addresses the compliance requirement of ensuring that the controller-manager.conf file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "1.1.18",
      "title": "Ensure that the controller-manager.conf file ownership is set to root:root",
      "existing_functions_mapped": [
        "controllermanager_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_conf_file_ownership' directly addresses the compliance requirement of ensuring the controller-manager.conf file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.19",
      "title": "Ensure that the Kubernetes PKI directory and file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubernetes_pki_directory_file_ownership_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubernetes_pki_directory_file_ownership_check' directly addresses the compliance requirement of ensuring that the Kubernetes PKI directory and file ownership is set to root:root."
    },
    {
      "compliance_id": "1.1.20",
      "title": "Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "apiserver_pki_cert_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_pki_cert_file_permissions' directly addresses the compliance requirement of ensuring that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive."
    },
    {
      "compliance_id": "1.1.21",
      "title": "Ensure that the Kubernetes PKI key file permissions are set to 600",
      "existing_functions_mapped": [
        "kubernetes_pki_key_file_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubernetes_pki_key_file_permissions_check' directly addresses the compliance requirement of ensuring that the Kubernetes PKI key file permissions are set to 600."
    },
    {
      "compliance_id": "1.2.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "apiserver_anonymous_requests",
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_anonymous_requests' and 'kubelet_disable_anonymous_auth' cover the requirement of disabling anonymous requests to the API server."
    },
    {
      "compliance_id": "1.2.2",
      "title": "Ensure that the --token-auth-file parameter is not set",
      "existing_functions_mapped": [
        "apiserver_no_token_auth_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_token_auth_file' directly addresses the compliance requirement of ensuring that the --token-auth-file parameter is not set."
    },
    {
      "compliance_id": "1.2.3",
      "title": "Ensure that the DenyServiceExternalIPs is set",
      "existing_functions_mapped": [
        "apiserver_deny_service_external_ips"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_deny_service_external_ips' directly addresses the compliance requirement of ensuring that the DenyServiceExternalIPs is set."
    },
    {
      "compliance_id": "1.2.4",
      "title": "Ensure that the --kubelet-client-certificate and --kubelet- client-key arguments are set as appropriate",
      "existing_functions_mapped": [
        "kubelet_client_certificate_and_key_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_client_certificate_and_key_check' directly addresses the compliance requirement of ensuring that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate."
    },
    {
      "compliance_id": "1.2.5",
      "title": "Ensure that the --kubelet-certificate-authority argument is set as appropriate",
      "existing_functions_mapped": [
        "kubelet_certificate_authority_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_certificate_authority_check' directly addresses the compliance requirement of verifying the kubelet's certificate before establishing a connection."
    },
    {
      "compliance_id": "1.2.6",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "1.2.7",
      "title": "Ensure that the --authorization-mode argument includes Node",
      "existing_functions_mapped": [
        "apiserver_auth_mode_include_node"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_include_node' directly addresses the compliance requirement of ensuring that the --authorization-mode argument includes Node."
    },
    {
      "compliance_id": "1.2.8",
      "title": "Ensure that the --authorization-mode argument includes RBAC",
      "existing_functions_mapped": [
        "apiserver_auth_mode_include_rbac"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_include_rbac' directly addresses the compliance requirement of ensuring that the --authorization-mode argument includes RBAC."
    },
    {
      "compliance_id": "1.2.9",
      "title": "Ensure that the admission control plugin EventRateLimit is set",
      "existing_functions_mapped": [
        "apiserver_event_rate_limit"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_event_rate_limit' directly addresses the compliance requirement of setting the EventRateLimit admission control plugin."
    },
    {
      "compliance_id": "1.2.10",
      "title": "Ensure that the admission control plugin AlwaysAdmit is not set",
      "existing_functions_mapped": [
        "apiserver_no_always_admit_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_no_always_admit_plugin' directly addresses the compliance requirement of ensuring that the AlwaysAdmit admission control plugin is not set."
    },
    {
      "compliance_id": "1.2.11",
      "title": "Ensure that the admission control plugin AlwaysPullImages is set",
      "existing_functions_mapped": [
        "apiserver_always_pull_images_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_always_pull_images_plugin' directly addresses the compliance requirement of ensuring the AlwaysPullImages admission control plugin is set."
    },
    {
      "compliance_id": "1.2.12",
      "title": "Ensure that the admission control plugin ServiceAccount is set",
      "existing_functions_mapped": [
        "apiserver_service_account_plugin",
        "apiserver_service_account_key_file_set",
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_service_account_plugin', 'apiserver_service_account_key_file_set', and 'apiserver_service_account_lookup_true' collectively ensure that the admission control plugin ServiceAccount is set and properly configured, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "1.2.13",
      "title": "Ensure that the admission control plugin NamespaceLifecycle is set",
      "existing_functions_mapped": [
        "apiserver_namespace_lifecycle_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_namespace_lifecycle_plugin' directly addresses the compliance requirement of ensuring the NamespaceLifecycle admission control plugin is set."
    },
    {
      "compliance_id": "1.2.14",
      "title": "Ensure that the admission control plugin NodeRestriction is set",
      "existing_functions_mapped": [
        "apiserver_node_restriction_plugin"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_node_restriction_plugin' directly addresses the compliance requirement of setting the NodeRestriction admission control plugin."
    },
    {
      "compliance_id": "1.2.15",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling",
        "controllermanager_disable_profiling",
        "scheduler_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_disable_profiling', 'controllermanager_disable_profiling', and 'scheduler_profiling' cover the requirement of ensuring that the --profiling argument is set to false for the apiserver, controller manager, and scheduler respectively."
    },
    {
      "compliance_id": "1.2.16",
      "title": "Ensure that the --audit-log-path argument is set",
      "existing_functions_mapped": [
        "apiserver_audit_log_path_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_audit_log_path_set' directly addresses the requirement of setting the --audit-log-path argument."
    },
    {
      "compliance_id": "1.2.17",
      "title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxage_set",
        "apiserver_audit_log_maxage_value_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_log_maxage_set' and 'apiserver_audit_log_maxage_value_check' collectively ensure that the --audit-log-maxage argument is set and validate its value, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "1.2.18",
      "title": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxbackup_set"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "apiserver_audit_log_maxbackup_value_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep audit-log-maxbackup",
          "service": "apiserver",
          "rationale": "This function is needed to check if the --audit-log-maxbackup argument is set to 10 or as appropriate"
        }
      ],
      "mapping_notes": "The existing function 'apiserver_audit_log_maxbackup_set' can check if the --audit-log-maxbackup argument is set, but it does not validate the value of the argument. Therefore, a new function 'apiserver_audit_log_maxbackup_value_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.2.19",
      "title": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate",
      "existing_functions_mapped": [
        "apiserver_audit_log_maxsize_set"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "apiserver_audit_log_maxsize_value_check",
          "kubernetes_api": "kubectl get pods -n kube-system",
          "service": "apiserver",
          "rationale": "This function is needed to ensure that the --audit-log-maxsize argument is set to the correct value of 100 or as appropriate"
        }
      ],
      "mapping_notes": "The existing function 'apiserver_audit_log_maxsize_set' checks if the --audit-log-maxsize argument is set, but it does not check the value of the argument. Therefore, a new function 'apiserver_audit_log_maxsize_value_check' is needed to ensure the value is set to 100 or as appropriate."
    },
    {
      "compliance_id": "1.2.20",
      "title": "Ensure that the --request-timeout argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_request_timeout_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_request_timeout_set' directly addresses the compliance requirement of setting the --request-timeout argument as appropriate."
    },
    {
      "compliance_id": "1.2.21",
      "title": "Ensure that the --service-account-lookup argument is set to true",
      "existing_functions_mapped": [
        "apiserver_service_account_lookup_true"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_lookup_true' directly addresses the compliance requirement of ensuring that the --service-account-lookup argument is set to true."
    },
    {
      "compliance_id": "1.2.22",
      "title": "Ensure that the --service-account-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_service_account_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_key_file_set' directly addresses the compliance requirement of ensuring the --service-account-key-file argument is set appropriately in the apiserver."
    },
    {
      "compliance_id": "1.2.23",
      "title": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_certfile_and_keyfile_set' directly addresses the compliance requirement of ensuring that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate."
    },
    {
      "compliance_id": "1.2.24",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "1.2.25",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_client_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_client_ca_file_set' directly addresses the compliance requirement of ensuring the --client-ca-file argument is set appropriately in the API server."
    },
    {
      "compliance_id": "1.2.26",
      "title": "Ensure that the --etcd-cafile argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_etcd_cafile_set",
        "apiserver_etcd_tls_config",
        "etcd_tls_encryption"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_etcd_cafile_set', 'apiserver_etcd_tls_config', and 'etcd_tls_encryption' collectively ensure that the --etcd-cafile argument is set appropriately and that etcd is configured to use TLS encryption for client connections."
    },
    {
      "compliance_id": "1.2.27",
      "title": "Ensure that the --encryption-provider-config argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_encryption_provider_config_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_encryption_provider_config_set' directly addresses the requirement of setting the --encryption-provider-config argument as appropriate, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "1.2.28",
      "title": "Ensure that encryption providers are appropriately configured",
      "existing_functions_mapped": [
        "apiserver_encryption_provider_config_set"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "apiserver_encryption_provider_config_check",
          "kubernetes_api": "kubectl get configmap -n kube-system kube-apiserver -o jsonpath='{.data.EncryptionProviderConfig}'",
          "service": "apiserver",
          "rationale": "To ensure that the encryption provider is not only set but also correctly configured"
        }
      ],
      "mapping_notes": "The existing function 'apiserver_encryption_provider_config_set' checks if the encryption provider is set, but it does not ensure that it is appropriately configured. Therefore, a new function 'apiserver_encryption_provider_config_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.2.29",
      "title": "Ensure that the API Server only makes use of Strong Cryptographic Ciphers",
      "existing_functions_mapped": [
        "apiserver_strong_ciphers_only"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_strong_ciphers_only' directly addresses the requirement of ensuring that the API Server only makes use of strong cryptographic ciphers."
    },
    {
      "compliance_id": "1.2.30",
      "title": "Ensure that the --service-account-extend-token-expiration parameter is set to false",
      "existing_functions_mapped": [
        "apiserver_service_account_extend_token_expiration_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_service_account_extend_token_expiration_check' directly addresses the compliance requirement of ensuring the --service-account-extend-token-expiration parameter is set to false."
    },
    {
      "compliance_id": "1.3.1",
      "title": "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate",
      "existing_functions_mapped": [
        "controllermanager_terminated_pod_gc_threshold_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_terminated_pod_gc_threshold_set' directly checks if the --terminated-pod-gc-threshold argument is set, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "1.3.2",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling",
        "controllermanager_disable_profiling",
        "scheduler_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_disable_profiling', 'controllermanager_disable_profiling', and 'scheduler_profiling' cover the requirement of ensuring that the --profiling argument is set to false for the apiserver, controller manager, and scheduler respectively."
    },
    {
      "compliance_id": "1.3.3",
      "title": "Ensure that the --use-service-account-credentials argument is set to true",
      "existing_functions_mapped": [
        "controllermanager_service_account_credentials"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_service_account_credentials' checks if the --use-service-account-credentials argument is set to true in the controller manager, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "1.3.4",
      "title": "Ensure that the --service-account-private-key-file argument is set as appropriate",
      "existing_functions_mapped": [
        "controllermanager_service_account_private_key_file"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_service_account_private_key_file' directly checks if the --service-account-private-key-file argument is set in the controller manager, which satisfies the compliance requirement completely."
    },
    {
      "compliance_id": "1.3.5",
      "title": "Ensure that the --root-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_root_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_root_ca_file_set' directly addresses the compliance requirement of ensuring the --root-ca-file argument is set appropriately in the API server."
    },
    {
      "compliance_id": "1.3.6",
      "title": "Ensure that the RotateKubeletServerCertificate argument is set to true",
      "existing_functions_mapped": [
        "controllermanager_rotate_kubelet_server_cert"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_rotate_kubelet_server_cert' directly addresses the compliance requirement of ensuring that the RotateKubeletServerCertificate argument is set to true."
    },
    {
      "compliance_id": "1.3.7",
      "title": "Ensure that the --bind-address argument is set to 127.0.0.1",
      "existing_functions_mapped": [
        "controllermanager_bind_address"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'controllermanager_bind_address' checks the bind address of the Controller Manager service, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "1.4.1",
      "title": "Ensure that the --profiling argument is set to false",
      "existing_functions_mapped": [
        "apiserver_disable_profiling"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_profiling' directly addresses the compliance requirement of ensuring that the --profiling argument is set to false."
    },
    {
      "compliance_id": "1.4.2",
      "title": "Ensure that the --bind-address argument is set to 127.0.0.1",
      "existing_functions_mapped": [
        "scheduler_bind_address"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "scheduler_bind_address_check",
          "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
          "service": "scheduler",
          "rationale": "This function is needed to ensure that the scheduler service is bound to the loopback address (127.0.0.1), enhancing the security of the Kubernetes cluster."
        }
      ],
      "mapping_notes": "The existing function 'scheduler_bind_address' can be used to check if the --bind-address argument is set, but it does not ensure that it is set to 127.0.0.1. Therefore, a new function 'scheduler_bind_address_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "2.1",
      "title": "Ensure that the --cert-file and --key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set",
        "etcd_cert_file_and_key_file_set",
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set', 'apiserver_tls_private_key_file_set', 'etcd_cert_file_and_key_file_set', and 'etcd_certfile_and_keyfile_set' cover the requirement of ensuring that the --cert-file and --key-file arguments are set as appropriate for both the apiserver and etcd services."
    },
    {
      "compliance_id": "2.2",
      "title": "Ensure that the --cert-file and --key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_cert_file_and_key_file_set",
        "etcd_certfile_and_keyfile_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'etcd_cert_file_and_key_file_set' and 'etcd_certfile_and_keyfile_set' directly address the compliance requirement of ensuring that the --cert-file and --key-file arguments are set as appropriate for the etcd service."
    },
    {
      "compliance_id": "2.3",
      "title": "Ensure that the --client-cert-auth argument is set to true",
      "existing_functions_mapped": [
        "etcd_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_client_cert_auth' directly addresses the compliance requirement of enabling client authentication on etcd service."
    },
    {
      "compliance_id": "2.4",
      "title": "Ensure that the --auto-tls argument is not set to true",
      "existing_functions_mapped": [
        "apiserver_no_auto_tls",
        "etcd_no_auto_tls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_no_auto_tls' and 'etcd_no_auto_tls' adequately cover the compliance requirement of ensuring that the --auto-tls argument is not set to true, thus no new functions are needed."
    },
    {
      "compliance_id": "2.5",
      "title": "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "etcd_peer_cert_file_set",
        "etcd_peer_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'etcd_peer_cert_file_set' and 'etcd_peer_key_file_set' directly address the compliance requirement of setting the --peer-cert-file and --peer-key-file arguments respectively."
    },
    {
      "compliance_id": "2.6",
      "title": "Ensure that the --peer-client-cert-auth argument is set to true",
      "existing_functions_mapped": [
        "etcd_peer_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_peer_client_cert_auth' directly checks if the --peer-client-cert-auth argument is set to true in etcd, which satisfies the compliance requirement completely."
    },
    {
      "compliance_id": "2.7",
      "title": "Ensure that the --peer-auto-tls argument is not set to true",
      "existing_functions_mapped": [
        "etcd_no_peer_auto_tls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'etcd_no_peer_auto_tls' directly addresses the compliance requirement of ensuring that the --peer-auto-tls argument is not set to true."
    },
    {
      "compliance_id": "2.8",
      "title": "Ensure that a unique Certificate Authority is used for etcd",
      "existing_functions_mapped": [
        "apiserver_etcd_cafile_set",
        "etcd_unique_ca"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_etcd_cafile_set' and 'etcd_unique_ca' ensure that a unique Certificate Authority is set for etcd, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "3.1.1",
      "title": "Client certificate authentication should not be used for users",
      "existing_functions_mapped": [
        "apiserver_disable_user_client_cert_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_user_client_cert_auth' directly addresses the requirement of the compliance item. It checks if the user client certificate authentication is disabled in the apiserver, which aligns with the compliance requirement that client certificate authentication should not be used for users."
    },
    {
      "compliance_id": "3.1.2",
      "title": "Service account token authentication should not be used for users",
      "existing_functions_mapped": [
        "apiserver_disable_service_account_token_for_users"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_disable_service_account_token_for_users' directly addresses the compliance requirement of not using service account token authentication for users."
    },
    {
      "compliance_id": "3.1.3",
      "title": "Bootstrap token authentication should not be used for users",
      "existing_functions_mapped": [
        "apiserver_bootstrap_token_auth_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_bootstrap_token_auth_check' directly addresses the compliance requirement of ensuring bootstrap token authentication is not used for users."
    },
    {
      "compliance_id": "3.2.1",
      "title": "Ensure that a minimal audit policy is created",
      "existing_functions_mapped": [
        "apiserver_audit_policy_file_set",
        "apiserver_audit_policy_minimal_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_policy_file_set' and 'apiserver_audit_policy_minimal_check' collectively ensure that an audit policy file is set and that it meets the minimum requirements. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "3.2.2",
      "title": "Ensure that the audit policy covers key security concerns",
      "existing_functions_mapped": [
        "apiserver_audit_policy_file_set",
        "apiserver_audit_policy_security_concerns_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_audit_policy_file_set' and 'apiserver_audit_policy_security_concerns_check' provide complete coverage for this compliance item. The first function ensures that an audit policy file is set for the apiserver, while the second function checks that the audit policy covers key security concerns."
    },
    {
      "compliance_id": "4.1.1",
      "title": "Ensure that the kubelet service file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_service_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_service_file_permissions' directly addresses the compliance requirement of ensuring that the kubelet service file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.2",
      "title": "Ensure that the kubelet service file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_service_file_ownership_root"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_service_file_ownership_root' directly addresses the compliance requirement of ensuring that the kubelet service file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.3",
      "title": "If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "proxy_kubeconfig_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'proxy_kubeconfig_file_permissions' directly addresses the compliance requirement of ensuring the proxy kubeconfig file has permissions of 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.4",
      "title": "If proxy kubeconfig file exists ensure ownership is set to root:root",
      "existing_functions_mapped": [
        "kube_proxy_kubeconfig_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kube_proxy_kubeconfig_file_ownership' directly addresses the compliance requirement of ensuring the kube-proxy kubeconfig file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.5",
      "title": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_conf_file_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_conf_file_permissions' directly addresses the compliance requirement of ensuring that the kubelet.conf file permissions are set to 600 or more restrictive."
    },
    {
      "compliance_id": "4.1.6",
      "title": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_conf_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_conf_file_ownership' directly addresses the compliance requirement of ensuring the kubelet.conf file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.7",
      "title": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [
        "apiserver_ca_file_permissions_check",
        "kubelet_ca_file_permissions_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_ca_file_permissions_check' and 'kubelet_ca_file_permissions_check' adequately cover the compliance requirement of ensuring that the certificate authorities file permissions are set to 644 or more restrictive."
    },
    {
      "compliance_id": "4.1.8",
      "title": "Ensure that the client certificate authorities file ownership is set to root:root",
      "existing_functions_mapped": [
        "check_client_ca_file_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'check_client_ca_file_ownership' directly addresses the compliance requirement of ensuring the client certificate authorities file ownership is set to root:root."
    },
    {
      "compliance_id": "4.1.9",
      "title": "If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive",
      "existing_functions_mapped": [
        "kubelet_config_yaml_permissions"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_config_yaml_permissions' directly addresses the compliance requirement of validating the permissions of the kubelet config.yaml file."
    },
    {
      "compliance_id": "4.1.10",
      "title": "If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root",
      "existing_functions_mapped": [
        "kubelet_config_yaml_ownership"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_config_yaml_ownership' directly addresses the requirement of validating the ownership of the kubelet config.yaml file."
    },
    {
      "compliance_id": "4.2.1",
      "title": "Ensure that the --anonymous-auth argument is set to false",
      "existing_functions_mapped": [
        "kubelet_disable_anonymous_auth"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_disable_anonymous_auth' directly addresses the requirement of disabling anonymous requests to the Kubelet server, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "4.2.2",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [
        "apiserver_auth_mode_not_always_allow"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_auth_mode_not_always_allow' directly addresses the compliance requirement of ensuring that the --authorization-mode argument is not set to AlwaysAllow."
    },
    {
      "compliance_id": "4.2.3",
      "title": "Ensure that the --client-ca-file argument is set as appropriate",
      "existing_functions_mapped": [
        "apiserver_client_ca_file_set",
        "kubelet_client_ca_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_client_ca_file_set' and 'kubelet_client_ca_file_set' ensure that the --client-ca-file argument is set as appropriate for both the API server and the Kubelet, providing complete coverage for this compliance item."
    },
    {
      "compliance_id": "4.2.4",
      "title": "Verify that if defined, readOnlyPort is set to 0",
      "existing_functions_mapped": [
        "kubelet_disable_read_only_port"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_disable_read_only_port' directly addresses the compliance requirement of ensuring that the readOnlyPort, if defined, is set to 0."
    },
    {
      "compliance_id": "4.2.5",
      "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
      "existing_functions_mapped": [
        "kubelet_streaming_connection_timeout"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_streaming_connection_timeout' checks the streaming connection idle timeout argument in kubelet, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "4.2.6",
      "title": "Ensure that the --make-iptables-util-chains argument is set to true",
      "existing_functions_mapped": [
        "kubelet_manage_iptables"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_manage_iptables' appears to cover the requirement of ensuring that the --make-iptables-util-chains argument is set to true, as it implies managing iptables which includes setting the necessary arguments."
    },
    {
      "compliance_id": "4.2.7",
      "title": "Ensure that the --hostname-override argument is not set",
      "existing_functions_mapped": [
        "kubelet_no_hostname_override"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_no_hostname_override' directly addresses the compliance requirement of not setting the --hostname-override argument."
    },
    {
      "compliance_id": "4.2.8",
      "title": "Ensure that the eventRecordQPS argument is set to a level which ensures appropriate event capture",
      "existing_functions_mapped": [
        "kubelet_event_record_qps"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_event_record_qps' directly addresses the compliance requirement of setting the eventRecordQPS argument to an appropriate level to ensure event capture."
    },
    {
      "compliance_id": "4.2.9",
      "title": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate",
      "existing_functions_mapped": [
        "apiserver_tls_cert_file_set",
        "apiserver_tls_private_key_file_set"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_tls_cert_file_set' and 'apiserver_tls_private_key_file_set' directly address the compliance requirement of setting the --tls-cert-file and --tls-private-key-file arguments respectively."
    },
    {
      "compliance_id": "4.2.10",
      "title": "Ensure that the --rotate-certificates argument is not set to false",
      "existing_functions_mapped": [
        "kubelet_rotate_certificates"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_rotate_certificates' directly addresses the compliance requirement of ensuring the --rotate-certificates argument is not set to false."
    },
    {
      "compliance_id": "4.2.11",
      "title": "Verify that the RotateKubeletServerCertificate argument is set to true",
      "existing_functions_mapped": [
        "kubelet_rotate_certificates"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_rotate_certificates' directly addresses the requirement of the compliance item. It checks if the RotateKubeletServerCertificate argument is set to true, which is exactly what the compliance item requires."
    },
    {
      "compliance_id": "4.2.12",
      "title": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers",
      "existing_functions_mapped": [
        "kubelet_strong_ciphers_only"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_strong_ciphers_only' directly addresses the requirement of ensuring that the Kubelet only makes use of strong cryptographic ciphers."
    },
    {
      "compliance_id": "4.2.13",
      "title": "Ensure that a limit is set on pod PIDs",
      "existing_functions_mapped": [
        "kubelet_set_pod_pid_limit"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_set_pod_pid_limit' directly addresses the requirement of setting a limit on pod PIDs."
    },
    {
      "compliance_id": "4.2.14",
      "title": "Ensure that the --seccomp-default parameter is set to true",
      "existing_functions_mapped": [
        "kubelet_seccomp_default_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_seccomp_default_check' directly checks if the --seccomp-default parameter is set to true in the Kubelet configuration, which satisfies the compliance requirement."
    },
    {
      "compliance_id": "4.2.15",
      "title": "Ensure that the --IPAddressDeny is set to any",
      "existing_functions_mapped": [
        "kubelet_ip_address_deny_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kubelet_ip_address_deny_check' appears to cover the requirement of ensuring that --IPAddressDeny is set to 'Any'. No new functions are needed."
    },
    {
      "compliance_id": "4.3.1",
      "title": "Ensure that the kube-proxy metrics service is bound to localhost",
      "existing_functions_mapped": [
        "kube_proxy_metrics_bind_to_localhost"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'kube_proxy_metrics_bind_to_localhost' directly addresses the requirement of ensuring that the kube-proxy metrics service is bound to localhost."
    },
    {
      "compliance_id": "5.1.1",
      "title": "Ensure that the cluster-admin role is only used where required",
      "existing_functions_mapped": [
        "rbac_cluster_admin_usage"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_cluster_admin_usage' directly addresses the compliance requirement of ensuring that the cluster-admin role is only used where required."
    },
    {
      "compliance_id": "5.1.2",
      "title": "Minimize access to secrets",
      "existing_functions_mapped": [
        "apiserver_minimize_secrets_access",
        "apiserver_restrict_secrets_access",
        "rbac_limit_secrets_access",
        "rbac_minimize_secret_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_minimize_secrets_access', 'apiserver_restrict_secrets_access', 'rbac_limit_secrets_access', and 'rbac_minimize_secret_access' collectively provide complete coverage for the compliance requirement to minimize access to secrets. These functions ensure that access to secrets is restricted to the smallest possible group of users, thereby reducing the risk of privilege escalation."
    },
    {
      "compliance_id": "5.1.3",
      "title": "Minimize wildcard use in Roles and ClusterRoles",
      "existing_functions_mapped": [
        "rbac_minimize_wildcard_use_roles"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_minimize_wildcard_use_roles' directly addresses the requirement of minimizing wildcard use in Roles and ClusterRoles. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.1.4",
      "title": "Minimize access to create pods",
      "existing_functions_mapped": [
        "rbac_minimize_pod_creation_access",
        "rbac_minimize_privileged_service_account_assignment",
        "rbac_minimize_privileged_service_account_pod_assignment",
        "rbac_minimize_service_account_assignment_in_pod_creation"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rbac_minimize_hostpath_mount_in_pod_creation",
          "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.volumes[*].hostPath.path}{\"\\n\"}{end}'",
          "service": "apiserver",
          "rationale": "This function is needed to check if any pod has hostPath volumes mounted, which can provide access to sensitive data on the host machine."
        }
      ],
      "mapping_notes": "The existing functions cover the restriction of pod creation and the assignment of privileged service accounts to pods. However, there is a gap in checking for hostPath volumes in pod creation, which can provide access to sensitive data. Hence, a new function is suggested."
    },
    {
      "compliance_id": "5.1.5",
      "title": "Ensure that default service accounts are not actively used.",
      "existing_functions_mapped": [
        "core_default_service_account_usage_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_default_service_account_usage_check' appears to cover the requirements of this compliance item, as it checks for the usage of default service accounts."
    },
    {
      "compliance_id": "5.1.6",
      "title": "Ensure that Service Account Tokens are only mounted where necessary",
      "existing_functions_mapped": [
        "core_minimize_service_account_token_mount"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_service_account_token_mount' appears to cover the requirements of this compliance item, as it ensures that service account tokens are minimized and only mounted where necessary."
    },
    {
      "compliance_id": "5.1.7",
      "title": "Avoid use of system:masters group",
      "existing_functions_mapped": [
        "avoid_system_masters_group_usage"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'avoid_system_masters_group_usage' directly addresses the compliance requirement of avoiding the use of the system:masters group. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.1.8",
      "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
      "existing_functions_mapped": [
        "rbac_limit_bind_permission",
        "rbac_limit_escalate_permission",
        "rbac_limit_impersonate_permission"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'rbac_limit_bind_permission', 'rbac_limit_escalate_permission', and 'rbac_limit_impersonate_permission' directly address the compliance requirement of limiting the use of Bind, Impersonate, and Escalate permissions in the Kubernetes cluster."
    },
    {
      "compliance_id": "5.1.9",
      "title": "Minimize access to create persistent volumes",
      "existing_functions_mapped": [
        "core_minimize_hostpath_pv_creation",
        "rbac_minimize_pv_creation_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_minimize_hostpath_pv_creation' and 'rbac_minimize_pv_creation_access' adequately cover the compliance requirement of minimizing access to create persistent volumes. The first function ensures that the creation of hostPath persistent volumes is minimized, addressing the specific risk mentioned in the compliance item description. The second function restricts the RBAC permissions to create persistent volumes, further ensuring that only authorized users can create them."
    },
    {
      "compliance_id": "5.1.10",
      "title": "Minimize access to the proxy sub-resource of nodes",
      "existing_functions_mapped": [
        "rbac_minimize_node_proxy_subresource_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_minimize_node_proxy_subresource_access' directly addresses the compliance requirement of minimizing access to the proxy sub-resource of nodes. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.1.11",
      "title": "Minimize access to the approval sub-resource of certificatesigningrequests objects",
      "existing_functions_mapped": [
        "rbac_minimize_csr_approval_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'rbac_minimize_csr_approval_access' directly addresses the requirement of minimizing access to the approval sub-resource of CertificateSigningRequests objects, hence no new functions are needed."
    },
    {
      "compliance_id": "5.1.12",
      "title": "Minimize access to webhook configuration objects",
      "existing_functions_mapped": [
        "rbac_minimize_mutatingwebhookconfigurations_access",
        "rbac_minimize_validatingwebhookconfigurations_access",
        "rbac_minimize_webhook_config_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'rbac_minimize_mutatingwebhookconfigurations_access', 'rbac_minimize_validatingwebhookconfigurations_access', and 'rbac_minimize_webhook_config_access' adequately cover the compliance requirement of minimizing access to webhook configuration objects. No new functions are needed."
    },
    {
      "compliance_id": "5.1.13",
      "title": "Minimize access to the service account token creation",
      "existing_functions_mapped": [
        "apiserver_service_account_plugin",
        "rbac_minimize_service_account_token_creation"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'apiserver_service_account_plugin' and 'rbac_minimize_service_account_token_creation' provide complete coverage for the compliance item. The 'apiserver_service_account_plugin' function ensures that the service account tokens are managed properly in the API server, while 'rbac_minimize_service_account_token_creation' function ensures that the RBAC policies are in place to minimize the creation of service account tokens."
    },
    {
      "compliance_id": "5.2.1",
      "title": "Ensure that the cluster has at least one active policy control mechanism in place",
      "existing_functions_mapped": [
        "apiserver_policy_control_mechanism_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_policy_control_mechanism_check' directly addresses the requirement of having at least one active policy control mechanism in place for the Kubernetes cluster."
    },
    {
      "compliance_id": "5.2.2",
      "title": "Minimize the admission of privileged containers",
      "existing_functions_mapped": [
        "core_minimize_privileged_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_privileged_containers' directly addresses the requirement of minimizing the admission of privileged containers by checking for the securityContext.privileged flag in the pod specifications."
    },
    {
      "compliance_id": "5.2.3",
      "title": "Minimize the admission of containers wishing to share the host process ID namespace",
      "existing_functions_mapped": [
        "core_minimize_hostPID_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_hostPID_containers' directly addresses the requirement of minimizing the admission of containers wishing to share the host process ID namespace."
    },
    {
      "compliance_id": "5.2.4",
      "title": "Minimize the admission of containers wishing to share the host IPC namespace",
      "existing_functions_mapped": [
        "core_minimize_hostIPC_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_hostIPC_containers' directly addresses the compliance requirement of minimizing the admission of containers wishing to share the host IPC namespace."
    },
    {
      "compliance_id": "5.2.5",
      "title": "Minimize the admission of containers wishing to share the host network namespace",
      "existing_functions_mapped": [
        "core_minimize_hostNetwork_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_hostNetwork_containers' directly addresses the requirement of minimizing the admission of containers wishing to share the host network namespace. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.6",
      "title": "Minimize the admission of containers with allowPrivilegeEscalation",
      "existing_functions_mapped": [
        "core_minimize_allowPrivilegeEscalation_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_allowPrivilegeEscalation_containers' directly addresses the compliance requirement of minimizing the admission of containers with the allowPrivilegeEscalation flag set to true."
    },
    {
      "compliance_id": "5.2.7",
      "title": "Minimize the admission of root containers",
      "existing_functions_mapped": [
        "core_minimize_root_containers_admission"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_root_containers_admission' directly addresses the compliance requirement of minimizing the admission of root containers."
    },
    {
      "compliance_id": "5.2.8",
      "title": "Minimize the admission of containers with the NET_RAW capability",
      "existing_functions_mapped": [
        "core_minimize_net_raw_capability_admission"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_net_raw_capability_admission' directly addresses the compliance requirement of minimizing the admission of containers with the NET_RAW capability."
    },
    {
      "compliance_id": "5.2.9",
      "title": "Minimize the admission of containers with added capabilities",
      "existing_functions_mapped": [
        "core_minimize_containers_added_capabilities",
        "core_minimize_containers_capabilities_assigned"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_minimize_containers_added_capabilities' and 'core_minimize_containers_capabilities_assigned' adequately cover the compliance requirement of minimizing the admission of containers with added capabilities. No new functions are needed."
    },
    {
      "compliance_id": "5.2.10",
      "title": "Minimize the admission of containers with capabilities assigned",
      "existing_functions_mapped": [
        "core_minimize_containers_capabilities_assigned"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_containers_capabilities_assigned' directly addresses the compliance requirement to minimize the admission of containers with capabilities assigned. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "5.2.12",
      "title": "Minimize the admission of HostPath volumes",
      "existing_functions_mapped": [
        "core_minimize_admission_hostpath_volumes",
        "rbac_minimize_hostpath_mount",
        "rbac_minimize_hostpath_mount_in_pod",
        "rbac_minimize_hostpath_mount_in_pod_creation"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_minimize_admission_hostpath_volumes', 'rbac_minimize_hostpath_mount', 'rbac_minimize_hostpath_mount_in_pod', and 'rbac_minimize_hostpath_mount_in_pod_creation' collectively provide complete coverage for the compliance requirement to minimize the admission of HostPath volumes."
    },
    {
      "compliance_id": "5.2.13",
      "title": "Minimize the admission of containers which use HostPorts",
      "existing_functions_mapped": [
        "core_minimize_admission_hostport_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_minimize_admission_hostport_containers' directly addresses the compliance requirement to minimize the admission of containers which use HostPorts."
    },
    {
      "compliance_id": "5.3.1",
      "title": "Ensure that the CNI in use supports Network Policies",
      "existing_functions_mapped": [
        "cni_network_policy_support_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cni_network_policy_support_check' directly addresses the requirement of checking if the CNI in use supports Network Policies."
    },
    {
      "compliance_id": "5.3.2",
      "title": "Ensure that all Namespaces have Network Policies defined",
      "existing_functions_mapped": [
        "core_namespace_network_policy_check",
        "namespace_network_policy_enforcement_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_namespace_network_policy_check' and 'namespace_network_policy_enforcement_check' adequately cover the compliance requirement of ensuring all namespaces have network policies defined."
    },
    {
      "compliance_id": "5.4.1",
      "title": "Prefer using secrets as files over secrets as environment variables",
      "existing_functions_mapped": [
        "core_secrets_as_files",
        "core_no_secrets_in_envs"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'core_secrets_as_files' and 'core_no_secrets_in_envs' cover the requirement of preferring secrets as files over environment variables. No new functions are needed."
    },
    {
      "compliance_id": "5.4.2",
      "title": "Consider external secret storage",
      "existing_functions_mapped": [
        "external_secret_storage_check",
        "external_secret_storage_authentication_check",
        "external_secret_storage_audit_check",
        "external_secret_storage_encryption_check",
        "external_secret_storage_rotation_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover all aspects of the compliance requirement. They ensure the use of an external secrets storage and management system, require authentication to access secrets, audit access to and use of secrets, encrypt secrets, and facilitate the rotation of secrets."
    },
    {
      "compliance_id": "5.5.1",
      "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
      "existing_functions_mapped": [
        "apiserver_image_policy_webhook_config"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'apiserver_image_policy_webhook_config' directly addresses the compliance requirement of configuring Image Provenance using ImagePolicyWebhook admission controller."
    },
    {
      "compliance_id": "5.6.1",
      "title": "Create administrative boundaries between resources using namespaces",
      "existing_functions_mapped": [
        "namespace_boundaries_enforcement_check",
        "namespace_creation_and_usage_check",
        "namespace_isolation_check",
        "namespace_network_policy_enforcement_check",
        "namespace_resource_isolation_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of creating administrative boundaries using namespaces. They ensure the enforcement of namespace boundaries, proper creation and usage of namespaces, isolation of resources within namespaces, and enforcement of network policies within namespaces."
    },
    {
      "compliance_id": "5.6.2",
      "title": "Ensure that the seccomp profile is set to docker/default in your pod definitions",
      "existing_functions_mapped": [
        "core_seccomp_profile_docker_default"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'core_seccomp_profile_docker_default' directly addresses the compliance requirement of ensuring the seccomp profile is set to docker/default in pod definitions."
    },
    {
      "compliance_id": "5.6.3",
      "title": "Apply Security Context to Your Pods and Containers",
      "existing_functions_mapped": [
        "core_security_context_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "apply_security_context_to_pods",
          "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"}{end}'",
          "service": "core",
          "rationale": "To ensure that all pods have a security context applied"
        },
        {
          "name": "apply_security_context_to_containers",
          "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{range .spec.containers[*]}{.name}{\"\\n\"}{end}{end}'",
          "service": "core",
          "rationale": "To ensure that all containers within the pods have a security context applied"
        }
      ],
      "mapping_notes": "The existing function 'core_security_context_check' partially covers the compliance requirement. However, it does not ensure that the security context is applied to all pods and containers. Therefore, two new functions 'apply_security_context_to_pods' and 'apply_security_context_to_containers' are suggested."
    },
    {
      "compliance_id": "5.6.4",
      "title": "The default namespace should not be used",
      "existing_functions_mapped": [
        "default_namespace_usage_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'default_namespace_usage_check' directly addresses the compliance requirement of not using the default namespace."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "apiserver_audit_log_maxbackup_value_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep audit-log-maxbackup",
      "service": "apiserver",
      "rationale": "This function is needed to check if the --audit-log-maxbackup argument is set to 10 or as appropriate"
    },
    {
      "name": "apiserver_audit_log_maxsize_value_check",
      "kubernetes_api": "kubectl get pods -n kube-system",
      "service": "apiserver",
      "rationale": "This function is needed to ensure that the --audit-log-maxsize argument is set to the correct value of 100 or as appropriate"
    },
    {
      "name": "apiserver_encryption_provider_config_check",
      "kubernetes_api": "kubectl get configmap -n kube-system kube-apiserver -o jsonpath='{.data.EncryptionProviderConfig}'",
      "service": "apiserver",
      "rationale": "To ensure that the encryption provider is not only set but also correctly configured"
    },
    {
      "name": "scheduler_bind_address_check",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "service": "scheduler",
      "rationale": "This function is needed to ensure that the scheduler service is bound to the loopback address (127.0.0.1), enhancing the security of the Kubernetes cluster."
    },
    {
      "name": "rbac_minimize_hostpath_mount_in_pod_creation",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.volumes[*].hostPath.path}{\"\\n\"}{end}'",
      "service": "apiserver",
      "rationale": "This function is needed to check if any pod has hostPath volumes mounted, which can provide access to sensitive data on the host machine."
    },
    {
      "name": "apply_security_context_to_pods",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\n\"}{end}'",
      "service": "core",
      "rationale": "To ensure that all pods have a security context applied"
    },
    {
      "name": "apply_security_context_to_containers",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{range .spec.containers[*]}{.name}{\"\\n\"}{end}{end}'",
      "service": "core",
      "rationale": "To ensure that all containers within the pods have a security context applied"
    }
  ]
}