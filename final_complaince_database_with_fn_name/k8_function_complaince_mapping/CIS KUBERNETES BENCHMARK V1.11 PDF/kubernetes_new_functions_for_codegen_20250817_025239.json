{
  "metadata": {
    "generated_at": "2025-08-17T02:52:39.027213",
    "total_new_functions": 7,
    "description": "New Kubernetes security functions suggested by compliance mapper for Python code generation"
  },
  "new_functions": [
    {
      "function_name": "kubelet_client_certificate_and_key_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{range .items[*]}{.spec.containers[*].command}{\"\\n\"}{end}'",
      "rationale": "This function is needed to ensure that the kubelet client certificate and key are set as appropriate. It checks the kubelet command line arguments for the presence of --kubelet-client-certificate and --kubelet-client-key.",
      "compliance_id": "1.2.4",
      "compliance_title": "Ensure that the --kubelet-client-certificate and --kubelet- client-key arguments are set as appropriate",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing function 'kubelet_tls_cert_and_key' partially covers the compliance requirement as it checks for the presence of a certificate and key. However, it does not specifically check for the --kubelet-client-certificate and --kubelet-client-key arguments. Therefore, a new function 'kubelet_client_certificate_and_key_check' is suggested."
    },
    {
      "function_name": "kubelet_certificate_authority_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "rationale": "This function is needed to ensure that the --kubelet-certificate-authority argument is set as appropriate in the kubelet configuration.",
      "compliance_id": "1.2.5",
      "compliance_title": "Ensure that the --kubelet-certificate-authority argument is set as appropriate",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing functions 'apiserver_kubelet_cert_auth' and 'kubelet_tls_cert_and_key' partially cover the compliance requirement. However, a new function 'kubelet_certificate_authority_check' is needed to specifically check the --kubelet-certificate-authority argument in the kubelet configuration."
    },
    {
      "function_name": "apiserver_audit_log_maxage_value_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep audit-log-maxage",
      "rationale": "To ensure that the --audit-log-maxage argument is not only set, but also set to 30 or as appropriate",
      "compliance_id": "1.2.17",
      "compliance_title": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate",
      "coverage_assessment": "partial",
      "mapping_notes": "The existing function 'apiserver_audit_log_maxage_set' checks if the --audit-log-maxage argument is set, but it does not check the value of the argument. Therefore, a new function 'apiserver_audit_log_maxage_value_check' is needed to ensure the value is set to 30 or as appropriate."
    },
    {
      "function_name": "apiserver_service_account_extend_token_expiration_check",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}' | grep 'service-account-extend-token-expiration'",
      "rationale": "This function is needed to ensure that the --service-account-extend-token-expiration parameter is set to false, as per compliance requirement 1.2.30",
      "compliance_id": "1.2.30",
      "compliance_title": "Ensure that the --service-account-extend-token-expiration parameter is set to false",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement, hence a new function is proposed."
    },
    {
      "function_name": "kubelet_seccomp_default_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get nodes -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.nodeInfo.kubeletVersion}{\"\\n\"}'",
      "rationale": "This function is needed to check if the --seccomp-default parameter is set to true in the kubelet configuration",
      "compliance_id": "4.2.14",
      "compliance_title": "Ensure that the --seccomp-default parameter is set to true",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of ensuring that the --seccomp-default parameter is set to true. A new function 'kubelet_seccomp_default_check' is suggested to fill this gap."
    },
    {
      "function_name": "kubelet_ip_address_deny_check",
      "service": "kubelet",
      "kubernetes_api": "kubectl get pods -n kube-system -o jsonpath='{.items[*].spec.containers[*].command}'",
      "rationale": "This function is needed to check if the --IPAddressDeny parameter is set to 'any' in the kubelet configuration",
      "compliance_id": "4.2.15",
      "compliance_title": "Ensure that the --IPAddressDeny is set to any",
      "coverage_assessment": "none",
      "mapping_notes": "No existing functions in the database match the compliance requirement of checking the --IPAddressDeny parameter in the kubelet configuration. A new function 'kubelet_ip_address_deny_check' is suggested to fill this gap."
    },
    {
      "function_name": "rbac_minimize_hostpath_mount_in_pod_creation",
      "service": "apiserver",
      "kubernetes_api": "kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.volumes[*].hostPath.path}{\"\\n\"}{end}'",
      "rationale": "To ensure that the creation of pods does not allow for the mounting of sensitive hostPaths, further minimizing the potential for privilege escalation.",
      "compliance_id": "5.1.4",
      "compliance_title": "Minimize access to create pods",
      "coverage_assessment": "partial",
      "mapping_notes": "Existing functions provide coverage for restricting pod creation access and limiting the assignment of privileged service accounts. However, there is a gap in checking for hostPath mounts during pod creation, hence the need for a new function."
    }
  ]
}