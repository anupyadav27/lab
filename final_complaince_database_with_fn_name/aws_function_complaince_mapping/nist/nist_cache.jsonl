{"key": "8ef94d6c263b06b1b53451e04ddaff4964e4664297dc86c357adc7c8e737ea18", "value": {"batch_results": [{"compliance_id": "AC-1", "title": "Policy and Procedures", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AC-1 is focused on policy and procedural documentation, which cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "AC-2", "title": "Account Management", "existing_functions_mapped": ["aws_edr_iam_users_check", "aws_edr_iam_mfa_enforced_check", "aws_edr_iam_permissions_check", "aws_edr_iam_policy_regular_review_check", "aws_edr_iam_role_for_automated_process_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "iam_user_account_activity_monitoring", "boto3_api": "iam.get_account_authorization_details()", "service": "iam", "rationale": "Monitor the use of accounts to ensure compliance with account management requirements."}, {"name": "iam_user_account_review", "boto3_api": "iam.list_users()", "service": "iam", "rationale": "Review accounts for compliance with account management requirements."}], "mapping_notes": "Existing functions cover some aspects of account management, such as user checks and MFA enforcement, but do not fully address monitoring and review processes."}, {"compliance_id": "AC-3", "title": "Access Enforcement", "existing_functions_mapped": ["cloudtrail_security_group_changes_logging_enabled", "cloudtrail_vpc_changes_logging_enabled", "cloudwatch_security_group_changes_alarm_configured"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "iam_policy_access_enforcement_check", "boto3_api": "iam.get_policy()", "service": "iam", "rationale": "Ensure that IAM policies enforce approved authorizations for logical access."}, {"name": "s3_bucket_policy_access_enforcement_check", "boto3_api": "s3.get_bucket_policy()", "service": "s3", "rationale": "Check S3 bucket policies to ensure they enforce approved access controls."}], "mapping_notes": "Current functions log and monitor changes to security groups and VPCs, which partially addresses access enforcement. Additional checks on IAM and S3 policies are needed for comprehensive coverage."}]}}
{"key": "19b6c6b2bbb5a396d2a2f98fa2cb1ba41169a65507283408398bcef03493c207", "value": {"batch_results": [{"compliance_id": "AC-1", "title": "Policy and Procedures", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AC-1 is focused on policy documentation and procedures, which cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "AC-2", "title": "Account Management", "existing_functions_mapped": ["aws_edr_iam_users_check", "aws_edr_iam_least_privilege_policy_check", "aws_edr_iam_mfa_enforced_check", "aws_edr_iam_permissions_check", "aws_edr_iam_policy_regular_review_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "iam_user_account_activity_monitoring", "boto3_api": "iam.get_account_authorization_details()", "service": "iam", "rationale": "Monitor the use of accounts to ensure compliance with account management requirements."}, {"name": "iam_user_account_review", "boto3_api": "iam.list_users()", "service": "iam", "rationale": "Review accounts for compliance with account management requirements."}], "mapping_notes": "Existing functions cover some aspects of account management, such as least privilege and MFA enforcement, but do not fully address monitoring and review of account activity."}, {"compliance_id": "AC-3", "title": "Access Enforcement", "existing_functions_mapped": ["aurora_database_user_role_least_privilege_check", "awslambda_function_least_privilege_policy_check", "cloudtrail_security_group_changes_logging_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "iam_policy_access_enforcement_check", "boto3_api": "iam.get_policy()", "service": "iam", "rationale": "Ensure that IAM policies enforce approved authorizations for logical access."}], "mapping_notes": "Existing functions partially cover access enforcement through least privilege checks, but a specific check for IAM policy enforcement is needed."}, {"compliance_id": "AC-4", "title": "Information Flow Enforcement", "existing_functions_mapped": ["cloudfront_distributions_geo_restrictions_enabled", "cloudfront_distributions_https_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "vpc_flow_logs_enabled", "boto3_api": "ec2.describe_flow_logs()", "service": "ec2", "rationale": "Ensure that VPC flow logs are enabled to monitor and enforce information flow policies."}], "mapping_notes": "Existing functions address some aspects of information flow control, such as geo-restrictions and HTTPS enforcement, but do not cover VPC flow monitoring."}, {"compliance_id": "AC-5", "title": "Separation of Duties", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "iam_role_separation_of_duties_check", "boto3_api": "iam.get_role()", "service": "iam", "rationale": "Check IAM roles to ensure separation of duties by verifying that roles do not have conflicting permissions."}], "mapping_notes": "No existing functions directly address separation of duties, necessitating a new function to check for conflicting permissions in IAM roles."}]}}
{"key": "a7749aae3b8583348339f77abb33f90f956e8687679c1a22584027c826afa0a9", "value": {"batch_results": [{"compliance_id": "AC-6", "title": "LEAST PRIVILEGE", "existing_functions_mapped": ["aurora_database_user_role_least_privilege_check", "aurora_iam_least_privilege_policy_check", "awslambda_function_least_privilege_policy_check", "aws_edr_iam_least_privilege_policy_check"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "iam_user_least_privilege_policy_check", "boto3_api": "iam.get_user_policy()", "service": "iam", "rationale": "Ensure IAM users have policies granting only necessary permissions."}, {"name": "ec2_instance_role_least_privilege_check", "boto3_api": "ec2.describe_iam_instance_profile_associations()", "service": "ec2", "rationale": "Verify EC2 instance roles are assigned least privilege policies."}], "mapping_notes": "Existing functions cover least privilege for specific services but do not comprehensively cover all AWS resources."}, {"compliance_id": "AC-7", "title": "UNSUCCESSFUL LOGON ATTEMPTS", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "cognito_user_pool_failed_login_attempts_limit", "boto3_api": "cognito-idp.describe_user_pool()", "service": "cognito-idp", "rationale": "Check if Cognito user pools enforce limits on failed login attempts."}], "mapping_notes": "No existing functions address the enforcement of limits on unsuccessful logon attempts."}, {"compliance_id": "AC-8", "title": "SYSTEM USE NOTIFICATION", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "ec2_instance_user_data_banner_check", "boto3_api": "ec2.describe_instance_attribute()", "service": "ec2", "rationale": "Verify EC2 instances display a system use notification banner via user data."}], "mapping_notes": "No existing functions check for system use notification banners."}, {"compliance_id": "AC-9", "title": "PREVIOUS LOGON NOTIFICATION", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "cognito_user_pool_last_login_notification", "boto3_api": "cognito-idp.describe_user_pool()", "service": "cognito-idp", "rationale": "Ensure Cognito user pools notify users of their last login time."}], "mapping_notes": "No existing functions notify users of their last successful logon."}, {"compliance_id": "AC-10", "title": "CONCURRENT SESSION CONTROL", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "iam_user_concurrent_session_limit_check", "boto3_api": "iam.get_account_authorization_details()", "service": "iam", "rationale": "Check if IAM users have limits on concurrent sessions."}], "mapping_notes": "No existing functions address the limitation of concurrent sessions for accounts."}]}}
{"key": "6073883753e765c779fbfc27da803ace3d46a8e267ea16b8bac8518e014c429d", "value": {"batch_results": [{"compliance_id": "AC-11", "title": "Device Lock", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Device lock is typically an OS-level or application-level feature and not directly manageable via AWS APIs."}, {"compliance_id": "AC-12", "title": "Session Termination", "existing_functions_mapped": ["appstream_fleet_session_disconnect_timeout", "appstream_fleet_session_idle_disconnect_timeout"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "ec2_instance_idle_session_termination", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "To automatically terminate idle EC2 instances based on organization-defined conditions."}], "mapping_notes": "AppStream functions cover session termination for AppStream environments, but additional functions are needed for EC2 and other services."}, {"compliance_id": "AC-14", "title": "Permitted Actions Without Identification or Authentication", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This control involves policy decisions about which actions can be performed without authentication, not directly checkable via AWS APIs."}, {"compliance_id": "AC-15", "title": "Withdrawn Control", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This control has been withdrawn and incorporated into another control, thus no mapping is required."}, {"compliance_id": "AC-16", "title": "Security and Privacy Attributes", "existing_functions_mapped": ["cloudtrail_logs_s3_bucket_is_not_publicly_accessible", "cloudtrail_kms_encryption_enabled", "cloudwatch_log_group_kms_encryption_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "s3_object_metadata_security_attributes_check", "boto3_api": "s3.get_object()", "service": "s3", "rationale": "To ensure security attributes are associated with S3 objects."}], "mapping_notes": "Existing functions cover encryption and access control, but additional checks for metadata attributes are needed."}]}}
{"key": "3fbe484d1a3e4b2a2a146bc92bf3d9a690b94166caa569cc63652df27613f625", "value": {"batch_results": [{"compliance_id": "AC-17", "title": "Remote Access", "existing_functions_mapped": ["ec2_client_vpn_endpoint_connection_logging_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "ec2_vpn_connection_encryption_enabled", "boto3_api": "ec2.describe_vpn_connections()", "service": "ec2", "rationale": "Ensure VPN connections are encrypted to secure remote access."}, {"name": "ec2_vpn_connection_authorization_check", "boto3_api": "ec2.describe_vpn_connections()", "service": "ec2", "rationale": "Verify that all VPN connections are authorized before being established."}], "mapping_notes": "Existing function covers logging for VPN connections but does not address encryption or authorization requirements."}, {"compliance_id": "AC-18", "title": "Wireless Access", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "ec2_wireless_access_configuration_check", "boto3_api": "ec2.describe_network_interfaces()", "service": "ec2", "rationale": "Check configuration requirements for wireless access points."}, {"name": "ec2_wireless_access_authorization_check", "boto3_api": "ec2.describe_network_interfaces()", "service": "ec2", "rationale": "Ensure wireless access points are authorized before allowing connections."}], "mapping_notes": "No existing functions address wireless access configuration or authorization."}, {"compliance_id": "AC-19", "title": "Mobile Device Access", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "ec2_mobile_device_configuration_check", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "Verify configuration requirements for mobile devices accessing AWS resources."}, {"name": "ec2_mobile_device_authorization_check", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "Ensure mobile devices are authorized before connecting to AWS resources."}], "mapping_notes": "No existing functions cover mobile device configuration or authorization."}, {"compliance_id": "AC-20", "title": "Use of External Systems", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "ec2_external_system_access_check", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "Check for unauthorized access from external systems."}, {"name": "ec2_external_system_prohibition_check", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "Ensure prohibited external systems are not accessing AWS resources."}], "mapping_notes": "No existing functions address the use or prohibition of external systems."}, {"compliance_id": "AC-21", "title": "Information Sharing", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "s3_bucket_sharing_authorization_check", "boto3_api": "s3.get_bucket_acl()", "service": "s3", "rationale": "Ensure sharing partners are authorized for S3 bucket access."}, {"name": "s3_bucket_sharing_mechanism_check", "boto3_api": "s3.get_bucket_policy()", "service": "s3", "rationale": "Verify automated mechanisms assist in information sharing decisions."}], "mapping_notes": "No existing functions cover information sharing authorization or mechanisms."}]}}
{"key": "091d159d2c0239f3b6fe79754c29b36e5a8bab8824509c61d661bfbf92d5bcd5", "value": {"batch_results": [{"compliance_id": "AT-2", "title": "Security and Privacy Literacy Training", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AT-2 focuses on training and awareness, which cannot be programmatically checked using boto3 APIs. No existing functions apply."}, {"compliance_id": "AT-3", "title": "Role-Based Security and Privacy Training", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AT-3 involves role-based training, which is not programmatically verifiable through AWS resource configurations. No existing functions apply."}, {"compliance_id": "AT-4", "title": "Training Records Documentation and Monitoring", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AT-4 requires documentation and monitoring of training activities, which cannot be checked via AWS resource configurations. No existing functions apply."}, {"compliance_id": "AT-5", "title": "Withdrawn Control", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AT-5 is withdrawn and incorporated into PM-15, thus no mapping is required."}, {"compliance_id": "AT-6", "title": "Training Feedback", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AT-6 involves providing feedback on training results, which is not programmatically verifiable through AWS resource configurations. No existing functions apply."}]}}
{"key": "9ee59e004cbfc543e3a2832c8fc5c755f6cc7b69b03a272e3c4e81a3ee588b96", "value": {"batch_results": [{"compliance_id": "AU-1", "title": "Audit and Accountability Policy and Procedures", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AU-1 is focused on policy and procedural documentation, which cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "AU-1", "title": "Audit and Accountability Policy and Procedures", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "AU-1 is focused on policy and procedural documentation, which cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "AU-3", "title": "Content of Audit Records", "existing_functions_mapped": ["cloudtrail_cloudwatch_logging_enabled", "cloudtrail_log_file_validation_enabled", "cloudtrail_logs_s3_bucket_access_logging_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "cloudtrail_event_details_logging_enabled", "boto3_api": "cloudtrail.describe_trails()", "service": "cloudtrail", "rationale": "Ensure that CloudTrail is configured to log detailed event information including event type, source, and outcome."}], "mapping_notes": "Existing functions cover some aspects of audit logging, but detailed event information logging needs to be verified."}, {"compliance_id": "AU-4", "title": "Audit Log Storage Capacity", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "cloudwatch_log_group_storage_capacity_check", "boto3_api": "cloudwatch.describe_log_groups()", "service": "cloudwatch", "rationale": "Check if CloudWatch log groups have sufficient storage capacity allocated to meet retention requirements."}], "mapping_notes": "No existing functions directly address storage capacity allocation for audit logs."}, {"compliance_id": "AU-5", "title": "Response to Audit Logging Failures", "existing_functions_mapped": ["cloudwatch_alarm_for_unusual_events", "cloudwatch_alarm_for_resource_threshold"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "cloudwatch_alarm_for_audit_logging_failures", "boto3_api": "cloudwatch.describe_alarms()", "service": "cloudwatch", "rationale": "Ensure alarms are configured to alert on audit logging process failures."}], "mapping_notes": "Existing functions cover general alarm configurations, but specific alarms for audit logging failures need to be verified."}]}}
{"key": "ddb57a4906a3db955f1e707a5b2bf02f605225920c8b8b50271fe25aca59581f", "value": {"batch_results": [{"compliance_id": "AU-11", "title": "Retain audit records for organization-defined time period", "existing_functions_mapped": ["cloudtrail_log_file_validation_enabled", "cloudwatch_log_group_retention_policy_specific_days_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "cloudtrail_log_retention_period_check", "boto3_api": "cloudtrail.describe_trails()", "service": "cloudtrail", "rationale": "To ensure that CloudTrail logs are retained for the organization-defined time period."}], "mapping_notes": "Existing functions cover log validation and retention policy for CloudWatch logs, but specific retention period checks for CloudTrail logs are needed."}, {"compliance_id": "AU-12", "title": "Provide audit record generation capability", "existing_functions_mapped": ["cloudtrail_cloudwatch_logging_enabled", "cloudtrail_multi_region_enabled", "cloudtrail_s3_dataevents_read_enabled", "cloudtrail_s3_dataevents_write_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "cloudtrail_event_type_selection_check", "boto3_api": "cloudtrail.get_event_selectors()", "service": "cloudtrail", "rationale": "To verify that specific event types are selected for logging as per organizational requirements."}], "mapping_notes": "Existing functions cover general logging capabilities, but specific event type selection needs to be verified."}, {"compliance_id": "AU-13", "title": "Unauthorized disclosure of information", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "s3_bucket_public_access_check", "boto3_api": "s3.get_bucket_acl()", "service": "s3", "rationale": "To ensure that S3 buckets do not have public access that could lead to unauthorized disclosure."}, {"name": "ec2_security_group_open_ports_check", "boto3_api": "ec2.describe_security_groups()", "service": "ec2", "rationale": "To check for open ports in security groups that could lead to unauthorized access."}], "mapping_notes": "No existing functions directly address unauthorized disclosure; new checks for public access and open ports are needed."}, {"compliance_id": "AU-14", "title": "Session audit capability", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "cloudtrail_session_activity_logging_enabled", "boto3_api": "cloudtrail.describe_trails()", "service": "cloudtrail", "rationale": "To ensure session activities are logged for auditing purposes."}], "mapping_notes": "No existing functions cover session auditing; a new function to ensure session activity logging is needed."}, {"compliance_id": "", "title": "", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "No control description provided, unable to map or suggest functions."}]}}
{"key": "c09daafc5a647f6bcc22f01abe6e7c4ea73282e4e3c00fbb468c9e95a5f7a49b", "value": {"batch_results": [{"compliance_id": "CA-5", "title": "Plan of Action and Milestones", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "This control is focused on documentation and planning, which cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "CA-6", "title": "Authorization", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Authorization is a management decision and cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "CA-7", "title": "Continuous Monitoring", "existing_functions_mapped": ["cloudwatch_alarm_actions_enabled", "cloudwatch_log_group_all_services_logging_enabled", "cloudwatch_log_metric_filter_unauthorized_api_calls", "cloudwatch_log_metric_filter_sign_in_without_mfa"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "cloudwatch_continuous_monitoring_strategy_check", "boto3_api": "cloudwatch.describe_alarms()", "service": "cloudwatch", "rationale": "To ensure continuous monitoring strategy is implemented by checking the configuration of alarms and metrics."}], "mapping_notes": "Existing functions cover some aspects of continuous monitoring, but a specific strategy check is needed."}, {"compliance_id": "CA-8", "title": "Penetration Testing", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Penetration testing is a manual process and cannot be programmatically checked using boto3 APIs."}, {"compliance_id": "CA-9", "title": "Internal System Connections", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "Internal system connections are about network architecture and cannot be programmatically checked using boto3 APIs."}]}}
{"key": "b8584c9f46d138fc754072818791ed195d5b2db2f866e94dd9581bf4d115bf4e", "value": {"batch_results": [{"compliance_id": "CM-6", "title": "Configuration Settings", "existing_functions_mapped": ["ec2_default_security_group_no_inbound_rules", "ec2_default_security_group_no_outbound_rules", "cloudtrail_logs_s3_bucket_is_not_publicly_accessible", "cloudtrail_log_file_validation_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "ec2_instance_security_group_configuration_check", "boto3_api": "ec2.describe_security_groups()", "service": "ec2", "rationale": "Check security group configurations for EC2 instances to ensure they meet security requirements."}, {"name": "rds_instance_parameter_group_settings_check", "boto3_api": "rds.describe_db_instances()", "service": "rds", "rationale": "Verify RDS instance parameter group settings to ensure they align with security best practices."}], "mapping_notes": "Existing functions cover some aspects of configuration settings, such as security group rules and S3 bucket accessibility, but do not cover all configuration parameters across different services."}, {"compliance_id": "CM-7", "title": "Least Functionality", "existing_functions_mapped": ["ec2_default_security_group_no_inbound_rules", "ec2_default_security_group_no_outbound_rules", "cloudwatch_log_metric_filter_unauthorized_api_calls"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "ec2_instance_unused_ports_check", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "Identify and report unused or unnecessary open ports on EC2 instances."}, {"name": "lambda_function_unused_permissions_check", "boto3_api": "lambda.get_policy()", "service": "lambda", "rationale": "Ensure Lambda functions do not have unused permissions that could be exploited."}], "mapping_notes": "Current functions address some aspects of least functionality, such as security group rules and unauthorized API calls, but do not fully cover the restriction of unnecessary services and ports."}, {"compliance_id": "CM-8", "title": "Information System Component Inventory", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "ec2_instance_inventory_check", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "Create an inventory of EC2 instances, including instance IDs, types, and associated tags."}, {"name": "rds_instance_inventory_check", "boto3_api": "rds.describe_db_instances()", "service": "rds", "rationale": "Compile an inventory of RDS instances, including instance identifiers, types, and configurations."}], "mapping_notes": "No existing functions directly address the creation of a comprehensive inventory of system components across AWS services."}, {"compliance_id": "CM-8", "title": "Information System Component Inventory", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "s3_bucket_inventory_check", "boto3_api": "s3.list_buckets()", "service": "s3", "rationale": "Generate an inventory of S3 buckets, including bucket names, regions, and access policies."}, {"name": "iam_user_inventory_check", "boto3_api": "iam.list_users()", "service": "iam", "rationale": "Create an inventory of IAM users, including user names, creation dates, and attached policies."}], "mapping_notes": "No existing functions directly address the creation of a comprehensive inventory of system components across AWS services."}, {"compliance_id": "", "title": "", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [], "mapping_notes": "No control description provided, unable to map or suggest functions."}]}}
{"key": "158a9af695f2f61fc370d206d6bbf1b70b5e254558ef077cb96715e288d845a6", "value": {"batch_results": [{"compliance_id": "control_id_1", "title": "Control Title 1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "s3_bucket_encryption_enabled", "boto3_api": "s3.get_bucket_encryption()", "service": "s3", "rationale": "Ensure that S3 buckets have encryption enabled to protect data at rest."}], "mapping_notes": "No existing functions directly address S3 bucket encryption."}, {"compliance_id": "control_id_2", "title": "Control Title 2", "existing_functions_mapped": ["cloudtrail_kms_encryption_enabled"], "coverage_assessment": "complete", "new_functions_needed": [], "mapping_notes": "The existing function 'cloudtrail_kms_encryption_enabled' fully covers the requirement for CloudTrail log encryption."}, {"compliance_id": "control_id_3", "title": "Control Title 3", "existing_functions_mapped": ["ec2_default_security_group_no_inbound_rules", "ec2_default_security_group_no_outbound_rules"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "ec2_security_group_no_public_access", "boto3_api": "ec2.describe_security_groups()", "service": "ec2", "rationale": "Ensure that EC2 security groups do not allow public access to sensitive ports."}], "mapping_notes": "Existing functions cover default security group rules, but do not address public access for all security groups."}, {"compliance_id": "control_id_4", "title": "Control Title 4", "existing_functions_mapped": ["iam_user_mfa_enabled"], "coverage_assessment": "complete", "new_functions_needed": [], "mapping_notes": "The function 'iam_user_mfa_enabled' ensures that MFA is enabled for IAM users, fully covering the control requirement."}, {"compliance_id": "control_id_5", "title": "Control Title 5", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "rds_instance_backup_enabled", "boto3_api": "rds.describe_db_instances()", "service": "rds", "rationale": "Verify that RDS instances have automated backups enabled to ensure data recovery."}], "mapping_notes": "No existing functions address the requirement for RDS instance backups."}]}}
{"key": "ddf5fab0c61915aac488e551b8b399d683e96a01352c0c28aad7682a8003d907", "value": {"batch_results": [{"compliance_id": "control_id_1", "title": "Control Title 1", "existing_functions_mapped": [], "coverage_assessment": "none", "new_functions_needed": [{"name": "new_function_name_1", "boto3_api": "ec2.describe_instances()", "service": "ec2", "rationale": "This function is needed to check if EC2 instances are configured according to the control requirements."}], "mapping_notes": "No existing functions were found that match the control requirements."}, {"compliance_id": "control_id_2", "title": "Control Title 2", "existing_functions_mapped": ["cloudtrail_kms_encryption_enabled"], "coverage_assessment": "partial", "new_functions_needed": [{"name": "s3_bucket_encryption_enabled", "boto3_api": "s3.get_bucket_encryption()", "service": "s3", "rationale": "This function is needed to ensure that S3 buckets are encrypted, which is part of the control requirements."}], "mapping_notes": "The existing function covers part of the control related to CloudTrail, but additional checks for S3 bucket encryption are needed."}]}}
