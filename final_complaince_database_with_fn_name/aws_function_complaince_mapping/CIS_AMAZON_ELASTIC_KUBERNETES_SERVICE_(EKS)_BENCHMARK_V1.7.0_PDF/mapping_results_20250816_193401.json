{
  "metadata": {
    "generated_at": "2025-08-16T19:52:10.900220",
    "compliance_framework": "CIS_AMAZON_ELASTIC_KUBERNETES_SERVICE_(EKS)_BENCHMARK_V1.7.0_PDF.json",
    "prowler_database_functions": 672,
    "processing_stats": {
      "total_items": 46,
      "processed": 46,
      "skipped_manual": 0,
      "mapped_complete": 6,
      "mapped_partial": 16,
      "mapped_none": 24,
      "new_functions_suggested": 55
    }
  },
  "mapping_results": [
    {
      "compliance_id": "2.1.1",
      "title": "Enable audit Logs",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_control_plane_logs_exported_to_cloudwatch",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if the EKS control plane logs for a cluster are exported to a CloudWatch Log Group for persistence"
        },
        {
          "name": "eks_api_server_audit_logs_recorded",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if the API server audit logs record all accepted and rejected requests in the cluster"
        }
      ],
      "mapping_notes": "Existing functions related to CloudTrail and CloudWatch logging were mapped as they partially cover the requirement of enabling audit logs. However, specific checks for EKS control plane logs and API server audit logs are missing, hence new functions are suggested."
    },
    {
      "compliance_id": "2.1.2",
      "title": "Ensure audit logs are collected and managed",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "kubernetes_audit_logs_collection_check",
          "boto3_api": "N/A",
          "service": "kubernetes",
          "rationale": "To ensure that audit logs are collected and managed across all Kubernetes components"
        },
        {
          "name": "kubernetes_audit_logs_management_check",
          "boto3_api": "N/A",
          "service": "kubernetes",
          "rationale": "To ensure that audit logs are managed in accordance with the enterprise's audit log management process"
        }
      ],
      "mapping_notes": "Existing functions related to CloudTrail and CloudWatch logs were mapped as they are relevant to the collection and management of audit logs. However, as the compliance item specifically mentions Kubernetes components, new functions are suggested to cover this aspect."
    },
    {
      "compliance_id": "3.1.1",
      "title": "Ensure that the kubeconfig file permissions are set to 644 or more restrictive",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_kubeconfig_file_permission_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check the permissions of the kubeconfig file for the EKS cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the permissions of the kubeconfig file for the EKS cluster."
    },
    {
      "compliance_id": "3.1.2",
      "title": "Ensure that the kubelet kubeconfig file ownership is set to root:root",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_kubelet_kubeconfig_file_ownership_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check the ownership of the kubelet kubeconfig file in an EKS cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function is suggested to check the ownership of the kubelet kubeconfig file in an EKS cluster."
    },
    {
      "compliance_id": "3.1.3",
      "title": "Ensure that the kubelet configuration file has permissions set to 644 or more restrictive",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_kubelet_config_file_permission_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check the permissions of the kubelet configuration file in an EKS cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the permissions of the kubelet configuration file in an EKS cluster."
    },
    {
      "compliance_id": "3.1.4",
      "title": "Ensure that the kubelet configuration file ownership is set to root:root",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_kubelet_config_file_ownership_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check the ownership of the kubelet configuration file in the EKS cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'eks_kubelet_config_file_ownership_check' is suggested to check the ownership of the kubelet configuration file in the EKS cluster."
    },
    {
      "compliance_id": "3.2.1",
      "title": "Ensure that the Anonymous Auth is Not Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubelet_server_anonymous_auth_disabled",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if anonymous authentication is disabled on the Kubelet server"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring anonymous authentication is not enabled on the Kubelet server. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "3.2.2",
      "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubernetes_cluster_authorization_mode_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check the authorization mode of the Kubernetes cluster and ensure it is not set to AlwaysAllow"
        }
      ],
      "mapping_notes": "No existing functions in the database match the compliance requirement. A new function is suggested to check the authorization mode of the Kubernetes cluster."
    },
    {
      "compliance_id": "3.2.3",
      "title": "Ensure that a Client CA File is Configured",
      "existing_functions_mapped": [
        "eks_cluster_client_ca_file_configured"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The compliance item is fully covered by the existing function 'eks_cluster_client_ca_file_configured' which checks if a Client CA file is configured for an EKS cluster."
    },
    {
      "compliance_id": "3.2.4",
      "title": "Ensure that the --read-only-port is disabled",
      "existing_functions_mapped": [
        "ecs_task_definitions_read_only_port_disabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_read_only_port_disabled' appears to cover the requirement of ensuring that the read-only port is disabled."
    },
    {
      "compliance_id": "3.2.5",
      "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "streaming_connection_idle_timeout_check",
          "boto3_api": "appstream.describe_fleets()",
          "service": "appstream",
          "rationale": "This function is needed to check the --streaming-connection-idle-timeout argument in AWS AppStream fleets"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the --streaming-connection-idle-timeout argument in AWS AppStream fleets."
    },
    {
      "compliance_id": "3.2.6",
      "title": "Ensure that the --make-iptables-util-chains argument is set to true",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubelet_make_iptables_util_chains_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if the --make-iptables-util-chains argument is set to true in the Kubelet configuration"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the Kubelet configuration for the --make-iptables-util-chains argument."
    },
    {
      "compliance_id": "3.2.7",
      "title": "Ensure that the --eventRecordQPS argument is set to 0 or a level which ensures appropriate event capture",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kubelet_config_event_record_qps_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check the --eventRecordQPS argument in the Kubelet configuration to ensure it is set to 0 or a level which ensures appropriate event capture"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the --eventRecordQPS argument in the Kubelet configuration."
    },
    {
      "compliance_id": "3.2.8",
      "title": "Ensure that the --rotate-certificates argument is not present or is set to true",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_cluster_rotate_certificates_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if the --rotate-certificates argument is not present or is set to true in the EKS cluster configuration"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function is suggested to check the --rotate-certificates argument in the EKS cluster configuration."
    },
    {
      "compliance_id": "3.2.9",
      "title": "Ensure that the RotateKubeletServerCertificate argument is set to true",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_cluster_rotate_kubelet_server_certificate_enabled",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if the RotateKubeletServerCertificate argument is set to true in the EKS cluster configuration"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function is suggested to check the RotateKubeletServerCertificate argument in the EKS cluster configuration."
    },
    {
      "compliance_id": "4.1.1",
      "title": "Ensure that the cluster-admin role is only used where required",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_role_cluster_admin_usage_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "This function is needed to check the usage of the cluster-admin role and ensure it is only used where required"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring the cluster-admin role is only used where required. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "4.1.2",
      "title": "Minimize access to secrets",
      "existing_functions_mapped": [
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables",
        "cloudformation_stack_outputs_find_secrets",
        "autoscaling_find_secrets_ec2_launch_configuration",
        "ec2_instance_secrets_user_data",
        "ecs_task_definitions_no_environment_secrets",
        "codebuild_project_no_secrets_in_variables",
        "cloudwatch_log_group_no_secrets_in_logs",
        "ec2_launch_template_no_secrets"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_secrets_access_restriction",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if access to Kubernetes secrets is restricted to a minimal set of users"
        },
        {
          "name": "eks_secrets_encryption_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if Kubernetes secrets are encrypted"
        }
      ],
      "mapping_notes": "Existing functions cover the general principle of minimizing access to secrets in various AWS services, but none specifically address the Kubernetes secrets mentioned in the compliance item. Therefore, new functions are suggested to cover this gap."
    },
    {
      "compliance_id": "4.1.3",
      "title": "Minimize wildcard use in Roles and ClusterRoles",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_role_minimize_wildcard_use",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "This function is needed to list all IAM roles and check if any role uses wildcard '*' in its policy. If so, it should raise a flag."
        },
        {
          "name": "kubernetes_clusterrole_minimize_wildcard_use",
          "boto3_api": "eks.list_cluster_roles()",
          "service": "eks",
          "rationale": "This function is needed to list all Kubernetes ClusterRoles and check if any ClusterRole uses wildcard '*' in its policy. If so, it should raise a flag."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of minimizing wildcard use in IAM Roles and Kubernetes ClusterRoles. Therefore, two new functions are suggested to cover this requirement."
    },
    {
      "compliance_id": "4.1.4",
      "title": "Minimize access to create pods",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_namespace_pod_creation_access_restriction",
          "boto3_api": "eks.list_namespaces()",
          "service": "eks",
          "rationale": "To check if the access to create new pods in a namespace is restricted to the smallest possible group of users"
        },
        {
          "name": "eks_pod_security_policies_enforced",
          "boto3_api": "eks.describe_pod_security_policy()",
          "service": "eks",
          "rationale": "To check if Pod Security Policies are implemented to restrict access to sensitive data"
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of minimizing access to create pods in a namespace. New functions are suggested to check the access restrictions on pod creation and enforcement of Pod Security Policies."
    },
    {
      "compliance_id": "4.1.5",
      "title": "Ensure that default service accounts are not actively used.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_default_service_accounts_activity_check",
          "boto3_api": "iam.list_account_aliases()",
          "service": "iam",
          "rationale": "This function is needed to check if the default service accounts are actively used."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of checking the activity of default service accounts. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "4.1.6",
      "title": "Ensure that Service Account Tokens are only mounted where necessary",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_pod_service_account_token_mount_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if service account tokens are only mounted where necessary in EKS pods"
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring that service account tokens are only mounted where necessary. A new function, eks_pod_service_account_token_mount_check, is suggested to fill this gap."
    },
    {
      "compliance_id": "4.1.7",
      "title": "Cluster Access Manager API to streamline and enhance the management of access controls within EKS clusters",
      "existing_functions_mapped": [
        "eks_cluster_access_manager_api_access_policies_assigned",
        "eks_cluster_access_manager_api_audit",
        "eks_cluster_access_manager_api_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_cluster_access_manager_api_simplified_access_management",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if the Cluster Access Manager API is being used to manage access directly through the Amazon EKS API, eliminating the need to modify the aws-auth ConfigMap manually."
        },
        {
          "name": "eks_cluster_access_manager_api_enhanced_security_controls",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if administrators are assigning predefined AWS-managed Kubernetes permissions, known as 'access policies,' to IAM principals."
        },
        {
          "name": "eks_cluster_access_manager_api_improved_visibility_and_auditing",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if the API offers better visibility into cluster access configurations, facilitating easier auditing and compliance checks."
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage for the compliance item. They cover the existence and auditing of the Cluster Access Manager API, and whether access policies are assigned. However, they do not cover the specific advantages of using the Cluster Access Manager API mentioned in the compliance item description. Therefore, new functions are suggested to cover these aspects."
    },
    {
      "compliance_id": "4.1.8",
      "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_cluster_limit_bind_permission",
          "boto3_api": "eks.list_clusters()",
          "service": "eks",
          "rationale": "To check if the Bind permission is limited in the Kubernetes cluster"
        },
        {
          "name": "eks_cluster_limit_impersonate_permission",
          "boto3_api": "eks.list_clusters()",
          "service": "eks",
          "rationale": "To check if the Impersonate permission is limited in the Kubernetes cluster"
        },
        {
          "name": "eks_cluster_limit_escalate_permission",
          "boto3_api": "eks.list_clusters()",
          "service": "eks",
          "rationale": "To check if the Escalate permission is limited in the Kubernetes cluster"
        }
      ],
      "mapping_notes": "No existing functions could be mapped to this compliance requirement. New functions are suggested to check the Bind, Impersonate and Escalate permissions in the Kubernetes cluster."
    },
    {
      "compliance_id": "4.2.1",
      "title": "Minimize the admission of privileged containers",
      "existing_functions_mapped": [
        "ecs_task_definitions_no_privileged_containers"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_pod_security_policy_no_privileged_containers",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To ensure that Kubernetes clusters in EKS do not allow privileged containers"
        },
        {
          "name": "fargate_task_definition_no_privileged_containers",
          "boto3_api": "ecs.describe_task_definition()",
          "service": "ecs",
          "rationale": "To ensure that Fargate task definitions do not allow privileged containers"
        }
      ],
      "mapping_notes": "The existing function 'ecs_task_definitions_no_privileged_containers' covers the ECS service. However, AWS also offers other container services like EKS and Fargate, which are not covered by the existing functions. Therefore, new functions are suggested to cover these services."
    },
    {
      "compliance_id": "4.2.2",
      "title": "Minimize the admission of containers wishing to share the host process ID namespace",
      "existing_functions_mapped": [
        "ecs_task_definitions_host_pid_namespace_check"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_host_pid_namespace_check' appears to cover the compliance requirement of minimizing the admission of containers wishing to share the host process ID namespace. It checks whether the hostPID flag is set to true, which is the specific behavior that the compliance item is designed to prevent."
    },
    {
      "compliance_id": "4.2.3",
      "title": "Minimize the admission of containers wishing to share the host IPC namespace",
      "existing_functions_mapped": [
        "ecs_task_definitions_host_ipc_not_shared"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_host_ipc_not_shared' checks if the host IPC namespace is not shared, which aligns with the compliance requirement of minimizing the admission of containers wishing to share the host IPC namespace."
    },
    {
      "compliance_id": "4.2.4",
      "title": "Minimize the admission of containers wishing to share the host network namespace",
      "existing_functions_mapped": [
        "ecs_task_definitions_host_networking_mode_users"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecs_task_definitions_host_network_flag_check",
          "boto3_api": "ecs.describe_task_definition()",
          "service": "ecs",
          "rationale": "This function is needed to check if the hostNetwork flag is set to true in the task definition, which is not covered by the existing functions."
        }
      ],
      "mapping_notes": "The existing function 'ecs_task_definitions_host_networking_mode_users' partially covers the compliance requirement as it checks for users of the host networking mode in ECS task definitions. However, it does not specifically check for the hostNetwork flag being set to true. Therefore, a new function 'ecs_task_definitions_host_network_flag_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "4.2.5",
      "title": "Minimize the admission of containers with allowPrivilegeEscalation",
      "existing_functions_mapped": [
        "ecs_task_definitions_no_allow_privilege_escalation",
        "ecs_task_definitions_no_privileged_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ecs_task_definitions_no_allow_privilege_escalation' and 'ecs_task_definitions_no_privileged_containers' cover the compliance requirement of minimizing the admission of containers with allowPrivilegeEscalation. No new functions are needed."
    },
    {
      "compliance_id": "4.3.1",
      "title": "Ensure CNI plugin supports network policies.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_cluster_cni_plugin_network_policies_support",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if the CNI plugin used in the EKS cluster supports network policies."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to checking the support of network policies in a CNI plugin for Kubernetes. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "4.3.2",
      "title": "Ensure that all Namespaces have Network Policies defined",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_namespace_network_policy_check",
          "boto3_api": "eks.list_namespaces()",
          "service": "eks",
          "rationale": "This function is needed to check if all namespaces in EKS have network policies defined"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'eks_namespace_network_policy_check' is suggested to check if all namespaces in EKS have network policies defined."
    },
    {
      "compliance_id": "4.4.1",
      "title": "Prefer using secrets as files over secrets as environment variables",
      "existing_functions_mapped": [
        "awslambda_function_no_secrets_in_variables",
        "ecs_task_definitions_no_environment_secrets",
        "codebuild_project_no_secrets_in_variables"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "kubernetes_secrets_as_files_preferred",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if Kubernetes secrets are being used as files instead of environment variables"
        }
      ],
      "mapping_notes": "Existing functions cover the aspect of not using secrets in environment variables for AWS Lambda, ECS task definitions, and CodeBuild projects. However, there is no specific function to check if Kubernetes secrets are being used as files instead of environment variables in EKS clusters. Hence, a new function 'kubernetes_secrets_as_files_preferred' is suggested."
    },
    {
      "compliance_id": "4.4.2",
      "title": "Consider external secret storage",
      "existing_functions_mapped": [
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables",
        "cloudformation_stack_outputs_find_secrets",
        "autoscaling_find_secrets_ec2_launch_configuration",
        "ec2_instance_secrets_user_data",
        "ec2_launch_template_no_secrets",
        "codebuild_project_no_secrets_in_variables",
        "cloudwatch_log_group_no_secrets_in_logs",
        "ecs_task_definitions_no_environment_secrets"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "secrets_manager_external_secrets_storage_check",
          "boto3_api": "secretsmanager.describe_secret()",
          "service": "secretsmanager",
          "rationale": "To check if secrets are stored in AWS Secrets Manager, which is an external secrets storage and management system"
        },
        {
          "name": "secrets_manager_secrets_encryption_check",
          "boto3_api": "secretsmanager.describe_secret()",
          "service": "secretsmanager",
          "rationale": "To check if secrets stored in AWS Secrets Manager are encrypted"
        },
        {
          "name": "secrets_manager_secrets_access_audit_check",
          "boto3_api": "cloudtrail.lookup_events()",
          "service": "cloudtrail",
          "rationale": "To audit access to and use of secrets stored in AWS Secrets Manager"
        },
        {
          "name": "secrets_manager_secrets_rotation_check",
          "boto3_api": "secretsmanager.describe_secret()",
          "service": "secretsmanager",
          "rationale": "To check if secrets stored in AWS Secrets Manager are configured for rotation"
        }
      ],
      "mapping_notes": "Existing functions were mapped that check for secrets in various AWS resources. However, these functions do not specifically check for the use of an external secrets storage and management system, auditing of access to and use of secrets, encryption of secrets, and rotation of secrets. Therefore, new functions are needed to cover these requirements."
    },
    {
      "compliance_id": "4.5.1",
      "title": "Create administrative boundaries between resources using namespaces",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_namespace_isolation_check",
          "boto3_api": "eks.list_namespaces()",
          "service": "eks",
          "rationale": "This function is needed to check if namespaces are being used to isolate Kubernetes objects in EKS clusters"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the use of namespaces for resource isolation in Kubernetes. A new function, eks_namespace_isolation_check, is suggested to fill this gap."
    },
    {
      "compliance_id": "4.5.2",
      "title": "The default namespace should not be used",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_default_namespace_usage_check",
          "boto3_api": "eks.list_namespaces()",
          "service": "eks",
          "rationale": "This function is needed to check if the default namespace is being used in the EKS cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'eks_default_namespace_usage_check' is suggested to check if the default namespace is being used in the EKS cluster."
    },
    {
      "compliance_id": "5.1.1",
      "title": "Ensure Image Vulnerability Scanning using Amazon ECR image scanning or a third party provider",
      "existing_functions_mapped": [
        "ecr_repositories_scan_images_on_push_enabled",
        "ecr_repositories_scan_vulnerabilities_in_latest_image"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_image_vulnerability_scanning_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To ensure that images being deployed to Amazon EKS are scanned for vulnerabilities, a new function is needed to check the EKS cluster configuration for image scanning settings."
        }
      ],
      "mapping_notes": "Existing functions cover the requirement for ECR image scanning, but there is a gap in checking the EKS cluster configuration for image scanning settings. Hence, a new function is suggested."
    },
    {
      "compliance_id": "5.1.2",
      "title": "Minimize user access to Amazon ECR",
      "existing_functions_mapped": [
        "ecr_repositories_not_publicly_accessible",
        "ecr_user_access_restriction"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecr_limit_build_image_access",
          "boto3_api": "ecr.get_repository_policy()",
          "service": "ecr",
          "rationale": "To ensure that only authorized personnel and service accounts can interact with build images"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance requirement by ensuring that ECR repositories are not publicly accessible and user access is restricted. However, there is a gap in limiting interaction with build images to only authorized personnel and service accounts, hence the need for a new function."
    },
    {
      "compliance_id": "5.1.3",
      "title": "Minimize cluster access to read-only for Amazon ECR",
      "existing_functions_mapped": [
        "ecr_repositories_not_publicly_accessible",
        "ecr_user_access_restriction"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecr_cluster_service_account_read_only_access",
          "boto3_api": "iam.get_policy()",
          "service": "iam",
          "rationale": "To ensure that the Cluster Service Account is configured with a policy that only allows read-only access to Amazon ECR"
        }
      ],
      "mapping_notes": "Existing functions 'ecr_repositories_not_publicly_accessible' and 'ecr_user_access_restriction' partially cover the compliance requirement by ensuring that ECR repositories are not publicly accessible and that user access to ECR is restricted. However, there is no existing function to check that the Cluster Service Account is configured with read-only access to Amazon ECR, hence a new function 'ecr_cluster_service_account_read_only_access' is suggested."
    },
    {
      "compliance_id": "5.1.4",
      "title": "Minimize Container Registries to only those approved",
      "existing_functions_mapped": [
        "ecr_repositories_approved_registry_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecr_registry_approval_status_check",
          "boto3_api": "ecr.describe_repositories()",
          "service": "ecr",
          "rationale": "This function is needed to check if the ECR registry is approved or not"
        }
      ],
      "mapping_notes": "The existing function 'ecr_repositories_approved_registry_check' partially covers the compliance requirement. However, it only checks if the repositories are from an approved registry, not if the registry itself is approved. Therefore, a new function 'ecr_registry_approval_status_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "5.2.1",
      "title": "Prefer using dedicated EKS Service Accounts",
      "existing_functions_mapped": [
        "eks_cluster_iam_authenticator_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_service_account_dedicated_check",
          "boto3_api": "eks.list_service_accounts()",
          "service": "eks",
          "rationale": "This function is needed to check if each Kubernetes workload is provisioned with a dedicated Service account."
        }
      ],
      "mapping_notes": "The existing function 'eks_cluster_iam_authenticator_enabled' partially covers the compliance requirement as it checks for IAM authentication. However, it does not specifically check if each Kubernetes workload is provisioned with a dedicated Service account. Hence, a new function 'eks_service_account_dedicated_check' is suggested."
    },
    {
      "compliance_id": "5.3.1",
      "title": "Ensure Kubernetes Secrets are encrypted using Customer Master Keys (CMKs) managed in AWS KMS",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_cluster_secrets_encryption_check",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To check if the Kubernetes secrets in the EKS cluster are encrypted using CMKs managed in AWS KMS"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring Kubernetes secrets are encrypted using CMKs managed in AWS KMS. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "5.4.1",
      "title": "Restrict Access to the Control Plane Endpoint",
      "existing_functions_mapped": [
        "eks_cluster_control_plane_endpoint_private_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'eks_cluster_control_plane_endpoint_private_access' directly addresses the compliance requirement of restricting access to the cluster's control plane to only an allowlist of authorized IPs."
    },
    {
      "compliance_id": "5.4.2",
      "title": "Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled",
      "existing_functions_mapped": [
        "eks_cluster_control_plane_endpoint_private_access"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_cluster_public_access_disabled",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to ensure that the Kubernetes API is not accessible from outside the node network, as per the compliance requirement."
        }
      ],
      "mapping_notes": "The existing function 'eks_cluster_control_plane_endpoint_private_access' partially covers the compliance requirement by ensuring that the EKS cluster control plane endpoint is privately accessible. However, there is no existing function to check if public access is disabled for the EKS cluster. Therefore, a new function 'eks_cluster_public_access_disabled' is suggested."
    },
    {
      "compliance_id": "5.4.3",
      "title": "Ensure clusters are created with Private Nodes",
      "existing_functions_mapped": [
        "autoscaling_group_launch_configuration_no_public_ip",
        "ec2_launch_template_no_public_ip",
        "ecs_service_no_assign_public_ip",
        "ecs_task_set_no_assign_public_ip"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_cluster_nodes_private_ip_only",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To ensure that EKS clusters are created with nodes that only have private IP addresses"
        }
      ],
      "mapping_notes": "Existing functions cover the requirement for EC2 instances, ECS services, and ECS task sets to not have public IPs. However, there is no specific function to check that EKS clusters are created with nodes that only have private IP addresses. Hence, a new function is suggested."
    },
    {
      "compliance_id": "5.4.4",
      "title": "Ensure Network Policy is Enabled and set as appropriate",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "eks_cluster_network_policy_enabled",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if the network policy is enabled for the EKS cluster"
        },
        {
          "name": "eks_cluster_network_policy_appropriate",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "This function is needed to check if the network policy is set as appropriate for the EKS cluster"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. New functions are suggested to check if the network policy is enabled and set as appropriate for the EKS cluster."
    },
    {
      "compliance_id": "5.4.5",
      "title": "Encrypt traffic to HTTPS load balancers with TLS certificates",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elb_https_listener_tls_certificate_check",
          "boto3_api": "elbv2.describe_listeners()",
          "service": "elbv2",
          "rationale": "This function is needed to check if the HTTPS listeners of the load balancers are using TLS certificates for encryption."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the requirement of encrypting traffic to HTTPS load balancers with TLS certificates. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "5.5.1",
      "title": "Manage Kubernetes RBAC users with AWS IAM Authenticator for Kubernetes or Upgrade to AWS CLI v1.16.156 or greater",
      "existing_functions_mapped": [
        "eks_cluster_iam_authenticator_enabled",
        "aws_cli_version_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "eks_rbac_users_managed_with_iam_authenticator",
          "boto3_api": "eks.describe_cluster()",
          "service": "eks",
          "rationale": "To ensure that Kubernetes RBAC users are managed with AWS IAM Authenticator for Kubernetes"
        },
        {
          "name": "aws_cli_version_upgrade_check",
          "boto3_api": "ssm.get_parameter()",
          "service": "ssm",
          "rationale": "To check if AWS CLI has been upgraded to v1.16.156 or greater"
        }
      ],
      "mapping_notes": "The existing function 'eks_cluster_iam_authenticator_enabled' partially covers the requirement of managing Kubernetes RBAC users with AWS IAM Authenticator for Kubernetes. The function 'aws_cli_version_check' partially covers the requirement of upgrading AWS CLI to v1.16.156 or greater. However, there are no existing functions that fully cover these requirements, hence the need for new functions."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "eks_control_plane_logs_exported_to_cloudwatch",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if the EKS control plane logs for a cluster are exported to a CloudWatch Log Group for persistence"
    },
    {
      "name": "eks_api_server_audit_logs_recorded",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if the API server audit logs record all accepted and rejected requests in the cluster"
    },
    {
      "name": "kubernetes_audit_logs_collection_check",
      "boto3_api": "N/A",
      "service": "kubernetes",
      "rationale": "To ensure that audit logs are collected and managed across all Kubernetes components"
    },
    {
      "name": "kubernetes_audit_logs_management_check",
      "boto3_api": "N/A",
      "service": "kubernetes",
      "rationale": "To ensure that audit logs are managed in accordance with the enterprise's audit log management process"
    },
    {
      "name": "eks_kubeconfig_file_permission_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check the permissions of the kubeconfig file for the EKS cluster"
    },
    {
      "name": "eks_kubelet_kubeconfig_file_ownership_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check the ownership of the kubelet kubeconfig file in an EKS cluster"
    },
    {
      "name": "eks_kubelet_config_file_permission_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check the permissions of the kubelet configuration file in an EKS cluster"
    },
    {
      "name": "eks_kubelet_config_file_ownership_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check the ownership of the kubelet configuration file in the EKS cluster"
    },
    {
      "name": "kubelet_server_anonymous_auth_disabled",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if anonymous authentication is disabled on the Kubelet server"
    },
    {
      "name": "kubernetes_cluster_authorization_mode_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check the authorization mode of the Kubernetes cluster and ensure it is not set to AlwaysAllow"
    },
    {
      "name": "streaming_connection_idle_timeout_check",
      "boto3_api": "appstream.describe_fleets()",
      "service": "appstream",
      "rationale": "This function is needed to check the --streaming-connection-idle-timeout argument in AWS AppStream fleets"
    },
    {
      "name": "kubelet_make_iptables_util_chains_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if the --make-iptables-util-chains argument is set to true in the Kubelet configuration"
    },
    {
      "name": "kubelet_config_event_record_qps_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check the --eventRecordQPS argument in the Kubelet configuration to ensure it is set to 0 or a level which ensures appropriate event capture"
    },
    {
      "name": "eks_cluster_rotate_certificates_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if the --rotate-certificates argument is not present or is set to true in the EKS cluster configuration"
    },
    {
      "name": "eks_cluster_rotate_kubelet_server_certificate_enabled",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if the RotateKubeletServerCertificate argument is set to true in the EKS cluster configuration"
    },
    {
      "name": "iam_role_cluster_admin_usage_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "This function is needed to check the usage of the cluster-admin role and ensure it is only used where required"
    },
    {
      "name": "eks_secrets_access_restriction",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if access to Kubernetes secrets is restricted to a minimal set of users"
    },
    {
      "name": "eks_secrets_encryption_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if Kubernetes secrets are encrypted"
    },
    {
      "name": "iam_role_minimize_wildcard_use",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "This function is needed to list all IAM roles and check if any role uses wildcard '*' in its policy. If so, it should raise a flag."
    },
    {
      "name": "kubernetes_clusterrole_minimize_wildcard_use",
      "boto3_api": "eks.list_cluster_roles()",
      "service": "eks",
      "rationale": "This function is needed to list all Kubernetes ClusterRoles and check if any ClusterRole uses wildcard '*' in its policy. If so, it should raise a flag."
    },
    {
      "name": "eks_namespace_pod_creation_access_restriction",
      "boto3_api": "eks.list_namespaces()",
      "service": "eks",
      "rationale": "To check if the access to create new pods in a namespace is restricted to the smallest possible group of users"
    },
    {
      "name": "eks_pod_security_policies_enforced",
      "boto3_api": "eks.describe_pod_security_policy()",
      "service": "eks",
      "rationale": "To check if Pod Security Policies are implemented to restrict access to sensitive data"
    },
    {
      "name": "iam_default_service_accounts_activity_check",
      "boto3_api": "iam.list_account_aliases()",
      "service": "iam",
      "rationale": "This function is needed to check if the default service accounts are actively used."
    },
    {
      "name": "eks_pod_service_account_token_mount_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if service account tokens are only mounted where necessary in EKS pods"
    },
    {
      "name": "eks_cluster_access_manager_api_simplified_access_management",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if the Cluster Access Manager API is being used to manage access directly through the Amazon EKS API, eliminating the need to modify the aws-auth ConfigMap manually."
    },
    {
      "name": "eks_cluster_access_manager_api_enhanced_security_controls",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if administrators are assigning predefined AWS-managed Kubernetes permissions, known as 'access policies,' to IAM principals."
    },
    {
      "name": "eks_cluster_access_manager_api_improved_visibility_and_auditing",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if the API offers better visibility into cluster access configurations, facilitating easier auditing and compliance checks."
    },
    {
      "name": "eks_cluster_limit_bind_permission",
      "boto3_api": "eks.list_clusters()",
      "service": "eks",
      "rationale": "To check if the Bind permission is limited in the Kubernetes cluster"
    },
    {
      "name": "eks_cluster_limit_impersonate_permission",
      "boto3_api": "eks.list_clusters()",
      "service": "eks",
      "rationale": "To check if the Impersonate permission is limited in the Kubernetes cluster"
    },
    {
      "name": "eks_cluster_limit_escalate_permission",
      "boto3_api": "eks.list_clusters()",
      "service": "eks",
      "rationale": "To check if the Escalate permission is limited in the Kubernetes cluster"
    },
    {
      "name": "eks_pod_security_policy_no_privileged_containers",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To ensure that Kubernetes clusters in EKS do not allow privileged containers"
    },
    {
      "name": "fargate_task_definition_no_privileged_containers",
      "boto3_api": "ecs.describe_task_definition()",
      "service": "ecs",
      "rationale": "To ensure that Fargate task definitions do not allow privileged containers"
    },
    {
      "name": "ecs_task_definitions_host_network_flag_check",
      "boto3_api": "ecs.describe_task_definition()",
      "service": "ecs",
      "rationale": "This function is needed to check if the hostNetwork flag is set to true in the task definition, which is not covered by the existing functions."
    },
    {
      "name": "eks_cluster_cni_plugin_network_policies_support",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if the CNI plugin used in the EKS cluster supports network policies."
    },
    {
      "name": "eks_namespace_network_policy_check",
      "boto3_api": "eks.list_namespaces()",
      "service": "eks",
      "rationale": "This function is needed to check if all namespaces in EKS have network policies defined"
    },
    {
      "name": "kubernetes_secrets_as_files_preferred",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if Kubernetes secrets are being used as files instead of environment variables"
    },
    {
      "name": "secrets_manager_external_secrets_storage_check",
      "boto3_api": "secretsmanager.describe_secret()",
      "service": "secretsmanager",
      "rationale": "To check if secrets are stored in AWS Secrets Manager, which is an external secrets storage and management system"
    },
    {
      "name": "secrets_manager_secrets_encryption_check",
      "boto3_api": "secretsmanager.describe_secret()",
      "service": "secretsmanager",
      "rationale": "To check if secrets stored in AWS Secrets Manager are encrypted"
    },
    {
      "name": "secrets_manager_secrets_access_audit_check",
      "boto3_api": "cloudtrail.lookup_events()",
      "service": "cloudtrail",
      "rationale": "To audit access to and use of secrets stored in AWS Secrets Manager"
    },
    {
      "name": "secrets_manager_secrets_rotation_check",
      "boto3_api": "secretsmanager.describe_secret()",
      "service": "secretsmanager",
      "rationale": "To check if secrets stored in AWS Secrets Manager are configured for rotation"
    },
    {
      "name": "eks_namespace_isolation_check",
      "boto3_api": "eks.list_namespaces()",
      "service": "eks",
      "rationale": "This function is needed to check if namespaces are being used to isolate Kubernetes objects in EKS clusters"
    },
    {
      "name": "eks_default_namespace_usage_check",
      "boto3_api": "eks.list_namespaces()",
      "service": "eks",
      "rationale": "This function is needed to check if the default namespace is being used in the EKS cluster"
    },
    {
      "name": "eks_image_vulnerability_scanning_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To ensure that images being deployed to Amazon EKS are scanned for vulnerabilities, a new function is needed to check the EKS cluster configuration for image scanning settings."
    },
    {
      "name": "ecr_limit_build_image_access",
      "boto3_api": "ecr.get_repository_policy()",
      "service": "ecr",
      "rationale": "To ensure that only authorized personnel and service accounts can interact with build images"
    },
    {
      "name": "ecr_cluster_service_account_read_only_access",
      "boto3_api": "iam.get_policy()",
      "service": "iam",
      "rationale": "To ensure that the Cluster Service Account is configured with a policy that only allows read-only access to Amazon ECR"
    },
    {
      "name": "ecr_registry_approval_status_check",
      "boto3_api": "ecr.describe_repositories()",
      "service": "ecr",
      "rationale": "This function is needed to check if the ECR registry is approved or not"
    },
    {
      "name": "eks_service_account_dedicated_check",
      "boto3_api": "eks.list_service_accounts()",
      "service": "eks",
      "rationale": "This function is needed to check if each Kubernetes workload is provisioned with a dedicated Service account."
    },
    {
      "name": "eks_cluster_secrets_encryption_check",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To check if the Kubernetes secrets in the EKS cluster are encrypted using CMKs managed in AWS KMS"
    },
    {
      "name": "eks_cluster_public_access_disabled",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to ensure that the Kubernetes API is not accessible from outside the node network, as per the compliance requirement."
    },
    {
      "name": "eks_cluster_nodes_private_ip_only",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To ensure that EKS clusters are created with nodes that only have private IP addresses"
    },
    {
      "name": "eks_cluster_network_policy_enabled",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if the network policy is enabled for the EKS cluster"
    },
    {
      "name": "eks_cluster_network_policy_appropriate",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "This function is needed to check if the network policy is set as appropriate for the EKS cluster"
    },
    {
      "name": "elb_https_listener_tls_certificate_check",
      "boto3_api": "elbv2.describe_listeners()",
      "service": "elbv2",
      "rationale": "This function is needed to check if the HTTPS listeners of the load balancers are using TLS certificates for encryption."
    },
    {
      "name": "eks_rbac_users_managed_with_iam_authenticator",
      "boto3_api": "eks.describe_cluster()",
      "service": "eks",
      "rationale": "To ensure that Kubernetes RBAC users are managed with AWS IAM Authenticator for Kubernetes"
    },
    {
      "name": "aws_cli_version_upgrade_check",
      "boto3_api": "ssm.get_parameter()",
      "service": "ssm",
      "rationale": "To check if AWS CLI has been upgraded to v1.16.156 or greater"
    }
  ]
}