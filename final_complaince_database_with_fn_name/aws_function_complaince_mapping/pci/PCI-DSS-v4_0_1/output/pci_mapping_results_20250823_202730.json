{
  "metadata": {
    "generated_at": "2025-08-23T20:27:30.831231",
    "compliance_framework": "PCI DSS",
    "compliance_file": "PCI-DSS-v4_0_1.json",
    "prowler_database_functions": 1211,
    "processing_stats": {
      "total_items": 248,
      "processed": 208,
      "mapped_complete": 0,
      "mapped_partial": 39,
      "mapped_none": 169,
      "new_functions_suggested": 152,
      "test_mode": false,
      "batches_processed": 50,
      "cache_hits": 1
    },
    "model_used": "gpt-4o-mini",
    "fallback_model": "gpt-4o",
    "batch_size": 5
  },
  "mapping_results": [
    {
      "compliance_id": "1.1.1",
      "title": "PCI DSS 1.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 1.1.1 is about documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "1.1.2",
      "title": "PCI DSS 1.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 1.1.2 involves documentation of roles and responsibilities, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "1.2.1",
      "title": "PCI DSS 1.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_security_group_ruleset_configuration_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "Check if security group rulesets are defined and implemented according to configuration standards."
        }
      ],
      "mapping_notes": "No existing functions directly check NSC ruleset configurations. Suggested a new function to check security group rulesets."
    },
    {
      "compliance_id": "1.2.2",
      "title": "PCI DSS 1.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_network_configuration_change_tracking",
          "boto3_api": "ec2.describe_network_interfaces()",
          "service": "ec2",
          "rationale": "Track changes to network configurations to ensure they are approved and managed according to change control processes."
        }
      ],
      "mapping_notes": "No existing functions track changes to network configurations. Suggested a new function to track and verify changes."
    },
    {
      "compliance_id": "1.2.3",
      "title": "PCI DSS 1.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_network_diagram_accuracy_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "ec2",
          "rationale": "Ensure network diagrams are accurate and reflect current VPC configurations."
        }
      ],
      "mapping_notes": "No existing functions verify the accuracy of network diagrams. Suggested a new function to ensure diagrams match VPC configurations."
    },
    {
      "compliance_id": "1.2.4",
      "title": "PCI DSS 1.2.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_flow_logs_enabled",
          "boto3_api": "ec2.describe_flow_logs()",
          "service": "ec2",
          "rationale": "To ensure that all data flows across VPCs are logged and can be used to maintain an accurate data-flow diagram."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement for maintaining an accurate data-flow diagram. Enabling VPC flow logs can help track data flows across networks."
    },
    {
      "compliance_id": "1.2.5",
      "title": "PCI DSS 1.2.5",
      "existing_functions_mapped": [
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_approved_ports_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To verify that only approved ports are open in security groups."
        }
      ],
      "mapping_notes": "Existing functions cover monitoring changes to network configurations but do not verify that only approved services, protocols, and ports are in use."
    },
    {
      "compliance_id": "1.2.6",
      "title": "PCI DSS 1.2.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_insecure_protocols_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To identify and ensure security features are implemented for insecure protocols in use."
        }
      ],
      "mapping_notes": "No existing functions address the need to define and implement security features for insecure services, protocols, and ports."
    },
    {
      "compliance_id": "1.2.7",
      "title": "PCI DSS 1.2.7",
      "existing_functions_mapped": [
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_configuration_review",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure security group configurations are reviewed periodically for relevance and effectiveness."
        }
      ],
      "mapping_notes": "Existing functions monitor changes but do not ensure periodic reviews of configurations for relevance and effectiveness."
    },
    {
      "compliance_id": "1.2.8",
      "title": "PCI DSS 1.2.8",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_configuration_file_integrity_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure configuration files for security groups are secured from unauthorized access and consistent with active configurations."
        }
      ],
      "mapping_notes": "No existing functions ensure that configuration files for NSCs are secured and consistent with active configurations."
    },
    {
      "compliance_id": "2.1.2",
      "title": "PCI DSS 2.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about documentation and understanding of roles and responsibilities, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "2.2.1",
      "title": "PCI DSS 2.2.1",
      "existing_functions_mapped": [
        "ec2_ami_approved_check",
        "ec2_ami_encryption_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_configuration_compliance_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify that EC2 instances are configured according to defined security standards."
        }
      ],
      "mapping_notes": "Existing functions partially cover the requirement by checking AMI compliance, but additional checks are needed for instance configuration compliance."
    },
    {
      "compliance_id": "2.2.2",
      "title": "PCI DSS 2.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_default_account_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that default accounts are not used or have changed passwords on EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions address the management of vendor default accounts, requiring a new function to check for default account usage."
    },
    {
      "compliance_id": "2.2.3",
      "title": "PCI DSS 2.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_function_isolation_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify that EC2 instances are configured to isolate functions with different security levels."
        }
      ],
      "mapping_notes": "No existing functions address the isolation of primary functions with different security levels, necessitating a new function."
    },
    {
      "compliance_id": "2.2.4",
      "title": "PCI DSS 2.2.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_unnecessary_services_disabled_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that unnecessary services and protocols are disabled on EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions check for unnecessary services, protocols, or daemons, requiring a new function to ensure these are disabled."
    },
    {
      "compliance_id": "2.2.5",
      "title": "PCI DSS 2.2.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_insecure_protocols_disabled",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check EC2 instances for insecure protocols like telnet or HTTP."
        },
        {
          "name": "rds_instance_insecure_protocols_disabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "Check RDS instances for insecure protocols like non-SSL connections."
        }
      ],
      "mapping_notes": "No existing functions directly address the presence of insecure services, protocols, or daemons."
    },
    {
      "compliance_id": "2.2.6",
      "title": "PCI DSS 2.2.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_security_parameters_configured",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Verify EC2 instances have security parameters configured to prevent misuse."
        },
        {
          "name": "rds_instance_security_parameters_configured",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "Verify RDS instances have security parameters configured to prevent misuse."
        }
      ],
      "mapping_notes": "No existing functions directly address the configuration of system security parameters to prevent misuse."
    },
    {
      "compliance_id": "2.2.7",
      "title": "PCI DSS 2.2.7",
      "existing_functions_mapped": [
        "cloudfront_distributions_https_enabled",
        "cloudfront_distributions_https_sni_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_non_console_access_encrypted",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Ensure EC2 instances use encrypted protocols for non-console administrative access."
        }
      ],
      "mapping_notes": "Existing functions cover HTTPS for CloudFront but do not address non-console administrative access for other services."
    },
    {
      "compliance_id": "2.3.1",
      "title": "PCI DSS 2.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_default_security_settings_changed",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Verify that default security settings on EC2 instances are changed from vendor defaults."
        }
      ],
      "mapping_notes": "No existing functions address changing wireless vendor defaults."
    },
    {
      "compliance_id": "2.3.2",
      "title": "PCI DSS 2.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_wireless_encryption_key_rotation",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Ensure wireless encryption keys are rotated when personnel changes occur."
        }
      ],
      "mapping_notes": "No existing functions address the rotation of wireless encryption keys."
    },
    {
      "compliance_id": "3.1.1",
      "title": "PCI DSS 3.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 3.1.1 is about documentation and maintenance of policies, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "3.1.2",
      "title": "PCI DSS 3.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 3.1.2 involves documentation of roles and responsibilities, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "3.2.1",
      "title": "PCI DSS 3.2.1",
      "existing_functions_mapped": [
        "cloudtrail_log_retention_period_check",
        "s3_bucket_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_data_retention_policy_check",
          "boto3_api": "s3.get_bucket_lifecycle_configuration()",
          "service": "s3",
          "rationale": "To ensure that data retention policies are enforced on S3 buckets."
        }
      ],
      "mapping_notes": "Existing functions partially cover data retention and encryption, but specific checks for data retention policies are needed."
    },
    {
      "compliance_id": "3.3.1",
      "title": "PCI DSS 3.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_sad_storage_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To verify that sensitive authentication data is not stored in RDS instances after authorization."
        }
      ],
      "mapping_notes": "No existing functions directly address the prohibition of storing SAD after authorization."
    },
    {
      "compliance_id": "3.3.1.1",
      "title": "PCI DSS 3.3.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_track_data_storage_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that full track data is not stored in RDS instances post-authorization."
        }
      ],
      "mapping_notes": "No existing functions address the storage of full track data, requiring a new function to check RDS configurations."
    },
    {
      "compliance_id": "3.3.1.2",
      "title": "PCI DSS 3.3.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "dynamodb_table_no_card_verification_code_storage",
          "boto3_api": "dynamodb.scan()",
          "service": "dynamodb",
          "rationale": "To ensure that card verification codes are not stored in DynamoDB tables after authorization."
        },
        {
          "name": "s3_bucket_no_card_verification_code_storage",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "To verify that card verification codes are not stored in S3 buckets after authorization."
        }
      ],
      "mapping_notes": "No existing functions directly address the storage of card verification codes. New functions are needed to check data stores for unauthorized storage."
    },
    {
      "compliance_id": "3.3.1.3",
      "title": "PCI DSS 3.3.1.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "dynamodb_table_no_pin_storage",
          "boto3_api": "dynamodb.scan()",
          "service": "dynamodb",
          "rationale": "To ensure that PINs and PIN blocks are not stored in DynamoDB tables after authorization."
        },
        {
          "name": "s3_bucket_no_pin_storage",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "To verify that PINs and PIN blocks are not stored in S3 buckets after authorization."
        }
      ],
      "mapping_notes": "No existing functions directly address the storage of PINs and PIN blocks. New functions are needed to check data stores for unauthorized storage."
    },
    {
      "compliance_id": "3.3.2",
      "title": "PCI DSS 3.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_sad_encryption_check",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To ensure that sensitive authentication data (SAD) stored in S3 is encrypted using strong cryptography."
        },
        {
          "name": "rds_instance_sad_encryption_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To verify that SAD stored in RDS instances is encrypted using strong cryptography."
        }
      ],
      "mapping_notes": "No existing functions directly address the encryption of SAD prior to authorization. New functions are needed to ensure encryption compliance."
    },
    {
      "compliance_id": "3.3.3",
      "title": "PCI DSS 3.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_sad_storage_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To verify that any stored SAD in RDS is encrypted and justified by a legitimate business need."
        },
        {
          "name": "s3_bucket_sad_storage_check",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "To ensure that any stored SAD in S3 is encrypted and justified by a legitimate business need."
        }
      ],
      "mapping_notes": "No existing functions directly address the storage and encryption of SAD for issuers. New functions are needed to ensure compliance."
    },
    {
      "compliance_id": "3.4.1",
      "title": "PCI DSS 3.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_role_pan_display_access_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To verify that only roles with a legitimate business need can access full PAN displays."
        },
        {
          "name": "cloudwatch_log_pan_masking_check",
          "boto3_api": "cloudwatch.describe_log_groups()",
          "service": "cloudwatch",
          "rationale": "To ensure that PANs are masked in logs and only accessible to authorized personnel."
        }
      ],
      "mapping_notes": "No existing functions directly address the masking of PANs. New functions are needed to ensure that PANs are displayed only to authorized roles."
    },
    {
      "compliance_id": "3.4.2",
      "title": "PCI DSS 3.4.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_remote_access_copy_restriction",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check EC2 instances for remote access configurations that prevent unauthorized copying of PAN."
        }
      ],
      "mapping_notes": "No existing functions directly address remote access restrictions for copying PAN."
    },
    {
      "compliance_id": "3.5.1",
      "title": "PCI DSS 3.5.1",
      "existing_functions_mapped": [
        "dynamodb_table_encryption_at_rest_enabled",
        "dynamodb_table_in_transit_encryption_enabled",
        "documentdb_cluster_storage_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_instance_pan_unreadable_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "Ensure PAN is rendered unreadable in RDS instances using encryption or other methods."
        }
      ],
      "mapping_notes": "Existing functions cover encryption at rest but do not specifically address PAN unreadability across all storage types."
    },
    {
      "compliance_id": "3.5.1.1",
      "title": "PCI DSS 3.5.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_keyed_hashing_for_pan_check",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "Verify that keyed cryptographic hashes are used for PAN with proper key management."
        }
      ],
      "mapping_notes": "No existing functions address keyed cryptographic hashing for PAN."
    },
    {
      "compliance_id": "3.5.1.2",
      "title": "PCI DSS 3.5.1.2",
      "existing_functions_mapped": [
        "ebs_snapshot_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_disk_level_encryption_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "Ensure disk-level encryption is used appropriately for PAN storage."
        }
      ],
      "mapping_notes": "Existing functions cover encryption but do not ensure compliance with specific PCI DSS requirements for disk-level encryption."
    },
    {
      "compliance_id": "3.5.1.3",
      "title": "PCI DSS 3.5.1.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_disk_encryption_access_control_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "Verify that disk encryption access is managed independently of OS authentication."
        }
      ],
      "mapping_notes": "No existing functions address independent access control for disk encryption."
    },
    {
      "compliance_id": "3.7.1",
      "title": "PCI DSS 3.7.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_generation_strong_algorithms_check",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "To ensure that KMS keys are generated using strong cryptographic algorithms."
        }
      ],
      "mapping_notes": "No existing functions directly check the generation of strong cryptographic keys."
    },
    {
      "compliance_id": "3.7.2",
      "title": "PCI DSS 3.7.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_secure_distribution_check",
          "boto3_api": "kms.list_keys()",
          "service": "kms",
          "rationale": "To verify that cryptographic keys are distributed securely to authorized entities."
        }
      ],
      "mapping_notes": "No existing functions directly check the secure distribution of cryptographic keys."
    },
    {
      "compliance_id": "3.7.3",
      "title": "PCI DSS 3.7.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_secure_storage_check",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "To ensure that cryptographic keys are stored securely, potentially using HSMs."
        }
      ],
      "mapping_notes": "No existing functions directly check the secure storage of cryptographic keys."
    },
    {
      "compliance_id": "3.7.4",
      "title": "PCI DSS 3.7.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_cryptoperiod_management_check",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "To verify that cryptographic keys are changed at the end of their cryptoperiod."
        }
      ],
      "mapping_notes": "No existing functions directly check the management of cryptoperiods for cryptographic keys."
    },
    {
      "compliance_id": "3.7.5",
      "title": "PCI DSS 3.7.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_retirement_and_replacement_check",
          "boto3_api": "kms.list_retirable_grants()",
          "service": "kms",
          "rationale": "To ensure that keys are retired, replaced, or destroyed when necessary."
        }
      ],
      "mapping_notes": "No existing functions directly check the retirement, replacement, or destruction of cryptographic keys."
    },
    {
      "compliance_id": "3.7.6",
      "title": "PCI DSS 3.7.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_split_knowledge_dual_control_check",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "To ensure that KMS keys are managed with split knowledge and dual control, preventing any single person from having full access to the key."
        }
      ],
      "mapping_notes": "No existing functions directly address split knowledge and dual control for KMS keys."
    },
    {
      "compliance_id": "3.7.7",
      "title": "PCI DSS 3.7.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_unauthorized_substitution_prevention_check",
          "boto3_api": "kms.list_keys()",
          "service": "kms",
          "rationale": "To verify that unauthorized substitution of cryptographic keys is prevented by ensuring only authorized keys are used."
        }
      ],
      "mapping_notes": "No existing functions address the prevention of unauthorized substitution of cryptographic keys."
    },
    {
      "compliance_id": "3.7.8",
      "title": "PCI DSS 3.7.8",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_custodian_acknowledgment_check",
          "boto3_api": "kms.get_key_policy()",
          "service": "kms",
          "rationale": "To ensure that key custodians have acknowledged their responsibilities, which can be verified through key policies."
        }
      ],
      "mapping_notes": "No existing functions verify key custodian acknowledgment of responsibilities."
    },
    {
      "compliance_id": "3.7.9",
      "title": "PCI DSS 3.7.9",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_key_sharing_guidance_check",
          "boto3_api": "kms.list_keys()",
          "service": "kms",
          "rationale": "To ensure that service providers document and distribute guidance on secure key management to customers."
        }
      ],
      "mapping_notes": "No existing functions ensure that service providers provide key management guidance to customers."
    },
    {
      "compliance_id": "4.1.1",
      "title": "PCI DSS 4.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "4.1.2",
      "title": "PCI DSS 4.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about documentation and understanding of roles and responsibilities, which cannot be programmatically checked using AWS configurations."
    },
    {
      "compliance_id": "4.2.1",
      "title": "PCI DSS 4.2.1",
      "existing_functions_mapped": [
        "cloudfront_distributions_https_enabled",
        "cloudfront_distributions_using_deprecated_ssl_protocols",
        "cloudfront_distributions_custom_ssl_certificate",
        "cloudfront_distributions_https_sni_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_secure_protocols_enabled",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure EC2 instances are configured to use secure protocols for data transmission."
        },
        {
          "name": "elb_listener_secure_protocols_enabled",
          "boto3_api": "elb.describe_load_balancers()",
          "service": "elb",
          "rationale": "To verify that ELB listeners are configured to use secure protocols."
        }
      ],
      "mapping_notes": "Existing functions cover CloudFront distributions but do not address EC2 instances or ELB configurations."
    },
    {
      "compliance_id": "4.2.1.1",
      "title": "PCI DSS 4.2.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "acm_certificates_inventory_check",
          "boto3_api": "acm.list_certificates()",
          "service": "acm",
          "rationale": "To maintain an inventory of ACM certificates and ensure they are up-to-date and trusted."
        }
      ],
      "mapping_notes": "No existing functions address the maintenance of an inventory of trusted keys and certificates."
    },
    {
      "compliance_id": "4.2.1.2",
      "title": "PCI DSS 4.2.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_vpc_wireless_network_security_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "ec2",
          "rationale": "To verify that wireless networks connected to the VPC use strong cryptography for authentication and transmission."
        }
      ],
      "mapping_notes": "No existing functions specifically address wireless network security configurations."
    },
    {
      "compliance_id": "4.2.2",
      "title": "PCI DSS 4.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "sns_topic_encryption_enabled",
          "boto3_api": "sns.get_topic_attributes()",
          "service": "sns",
          "rationale": "To ensure SNS topics used for messaging are encrypted to protect PAN during transmission."
        }
      ],
      "mapping_notes": "No existing functions address encryption of end-user messaging technologies like SNS."
    },
    {
      "compliance_id": "5.1.1",
      "title": "PCI DSS 5.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 5.1.1 is about documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "5.1.2",
      "title": "PCI DSS 5.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 5.1.2 involves documentation of roles and responsibilities, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "5.2.1",
      "title": "PCI DSS 5.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_antivirus_installed",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check if antivirus software is installed on EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions directly check for anti-malware solutions on system components. A new function is suggested to verify antivirus installation on EC2 instances."
    },
    {
      "compliance_id": "5.2.2",
      "title": "PCI DSS 5.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 5.2.2 involves verifying anti-malware solution capabilities, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "5.2.3",
      "title": "PCI DSS 5.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Requirement 5.2.3 involves documentation and evaluation processes, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "5.2.3.1",
      "title": "PCI DSS 5.2.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves risk analysis and periodic evaluations, which are not directly checkable via AWS resource configurations."
    },
    {
      "compliance_id": "5.3.1",
      "title": "PCI DSS 5.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Anti-malware solution configurations and updates are typically managed outside of AWS and are not directly checkable via AWS resource configurations."
    },
    {
      "compliance_id": "5.3.2",
      "title": "PCI DSS 5.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Anti-malware solution configurations for periodic and real-time scans are not directly checkable via AWS resource configurations."
    },
    {
      "compliance_id": "5.3.2.1",
      "title": "PCI DSS 5.3.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves risk analysis and periodic scan frequency, which are not directly checkable via AWS resource configurations."
    },
    {
      "compliance_id": "5.3.3",
      "title": "PCI DSS 5.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Anti-malware solution configurations for removable media are not directly checkable via AWS resource configurations."
    },
    {
      "compliance_id": "5.3.4",
      "title": "PCI DSS 5.3.4",
      "existing_functions_mapped": [
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_group_all_services_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_antimalware_logging_enabled",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify that anti-malware logging is enabled on EC2 instances."
        }
      ],
      "mapping_notes": "Existing functions cover log retention and general logging but do not specifically address anti-malware logging."
    },
    {
      "compliance_id": "5.3.5",
      "title": "PCI DSS 5.3.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_antimalware_protection_immutable",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure anti-malware protection settings cannot be altered by unauthorized users."
        }
      ],
      "mapping_notes": "No existing functions address the immutability of anti-malware configurations."
    },
    {
      "compliance_id": "5.4.1",
      "title": "PCI DSS 5.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ses_email_phishing_protection_enabled",
          "boto3_api": "ses.get_identity_dkim_attributes()",
          "service": "ses",
          "rationale": "To verify that DKIM is enabled for email phishing protection."
        },
        {
          "name": "ses_email_spf_protection_enabled",
          "boto3_api": "ses.get_identity_verification_attributes()",
          "service": "ses",
          "rationale": "To verify that SPF is enabled for email phishing protection."
        }
      ],
      "mapping_notes": "No existing functions address phishing protection mechanisms."
    },
    {
      "compliance_id": "6.1.1",
      "title": "PCI DSS 6.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "6.1.2",
      "title": "PCI DSS 6.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to documentation and roles, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "6.2.1",
      "title": "PCI DSS 6.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "codebuild_project_secure_coding_practices_check",
          "boto3_api": "codebuild.list_projects()",
          "service": "codebuild",
          "rationale": "Check if CodeBuild projects are configured to follow secure coding practices."
        }
      ],
      "mapping_notes": "No existing functions directly address secure software development lifecycle practices."
    },
    {
      "compliance_id": "6.2.2",
      "title": "PCI DSS 6.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Training and personnel procedures are not checkable via boto3 APIs."
    },
    {
      "compliance_id": "6.2.3",
      "title": "PCI DSS 6.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "codebuild_project_code_review_check",
          "boto3_api": "codebuild.list_projects()",
          "service": "codebuild",
          "rationale": "Ensure CodeBuild projects have code review processes in place before deployment."
        }
      ],
      "mapping_notes": "No existing functions directly address code review processes for custom software."
    },
    {
      "compliance_id": "6.2.3.1",
      "title": "PCI DSS 6.2.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Manual code review processes are not checkable via boto3 APIs."
    },
    {
      "compliance_id": "6.2.4",
      "title": "PCI DSS 6.2.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "codebuild_project_vulnerability_scan_enabled",
          "boto3_api": "codebuild.list_projects()",
          "service": "codebuild",
          "rationale": "Ensure CodeBuild projects have vulnerability scanning enabled to detect common software attacks."
        }
      ],
      "mapping_notes": "No existing functions directly address prevention or mitigation of common software attacks in custom software."
    },
    {
      "compliance_id": "6.4.3",
      "title": "PCI DSS 6.4.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudfront_distribution_csp_policy_check",
          "boto3_api": "cloudfront.get_distribution_config()",
          "service": "cloudfront",
          "rationale": "To ensure that Content Security Policy (CSP) is applied to CloudFront distributions to restrict unauthorized script execution."
        },
        {
          "name": "cloudfront_distribution_sri_enabled",
          "boto3_api": "cloudfront.get_distribution_config()",
          "service": "cloudfront",
          "rationale": "To verify that Sub-resource Integrity (SRI) is enabled for scripts served through CloudFront distributions."
        }
      ],
      "mapping_notes": "No existing functions directly address script authorization and integrity for payment pages. New functions are needed to check CSP and SRI configurations."
    },
    {
      "compliance_id": "6.5.1",
      "title": "PCI DSS 6.5.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudtrail_change_management_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that changes to system components are logged and can be traced back to change control documentation."
        }
      ],
      "mapping_notes": "No existing functions cover change management procedures. Logging changes via CloudTrail can help trace changes to documentation."
    },
    {
      "compliance_id": "6.5.2",
      "title": "PCI DSS 6.5.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "config_recorder_significant_change_check",
          "boto3_api": "config.describe_configuration_recorders()",
          "service": "config",
          "rationale": "To verify that significant changes are recorded and assessed for PCI DSS compliance."
        }
      ],
      "mapping_notes": "No existing functions ensure that significant changes are compliant with PCI DSS. AWS Config can be used to track and verify changes."
    },
    {
      "compliance_id": "6.5.3",
      "title": "PCI DSS 6.5.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_pre_production_separation_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "vpc",
          "rationale": "To ensure that pre-production and production environments are separated at the network level."
        },
        {
          "name": "iam_access_control_pre_production_check",
          "boto3_api": "iam.get_policy()",
          "service": "iam",
          "rationale": "To verify that access controls enforce separation between pre-production and production environments."
        }
      ],
      "mapping_notes": "No existing functions ensure separation of environments. New functions are needed to check VPC and IAM configurations."
    },
    {
      "compliance_id": "6.5.4",
      "title": "PCI DSS 6.5.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_role_separation_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure roles and functions are separated between production and pre-production environments."
        }
      ],
      "mapping_notes": "No existing functions ensure role separation. IAM role checks can help enforce separation of duties."
    },
    {
      "compliance_id": "6.5.5",
      "title": "PCI DSS 6.5.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_cde_tag_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "Check if RDS instances in pre-production environments are tagged as part of the CDE."
        },
        {
          "name": "ec2_instance_cde_tag_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check if EC2 instances in pre-production environments are tagged as part of the CDE."
        }
      ],
      "mapping_notes": "No existing functions directly address the use of live PANs in pre-production environments. New functions are needed to verify if resources are tagged as part of the CDE."
    },
    {
      "compliance_id": "6.5.6",
      "title": "PCI DSS 6.5.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_test_data_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check EC2 instances for the presence of test data before going into production."
        },
        {
          "name": "rds_instance_test_accounts_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "Check RDS instances for the presence of test accounts before going into production."
        }
      ],
      "mapping_notes": "No existing functions address the removal of test data and accounts from system components before production. New functions are needed to verify the absence of test data and accounts."
    },
    {
      "compliance_id": "7.1.1",
      "title": "PCI DSS 7.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement focuses on documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "7.1.2",
      "title": "PCI DSS 7.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement focuses on documentation and role assignment, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "7.2.1",
      "title": "PCI DSS 7.2.1",
      "existing_functions_mapped": [
        "iam_user_least_privilege_policy_check",
        "iam_role_least_privilege_policy_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_access_control_model_check",
          "boto3_api": "iam.get_account_authorization_details()",
          "service": "iam",
          "rationale": "Verify that the access control model is defined and implemented according to least privilege and need-to-know principles."
        }
      ],
      "mapping_notes": "Existing functions partially cover the requirement by checking least privilege policies. Additional checks are needed to ensure a comprehensive access control model is defined and implemented."
    },
    {
      "compliance_id": "8.2.2",
      "title": "PCI DSS 8.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_shared_credentials_usage_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To identify and manage shared credentials, ensuring they are used only in exceptional circumstances and actions are attributable to individual users."
        }
      ],
      "mapping_notes": "No existing functions directly address the management of shared credentials and their exceptional use."
    },
    {
      "compliance_id": "8.2.3",
      "title": "PCI DSS 8.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_service_provider_unique_authentication_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To ensure service providers use unique authentication factors for each customer premises."
        }
      ],
      "mapping_notes": "No existing functions ensure unique authentication factors for service providers with remote access to customer premises."
    },
    {
      "compliance_id": "8.2.4",
      "title": "PCI DSS 8.2.4",
      "existing_functions_mapped": [
        "iam_user_mfa_enabled",
        "iam_user_access_key_rotation_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_user_lifecycle_management_check",
          "boto3_api": "iam.get_account_authorization_details()",
          "service": "iam",
          "rationale": "To verify that user ID lifecycle events are authorized and managed according to documented approvals."
        }
      ],
      "mapping_notes": "Existing functions partially cover user management but do not fully address lifecycle management and authorization."
    },
    {
      "compliance_id": "8.2.5",
      "title": "PCI DSS 8.2.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_terminated_user_access_revocation_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To ensure access for terminated users is immediately revoked."
        }
      ],
      "mapping_notes": "No existing functions ensure immediate revocation of access for terminated users."
    },
    {
      "compliance_id": "8.2.6",
      "title": "PCI DSS 8.2.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_inactive_user_account_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To identify and disable or remove inactive user accounts within 90 days of inactivity."
        }
      ],
      "mapping_notes": "No existing functions address the removal or disabling of inactive user accounts within the specified timeframe."
    },
    {
      "compliance_id": "8.2.7",
      "title": "PCI DSS 8.2.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_access_last_used_check",
          "boto3_api": "iam.get_access_key_last_used()",
          "service": "iam",
          "rationale": "To monitor the last used time of IAM user access keys to ensure they are only enabled during necessary periods."
        },
        {
          "name": "cloudtrail_third_party_access_monitoring",
          "boto3_api": "cloudtrail.lookup_events()",
          "service": "cloudtrail",
          "rationale": "To monitor and detect unexpected activity from third-party accounts."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement to manage third-party accounts for remote access. New functions are needed to monitor access and detect unexpected activity."
    },
    {
      "compliance_id": "8.2.8",
      "title": "PCI DSS 8.2.8",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_idle_timeout_check",
          "boto3_api": "ec2.describe_instance_attribute()",
          "service": "ec2",
          "rationale": "To verify that EC2 instances have session idle timeouts configured to 15 minutes or less."
        }
      ],
      "mapping_notes": "No existing functions check for session idle timeouts. A new function is needed to ensure compliance with the 15-minute re-authentication requirement."
    },
    {
      "compliance_id": "8.3.1",
      "title": "PCI DSS 8.3.1",
      "existing_functions_mapped": [
        "iam_user_mfa_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'iam_user_mfa_enabled' partially covers the requirement by ensuring MFA is enabled, which is a form of strong authentication."
    },
    {
      "compliance_id": "8.3.2",
      "title": "PCI DSS 8.3.2",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_kms_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_password_policy_encryption_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To ensure that password policies enforce strong cryptography for storage and transmission."
        }
      ],
      "mapping_notes": "Existing functions ensure logs are encrypted and not publicly accessible, but do not cover encryption of authentication factors during transmission and storage."
    },
    {
      "compliance_id": "8.3.3",
      "title": "PCI DSS 8.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_identity_verification_before_modification",
          "boto3_api": "iam.get_user()",
          "service": "iam",
          "rationale": "To verify user identity before allowing modifications to authentication factors."
        }
      ],
      "mapping_notes": "No existing functions verify user identity before modifying authentication factors. A new function is needed to ensure identity verification."
    },
    {
      "compliance_id": "8.3.4",
      "title": "PCI DSS 8.3.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_account_lockout_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "Check if IAM user accounts are locked out after a specified number of failed login attempts and remain locked for a specified duration."
        }
      ],
      "mapping_notes": "No existing functions directly address account lockout policies for IAM users."
    },
    {
      "compliance_id": "8.3.5",
      "title": "PCI DSS 8.3.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_password_reset_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "Ensure that IAM user passwords are set to a unique value upon reset and require immediate change after first use."
        }
      ],
      "mapping_notes": "No existing functions cover the requirement for unique password setting and forced change after first use."
    },
    {
      "compliance_id": "8.3.6",
      "title": "PCI DSS 8.3.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_password_complexity_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "Verify that IAM user passwords meet complexity requirements, including minimum length and character types."
        }
      ],
      "mapping_notes": "No existing functions address password complexity requirements for IAM users."
    },
    {
      "compliance_id": "8.3.7",
      "title": "PCI DSS 8.3.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_password_history_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "Ensure that IAM user passwords cannot be reused within a specified number of previous passwords."
        }
      ],
      "mapping_notes": "No existing functions cover password history policies for IAM users."
    },
    {
      "compliance_id": "8.3.8",
      "title": "PCI DSS 8.3.8",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation and user communication, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "8.3.9",
      "title": "PCI DSS 8.3.9",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_password_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To ensure that passwords are changed at least once every 90 days or that dynamic analysis of account security posture is implemented."
        }
      ],
      "mapping_notes": "No existing functions directly address password change frequency or dynamic security posture analysis."
    },
    {
      "compliance_id": "8.3.10",
      "title": "PCI DSS 8.3.10",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves providing guidance to customers, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "8.3.10.1",
      "title": "PCI DSS 8.3.10.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_password_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To ensure that passwords are changed at least once every 90 days or that dynamic analysis of account security posture is implemented."
        }
      ],
      "mapping_notes": "No existing functions directly address password change frequency or dynamic security posture analysis for service providers."
    },
    {
      "compliance_id": "8.3.11",
      "title": "PCI DSS 8.3.11",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_mfa_device_check",
          "boto3_api": "iam.list_mfa_devices()",
          "service": "iam",
          "rationale": "To verify that MFA devices are assigned to individual users and not shared among multiple users."
        }
      ],
      "mapping_notes": "No existing functions directly address the assignment and control of authentication factors like tokens or smart cards."
    },
    {
      "compliance_id": "8.4.1",
      "title": "PCI DSS 8.4.1",
      "existing_functions_mapped": [
        "aws_edr_iam_mfa_enforced_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_admin_mfa_enforced_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To ensure MFA is enforced specifically for administrative users accessing the CDE."
        }
      ],
      "mapping_notes": "Existing function checks for MFA enforcement but does not specifically target administrative access to the CDE."
    },
    {
      "compliance_id": "8.6.3",
      "title": "PCI DSS 8.6.3",
      "existing_functions_mapped": [
        "aurora_password_rotation_check",
        "documentdb_instance_user_roles_permissions_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_user_password_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To ensure IAM user passwords meet complexity and rotation requirements."
        }
      ],
      "mapping_notes": "Existing functions cover password rotation for specific services but do not address IAM user password policies comprehensively."
    },
    {
      "compliance_id": "9.1.1",
      "title": "PCI DSS 9.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "9.1.2",
      "title": "PCI DSS 9.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation and role assignment, which are not checkable via boto3 APIs."
    },
    {
      "compliance_id": "9.2.1",
      "title": "PCI DSS 9.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_physical_access_control_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To verify security groups are configured to restrict physical access to systems in the CDE."
        }
      ],
      "mapping_notes": "Physical access controls are not directly checkable via AWS APIs, but security group configurations can be reviewed for indirect control."
    },
    {
      "compliance_id": "9.2.1.1",
      "title": "PCI DSS 9.2.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_physical_access_monitoring_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure physical access monitoring logs are enabled and retained for at least three months."
        }
      ],
      "mapping_notes": "Monitoring physical access with video cameras or access control mechanisms is not directly checkable via AWS APIs, but log retention can be verified."
    },
    {
      "compliance_id": "9.2.2",
      "title": "PCI DSS 9.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to physical security controls, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.2.3",
      "title": "PCI DSS 9.2.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical access restrictions to hardware, which is outside the scope of AWS API checks."
    },
    {
      "compliance_id": "9.2.4",
      "title": "PCI DSS 9.2.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about physical console access, which cannot be verified through AWS APIs."
    },
    {
      "compliance_id": "9.3.1",
      "title": "PCI DSS 9.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical access management procedures, which are not applicable to AWS API checks."
    },
    {
      "compliance_id": "9.3.1.1",
      "title": "PCI DSS 9.3.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about physical access control based on job function, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.3.2",
      "title": "PCI DSS 9.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to physical security and visitor management, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.3.3",
      "title": "PCI DSS 9.3.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical security and visitor badge management, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.3.4",
      "title": "PCI DSS 9.3.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves maintaining physical visitor logs, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.4.1",
      "title": "PCI DSS 9.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical security of media, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.4.1.1",
      "title": "PCI DSS 9.4.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical security of offline media backups, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.4.5.1",
      "title": "PCI DSS 9.4.5.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_cardholder_data_inventory_check",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "To verify that inventories of electronic media with cardholder data are conducted at least once every 12 months."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement to inventory electronic media with cardholder data."
    },
    {
      "compliance_id": "9.4.6",
      "title": "PCI DSS 9.4.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to physical destruction of hard-copy materials, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.4.7",
      "title": "PCI DSS 9.4.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_ebs_volume_secure_deletion_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "To ensure that electronic media with cardholder data is destroyed or rendered unrecoverable when no longer needed."
        }
      ],
      "mapping_notes": "No existing functions directly address the secure deletion of electronic media with cardholder data."
    },
    {
      "compliance_id": "9.5.1",
      "title": "PCI DSS 9.5.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical security and inspection of POI devices, which cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.5.1.1",
      "title": "PCI DSS 9.5.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Maintaining an up-to-date list of POI devices is a manual process and cannot be programmatically checked using AWS APIs."
    },
    {
      "compliance_id": "9.5.1.2",
      "title": "PCI DSS 9.5.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves physical inspection of POI devices, which cannot be programmatically checked using AWS services."
    },
    {
      "compliance_id": "9.5.1.2.1",
      "title": "PCI DSS 9.5.1.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves defining inspection frequency based on risk analysis, which is not applicable to AWS resource configurations."
    },
    {
      "compliance_id": "9.5.1.3",
      "title": "PCI DSS 9.5.1.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves personnel training and awareness, which cannot be programmatically checked using AWS services."
    },
    {
      "compliance_id": "10.1.1",
      "title": "PCI DSS 10.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation and management of policies, which cannot be programmatically checked using AWS services."
    },
    {
      "compliance_id": "10.1.2",
      "title": "PCI DSS 10.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation of roles and responsibilities, which cannot be programmatically checked using AWS services."
    },
    {
      "compliance_id": "10.2.1",
      "title": "PCI DSS 10.2.1",
      "existing_functions_mapped": [
        "cloudtrail_event_details_logging_enabled",
        "cloudtrail_event_type_selection_check",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudwatch_log_group_all_services_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_audit_logging_enabled",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Ensure audit logs are enabled for EC2 instances to capture all activities."
        },
        {
          "name": "rds_instance_audit_logging_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "Ensure audit logs are enabled for RDS instances to capture all activities."
        }
      ],
      "mapping_notes": "Existing functions cover general logging but do not ensure all system components have audit logs enabled."
    },
    {
      "compliance_id": "10.2.1.1",
      "title": "PCI DSS 10.2.1.1",
      "existing_functions_mapped": [
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_user_access_logging_enabled",
          "boto3_api": "rds.describe_db_log_files()",
          "service": "rds",
          "rationale": "Capture all individual user access to cardholder data in RDS."
        }
      ],
      "mapping_notes": "Existing functions cover S3 data events but do not ensure all user access to cardholder data is logged."
    },
    {
      "compliance_id": "10.2.1.2",
      "title": "PCI DSS 10.2.1.2",
      "existing_functions_mapped": [
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_security_group_changes_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_admin_actions_logging_enabled",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "Ensure all actions by users with administrative access are logged."
        }
      ],
      "mapping_notes": "Existing functions cover some administrative actions but do not ensure all are logged."
    },
    {
      "compliance_id": "10.2.1.3",
      "title": "PCI DSS 10.2.1.3",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_log_access_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "Capture all access to audit logs to detect potential tampering."
        }
      ],
      "mapping_notes": "Existing functions ensure logs are not publicly accessible but do not capture all access to logs."
    },
    {
      "compliance_id": "10.2.1.4",
      "title": "PCI DSS 10.2.1.4",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_unauthorized_api_calls"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_invalid_login_attempts_logging_enabled",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "Capture all invalid logical access attempts to detect unauthorized access."
        }
      ],
      "mapping_notes": "Existing functions cover unauthorized API calls but do not ensure all invalid access attempts are logged."
    },
    {
      "compliance_id": "10.2.1.5",
      "title": "PCI DSS 10.2.1.5",
      "existing_functions_mapped": [
        "cloudtrail_event_details_logging_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_event_type_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all changes to identification and authentication credentials are logged, including account creations and privilege escalations."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects of logging but do not specifically address all changes to identification and authentication credentials."
    },
    {
      "compliance_id": "10.2.1.6",
      "title": "PCI DSS 10.2.1.6",
      "existing_functions_mapped": [
        "cloudtrail_event_details_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_audit_log_initialization_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To capture all initialization and status changes of audit logs, ensuring that any disabling or pausing of logs is recorded."
        }
      ],
      "mapping_notes": "Existing functions provide some logging capabilities but do not specifically address the initialization and status changes of audit logs."
    },
    {
      "compliance_id": "10.2.1.7",
      "title": "PCI DSS 10.2.1.7",
      "existing_functions_mapped": [
        "cloudtrail_event_details_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_system_object_creation_deletion_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all creation and deletion of system-level objects are logged, which is crucial for identifying unauthorized modifications."
        }
      ],
      "mapping_notes": "Existing functions cover general event logging but do not specifically address the creation and deletion of system-level objects."
    },
    {
      "compliance_id": "10.2.2",
      "title": "PCI DSS 10.2.2",
      "existing_functions_mapped": [
        "cloudtrail_event_details_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_audit_event_details_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all necessary details for each auditable event are captured, including user identification, event type, and success/failure indications."
        }
      ],
      "mapping_notes": "Existing functions provide some logging capabilities but do not ensure that all required details for auditable events are captured."
    },
    {
      "compliance_id": "10.3.1",
      "title": "PCI DSS 10.3.1",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_audit_log_access_control_check",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To verify that read access to audit log files is limited to individuals with a job-related need, ensuring sensitive information is protected."
        }
      ],
      "mapping_notes": "Existing functions check for public access but do not specifically address access control based on job-related needs."
    },
    {
      "compliance_id": "10.3.2",
      "title": "PCI DSS 10.3.2",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_log_file_validation_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_versioning_enabled",
          "boto3_api": "s3.get_bucket_versioning()",
          "service": "s3",
          "rationale": "Ensure that S3 buckets storing logs have versioning enabled to prevent unauthorized modifications."
        }
      ],
      "mapping_notes": "Existing functions cover log file validation and public access restrictions, but do not ensure versioning to protect against modifications."
    },
    {
      "compliance_id": "10.3.3",
      "title": "PCI DSS 10.3.3",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_access_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_lifecycle_policy_for_log_backup",
          "boto3_api": "s3.get_bucket_lifecycle_configuration()",
          "service": "s3",
          "rationale": "Ensure that S3 buckets have lifecycle policies to back up logs to a secure location."
        }
      ],
      "mapping_notes": "Existing function ensures access logging but does not verify backup to a secure, central location."
    },
    {
      "compliance_id": "10.3.4",
      "title": "PCI DSS 10.3.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_integrity_check",
          "boto3_api": "cloudwatch.describe_log_groups()",
          "service": "cloudwatch",
          "rationale": "Implement file integrity monitoring on CloudWatch log groups to detect unauthorized changes."
        }
      ],
      "mapping_notes": "No existing functions address file integrity monitoring for audit logs."
    },
    {
      "compliance_id": "10.4.1",
      "title": "PCI DSS 10.4.1",
      "existing_functions_mapped": [
        "cloudwatch_log_group_all_services_logging_enabled",
        "cloudwatch_alarm_for_unusual_events"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_daily_review_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "Ensure daily review of logs by setting up alarms for critical log events."
        }
      ],
      "mapping_notes": "Existing functions cover logging and alarms for unusual events but do not ensure daily review."
    },
    {
      "compliance_id": "10.4.1.1",
      "title": "PCI DSS 10.4.1.1",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_automation_check",
          "boto3_api": "cloudwatch.describe_log_streams()",
          "service": "cloudwatch",
          "rationale": "Verify that automated mechanisms are in place for log reviews using CloudWatch."
        }
      ],
      "mapping_notes": "Existing functions cover metric filters and alarms but do not verify the automation of log reviews."
    },
    {
      "compliance_id": "10.4.2",
      "title": "PCI DSS 10.4.2",
      "existing_functions_mapped": [
        "cloudwatch_log_group_all_services_logging_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_periodic_review_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure periodic review of logs for all system components not covered by other specific requirements."
        }
      ],
      "mapping_notes": "Existing functions cover logging and retention but do not ensure periodic review of logs."
    },
    {
      "compliance_id": "10.4.2.1",
      "title": "PCI DSS 10.4.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_review_frequency_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To verify that log reviews are performed at the frequency specified in the entity’s targeted risk analysis."
        }
      ],
      "mapping_notes": "No existing functions address the frequency of log reviews based on risk analysis."
    },
    {
      "compliance_id": "10.4.3",
      "title": "PCI DSS 10.4.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_anomaly_detection_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that exceptions and anomalies identified during log reviews are addressed."
        }
      ],
      "mapping_notes": "No existing functions ensure that anomalies in logs are addressed."
    },
    {
      "compliance_id": "10.5.1",
      "title": "PCI DSS 10.5.1",
      "existing_functions_mapped": [
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_immediate_availability_check",
          "boto3_api": "cloudwatch.describe_log_groups()",
          "service": "cloudwatch",
          "rationale": "To verify that the most recent three months of audit log history is immediately available for analysis."
        }
      ],
      "mapping_notes": "Existing functions cover retention but not immediate availability of logs."
    },
    {
      "compliance_id": "10.6.1",
      "title": "PCI DSS 10.6.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_time_synchronization_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure system clocks and time are synchronized using time-synchronization technology."
        }
      ],
      "mapping_notes": "No existing functions ensure time synchronization across systems."
    },
    {
      "compliance_id": "10.6.2",
      "title": "PCI DSS 10.6.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_ntp_configuration_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check if EC2 instances are configured to use designated NTP servers for time synchronization."
        }
      ],
      "mapping_notes": "No existing functions directly address time synchronization settings and designated time servers."
    },
    {
      "compliance_id": "10.6.3",
      "title": "PCI DSS 10.6.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_metric_filter_time_changes",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "Monitor and log changes to time settings on critical systems."
        }
      ],
      "mapping_notes": "No existing functions cover the restriction and logging of time synchronization settings."
    },
    {
      "compliance_id": "10.7.1",
      "title": "PCI DSS 10.7.1",
      "existing_functions_mapped": [
        "cloudwatch_alarm_for_unusual_events",
        "cloudwatch_alarm_for_resource_threshold"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_alarm_for_security_control_failures",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "Detect and alert on failures of critical security control systems."
        }
      ],
      "mapping_notes": "Existing functions partially cover detection of unusual events but do not specifically address all critical security control failures."
    },
    {
      "compliance_id": "10.7.2",
      "title": "PCI DSS 10.7.2",
      "existing_functions_mapped": [
        "cloudwatch_alarm_for_unusual_events",
        "cloudwatch_alarm_for_resource_threshold"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_alarm_for_critical_security_control_failures",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "Ensure prompt detection and alerting of failures in critical security control systems."
        }
      ],
      "mapping_notes": "Similar to 10.7.1, existing functions provide partial coverage but do not fully address all specified critical security control systems."
    },
    {
      "compliance_id": "10.7.3",
      "title": "PCI DSS 10.7.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_alarm_for_security_failure_response",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "Monitor and document responses to failures of critical security control systems."
        }
      ],
      "mapping_notes": "No existing functions address the response and documentation of security control system failures."
    },
    {
      "compliance_id": "11.1.1",
      "title": "PCI DSS 11.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about documentation and procedures, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "11.1.2",
      "title": "PCI DSS 11.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation of roles and responsibilities, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "11.2.1",
      "title": "PCI DSS 11.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_describe_network_interfaces",
          "boto3_api": "ec2.describe_network_interfaces()",
          "service": "ec2",
          "rationale": "To detect and identify both authorized and unauthorized wireless access points by examining network interfaces."
        }
      ],
      "mapping_notes": "No existing functions directly address wireless access point detection. A new function using EC2 network interfaces could help identify unauthorized access points."
    },
    {
      "compliance_id": "11.2.2",
      "title": "PCI DSS 11.2.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_list_authorized_wireless_access_points",
          "boto3_api": "ec2.describe_network_interfaces()",
          "service": "ec2",
          "rationale": "To maintain an inventory of authorized wireless access points by listing network interfaces."
        }
      ],
      "mapping_notes": "No existing functions cover maintaining an inventory of authorized wireless access points. A new function could list and verify authorized access points."
    },
    {
      "compliance_id": "11.3.1",
      "title": "PCI DSS 11.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_vulnerability_scan_results_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify internal vulnerability scans are performed and high-risk vulnerabilities are resolved by checking instance configurations."
        }
      ],
      "mapping_notes": "No existing functions directly address internal vulnerability scans. A new function could check for scan results and vulnerability resolutions."
    },
    {
      "compliance_id": "11.3.1.1",
      "title": "PCI DSS 11.3.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_vulnerability_scan_results_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify that vulnerability scans are conducted and results are available for EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement to manage vulnerabilities based on risk analysis and conduct rescans."
    },
    {
      "compliance_id": "11.3.1.2",
      "title": "PCI DSS 11.3.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_authenticated_scan_configuration_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify that EC2 instances are configured for authenticated vulnerability scanning."
        }
      ],
      "mapping_notes": "No existing functions cover the requirement for authenticated scanning with sufficient privileges."
    },
    {
      "compliance_id": "11.3.1.3",
      "title": "PCI DSS 11.3.1.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_post_change_vulnerability_scan_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure vulnerability scans are performed after significant changes to EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions ensure scans are conducted after significant changes."
    },
    {
      "compliance_id": "11.3.2",
      "title": "PCI DSS 11.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_external_vulnerability_scan_schedule_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To verify that external vulnerability scans are scheduled and conducted at least every three months."
        }
      ],
      "mapping_notes": "No existing functions verify the scheduling and execution of external vulnerability scans."
    },
    {
      "compliance_id": "11.3.2.1",
      "title": "PCI DSS 11.3.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_post_change_external_vulnerability_scan_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure external vulnerability scans are performed after significant changes to EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions ensure external scans are conducted after significant changes."
    },
    {
      "compliance_id": "11.4.1",
      "title": "PCI DSS 11.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_vulnerability_scan_results_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Check if vulnerability scan results are available and up-to-date for EC2 instances."
        },
        {
          "name": "vpc_network_layer_penetration_test_results_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "vpc",
          "rationale": "Verify if network-layer penetration test results are documented for VPCs."
        }
      ],
      "mapping_notes": "No existing functions directly address penetration testing methodology or results retention."
    },
    {
      "compliance_id": "11.4.2",
      "title": "PCI DSS 11.4.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_internal_penetration_test_results_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Ensure internal penetration test results are documented for EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions cover internal penetration testing requirements."
    },
    {
      "compliance_id": "11.4.3",
      "title": "PCI DSS 11.4.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_external_penetration_test_results_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Ensure external penetration test results are documented for EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions cover external penetration testing requirements."
    },
    {
      "compliance_id": "11.4.4",
      "title": "PCI DSS 11.4.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_vulnerability_remediation_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "Verify that vulnerabilities identified in penetration tests are remediated for EC2 instances."
        }
      ],
      "mapping_notes": "No existing functions address the remediation of vulnerabilities found during penetration testing."
    },
    {
      "compliance_id": "11.4.5",
      "title": "PCI DSS 11.4.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_segmentation_control_test_results_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "vpc",
          "rationale": "Ensure segmentation control test results are documented for VPCs."
        }
      ],
      "mapping_notes": "No existing functions cover segmentation control testing requirements."
    },
    {
      "compliance_id": "11.4.6",
      "title": "PCI DSS 11.4.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_network_segmentation_test_results_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "vpc",
          "rationale": "To verify that segmentation controls are operational and effective in isolating the CDE from out-of-scope systems."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement for penetration testing of segmentation controls."
    },
    {
      "compliance_id": "11.4.7",
      "title": "PCI DSS 11.4.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_external_penetration_test_support_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure multi-tenant service providers support customer penetration testing requests."
        }
      ],
      "mapping_notes": "No existing functions address the requirement for multi-tenant service providers to support external penetration testing."
    },
    {
      "compliance_id": "11.5.1",
      "title": "PCI DSS 11.5.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_intrusion_detection_alerts_configured",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To verify that IDS/IPS alerts are configured to monitor all traffic at the CDE perimeter and critical points."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement for IDS/IPS monitoring and alerting."
    },
    {
      "compliance_id": "11.5.1.1",
      "title": "PCI DSS 11.5.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_malware_communication_detection_configured",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To verify that methods to detect/prevent covert malware communication are configured."
        }
      ],
      "mapping_notes": "No existing functions address the detection and prevention of covert malware communication."
    },
    {
      "compliance_id": "11.5.2",
      "title": "PCI DSS 11.5.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_file_integrity_monitoring_configured",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To verify that file integrity monitoring is configured to alert on unauthorized modifications of critical files."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement for change-detection mechanisms like file integrity monitoring."
    },
    {
      "compliance_id": "11.6.1",
      "title": "PCI DSS 11.6.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudfront_distribution_security_headers_check",
          "boto3_api": "cloudfront.get_distribution_config()",
          "service": "cloudfront",
          "rationale": "To ensure security-impacting HTTP headers are configured correctly for CloudFront distributions."
        },
        {
          "name": "cloudfront_distribution_script_integrity_check",
          "boto3_api": "cloudfront.get_distribution_config()",
          "service": "cloudfront",
          "rationale": "To verify that scripts served by CloudFront distributions have integrity checks like Subresource Integrity (SRI)."
        }
      ],
      "mapping_notes": "No existing functions directly address the detection of unauthorized changes to HTTP headers and scripts on payment pages."
    },
    {
      "compliance_id": "12.1.1",
      "title": "PCI DSS 12.1.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to policy documentation and dissemination, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.1.2",
      "title": "PCI DSS 12.1.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves policy review and updates, which are not programmatically checkable using boto3 APIs."
    },
    {
      "compliance_id": "12.1.3",
      "title": "PCI DSS 12.1.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves defining and acknowledging roles and responsibilities, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.1.4",
      "title": "PCI DSS 12.1.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves assigning responsibility to a CISO or equivalent, which is not programmatically checkable using boto3 APIs."
    },
    {
      "compliance_id": "12.2.1",
      "title": "PCI DSS 12.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is primarily about policy documentation and approval processes, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.3.1",
      "title": "PCI DSS 12.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves risk analysis documentation and review processes, which are not checkable via boto3 APIs."
    },
    {
      "compliance_id": "12.3.2",
      "title": "PCI DSS 12.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement focuses on risk analysis and documentation, which cannot be verified programmatically with boto3 APIs."
    },
    {
      "compliance_id": "12.3.3",
      "title": "PCI DSS 12.3.3",
      "existing_functions_mapped": [
        "cloudfront_distributions_using_deprecated_ssl_protocols",
        "cloudfront_distributions_https_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "kms_key_rotation_enabled",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "To ensure cryptographic keys are rotated regularly, which is part of maintaining cryptographic agility."
        }
      ],
      "mapping_notes": "Existing functions partially cover the requirement by checking for deprecated protocols and HTTPS usage. Additional checks for key rotation and cryptographic agility are needed."
    },
    {
      "compliance_id": "12.3.4",
      "title": "PCI DSS 12.3.4",
      "existing_functions_mapped": [
        "awslambda_function_runtime_end_of_support_check",
        "documentdb_cluster_latest_patch_version_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_ami_latest_version_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "To ensure EC2 instances are using the latest AMI versions, which helps in maintaining up-to-date software."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects of software version checks. Additional checks for EC2 AMI versions are needed to ensure comprehensive coverage."
    },
    {
      "compliance_id": "12.4.1",
      "title": "PCI DSS 12.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about executive management responsibility and cannot be programmatically checked using AWS configurations."
    },
    {
      "compliance_id": "12.4.2",
      "title": "PCI DSS 12.4.2",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_unauthorized_api_calls"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_review_frequency_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure logs are reviewed at least once every three months."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects of log and configuration reviews but do not ensure the frequency of reviews."
    },
    {
      "compliance_id": "12.4.2.1",
      "title": "PCI DSS 12.4.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation and sign-off, which cannot be programmatically checked using AWS configurations."
    },
    {
      "compliance_id": "12.5.1",
      "title": "PCI DSS 12.5.1",
      "existing_functions_mapped": [
        "ec2_ami_approved_check",
        "ec2_ami_encryption_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_inventory_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To maintain an inventory of EC2 instances in scope for PCI DSS."
        }
      ],
      "mapping_notes": "Existing functions partially cover inventory by checking AMI compliance but do not maintain a full inventory of system components."
    },
    {
      "compliance_id": "12.5.2",
      "title": "PCI DSS 12.5.2",
      "existing_functions_mapped": [
        "cloudtrail_log_retention_period_check",
        "cloudtrail_logs_s3_bucket_access_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "vpc_data_flow_diagram_check",
          "boto3_api": "vpc.describe_flow_logs()",
          "service": "vpc",
          "rationale": "To ensure data flow diagrams are updated and maintained."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects of data flow and logging but do not ensure comprehensive scoping validation."
    },
    {
      "compliance_id": "12.5.2.1",
      "title": "PCI DSS 12.5.2.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation and review processes that cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.5.3",
      "title": "PCI DSS 12.5.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves documentation and review processes that cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.6.1",
      "title": "PCI DSS 12.6.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves a security awareness program which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.6.2",
      "title": "PCI DSS 12.6.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves reviewing and updating a security awareness program, which cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.6.3",
      "title": "PCI DSS 12.6.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves training and acknowledgment processes that cannot be programmatically checked using boto3 APIs."
    },
    {
      "compliance_id": "12.6.3.1",
      "title": "PCI DSS 12.6.3.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to security awareness training, which cannot be programmatically checked using AWS resource configurations."
    },
    {
      "compliance_id": "12.6.3.2",
      "title": "PCI DSS 12.6.3.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to security awareness training, which cannot be programmatically checked using AWS resource configurations."
    },
    {
      "compliance_id": "12.7.1",
      "title": "PCI DSS 12.7.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to personnel screening, which cannot be programmatically checked using AWS resource configurations."
    },
    {
      "compliance_id": "12.8.1",
      "title": "PCI DSS 12.8.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to maintaining a list of third-party service providers, which cannot be programmatically checked using AWS resource configurations."
    },
    {
      "compliance_id": "12.8.2",
      "title": "PCI DSS 12.8.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement pertains to maintaining written agreements with third-party service providers, which cannot be programmatically checked using AWS resource configurations."
    },
    {
      "compliance_id": "12.8.3",
      "title": "PCI DSS 12.8.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves processes and due diligence for engaging TPSPs, which cannot be programmatically checked using AWS configurations."
    },
    {
      "compliance_id": "12.8.4",
      "title": "PCI DSS 12.8.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Monitoring TPSPs' PCI DSS compliance status is a procedural requirement and cannot be directly mapped to AWS resource configurations."
    },
    {
      "compliance_id": "12.8.5",
      "title": "PCI DSS 12.8.5",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Maintaining information about PCI DSS responsibilities between TPSPs and entities is a documentation requirement, not applicable to AWS resource configuration checks."
    },
    {
      "compliance_id": "12.9.1",
      "title": "PCI DSS 12.9.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves written agreements and acknowledgments, which are not checkable via AWS resource configurations."
    },
    {
      "compliance_id": "12.9.2",
      "title": "PCI DSS 12.9.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "Supporting customer requests for PCI DSS compliance information is a procedural requirement and cannot be mapped to AWS resource configurations."
    },
    {
      "compliance_id": "12.10.1",
      "title": "PCI DSS 12.10.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is primarily about having an incident response plan, which is not directly checkable via AWS resource configurations."
    },
    {
      "compliance_id": "12.10.2",
      "title": "PCI DSS 12.10.2",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves reviewing and testing an incident response plan, which cannot be programmatically checked via AWS resource configurations."
    },
    {
      "compliance_id": "12.10.3",
      "title": "PCI DSS 12.10.3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about personnel availability for incident response, which is not checkable via AWS resource configurations."
    },
    {
      "compliance_id": "12.10.4",
      "title": "PCI DSS 12.10.4",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement involves training personnel, which cannot be programmatically checked via AWS resource configurations."
    },
    {
      "compliance_id": "12.10.4.1",
      "title": "PCI DSS 12.10.4.1",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [],
      "mapping_notes": "This requirement is about the frequency of training based on risk analysis, which is not checkable via AWS resource configurations."
    },
    {
      "compliance_id": "12.10.5",
      "title": "PCI DSS 12.10.5",
      "existing_functions_mapped": [
        "cloudwatch_alarm_for_unusual_events",
        "cloudwatch_alarm_for_resource_threshold",
        "cloudwatch_alarm_for_root_account_usage",
        "cloudwatch_alarm_for_audit_logging_failures",
        "cloudwatch_alarm_for_aws_organizations_changes",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "waf_web_acl_intrusion_detection_enabled",
          "boto3_api": "waf.list_web_acls()",
          "service": "waf",
          "rationale": "To ensure that intrusion detection is enabled for web applications."
        },
        {
          "name": "ec2_network_acl_intrusion_detection_enabled",
          "boto3_api": "ec2.describe_network_acls()",
          "service": "ec2",
          "rationale": "To verify network ACLs are configured for intrusion detection."
        },
        {
          "name": "s3_bucket_change_detection_enabled",
          "boto3_api": "s3.get_bucket_notification_configuration()",
          "service": "s3",
          "rationale": "To ensure change detection mechanisms are in place for critical files in S3."
        }
      ],
      "mapping_notes": "Existing functions cover some aspects of monitoring and alerting, but additional checks are needed for intrusion detection and change detection mechanisms."
    },
    {
      "compliance_id": "12.10.6",
      "title": "PCI DSS 12.10.6",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_incident_response_plan_update_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To verify that incident response plans are updated based on lessons learned and industry developments."
        }
      ],
      "mapping_notes": "No existing functions directly address the requirement to update incident response plans based on lessons learned."
    },
    {
      "compliance_id": "12.10.7",
      "title": "PCI DSS 12.10.7",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_pan_detection_enabled",
          "boto3_api": "s3.get_bucket_policy()",
          "service": "s3",
          "rationale": "To ensure that mechanisms are in place to detect PAN stored in S3 buckets."
        },
        {
          "name": "rds_instance_pan_detection_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To verify that RDS instances have mechanisms to detect unexpected PAN storage."
        }
      ],
      "mapping_notes": "No existing functions address the detection of PAN stored outside expected locations, necessitating new checks for S3 and RDS."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "vpc_security_group_ruleset_configuration_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "Check if security group rulesets are defined and implemented according to configuration standards."
    },
    {
      "name": "vpc_network_configuration_change_tracking",
      "boto3_api": "ec2.describe_network_interfaces()",
      "service": "ec2",
      "rationale": "Track changes to network configurations to ensure they are approved and managed according to change control processes."
    },
    {
      "name": "vpc_network_diagram_accuracy_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "ec2",
      "rationale": "Ensure network diagrams are accurate and reflect current VPC configurations."
    },
    {
      "name": "vpc_flow_logs_enabled",
      "boto3_api": "ec2.describe_flow_logs()",
      "service": "ec2",
      "rationale": "To ensure that all data flows across VPCs are logged and can be used to maintain an accurate data-flow diagram."
    },
    {
      "name": "ec2_security_group_approved_ports_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To verify that only approved ports are open in security groups."
    },
    {
      "name": "ec2_security_group_insecure_protocols_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To identify and ensure security features are implemented for insecure protocols in use."
    },
    {
      "name": "ec2_security_group_configuration_review",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure security group configurations are reviewed periodically for relevance and effectiveness."
    },
    {
      "name": "ec2_security_group_configuration_file_integrity_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure configuration files for security groups are secured from unauthorized access and consistent with active configurations."
    },
    {
      "name": "ec2_instance_configuration_compliance_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify that EC2 instances are configured according to defined security standards."
    },
    {
      "name": "ec2_instance_default_account_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that default accounts are not used or have changed passwords on EC2 instances."
    },
    {
      "name": "ec2_instance_function_isolation_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify that EC2 instances are configured to isolate functions with different security levels."
    },
    {
      "name": "ec2_instance_unnecessary_services_disabled_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that unnecessary services and protocols are disabled on EC2 instances."
    },
    {
      "name": "ec2_instance_insecure_protocols_disabled",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check EC2 instances for insecure protocols like telnet or HTTP."
    },
    {
      "name": "rds_instance_insecure_protocols_disabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "Check RDS instances for insecure protocols like non-SSL connections."
    },
    {
      "name": "ec2_instance_security_parameters_configured",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Verify EC2 instances have security parameters configured to prevent misuse."
    },
    {
      "name": "rds_instance_security_parameters_configured",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "Verify RDS instances have security parameters configured to prevent misuse."
    },
    {
      "name": "ec2_instance_non_console_access_encrypted",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Ensure EC2 instances use encrypted protocols for non-console administrative access."
    },
    {
      "name": "ec2_instance_default_security_settings_changed",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Verify that default security settings on EC2 instances are changed from vendor defaults."
    },
    {
      "name": "ec2_instance_wireless_encryption_key_rotation",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Ensure wireless encryption keys are rotated when personnel changes occur."
    },
    {
      "name": "s3_bucket_data_retention_policy_check",
      "boto3_api": "s3.get_bucket_lifecycle_configuration()",
      "service": "s3",
      "rationale": "To ensure that data retention policies are enforced on S3 buckets."
    },
    {
      "name": "rds_instance_sad_storage_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To verify that sensitive authentication data is not stored in RDS instances after authorization."
    },
    {
      "name": "rds_instance_track_data_storage_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that full track data is not stored in RDS instances post-authorization."
    },
    {
      "name": "dynamodb_table_no_card_verification_code_storage",
      "boto3_api": "dynamodb.scan()",
      "service": "dynamodb",
      "rationale": "To ensure that card verification codes are not stored in DynamoDB tables after authorization."
    },
    {
      "name": "s3_bucket_no_card_verification_code_storage",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "To verify that card verification codes are not stored in S3 buckets after authorization."
    },
    {
      "name": "dynamodb_table_no_pin_storage",
      "boto3_api": "dynamodb.scan()",
      "service": "dynamodb",
      "rationale": "To ensure that PINs and PIN blocks are not stored in DynamoDB tables after authorization."
    },
    {
      "name": "s3_bucket_no_pin_storage",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "To verify that PINs and PIN blocks are not stored in S3 buckets after authorization."
    },
    {
      "name": "s3_bucket_sad_encryption_check",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To ensure that sensitive authentication data (SAD) stored in S3 is encrypted using strong cryptography."
    },
    {
      "name": "rds_instance_sad_encryption_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To verify that SAD stored in RDS instances is encrypted using strong cryptography."
    },
    {
      "name": "rds_instance_sad_storage_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To verify that any stored SAD in RDS is encrypted and justified by a legitimate business need."
    },
    {
      "name": "s3_bucket_sad_storage_check",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "To ensure that any stored SAD in S3 is encrypted and justified by a legitimate business need."
    },
    {
      "name": "iam_role_pan_display_access_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To verify that only roles with a legitimate business need can access full PAN displays."
    },
    {
      "name": "cloudwatch_log_pan_masking_check",
      "boto3_api": "cloudwatch.describe_log_groups()",
      "service": "cloudwatch",
      "rationale": "To ensure that PANs are masked in logs and only accessible to authorized personnel."
    },
    {
      "name": "ec2_instance_remote_access_copy_restriction",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check EC2 instances for remote access configurations that prevent unauthorized copying of PAN."
    },
    {
      "name": "rds_instance_pan_unreadable_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "Ensure PAN is rendered unreadable in RDS instances using encryption or other methods."
    },
    {
      "name": "kms_keyed_hashing_for_pan_check",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "Verify that keyed cryptographic hashes are used for PAN with proper key management."
    },
    {
      "name": "ec2_disk_level_encryption_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "Ensure disk-level encryption is used appropriately for PAN storage."
    },
    {
      "name": "ec2_disk_encryption_access_control_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "Verify that disk encryption access is managed independently of OS authentication."
    },
    {
      "name": "kms_key_generation_strong_algorithms_check",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "To ensure that KMS keys are generated using strong cryptographic algorithms."
    },
    {
      "name": "kms_key_secure_distribution_check",
      "boto3_api": "kms.list_keys()",
      "service": "kms",
      "rationale": "To verify that cryptographic keys are distributed securely to authorized entities."
    },
    {
      "name": "kms_key_secure_storage_check",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "To ensure that cryptographic keys are stored securely, potentially using HSMs."
    },
    {
      "name": "kms_key_cryptoperiod_management_check",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "To verify that cryptographic keys are changed at the end of their cryptoperiod."
    },
    {
      "name": "kms_key_retirement_and_replacement_check",
      "boto3_api": "kms.list_retirable_grants()",
      "service": "kms",
      "rationale": "To ensure that keys are retired, replaced, or destroyed when necessary."
    },
    {
      "name": "kms_key_split_knowledge_dual_control_check",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "To ensure that KMS keys are managed with split knowledge and dual control, preventing any single person from having full access to the key."
    },
    {
      "name": "kms_key_unauthorized_substitution_prevention_check",
      "boto3_api": "kms.list_keys()",
      "service": "kms",
      "rationale": "To verify that unauthorized substitution of cryptographic keys is prevented by ensuring only authorized keys are used."
    },
    {
      "name": "kms_key_custodian_acknowledgment_check",
      "boto3_api": "kms.get_key_policy()",
      "service": "kms",
      "rationale": "To ensure that key custodians have acknowledged their responsibilities, which can be verified through key policies."
    },
    {
      "name": "kms_key_sharing_guidance_check",
      "boto3_api": "kms.list_keys()",
      "service": "kms",
      "rationale": "To ensure that service providers document and distribute guidance on secure key management to customers."
    },
    {
      "name": "ec2_instance_secure_protocols_enabled",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure EC2 instances are configured to use secure protocols for data transmission."
    },
    {
      "name": "elb_listener_secure_protocols_enabled",
      "boto3_api": "elb.describe_load_balancers()",
      "service": "elb",
      "rationale": "To verify that ELB listeners are configured to use secure protocols."
    },
    {
      "name": "acm_certificates_inventory_check",
      "boto3_api": "acm.list_certificates()",
      "service": "acm",
      "rationale": "To maintain an inventory of ACM certificates and ensure they are up-to-date and trusted."
    },
    {
      "name": "ec2_vpc_wireless_network_security_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "ec2",
      "rationale": "To verify that wireless networks connected to the VPC use strong cryptography for authentication and transmission."
    },
    {
      "name": "sns_topic_encryption_enabled",
      "boto3_api": "sns.get_topic_attributes()",
      "service": "sns",
      "rationale": "To ensure SNS topics used for messaging are encrypted to protect PAN during transmission."
    },
    {
      "name": "ec2_instance_antivirus_installed",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check if antivirus software is installed on EC2 instances."
    },
    {
      "name": "ec2_instance_antimalware_logging_enabled",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify that anti-malware logging is enabled on EC2 instances."
    },
    {
      "name": "ec2_instance_antimalware_protection_immutable",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure anti-malware protection settings cannot be altered by unauthorized users."
    },
    {
      "name": "ses_email_phishing_protection_enabled",
      "boto3_api": "ses.get_identity_dkim_attributes()",
      "service": "ses",
      "rationale": "To verify that DKIM is enabled for email phishing protection."
    },
    {
      "name": "ses_email_spf_protection_enabled",
      "boto3_api": "ses.get_identity_verification_attributes()",
      "service": "ses",
      "rationale": "To verify that SPF is enabled for email phishing protection."
    },
    {
      "name": "codebuild_project_secure_coding_practices_check",
      "boto3_api": "codebuild.list_projects()",
      "service": "codebuild",
      "rationale": "Check if CodeBuild projects are configured to follow secure coding practices."
    },
    {
      "name": "codebuild_project_code_review_check",
      "boto3_api": "codebuild.list_projects()",
      "service": "codebuild",
      "rationale": "Ensure CodeBuild projects have code review processes in place before deployment."
    },
    {
      "name": "codebuild_project_vulnerability_scan_enabled",
      "boto3_api": "codebuild.list_projects()",
      "service": "codebuild",
      "rationale": "Ensure CodeBuild projects have vulnerability scanning enabled to detect common software attacks."
    },
    {
      "name": "cloudfront_distribution_csp_policy_check",
      "boto3_api": "cloudfront.get_distribution_config()",
      "service": "cloudfront",
      "rationale": "To ensure that Content Security Policy (CSP) is applied to CloudFront distributions to restrict unauthorized script execution."
    },
    {
      "name": "cloudfront_distribution_sri_enabled",
      "boto3_api": "cloudfront.get_distribution_config()",
      "service": "cloudfront",
      "rationale": "To verify that Sub-resource Integrity (SRI) is enabled for scripts served through CloudFront distributions."
    },
    {
      "name": "cloudtrail_change_management_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that changes to system components are logged and can be traced back to change control documentation."
    },
    {
      "name": "config_recorder_significant_change_check",
      "boto3_api": "config.describe_configuration_recorders()",
      "service": "config",
      "rationale": "To verify that significant changes are recorded and assessed for PCI DSS compliance."
    },
    {
      "name": "vpc_pre_production_separation_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "vpc",
      "rationale": "To ensure that pre-production and production environments are separated at the network level."
    },
    {
      "name": "iam_access_control_pre_production_check",
      "boto3_api": "iam.get_policy()",
      "service": "iam",
      "rationale": "To verify that access controls enforce separation between pre-production and production environments."
    },
    {
      "name": "iam_role_separation_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure roles and functions are separated between production and pre-production environments."
    },
    {
      "name": "rds_instance_cde_tag_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "Check if RDS instances in pre-production environments are tagged as part of the CDE."
    },
    {
      "name": "ec2_instance_cde_tag_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check if EC2 instances in pre-production environments are tagged as part of the CDE."
    },
    {
      "name": "ec2_instance_test_data_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check EC2 instances for the presence of test data before going into production."
    },
    {
      "name": "rds_instance_test_accounts_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "Check RDS instances for the presence of test accounts before going into production."
    },
    {
      "name": "iam_access_control_model_check",
      "boto3_api": "iam.get_account_authorization_details()",
      "service": "iam",
      "rationale": "Verify that the access control model is defined and implemented according to least privilege and need-to-know principles."
    },
    {
      "name": "iam_shared_credentials_usage_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To identify and manage shared credentials, ensuring they are used only in exceptional circumstances and actions are attributable to individual users."
    },
    {
      "name": "iam_service_provider_unique_authentication_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To ensure service providers use unique authentication factors for each customer premises."
    },
    {
      "name": "iam_user_lifecycle_management_check",
      "boto3_api": "iam.get_account_authorization_details()",
      "service": "iam",
      "rationale": "To verify that user ID lifecycle events are authorized and managed according to documented approvals."
    },
    {
      "name": "iam_terminated_user_access_revocation_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To ensure access for terminated users is immediately revoked."
    },
    {
      "name": "iam_inactive_user_account_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To identify and disable or remove inactive user accounts within 90 days of inactivity."
    },
    {
      "name": "iam_user_access_last_used_check",
      "boto3_api": "iam.get_access_key_last_used()",
      "service": "iam",
      "rationale": "To monitor the last used time of IAM user access keys to ensure they are only enabled during necessary periods."
    },
    {
      "name": "cloudtrail_third_party_access_monitoring",
      "boto3_api": "cloudtrail.lookup_events()",
      "service": "cloudtrail",
      "rationale": "To monitor and detect unexpected activity from third-party accounts."
    },
    {
      "name": "ec2_instance_idle_timeout_check",
      "boto3_api": "ec2.describe_instance_attribute()",
      "service": "ec2",
      "rationale": "To verify that EC2 instances have session idle timeouts configured to 15 minutes or less."
    },
    {
      "name": "iam_password_policy_encryption_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To ensure that password policies enforce strong cryptography for storage and transmission."
    },
    {
      "name": "iam_user_identity_verification_before_modification",
      "boto3_api": "iam.get_user()",
      "service": "iam",
      "rationale": "To verify user identity before allowing modifications to authentication factors."
    },
    {
      "name": "iam_user_account_lockout_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "Check if IAM user accounts are locked out after a specified number of failed login attempts and remain locked for a specified duration."
    },
    {
      "name": "iam_user_password_reset_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "Ensure that IAM user passwords are set to a unique value upon reset and require immediate change after first use."
    },
    {
      "name": "iam_user_password_complexity_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "Verify that IAM user passwords meet complexity requirements, including minimum length and character types."
    },
    {
      "name": "iam_user_password_history_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "Ensure that IAM user passwords cannot be reused within a specified number of previous passwords."
    },
    {
      "name": "iam_user_password_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To ensure that passwords are changed at least once every 90 days or that dynamic analysis of account security posture is implemented."
    },
    {
      "name": "iam_user_password_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To ensure that passwords are changed at least once every 90 days or that dynamic analysis of account security posture is implemented."
    },
    {
      "name": "iam_user_mfa_device_check",
      "boto3_api": "iam.list_mfa_devices()",
      "service": "iam",
      "rationale": "To verify that MFA devices are assigned to individual users and not shared among multiple users."
    },
    {
      "name": "iam_admin_mfa_enforced_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To ensure MFA is enforced specifically for administrative users accessing the CDE."
    },
    {
      "name": "iam_user_password_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To ensure IAM user passwords meet complexity and rotation requirements."
    },
    {
      "name": "ec2_security_group_physical_access_control_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To verify security groups are configured to restrict physical access to systems in the CDE."
    },
    {
      "name": "cloudwatch_log_group_physical_access_monitoring_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure physical access monitoring logs are enabled and retained for at least three months."
    },
    {
      "name": "s3_bucket_cardholder_data_inventory_check",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "To verify that inventories of electronic media with cardholder data are conducted at least once every 12 months."
    },
    {
      "name": "ec2_ebs_volume_secure_deletion_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "To ensure that electronic media with cardholder data is destroyed or rendered unrecoverable when no longer needed."
    },
    {
      "name": "ec2_instance_audit_logging_enabled",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Ensure audit logs are enabled for EC2 instances to capture all activities."
    },
    {
      "name": "rds_instance_audit_logging_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "Ensure audit logs are enabled for RDS instances to capture all activities."
    },
    {
      "name": "rds_user_access_logging_enabled",
      "boto3_api": "rds.describe_db_log_files()",
      "service": "rds",
      "rationale": "Capture all individual user access to cardholder data in RDS."
    },
    {
      "name": "iam_admin_actions_logging_enabled",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "Ensure all actions by users with administrative access are logged."
    },
    {
      "name": "cloudtrail_log_access_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "Capture all access to audit logs to detect potential tampering."
    },
    {
      "name": "iam_invalid_login_attempts_logging_enabled",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "Capture all invalid logical access attempts to detect unauthorized access."
    },
    {
      "name": "cloudtrail_event_type_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all changes to identification and authentication credentials are logged, including account creations and privilege escalations."
    },
    {
      "name": "cloudtrail_audit_log_initialization_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To capture all initialization and status changes of audit logs, ensuring that any disabling or pausing of logs is recorded."
    },
    {
      "name": "cloudtrail_system_object_creation_deletion_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all creation and deletion of system-level objects are logged, which is crucial for identifying unauthorized modifications."
    },
    {
      "name": "cloudtrail_audit_event_details_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all necessary details for each auditable event are captured, including user identification, event type, and success/failure indications."
    },
    {
      "name": "cloudtrail_audit_log_access_control_check",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To verify that read access to audit log files is limited to individuals with a job-related need, ensuring sensitive information is protected."
    },
    {
      "name": "s3_bucket_versioning_enabled",
      "boto3_api": "s3.get_bucket_versioning()",
      "service": "s3",
      "rationale": "Ensure that S3 buckets storing logs have versioning enabled to prevent unauthorized modifications."
    },
    {
      "name": "s3_bucket_lifecycle_policy_for_log_backup",
      "boto3_api": "s3.get_bucket_lifecycle_configuration()",
      "service": "s3",
      "rationale": "Ensure that S3 buckets have lifecycle policies to back up logs to a secure location."
    },
    {
      "name": "cloudwatch_log_group_integrity_check",
      "boto3_api": "cloudwatch.describe_log_groups()",
      "service": "cloudwatch",
      "rationale": "Implement file integrity monitoring on CloudWatch log groups to detect unauthorized changes."
    },
    {
      "name": "cloudwatch_log_group_daily_review_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "Ensure daily review of logs by setting up alarms for critical log events."
    },
    {
      "name": "cloudwatch_log_automation_check",
      "boto3_api": "cloudwatch.describe_log_streams()",
      "service": "cloudwatch",
      "rationale": "Verify that automated mechanisms are in place for log reviews using CloudWatch."
    },
    {
      "name": "cloudwatch_log_group_periodic_review_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure periodic review of logs for all system components not covered by other specific requirements."
    },
    {
      "name": "cloudwatch_log_group_review_frequency_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To verify that log reviews are performed at the frequency specified in the entity’s targeted risk analysis."
    },
    {
      "name": "cloudwatch_log_group_anomaly_detection_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that exceptions and anomalies identified during log reviews are addressed."
    },
    {
      "name": "cloudwatch_log_group_immediate_availability_check",
      "boto3_api": "cloudwatch.describe_log_groups()",
      "service": "cloudwatch",
      "rationale": "To verify that the most recent three months of audit log history is immediately available for analysis."
    },
    {
      "name": "ec2_instance_time_synchronization_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure system clocks and time are synchronized using time-synchronization technology."
    },
    {
      "name": "ec2_instance_ntp_configuration_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check if EC2 instances are configured to use designated NTP servers for time synchronization."
    },
    {
      "name": "cloudwatch_log_metric_filter_time_changes",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "Monitor and log changes to time settings on critical systems."
    },
    {
      "name": "cloudwatch_alarm_for_security_control_failures",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "Detect and alert on failures of critical security control systems."
    },
    {
      "name": "cloudwatch_alarm_for_critical_security_control_failures",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "Ensure prompt detection and alerting of failures in critical security control systems."
    },
    {
      "name": "cloudwatch_alarm_for_security_failure_response",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "Monitor and document responses to failures of critical security control systems."
    },
    {
      "name": "ec2_describe_network_interfaces",
      "boto3_api": "ec2.describe_network_interfaces()",
      "service": "ec2",
      "rationale": "To detect and identify both authorized and unauthorized wireless access points by examining network interfaces."
    },
    {
      "name": "ec2_list_authorized_wireless_access_points",
      "boto3_api": "ec2.describe_network_interfaces()",
      "service": "ec2",
      "rationale": "To maintain an inventory of authorized wireless access points by listing network interfaces."
    },
    {
      "name": "ec2_vulnerability_scan_results_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify internal vulnerability scans are performed and high-risk vulnerabilities are resolved by checking instance configurations."
    },
    {
      "name": "ec2_instance_vulnerability_scan_results_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify that vulnerability scans are conducted and results are available for EC2 instances."
    },
    {
      "name": "ec2_instance_authenticated_scan_configuration_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify that EC2 instances are configured for authenticated vulnerability scanning."
    },
    {
      "name": "ec2_instance_post_change_vulnerability_scan_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure vulnerability scans are performed after significant changes to EC2 instances."
    },
    {
      "name": "ec2_external_vulnerability_scan_schedule_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To verify that external vulnerability scans are scheduled and conducted at least every three months."
    },
    {
      "name": "ec2_post_change_external_vulnerability_scan_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure external vulnerability scans are performed after significant changes to EC2 instances."
    },
    {
      "name": "ec2_instance_vulnerability_scan_results_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Check if vulnerability scan results are available and up-to-date for EC2 instances."
    },
    {
      "name": "vpc_network_layer_penetration_test_results_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "vpc",
      "rationale": "Verify if network-layer penetration test results are documented for VPCs."
    },
    {
      "name": "ec2_internal_penetration_test_results_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Ensure internal penetration test results are documented for EC2 instances."
    },
    {
      "name": "ec2_external_penetration_test_results_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Ensure external penetration test results are documented for EC2 instances."
    },
    {
      "name": "ec2_vulnerability_remediation_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "Verify that vulnerabilities identified in penetration tests are remediated for EC2 instances."
    },
    {
      "name": "vpc_segmentation_control_test_results_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "vpc",
      "rationale": "Ensure segmentation control test results are documented for VPCs."
    },
    {
      "name": "vpc_network_segmentation_test_results_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "vpc",
      "rationale": "To verify that segmentation controls are operational and effective in isolating the CDE from out-of-scope systems."
    },
    {
      "name": "ec2_instance_external_penetration_test_support_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure multi-tenant service providers support customer penetration testing requests."
    },
    {
      "name": "cloudwatch_intrusion_detection_alerts_configured",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To verify that IDS/IPS alerts are configured to monitor all traffic at the CDE perimeter and critical points."
    },
    {
      "name": "cloudwatch_malware_communication_detection_configured",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To verify that methods to detect/prevent covert malware communication are configured."
    },
    {
      "name": "cloudwatch_file_integrity_monitoring_configured",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To verify that file integrity monitoring is configured to alert on unauthorized modifications of critical files."
    },
    {
      "name": "cloudfront_distribution_security_headers_check",
      "boto3_api": "cloudfront.get_distribution_config()",
      "service": "cloudfront",
      "rationale": "To ensure security-impacting HTTP headers are configured correctly for CloudFront distributions."
    },
    {
      "name": "cloudfront_distribution_script_integrity_check",
      "boto3_api": "cloudfront.get_distribution_config()",
      "service": "cloudfront",
      "rationale": "To verify that scripts served by CloudFront distributions have integrity checks like Subresource Integrity (SRI)."
    },
    {
      "name": "kms_key_rotation_enabled",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "To ensure cryptographic keys are rotated regularly, which is part of maintaining cryptographic agility."
    },
    {
      "name": "ec2_instance_ami_latest_version_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "To ensure EC2 instances are using the latest AMI versions, which helps in maintaining up-to-date software."
    },
    {
      "name": "cloudwatch_log_review_frequency_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure logs are reviewed at least once every three months."
    },
    {
      "name": "ec2_instance_inventory_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To maintain an inventory of EC2 instances in scope for PCI DSS."
    },
    {
      "name": "vpc_data_flow_diagram_check",
      "boto3_api": "vpc.describe_flow_logs()",
      "service": "vpc",
      "rationale": "To ensure data flow diagrams are updated and maintained."
    },
    {
      "name": "waf_web_acl_intrusion_detection_enabled",
      "boto3_api": "waf.list_web_acls()",
      "service": "waf",
      "rationale": "To ensure that intrusion detection is enabled for web applications."
    },
    {
      "name": "ec2_network_acl_intrusion_detection_enabled",
      "boto3_api": "ec2.describe_network_acls()",
      "service": "ec2",
      "rationale": "To verify network ACLs are configured for intrusion detection."
    },
    {
      "name": "s3_bucket_change_detection_enabled",
      "boto3_api": "s3.get_bucket_notification_configuration()",
      "service": "s3",
      "rationale": "To ensure change detection mechanisms are in place for critical files in S3."
    },
    {
      "name": "cloudwatch_incident_response_plan_update_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To verify that incident response plans are updated based on lessons learned and industry developments."
    },
    {
      "name": "s3_bucket_pan_detection_enabled",
      "boto3_api": "s3.get_bucket_policy()",
      "service": "s3",
      "rationale": "To ensure that mechanisms are in place to detect PAN stored in S3 buckets."
    },
    {
      "name": "rds_instance_pan_detection_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To verify that RDS instances have mechanisms to detect unexpected PAN storage."
    }
  ]
}