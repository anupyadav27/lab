{
  "metadata": {
    "generated_at": "2025-08-16T20:28:28.739175",
    "compliance_framework": "CIS_AMAZON_WEB_SERVICES_FOUNDATIONS_BENCHMARK_V5.0.0.json",
    "prowler_database_functions": 702,
    "processing_stats": {
      "total_items": 63,
      "processed": 63,
      "skipped_manual": 0,
      "mapped_complete": 24,
      "mapped_partial": 15,
      "mapped_none": 24,
      "new_functions_suggested": 59
    }
  },
  "mapping_results": [
    {
      "compliance_id": "1.1",
      "title": "Maintain current contact details",
      "existing_functions_mapped": [
        "account_maintain_current_contact_details"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'account_maintain_current_contact_details' appears to cover the requirements of this compliance item, as it ensures that contact details for AWS accounts are current and map to more than one individual in the organization."
    },
    {
      "compliance_id": "1.2",
      "title": "Ensure security contact information is registered",
      "existing_functions_mapped": [
        "account_security_contact_information_is_registered"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'account_security_contact_information_is_registered' directly addresses the compliance requirement of ensuring security contact information is registered."
    },
    {
      "compliance_id": "1.3",
      "title": "Ensure no 'root' user account access key exists",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_root_user_access_key_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "This function is needed to check if any access keys are associated with the 'root' user account"
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the requirement of checking for 'root' user account access keys. A new function 'iam_root_user_access_key_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.4",
      "title": "Ensure MFA is enabled for the 'root' user account",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_sign_in_without_mfa"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_root_account_mfa_enabled",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "This function is needed to check if MFA is enabled for the root account"
        }
      ],
      "mapping_notes": "The existing function 'cloudwatch_log_metric_filter_sign_in_without_mfa' can be used to detect sign-ins without MFA, but it does not specifically check if MFA is enabled for the root account. Therefore, a new function 'iam_root_account_mfa_enabled' is suggested to directly check the MFA status of the root account."
    },
    {
      "compliance_id": "1.5",
      "title": "Ensure hardware MFA is enabled for the 'root' user account",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_root_account_hardware_mfa_enabled",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "This function is needed to check if the root account has hardware MFA enabled."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to checking if hardware MFA is enabled for the root user account. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "1.6",
      "title": "Eliminate use of the 'root' user for administrative and daily tasks",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_root_usage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_root_user_activity_check",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "To check if the root user has been used for any activity"
        },
        {
          "name": "iam_root_user_mfa_enabled_check",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "To ensure MFA is enabled for the root user"
        }
      ],
      "mapping_notes": "The existing function 'cloudwatch_log_metric_filter_root_usage' can be used to monitor root user activity, but it does not provide a complete solution. New functions are suggested to check if the root user has been used for any activity and to ensure MFA is enabled for the root user."
    },
    {
      "compliance_id": "1.7",
      "title": "Ensure IAM password policy requires minimum length of 14 or greater",
      "existing_functions_mapped": [
        "cognito_user_pool_password_policy_minimum_length_14"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_password_policy_minimum_length_14",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "This function is needed to check if the IAM password policy requires a minimum length of 14 or greater"
        }
      ],
      "mapping_notes": "The existing function 'cognito_user_pool_password_policy_minimum_length_14' partially covers the compliance requirement but it is specific to Cognito User Pools. A new function 'iam_password_policy_minimum_length_14' is suggested to check the IAM password policy specifically."
    },
    {
      "compliance_id": "1.8",
      "title": "Ensure IAM password policy prevents password reuse",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_password_policy_prevent_reuse_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "This function is needed to check if the IAM password policy is configured to prevent password reuse."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'iam_password_policy_prevent_reuse_check' is suggested to check the IAM password policy for preventing password reuse."
    },
    {
      "compliance_id": "1.9",
      "title": "Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_console_password_mfa_enabled",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "This function is needed to check if MFA is enabled for all IAM users that have a console password. It uses the get_account_password_policy() API call to retrieve the account's password policy and checks if MFA is enabled."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'iam_user_console_password_mfa_enabled' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.10",
      "title": "Do not create access keys during initial setup for IAM users with a console password",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_access_key_creation_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "This function is needed to check if access keys are created during initial setup for IAM users with a console password. It will list the access keys associated with an IAM user and check if they were created during the initial setup."
        },
        {
          "name": "iam_user_console_password_check",
          "boto3_api": "iam.get_login_profile()",
          "service": "iam",
          "rationale": "This function is needed to check if an IAM user has a console password. It will retrieve the user's login profile (which includes their password status) and check if a password exists."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. New functions are suggested to check if access keys are created during initial setup for IAM users with a console password."
    },
    {
      "compliance_id": "1.11",
      "title": "Ensure credentials unused for 45 days or more are disabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_credentials_unused_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "This function is needed to list all IAM users and check if their credentials have been unused for 45 days or more"
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of disabling credentials unused for 45 days or more. A new function 'iam_user_credentials_unused_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "1.12",
      "title": "Ensure there is only one active access key for any single IAM user",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_single_active_access_key_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "This function is needed to ensure that each IAM user has only one active access key at a time, as per the compliance requirement."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring only one active access key for any single IAM user. Therefore, a new function 'iam_user_single_active_access_key_check' is suggested, which can be implemented using the 'iam.list_access_keys()' boto3 API."
    },
    {
      "compliance_id": "1.13",
      "title": "Ensure access keys are rotated every 90 days or less",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_access_keys_rotation_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "This function is needed to list all the access keys and check the last time they were rotated. If it's more than 90 days, the function should return a warning or error."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of ensuring access keys are rotated every 90 days or less. Therefore, a new function 'iam_access_keys_rotation_check' is suggested."
    },
    {
      "compliance_id": "1.14",
      "title": "Ensure IAM users receive permissions only through groups",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_group_only_permissions_check",
          "boto3_api": "iam.list_user_policies() and iam.list_attached_user_policies()",
          "service": "iam",
          "rationale": "To ensure that IAM users receive permissions only through groups, we need to check if any inline or attached policies are directly associated with the user. This can be done using the list_user_policies and list_attached_user_policies boto3 APIs."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring IAM users receive permissions only through groups. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "1.15",
      "title": "Ensure IAM policies that allow full \"*:*\" administrative privileges are not attached",
      "existing_functions_mapped": [
        "awslambda_function_no_admin_privileges"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_policy_no_full_admin_privileges",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "This function is needed to list all IAM policies and check if any of them grant full administrative privileges."
        },
        {
          "name": "iam_user_no_full_admin_privileges",
          "boto3_api": "iam.list_attached_user_policies()",
          "service": "iam",
          "rationale": "This function is needed to list all policies attached to IAM users and check if any of them grant full administrative privileges."
        },
        {
          "name": "iam_group_no_full_admin_privileges",
          "boto3_api": "iam.list_attached_group_policies()",
          "service": "iam",
          "rationale": "This function is needed to list all policies attached to IAM groups and check if any of them grant full administrative privileges."
        },
        {
          "name": "iam_role_no_full_admin_privileges",
          "boto3_api": "iam.list_attached_role_policies()",
          "service": "iam",
          "rationale": "This function is needed to list all policies attached to IAM roles and check if any of them grant full administrative privileges."
        }
      ],
      "mapping_notes": "The existing function 'awslambda_function_no_admin_privileges' partially covers the compliance requirement by checking for administrative privileges in Lambda functions. However, it does not cover IAM policies, users, groups, or roles. Therefore, new functions are suggested to cover these areas."
    },
    {
      "compliance_id": "1.16",
      "title": "Ensure a support role has been created to manage incidents with AWS Support",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_role_exists_for_aws_support",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To check if a role exists for managing incidents with AWS Support"
        },
        {
          "name": "iam_role_policy_for_aws_support",
          "boto3_api": "iam.list_role_policies()",
          "service": "iam",
          "rationale": "To check if the appropriate policy is assigned to the role for managing incidents with AWS Support"
        }
      ],
      "mapping_notes": "No existing functions could be mapped to this compliance requirement. New functions are suggested to check the existence of a role and its associated policy for managing incidents with AWS Support."
    },
    {
      "compliance_id": "1.17",
      "title": "Ensure IAM instance roles are used for AWS resource access from instances",
      "existing_functions_mapped": [
        "ec2_instance_profile_attached"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_iam_role_check",
          "boto3_api": "ec2.describe_iam_instance_profile_associations()",
          "service": "ec2",
          "rationale": "This function is needed to ensure that each EC2 instance is associated with an IAM role, which is a requirement of compliance item 1.17."
        },
        {
          "name": "iam_role_permissions_policy_check",
          "boto3_api": "iam.list_attached_role_policies()",
          "service": "iam",
          "rationale": "This function is needed to check that the IAM role associated with each EC2 instance has an appropriate permissions policy for the required access, which is a requirement of compliance item 1.17."
        }
      ],
      "mapping_notes": "The existing function 'ec2_instance_profile_attached' partially covers the compliance requirement by checking if an instance profile is attached to the EC2 instance. However, it does not check if the instance profile is associated with an IAM role, nor does it check the permissions policy of the IAM role. Therefore, two new functions 'ec2_instance_iam_role_check' and 'iam_role_permissions_policy_check' are suggested to fill these gaps."
    },
    {
      "compliance_id": "1.18",
      "title": "Ensure that all expired SSL/TLS certificates stored in AWS IAM are removed",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_ssl_certificate_expiration_check",
          "boto3_api": "iam.list_server_certificates()",
          "service": "iam",
          "rationale": "This function is needed to list all the server certificates in IAM and check if any of them have expired."
        }
      ],
      "mapping_notes": "There were no existing functions that could satisfy this compliance requirement. A new function 'iam_ssl_certificate_expiration_check' is suggested to check for expired SSL/TLS certificates in IAM."
    },
    {
      "compliance_id": "1.19",
      "title": "Ensure that IAM External Access Analyzer is enabled for all regions",
      "existing_functions_mapped": [
        "accessanalyzer_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_accessanalyzer_enabled_all_regions",
          "boto3_api": "accessanalyzer.list_analyzers()",
          "service": "iam",
          "rationale": "Existing function checks if Access Analyzer is enabled but does not verify it for all regions. New function is needed to ensure Access Analyzer is enabled across all active AWS regions."
        }
      ],
      "mapping_notes": "Mapped to 'accessanalyzer_enabled' function as it checks if Access Analyzer is enabled. However, it does not ensure this for all regions, hence a new function 'iam_accessanalyzer_enabled_all_regions' is suggested."
    },
    {
      "compliance_id": "1.20",
      "title": "Ensure IAM users are managed centrally via identity federation or AWS Organizations for multi-account environments",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_users_managed_centralized_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To check if IAM users are managed centrally, we need to list all IAM users and verify their association with a central identity federation or AWS Organizations."
        },
        {
          "name": "aws_organizations_multi_account_check",
          "boto3_api": "organizations.list_accounts()",
          "service": "organizations",
          "rationale": "To ensure IAM users are managed in a multi-account environment, we need to list all accounts in the organization and verify that IAM users are associated with these accounts."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of managing IAM users centrally via identity federation or AWS Organizations for multi-account environments. Therefore, new functions are suggested to fill this gap."
    },
    {
      "compliance_id": "1.21",
      "title": "Ensure access to AWSCloudShellFullAccess is restricted",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_policy_check_restricted_access",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To check if the AWSCloudShellFullAccess policy is restricted, we need a function that lists all IAM policies and checks their access permissions."
        },
        {
          "name": "iam_user_policy_attachment_check",
          "boto3_api": "iam.list_attached_user_policies()",
          "service": "iam",
          "rationale": "To ensure that the AWSCloudShellFullAccess policy is not attached to any IAM user, we need a function that lists all attached user policies and checks if this policy is among them."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. New functions are suggested to check the access permissions of the AWSCloudShellFullAccess policy and to ensure it is not attached to any IAM user."
    },
    {
      "compliance_id": "2.1.1",
      "title": "Ensure S3 Bucket Policy is set to deny HTTP requests",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_policy_deny_http_requests",
          "boto3_api": "s3.get_bucket_policy()",
          "service": "s3",
          "rationale": "This function is needed to retrieve the bucket policy and check if it is set to deny HTTP requests"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the S3 bucket policy for denying HTTP requests."
    },
    {
      "compliance_id": "2.1.2",
      "title": "Ensure MFA Delete is enabled on S3 buckets",
      "existing_functions_mapped": [
        "cloudtrail_bucket_requires_mfa_delete"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_bucket_requires_mfa_delete' directly addresses the compliance requirement of ensuring MFA Delete is enabled on S3 buckets."
    },
    {
      "compliance_id": "2.1.3",
      "title": "Ensure all data in Amazon S3 has been discovered, classified, and secured when necessary",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_data_discovery",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "To discover all data in S3, we need to list all objects in all buckets"
        },
        {
          "name": "s3_bucket_data_classification",
          "boto3_api": "macie2.classify_findings()",
          "service": "macie",
          "rationale": "To classify data in S3, we can use Macie's classify_findings function"
        },
        {
          "name": "s3_bucket_data_security",
          "boto3_api": "s3.put_bucket_acl()",
          "service": "s3",
          "rationale": "To secure data in S3, we need to ensure appropriate access control lists (ACLs) are in place"
        }
      ],
      "mapping_notes": "No existing functions could be mapped to this compliance item. New functions are suggested to cover data discovery, classification, and security in S3."
    },
    {
      "compliance_id": "2.1.4",
      "title": "Ensure that S3 is configured with 'Block Public Access' enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_block_public_access_enabled",
          "boto3_api": "s3.get_public_access_block()",
          "service": "s3",
          "rationale": "This function is needed to check if the S3 bucket has block public access enabled."
        },
        {
          "name": "s3_account_block_public_access_enabled",
          "boto3_api": "s3control.get_public_access_block()",
          "service": "s3",
          "rationale": "This function is needed to check if the S3 account has block public access enabled."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of ensuring that S3 is configured with 'Block Public Access' enabled. Therefore, two new functions are suggested to check the block public access settings at both the bucket and account levels."
    },
    {
      "compliance_id": "2.2.1",
      "title": "Ensure that encryption-at-rest is enabled for RDS instances",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_encryption_at_rest_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if encryption at rest is enabled for RDS instances"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'rds_instance_encryption_at_rest_enabled' is suggested to check if encryption at rest is enabled for RDS instances."
    },
    {
      "compliance_id": "2.2.2",
      "title": "Ensure the Auto Minor Version Upgrade feature is enabled for RDS instances",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_auto_minor_version_upgrade_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if the Auto Minor Version Upgrade feature is enabled for RDS instances"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'rds_instance_auto_minor_version_upgrade_enabled' is suggested which uses the 'rds.describe_db_instances()' boto3 API to check if the Auto Minor Version Upgrade feature is enabled for RDS instances."
    },
    {
      "compliance_id": "2.2.3",
      "title": "Ensure that RDS instances are not publicly accessible",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_instance_public_access_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if the RDS instances are publicly accessible or not."
        },
        {
          "name": "rds_instance_security_group_update_check",
          "boto3_api": "rds.describe_db_security_groups()",
          "service": "rds",
          "rationale": "This function is needed to verify if the VPC security group associated with the RDS instance has been updated to restrict access."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. Therefore, two new functions are suggested to ensure that RDS instances are not publicly accessible and that the associated VPC security group is updated to restrict access."
    },
    {
      "compliance_id": "2.2.4",
      "title": "Ensure Multi-AZ deployments are used for enhanced availability in Amazon RDS",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_multi_az_deployment_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if Multi-AZ deployments are used for enhanced availability in Amazon RDS"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'rds_multi_az_deployment_check' is suggested to check if Multi-AZ deployments are used for enhanced availability in Amazon RDS."
    },
    {
      "compliance_id": "2.3.1",
      "title": "Ensure that encryption is enabled for EFS file systems",
      "existing_functions_mapped": [
        "efs_encryption_at_rest_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'efs_encryption_at_rest_enabled' directly addresses the requirement of ensuring encryption for EFS file systems. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "3.1",
      "title": "Ensure CloudTrail is enabled in all regions",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover all aspects of the compliance requirement, including enabling CloudTrail, ensuring it is enabled in all regions, and checking that the necessary logging and encryption settings are enabled."
    },
    {
      "compliance_id": "3.2",
      "title": "Ensure CloudTrail log file validation is enabled",
      "existing_functions_mapped": [
        "cloudtrail_log_file_validation_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_log_file_validation_enabled' directly addresses the compliance requirement of ensuring CloudTrail log file validation is enabled."
    },
    {
      "compliance_id": "3.3",
      "title": "Ensure AWS Config is enabled in all regions",
      "existing_functions_mapped": [
        "config_recorder_all_regions_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'config_recorder_all_regions_enabled' directly addresses the compliance requirement of ensuring AWS Config is enabled in all regions."
    },
    {
      "compliance_id": "3.4",
      "title": "Ensure that server access logging is enabled on the CloudTrail S3 bucket",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_access_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_logs_s3_bucket_access_logging_enabled' directly addresses the requirement of enabling server access logging on the CloudTrail S3 bucket."
    },
    {
      "compliance_id": "3.5",
      "title": "Ensure CloudTrail logs are encrypted at rest using KMS CMKs",
      "existing_functions_mapped": [
        "cloudtrail_kms_encryption_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_kms_encryption_enabled' directly addresses the requirement of ensuring CloudTrail logs are encrypted at rest using KMS CMKs."
    },
    {
      "compliance_id": "3.6",
      "title": "Ensure rotation for customer-created symmetric CMKs is enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "kms_cmk_rotation_enabled_check",
          "boto3_api": "kms.get_key_rotation_status()",
          "service": "kms",
          "rationale": "This function is needed to check if the key rotation is enabled for customer-created symmetric CMKs"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'kms_cmk_rotation_enabled_check' is suggested which uses the 'kms.get_key_rotation_status()' boto3 API to check if the key rotation is enabled for customer-created symmetric CMKs."
    },
    {
      "compliance_id": "3.7",
      "title": "Ensure VPC flow logging is enabled in all VPCs",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_flow_logs_enabled",
          "boto3_api": "ec2.describe_flow_logs()",
          "service": "ec2",
          "rationale": "This function is needed to check if VPC Flow Logs are enabled for all VPCs"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring VPC flow logging is enabled in all VPCs. Therefore, a new function 'vpc_flow_logs_enabled' is suggested which uses the 'ec2.describe_flow_logs()' boto3 API to check if VPC Flow Logs are enabled."
    },
    {
      "compliance_id": "3.8",
      "title": "Ensure that object-level logging for write events is enabled for S3 buckets",
      "existing_functions_mapped": [
        "cloudtrail_s3_dataevents_write_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_s3_dataevents_write_enabled' directly addresses the compliance requirement of enabling object-level logging for write events in S3 buckets."
    },
    {
      "compliance_id": "3.9",
      "title": "Ensure that object-level logging for read events is enabled for S3 buckets",
      "existing_functions_mapped": [
        "cloudtrail_s3_dataevents_read_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_s3_dataevents_read_enabled' directly addresses the compliance requirement of enabling object-level logging for read events in S3 buckets."
    },
    {
      "compliance_id": "4.1",
      "title": "Ensure unauthorized API calls are monitored",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudwatch_log_metric_filter_unauthorized_api_calls"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudtrail_cloudwatch_logging_enabled' and 'cloudwatch_log_metric_filter_unauthorized_api_calls' collectively ensure that unauthorized API calls are monitored. The first function ensures that CloudTrail logs are directed to CloudWatch, while the second function establishes a metric filter and alarm for unauthorized API calls, as recommended in the compliance item description."
    },
    {
      "compliance_id": "4.2",
      "title": "Ensure management console sign-in without MFA is monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudtrail_cloudwatch_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudwatch_log_metric_filter_sign_in_without_mfa' and 'cloudtrail_cloudwatch_logging_enabled' together provide complete coverage for this compliance requirement. The first function ensures that sign-ins without MFA are being monitored, while the second function ensures that CloudTrail logs are being directed to CloudWatch for real-time monitoring."
    },
    {
      "compliance_id": "4.3",
      "title": "Ensure usage of the 'root' account is monitored",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudwatch_log_metric_filter_root_usage"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_root_account_usage_monitoring",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all API calls made by the root account are being monitored, a new function is needed to check if CloudTrail is configured to capture these events."
        },
        {
          "name": "cloudwatch_alarm_for_root_account_usage",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure real-time monitoring of root account usage, a new function is needed to check if a CloudWatch alarm is set up for this specific metric."
        }
      ],
      "mapping_notes": "The existing functions 'cloudtrail_cloudwatch_logging_enabled' and 'cloudwatch_log_metric_filter_root_usage' partially cover the compliance requirement by ensuring that CloudTrail logs are directed to CloudWatch and that a metric filter for root usage is established. However, they do not ensure that all API calls made by the root account are being monitored or that an alarm is set up for this specific metric. Therefore, two new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "4.4",
      "title": "Ensure IAM policy changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_policy_changes"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_policy_change_cloudtrail_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all IAM policy changes are being logged by CloudTrail"
        },
        {
          "name": "iam_policy_change_cloudwatch_alarm_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that alarms are set up for IAM policy changes in CloudWatch"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance requirement by checking for CloudTrail configuration changes and policy changes. However, they do not specifically check for IAM policy changes. New functions are suggested to fill this gap."
    },
    {
      "compliance_id": "4.5",
      "title": "Ensure CloudTrail configuration changes are monitored",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudtrail_cloudwatch_logging_enabled' and 'cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled' collectively ensure that CloudTrail configuration changes are monitored and alarms are set up for any changes, satisfying the compliance requirement completely."
    },
    {
      "compliance_id": "4.6",
      "title": "Ensure AWS Management Console authentication failures are monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudtrail_cloudwatch_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudwatch_log_metric_filter_authentication_failures' and 'cloudtrail_cloudwatch_logging_enabled' provide the necessary functionality to monitor AWS Management Console authentication failures. The first function checks for CloudWatch log metric filters for authentication failures, while the second function ensures that CloudTrail logs are directed to CloudWatch, which is necessary for real-time monitoring of API calls."
    },
    {
      "compliance_id": "4.7",
      "title": "Ensure disabling or scheduled deletion of customer created CMKs is monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk' appears to cover the requirements of this compliance item as it monitors for disabling or scheduled deletion of KMS CMKs."
    },
    {
      "compliance_id": "4.8",
      "title": "Ensure S3 bucket policy changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudwatch_log_metric_filter_for_s3_bucket_policy_changes' appears to cover the requirements of this compliance item, as it checks for CloudWatch metric filters for S3 bucket policy changes."
    },
    {
      "compliance_id": "4.9",
      "title": "Ensure AWS Config configuration changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled', 'config_recorder_all_regions_enabled', and 'config_recorder_using_aws_service_role' collectively ensure that AWS Config configuration changes are monitored across all regions and that alarms are set up for any changes. Therefore, the coverage is assessed as complete."
    },
    {
      "compliance_id": "4.10",
      "title": "Ensure security group changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_security_group_changes"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_security_group_changes_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all changes to security groups are logged in CloudTrail"
        },
        {
          "name": "cloudwatch_security_group_changes_alarm_configured",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that an alarm is configured to trigger when changes to security groups are detected"
        }
      ],
      "mapping_notes": "The existing function 'cloudwatch_log_metric_filter_security_group_changes' partially covers the compliance requirement by detecting changes to security groups. However, it does not ensure that these changes are logged in CloudTrail or that an alarm is configured to trigger when such changes are detected. Therefore, two new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "4.11",
      "title": "Ensure Network Access Control List (NACL) changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudtrail_cloudwatch_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudwatch_changes_to_network_acls_alarm_configured' and 'cloudtrail_cloudwatch_logging_enabled' provide complete coverage for the compliance requirement to monitor changes to NACLs. The first function ensures that a CloudWatch alarm is configured to monitor changes to NACLs, while the second function ensures that CloudTrail logs are directed to CloudWatch for real-time monitoring of API calls."
    },
    {
      "compliance_id": "4.12",
      "title": "Ensure changes to network gateways are monitored",
      "existing_functions_mapped": [
        "cloudwatch_changes_to_network_gateways_alarm_configured"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudwatch_changes_to_network_gateways_alarm_configured' directly addresses the compliance requirement of monitoring changes to network gateways. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "4.13",
      "title": "Ensure route table changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudtrail_cloudwatch_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'cloudwatch_changes_to_network_route_tables_alarm_configured' and 'cloudtrail_cloudwatch_logging_enabled' cover the requirements of this compliance item. The first function ensures that changes to route tables are monitored and alarms are configured for such changes. The second function ensures that CloudTrail logs are directed to CloudWatch, which is necessary for real-time monitoring of API calls."
    },
    {
      "compliance_id": "4.14",
      "title": "Ensure VPC changes are monitored",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_not_publicly_accessible"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_vpc_changes_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that all VPC changes are being logged by CloudTrail"
        },
        {
          "name": "cloudwatch_vpc_changes_metric_filter_and_alarm",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that a metric filter and alarm are established for changes made to VPCs"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance requirement of monitoring VPC changes. They ensure that CloudTrail logs are directed to CloudWatch and that changes to VPCs trigger alarms. However, they do not specifically check for logging of VPC changes in CloudTrail or the establishment of a metric filter and alarm for VPC changes in CloudWatch. Therefore, two new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "4.15",
      "title": "Ensure AWS Organizations changes are monitored",
      "existing_functions_mapped": [
        "cloudwatch_log_metric_filter_aws_organizations_changes"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_aws_organizations_changes_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that AWS Organizations changes are being logged by CloudTrail"
        },
        {
          "name": "cloudwatch_alarm_for_aws_organizations_changes",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that alarms are set up for AWS Organizations changes"
        }
      ],
      "mapping_notes": "Existing function 'cloudwatch_log_metric_filter_aws_organizations_changes' partially covers the requirement by checking for a CloudWatch log metric filter for AWS Organizations changes. However, there are no existing functions to ensure that these changes are being logged by CloudTrail or that alarms are set up for these changes, hence the need for new functions."
    },
    {
      "compliance_id": "4.16",
      "title": "Ensure AWS Security Hub is enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "securityhub_check_enabled",
          "boto3_api": "securityhub.describe_hub()",
          "service": "securityhub",
          "rationale": "This function is needed to check if AWS Security Hub is enabled"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'securityhub_check_enabled' is suggested to check if AWS Security Hub is enabled."
    },
    {
      "compliance_id": "5.1.1",
      "title": "Ensure EBS volume encryption is enabled in all regions",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ec2_ebs_default_encryption' and 'ec2_ebs_volume_encryption' cover the requirement of ensuring EBS volume encryption is enabled in all regions."
    },
    {
      "compliance_id": "5.1.2",
      "title": "Ensure CIFS access is restricted to trusted networks to prevent unauthorized access",
      "existing_functions_mapped": [
        "ec2_instance_port_cifs_exposed_to_internet",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_cassandra_7199_9160_8888"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_securitygroup_cifs_access_restricted_to_trusted_networks",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that CIFS access is restricted to trusted networks, we need to check the security group rules for CIFS ports and verify that only trusted networks are allowed."
        }
      ],
      "mapping_notes": "Existing functions can check if CIFS ports are exposed to the internet, but they do not verify if access is restricted to trusted networks. A new function is needed to check the security group rules for CIFS ports and ensure that only trusted networks are allowed."
    },
    {
      "compliance_id": "5.2",
      "title": "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to remote server administration ports",
      "existing_functions_mapped": [
        "ec2_networkacl_allow_ingress_tcp_port_22",
        "ec2_networkacl_allow_ingress_tcp_port_3389"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_networkacl_allow_ingress_all_protocols",
          "boto3_api": "ec2.describe_network_acls()",
          "service": "ec2",
          "rationale": "To check if any NACL allows unrestricted ingress access using ALL (-1) protocols"
        }
      ],
      "mapping_notes": "Existing functions cover the check for unrestricted ingress access to ports 22 and 3389. However, there is no function to check for unrestricted access using ALL (-1) protocols. Hence, a new function is suggested."
    },
    {
      "compliance_id": "5.3",
      "title": "Ensure no security groups allow ingress from 0.0.0.0/0 to remote server administration ports",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22' and 'ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389' cover the compliance requirement of checking if any security group allows unrestricted ingress access to remote server administration ports (SSH on port 22 and RDP on port 3389)."
    },
    {
      "compliance_id": "5.4",
      "title": "Ensure no security groups allow ingress from ::/0 to remote server administration ports",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To check if any security group allows ingress from ::/0 to SSH port 22"
        },
        {
          "name": "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To check if any security group allows ingress from ::/0 to RDP port 3389"
        }
      ],
      "mapping_notes": "Existing functions only check for ingress from the internet to specific ports, but do not specifically check for ingress from ::/0 (all IPv6 addresses). New functions are suggested to fill this gap."
    },
    {
      "compliance_id": "5.5",
      "title": "Ensure the default security group of every VPC restricts all traffic",
      "existing_functions_mapped": [
        "ec2_securitygroup_default_restrict_traffic"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_default_security_group_no_inbound_rules",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that the default security group of every VPC has no inbound rules"
        },
        {
          "name": "ec2_default_security_group_no_outbound_rules",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that the default security group of every VPC has no outbound rules"
        }
      ],
      "mapping_notes": "The existing function 'ec2_securitygroup_default_restrict_traffic' partially covers the compliance requirement. However, it does not explicitly check for no inbound and outbound rules. Therefore, two new functions are suggested to fill this gap."
    },
    {
      "compliance_id": "5.6",
      "title": "Ensure routing tables for VPC peering are \"least access\"",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_vpc_peering_route_table_least_access_check",
          "boto3_api": "ec2.describe_route_tables()",
          "service": "ec2",
          "rationale": "This function is needed to ensure that the routing tables for VPC peering are configured to allow the least access necessary."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the configuration of routing tables for VPC peering."
    },
    {
      "compliance_id": "5.7",
      "title": "Ensure that the EC2 Metadata Service only allows IMDSv2",
      "existing_functions_mapped": [
        "ec2_instance_imdsv2_enabled",
        "ec2_instance_account_imdsv2_enabled",
        "ec2_launch_template_imdsv2_required",
        "autoscaling_group_launch_configuration_requires_imdsv2"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ec2_instance_imdsv2_enabled', 'ec2_instance_account_imdsv2_enabled', 'ec2_launch_template_imdsv2_required', and 'autoscaling_group_launch_configuration_requires_imdsv2' cover the requirement of ensuring that the EC2 Metadata Service only allows IMDSv2."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "iam_root_user_access_key_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "This function is needed to check if any access keys are associated with the 'root' user account"
    },
    {
      "name": "iam_root_account_mfa_enabled",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "This function is needed to check if MFA is enabled for the root account"
    },
    {
      "name": "iam_root_account_hardware_mfa_enabled",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "This function is needed to check if the root account has hardware MFA enabled."
    },
    {
      "name": "iam_root_user_activity_check",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "To check if the root user has been used for any activity"
    },
    {
      "name": "iam_root_user_mfa_enabled_check",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "To ensure MFA is enabled for the root user"
    },
    {
      "name": "iam_password_policy_minimum_length_14",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "This function is needed to check if the IAM password policy requires a minimum length of 14 or greater"
    },
    {
      "name": "iam_password_policy_prevent_reuse_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "This function is needed to check if the IAM password policy is configured to prevent password reuse."
    },
    {
      "name": "iam_user_console_password_mfa_enabled",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "This function is needed to check if MFA is enabled for all IAM users that have a console password. It uses the get_account_password_policy() API call to retrieve the account's password policy and checks if MFA is enabled."
    },
    {
      "name": "iam_user_access_key_creation_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "This function is needed to check if access keys are created during initial setup for IAM users with a console password. It will list the access keys associated with an IAM user and check if they were created during the initial setup."
    },
    {
      "name": "iam_user_console_password_check",
      "boto3_api": "iam.get_login_profile()",
      "service": "iam",
      "rationale": "This function is needed to check if an IAM user has a console password. It will retrieve the user's login profile (which includes their password status) and check if a password exists."
    },
    {
      "name": "iam_user_credentials_unused_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "This function is needed to list all IAM users and check if their credentials have been unused for 45 days or more"
    },
    {
      "name": "iam_user_single_active_access_key_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "This function is needed to ensure that each IAM user has only one active access key at a time, as per the compliance requirement."
    },
    {
      "name": "iam_access_keys_rotation_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "This function is needed to list all the access keys and check the last time they were rotated. If it's more than 90 days, the function should return a warning or error."
    },
    {
      "name": "iam_user_group_only_permissions_check",
      "boto3_api": "iam.list_user_policies() and iam.list_attached_user_policies()",
      "service": "iam",
      "rationale": "To ensure that IAM users receive permissions only through groups, we need to check if any inline or attached policies are directly associated with the user. This can be done using the list_user_policies and list_attached_user_policies boto3 APIs."
    },
    {
      "name": "iam_policy_no_full_admin_privileges",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "This function is needed to list all IAM policies and check if any of them grant full administrative privileges."
    },
    {
      "name": "iam_user_no_full_admin_privileges",
      "boto3_api": "iam.list_attached_user_policies()",
      "service": "iam",
      "rationale": "This function is needed to list all policies attached to IAM users and check if any of them grant full administrative privileges."
    },
    {
      "name": "iam_group_no_full_admin_privileges",
      "boto3_api": "iam.list_attached_group_policies()",
      "service": "iam",
      "rationale": "This function is needed to list all policies attached to IAM groups and check if any of them grant full administrative privileges."
    },
    {
      "name": "iam_role_no_full_admin_privileges",
      "boto3_api": "iam.list_attached_role_policies()",
      "service": "iam",
      "rationale": "This function is needed to list all policies attached to IAM roles and check if any of them grant full administrative privileges."
    },
    {
      "name": "iam_role_exists_for_aws_support",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To check if a role exists for managing incidents with AWS Support"
    },
    {
      "name": "iam_role_policy_for_aws_support",
      "boto3_api": "iam.list_role_policies()",
      "service": "iam",
      "rationale": "To check if the appropriate policy is assigned to the role for managing incidents with AWS Support"
    },
    {
      "name": "ec2_instance_iam_role_check",
      "boto3_api": "ec2.describe_iam_instance_profile_associations()",
      "service": "ec2",
      "rationale": "This function is needed to ensure that each EC2 instance is associated with an IAM role, which is a requirement of compliance item 1.17."
    },
    {
      "name": "iam_role_permissions_policy_check",
      "boto3_api": "iam.list_attached_role_policies()",
      "service": "iam",
      "rationale": "This function is needed to check that the IAM role associated with each EC2 instance has an appropriate permissions policy for the required access, which is a requirement of compliance item 1.17."
    },
    {
      "name": "iam_ssl_certificate_expiration_check",
      "boto3_api": "iam.list_server_certificates()",
      "service": "iam",
      "rationale": "This function is needed to list all the server certificates in IAM and check if any of them have expired."
    },
    {
      "name": "iam_accessanalyzer_enabled_all_regions",
      "boto3_api": "accessanalyzer.list_analyzers()",
      "service": "iam",
      "rationale": "Existing function checks if Access Analyzer is enabled but does not verify it for all regions. New function is needed to ensure Access Analyzer is enabled across all active AWS regions."
    },
    {
      "name": "iam_users_managed_centralized_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To check if IAM users are managed centrally, we need to list all IAM users and verify their association with a central identity federation or AWS Organizations."
    },
    {
      "name": "aws_organizations_multi_account_check",
      "boto3_api": "organizations.list_accounts()",
      "service": "organizations",
      "rationale": "To ensure IAM users are managed in a multi-account environment, we need to list all accounts in the organization and verify that IAM users are associated with these accounts."
    },
    {
      "name": "iam_policy_check_restricted_access",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To check if the AWSCloudShellFullAccess policy is restricted, we need a function that lists all IAM policies and checks their access permissions."
    },
    {
      "name": "iam_user_policy_attachment_check",
      "boto3_api": "iam.list_attached_user_policies()",
      "service": "iam",
      "rationale": "To ensure that the AWSCloudShellFullAccess policy is not attached to any IAM user, we need a function that lists all attached user policies and checks if this policy is among them."
    },
    {
      "name": "s3_bucket_policy_deny_http_requests",
      "boto3_api": "s3.get_bucket_policy()",
      "service": "s3",
      "rationale": "This function is needed to retrieve the bucket policy and check if it is set to deny HTTP requests"
    },
    {
      "name": "s3_bucket_data_discovery",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "To discover all data in S3, we need to list all objects in all buckets"
    },
    {
      "name": "s3_bucket_data_classification",
      "boto3_api": "macie2.classify_findings()",
      "service": "macie",
      "rationale": "To classify data in S3, we can use Macie's classify_findings function"
    },
    {
      "name": "s3_bucket_data_security",
      "boto3_api": "s3.put_bucket_acl()",
      "service": "s3",
      "rationale": "To secure data in S3, we need to ensure appropriate access control lists (ACLs) are in place"
    },
    {
      "name": "s3_bucket_block_public_access_enabled",
      "boto3_api": "s3.get_public_access_block()",
      "service": "s3",
      "rationale": "This function is needed to check if the S3 bucket has block public access enabled."
    },
    {
      "name": "s3_account_block_public_access_enabled",
      "boto3_api": "s3control.get_public_access_block()",
      "service": "s3",
      "rationale": "This function is needed to check if the S3 account has block public access enabled."
    },
    {
      "name": "rds_instance_encryption_at_rest_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if encryption at rest is enabled for RDS instances"
    },
    {
      "name": "rds_instance_auto_minor_version_upgrade_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if the Auto Minor Version Upgrade feature is enabled for RDS instances"
    },
    {
      "name": "rds_instance_public_access_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if the RDS instances are publicly accessible or not."
    },
    {
      "name": "rds_instance_security_group_update_check",
      "boto3_api": "rds.describe_db_security_groups()",
      "service": "rds",
      "rationale": "This function is needed to verify if the VPC security group associated with the RDS instance has been updated to restrict access."
    },
    {
      "name": "rds_multi_az_deployment_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if Multi-AZ deployments are used for enhanced availability in Amazon RDS"
    },
    {
      "name": "kms_cmk_rotation_enabled_check",
      "boto3_api": "kms.get_key_rotation_status()",
      "service": "kms",
      "rationale": "This function is needed to check if the key rotation is enabled for customer-created symmetric CMKs"
    },
    {
      "name": "vpc_flow_logs_enabled",
      "boto3_api": "ec2.describe_flow_logs()",
      "service": "ec2",
      "rationale": "This function is needed to check if VPC Flow Logs are enabled for all VPCs"
    },
    {
      "name": "cloudtrail_root_account_usage_monitoring",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all API calls made by the root account are being monitored, a new function is needed to check if CloudTrail is configured to capture these events."
    },
    {
      "name": "cloudwatch_alarm_for_root_account_usage",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure real-time monitoring of root account usage, a new function is needed to check if a CloudWatch alarm is set up for this specific metric."
    },
    {
      "name": "iam_policy_change_cloudtrail_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all IAM policy changes are being logged by CloudTrail"
    },
    {
      "name": "iam_policy_change_cloudwatch_alarm_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that alarms are set up for IAM policy changes in CloudWatch"
    },
    {
      "name": "cloudtrail_security_group_changes_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all changes to security groups are logged in CloudTrail"
    },
    {
      "name": "cloudwatch_security_group_changes_alarm_configured",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that an alarm is configured to trigger when changes to security groups are detected"
    },
    {
      "name": "cloudtrail_vpc_changes_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that all VPC changes are being logged by CloudTrail"
    },
    {
      "name": "cloudwatch_vpc_changes_metric_filter_and_alarm",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that a metric filter and alarm are established for changes made to VPCs"
    },
    {
      "name": "cloudtrail_aws_organizations_changes_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that AWS Organizations changes are being logged by CloudTrail"
    },
    {
      "name": "cloudwatch_alarm_for_aws_organizations_changes",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that alarms are set up for AWS Organizations changes"
    },
    {
      "name": "securityhub_check_enabled",
      "boto3_api": "securityhub.describe_hub()",
      "service": "securityhub",
      "rationale": "This function is needed to check if AWS Security Hub is enabled"
    },
    {
      "name": "ec2_securitygroup_cifs_access_restricted_to_trusted_networks",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that CIFS access is restricted to trusted networks, we need to check the security group rules for CIFS ports and verify that only trusted networks are allowed."
    },
    {
      "name": "ec2_networkacl_allow_ingress_all_protocols",
      "boto3_api": "ec2.describe_network_acls()",
      "service": "ec2",
      "rationale": "To check if any NACL allows unrestricted ingress access using ALL (-1) protocols"
    },
    {
      "name": "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To check if any security group allows ingress from ::/0 to SSH port 22"
    },
    {
      "name": "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To check if any security group allows ingress from ::/0 to RDP port 3389"
    },
    {
      "name": "ec2_default_security_group_no_inbound_rules",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that the default security group of every VPC has no inbound rules"
    },
    {
      "name": "ec2_default_security_group_no_outbound_rules",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that the default security group of every VPC has no outbound rules"
    },
    {
      "name": "ec2_vpc_peering_route_table_least_access_check",
      "boto3_api": "ec2.describe_route_tables()",
      "service": "ec2",
      "rationale": "This function is needed to ensure that the routing tables for VPC peering are configured to allow the least access necessary."
    }
  ]
}