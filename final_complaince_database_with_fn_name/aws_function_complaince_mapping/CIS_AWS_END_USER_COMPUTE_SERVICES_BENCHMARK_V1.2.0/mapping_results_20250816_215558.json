{
  "metadata": {
    "generated_at": "2025-08-16T22:07:34.345969",
    "compliance_framework": "CIS_AWS_END_USER_COMPUTE_SERVICES_BENCHMARK_V1.2.0.json",
    "prowler_database_functions": 969,
    "processing_stats": {
      "total_items": 34,
      "processed": 34,
      "skipped_manual": 0,
      "mapped_complete": 3,
      "mapped_partial": 7,
      "mapped_none": 24,
      "new_functions_suggested": 37
    }
  },
  "mapping_results": [
    {
      "compliance_id": "2.1",
      "title": "Ensure Administration of WorkSpaces is defined using IAM",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_iam_administration_defined",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To ensure that IAM policies are defined for the administration of WorkSpaces"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. A new function is suggested to check if IAM policies are defined for the administration of WorkSpaces."
    },
    {
      "compliance_id": "2.2",
      "title": "Ensure MFA is enabled for WorkSpaces users",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_user_mfa_enabled_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if MFA is enabled for all WorkSpaces users"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workspaces_user_mfa_enabled_check' is suggested to check if MFA is enabled for all WorkSpaces users."
    },
    {
      "compliance_id": "2.3",
      "title": "Ensure WorkSpace volumes are encrypted.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_volume_encryption_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if the WorkSpace volumes are encrypted."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the encryption of WorkSpace volumes. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "2.4",
      "title": "Ensure WorkSpaces are deployed in their own virtual private cloud (VPC)",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_vpc_deployment_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if each WorkSpace is deployed within its own VPC"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring WorkSpaces are deployed in their own VPC. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "2.5",
      "title": "Ensure WorkSpaces traffic is controlled and routed through a NAT Gateway.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_traffic_routed_through_nat_gateway",
          "boto3_api": "ec2.describe_route_tables()",
          "service": "ec2",
          "rationale": "This function is needed to ensure that all traffic from WorkSpaces is being routed through a NAT Gateway. The function would describe the route tables associated with the VPC and check that there is a route directing traffic to a NAT Gateway."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring WorkSpaces traffic is controlled and routed through a NAT Gateway. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "2.6",
      "title": "Ensure Web Access to Workspaces is Disabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_web_access_disabled_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if web access to AWS Workspaces is disabled"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if web access to AWS Workspaces is disabled."
    },
    {
      "compliance_id": "2.7",
      "title": "Ensure access is limited to trusted devices",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_device_trust_check",
          "boto3_api": "iam.list_virtual_mfa_devices()",
          "service": "iam",
          "rationale": "To ensure access is limited to trusted devices, we need to check if multi-factor authentication (MFA) is enabled and if the devices used are trusted. This function will list the virtual MFA devices and check if they are trusted."
        },
        {
          "name": "ec2_instance_trusted_device_access_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that EC2 instances are only accessible from trusted devices, we need to check the security group rules for each instance. This function will describe the instances and their associated security groups."
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check if MFA is enabled and if the devices used are trusted, and to check the security group rules for EC2 instances to ensure they are only accessible from trusted devices."
    },
    {
      "compliance_id": "2.8",
      "title": "Ensure the default IP access control group is disassociated.",
      "existing_functions_mapped": [
        "ec2_default_security_group_no_inbound_rules",
        "ec2_default_security_group_no_outbound_rules"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_default_ip_access_control_group_disassociated",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "This function is needed to ensure that the default IP access control group is not associated with any EC2 instances, ENIs, or other resources."
        }
      ],
      "mapping_notes": "The existing functions 'ec2_default_security_group_no_inbound_rules' and 'ec2_default_security_group_no_outbound_rules' partially cover the compliance requirement by ensuring that the default security group does not allow any inbound or outbound traffic. However, they do not check whether the default IP access control group is disassociated from all resources. Therefore, a new function 'ec2_default_ip_access_control_group_disassociated' is suggested."
    },
    {
      "compliance_id": "2.9",
      "title": "Ensure CloudWatch is set up for WorkSpaces",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_cloudwatch_setup_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if CloudWatch is set up for WorkSpaces"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if CloudWatch is set up for WorkSpaces."
    },
    {
      "compliance_id": "2.10",
      "title": "Ensure that patches and updates are performed on the operating system for Workstations",
      "existing_functions_mapped": [
        "ec2_instance_latest_patch_version_check",
        "ec2_instance_managed_by_ssm"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "workstation_os_patch_and_update_check",
          "boto3_api": "ssm.describe_instance_information()",
          "service": "ssm",
          "rationale": "To ensure that patches and updates are performed on the operating system for Workstations, we need a function that checks the patch and update status of the operating system on workstations. This can be achieved using the AWS Systems Manager (SSM) service."
        }
      ],
      "mapping_notes": "The existing functions 'ec2_instance_latest_patch_version_check' and 'ec2_instance_managed_by_ssm' partially cover the compliance requirement. However, they do not specifically target workstations or provide a comprehensive check for patches and updates on the operating system. Therefore, a new function 'workstation_os_patch_and_update_check' is suggested."
    },
    {
      "compliance_id": "2.11",
      "title": "Ensure your WorkSpaces image has the appropriate CIS Operating System Benchmark applied",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_image_cis_benchmark_check",
          "boto3_api": "workspaces.describe_workspace_images()",
          "service": "workspaces",
          "rationale": "This function is needed to check if the WorkSpaces image has the appropriate CIS Operating System Benchmark applied"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workspaces_image_cis_benchmark_check' is suggested to check if the WorkSpaces image has the appropriate CIS Operating System Benchmark applied."
    },
    {
      "compliance_id": "2.12",
      "title": "Restrict WorkSpaces Bundle options to organization approved versions",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_bundle_approved_versions_check",
          "boto3_api": "workspaces.describe_workspace_bundles()",
          "service": "workspaces",
          "rationale": "This function is needed to check if the WorkSpaces Bundle options are restricted to organization approved versions"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workspaces_bundle_approved_versions_check' is suggested to check if the WorkSpaces Bundle options are restricted to organization approved versions."
    },
    {
      "compliance_id": "2.13",
      "title": "Ensure Workspaces images are not older than 90 days.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_images_older_than_90_days",
          "boto3_api": "workspaces.describe_workspace_images()",
          "service": "workspaces",
          "rationale": "This function is needed to check the age of Workspaces images and ensure they are not older than 90 days."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to cover this requirement."
    },
    {
      "compliance_id": "2.14",
      "title": "Ensure WorkSpaces that are not being utilized are removed.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_unused_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to identify unused WorkSpaces and ensure they are removed to maintain compliance."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring unused WorkSpaces are removed. A new function, 'workspaces_unused_check', is suggested to fill this gap."
    },
    {
      "compliance_id": "2.15",
      "title": "Ensure primary interface ports for Workspaces are not open to all inbound traffic.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_interface_ports_inbound_traffic_check",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if the primary interface ports for Workspaces are not open to all inbound traffic."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workspaces_interface_ports_inbound_traffic_check' is suggested to fulfill this requirement."
    },
    {
      "compliance_id": "2.16",
      "title": "Ensure FIPS Endpoint encryption is enabled for WorkSpaces.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_fips_endpoint_encryption_enabled",
          "boto3_api": "workspaces.describe_workspaces()",
          "service": "workspaces",
          "rationale": "This function is needed to check if FIPS Endpoint encryption is enabled for WorkSpaces."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if FIPS Endpoint encryption is enabled for WorkSpaces."
    },
    {
      "compliance_id": "2.17",
      "title": "Ensure WorkSpaces API requests flow through a VPC Endpoint",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workspaces_api_requests_vpc_endpoint_check",
          "boto3_api": "ec2.describe_vpc_endpoints()",
          "service": "ec2",
          "rationale": "This function is needed to check if WorkSpaces API requests are flowing through a VPC Endpoint"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if WorkSpaces API requests are flowing through a VPC Endpoint."
    },
    {
      "compliance_id": "2.18",
      "title": "Ensure Radius server is using the recommended security protocol",
      "existing_functions_mapped": [
        "directoryservice_radius_server_security_protocol"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'directoryservice_radius_server_security_protocol' appears to directly address the compliance requirement of ensuring the Radius server is using the recommended security protocol."
    },
    {
      "compliance_id": "3.1",
      "title": "Ensure User Access Logging is enabled",
      "existing_functions_mapped": [
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_timestream_activities_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The compliance requirement 'Ensure User Access Logging is enabled' is fully covered by the existing functions related to CloudTrail logging. These functions ensure that logging is enabled for various AWS services and activities, which is essential for monitoring user access."
    },
    {
      "compliance_id": "4.1",
      "title": "Ensure Administrators of WorkDocs is defined using IAM",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workdocs_administrators_defined_using_iam",
          "boto3_api": "workdocs.describe_users()",
          "service": "workdocs",
          "rationale": "This function is needed to ensure that administrators of WorkDocs are defined using IAM. It will describe the users in the WorkDocs account and check if the administrators are defined using IAM."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workdocs_administrators_defined_using_iam' is suggested to fulfill this requirement."
    },
    {
      "compliance_id": "4.2",
      "title": "Ensure MFA is enabled for WorkDoc users",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workdocs_user_mfa_enabled_check",
          "boto3_api": "workdocs.describe_users()",
          "service": "workdocs",
          "rationale": "This function is needed to check if MFA is enabled for each WorkDocs user"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workdocs_user_mfa_enabled_check' is suggested to check if MFA is enabled for each WorkDocs user."
    },
    {
      "compliance_id": "4.3",
      "title": "Ensure Workdocs access is limited to a range of allowable IP addresses",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workdocs_ip_range_access_check",
          "boto3_api": "workdocs.describe_users()",
          "service": "workdocs",
          "rationale": "This function is needed to check if the Workdocs access is limited to a range of allowable IP addresses"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of limiting Workdocs access to a range of allowable IP addresses. A new function 'workdocs_ip_range_access_check' is suggested which uses the 'workdocs.describe_users()' boto3 API to fetch the IP address details of the users accessing Workdocs and checks if they fall within the allowable range."
    },
    {
      "compliance_id": "4.4",
      "title": "Utilize site wide activity feed for monitoring.",
      "existing_functions_mapped": [
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_insights_exist",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_threat_detection_enumeration",
        "cloudtrail_threat_detection_llm_jacking",
        "cloudtrail_threat_detection_privilege_escalation",
        "cloudtrail_timestream_activities_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled",
        "cloudwatch_alarm_actions_alarm_state_configured",
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_alarm_all_services_alarm_configured",
        "cloudwatch_alarm_for_aws_organizations_changes",
        "cloudwatch_alarm_for_qldb",
        "cloudwatch_alarm_for_resource_threshold",
        "cloudwatch_alarm_for_root_account_usage",
        "cloudwatch_alarm_for_unusual_events",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_cross_account_sharing_disabled",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_all_services_logging_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_aws_organizations_changes",
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk",
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes",
        "cloudwatch_log_metric_filter_policy_changes",
        "cloudwatch_log_metric_filter_root_usage",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_timestream_events_monitoring_enabled",
        "cloudwatch_timestream_logs_monitoring_enabled",
        "cloudwatch_timestream_metrics_monitoring_enabled",
        "cloudwatch_vpc_changes_metric_filter_and_alarm"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The compliance requirement is to utilize a site wide activity feed for monitoring. This is covered by the existing functions related to CloudTrail and CloudWatch, which provide logging and monitoring capabilities across AWS services."
    },
    {
      "compliance_id": "4.5",
      "title": "Ensure new users can only be invited from allowed domains.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_invitation_domain_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "This function is needed to check if the new users are invited from allowed domains only."
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'iam_user_invitation_domain_check' is suggested which can be implemented using the 'iam.list_users()' boto3 API to fetch the list of users and then checking if the users are invited from allowed domains."
    },
    {
      "compliance_id": "4.6",
      "title": "Ensure only specific users are allowed to invite external users",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_invite_external_users_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To ensure only specific users are allowed to invite external users, we need to check the IAM policies attached to each user. This function will list all IAM users and check their attached policies for permissions that allow inviting external users."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring only specific users are allowed to invite external users. A new function is suggested to cover this requirement."
    },
    {
      "compliance_id": "4.7",
      "title": "Ensure publicly shareable links is not allowed in WorkDocs",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workdocs_shareable_links_check",
          "boto3_api": "workdocs.describe_users()",
          "service": "workdocs",
          "rationale": "This function is needed to check if any user in WorkDocs has shareable links enabled"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'workdocs_shareable_links_check' is suggested to check if any user in WorkDocs has shareable links enabled."
    },
    {
      "compliance_id": "4.8",
      "title": "Ensure any user that has not accessed WorkDocs in 30 days is set to inactive.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "workdocs_user_last_access_check",
          "boto3_api": "workdocs.describe_users()",
          "service": "workdocs",
          "rationale": "This function is needed to check the last access time of each user and determine if they have not accessed WorkDocs in the past 30 days."
        },
        {
          "name": "workdocs_user_set_inactive",
          "boto3_api": "workdocs.update_user()",
          "service": "workdocs",
          "rationale": "This function is needed to set the user status to inactive if they have not accessed WorkDocs in the past 30 days."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. New functions are suggested to check the last access time of each user and set their status to inactive if they have not accessed WorkDocs in the past 30 days."
    },
    {
      "compliance_id": "5.1",
      "title": "Ensure AppStream is utilizing its own virtual private cloud (VPC)",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "appstream_fleet_vpc_check",
          "boto3_api": "appstream.describe_fleets()",
          "service": "appstream",
          "rationale": "This function is needed to check if AppStream fleets are utilizing their own VPCs"
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring AppStream is utilizing its own VPC. A new function 'appstream_fleet_vpc_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "5.2",
      "title": "Ensure a VPC Endpoint is set for AppStream",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "appstream_vpc_endpoint_check",
          "boto3_api": "ec2.describe_vpc_endpoints()",
          "service": "ec2",
          "rationale": "This function is needed to check if a VPC endpoint is set for AppStream"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'appstream_vpc_endpoint_check' is suggested to check if a VPC endpoint is set for AppStream using the 'ec2.describe_vpc_endpoints()' boto3 API."
    },
    {
      "compliance_id": "5.3",
      "title": "Ensure maximum session duration is no longer than 10 hours",
      "existing_functions_mapped": [
        "appstream_fleet_maximum_session_duration"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_role_maximum_session_duration_check",
          "boto3_api": "iam.get_role()",
          "service": "iam",
          "rationale": "To check the maximum session duration for IAM roles"
        }
      ],
      "mapping_notes": "The existing function 'appstream_fleet_maximum_session_duration' partially covers the compliance requirement for AppStream. However, there is a gap for IAM roles, hence a new function 'iam_role_maximum_session_duration_check' is suggested."
    },
    {
      "compliance_id": "5.4",
      "title": "Ensure session disconnect timeout is set to 5 minutes or less",
      "existing_functions_mapped": [
        "appstream_fleet_session_disconnect_timeout"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_session_disconnect_timeout",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check the session disconnect timeout for EC2 instances"
        },
        {
          "name": "rds_instance_session_disconnect_timeout",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check the session disconnect timeout for RDS instances"
        }
      ],
      "mapping_notes": "The existing function 'appstream_fleet_session_disconnect_timeout' partially covers the compliance requirement for AppStream. However, there are no existing functions to check the session disconnect timeout for EC2 and RDS instances, hence the need for new functions."
    },
    {
      "compliance_id": "5.5",
      "title": "Ensure session Idle disconnect timeout is set to 10 minutes or less",
      "existing_functions_mapped": [
        "appstream_fleet_session_idle_disconnect_timeout"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_session_idle_disconnect_timeout",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check the session idle disconnect timeout for EC2 instances"
        },
        {
          "name": "rds_instance_session_idle_disconnect_timeout",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check the session idle disconnect timeout for RDS instances"
        }
      ],
      "mapping_notes": "The existing function 'appstream_fleet_session_idle_disconnect_timeout' partially covers the compliance requirement for AppStream. However, there are no existing functions to check the session idle disconnect timeout for EC2 and RDS instances, hence the need for new functions."
    },
    {
      "compliance_id": "5.6",
      "title": "Ensure internet access is granted and managed through your VPC",
      "existing_functions_mapped": [
        "autoscaling_group_launch_configuration_no_public_ip",
        "ec2_instance_public_ip",
        "ec2_launch_template_no_public_ip",
        "awslambda_function_inside_vpc"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "vpc_internet_gateway_check",
          "boto3_api": "ec2.describe_internet_gateways()",
          "service": "ec2",
          "rationale": "To ensure that internet access is granted through the VPC, we need to check if an Internet Gateway is attached to the VPC"
        },
        {
          "name": "vpc_nat_gateway_check",
          "boto3_api": "ec2.describe_nat_gateways()",
          "service": "ec2",
          "rationale": "To ensure that internet access is managed properly, we need to check if a NAT Gateway is configured in the VPC"
        },
        {
          "name": "vpc_route_table_internet_access_check",
          "boto3_api": "ec2.describe_route_tables()",
          "service": "ec2",
          "rationale": "To ensure that internet access is managed properly, we need to check if the route tables in the VPC are correctly configured to route traffic to the Internet Gateway or NAT Gateway"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check if resources are configured to not have public IPs and if Lambda functions are inside a VPC. However, these functions do not cover the entire scope of the compliance item, hence the need for new functions to check the configuration of the VPC's Internet Gateway, NAT Gateway, and route tables."
    },
    {
      "compliance_id": "5.7",
      "title": "Ensure Operating system updates are applied to your base image every 30 days.",
      "existing_functions_mapped": [
        "ec2_ami_older_than_90_days"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_ami_os_updates_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to check if the operating system updates are applied to the base image every 30 days."
        }
      ],
      "mapping_notes": "The existing function 'ec2_ami_older_than_90_days' can partially cover the compliance requirement as it checks for AMIs older than 90 days. However, it does not specifically check for operating system updates. Therefore, a new function 'ec2_ami_os_updates_check' is suggested to fill this gap."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "workspaces_iam_administration_defined",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To ensure that IAM policies are defined for the administration of WorkSpaces"
    },
    {
      "name": "workspaces_user_mfa_enabled_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if MFA is enabled for all WorkSpaces users"
    },
    {
      "name": "workspaces_volume_encryption_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if the WorkSpace volumes are encrypted."
    },
    {
      "name": "workspaces_vpc_deployment_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if each WorkSpace is deployed within its own VPC"
    },
    {
      "name": "workspaces_traffic_routed_through_nat_gateway",
      "boto3_api": "ec2.describe_route_tables()",
      "service": "ec2",
      "rationale": "This function is needed to ensure that all traffic from WorkSpaces is being routed through a NAT Gateway. The function would describe the route tables associated with the VPC and check that there is a route directing traffic to a NAT Gateway."
    },
    {
      "name": "workspaces_web_access_disabled_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if web access to AWS Workspaces is disabled"
    },
    {
      "name": "iam_device_trust_check",
      "boto3_api": "iam.list_virtual_mfa_devices()",
      "service": "iam",
      "rationale": "To ensure access is limited to trusted devices, we need to check if multi-factor authentication (MFA) is enabled and if the devices used are trusted. This function will list the virtual MFA devices and check if they are trusted."
    },
    {
      "name": "ec2_instance_trusted_device_access_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that EC2 instances are only accessible from trusted devices, we need to check the security group rules for each instance. This function will describe the instances and their associated security groups."
    },
    {
      "name": "ec2_default_ip_access_control_group_disassociated",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "This function is needed to ensure that the default IP access control group is not associated with any EC2 instances, ENIs, or other resources."
    },
    {
      "name": "workspaces_cloudwatch_setup_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if CloudWatch is set up for WorkSpaces"
    },
    {
      "name": "workstation_os_patch_and_update_check",
      "boto3_api": "ssm.describe_instance_information()",
      "service": "ssm",
      "rationale": "To ensure that patches and updates are performed on the operating system for Workstations, we need a function that checks the patch and update status of the operating system on workstations. This can be achieved using the AWS Systems Manager (SSM) service."
    },
    {
      "name": "workspaces_image_cis_benchmark_check",
      "boto3_api": "workspaces.describe_workspace_images()",
      "service": "workspaces",
      "rationale": "This function is needed to check if the WorkSpaces image has the appropriate CIS Operating System Benchmark applied"
    },
    {
      "name": "workspaces_bundle_approved_versions_check",
      "boto3_api": "workspaces.describe_workspace_bundles()",
      "service": "workspaces",
      "rationale": "This function is needed to check if the WorkSpaces Bundle options are restricted to organization approved versions"
    },
    {
      "name": "workspaces_images_older_than_90_days",
      "boto3_api": "workspaces.describe_workspace_images()",
      "service": "workspaces",
      "rationale": "This function is needed to check the age of Workspaces images and ensure they are not older than 90 days."
    },
    {
      "name": "workspaces_unused_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to identify unused WorkSpaces and ensure they are removed to maintain compliance."
    },
    {
      "name": "workspaces_interface_ports_inbound_traffic_check",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if the primary interface ports for Workspaces are not open to all inbound traffic."
    },
    {
      "name": "workspaces_fips_endpoint_encryption_enabled",
      "boto3_api": "workspaces.describe_workspaces()",
      "service": "workspaces",
      "rationale": "This function is needed to check if FIPS Endpoint encryption is enabled for WorkSpaces."
    },
    {
      "name": "workspaces_api_requests_vpc_endpoint_check",
      "boto3_api": "ec2.describe_vpc_endpoints()",
      "service": "ec2",
      "rationale": "This function is needed to check if WorkSpaces API requests are flowing through a VPC Endpoint"
    },
    {
      "name": "workdocs_administrators_defined_using_iam",
      "boto3_api": "workdocs.describe_users()",
      "service": "workdocs",
      "rationale": "This function is needed to ensure that administrators of WorkDocs are defined using IAM. It will describe the users in the WorkDocs account and check if the administrators are defined using IAM."
    },
    {
      "name": "workdocs_user_mfa_enabled_check",
      "boto3_api": "workdocs.describe_users()",
      "service": "workdocs",
      "rationale": "This function is needed to check if MFA is enabled for each WorkDocs user"
    },
    {
      "name": "workdocs_ip_range_access_check",
      "boto3_api": "workdocs.describe_users()",
      "service": "workdocs",
      "rationale": "This function is needed to check if the Workdocs access is limited to a range of allowable IP addresses"
    },
    {
      "name": "iam_user_invitation_domain_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "This function is needed to check if the new users are invited from allowed domains only."
    },
    {
      "name": "iam_user_invite_external_users_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To ensure only specific users are allowed to invite external users, we need to check the IAM policies attached to each user. This function will list all IAM users and check their attached policies for permissions that allow inviting external users."
    },
    {
      "name": "workdocs_shareable_links_check",
      "boto3_api": "workdocs.describe_users()",
      "service": "workdocs",
      "rationale": "This function is needed to check if any user in WorkDocs has shareable links enabled"
    },
    {
      "name": "workdocs_user_last_access_check",
      "boto3_api": "workdocs.describe_users()",
      "service": "workdocs",
      "rationale": "This function is needed to check the last access time of each user and determine if they have not accessed WorkDocs in the past 30 days."
    },
    {
      "name": "workdocs_user_set_inactive",
      "boto3_api": "workdocs.update_user()",
      "service": "workdocs",
      "rationale": "This function is needed to set the user status to inactive if they have not accessed WorkDocs in the past 30 days."
    },
    {
      "name": "appstream_fleet_vpc_check",
      "boto3_api": "appstream.describe_fleets()",
      "service": "appstream",
      "rationale": "This function is needed to check if AppStream fleets are utilizing their own VPCs"
    },
    {
      "name": "appstream_vpc_endpoint_check",
      "boto3_api": "ec2.describe_vpc_endpoints()",
      "service": "ec2",
      "rationale": "This function is needed to check if a VPC endpoint is set for AppStream"
    },
    {
      "name": "iam_role_maximum_session_duration_check",
      "boto3_api": "iam.get_role()",
      "service": "iam",
      "rationale": "To check the maximum session duration for IAM roles"
    },
    {
      "name": "ec2_instance_session_disconnect_timeout",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check the session disconnect timeout for EC2 instances"
    },
    {
      "name": "rds_instance_session_disconnect_timeout",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check the session disconnect timeout for RDS instances"
    },
    {
      "name": "ec2_instance_session_idle_disconnect_timeout",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check the session idle disconnect timeout for EC2 instances"
    },
    {
      "name": "rds_instance_session_idle_disconnect_timeout",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check the session idle disconnect timeout for RDS instances"
    },
    {
      "name": "vpc_internet_gateway_check",
      "boto3_api": "ec2.describe_internet_gateways()",
      "service": "ec2",
      "rationale": "To ensure that internet access is granted through the VPC, we need to check if an Internet Gateway is attached to the VPC"
    },
    {
      "name": "vpc_nat_gateway_check",
      "boto3_api": "ec2.describe_nat_gateways()",
      "service": "ec2",
      "rationale": "To ensure that internet access is managed properly, we need to check if a NAT Gateway is configured in the VPC"
    },
    {
      "name": "vpc_route_table_internet_access_check",
      "boto3_api": "ec2.describe_route_tables()",
      "service": "ec2",
      "rationale": "To ensure that internet access is managed properly, we need to check if the route tables in the VPC are correctly configured to route traffic to the Internet Gateway or NAT Gateway"
    },
    {
      "name": "ec2_ami_os_updates_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to check if the operating system updates are applied to the base image every 30 days."
    }
  ]
}