{
  "metadata": {
    "generated_at": "2025-08-16T21:07:04.891706",
    "compliance_framework": "CIS_AWS_DATABASE_SERVICES_BENCHMARK_V1.json",
    "prowler_database_functions": 759,
    "processing_stats": {
      "total_items": 82,
      "processed": 82,
      "skipped_manual": 0,
      "mapped_complete": 7,
      "mapped_partial": 52,
      "mapped_none": 23,
      "new_functions_suggested": 153
    }
  },
  "mapping_results": [
    {
      "compliance_id": "2.1",
      "title": "Ensure Amazon VPC (Virtual Private Cloud) has been created",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_vpc_exists_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "ec2",
          "rationale": "This function is needed to check if a VPC exists in the AWS account"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring a VPC has been created. Therefore, a new function 'ec2_vpc_exists_check' is suggested which uses the 'ec2.describe_vpcs()' boto3 API to check for the existence of a VPC."
    },
    {
      "compliance_id": "2.2",
      "title": "Ensure the Use of Security Groups",
      "existing_functions_mapped": [
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_default_security_group_no_inbound_rules",
        "ec2_default_security_group_no_outbound_rules",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_instance_custom_security_group_assigned"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the compliance requirement of ensuring the use of security groups. They check for the existence of security groups, their usage, and their configuration, including inbound and outbound rules."
    },
    {
      "compliance_id": "2.3",
      "title": "Ensure Data at Rest is Encrypted",
      "existing_functions_mapped": [
        "documentdb_cluster_storage_encrypted",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "ec2_ami_encryption_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "aurora_instance_storage_encrypted",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if the storage for Amazon Aurora instances is encrypted."
        }
      ],
      "mapping_notes": "The existing functions cover encryption for DocumentDB clusters, DynamoDB tables, EC2 EBS volumes, and EC2 AMIs. However, there is no existing function to check if the storage for Amazon Aurora instances is encrypted, hence a new function is suggested."
    },
    {
      "compliance_id": "2.4",
      "title": "Ensure Data in Transit is Encrypted",
      "existing_functions_mapped": [
        "dms_endpoint_ssl_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "awslambda_function_variables_encryption_in_transit_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "aurora_instance_ssl_encryption_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if SSL encryption is enabled for Aurora instances"
        }
      ],
      "mapping_notes": "Existing functions cover data in transit encryption for DMS endpoints, DynamoDB Accelerator clusters, and Lambda function variables. However, there is no specific function to check SSL encryption for Aurora instances, hence a new function is suggested."
    },
    {
      "compliance_id": "2.5",
      "title": "Ensure IAM Roles and Policies are Created",
      "existing_functions_mapped": [
        "awslambda_function_iam_role_check",
        "ec2_instance_iam_role_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_roles_exist",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To check if any IAM roles exist in the AWS account"
        },
        {
          "name": "iam_policies_exist",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To check if any IAM policies exist in the AWS account"
        }
      ],
      "mapping_notes": "Existing functions only check if IAM roles are associated with specific resources (Lambda functions, EC2 instances), but do not ensure that IAM roles and policies are created in general. New functions are suggested to cover this gap."
    },
    {
      "compliance_id": "2.6",
      "title": "Ensure Database Audit Logging is Enabled",
      "existing_functions_mapped": [
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_database_audit_logging_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if audit logging is enabled for RDS databases"
        }
      ],
      "mapping_notes": "Existing functions related to CloudTrail logging were mapped as they provide some coverage for the requirement. However, a specific function to check for RDS database audit logging is needed to fully satisfy the compliance item."
    },
    {
      "compliance_id": "2.7",
      "title": "Ensure Passwords are Regularly Rotated",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "aurora_password_rotation_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if the Aurora database passwords are regularly rotated"
        },
        {
          "name": "iam_user_access_keys_rotation_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "To check if the IAM user access keys are regularly rotated"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of ensuring passwords are regularly rotated for Aurora databases and IAM user access keys. Therefore, two new functions are suggested to fill this gap."
    },
    {
      "compliance_id": "2.8",
      "title": "Ensure Access Keys are Regularly Rotated",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_access_keys_rotation_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "This function is needed to check if the IAM access keys are regularly rotated as per the compliance requirement"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of regularly rotating access keys. Hence, a new function 'iam_access_keys_rotation_check' is suggested which uses the 'iam.list_access_keys()' boto3 API to fetch the access keys and check their last rotated timestamp."
    },
    {
      "compliance_id": "2.9",
      "title": "Ensure Least Privilege Access",
      "existing_functions_mapped": [
        "awslambda_function_least_privilege_policy_check",
        "awslambda_function_no_admin_privileges",
        "awslambda_function_iam_role_check",
        "ec2_instance_iam_role_check",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_vpc_peering_route_table_least_access_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "aurora_iam_least_privilege_policy_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if the IAM roles associated with Aurora instances follow the principle of least privilege"
        },
        {
          "name": "aurora_database_user_role_least_privilege_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if the database users and roles within Aurora instances follow the principle of least privilege"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for least privilege access in AWS resources such as Lambda and EC2. However, there are no existing functions that check for least privilege access specifically in Aurora instances, hence the need for new functions."
    },
    {
      "compliance_id": "2.10",
      "title": "Ensure Automatic Backups and Retention Policies are configured",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_vaults_exist",
        "backup_recovery_point_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_aurora_automatic_backups_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if automatic backups are enabled for Amazon Aurora DB instances"
        },
        {
          "name": "rds_aurora_backup_retention_period_configured",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if a backup retention period is specified for Amazon Aurora DB instances"
        }
      ],
      "mapping_notes": "Existing functions related to backup plans and vaults were mapped. However, there are no specific functions to check if automatic backups are enabled and if a retention period is specified for Amazon Aurora DB instances. Therefore, new functions are suggested."
    },
    {
      "compliance_id": "2.11",
      "title": "Ensure Multi-Factor Authentication (MFA) is in use",
      "existing_functions_mapped": [
        "cognito_user_pool_mfa_enabled",
        "directoryservice_supported_mfa_radius_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_user_mfa_enabled",
          "boto3_api": "iam.list_mfa_devices()",
          "service": "iam",
          "rationale": "To check if MFA is enabled for IAM users"
        },
        {
          "name": "root_account_mfa_enabled",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "To check if MFA is enabled for the root account"
        }
      ],
      "mapping_notes": "Existing functions cover MFA for Cognito User Pools and Directory Service. New functions are suggested to cover MFA for IAM users and the root account."
    },
    {
      "compliance_id": "3.1",
      "title": "Ensure to Choose the Appropriate Database Engine",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "rds_database_engine_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if the appropriate database engine is being used for RDS instances"
        },
        {
          "name": "dynamodb_database_engine_check",
          "boto3_api": "dynamodb.describe_table()",
          "service": "dynamodb",
          "rationale": "This function is needed to check if the appropriate database engine is being used for DynamoDB tables"
        },
        {
          "name": "documentdb_database_engine_check",
          "boto3_api": "docdb.describe_db_clusters()",
          "service": "docdb",
          "rationale": "This function is needed to check if the appropriate database engine is being used for DocumentDB clusters"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the database engine for RDS, DynamoDB, and DocumentDB."
    },
    {
      "compliance_id": "3.2",
      "title": "Ensure to Create The Appropriate Deployment Configuration",
      "existing_functions_mapped": [
        "autoscaling_group_multiple_az",
        "awslambda_function_vpc_multi_az",
        "dynamodb_accelerator_cluster_multi_az",
        "documentdb_cluster_multi_az_enabled",
        "dms_instance_multi_az_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_multi_az_deployment_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if EC2 instances are deployed across multiple availability zones"
        },
        {
          "name": "rds_instance_multi_az_deployment_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if RDS instances are deployed across multiple availability zones"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for multi-AZ deployment for various AWS services. However, there are no existing functions for checking multi-AZ deployment for EC2 and RDS instances, hence new functions are suggested."
    },
    {
      "compliance_id": "3.3",
      "title": "Ensure to Create a Virtual Private Cloud (VPC)",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_vpc_exists_check",
          "boto3_api": "ec2.describe_vpcs()",
          "service": "ec2",
          "rationale": "This function is needed to check if a VPC exists in the AWS account"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the creation or existence of a VPC. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "3.4",
      "title": "Ensure to Configure Security Groups",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_with_many_ingress_egress_rules"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_securitygroup_configure_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that security groups are properly configured, a function is needed to describe the security groups and check their configurations."
        }
      ],
      "mapping_notes": "The existing functions mapped are those that check for specific configurations of security groups, such as allowing ingress from the internet to all ports, having wide open public IPv4, and having many ingress/egress rules. However, these functions do not cover all aspects of security group configuration, hence the coverage assessment is partial and a new function is suggested."
    },
    {
      "compliance_id": "3.5",
      "title": "Enable Encryption at Rest",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "documentdb_cluster_storage_encrypted",
        "backup_vaults_encrypted",
        "cloudtrail_kms_encryption_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "dms_endpoint_ssl_enabled",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "ec2_ami_encryption_check",
        "ec2_ebs_snapshots_encrypted",
        "backup_recovery_point_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_encryption_at_rest_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To check if encryption at rest is enabled for S3 buckets"
        },
        {
          "name": "rds_instance_encryption_at_rest_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if encryption at rest is enabled for RDS instances"
        },
        {
          "name": "redshift_cluster_encryption_at_rest_enabled",
          "boto3_api": "redshift.describe_clusters()",
          "service": "redshift",
          "rationale": "To check if encryption at rest is enabled for Redshift clusters"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for encryption at rest for various AWS services. However, there are gaps for services like S3, RDS, and Redshift, hence new functions are suggested."
    },
    {
      "compliance_id": "3.6",
      "title": "Enable Encryption in Transit",
      "existing_functions_mapped": [
        "dms_endpoint_ssl_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_instance_ssl_encryption_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "This function is needed to check if SSL encryption is enabled for RDS instances to ensure data is encrypted in transit."
        }
      ],
      "mapping_notes": "Existing functions 'dms_endpoint_ssl_enabled' and 'dynamodb_accelerator_cluster_in_transit_encryption_enabled' partially cover the compliance requirement for enabling encryption in transit. However, there is a gap in checking if SSL encryption is enabled for RDS instances. Hence, a new function 'rds_instance_ssl_encryption_enabled' is suggested."
    },
    {
      "compliance_id": "3.7",
      "title": "Ensure to Implement Access Control and Authentication",
      "existing_functions_mapped": [
        "apigatewayv2_api_authorizers_enabled",
        "cognito_user_pool_mfa_enabled",
        "cognito_user_pool_advanced_security_enabled",
        "cognito_user_pool_blocks_compromised_credentials_sign_in_attempts",
        "cognito_user_pool_blocks_potential_malicious_sign_in_attempts",
        "cognito_user_pool_client_prevent_user_existence_errors",
        "cognito_user_pool_client_token_revocation_enabled",
        "cognito_user_pool_self_registration_disabled",
        "cognito_user_pool_waf_acl_attached",
        "dms_endpoint_mongodb_authentication_enabled",
        "dms_endpoint_neptune_iam_authorization_enabled",
        "dms_endpoint_ssl_enabled",
        "ec2_instance_iam_role_check",
        "ec2_instance_profile_attached",
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_with_many_ingress_egress_rules"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_user_password_authentication_enabled",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To check if password authentication is enabled for IAM users"
        },
        {
          "name": "iam_user_access_control_policy_attached",
          "boto3_api": "iam.list_attached_user_policies()",
          "service": "iam",
          "rationale": "To check if access control policies are attached to IAM users"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to enforce access control and authentication. However, there are gaps in checking if password authentication is enabled for IAM users and if access control policies are attached to IAM users. Hence, new functions are suggested."
    },
    {
      "compliance_id": "3.8",
      "title": "Ensure to Regularly Patch Systems",
      "existing_functions_mapped": [
        "aws_cli_version_upgrade_check",
        "ec2_ami_older_than_90_days",
        "ec2_instance_older_than_specific_days",
        "ec2_instance_managed_by_ssm"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ssm_patch_compliance_status_check",
          "boto3_api": "ssm.describe_instance_patch_states()",
          "service": "ssm",
          "rationale": "To ensure that the systems are regularly patched, we need to check the patch compliance status of the instances."
        },
        {
          "name": "ssm_patch_baseline_compliance_check",
          "boto3_api": "ssm.describe_patch_baselines()",
          "service": "ssm",
          "rationale": "To ensure that the systems are regularly patched, we need to check if the instances are compliant with the patch baselines."
        }
      ],
      "mapping_notes": "The existing functions provide partial coverage as they check for outdated AWS CLI versions and EC2 instances, and whether EC2 instances are managed by SSM. However, they do not check the patch compliance status of the instances or the compliance with patch baselines, hence the need for new functions."
    },
    {
      "compliance_id": "3.9",
      "title": "Ensure Monitoring and Logging is Enabled",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_aws_organizations_changes",
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk",
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes",
        "cloudwatch_log_metric_filter_policy_changes",
        "cloudwatch_log_metric_filter_root_usage",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_log_group_all_services_logging_enabled",
          "boto3_api": "logs.describe_log_groups()",
          "service": "cloudwatch",
          "rationale": "To ensure that all services have logging enabled, a function to check all log groups is needed."
        },
        {
          "name": "cloudwatch_alarm_all_services_alarm_configured",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that all services have alarms configured, a function to check all alarms is needed."
        }
      ],
      "mapping_notes": "The existing functions mapped are those that relate to enabling and configuring logging and monitoring services in AWS, specifically CloudTrail and CloudWatch. However, these functions do not cover all AWS services, hence the coverage assessment is partial and new functions are suggested to ensure all services have logging and monitoring enabled."
    },
    {
      "compliance_id": "3.10",
      "title": "Ensure to Enable Backup and Recovery",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "dynamodb_table_protected_by_backup_plan",
        "ec2_ebs_volume_protected_by_backup_plan",
        "documentdb_cluster_backup_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_instance_backup_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if backup is enabled for RDS instances"
        }
      ],
      "mapping_notes": "Existing functions cover backup and recovery for various AWS services but there is no specific function to check if backup is enabled for RDS instances. Hence, a new function is suggested."
    },
    {
      "compliance_id": "3.11",
      "title": "Ensure to Regularly Review Security Configuration",
      "existing_functions_mapped": [
        "awsconfig_lambda_config_tracking_enabled",
        "awsconfig_serverless_config_tracking_enabled",
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_bucket_requires_mfa_delete",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_insights_exist",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled",
        "cloudwatch_alarm_actions_alarm_state_configured",
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_alarm_for_aws_organizations_changes",
        "cloudwatch_alarm_for_root_account_usage",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_cross_account_sharing_disabled",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_aws_organizations_changes",
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk",
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes",
        "cloudwatch_log_metric_filter_policy_changes",
        "cloudwatch_log_metric_filter_root_usage",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_instance_security_configuration_review",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To review the security configuration of RDS instances"
        },
        {
          "name": "ec2_instance_security_configuration_review",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To review the security configuration of EC2 instances"
        },
        {
          "name": "iam_user_permissions_review",
          "boto3_api": "iam.list_user_policies()",
          "service": "iam",
          "rationale": "To review the permissions of IAM users"
        }
      ],
      "mapping_notes": "The existing functions mapped are those that enable or check for logging and monitoring of various AWS services, as well as those that check for encryption and access control. These functions are relevant to the compliance item as they help in reviewing and tightening security configurations. However, there are gaps in the existing functions, particularly in the area of reviewing security configurations of specific resources like RDS and EC2 instances, and reviewing IAM user permissions. Hence, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "4.1",
      "title": "Ensure AWS Identity and Access Management (IAM) is in use",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_users_exist",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To ensure IAM is in use, we need to check if there are any IAM users created in the AWS account"
        },
        {
          "name": "iam_roles_exist",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure IAM is in use, we need to check if there are any IAM roles created in the AWS account"
        },
        {
          "name": "iam_policies_exist",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To ensure IAM is in use, we need to check if there are any IAM policies created in the AWS account"
        },
        {
          "name": "iam_groups_exist",
          "boto3_api": "iam.list_groups()",
          "service": "iam",
          "rationale": "To ensure IAM is in use, we need to check if there are any IAM groups created in the AWS account"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring IAM is in use. Therefore, new functions are suggested to check the existence of IAM users, roles, policies, and groups."
    },
    {
      "compliance_id": "4.2",
      "title": "Ensure Fine-Grained Access Control is implemented",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "dynamodb_table_fine_grained_access_control_check",
          "boto3_api": "dynamodb.describe_table()",
          "service": "dynamodb",
          "rationale": "This function is needed to check if Fine-Grained Access Control is implemented on DynamoDB tables"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of implementing Fine-Grained Access Control on DynamoDB tables. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "4.3",
      "title": "Ensure DynamoDB Encryption at Rest",
      "existing_functions_mapped": [
        "dynamodb_tables_kms_cmk_encryption_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'dynamodb_tables_kms_cmk_encryption_enabled' checks if the DynamoDB tables are encrypted with KMS CMK, which satisfies the compliance requirement of ensuring DynamoDB encryption at rest."
    },
    {
      "compliance_id": "4.4",
      "title": "Ensure DynamoDB Encryption in Transit",
      "existing_functions_mapped": [
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "dynamodb_table_in_transit_encryption_enabled",
          "boto3_api": "dynamodb.describe_table()",
          "service": "dynamodb",
          "rationale": "This function is needed to check if the DynamoDB table has in-transit encryption enabled."
        }
      ],
      "mapping_notes": "The existing function 'dynamodb_accelerator_cluster_in_transit_encryption_enabled' partially covers the compliance requirement as it checks for in-transit encryption for DynamoDB Accelerator clusters. However, there is no existing function to check for in-transit encryption for DynamoDB tables, hence a new function 'dynamodb_table_in_transit_encryption_enabled' is suggested."
    },
    {
      "compliance_id": "4.5",
      "title": "Ensure VPC Endpoints are configured",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "vpc_endpoints_configured_check",
          "boto3_api": "ec2.describe_vpc_endpoints()",
          "service": "ec2",
          "rationale": "This function is needed to check if VPC endpoints are configured for secure access to DynamoDB resources within the VPC."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring VPC endpoints are configured. Therefore, a new function 'vpc_endpoints_configured_check' is suggested that uses the 'ec2.describe_vpc_endpoints()' boto3 API to check for the configuration of VPC endpoints."
    },
    {
      "compliance_id": "4.6",
      "title": "Ensure DynamoDB Streams and AWS Lambda for Automated Compliance Checking is Enabled",
      "existing_functions_mapped": [
        "dynamodb_table_autoscaling_enabled",
        "awslambda_function_iam_role_check",
        "awslambda_function_using_supported_runtimes"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "dynamodb_streams_enabled_check",
          "boto3_api": "dynamodb.describe_stream()",
          "service": "dynamodb",
          "rationale": "To check if DynamoDB Streams is enabled for a table"
        },
        {
          "name": "awslambda_function_dynamodb_integration_check",
          "boto3_api": "lambda.get_function_configuration()",
          "service": "lambda",
          "rationale": "To check if a Lambda function is integrated with DynamoDB Streams"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance requirement. They check for DynamoDB autoscaling and Lambda function configurations. However, there are no functions to check if DynamoDB Streams is enabled and if a Lambda function is integrated with DynamoDB Streams. Therefore, two new functions are suggested."
    },
    {
      "compliance_id": "4.7",
      "title": "Ensure Monitor and Audit Activity is enabled",
      "existing_functions_mapped": [
        "dynamodb_table_cross_account_access",
        "dynamodb_table_deletion_protection_enabled",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "dynamodb_tables_pitr_enabled",
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "dynamodb_table_activity_monitoring_enabled",
          "boto3_api": "dynamodb.describe_continuous_backups()",
          "service": "dynamodb",
          "rationale": "To check if continuous backups and point in time recovery are enabled for DynamoDB tables"
        },
        {
          "name": "dynamodb_table_audit_logging_enabled",
          "boto3_api": "dynamodb.describe_table()",
          "service": "dynamodb",
          "rationale": "To check if AWS CloudTrail is enabled for the DynamoDB table"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage for monitoring and auditing activity in DynamoDB. However, there are no specific functions to check if activity monitoring and audit logging are enabled for DynamoDB tables. Therefore, new functions are suggested."
    },
    {
      "compliance_id": "5.1",
      "title": "Ensure Secure Access to ElastiCache",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elasticache_cluster_authentication_enabled",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To check if authentication is enabled for ElastiCache clusters"
        },
        {
          "name": "elasticache_cluster_encryption_in_transit_enabled",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To check if encryption in transit is enabled for ElastiCache clusters"
        },
        {
          "name": "elasticache_cluster_encryption_at_rest_enabled",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To check if encryption at rest is enabled for ElastiCache clusters"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check for authentication and encryption settings in ElastiCache clusters."
    },
    {
      "compliance_id": "5.2",
      "title": "Ensure Network Security is Enabled",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_networkacl_allow_ingress_all_protocols",
        "ec2_networkacl_allow_ingress_any_port",
        "ec2_networkacl_allow_ingress_tcp_port_22",
        "ec2_networkacl_allow_ingress_tcp_port_3389",
        "ec2_networkacl_unused"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "elasticache_network_security_check",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To ensure network security for Amazon ElastiCache, we need to check the configuration of VPC, security groups, and network access controls for ElastiCache clusters. Existing functions do not cover this requirement."
        }
      ],
      "mapping_notes": "Existing functions related to EC2 security groups and network ACLs were mapped as they are relevant to network security. However, these functions do not specifically address ElastiCache network security, hence the coverage assessment is partial and a new function is suggested."
    },
    {
      "compliance_id": "5.3",
      "title": "Ensure Encryption at Rest and in Transit is configured",
      "existing_functions_mapped": [
        "dms_endpoint_redis_in_transit_encryption_enabled",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_volume_encryption",
        "cloudtrail_kms_encryption_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "backup_vaults_encrypted",
        "backup_recovery_point_encrypted",
        "documentdb_cluster_storage_encrypted",
        "awslambda_function_variables_encryption_in_transit_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "elasticache_encryption_at_rest_and_in_transit_enabled",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To check if encryption at rest and in transit is enabled for ElastiCache clusters"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check encryption at rest and in transit for various AWS services. However, there is no existing function to check encryption for ElastiCache, hence a new function is suggested."
    },
    {
      "compliance_id": "5.4",
      "title": "Ensure Automatic Updates and Patching are Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elasticache_cluster_automatic_updates_enabled",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "This function is needed to check if automatic updates and patching are enabled for Amazon ElastiCache clusters"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring automatic updates and patching for Amazon ElastiCache. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "5.5",
      "title": "Ensure Virtual Private Cloud (VPC) is Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elasticache_vpc_enabled_check",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "This function is needed to check if the ElastiCache clusters are configured within a VPC"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring a VPC is enabled for ElastiCache clusters. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "5.6",
      "title": "Ensure Monitoring and Logging is Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elasticache_cluster_monitoring_enabled",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To check if monitoring is enabled for ElastiCache clusters"
        },
        {
          "name": "elasticache_cluster_logging_enabled",
          "boto3_api": "elasticache.describe_events()",
          "service": "elasticache",
          "rationale": "To check if logging is enabled for ElastiCache clusters"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the monitoring and logging of ElastiCache clusters. Therefore, new functions are suggested."
    },
    {
      "compliance_id": "5.7",
      "title": "Ensure Security Configurations are Reviewed Regularly",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elasticache_cluster_security_config_review",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "This function is needed to review the security configurations of Amazon ElastiCache clusters regularly."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of regularly reviewing the security configurations of Amazon ElastiCache clusters. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "5.8",
      "title": "Ensure Authentication and Access Control is Enabled",
      "existing_functions_mapped": [
        "awslambda_function_iam_role_check",
        "ec2_instance_iam_role_check",
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_with_many_ingress_egress_rules"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_role_acl_check",
          "boto3_api": "iam.list_role_policies()",
          "service": "iam",
          "rationale": "To check if the IAM roles have specific permissions set in the Access Control List (ACL)"
        },
        {
          "name": "iam_user_acl_check",
          "boto3_api": "iam.list_user_policies()",
          "service": "iam",
          "rationale": "To check if the IAM users have specific permissions set in the Access Control List (ACL)"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check for IAM roles and security group ingress rules. However, there are no existing functions that check for specific permissions in the Access Control List (ACL) for IAM roles and users, hence the need for new functions."
    },
    {
      "compliance_id": "5.9",
      "title": "Ensure Audit Logging is Enabled",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The compliance requirement is to ensure audit logging is enabled. This is covered by existing functions that check for CloudTrail and CloudWatch logging, encryption, and access controls."
    },
    {
      "compliance_id": "5.10",
      "title": "Ensure Security Configurations are Reviewed Regularly",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "keyspaces_security_configuration_review",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "This function is needed to regularly review and update the security configuration of Amazon Keyspaces environment to protect against potential vulnerabilities and ensure alignment with security requirements."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the regular review and update of security configurations for Amazon Keyspaces environment. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "6.1",
      "title": "Ensure Network Security is Enabled",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_networkacl_allow_ingress_all_protocols",
        "ec2_networkacl_allow_ingress_any_port",
        "ec2_networkacl_allow_ingress_tcp_port_22",
        "ec2_networkacl_allow_ingress_tcp_port_3389",
        "ec2_networkacl_unused",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover various aspects of network security such as security group and network ACL configurations, monitoring changes to network resources, and ensuring that unnecessary ports are not exposed to the internet. Therefore, the coverage is assessed as complete."
    },
    {
      "compliance_id": "6.2",
      "title": "Ensure Data at Rest and in Transit is Encrypted",
      "existing_functions_mapped": [
        "apigatewayv2_api_encryption_enabled",
        "athena_workgroup_encryption",
        "awslambda_function_variables_encryption_in_transit_enabled",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "cloudformation_stack_outputs_find_secrets",
        "cloudfront_distributions_field_level_encryption_enabled",
        "cloudfront_distributions_origin_traffic_encrypted",
        "cloudtrail_kms_encryption_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "codebuild_project_s3_logs_encrypted",
        "dms_endpoint_ssl_enabled",
        "documentdb_cluster_storage_encrypted",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_volume_encryption",
        "ec2_launch_template_no_secrets"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To ensure that data at rest in S3 buckets is encrypted"
        },
        {
          "name": "s3_bucket_in_transit_encryption_enabled",
          "boto3_api": "s3.get_bucket_policy()",
          "service": "s3",
          "rationale": "To ensure that data in transit to/from S3 buckets is encrypted"
        },
        {
          "name": "rds_instance_storage_encrypted",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that data at rest in RDS instances is encrypted"
        },
        {
          "name": "rds_instance_in_transit_encryption_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that data in transit to/from RDS instances is encrypted"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for encryption of data at rest and in transit. However, there are gaps for services like S3 and RDS, hence the need for new functions."
    },
    {
      "compliance_id": "6.3",
      "title": "Ensure Authentication and Access Control is Enabled",
      "existing_functions_mapped": [
        "accessanalyzer_enabled",
        "accessanalyzer_enabled_without_findings",
        "account_security_contact_information_is_registered",
        "account_security_questions_are_registered_in_the_aws_account",
        "apigatewayv2_api_authorizers_enabled",
        "awslambda_function_iam_role_check",
        "awslambda_function_least_privilege_policy_check",
        "awslambda_function_no_admin_privileges",
        "awslambda_function_not_publicly_accessible",
        "cognito_user_pool_advanced_security_enabled",
        "cognito_user_pool_blocks_compromised_credentials_sign_in_attempts",
        "cognito_user_pool_blocks_potential_malicious_sign_in_attempts",
        "cognito_user_pool_mfa_enabled",
        "cognito_user_pool_self_registration_disabled",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_user_access_key_rotation_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "To ensure that access keys are being rotated regularly for IAM users"
        },
        {
          "name": "iam_password_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To ensure that a strong password policy is in place for IAM users"
        },
        {
          "name": "iam_mfa_enabled_check",
          "boto3_api": "iam.list_mfa_devices()",
          "service": "iam",
          "rationale": "To ensure that MFA is enabled for all IAM users"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check for enabled authentication and access control mechanisms. However, there are gaps in checking for IAM user access key rotation, password policy, and MFA enforcement, hence the need for new functions."
    },
    {
      "compliance_id": "6.4",
      "title": "Ensure Audit Logging is Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "memorydb_cluster_audit_logging_enabled",
          "boto3_api": "memorydb.describe_clusters()",
          "service": "memorydb",
          "rationale": "This function is needed to check if audit logging is enabled for Amazon MemoryDB clusters"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to enabling audit logging for Amazon MemoryDB clusters. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "6.5",
      "title": "Ensure Security Configurations are Reviewed Regularly",
      "existing_functions_mapped": [
        "accessanalyzer_enabled",
        "accessanalyzer_enabled_without_findings",
        "account_security_contact_information_is_registered",
        "account_security_questions_are_registered_in_the_aws_account",
        "awsconfig_lambda_config_tracking_enabled",
        "awsconfig_serverless_config_tracking_enabled",
        "awslambda_function_iam_role_check",
        "awslambda_function_least_privilege_policy_check",
        "awslambda_function_no_admin_privileges",
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables",
        "awslambda_function_not_publicly_accessible",
        "awslambda_function_variables_encryption_in_transit_enabled",
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_role_unused_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To identify and remove unused IAM roles"
        },
        {
          "name": "security_group_unused_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To identify and remove unused security groups"
        },
        {
          "name": "encryption_settings_audit",
          "boto3_api": "kms.list_keys()",
          "service": "kms",
          "rationale": "To review and update encryption settings"
        }
      ],
      "mapping_notes": "Mapped functions that relate to IAM roles, security networks, encryption settings, audit logging, and authentication. However, there are no functions to check for unused IAM roles and security groups, and to audit encryption settings, hence new functions are suggested."
    },
    {
      "compliance_id": "6.6",
      "title": "Ensure Monitoring and Alerting is Enabled",
      "existing_functions_mapped": [
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "memorydb_cluster_monitoring_enabled",
          "boto3_api": "memorydb.describe_clusters()",
          "service": "memorydb",
          "rationale": "To check if monitoring is enabled for Amazon MemoryDB clusters"
        },
        {
          "name": "memorydb_cluster_alerting_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To check if alerting is enabled for Amazon MemoryDB clusters"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their relevance to monitoring and alerting in AWS. However, none of the existing functions specifically address Amazon MemoryDB, hence the need for new functions."
    },
    {
      "compliance_id": "7.1",
      "title": "Ensure Network Architecture Planning",
      "existing_functions_mapped": [
        "documentdb_cluster_storage_encrypted",
        "documentdb_cluster_multi_az_enabled",
        "documentdb_cluster_deletion_protection",
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_mongodb_27017_27018",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_networkacl_allow_ingress_all_protocols",
        "ec2_networkacl_allow_ingress_any_port",
        "ec2_networkacl_allow_ingress_tcp_port_22",
        "ec2_networkacl_allow_ingress_tcp_port_3389",
        "ec2_networkacl_unused"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "documentdb_instance_vpc_isolation_check",
          "boto3_api": "docdb.describe_db_instances()",
          "service": "docdb",
          "rationale": "To ensure that DocumentDB instances are isolated within a secure VPC"
        },
        {
          "name": "documentdb_instance_security_group_configuration_check",
          "boto3_api": "docdb.describe_db_instances()",
          "service": "docdb",
          "rationale": "To ensure that appropriate security groups are configured for DocumentDB instances"
        },
        {
          "name": "documentdb_instance_network_acl_configuration_check",
          "boto3_api": "ec2.describe_network_acls()",
          "service": "ec2",
          "rationale": "To ensure that appropriate network ACLs are configured to control inbound and outbound traffic to DocumentDB instances"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their relevance to the compliance requirement of planning network architecture for DocumentDB instances. These functions cover aspects of encryption, multi-AZ deployment, deletion protection, and security group and network ACL configurations. However, there are no specific functions for checking the isolation of DocumentDB instances within a VPC, or for checking the specific security group and network ACL configurations for DocumentDB instances, hence the need for new functions."
    },
    {
      "compliance_id": "7.2",
      "title": "Ensure VPC Security is Configured",
      "existing_functions_mapped": [
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_cifs_access_restricted_to_trusted_networks",
        "ec2_securitygroup_from_launch_wizard",
        "ec2_vpc_peering_route_table_least_access_check",
        "awslambda_function_inside_vpc"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "vpc_security_group_inbound_outbound_traffic_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that the inbound and outbound traffic is properly configured for each security group in the VPC"
        },
        {
          "name": "vpc_subnet_configuration_check",
          "boto3_api": "ec2.describe_subnets()",
          "service": "ec2",
          "rationale": "To ensure that the subnets within the VPC are properly configured"
        },
        {
          "name": "documentdb_instance_vpc_isolation_check",
          "boto3_api": "docdb.describe_db_instances()",
          "service": "docdb",
          "rationale": "To ensure that DocumentDB instances are isolated within the VPC"
        }
      ],
      "mapping_notes": "The existing functions mapped are related to VPC and security group configurations, which are part of the compliance requirement. However, there are no existing functions that directly check for the configuration of subnets and the isolation of DocumentDB instances within the VPC, hence the need for new functions."
    },
    {
      "compliance_id": "7.3",
      "title": "Ensure Encryption at Rest is Enabled",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "backup_vaults_encrypted",
        "cloudtrail_kms_encryption_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "documentdb_cluster_storage_encrypted",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dms_endpoint_ssl_enabled",
        "codebuild_project_s3_logs_encrypted",
        "backup_recovery_point_encrypted",
        "ec2_ami_encryption_check",
        "dms_endpoint_mongodb_authentication_enabled",
        "dms_endpoint_neptune_iam_authorization_enabled",
        "dms_endpoint_redis_in_transit_encryption_enabled",
        "dms_endpoint_ssl_enabled",
        "dms_instance_minor_version_upgrade_enabled",
        "dms_instance_multi_az_enabled",
        "dms_instance_no_public_access",
        "dms_replication_task_source_logging_enabled",
        "dms_replication_task_target_logging_enabled",
        "documentdb_cluster_backup_enabled",
        "documentdb_cluster_cloudwatch_log_export",
        "documentdb_cluster_deletion_protection",
        "documentdb_cluster_multi_az_enabled",
        "documentdb_cluster_public_snapshot",
        "documentdb_cluster_storage_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To check if encryption at rest is enabled for S3 buckets"
        },
        {
          "name": "rds_instance_encryption_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if encryption at rest is enabled for RDS instances"
        },
        {
          "name": "dynamodb_table_encryption_enabled",
          "boto3_api": "dynamodb.describe_table()",
          "service": "dynamodb",
          "rationale": "To check if encryption at rest is enabled for DynamoDB tables"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for encryption at rest for various AWS services. However, there are gaps for services like S3, RDS, and DynamoDB, hence new functions are suggested."
    },
    {
      "compliance_id": "7.4",
      "title": "Ensure Encryption in Transit is Enabled",
      "existing_functions_mapped": [
        "apigatewayv2_api_encryption_enabled",
        "awslambda_function_variables_encryption_in_transit_enabled",
        "cloudfront_distributions_origin_traffic_encrypted",
        "dms_endpoint_ssl_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "documentdb_cluster_storage_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_in_transit_encryption_enabled",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if EC2 instances have in-transit encryption enabled"
        },
        {
          "name": "s3_bucket_in_transit_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To check if S3 buckets have in-transit encryption enabled"
        },
        {
          "name": "rds_instance_in_transit_encryption_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if RDS instances have in-transit encryption enabled"
        }
      ],
      "mapping_notes": "Existing functions cover some AWS services but not all. New functions are needed to ensure in-transit encryption for EC2, S3, and RDS."
    },
    {
      "compliance_id": "7.5",
      "title": "Ensure to Implement Access Control and Authentication",
      "existing_functions_mapped": [
        "documentdb_cluster_cloudwatch_log_export",
        "documentdb_cluster_deletion_protection",
        "documentdb_cluster_multi_az_enabled",
        "documentdb_cluster_public_snapshot",
        "documentdb_cluster_storage_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "documentdb_instance_iam_authentication_enabled",
          "boto3_api": "docdb.describe_db_instances()",
          "service": "docdb",
          "rationale": "To check if IAM authentication is enabled for DocumentDB instances"
        },
        {
          "name": "documentdb_instance_user_roles_permissions_check",
          "boto3_api": "docdb.describe_db_cluster_parameters()",
          "service": "docdb",
          "rationale": "To check if appropriate user roles and permissions are defined for DocumentDB instances"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage for the compliance item. They cover aspects of DocumentDB configuration such as CloudWatch log export, deletion protection, multi-AZ deployment, public snapshot and storage encryption. However, there are no existing functions to check if IAM authentication is enabled for DocumentDB instances and if appropriate user roles and permissions are defined. Therefore, two new functions are suggested."
    },
    {
      "compliance_id": "7.6",
      "title": "Ensure Audit Logging is Enabled",
      "existing_functions_mapped": [
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_audit_logging_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if audit logging is enabled for RDS instances"
        },
        {
          "name": "dynamodb_audit_logging_enabled",
          "boto3_api": "dynamodb.describe_table()",
          "service": "dynamodb",
          "rationale": "To check if audit logging is enabled for DynamoDB tables"
        },
        {
          "name": "s3_audit_logging_enabled",
          "boto3_api": "s3.get_bucket_logging()",
          "service": "s3",
          "rationale": "To check if audit logging is enabled for S3 buckets"
        }
      ],
      "mapping_notes": "Existing functions cover CloudTrail and CloudWatch logging, but there are no functions for checking audit logging on other services like RDS, DynamoDB, and S3. New functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "7.7",
      "title": "Ensure Regular Updates and Patches",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "documentdb_cluster_latest_patch_version_check",
          "boto3_api": "docdb.describe_db_engine_versions()",
          "service": "docdb",
          "rationale": "This function is needed to check if the DocumentDB cluster is running the latest patch version."
        },
        {
          "name": "documentdb_cluster_patch_update_notification_check",
          "boto3_api": "sns.list_subscriptions()",
          "service": "sns",
          "rationale": "This function is needed to check if notifications for DocumentDB patch updates are configured."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring regular updates and patches for DocumentDB. New functions are suggested to check for the latest patch version and update notifications."
    },
    {
      "compliance_id": "7.8",
      "title": "Ensure to Implement Monitoring and Alerting",
      "existing_functions_mapped": [
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_alarm_for_aws_organizations_changes",
        "cloudwatch_alarm_for_root_account_usage",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_aws_organizations_changes",
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk",
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes",
        "cloudwatch_log_metric_filter_policy_changes",
        "cloudwatch_log_metric_filter_root_usage",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The compliance requirement is about implementing monitoring and alerting. The existing functions mapped are all related to CloudWatch, which is AWS's monitoring and observability service. These functions cover various aspects of monitoring and alerting, such as enabling alarm actions, configuring alarms for specific events, enabling insights for Lambda functions, encrypting log groups, setting retention policies for log groups, and setting up metric filters and alarms for various events. Therefore, the coverage is assessed as complete."
    },
    {
      "compliance_id": "7.9",
      "title": "Ensure to Implement Backup and Disaster Recovery",
      "existing_functions_mapped": [
        "documentdb_cluster_backup_enabled",
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "documentdb_cluster_multi_az_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "documentdb_cluster_cross_region_replication_enabled",
          "boto3_api": "docdb.describe_db_clusters()",
          "service": "docdb",
          "rationale": "To check if cross-region replication is enabled for DocumentDB clusters for disaster recovery"
        },
        {
          "name": "documentdb_cluster_backup_retention_period",
          "boto3_api": "docdb.describe_db_clusters()",
          "service": "docdb",
          "rationale": "To check if the backup retention period is set to a sufficient duration for DocumentDB clusters"
        }
      ],
      "mapping_notes": "Existing functions cover the requirement for enabling backups and multi-AZ for DocumentDB clusters. However, there are no functions to check for cross-region replication and backup retention period for DocumentDB clusters, hence new functions are suggested."
    },
    {
      "compliance_id": "7.10",
      "title": "Ensure to Configure Backup Window",
      "existing_functions_mapped": [
        "backup_plans_exist"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "backup_window_configured",
          "boto3_api": "backup.describe_backup_jobs()",
          "service": "backup",
          "rationale": "This function is needed to ensure that a backup window is configured for each backup job"
        }
      ],
      "mapping_notes": "The existing function 'backup_plans_exist' can check if backup plans are in place, but it does not ensure that a backup window is configured. Therefore, a new function 'backup_window_configured' is suggested to fill this gap."
    },
    {
      "compliance_id": "7.11",
      "title": "Ensure to Conduct Security Assessments",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "security_assessment_vulnerability_check",
          "boto3_api": "inspector.describe_findings()",
          "service": "inspector",
          "rationale": "To identify potential security vulnerabilities"
        },
        {
          "name": "security_assessment_penetration_testing",
          "boto3_api": "n/a",
          "service": "n/a",
          "rationale": "Penetration testing requires manual intervention and cannot be automated"
        },
        {
          "name": "security_configuration_best_practices_check",
          "boto3_api": "configservice.describe_compliance_by_config_rule()",
          "service": "configservice",
          "rationale": "To ensure security configuration aligns with best practices"
        },
        {
          "name": "security_configuration_industry_standards_check",
          "boto3_api": "configservice.describe_compliance_by_config_rule()",
          "service": "configservice",
          "rationale": "To ensure security configuration aligns with industry standards"
        }
      ],
      "mapping_notes": "The existing functions do not cover the requirements of the compliance item. New functions are suggested to cover vulnerability assessments, penetration testing, and checks against best practices and industry standards. Note that penetration testing cannot be automated and requires manual intervention."
    },
    {
      "compliance_id": "8.1",
      "title": "Ensure Keyspace Security is Configured",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "keyspaces_user_authentication_check",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To ensure that users are required to log in with their AWS credentials to access Amazon Keyspaces"
        },
        {
          "name": "keyspaces_resource_access_check",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To ensure that users can access the AWS resources and explore the resources that Amazon Keyspaces offers"
        },
        {
          "name": "keyspaces_security_configuration_check",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To ensure that Amazon Keyspaces offers a lot of security that can mitigate a potential attack"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to the compliance requirement of ensuring Keyspace security is configured. New functions are suggested to check user authentication, resource access, and security configuration in Amazon Keyspaces."
    },
    {
      "compliance_id": "8.2",
      "title": "Ensure Network Security is Enabled",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_not_used",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_vpc_peering_route_table_least_access_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "keyspaces_network_parameters_set",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To ensure that the necessary network parameters are set for Amazon Keyspaces"
        },
        {
          "name": "keyspaces_security_measurements_set",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To ensure that the necessary security measurements are set for Amazon Keyspaces"
        }
      ],
      "mapping_notes": "The existing functions mapped are related to ensuring network security by checking for insecure configurations in EC2 security groups and VPC peering. However, there are no existing functions that specifically check for the network parameters and security measurements required for Amazon Keyspaces. Therefore, two new functions are suggested to fill this gap."
    },
    {
      "compliance_id": "8.3",
      "title": "Ensure Data at Rest and in Transit is Encrypted",
      "existing_functions_mapped": [
        "cloudtrail_kms_encryption_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_volume_encryption",
        "dms_endpoint_ssl_enabled",
        "dms_endpoint_redis_in_transit_encryption_enabled",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "documentdb_cluster_storage_encrypted",
        "cloudfront_distributions_field_level_encryption_enabled",
        "cloudfront_distributions_origin_traffic_encrypted",
        "awslambda_function_variables_encryption_in_transit_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "keyspaces_data_encryption_at_rest_enabled",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To check if data at rest is encrypted in Amazon Keyspaces"
        },
        {
          "name": "keyspaces_data_encryption_in_transit_enabled",
          "boto3_api": "keyspaces.describe_keyspaces()",
          "service": "keyspaces",
          "rationale": "To check if data in transit is encrypted in Amazon Keyspaces"
        }
      ],
      "mapping_notes": "Existing functions cover a wide range of AWS services for both data at rest and in transit encryption. However, there are no specific functions for Amazon Keyspaces, hence new functions are suggested."
    },
    {
      "compliance_id": "9.1",
      "title": "Ensure Network Security is Enabled",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "ec2_networkacl_allow_ingress_all_protocols",
        "ec2_networkacl_allow_ingress_any_port",
        "ec2_networkacl_allow_ingress_tcp_port_22",
        "ec2_networkacl_allow_ingress_tcp_port_3389",
        "ec2_networkacl_unused",
        "awslambda_function_inside_vpc",
        "ec2_vpc_peering_route_table_least_access_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_vpc_security_group_rules_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To check the inbound and outbound rules of security groups associated with VPC"
        },
        {
          "name": "ec2_vpc_network_acl_rules_check",
          "boto3_api": "ec2.describe_network_acls()",
          "service": "ec2",
          "rationale": "To check the inbound and outbound rules of network ACLs associated with VPC"
        }
      ],
      "mapping_notes": "The existing functions cover various aspects of network security such as security group and network ACL rules, but they do not provide a comprehensive check for all necessary security measures mentioned in the compliance item. Therefore, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "9.2",
      "title": "Ensure Data at Rest is Encrypted",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "documentdb_cluster_storage_encrypted",
        "backup_vaults_encrypted",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudtrail_kms_encryption_enabled",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "ec2_ami_encryption_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To ensure that data at rest in S3 buckets is encrypted"
        },
        {
          "name": "rds_instance_storage_encrypted",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that data at rest in RDS instances is encrypted"
        },
        {
          "name": "redshift_cluster_encryption_enabled",
          "boto3_api": "redshift.describe_clusters()",
          "service": "redshift",
          "rationale": "To ensure that data at rest in Redshift clusters is encrypted"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for encryption at rest for various AWS services. However, there are gaps for services like S3, RDS, and Redshift, hence the need for new functions."
    },
    {
      "compliance_id": "9.3",
      "title": "Ensure Data in Transit is Encrypted",
      "existing_functions_mapped": [
        "apigatewayv2_api_encryption_enabled",
        "awslambda_function_variables_encryption_in_transit_enabled",
        "cloudfront_distributions_origin_traffic_encrypted",
        "dms_endpoint_ssl_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "dms_endpoint_redis_in_transit_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_data_in_transit_encryption_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that data in transit is encrypted for EC2 instances"
        },
        {
          "name": "s3_bucket_data_in_transit_encryption_check",
          "boto3_api": "s3.get_bucket_policy()",
          "service": "s3",
          "rationale": "To ensure that data in transit is encrypted for S3 buckets"
        },
        {
          "name": "rds_instance_data_in_transit_encryption_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that data in transit is encrypted for RDS instances"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check for encryption in transit. However, not all AWS services are covered by these functions, hence the need for new functions."
    },
    {
      "compliance_id": "9.4",
      "title": "Ensure Authentication and Access Control is Enabled",
      "existing_functions_mapped": [
        "dms_endpoint_neptune_iam_authorization_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "neptune_db_cluster_iam_roles_check",
          "boto3_api": "neptune.describe_db_clusters()",
          "service": "neptune",
          "rationale": "To check if specific IAM roles are associated with the Neptune DB cluster"
        },
        {
          "name": "neptune_db_cluster_iam_policies_check",
          "boto3_api": "iam.list_attached_role_policies()",
          "service": "iam",
          "rationale": "To check if specific IAM policies are associated with the IAM roles of the Neptune DB cluster"
        }
      ],
      "mapping_notes": "The existing function 'dms_endpoint_neptune_iam_authorization_enabled' partially covers the compliance requirement by checking if IAM authorization is enabled for Neptune DB endpoints. However, it does not check for specific IAM roles and policies associated with the Neptune DB cluster. Therefore, two new functions 'neptune_db_cluster_iam_roles_check' and 'neptune_db_cluster_iam_policies_check' are suggested to fill this gap."
    },
    {
      "compliance_id": "9.5",
      "title": "Ensure Audit Logging is Enabled",
      "existing_functions_mapped": [
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover all aspects of enabling and managing audit logging, including enabling logging for various AWS services, validating log files, and encrypting logs."
    },
    {
      "compliance_id": "9.6",
      "title": "Ensure Security Configurations are Reviewed Regularly",
      "existing_functions_mapped": [
        "accessanalyzer_enabled",
        "accessanalyzer_enabled_without_findings",
        "account_security_contact_information_is_registered",
        "account_security_questions_are_registered_in_the_aws_account",
        "awsconfig_lambda_config_tracking_enabled",
        "awsconfig_serverless_config_tracking_enabled",
        "awslambda_function_iam_role_check",
        "awslambda_function_least_privilege_policy_check",
        "awslambda_function_no_admin_privileges",
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables",
        "awslambda_function_not_publicly_accessible",
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_role_regular_review",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure IAM roles are reviewed regularly"
        },
        {
          "name": "security_group_regular_review",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure security groups are reviewed regularly"
        },
        {
          "name": "encryption_settings_regular_review",
          "boto3_api": "kms.list_keys()",
          "service": "kms",
          "rationale": "To ensure encryption settings are reviewed regularly"
        },
        {
          "name": "audit_logging_regular_review",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure audit logging settings are reviewed regularly"
        },
        {
          "name": "authentication_settings_regular_review",
          "boto3_api": "iam.get_account_authorization_details()",
          "service": "iam",
          "rationale": "To ensure authentication settings are reviewed regularly"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to review security configurations such as IAM roles, security groups, encryption settings, audit logging, and authentication. However, there are no functions that specifically check for regular reviews of these configurations, hence the need for new functions."
    },
    {
      "compliance_id": "9.7",
      "title": "Ensure Monitoring and Alerting is Enabled",
      "existing_functions_mapped": [
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_insights_exist",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover various aspects of monitoring and alerting in AWS, including CloudWatch alarms, CloudTrail logging, and encryption for logs. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "10.1",
      "title": "Ensure Data Ingestion is Secure",
      "existing_functions_mapped": [
        "apigatewayv2_api_encryption_enabled",
        "awslambda_function_variables_encryption_in_transit_enabled",
        "cloudfront_distributions_origin_traffic_encrypted",
        "dms_endpoint_ssl_enabled",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "dynamodb_accelerator_cluster_in_transit_encryption_enabled",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "cloudwatch_log_group_kms_encryption_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "kinesis_stream_encryption_enabled",
          "boto3_api": "kinesis.describe_stream()",
          "service": "kinesis",
          "rationale": "To ensure data ingestion via Kinesis streams is secure, encryption should be enabled."
        },
        {
          "name": "s3_bucket_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To ensure data ingestion via S3 buckets is secure, encryption should be enabled."
        },
        {
          "name": "sqs_queue_encryption_enabled",
          "boto3_api": "sqs.get_queue_attributes()",
          "service": "sqs",
          "rationale": "To ensure data ingestion via SQS queues is secure, encryption should be enabled."
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to ensure secure data ingestion by enabling encryption. However, there are gaps in coverage for services like Kinesis, S3, and SQS, hence the need for new functions."
    },
    {
      "compliance_id": "10.2",
      "title": "Ensure Data at Rest is Encrypted",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "timestream_database_encryption_check",
          "boto3_api": "timestream.describe_database()",
          "service": "timestream",
          "rationale": "This function is needed to check if the Timestream database is encrypted at rest."
        },
        {
          "name": "timestream_kms_key_management_check",
          "boto3_api": "kms.describe_key()",
          "service": "kms",
          "rationale": "This function is needed to check if the KMS keys used for Timestream database encryption are properly managed."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. New functions are suggested to check the encryption at rest for Timestream databases and the management of KMS keys used for this encryption."
    },
    {
      "compliance_id": "10.3",
      "title": "Ensure Encryption in Transit is Configured",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "timestream_encryption_in_transit_enabled",
          "boto3_api": "timestream.describe_endpoints()",
          "service": "timestream",
          "rationale": "This function is needed to check if encryption in transit is enabled for Amazon Timestream"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring encryption in transit for Amazon Timestream. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "10.4",
      "title": "Ensure Access Control and Authentication is Enabled",
      "existing_functions_mapped": [
        "awslambda_function_iam_role_check",
        "awslambda_function_least_privilege_policy_check",
        "awslambda_function_no_admin_privileges",
        "awslambda_function_not_publicly_accessible"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "timestream_resource_iam_policy_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To check if IAM policies are defined for Timestream resources"
        },
        {
          "name": "timestream_resource_access_control_check",
          "boto3_api": "timestream.describe_endpoints()",
          "service": "timestream",
          "rationale": "To check if access control is enabled for Timestream resources"
        }
      ],
      "mapping_notes": "Existing functions related to IAM roles and policies were mapped. However, there are no specific functions for Timestream resources, hence new functions are suggested."
    },
    {
      "compliance_id": "10.5",
      "title": "Ensure Fine-Grained Access Control is Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "timestream_table_fine_grained_access_control_enabled",
          "boto3_api": "timestream.describe_table()",
          "service": "timestream",
          "rationale": "This function is needed to check if fine-grained access control is enabled at the table level in Timestream."
        },
        {
          "name": "timestream_row_fine_grained_access_control_enabled",
          "boto3_api": "timestream.query()",
          "service": "timestream",
          "rationale": "This function is needed to check if fine-grained access control is enabled at the row level in Timestream."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. New functions are suggested to check fine-grained access control at both table and row levels in Timestream."
    },
    {
      "compliance_id": "10.6",
      "title": "Ensure Audit Logging is Enabled",
      "existing_functions_mapped": [
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudtrail_timestream_activities_logging_enabled",
          "boto3_api": "cloudtrail.describe_trails()",
          "service": "cloudtrail",
          "rationale": "To ensure that AWS CloudTrail is capturing and logging API calls and activities related to Amazon Timestream"
        }
      ],
      "mapping_notes": "Existing functions cover the general requirements for enabling and configuring AWS CloudTrail, including enabling logging, validating log files, and ensuring logs are stored securely. However, there is no specific function for checking CloudTrail logging for Amazon Timestream activities, hence a new function is suggested."
    },
    {
      "compliance_id": "10.7",
      "title": "Ensure Regular Updates and Patches are Installed",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "timestream_database_latest_patch_check",
          "boto3_api": "timestream.describe_endpoints()",
          "service": "timestream",
          "rationale": "This function is needed to check if the latest patches and updates are installed for Amazon Timestream databases"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'timestream_database_latest_patch_check' is suggested to check if the latest patches and updates are installed for Amazon Timestream databases."
    },
    {
      "compliance_id": "10.8",
      "title": "Ensure Monitoring and Alerting is Enabled",
      "existing_functions_mapped": [
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_timestream_metrics_monitoring_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that Amazon Timestream metrics are being monitored in CloudWatch"
        },
        {
          "name": "cloudwatch_timestream_events_monitoring_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that Amazon Timestream events are being monitored in CloudWatch"
        },
        {
          "name": "cloudwatch_timestream_logs_monitoring_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that Amazon Timestream logs are being monitored in CloudWatch"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to enable and configure monitoring and alerting in CloudWatch. However, none of the existing functions specifically address Amazon Timestream, hence the need for new functions."
    },
    {
      "compliance_id": "10.9",
      "title": "Ensure to Review and Update the Security Configuration",
      "existing_functions_mapped": [
        "awsconfig_lambda_config_tracking_enabled",
        "awsconfig_serverless_config_tracking_enabled",
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled",
        "cloudwatch_alarm_actions_alarm_state_configured",
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_alarm_for_aws_organizations_changes",
        "cloudwatch_alarm_for_root_account_usage",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_cross_account_sharing_disabled",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_aws_organizations_changes",
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk",
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes",
        "cloudwatch_log_metric_filter_policy_changes",
        "cloudwatch_log_metric_filter_root_usage",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "timestream_security_configuration_review",
          "boto3_api": "timestream.describe_endpoints()",
          "service": "timestream",
          "rationale": "To review and update the security configuration of Amazon Timestream implementation"
        }
      ],
      "mapping_notes": "The existing functions mapped are those related to security configuration review and update, logging, encryption, and access control. However, there is no specific function for Amazon Timestream, hence a new function is suggested."
    },
    {
      "compliance_id": "11.1",
      "title": "Ensure to Implement Identity and Access Management (IAM)",
      "existing_functions_mapped": [
        "awslambda_function_iam_role_check",
        "ec2_instance_iam_role_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_role_authentication_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure that only authenticated users are assigned IAM roles"
        },
        {
          "name": "iam_role_authorization_check",
          "boto3_api": "iam.list_role_policies()",
          "service": "iam",
          "rationale": "To ensure that IAM roles have appropriate permissions and do not give access to unauthorized personnel"
        }
      ],
      "mapping_notes": "Existing functions only check for IAM roles in EC2 instances and Lambda functions. New functions are needed to check for authentication and authorization of IAM roles across all services."
    },
    {
      "compliance_id": "11.2",
      "title": "Ensure Network Access is Secure",
      "existing_functions_mapped": [
        "awslambda_function_inside_vpc",
        "ec2_networkacl_allow_ingress_all_protocols",
        "ec2_networkacl_allow_ingress_any_port",
        "ec2_networkacl_allow_ingress_tcp_port_22",
        "ec2_networkacl_allow_ingress_tcp_port_3389",
        "ec2_networkacl_unused",
        "ec2_securitygroup_allow_ingress_from_internet_to_all_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_any_port",
        "ec2_securitygroup_allow_ingress_from_internet_to_high_risk_tcp_ports",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389",
        "ec2_securitygroup_allow_wide_open_public_ipv4",
        "ec2_securitygroup_default_restrict_traffic",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_22",
        "ec2_securitygroup_no_ingress_from_ipv6_all_to_tcp_port_3389",
        "ec2_securitygroup_with_many_ingress_egress_rules",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "vpc_network_access_logging_enabled",
          "boto3_api": "ec2.describe_flow_logs()",
          "service": "ec2",
          "rationale": "To ensure that network access within the VPC is being logged for monitoring and auditing purposes"
        },
        {
          "name": "vpc_network_acl_specific_access",
          "boto3_api": "ec2.describe_network_acls()",
          "service": "ec2",
          "rationale": "To ensure that the Access Control List (ACLs) allows only specific individuals to access the resources"
        }
      ],
      "mapping_notes": "The existing functions mapped cover the aspects of ensuring secure network access within a VPC, monitoring changes to network configurations, and restricting access to specific ports. However, there are no existing functions that specifically check for logging of network access within the VPC and ensuring that the ACLs allow only specific individuals to access the resources, hence the need for new functions."
    },
    {
      "compliance_id": "11.3",
      "title": "Ensure Data at Rest is Encrypted",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "documentdb_cluster_storage_encrypted",
        "backup_vaults_encrypted",
        "cloudtrail_kms_encryption_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "dynamodb_accelerator_cluster_encryption_enabled",
        "ec2_ami_encryption_check",
        "ec2_ebs_snapshots_encrypted",
        "backup_recovery_point_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To ensure that data at rest in S3 buckets is encrypted"
        },
        {
          "name": "rds_instance_storage_encrypted",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that data at rest in RDS instances is encrypted"
        },
        {
          "name": "redshift_cluster_encryption_enabled",
          "boto3_api": "redshift.describe_clusters()",
          "service": "redshift",
          "rationale": "To ensure that data at rest in Redshift clusters is encrypted"
        }
      ],
      "mapping_notes": "Mapped existing functions that check for encryption of data at rest in various AWS services. However, there are no existing functions for checking encryption of data at rest in S3, RDS, and Redshift, hence the need for new functions."
    },
    {
      "compliance_id": "11.4",
      "title": "Ensure Data in Transit is Encrypted",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "qldb_client_tls_encryption_enabled",
          "boto3_api": "qldb.describe_ledger()",
          "service": "qldb",
          "rationale": "To check if the QLDB client is configured to use TLS for secure communication"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring data in transit is encrypted for QLDB instances. A new function is suggested to check if the QLDB client is configured to use TLS for secure communication."
    },
    {
      "compliance_id": "11.5",
      "title": "Ensure to Implement Access Control and Authentication",
      "existing_functions_mapped": [
        "awslambda_function_iam_role_check",
        "awslambda_function_cross_account_access_check",
        "awslambda_function_no_admin_privileges",
        "awslambda_function_least_privilege_policy_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "qldb_iam_policy_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To check if IAM policies are defined to control which users or roles can perform specific actions on QLDB resources"
        },
        {
          "name": "qldb_cross_service_access_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To check if IAM roles are leveraged for cross-service access, securely integrating QLDB with other AWS services"
        }
      ],
      "mapping_notes": "Existing functions related to IAM roles and access control were mapped. However, there are no specific functions for QLDB's built-in authentication and access control mechanisms, hence new functions are suggested."
    },
    {
      "compliance_id": "11.6",
      "title": "Ensure Monitoring and Logging is Enabled",
      "existing_functions_mapped": [
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_alarm_actions_alarm_state_configured",
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_lambda_insights_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "qldb_logging_enabled",
          "boto3_api": "qldb.describe_ledger()",
          "service": "qldb",
          "rationale": "To check if QLDB's built-in logging is enabled"
        },
        {
          "name": "qldb_monitor_logs_for_suspicious_activity",
          "boto3_api": "cloudwatch.describe_alarm_history()",
          "service": "cloudwatch",
          "rationale": "To monitor the logs for any suspicious activities"
        },
        {
          "name": "qldb_monitor_logs_for_errors",
          "boto3_api": "cloudwatch.describe_alarm_history()",
          "service": "cloudwatch",
          "rationale": "To monitor the logs for any errors"
        }
      ],
      "mapping_notes": "Existing functions related to CloudWatch logs and alarms were mapped. However, there are no existing functions specific to QLDB logging and monitoring, hence new functions are suggested."
    },
    {
      "compliance_id": "11.7",
      "title": "Ensure to Enable Backup and Recovery",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_reportplans_exist",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "dynamodb_table_protected_by_backup_plan",
        "ec2_ebs_volume_protected_by_backup_plan"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "rds_instance_backup_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that backup is enabled for all RDS instances"
        },
        {
          "name": "s3_bucket_versioning_enabled",
          "boto3_api": "s3.get_bucket_versioning()",
          "service": "s3",
          "rationale": "To ensure that versioning is enabled for all S3 buckets as a form of backup"
        },
        {
          "name": "ec2_instance_snapshot_exists",
          "boto3_api": "ec2.describe_snapshots()",
          "service": "ec2",
          "rationale": "To ensure that snapshots exist for all EC2 instances as a form of backup"
        }
      ],
      "mapping_notes": "Existing functions cover backup and recovery for some AWS services but not all. New functions are suggested to cover RDS, S3, and EC2 which are commonly used services."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "ec2_vpc_exists_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "ec2",
      "rationale": "This function is needed to check if a VPC exists in the AWS account"
    },
    {
      "name": "aurora_instance_storage_encrypted",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if the storage for Amazon Aurora instances is encrypted."
    },
    {
      "name": "aurora_instance_ssl_encryption_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if SSL encryption is enabled for Aurora instances"
    },
    {
      "name": "iam_roles_exist",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To check if any IAM roles exist in the AWS account"
    },
    {
      "name": "iam_policies_exist",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To check if any IAM policies exist in the AWS account"
    },
    {
      "name": "rds_database_audit_logging_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if audit logging is enabled for RDS databases"
    },
    {
      "name": "aurora_password_rotation_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if the Aurora database passwords are regularly rotated"
    },
    {
      "name": "iam_user_access_keys_rotation_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "To check if the IAM user access keys are regularly rotated"
    },
    {
      "name": "iam_access_keys_rotation_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "This function is needed to check if the IAM access keys are regularly rotated as per the compliance requirement"
    },
    {
      "name": "aurora_iam_least_privilege_policy_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if the IAM roles associated with Aurora instances follow the principle of least privilege"
    },
    {
      "name": "aurora_database_user_role_least_privilege_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if the database users and roles within Aurora instances follow the principle of least privilege"
    },
    {
      "name": "rds_aurora_automatic_backups_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if automatic backups are enabled for Amazon Aurora DB instances"
    },
    {
      "name": "rds_aurora_backup_retention_period_configured",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if a backup retention period is specified for Amazon Aurora DB instances"
    },
    {
      "name": "iam_user_mfa_enabled",
      "boto3_api": "iam.list_mfa_devices()",
      "service": "iam",
      "rationale": "To check if MFA is enabled for IAM users"
    },
    {
      "name": "root_account_mfa_enabled",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "To check if MFA is enabled for the root account"
    },
    {
      "name": "rds_database_engine_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if the appropriate database engine is being used for RDS instances"
    },
    {
      "name": "dynamodb_database_engine_check",
      "boto3_api": "dynamodb.describe_table()",
      "service": "dynamodb",
      "rationale": "This function is needed to check if the appropriate database engine is being used for DynamoDB tables"
    },
    {
      "name": "documentdb_database_engine_check",
      "boto3_api": "docdb.describe_db_clusters()",
      "service": "docdb",
      "rationale": "This function is needed to check if the appropriate database engine is being used for DocumentDB clusters"
    },
    {
      "name": "ec2_instance_multi_az_deployment_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if EC2 instances are deployed across multiple availability zones"
    },
    {
      "name": "rds_instance_multi_az_deployment_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if RDS instances are deployed across multiple availability zones"
    },
    {
      "name": "ec2_vpc_exists_check",
      "boto3_api": "ec2.describe_vpcs()",
      "service": "ec2",
      "rationale": "This function is needed to check if a VPC exists in the AWS account"
    },
    {
      "name": "ec2_securitygroup_configure_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that security groups are properly configured, a function is needed to describe the security groups and check their configurations."
    },
    {
      "name": "s3_bucket_encryption_at_rest_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To check if encryption at rest is enabled for S3 buckets"
    },
    {
      "name": "rds_instance_encryption_at_rest_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if encryption at rest is enabled for RDS instances"
    },
    {
      "name": "redshift_cluster_encryption_at_rest_enabled",
      "boto3_api": "redshift.describe_clusters()",
      "service": "redshift",
      "rationale": "To check if encryption at rest is enabled for Redshift clusters"
    },
    {
      "name": "rds_instance_ssl_encryption_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "This function is needed to check if SSL encryption is enabled for RDS instances to ensure data is encrypted in transit."
    },
    {
      "name": "iam_user_password_authentication_enabled",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To check if password authentication is enabled for IAM users"
    },
    {
      "name": "iam_user_access_control_policy_attached",
      "boto3_api": "iam.list_attached_user_policies()",
      "service": "iam",
      "rationale": "To check if access control policies are attached to IAM users"
    },
    {
      "name": "ssm_patch_compliance_status_check",
      "boto3_api": "ssm.describe_instance_patch_states()",
      "service": "ssm",
      "rationale": "To ensure that the systems are regularly patched, we need to check the patch compliance status of the instances."
    },
    {
      "name": "ssm_patch_baseline_compliance_check",
      "boto3_api": "ssm.describe_patch_baselines()",
      "service": "ssm",
      "rationale": "To ensure that the systems are regularly patched, we need to check if the instances are compliant with the patch baselines."
    },
    {
      "name": "cloudwatch_log_group_all_services_logging_enabled",
      "boto3_api": "logs.describe_log_groups()",
      "service": "cloudwatch",
      "rationale": "To ensure that all services have logging enabled, a function to check all log groups is needed."
    },
    {
      "name": "cloudwatch_alarm_all_services_alarm_configured",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that all services have alarms configured, a function to check all alarms is needed."
    },
    {
      "name": "rds_instance_backup_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if backup is enabled for RDS instances"
    },
    {
      "name": "rds_instance_security_configuration_review",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To review the security configuration of RDS instances"
    },
    {
      "name": "ec2_instance_security_configuration_review",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To review the security configuration of EC2 instances"
    },
    {
      "name": "iam_user_permissions_review",
      "boto3_api": "iam.list_user_policies()",
      "service": "iam",
      "rationale": "To review the permissions of IAM users"
    },
    {
      "name": "iam_users_exist",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To ensure IAM is in use, we need to check if there are any IAM users created in the AWS account"
    },
    {
      "name": "iam_roles_exist",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure IAM is in use, we need to check if there are any IAM roles created in the AWS account"
    },
    {
      "name": "iam_policies_exist",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To ensure IAM is in use, we need to check if there are any IAM policies created in the AWS account"
    },
    {
      "name": "iam_groups_exist",
      "boto3_api": "iam.list_groups()",
      "service": "iam",
      "rationale": "To ensure IAM is in use, we need to check if there are any IAM groups created in the AWS account"
    },
    {
      "name": "dynamodb_table_fine_grained_access_control_check",
      "boto3_api": "dynamodb.describe_table()",
      "service": "dynamodb",
      "rationale": "This function is needed to check if Fine-Grained Access Control is implemented on DynamoDB tables"
    },
    {
      "name": "dynamodb_table_in_transit_encryption_enabled",
      "boto3_api": "dynamodb.describe_table()",
      "service": "dynamodb",
      "rationale": "This function is needed to check if the DynamoDB table has in-transit encryption enabled."
    },
    {
      "name": "vpc_endpoints_configured_check",
      "boto3_api": "ec2.describe_vpc_endpoints()",
      "service": "ec2",
      "rationale": "This function is needed to check if VPC endpoints are configured for secure access to DynamoDB resources within the VPC."
    },
    {
      "name": "dynamodb_streams_enabled_check",
      "boto3_api": "dynamodb.describe_stream()",
      "service": "dynamodb",
      "rationale": "To check if DynamoDB Streams is enabled for a table"
    },
    {
      "name": "awslambda_function_dynamodb_integration_check",
      "boto3_api": "lambda.get_function_configuration()",
      "service": "lambda",
      "rationale": "To check if a Lambda function is integrated with DynamoDB Streams"
    },
    {
      "name": "dynamodb_table_activity_monitoring_enabled",
      "boto3_api": "dynamodb.describe_continuous_backups()",
      "service": "dynamodb",
      "rationale": "To check if continuous backups and point in time recovery are enabled for DynamoDB tables"
    },
    {
      "name": "dynamodb_table_audit_logging_enabled",
      "boto3_api": "dynamodb.describe_table()",
      "service": "dynamodb",
      "rationale": "To check if AWS CloudTrail is enabled for the DynamoDB table"
    },
    {
      "name": "elasticache_cluster_authentication_enabled",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To check if authentication is enabled for ElastiCache clusters"
    },
    {
      "name": "elasticache_cluster_encryption_in_transit_enabled",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To check if encryption in transit is enabled for ElastiCache clusters"
    },
    {
      "name": "elasticache_cluster_encryption_at_rest_enabled",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To check if encryption at rest is enabled for ElastiCache clusters"
    },
    {
      "name": "elasticache_network_security_check",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To ensure network security for Amazon ElastiCache, we need to check the configuration of VPC, security groups, and network access controls for ElastiCache clusters. Existing functions do not cover this requirement."
    },
    {
      "name": "elasticache_encryption_at_rest_and_in_transit_enabled",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To check if encryption at rest and in transit is enabled for ElastiCache clusters"
    },
    {
      "name": "elasticache_cluster_automatic_updates_enabled",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "This function is needed to check if automatic updates and patching are enabled for Amazon ElastiCache clusters"
    },
    {
      "name": "elasticache_vpc_enabled_check",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "This function is needed to check if the ElastiCache clusters are configured within a VPC"
    },
    {
      "name": "elasticache_cluster_monitoring_enabled",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To check if monitoring is enabled for ElastiCache clusters"
    },
    {
      "name": "elasticache_cluster_logging_enabled",
      "boto3_api": "elasticache.describe_events()",
      "service": "elasticache",
      "rationale": "To check if logging is enabled for ElastiCache clusters"
    },
    {
      "name": "elasticache_cluster_security_config_review",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "This function is needed to review the security configurations of Amazon ElastiCache clusters regularly."
    },
    {
      "name": "iam_role_acl_check",
      "boto3_api": "iam.list_role_policies()",
      "service": "iam",
      "rationale": "To check if the IAM roles have specific permissions set in the Access Control List (ACL)"
    },
    {
      "name": "iam_user_acl_check",
      "boto3_api": "iam.list_user_policies()",
      "service": "iam",
      "rationale": "To check if the IAM users have specific permissions set in the Access Control List (ACL)"
    },
    {
      "name": "keyspaces_security_configuration_review",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "This function is needed to regularly review and update the security configuration of Amazon Keyspaces environment to protect against potential vulnerabilities and ensure alignment with security requirements."
    },
    {
      "name": "s3_bucket_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To ensure that data at rest in S3 buckets is encrypted"
    },
    {
      "name": "s3_bucket_in_transit_encryption_enabled",
      "boto3_api": "s3.get_bucket_policy()",
      "service": "s3",
      "rationale": "To ensure that data in transit to/from S3 buckets is encrypted"
    },
    {
      "name": "rds_instance_storage_encrypted",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that data at rest in RDS instances is encrypted"
    },
    {
      "name": "rds_instance_in_transit_encryption_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that data in transit to/from RDS instances is encrypted"
    },
    {
      "name": "iam_user_access_key_rotation_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "To ensure that access keys are being rotated regularly for IAM users"
    },
    {
      "name": "iam_password_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To ensure that a strong password policy is in place for IAM users"
    },
    {
      "name": "iam_mfa_enabled_check",
      "boto3_api": "iam.list_mfa_devices()",
      "service": "iam",
      "rationale": "To ensure that MFA is enabled for all IAM users"
    },
    {
      "name": "memorydb_cluster_audit_logging_enabled",
      "boto3_api": "memorydb.describe_clusters()",
      "service": "memorydb",
      "rationale": "This function is needed to check if audit logging is enabled for Amazon MemoryDB clusters"
    },
    {
      "name": "iam_role_unused_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To identify and remove unused IAM roles"
    },
    {
      "name": "security_group_unused_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To identify and remove unused security groups"
    },
    {
      "name": "encryption_settings_audit",
      "boto3_api": "kms.list_keys()",
      "service": "kms",
      "rationale": "To review and update encryption settings"
    },
    {
      "name": "memorydb_cluster_monitoring_enabled",
      "boto3_api": "memorydb.describe_clusters()",
      "service": "memorydb",
      "rationale": "To check if monitoring is enabled for Amazon MemoryDB clusters"
    },
    {
      "name": "memorydb_cluster_alerting_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To check if alerting is enabled for Amazon MemoryDB clusters"
    },
    {
      "name": "documentdb_instance_vpc_isolation_check",
      "boto3_api": "docdb.describe_db_instances()",
      "service": "docdb",
      "rationale": "To ensure that DocumentDB instances are isolated within a secure VPC"
    },
    {
      "name": "documentdb_instance_security_group_configuration_check",
      "boto3_api": "docdb.describe_db_instances()",
      "service": "docdb",
      "rationale": "To ensure that appropriate security groups are configured for DocumentDB instances"
    },
    {
      "name": "documentdb_instance_network_acl_configuration_check",
      "boto3_api": "ec2.describe_network_acls()",
      "service": "ec2",
      "rationale": "To ensure that appropriate network ACLs are configured to control inbound and outbound traffic to DocumentDB instances"
    },
    {
      "name": "vpc_security_group_inbound_outbound_traffic_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that the inbound and outbound traffic is properly configured for each security group in the VPC"
    },
    {
      "name": "vpc_subnet_configuration_check",
      "boto3_api": "ec2.describe_subnets()",
      "service": "ec2",
      "rationale": "To ensure that the subnets within the VPC are properly configured"
    },
    {
      "name": "documentdb_instance_vpc_isolation_check",
      "boto3_api": "docdb.describe_db_instances()",
      "service": "docdb",
      "rationale": "To ensure that DocumentDB instances are isolated within the VPC"
    },
    {
      "name": "s3_bucket_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To check if encryption at rest is enabled for S3 buckets"
    },
    {
      "name": "rds_instance_encryption_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if encryption at rest is enabled for RDS instances"
    },
    {
      "name": "dynamodb_table_encryption_enabled",
      "boto3_api": "dynamodb.describe_table()",
      "service": "dynamodb",
      "rationale": "To check if encryption at rest is enabled for DynamoDB tables"
    },
    {
      "name": "ec2_instance_in_transit_encryption_enabled",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if EC2 instances have in-transit encryption enabled"
    },
    {
      "name": "s3_bucket_in_transit_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To check if S3 buckets have in-transit encryption enabled"
    },
    {
      "name": "rds_instance_in_transit_encryption_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if RDS instances have in-transit encryption enabled"
    },
    {
      "name": "documentdb_instance_iam_authentication_enabled",
      "boto3_api": "docdb.describe_db_instances()",
      "service": "docdb",
      "rationale": "To check if IAM authentication is enabled for DocumentDB instances"
    },
    {
      "name": "documentdb_instance_user_roles_permissions_check",
      "boto3_api": "docdb.describe_db_cluster_parameters()",
      "service": "docdb",
      "rationale": "To check if appropriate user roles and permissions are defined for DocumentDB instances"
    },
    {
      "name": "rds_audit_logging_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if audit logging is enabled for RDS instances"
    },
    {
      "name": "dynamodb_audit_logging_enabled",
      "boto3_api": "dynamodb.describe_table()",
      "service": "dynamodb",
      "rationale": "To check if audit logging is enabled for DynamoDB tables"
    },
    {
      "name": "s3_audit_logging_enabled",
      "boto3_api": "s3.get_bucket_logging()",
      "service": "s3",
      "rationale": "To check if audit logging is enabled for S3 buckets"
    },
    {
      "name": "documentdb_cluster_latest_patch_version_check",
      "boto3_api": "docdb.describe_db_engine_versions()",
      "service": "docdb",
      "rationale": "This function is needed to check if the DocumentDB cluster is running the latest patch version."
    },
    {
      "name": "documentdb_cluster_patch_update_notification_check",
      "boto3_api": "sns.list_subscriptions()",
      "service": "sns",
      "rationale": "This function is needed to check if notifications for DocumentDB patch updates are configured."
    },
    {
      "name": "documentdb_cluster_cross_region_replication_enabled",
      "boto3_api": "docdb.describe_db_clusters()",
      "service": "docdb",
      "rationale": "To check if cross-region replication is enabled for DocumentDB clusters for disaster recovery"
    },
    {
      "name": "documentdb_cluster_backup_retention_period",
      "boto3_api": "docdb.describe_db_clusters()",
      "service": "docdb",
      "rationale": "To check if the backup retention period is set to a sufficient duration for DocumentDB clusters"
    },
    {
      "name": "backup_window_configured",
      "boto3_api": "backup.describe_backup_jobs()",
      "service": "backup",
      "rationale": "This function is needed to ensure that a backup window is configured for each backup job"
    },
    {
      "name": "security_assessment_vulnerability_check",
      "boto3_api": "inspector.describe_findings()",
      "service": "inspector",
      "rationale": "To identify potential security vulnerabilities"
    },
    {
      "name": "security_assessment_penetration_testing",
      "boto3_api": "n/a",
      "service": "n/a",
      "rationale": "Penetration testing requires manual intervention and cannot be automated"
    },
    {
      "name": "security_configuration_best_practices_check",
      "boto3_api": "configservice.describe_compliance_by_config_rule()",
      "service": "configservice",
      "rationale": "To ensure security configuration aligns with best practices"
    },
    {
      "name": "security_configuration_industry_standards_check",
      "boto3_api": "configservice.describe_compliance_by_config_rule()",
      "service": "configservice",
      "rationale": "To ensure security configuration aligns with industry standards"
    },
    {
      "name": "keyspaces_user_authentication_check",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To ensure that users are required to log in with their AWS credentials to access Amazon Keyspaces"
    },
    {
      "name": "keyspaces_resource_access_check",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To ensure that users can access the AWS resources and explore the resources that Amazon Keyspaces offers"
    },
    {
      "name": "keyspaces_security_configuration_check",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To ensure that Amazon Keyspaces offers a lot of security that can mitigate a potential attack"
    },
    {
      "name": "keyspaces_network_parameters_set",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To ensure that the necessary network parameters are set for Amazon Keyspaces"
    },
    {
      "name": "keyspaces_security_measurements_set",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To ensure that the necessary security measurements are set for Amazon Keyspaces"
    },
    {
      "name": "keyspaces_data_encryption_at_rest_enabled",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To check if data at rest is encrypted in Amazon Keyspaces"
    },
    {
      "name": "keyspaces_data_encryption_in_transit_enabled",
      "boto3_api": "keyspaces.describe_keyspaces()",
      "service": "keyspaces",
      "rationale": "To check if data in transit is encrypted in Amazon Keyspaces"
    },
    {
      "name": "ec2_vpc_security_group_rules_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To check the inbound and outbound rules of security groups associated with VPC"
    },
    {
      "name": "ec2_vpc_network_acl_rules_check",
      "boto3_api": "ec2.describe_network_acls()",
      "service": "ec2",
      "rationale": "To check the inbound and outbound rules of network ACLs associated with VPC"
    },
    {
      "name": "s3_bucket_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To ensure that data at rest in S3 buckets is encrypted"
    },
    {
      "name": "rds_instance_storage_encrypted",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that data at rest in RDS instances is encrypted"
    },
    {
      "name": "redshift_cluster_encryption_enabled",
      "boto3_api": "redshift.describe_clusters()",
      "service": "redshift",
      "rationale": "To ensure that data at rest in Redshift clusters is encrypted"
    },
    {
      "name": "ec2_instance_data_in_transit_encryption_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that data in transit is encrypted for EC2 instances"
    },
    {
      "name": "s3_bucket_data_in_transit_encryption_check",
      "boto3_api": "s3.get_bucket_policy()",
      "service": "s3",
      "rationale": "To ensure that data in transit is encrypted for S3 buckets"
    },
    {
      "name": "rds_instance_data_in_transit_encryption_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that data in transit is encrypted for RDS instances"
    },
    {
      "name": "neptune_db_cluster_iam_roles_check",
      "boto3_api": "neptune.describe_db_clusters()",
      "service": "neptune",
      "rationale": "To check if specific IAM roles are associated with the Neptune DB cluster"
    },
    {
      "name": "neptune_db_cluster_iam_policies_check",
      "boto3_api": "iam.list_attached_role_policies()",
      "service": "iam",
      "rationale": "To check if specific IAM policies are associated with the IAM roles of the Neptune DB cluster"
    },
    {
      "name": "iam_role_regular_review",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure IAM roles are reviewed regularly"
    },
    {
      "name": "security_group_regular_review",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure security groups are reviewed regularly"
    },
    {
      "name": "encryption_settings_regular_review",
      "boto3_api": "kms.list_keys()",
      "service": "kms",
      "rationale": "To ensure encryption settings are reviewed regularly"
    },
    {
      "name": "audit_logging_regular_review",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure audit logging settings are reviewed regularly"
    },
    {
      "name": "authentication_settings_regular_review",
      "boto3_api": "iam.get_account_authorization_details()",
      "service": "iam",
      "rationale": "To ensure authentication settings are reviewed regularly"
    },
    {
      "name": "kinesis_stream_encryption_enabled",
      "boto3_api": "kinesis.describe_stream()",
      "service": "kinesis",
      "rationale": "To ensure data ingestion via Kinesis streams is secure, encryption should be enabled."
    },
    {
      "name": "s3_bucket_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To ensure data ingestion via S3 buckets is secure, encryption should be enabled."
    },
    {
      "name": "sqs_queue_encryption_enabled",
      "boto3_api": "sqs.get_queue_attributes()",
      "service": "sqs",
      "rationale": "To ensure data ingestion via SQS queues is secure, encryption should be enabled."
    },
    {
      "name": "timestream_database_encryption_check",
      "boto3_api": "timestream.describe_database()",
      "service": "timestream",
      "rationale": "This function is needed to check if the Timestream database is encrypted at rest."
    },
    {
      "name": "timestream_kms_key_management_check",
      "boto3_api": "kms.describe_key()",
      "service": "kms",
      "rationale": "This function is needed to check if the KMS keys used for Timestream database encryption are properly managed."
    },
    {
      "name": "timestream_encryption_in_transit_enabled",
      "boto3_api": "timestream.describe_endpoints()",
      "service": "timestream",
      "rationale": "This function is needed to check if encryption in transit is enabled for Amazon Timestream"
    },
    {
      "name": "timestream_resource_iam_policy_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To check if IAM policies are defined for Timestream resources"
    },
    {
      "name": "timestream_resource_access_control_check",
      "boto3_api": "timestream.describe_endpoints()",
      "service": "timestream",
      "rationale": "To check if access control is enabled for Timestream resources"
    },
    {
      "name": "timestream_table_fine_grained_access_control_enabled",
      "boto3_api": "timestream.describe_table()",
      "service": "timestream",
      "rationale": "This function is needed to check if fine-grained access control is enabled at the table level in Timestream."
    },
    {
      "name": "timestream_row_fine_grained_access_control_enabled",
      "boto3_api": "timestream.query()",
      "service": "timestream",
      "rationale": "This function is needed to check if fine-grained access control is enabled at the row level in Timestream."
    },
    {
      "name": "cloudtrail_timestream_activities_logging_enabled",
      "boto3_api": "cloudtrail.describe_trails()",
      "service": "cloudtrail",
      "rationale": "To ensure that AWS CloudTrail is capturing and logging API calls and activities related to Amazon Timestream"
    },
    {
      "name": "timestream_database_latest_patch_check",
      "boto3_api": "timestream.describe_endpoints()",
      "service": "timestream",
      "rationale": "This function is needed to check if the latest patches and updates are installed for Amazon Timestream databases"
    },
    {
      "name": "cloudwatch_timestream_metrics_monitoring_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that Amazon Timestream metrics are being monitored in CloudWatch"
    },
    {
      "name": "cloudwatch_timestream_events_monitoring_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that Amazon Timestream events are being monitored in CloudWatch"
    },
    {
      "name": "cloudwatch_timestream_logs_monitoring_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that Amazon Timestream logs are being monitored in CloudWatch"
    },
    {
      "name": "timestream_security_configuration_review",
      "boto3_api": "timestream.describe_endpoints()",
      "service": "timestream",
      "rationale": "To review and update the security configuration of Amazon Timestream implementation"
    },
    {
      "name": "iam_role_authentication_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure that only authenticated users are assigned IAM roles"
    },
    {
      "name": "iam_role_authorization_check",
      "boto3_api": "iam.list_role_policies()",
      "service": "iam",
      "rationale": "To ensure that IAM roles have appropriate permissions and do not give access to unauthorized personnel"
    },
    {
      "name": "vpc_network_access_logging_enabled",
      "boto3_api": "ec2.describe_flow_logs()",
      "service": "ec2",
      "rationale": "To ensure that network access within the VPC is being logged for monitoring and auditing purposes"
    },
    {
      "name": "vpc_network_acl_specific_access",
      "boto3_api": "ec2.describe_network_acls()",
      "service": "ec2",
      "rationale": "To ensure that the Access Control List (ACLs) allows only specific individuals to access the resources"
    },
    {
      "name": "s3_bucket_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To ensure that data at rest in S3 buckets is encrypted"
    },
    {
      "name": "rds_instance_storage_encrypted",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that data at rest in RDS instances is encrypted"
    },
    {
      "name": "redshift_cluster_encryption_enabled",
      "boto3_api": "redshift.describe_clusters()",
      "service": "redshift",
      "rationale": "To ensure that data at rest in Redshift clusters is encrypted"
    },
    {
      "name": "qldb_client_tls_encryption_enabled",
      "boto3_api": "qldb.describe_ledger()",
      "service": "qldb",
      "rationale": "To check if the QLDB client is configured to use TLS for secure communication"
    },
    {
      "name": "qldb_iam_policy_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To check if IAM policies are defined to control which users or roles can perform specific actions on QLDB resources"
    },
    {
      "name": "qldb_cross_service_access_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To check if IAM roles are leveraged for cross-service access, securely integrating QLDB with other AWS services"
    },
    {
      "name": "qldb_logging_enabled",
      "boto3_api": "qldb.describe_ledger()",
      "service": "qldb",
      "rationale": "To check if QLDB's built-in logging is enabled"
    },
    {
      "name": "qldb_monitor_logs_for_suspicious_activity",
      "boto3_api": "cloudwatch.describe_alarm_history()",
      "service": "cloudwatch",
      "rationale": "To monitor the logs for any suspicious activities"
    },
    {
      "name": "qldb_monitor_logs_for_errors",
      "boto3_api": "cloudwatch.describe_alarm_history()",
      "service": "cloudwatch",
      "rationale": "To monitor the logs for any errors"
    },
    {
      "name": "rds_instance_backup_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that backup is enabled for all RDS instances"
    },
    {
      "name": "s3_bucket_versioning_enabled",
      "boto3_api": "s3.get_bucket_versioning()",
      "service": "s3",
      "rationale": "To ensure that versioning is enabled for all S3 buckets as a form of backup"
    },
    {
      "name": "ec2_instance_snapshot_exists",
      "boto3_api": "ec2.describe_snapshots()",
      "service": "ec2",
      "rationale": "To ensure that snapshots exist for all EC2 instances as a form of backup"
    }
  ]
}