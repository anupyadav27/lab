{
  "metadata": {
    "generated_at": "2025-08-16T22:34:52.724420",
    "compliance_framework": "CIS_AWS_STORAGE_SERVICES_BENCHMARK_V1.json",
    "prowler_database_functions": 1006,
    "processing_stats": {
      "total_items": 56,
      "processed": 56,
      "skipped_manual": 0,
      "mapped_complete": 1,
      "mapped_partial": 23,
      "mapped_none": 32,
      "new_functions_suggested": 125
    }
  },
  "mapping_results": [
    {
      "compliance_id": "1.1",
      "title": "AWS Storage Backups",
      "existing_functions_mapped": [
        "aurora_automatic_backups_enabled",
        "aurora_backup_retention_period_configured",
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "backup_window_configured",
        "documentdb_cluster_backup_completeness_check",
        "documentdb_cluster_backup_enabled",
        "documentdb_cluster_backup_frequency_check",
        "documentdb_cluster_backup_retention_period",
        "dlm_ebs_snapshot_lifecycle_policy_exists",
        "ebs_snapshot_encryption_enabled",
        "ec2_ebs_volume_protected_by_backup_plan",
        "ec2_ebs_volume_snapshots_exists",
        "dynamodb_table_protected_by_backup_plan"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_backup_enabled",
          "boto3_api": "s3.get_bucket_lifecycle_configuration()",
          "service": "s3",
          "rationale": "To ensure that S3 buckets are backed up regularly"
        },
        {
          "name": "rds_instance_backup_enabled",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To ensure that RDS instances are backed up regularly"
        },
        {
          "name": "ec2_instance_backup_enabled",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that EC2 instances are backed up regularly"
        }
      ],
      "mapping_notes": "The existing functions mapped are related to backup configurations for various AWS services. However, there are gaps in coverage for services like S3, RDS, and EC2. New functions are suggested to cover these services."
    },
    {
      "compliance_id": "1.2",
      "title": "Ensure securing AWS Backups",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_reportplans_exist",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "backup_window_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "awsbackup_alert_communication_check",
          "boto3_api": "sns.list_subscriptions()",
          "service": "sns",
          "rationale": "To ensure alert communication with AWS is properly configured"
        },
        {
          "name": "awsbackup_access_credentials_management_check",
          "boto3_api": "iam.list_access_keys()",
          "service": "iam",
          "rationale": "To ensure access credentials for AWS resources are properly managed"
        },
        {
          "name": "awsbackup_disaster_recovery_procedures_check",
          "boto3_api": "organizations.describe_organization()",
          "service": "organizations",
          "rationale": "To ensure AWS Backups are included in the organization's disaster recovery procedures"
        },
        {
          "name": "awsbackup_user_awareness_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "To ensure user awareness and familiarity with AWS Backups platform usage"
        }
      ],
      "mapping_notes": "Existing functions cover the aspects of configuring backup plans, ensuring backup recovery capability, and encrypting backups. However, there are no existing functions that cover alert communication with AWS, managing access credentials for AWS resources, including AWS Backups in the organization's disaster recovery procedures, and ensuring user awareness and familiarity with AWS Backups platform usage. Therefore, new functions are suggested to cover these aspects."
    },
    {
      "compliance_id": "1.3",
      "title": "Ensure to create backup template and name",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_vaults_exist"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "backup_plan_template_creation_check",
          "boto3_api": "backup.describe_backup_job()",
          "service": "backup",
          "rationale": "To ensure that a backup plan template is created"
        },
        {
          "name": "backup_plan_name_specification_check",
          "boto3_api": "backup.describe_backup_job()",
          "service": "backup",
          "rationale": "To ensure that a name is specified for the backup plan"
        },
        {
          "name": "backup_rules_definition_check",
          "boto3_api": "backup.describe_backup_job()",
          "service": "backup",
          "rationale": "To ensure that backup rules are defined according to requirements"
        }
      ],
      "mapping_notes": "Existing functions 'backup_plans_exist' and 'backup_vaults_exist' partially cover the compliance requirement. However, there are no existing functions to check if a backup plan template is created, if a name is specified for the backup plan, and if backup rules are defined according to requirements. Therefore, new functions 'backup_plan_template_creation_check', 'backup_plan_name_specification_check', and 'backup_rules_definition_check' are needed."
    },
    {
      "compliance_id": "1.4",
      "title": "Ensure to create AWS IAM Policies",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_policy_creation_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "This function is needed to ensure that IAM policies are being created as per the compliance requirement"
        },
        {
          "name": "iam_policy_permission_check",
          "boto3_api": "iam.get_policy_version()",
          "service": "iam",
          "rationale": "This function is needed to ensure that the permissions specified in the IAM policies are as per the compliance requirement"
        },
        {
          "name": "iam_policy_condition_check",
          "boto3_api": "iam.get_policy_version()",
          "service": "iam",
          "rationale": "This function is needed to ensure that the conditions under which permissions are granted in the IAM policies are as per the compliance requirement"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the creation, permissions, and conditions of IAM policies."
    },
    {
      "compliance_id": "1.5",
      "title": "Ensure to create IAM roles for Backup",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_vaults_exist"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_role_for_backup_exists",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure that an IAM role for backup exists"
        }
      ],
      "mapping_notes": "Existing functions cover the existence of backup plans and vaults, but there is no specific function to check for the existence of an IAM role for backup. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "1.6",
      "title": "Ensure AWS Backup with Service Linked Roles",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_reportplans_exist",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "backup_window_configured"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "awsbackup_service_linked_role_exists",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure that a service linked role for AWS Backup exists"
        },
        {
          "name": "awsbackup_service_linked_role_permissions_check",
          "boto3_api": "iam.get_role_policy()",
          "service": "iam",
          "rationale": "To check that the service linked role for AWS Backup has the necessary permissions"
        }
      ],
      "mapping_notes": "Existing functions provide coverage for AWS Backup configurations but not specifically for service linked roles. New functions are suggested to check for the existence and permissions of the service linked role for AWS Backup."
    },
    {
      "compliance_id": "2.1",
      "title": "Ensure creating EC2 instance with EBS",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "ec2_ebs_volume_deletion_on_termination",
        "ec2_ebs_volume_protected_by_backup_plan",
        "ec2_ebs_volume_snapshots_exists"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_with_ebs_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that EC2 instances are created with EBS volumes attached"
        }
      ],
      "mapping_notes": "Existing functions cover EBS volume encryption, deletion on termination, backup plan protection, and snapshot existence. However, there is no function to check if EC2 instances are created with EBS volumes attached, hence a new function is suggested."
    },
    {
      "compliance_id": "2.2",
      "title": "Ensure configuring Security Groups",
      "existing_functions_mapped": [
        "ec2_default_security_group_no_inbound_rules",
        "ec2_default_security_group_no_outbound_rules",
        "ec2_instance_custom_security_group_assigned"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_inbound_rules_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that the inbound rules of all security groups are properly configured"
        },
        {
          "name": "ec2_security_group_outbound_rules_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that the outbound rules of all security groups are properly configured"
        }
      ],
      "mapping_notes": "Existing functions cover the checks for default security groups and whether custom security groups are assigned to EC2 instances. However, there are no functions to check the configuration of inbound and outbound rules for all security groups, hence the need for new functions."
    },
    {
      "compliance_id": "2.3",
      "title": "Ensure the proper configuration of EBS storage",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "ec2_ebs_volume_deletion_on_termination",
        "ec2_ebs_volume_protected_by_backup_plan",
        "ec2_ebs_volume_snapshots_exists",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_snapshot_account_block_public_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover all aspects of EBS storage configuration including encryption, deletion on termination, backup plan protection, snapshot existence, snapshot encryption, and public access blocking."
    },
    {
      "compliance_id": "2.4",
      "title": "Ensure the creation of a new volume",
      "existing_functions_mapped": [
        "ec2_ebs_volume_encryption",
        "ec2_ebs_volume_deletion_on_termination"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_ebs_volume_creation_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "To ensure a new volume is created and the root volume remains unchanged"
        },
        {
          "name": "ec2_ebs_volume_encryption_kms_key_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "To ensure the volume is encrypted using AWS KMS and a default key is used"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance item. They ensure the volume is encrypted and not deleted on termination. However, there are no functions to check if a new volume is created and if the volume is encrypted using a default AWS KMS key. Hence, new functions are suggested."
    },
    {
      "compliance_id": "2.5",
      "title": "Ensure creating snapshots of EBS volumes",
      "existing_functions_mapped": [
        "ebs_snapshot_encryption_enabled",
        "ec2_ebs_snapshot_account_block_public_access",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_volume_snapshots_exists"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_ebs_snapshot_creation_check",
          "boto3_api": "ec2.describe_snapshots()",
          "service": "ec2",
          "rationale": "To ensure that snapshots of EBS volumes are being created regularly"
        }
      ],
      "mapping_notes": "Existing functions cover the encryption and public access aspects of EBS snapshots, but there is no function to check if snapshots are being created regularly. Hence, a new function 'ec2_ebs_snapshot_creation_check' is suggested."
    },
    {
      "compliance_id": "2.6",
      "title": "Ensure Proper IAM Configuration for EC2 Instances",
      "existing_functions_mapped": [
        "ec2_instance_iam_role_check",
        "ec2_instance_profile_attached"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_iam_policy_least_privilege_check",
          "boto3_api": "iam.list_attached_role_policies()",
          "service": "iam",
          "rationale": "To ensure that the IAM policies attached to the EC2 instances follow the principle of least privilege"
        },
        {
          "name": "ec2_instance_iam_mfa_enforced_check",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "To ensure that multi-factor authentication is enforced for the IAM users that can interact with the EC2 instances"
        }
      ],
      "mapping_notes": "The existing functions 'ec2_instance_iam_role_check' and 'ec2_instance_profile_attached' partially cover the compliance requirement by checking if the EC2 instances have an IAM role attached and if they have an instance profile attached. However, they do not check if the IAM policies follow the principle of least privilege or if MFA is enforced. Therefore, two new functions 'ec2_instance_iam_policy_least_privilege_check' and 'ec2_instance_iam_mfa_enforced_check' are suggested."
    },
    {
      "compliance_id": "2.7",
      "title": "Ensure creating IAM User",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_user_creation_check",
          "boto3_api": "iam.list_users()",
          "service": "iam",
          "rationale": "This function is needed to ensure that IAM users are being created as per the compliance requirement"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the creation of IAM users. A new function 'iam_user_creation_check' is suggested which uses the 'iam.list_users()' boto3 API to check if IAM users are being created."
    },
    {
      "compliance_id": "2.8",
      "title": "Ensure the Creation of IAM Groups",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_group_creation_check",
          "boto3_api": "iam.list_groups()",
          "service": "iam",
          "rationale": "This function is needed to check if IAM groups have been created in the AWS environment"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring the creation of IAM groups. A new function 'iam_group_creation_check' is suggested which uses the 'iam.list_groups()' boto3 API to check if any IAM groups exist."
    },
    {
      "compliance_id": "2.9",
      "title": "Ensure Granular Policy Creation",
      "existing_functions_mapped": [
        "aurora_database_user_role_least_privilege_check",
        "aurora_iam_least_privilege_policy_check",
        "awslambda_function_least_privilege_policy_check",
        "dynamodb_table_fine_grained_access_control_check",
        "ec2_instance_iam_role_check"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_policy_granularity_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To ensure that IAM policies are granular and meticulously tailored to AWS resources"
        },
        {
          "name": "s3_bucket_policy_granularity_check",
          "boto3_api": "s3.get_bucket_policy()",
          "service": "s3",
          "rationale": "To ensure that S3 bucket policies are granular and meticulously tailored to AWS resources"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check for least privilege and fine-grained access control, which are key aspects of granular policy creation. However, new functions are suggested to specifically check the granularity of IAM and S3 bucket policies."
    },
    {
      "compliance_id": "2.10",
      "title": "Ensure Resource Access via Tag-based Policies",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_policy_tag_based_access_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To check if IAM policies are configured via tags for granular access control"
        },
        {
          "name": "ec2_resource_tag_based_access_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if EC2 resources have specific tags that are used in IAM policies for access control"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy the compliance requirement of ensuring resource access via tag-based policies. New functions are suggested to check if IAM policies are configured via tags and if EC2 resources have specific tags used in IAM policies."
    },
    {
      "compliance_id": "2.11",
      "title": "Ensure Secure Password Policy Implementation",
      "existing_functions_mapped": [
        "cognito_user_pool_password_policy_lowercase",
        "cognito_user_pool_password_policy_minimum_length_14",
        "cognito_user_pool_password_policy_number",
        "cognito_user_pool_password_policy_symbol",
        "cognito_user_pool_password_policy_uppercase"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "iam_account_password_policy_check",
          "boto3_api": "iam.get_account_password_policy()",
          "service": "iam",
          "rationale": "To ensure that the password policy for the AWS account is secure and compliant with the organization's requirements"
        }
      ],
      "mapping_notes": "The existing functions mapped are related to the password policy for AWS Cognito User Pools. However, the compliance item seems to be more general and could also apply to the password policy for the AWS account itself, hence the suggestion for a new function."
    },
    {
      "compliance_id": "2.12",
      "title": "Ensure Monitoring EC2 and EBS with CloudWatch",
      "existing_functions_mapped": [
        "ec2_instance_detailed_monitoring_enabled",
        "cloudwatch_log_group_all_services_logging_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "ebs_snapshot_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption",
        "ec2_ebs_snapshots_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_ec2_ebs_alarm_configuration_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure alarms are properly set up for EC2 and EBS resources in CloudWatch"
        },
        {
          "name": "cloudwatch_ec2_ebs_activity_monitoring_check",
          "boto3_api": "cloudwatch.get_metric_statistics()",
          "service": "cloudwatch",
          "rationale": "To ensure EC2 and EBS resource activity is being monitored in CloudWatch"
        }
      ],
      "mapping_notes": "Existing functions cover enabling detailed monitoring for EC2 instances, logging for all services in CloudWatch, encryption for CloudWatch logs, and encryption for EBS snapshots and volumes. However, there are no functions that specifically check for alarm configuration and activity monitoring for EC2 and EBS resources in CloudWatch, hence the need for new functions."
    },
    {
      "compliance_id": "2.13",
      "title": "Ensure creating an SNS subscription",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "sns_create_subscription_check",
          "boto3_api": "sns.list_subscriptions()",
          "service": "sns",
          "rationale": "This function is needed to check if an SNS subscription has been created for the system administrator's email address"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy this compliance requirement. A new function 'sns_create_subscription_check' is suggested to check if an SNS subscription has been created."
    },
    {
      "compliance_id": "3.1",
      "title": "EFS",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_file_system_encryption_enabled",
          "boto3_api": "efs.describe_file_systems()",
          "service": "efs",
          "rationale": "To ensure that data at rest is encrypted for EFS file systems"
        },
        {
          "name": "efs_file_system_lifecycle_policy_check",
          "boto3_api": "efs.describe_lifecycle_configuration()",
          "service": "efs",
          "rationale": "To ensure that lifecycle management is properly configured for EFS file systems"
        },
        {
          "name": "efs_file_system_backup_policy_check",
          "boto3_api": "efs.describe_backup_policy()",
          "service": "efs",
          "rationale": "To ensure that backup policies are properly configured for EFS file systems"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to cover the security aspects of AWS EFS."
    },
    {
      "compliance_id": "3.2",
      "title": "Ensure Implementation of EFS",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_file_systems_exist",
          "boto3_api": "efs.describe_file_systems()",
          "service": "efs",
          "rationale": "To ensure the implementation of EFS, we need to check if any EFS file systems exist."
        },
        {
          "name": "efs_file_systems_encrypted",
          "boto3_api": "efs.describe_file_systems()",
          "service": "efs",
          "rationale": "To ensure the security of EFS, we need to check if all EFS file systems are encrypted."
        },
        {
          "name": "efs_file_systems_backup_enabled",
          "boto3_api": "backup.describe_backup_jobs()",
          "service": "backup",
          "rationale": "To ensure the durability of EFS, we need to check if backups are enabled for all EFS file systems."
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the existence, encryption, and backup of EFS file systems."
    },
    {
      "compliance_id": "3.3",
      "title": "Ensure EFS and VPC Integration",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_vpc_integration_check",
          "boto3_api": "efs.describe_mount_targets()",
          "service": "efs",
          "rationale": "This function is needed to ensure that EFS is properly integrated with VPC. It will check if the EFS mount targets are located within the VPC."
        },
        {
          "name": "efs_high_availability_check",
          "boto3_api": "efs.describe_mount_targets()",
          "service": "efs",
          "rationale": "This function is needed to ensure that EFS is highly available. It will check if the EFS mount targets are spread across multiple availability zones within the VPC."
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. Therefore, two new functions are suggested to ensure EFS and VPC integration and high availability of EFS."
    },
    {
      "compliance_id": "3.4",
      "title": "Ensure controlling Network access to EFS Services",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_security_group_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To check if the security groups associated with EFS are properly configured"
        },
        {
          "name": "efs_network_acl_check",
          "boto3_api": "ec2.describe_network_acls()",
          "service": "ec2",
          "rationale": "To check if the network ACLs associated with EFS are properly configured"
        },
        {
          "name": "efs_iam_policy_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To check if the IAM policies associated with EFS are properly configured"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the security groups, network ACLs, and IAM policies associated with EFS."
    },
    {
      "compliance_id": "3.5",
      "title": "Ensure using Security Groups for VPC",
      "existing_functions_mapped": [
        "ec2_instance_custom_security_group_assigned",
        "ec2_default_security_group_no_inbound_rules",
        "ec2_default_security_group_no_outbound_rules"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_security_group_associated_with_vpc",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure that every VPC has at least one security group associated with it"
        },
        {
          "name": "ec2_security_group_rules_check",
          "boto3_api": "ec2.describe_security_group_rules()",
          "service": "ec2",
          "rationale": "To ensure that the security group rules are properly configured for inbound and outbound traffic"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance requirement by checking if EC2 instances have custom security groups assigned and if the default security group has no inbound or outbound rules. However, new functions are needed to ensure that every VPC has a security group associated with it and that the security group rules are properly configured."
    },
    {
      "compliance_id": "3.6",
      "title": "Ensure Secure Ports",
      "existing_functions_mapped": [
        "ec2_instance_port_cassandra_exposed_to_internet",
        "ec2_instance_port_cifs_exposed_to_internet",
        "ec2_instance_port_elasticsearch_kibana_exposed_to_internet",
        "ec2_instance_port_ftp_exposed_to_internet",
        "ec2_instance_port_kafka_exposed_to_internet",
        "ec2_instance_port_kerberos_exposed_to_internet",
        "ec2_instance_port_ldap_exposed_to_internet",
        "ec2_instance_port_memcached_exposed_to_internet",
        "ec2_instance_port_mongodb_exposed_to_internet",
        "ec2_instance_port_mysql_exposed_to_internet",
        "ec2_instance_port_oracle_exposed_to_internet",
        "ec2_instance_port_postgresql_exposed_to_internet",
        "ec2_instance_port_rdp_exposed_to_internet",
        "ec2_instance_port_redis_exposed_to_internet",
        "ec2_instance_port_sqlserver_exposed_to_internet",
        "ec2_instance_port_ssh_exposed_to_internet",
        "ec2_instance_port_telnet_exposed_to_internet"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "s3_bucket_secure_ports_check",
          "boto3_api": "s3.get_bucket_acl()",
          "service": "s3",
          "rationale": "To ensure secure ports for S3 buckets"
        },
        {
          "name": "efs_secure_ports_check",
          "boto3_api": "efs.describe_mount_target_security_groups()",
          "service": "efs",
          "rationale": "To ensure secure ports for EFS"
        },
        {
          "name": "ebs_secure_ports_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To ensure secure ports for EBS volumes"
        }
      ],
      "mapping_notes": "Existing functions cover the EC2 instance port security checks. However, there are no existing functions for checking secure ports for S3, EFS, and EBS. Hence, new functions are suggested."
    },
    {
      "compliance_id": "3.7",
      "title": "Ensure File-Level Access Control with Mount Targets",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_mount_target_access_control_check",
          "boto3_api": "efs.describe_mount_target_security_groups()",
          "service": "efs",
          "rationale": "This function is needed to ensure that the mount targets have appropriate access control in place."
        },
        {
          "name": "efs_mount_target_availability_zone_check",
          "boto3_api": "efs.describe_mount_targets()",
          "service": "efs",
          "rationale": "This function is needed to ensure that mount targets are provisioned in each availability zone associated with the VPC."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring file-level access control with mount targets. Therefore, new functions are suggested to fill this gap."
    },
    {
      "compliance_id": "3.8",
      "title": "Ensure managing mount target security groups",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_mount_target_security_group_management_check",
          "boto3_api": "efs.describe_mount_target_security_groups()",
          "service": "efs",
          "rationale": "This function is needed to ensure that security groups for mount targets are being managed properly, which is essential for controlling access to Amazon EFS file systems."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the management of mount target security groups for Amazon EFS file systems. Therefore, a new function is suggested to fill this gap."
    },
    {
      "compliance_id": "3.9",
      "title": "Ensure using VPC endpoints - EFS",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_vpc_endpoints_check",
          "boto3_api": "ec2.describe_vpc_endpoints()",
          "service": "ec2",
          "rationale": "This function is needed to check if VPC endpoints are being used for EFS"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring the use of VPC endpoints for EFS. A new function 'efs_vpc_endpoints_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "3.10",
      "title": "Ensure managing AWS EFS access points",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_access_points_configuration_check",
          "boto3_api": "efs.describe_access_points()",
          "service": "efs",
          "rationale": "This function is needed to ensure that EFS access points are properly configured for secure and efficient access."
        },
        {
          "name": "efs_access_points_permission_check",
          "boto3_api": "efs.describe_access_points()",
          "service": "efs",
          "rationale": "This function is needed to ensure that only authorized users have access to specific resources in the EFS environment."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the management of AWS EFS access points. Therefore, two new functions are suggested to cover the compliance requirement."
    },
    {
      "compliance_id": "3.11",
      "title": "Ensure accessing Points and IAM Policies",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "efs_access_point_iam_policy_check",
          "boto3_api": "efs.describeAccessPoints()",
          "service": "efs",
          "rationale": "This function is needed to check if IAM policies are used to control access to EFS access points."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring access points and IAM policies for EFS. A new function 'efs_access_point_iam_policy_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "3.12",
      "title": "Ensure configuring IAM for AWS Elastic Disaster Recovery",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "iam_elastic_disaster_recovery_replication_permissions_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To ensure that IAM permissions for AWS Elastic Disaster Recovery Replication are properly configured"
        },
        {
          "name": "iam_elastic_disaster_recovery_failback_permissions_check",
          "boto3_api": "iam.list_policies()",
          "service": "iam",
          "rationale": "To ensure that IAM permissions for AWS Elastic Disaster Recovery Failback are properly configured"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the IAM permissions for both AWS Elastic Disaster Recovery Replication and Failback."
    },
    {
      "compliance_id": "4.1",
      "title": "FSX (AWS Elastic File Cache)",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "fsx_file_cache_encryption_enabled",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "To ensure that data at rest is encrypted in FSx file cache"
        },
        {
          "name": "fsx_file_cache_in_transit_encryption_enabled",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "To ensure that data in transit is encrypted in FSx file cache"
        },
        {
          "name": "fsx_file_cache_audit_logging_enabled",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "To ensure that audit logging is enabled for FSx file cache"
        },
        {
          "name": "fsx_file_cache_access_control_check",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "To ensure that access control policies are properly configured for FSx file cache"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy the compliance requirement for FSx (AWS Elastic File Cache). New functions are suggested to cover the areas of encryption, audit logging, and access control."
    },
    {
      "compliance_id": "4.2",
      "title": "Amazon Elastic File Cache",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elastic_file_cache_region_availability_check",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "To check if the Elastic File Cache is available in the specified regions"
        },
        {
          "name": "fsx_compatible_os_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure the operating system of the compute instance is compatible with AWS FSx"
        },
        {
          "name": "fsx_lustre_client_installation_check",
          "boto3_api": "ssm.describe_instance_information()",
          "service": "ssm",
          "rationale": "To check if the Lustre client is installed on the systems for the FSx service to work"
        }
      ],
      "mapping_notes": "No existing functions could be mapped to the compliance item. New functions are suggested to check the availability of Elastic File Cache in specified regions, to ensure the compatibility of the operating system with AWS FSx, and to check the installation of Lustre client on the systems."
    },
    {
      "compliance_id": "4.3",
      "title": "Ensure the creation of an FSX Bucket",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_exists_for_fsx",
          "boto3_api": "s3.head_bucket()",
          "service": "s3",
          "rationale": "To check if the S3 bucket exists for FSX data storage"
        },
        {
          "name": "fsx_s3_bucket_data_access_check",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "To check if FSX file system has access to the specified S3 bucket"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy the compliance requirement of ensuring the creation of an FSX bucket. Two new functions are suggested to check the existence of the S3 bucket and to verify if the FSX file system can access the data in the S3 bucket."
    },
    {
      "compliance_id": "4.4",
      "title": "Ensure the creation of Elastic File Cache",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elasticache_cluster_creation_check",
          "boto3_api": "elasticache.describe_cache_clusters()",
          "service": "elasticache",
          "rationale": "This function is needed to ensure the creation of Elastic File Cache"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to the compliance requirement of ensuring the creation of Elastic File Cache. A new function 'elasticache_cluster_creation_check' is suggested which uses the 'describe_cache_clusters()' boto3 API to check for the existence of Elasticache clusters."
    },
    {
      "compliance_id": "4.5",
      "title": "Ensure installation and configuration of Lustre Client",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_instance_lustre_client_installed",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if the Lustre Client is installed on the EC2 instance"
        },
        {
          "name": "ec2_instance_lustre_client_configured",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if the Lustre Client is properly configured on the EC2 instance"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. New functions are suggested to check the installation and configuration of Lustre Client on EC2 instances."
    },
    {
      "compliance_id": "4.6",
      "title": "Ensure EC2 Kernel compatibility with Lustre",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_ami_kernel_compatibility_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to check if the kernel of the EC2 instance's AMI is compatible with Lustre service."
        },
        {
          "name": "ec2_ami_kernel_downgrade_prerequisites_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to check if the prerequisites for downgrading the kernel of the EC2 instance's AMI are met."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance item. New functions are suggested to check the kernel compatibility with Lustre service and the prerequisites for kernel downgrade."
    },
    {
      "compliance_id": "4.7",
      "title": "Ensure mounting FSx cache",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "fsx_cache_mount_check",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "This function is needed to check if the FSx cache is properly mounted to the compute instances"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring FSx cache mounting. A new function 'fsx_cache_mount_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "4.8",
      "title": "Ensure exporting cache to S3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_cache_export_check",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "This function is needed to ensure that cache files are being exported to the specified S3 bucket"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring cache export to S3. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "4.9",
      "title": "Ensure cleaning up FSx Resources",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "fsx_unused_resources_cleanup_check",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "This function is needed to check for unused or unnecessary FSx file systems and associated components that need to be removed to optimize costs and maintain a secure cloud environment."
        },
        {
          "name": "fsx_redundant_file_systems_cleanup_check",
          "boto3_api": "fsx.describe_file_systems()",
          "service": "fsx",
          "rationale": "This function is needed to check for redundant FSx file systems that need to be deleted to prevent resource sprawl, reduce expenses, and maintain the overall health and performance of the AWS infrastructure."
        },
        {
          "name": "fsx_snapshots_cleanup_check",
          "boto3_api": "fsx.describe_backups()",
          "service": "fsx",
          "rationale": "This function is needed to check for redundant FSx snapshots that need to be deleted to prevent resource sprawl, reduce expenses, and maintain the overall health and performance of the AWS infrastructure."
        },
        {
          "name": "fsx_mount_targets_cleanup_check",
          "boto3_api": "fsx.describe_mount_targets()",
          "service": "fsx",
          "rationale": "This function is needed to check for redundant FSx mount targets that need to be deleted to prevent resource sprawl, reduce expenses, and maintain the overall health and performance of the AWS infrastructure."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to the compliance item 'Ensure cleaning up FSx Resources'. Therefore, new functions are suggested to cover the requirements of this compliance item."
    },
    {
      "compliance_id": "5.1",
      "title": "Amazon Simple Storage Service",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_encryption_enabled",
          "boto3_api": "s3.get_bucket_encryption()",
          "service": "s3",
          "rationale": "To ensure that all data stored in S3 is encrypted at rest"
        },
        {
          "name": "s3_bucket_versioning_enabled",
          "boto3_api": "s3.get_bucket_versioning()",
          "service": "s3",
          "rationale": "To ensure that all versions of an object are stored in the bucket"
        },
        {
          "name": "s3_bucket_public_access_block",
          "boto3_api": "s3.get_public_access_block()",
          "service": "s3",
          "rationale": "To ensure that public access to the S3 bucket is blocked"
        },
        {
          "name": "s3_bucket_access_logging_enabled",
          "boto3_api": "s3.get_bucket_logging()",
          "service": "s3",
          "rationale": "To ensure that access logs are enabled for all requests made to the S3 bucket"
        },
        {
          "name": "s3_bucket_lifecycle_configuration_check",
          "boto3_api": "s3.get_bucket_lifecycle_configuration()",
          "service": "s3",
          "rationale": "To ensure that lifecycle management is enabled on the S3 bucket"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy the compliance requirement for Amazon Simple Storage Service. New functions are suggested to ensure encryption, versioning, public access block, access logging, and lifecycle configuration for S3 buckets."
    },
    {
      "compliance_id": "5.2",
      "title": "Ensure direct data addition to S3",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_unique_check",
          "boto3_api": "s3.head_bucket()",
          "service": "s3",
          "rationale": "To ensure the bucket name is unique and not already in use on AWS"
        },
        {
          "name": "s3_bucket_direct_upload_check",
          "boto3_api": "s3.put_object()",
          "service": "s3",
          "rationale": "To ensure data can be directly uploaded to the S3 bucket"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check for unique bucket names and the ability to directly upload data to S3 buckets."
    },
    {
      "compliance_id": "5.3",
      "title": "Ensure Storage Classes are Configured",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "s3_bucket_storage_class_configured",
          "boto3_api": "s3.get_bucket_lifecycle_configuration()",
          "service": "s3",
          "rationale": "This function is needed to check if the storage classes for S3 buckets are properly configured according to the data access patterns and retention needs."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the configuration of storage classes in S3. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "6.1",
      "title": "Ensure Elastic Disaster Recovery is Configured",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "backup_window_configured",
        "drs_job_exist"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "elastic_disaster_recovery_configuration_check",
          "boto3_api": "elasticdisasterrecovery.describe_replication_sets()",
          "service": "elasticdisasterrecovery",
          "rationale": "To ensure that Elastic Disaster Recovery is properly configured, we need to check the replication sets."
        },
        {
          "name": "elastic_disaster_recovery_region_check",
          "boto3_api": "elasticdisasterrecovery.describe_regions()",
          "service": "elasticdisasterrecovery",
          "rationale": "To ensure that backups are maintained in selected AWS regions, we need to check the regions."
        }
      ],
      "mapping_notes": "Existing functions related to backup plans and vaults were mapped as they are relevant to the disaster recovery process. However, there are no specific functions for Elastic Disaster Recovery service, hence new functions are suggested."
    },
    {
      "compliance_id": "6.2",
      "title": "Ensure AWS Disaster Recovery Configuration",
      "existing_functions_mapped": [
        "ec2_instance_multi_az_deployment_check",
        "ec2_instance_iam_role_check",
        "ec2_instance_in_transit_encryption_enabled",
        "ec2_instance_public_ip",
        "ec2_instance_security_configuration_review",
        "ec2_ebs_volume_encryption",
        "ec2_ebs_volume_protected_by_backup_plan",
        "ec2_ebs_volume_deletion_on_termination",
        "ec2_ebs_volume_snapshots_exists",
        "ec2_ebs_default_encryption",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_snapshot_account_block_public_access",
        "ec2_ami_encryption_check",
        "ec2_ami_approved_check",
        "ec2_ami_naming_convention_check",
        "ec2_ami_os_updates_check",
        "ec2_ami_older_than_90_days",
        "ec2_ami_public",
        "ec2_instance_managed_by_ssm",
        "ec2_instance_latest_patch_version_check",
        "ec2_instance_imdsv2_enabled",
        "ec2_instance_detailed_monitoring_enabled",
        "ec2_instance_profile_attached",
        "ec2_instance_audit_logging_enabled",
        "ec2_instance_custom_security_group_assigned",
        "ec2_instance_data_in_transit_encryption_check",
        "ec2_instance_older_than_specific_days",
        "ec2_instance_paravirtual_type",
        "ec2_instance_port_cassandra_exposed_to_internet",
        "ec2_instance_port_cifs_exposed_to_internet",
        "ec2_instance_port_elasticsearch_kibana_exposed_to_internet",
        "ec2_instance_port_ftp_exposed_to_internet",
        "ec2_instance_port_kafka_exposed_to_internet",
        "ec2_instance_port_kerberos_exposed_to_internet",
        "ec2_instance_port_ldap_exposed_to_internet",
        "ec2_instance_port_memcached_exposed_to_internet",
        "ec2_instance_port_mongodb_exposed_to_internet",
        "ec2_instance_port_mysql_exposed_to_internet",
        "ec2_instance_port_oracle_exposed_to_internet",
        "ec2_instance_port_postgresql_exposed_to_internet",
        "ec2_instance_port_rdp_exposed_to_internet",
        "ec2_instance_port_redis_exposed_to_internet",
        "ec2_instance_port_sqlserver_exposed_to_internet",
        "ec2_instance_port_ssh_exposed_to_internet",
        "ec2_instance_port_telnet_exposed_to_internet",
        "ec2_instance_secrets_user_data",
        "ec2_instance_session_disconnect_timeout",
        "ec2_instance_session_idle_disconnect_timeout"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "aws_edr_replication_agent_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if AWS Replication Agent is connected to each resource"
        },
        {
          "name": "aws_edr_api_endpoints_check",
          "boto3_api": "ec2.describe_vpc_endpoints()",
          "service": "ec2",
          "rationale": "To check if API Endpoints for EC2, Disaster Recovery, and S3 are created"
        },
        {
          "name": "aws_edr_subnet_check",
          "boto3_api": "ec2.describe_subnets()",
          "service": "ec2",
          "rationale": "To check if Staging Area Subnets and Recovery Subnets are created in VPC"
        },
        {
          "name": "aws_edr_tcp_port_check",
          "boto3_api": "ec2.describe_security_groups()",
          "service": "ec2",
          "rationale": "To check if TCP port 443 and 1500 are connected to EDR, S3, and AWS replication servers"
        }
      ],
      "mapping_notes": "Existing functions were mapped based on their ability to check for EC2 instances, EBS volumes, AMIs, and security configurations. New functions are suggested to specifically check for EDR configurations, API endpoints, subnets, and TCP port connections."
    },
    {
      "compliance_id": "6.3",
      "title": "Ensure functionality of Endpoint Detection and Response (EDR)",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "edr_functionality_check",
          "boto3_api": "ssm.describe_instance_information()",
          "service": "ssm",
          "rationale": "To check if EDR software is installed and running on all instances"
        },
        {
          "name": "edr_alerts_check",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To check if real-time alerts are configured for EDR software"
        },
        {
          "name": "edr_incident_reports_check",
          "boto3_api": "cloudwatch.describe_alarm_history()",
          "service": "cloudwatch",
          "rationale": "To check if detailed incident reports are generated for EDR alerts"
        },
        {
          "name": "edr_system_update_check",
          "boto3_api": "ssm.describe_patch_baselines()",
          "service": "ssm",
          "rationale": "To check if the EDR system is regularly updated"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the functionality, alerts, incident reports, and updates of the EDR system."
    },
    {
      "compliance_id": "6.4",
      "title": "Ensure configuration of replication settings",
      "existing_functions_mapped": [
        "dms_replication_task_source_logging_enabled",
        "dms_replication_task_target_logging_enabled",
        "documentdb_cluster_cross_region_replication_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "dms_replication_task_bandwidth_limit_check",
          "boto3_api": "dms.describe_replication_tasks()",
          "service": "dms",
          "rationale": "To ensure that bandwidth limits are set for replication tasks"
        },
        {
          "name": "dms_replication_task_schedule_check",
          "boto3_api": "dms.describe_replication_tasks()",
          "service": "dms",
          "rationale": "To ensure that replication schedules are defined for replication tasks"
        },
        {
          "name": "dms_replication_task_source_target_location_check",
          "boto3_api": "dms.describe_replication_tasks()",
          "service": "dms",
          "rationale": "To ensure that source and target locations are specified for replication tasks"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage for replication settings. They cover logging and cross-region replication but do not cover bandwidth limits, replication schedules, and source/target locations. New functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "6.5",
      "title": "Ensure proper IAM configuration for AWS Elastic Disaster Recovery",
      "existing_functions_mapped": [
        "awslambda_function_iam_role_check",
        "awslambda_function_least_privilege_policy_check",
        "audit_logging_regular_review",
        "authentication_settings_regular_review"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "elastic_disaster_recovery_iam_configuration_check",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "To ensure that IAM roles and policies are properly configured for AWS Elastic Disaster Recovery"
        },
        {
          "name": "elastic_disaster_recovery_mfa_enforcement_check",
          "boto3_api": "iam.get_account_summary()",
          "service": "iam",
          "rationale": "To enforce multi-factor authentication (MFA) for added security in AWS Elastic Disaster Recovery"
        }
      ],
      "mapping_notes": "Existing functions partially cover the compliance requirement, mainly focusing on IAM roles and policies, and regular review of audit logs and authentication settings. However, there are no specific functions for checking IAM configuration and MFA enforcement for AWS Elastic Disaster Recovery, hence the need for new functions."
    },
    {
      "compliance_id": "6.6",
      "title": "Ensure installation of the AWS Replication Agent",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "dms_replication_agent_installation_check",
          "boto3_api": "dms.describe_replication_instances()",
          "service": "dms",
          "rationale": "To check if the AWS Replication Agent is installed on all relevant systems"
        },
        {
          "name": "dms_replication_agent_configuration_check",
          "boto3_api": "dms.describe_replication_instances()",
          "service": "dms",
          "rationale": "To verify the configuration of the AWS Replication Agent"
        },
        {
          "name": "dms_replication_agent_integration_check",
          "boto3_api": "dms.describe_replication_instances()",
          "service": "dms",
          "rationale": "To ensure the AWS Replication Agent is correctly integrated with the AWS environment"
        },
        {
          "name": "dms_replication_agent_performance_check",
          "boto3_api": "dms.describe_replication_instances()",
          "service": "dms",
          "rationale": "To regularly check the performance of the AWS Replication Agent"
        },
        {
          "name": "dms_replication_agent_update_check",
          "boto3_api": "dms.describe_replication_instances()",
          "service": "dms",
          "rationale": "To ensure the AWS Replication Agent is updated as needed"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the installation, configuration, integration, performance, and updates of the AWS Replication Agent."
    },
    {
      "compliance_id": "6.7",
      "title": "Ensure proper configuration of the Launch Settings",
      "existing_functions_mapped": [
        "autoscaling_find_secrets_ec2_launch_configuration",
        "autoscaling_group_launch_configuration_no_public_ip",
        "autoscaling_group_launch_configuration_requires_imdsv2",
        "autoscaling_group_using_ec2_launch_template",
        "ec2_instance_imdsv2_enabled",
        "ec2_instance_iam_role_check",
        "ec2_instance_managed_by_ssm",
        "ec2_instance_profile_attached",
        "ec2_instance_secrets_user_data"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_launch_settings_security_configuration_check",
          "boto3_api": "ec2.describe_launch_template_versions()",
          "service": "ec2",
          "rationale": "To ensure that the launch settings are configured securely, we need to check the security configurations of the EC2 launch settings."
        },
        {
          "name": "ec2_launch_settings_resource_specification_check",
          "boto3_api": "ec2.describe_launch_template_versions()",
          "service": "ec2",
          "rationale": "To ensure that the launch settings are configured correctly, we need to check if the required resources are specified in the EC2 launch settings."
        },
        {
          "name": "ec2_launch_settings_startup_parameters_check",
          "boto3_api": "ec2.describe_launch_template_versions()",
          "service": "ec2",
          "rationale": "To ensure that the systems and applications start correctly, we need to check if the startup parameters are defined in the EC2 launch settings."
        }
      ],
      "mapping_notes": "The existing functions mapped are related to EC2 and Autoscaling launch configurations, which are part of the launch settings. However, they do not cover all aspects of the compliance item, such as checking the startup parameters, required resources, and security configurations. Therefore, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "6.8",
      "title": "Ensure execution of a recovery drill",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "elastic_recovery_instance_drill_execution_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if a recovery drill has been executed on the Elastic Recovery Instance"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. A new function is suggested to check the execution of a recovery drill on the Elastic Recovery Instance."
    },
    {
      "compliance_id": "6.9",
      "title": "Ensure Continuous Disaster Recovery Operations",
      "existing_functions_mapped": [
        "aurora_automatic_backups_enabled",
        "aurora_backup_retention_period_configured",
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "backup_window_configured",
        "cloudformation_stack_outputs_find_secrets",
        "cloudformation_stacks_termination_protection_enabled",
        "cloudtrail_aws_organizations_changes_logging_enabled",
        "cloudtrail_bucket_requires_mfa_delete",
        "cloudtrail_cloudwatch_logging_enabled",
        "cloudtrail_insights_exist",
        "cloudtrail_kms_encryption_enabled",
        "cloudtrail_log_file_validation_enabled",
        "cloudtrail_logs_s3_bucket_access_logging_enabled",
        "cloudtrail_logs_s3_bucket_is_not_publicly_accessible",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudtrail_root_account_usage_monitoring",
        "cloudtrail_s3_dataevents_read_enabled",
        "cloudtrail_s3_dataevents_write_enabled",
        "cloudtrail_security_group_changes_logging_enabled",
        "cloudtrail_threat_detection_enumeration",
        "cloudtrail_threat_detection_llm_jacking",
        "cloudtrail_threat_detection_privilege_escalation",
        "cloudtrail_timestream_activities_logging_enabled",
        "cloudtrail_vpc_changes_logging_enabled",
        "cloudwatch_alarm_actions_alarm_state_configured",
        "cloudwatch_alarm_actions_enabled",
        "cloudwatch_alarm_all_services_alarm_configured",
        "cloudwatch_alarm_for_aws_organizations_changes",
        "cloudwatch_alarm_for_qldb",
        "cloudwatch_alarm_for_resource_threshold",
        "cloudwatch_alarm_for_root_account_usage",
        "cloudwatch_alarm_for_unusual_events",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_cross_account_sharing_disabled",
        "cloudwatch_lambda_insights_enabled",
        "cloudwatch_log_group_all_services_logging_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_no_secrets_in_logs",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_aws_config_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_and_alarm_for_cloudtrail_configuration_changes_enabled",
        "cloudwatch_log_metric_filter_authentication_failures",
        "cloudwatch_log_metric_filter_aws_organizations_changes",
        "cloudwatch_log_metric_filter_disable_or_scheduled_deletion_of_kms_cmk",
        "cloudwatch_log_metric_filter_for_s3_bucket_policy_changes",
        "cloudwatch_log_metric_filter_policy_changes",
        "cloudwatch_log_metric_filter_root_usage",
        "cloudwatch_log_metric_filter_security_group_changes",
        "cloudwatch_log_metric_filter_sign_in_without_mfa",
        "cloudwatch_log_metric_filter_unauthorized_api_calls",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_timestream_events_monitoring_enabled",
        "cloudwatch_timestream_logs_monitoring_enabled",
        "cloudwatch_timestream_metrics_monitoring_enabled",
        "cloudwatch_vpc_changes_metric_filter_and_alarm",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role",
        "dynamodb_table_protected_by_backup_plan",
        "dynamodb_tables_pitr_enabled",
        "ebs_snapshot_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_public_snapshot",
        "ec2_ebs_snapshot_account_block_public_access",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_volume_protected_by_backup_plan"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "disaster_recovery_plan_regular_update_check",
          "boto3_api": "N/A",
          "service": "N/A",
          "rationale": "To ensure that the disaster recovery plan is regularly updated"
        },
        {
          "name": "disaster_recovery_plan_regular_testing_check",
          "boto3_api": "N/A",
          "service": "N/A",
          "rationale": "To ensure that the disaster recovery plan is regularly tested"
        },
        {
          "name": "disaster_recovery_replication_process_monitoring_check",
          "boto3_api": "N/A",
          "service": "N/A",
          "rationale": "To ensure that the replication processes involved in disaster recovery are continuously monitored"
        },
        {
          "name": "disaster_recovery_backup_integrity_verification_check",
          "boto3_api": "N/A",
          "service": "N/A",
          "rationale": "To ensure that the integrity and accessibility of backups are regularly verified"
        },
        {
          "name": "disaster_recovery_strategy_evaluation_improvement_check",
          "boto3_api": "N/A",
          "service": "N/A",
          "rationale": "To ensure that disaster recovery strategies are continuously evaluated and improved to adapt to evolving threats and organizational changes"
        }
      ],
      "mapping_notes": "The existing functions provide partial coverage for the compliance item. They cover aspects related to backups, logging, monitoring, and encryption. However, there are no existing functions that directly address the requirements for regular updating and testing of recovery plans, monitoring of replication processes, verification of backup integrity and accessibility, and continuous evaluation and improvement of disaster recovery strategies. Therefore, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "6.10",
      "title": "Ensure execution of a Disaster Recovery Failover",
      "existing_functions_mapped": [
        "backup_plans_exist",
        "backup_recovery_point_encrypted",
        "backup_vaults_encrypted",
        "backup_vaults_exist",
        "backup_window_configured",
        "cloudformation_stack_cdktoolkit_bootstrap_version",
        "cloudformation_stack_outputs_find_secrets",
        "cloudformation_stacks_termination_protection_enabled",
        "cloudfront_distributions_multiple_origin_failover_configured",
        "cloudtrail_multi_region_enabled",
        "cloudtrail_multi_region_enabled_logging_management_events",
        "cloudwatch_alarm_all_services_alarm_configured",
        "cloudwatch_alarm_for_resource_threshold",
        "cloudwatch_alarm_for_unusual_events",
        "cloudwatch_changes_to_network_acls_alarm_configured",
        "cloudwatch_changes_to_network_gateways_alarm_configured",
        "cloudwatch_changes_to_network_route_tables_alarm_configured",
        "cloudwatch_changes_to_vpcs_alarm_configured",
        "cloudwatch_security_group_changes_alarm_configured",
        "cloudwatch_vpc_changes_metric_filter_and_alarm",
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role",
        "directconnect_connection_redundancy",
        "directconnect_virtual_interface_redundancy",
        "documentdb_cluster_disaster_recovery_plan_check",
        "dynamodb_table_protected_by_backup_plan",
        "ec2_ebs_volume_protected_by_backup_plan",
        "ec2_instance_multi_az_deployment_check",
        "ec2_instance_managed_by_ssm",
        "ec2_instance_latest_patch_version_check",
        "ec2_instance_paravirtual_type",
        "ec2_instance_profile_attached",
        "ec2_instance_public_ip",
        "ec2_instance_security_configuration_review",
        "ec2_instance_session_disconnect_timeout",
        "ec2_instance_session_idle_disconnect_timeout"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "disaster_recovery_failover_execution_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To ensure that a disaster recovery failover has been executed and the operations have been transitioned from the primary system to a backup system during disruptions."
        },
        {
          "name": "disaster_recovery_data_replication_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "To ensure that all critical data and applications are accurately replicated to the backup site for seamless operational continuity."
        },
        {
          "name": "disaster_recovery_failover_test_documentation_check",
          "boto3_api": "s3.list_objects_v2()",
          "service": "s3",
          "rationale": "To ensure that the failover process is regularly tested and documented to identify and resolve any issues, maintaining readiness to minimize downtime and data loss during real disasters."
        }
      ],
      "mapping_notes": "The existing functions provide partial coverage for the compliance item. They cover aspects of backup, failover, and disaster recovery, but do not specifically address the execution of a disaster recovery failover, data replication to the backup site, and documentation of the failover process. Therefore, new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "6.11",
      "title": "Ensure execution of a failback",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_failback_execution_check",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "To check if the failback process has been executed and the primary system is restored"
        },
        {
          "name": "rds_failback_execution_check",
          "boto3_api": "rds.describe_db_instances()",
          "service": "rds",
          "rationale": "To check if the failback process has been executed and the primary database is restored"
        },
        {
          "name": "s3_failback_execution_check",
          "boto3_api": "s3.list_buckets()",
          "service": "s3",
          "rationale": "To check if the failback process has been executed and the primary storage is restored"
        }
      ],
      "mapping_notes": "No existing functions were found that could satisfy this compliance requirement. New functions are suggested to check the execution of a failback for EC2 instances, RDS databases, and S3 buckets."
    },
    {
      "compliance_id": "6.12",
      "title": "Ensure CloudWatch Metrics for AWS EDR",
      "existing_functions_mapped": [
        "cloudwatch_alarm_all_services_alarm_configured",
        "cloudwatch_log_group_all_services_logging_enabled",
        "cloudwatch_log_group_kms_encryption_enabled",
        "cloudwatch_log_group_not_publicly_accessible",
        "cloudwatch_log_group_retention_policy_specific_days_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "cloudwatch_edr_metrics_monitoring_enabled",
          "boto3_api": "cloudwatch.describe_alarms()",
          "service": "cloudwatch",
          "rationale": "To ensure that CloudWatch metrics for AWS EDR are being monitored"
        },
        {
          "name": "cloudwatch_edr_metrics_anomaly_detection",
          "boto3_api": "cloudwatch.describe_anomaly_detectors()",
          "service": "cloudwatch",
          "rationale": "To detect any anomalies in the CloudWatch metrics for AWS EDR"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage as they ensure CloudWatch is configured for all services and logs are encrypted and not publicly accessible. However, specific functions for monitoring and analyzing CloudWatch metrics for AWS EDR are missing, hence the need for new functions."
    },
    {
      "compliance_id": "6.13",
      "title": "Ensure working of EDR",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "edr_working_check",
          "boto3_api": "ssm.describe_instance_information()",
          "service": "ssm",
          "rationale": "This function is needed to check the working status of EDR on EC2 instances"
        }
      ],
      "mapping_notes": "There are no existing functions that directly relate to the compliance requirement of ensuring the working of EDR. A new function is suggested to fill this gap."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "s3_bucket_backup_enabled",
      "boto3_api": "s3.get_bucket_lifecycle_configuration()",
      "service": "s3",
      "rationale": "To ensure that S3 buckets are backed up regularly"
    },
    {
      "name": "rds_instance_backup_enabled",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To ensure that RDS instances are backed up regularly"
    },
    {
      "name": "ec2_instance_backup_enabled",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that EC2 instances are backed up regularly"
    },
    {
      "name": "awsbackup_alert_communication_check",
      "boto3_api": "sns.list_subscriptions()",
      "service": "sns",
      "rationale": "To ensure alert communication with AWS is properly configured"
    },
    {
      "name": "awsbackup_access_credentials_management_check",
      "boto3_api": "iam.list_access_keys()",
      "service": "iam",
      "rationale": "To ensure access credentials for AWS resources are properly managed"
    },
    {
      "name": "awsbackup_disaster_recovery_procedures_check",
      "boto3_api": "organizations.describe_organization()",
      "service": "organizations",
      "rationale": "To ensure AWS Backups are included in the organization's disaster recovery procedures"
    },
    {
      "name": "awsbackup_user_awareness_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "To ensure user awareness and familiarity with AWS Backups platform usage"
    },
    {
      "name": "backup_plan_template_creation_check",
      "boto3_api": "backup.describe_backup_job()",
      "service": "backup",
      "rationale": "To ensure that a backup plan template is created"
    },
    {
      "name": "backup_plan_name_specification_check",
      "boto3_api": "backup.describe_backup_job()",
      "service": "backup",
      "rationale": "To ensure that a name is specified for the backup plan"
    },
    {
      "name": "backup_rules_definition_check",
      "boto3_api": "backup.describe_backup_job()",
      "service": "backup",
      "rationale": "To ensure that backup rules are defined according to requirements"
    },
    {
      "name": "iam_policy_creation_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "This function is needed to ensure that IAM policies are being created as per the compliance requirement"
    },
    {
      "name": "iam_policy_permission_check",
      "boto3_api": "iam.get_policy_version()",
      "service": "iam",
      "rationale": "This function is needed to ensure that the permissions specified in the IAM policies are as per the compliance requirement"
    },
    {
      "name": "iam_policy_condition_check",
      "boto3_api": "iam.get_policy_version()",
      "service": "iam",
      "rationale": "This function is needed to ensure that the conditions under which permissions are granted in the IAM policies are as per the compliance requirement"
    },
    {
      "name": "iam_role_for_backup_exists",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure that an IAM role for backup exists"
    },
    {
      "name": "awsbackup_service_linked_role_exists",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure that a service linked role for AWS Backup exists"
    },
    {
      "name": "awsbackup_service_linked_role_permissions_check",
      "boto3_api": "iam.get_role_policy()",
      "service": "iam",
      "rationale": "To check that the service linked role for AWS Backup has the necessary permissions"
    },
    {
      "name": "ec2_instance_with_ebs_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that EC2 instances are created with EBS volumes attached"
    },
    {
      "name": "ec2_security_group_inbound_rules_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that the inbound rules of all security groups are properly configured"
    },
    {
      "name": "ec2_security_group_outbound_rules_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that the outbound rules of all security groups are properly configured"
    },
    {
      "name": "ec2_ebs_volume_creation_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "To ensure a new volume is created and the root volume remains unchanged"
    },
    {
      "name": "ec2_ebs_volume_encryption_kms_key_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "To ensure the volume is encrypted using AWS KMS and a default key is used"
    },
    {
      "name": "ec2_ebs_snapshot_creation_check",
      "boto3_api": "ec2.describe_snapshots()",
      "service": "ec2",
      "rationale": "To ensure that snapshots of EBS volumes are being created regularly"
    },
    {
      "name": "ec2_instance_iam_policy_least_privilege_check",
      "boto3_api": "iam.list_attached_role_policies()",
      "service": "iam",
      "rationale": "To ensure that the IAM policies attached to the EC2 instances follow the principle of least privilege"
    },
    {
      "name": "ec2_instance_iam_mfa_enforced_check",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "To ensure that multi-factor authentication is enforced for the IAM users that can interact with the EC2 instances"
    },
    {
      "name": "iam_user_creation_check",
      "boto3_api": "iam.list_users()",
      "service": "iam",
      "rationale": "This function is needed to ensure that IAM users are being created as per the compliance requirement"
    },
    {
      "name": "iam_group_creation_check",
      "boto3_api": "iam.list_groups()",
      "service": "iam",
      "rationale": "This function is needed to check if IAM groups have been created in the AWS environment"
    },
    {
      "name": "iam_policy_granularity_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To ensure that IAM policies are granular and meticulously tailored to AWS resources"
    },
    {
      "name": "s3_bucket_policy_granularity_check",
      "boto3_api": "s3.get_bucket_policy()",
      "service": "s3",
      "rationale": "To ensure that S3 bucket policies are granular and meticulously tailored to AWS resources"
    },
    {
      "name": "iam_policy_tag_based_access_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To check if IAM policies are configured via tags for granular access control"
    },
    {
      "name": "ec2_resource_tag_based_access_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if EC2 resources have specific tags that are used in IAM policies for access control"
    },
    {
      "name": "iam_account_password_policy_check",
      "boto3_api": "iam.get_account_password_policy()",
      "service": "iam",
      "rationale": "To ensure that the password policy for the AWS account is secure and compliant with the organization's requirements"
    },
    {
      "name": "cloudwatch_ec2_ebs_alarm_configuration_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure alarms are properly set up for EC2 and EBS resources in CloudWatch"
    },
    {
      "name": "cloudwatch_ec2_ebs_activity_monitoring_check",
      "boto3_api": "cloudwatch.get_metric_statistics()",
      "service": "cloudwatch",
      "rationale": "To ensure EC2 and EBS resource activity is being monitored in CloudWatch"
    },
    {
      "name": "sns_create_subscription_check",
      "boto3_api": "sns.list_subscriptions()",
      "service": "sns",
      "rationale": "This function is needed to check if an SNS subscription has been created for the system administrator's email address"
    },
    {
      "name": "efs_file_system_encryption_enabled",
      "boto3_api": "efs.describe_file_systems()",
      "service": "efs",
      "rationale": "To ensure that data at rest is encrypted for EFS file systems"
    },
    {
      "name": "efs_file_system_lifecycle_policy_check",
      "boto3_api": "efs.describe_lifecycle_configuration()",
      "service": "efs",
      "rationale": "To ensure that lifecycle management is properly configured for EFS file systems"
    },
    {
      "name": "efs_file_system_backup_policy_check",
      "boto3_api": "efs.describe_backup_policy()",
      "service": "efs",
      "rationale": "To ensure that backup policies are properly configured for EFS file systems"
    },
    {
      "name": "efs_file_systems_exist",
      "boto3_api": "efs.describe_file_systems()",
      "service": "efs",
      "rationale": "To ensure the implementation of EFS, we need to check if any EFS file systems exist."
    },
    {
      "name": "efs_file_systems_encrypted",
      "boto3_api": "efs.describe_file_systems()",
      "service": "efs",
      "rationale": "To ensure the security of EFS, we need to check if all EFS file systems are encrypted."
    },
    {
      "name": "efs_file_systems_backup_enabled",
      "boto3_api": "backup.describe_backup_jobs()",
      "service": "backup",
      "rationale": "To ensure the durability of EFS, we need to check if backups are enabled for all EFS file systems."
    },
    {
      "name": "efs_vpc_integration_check",
      "boto3_api": "efs.describe_mount_targets()",
      "service": "efs",
      "rationale": "This function is needed to ensure that EFS is properly integrated with VPC. It will check if the EFS mount targets are located within the VPC."
    },
    {
      "name": "efs_high_availability_check",
      "boto3_api": "efs.describe_mount_targets()",
      "service": "efs",
      "rationale": "This function is needed to ensure that EFS is highly available. It will check if the EFS mount targets are spread across multiple availability zones within the VPC."
    },
    {
      "name": "efs_security_group_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To check if the security groups associated with EFS are properly configured"
    },
    {
      "name": "efs_network_acl_check",
      "boto3_api": "ec2.describe_network_acls()",
      "service": "ec2",
      "rationale": "To check if the network ACLs associated with EFS are properly configured"
    },
    {
      "name": "efs_iam_policy_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To check if the IAM policies associated with EFS are properly configured"
    },
    {
      "name": "ec2_security_group_associated_with_vpc",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure that every VPC has at least one security group associated with it"
    },
    {
      "name": "ec2_security_group_rules_check",
      "boto3_api": "ec2.describe_security_group_rules()",
      "service": "ec2",
      "rationale": "To ensure that the security group rules are properly configured for inbound and outbound traffic"
    },
    {
      "name": "s3_bucket_secure_ports_check",
      "boto3_api": "s3.get_bucket_acl()",
      "service": "s3",
      "rationale": "To ensure secure ports for S3 buckets"
    },
    {
      "name": "efs_secure_ports_check",
      "boto3_api": "efs.describe_mount_target_security_groups()",
      "service": "efs",
      "rationale": "To ensure secure ports for EFS"
    },
    {
      "name": "ebs_secure_ports_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To ensure secure ports for EBS volumes"
    },
    {
      "name": "efs_mount_target_access_control_check",
      "boto3_api": "efs.describe_mount_target_security_groups()",
      "service": "efs",
      "rationale": "This function is needed to ensure that the mount targets have appropriate access control in place."
    },
    {
      "name": "efs_mount_target_availability_zone_check",
      "boto3_api": "efs.describe_mount_targets()",
      "service": "efs",
      "rationale": "This function is needed to ensure that mount targets are provisioned in each availability zone associated with the VPC."
    },
    {
      "name": "efs_mount_target_security_group_management_check",
      "boto3_api": "efs.describe_mount_target_security_groups()",
      "service": "efs",
      "rationale": "This function is needed to ensure that security groups for mount targets are being managed properly, which is essential for controlling access to Amazon EFS file systems."
    },
    {
      "name": "efs_vpc_endpoints_check",
      "boto3_api": "ec2.describe_vpc_endpoints()",
      "service": "ec2",
      "rationale": "This function is needed to check if VPC endpoints are being used for EFS"
    },
    {
      "name": "efs_access_points_configuration_check",
      "boto3_api": "efs.describe_access_points()",
      "service": "efs",
      "rationale": "This function is needed to ensure that EFS access points are properly configured for secure and efficient access."
    },
    {
      "name": "efs_access_points_permission_check",
      "boto3_api": "efs.describe_access_points()",
      "service": "efs",
      "rationale": "This function is needed to ensure that only authorized users have access to specific resources in the EFS environment."
    },
    {
      "name": "efs_access_point_iam_policy_check",
      "boto3_api": "efs.describeAccessPoints()",
      "service": "efs",
      "rationale": "This function is needed to check if IAM policies are used to control access to EFS access points."
    },
    {
      "name": "iam_elastic_disaster_recovery_replication_permissions_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To ensure that IAM permissions for AWS Elastic Disaster Recovery Replication are properly configured"
    },
    {
      "name": "iam_elastic_disaster_recovery_failback_permissions_check",
      "boto3_api": "iam.list_policies()",
      "service": "iam",
      "rationale": "To ensure that IAM permissions for AWS Elastic Disaster Recovery Failback are properly configured"
    },
    {
      "name": "fsx_file_cache_encryption_enabled",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "To ensure that data at rest is encrypted in FSx file cache"
    },
    {
      "name": "fsx_file_cache_in_transit_encryption_enabled",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "To ensure that data in transit is encrypted in FSx file cache"
    },
    {
      "name": "fsx_file_cache_audit_logging_enabled",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "To ensure that audit logging is enabled for FSx file cache"
    },
    {
      "name": "fsx_file_cache_access_control_check",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "To ensure that access control policies are properly configured for FSx file cache"
    },
    {
      "name": "elastic_file_cache_region_availability_check",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "To check if the Elastic File Cache is available in the specified regions"
    },
    {
      "name": "fsx_compatible_os_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure the operating system of the compute instance is compatible with AWS FSx"
    },
    {
      "name": "fsx_lustre_client_installation_check",
      "boto3_api": "ssm.describe_instance_information()",
      "service": "ssm",
      "rationale": "To check if the Lustre client is installed on the systems for the FSx service to work"
    },
    {
      "name": "s3_bucket_exists_for_fsx",
      "boto3_api": "s3.head_bucket()",
      "service": "s3",
      "rationale": "To check if the S3 bucket exists for FSX data storage"
    },
    {
      "name": "fsx_s3_bucket_data_access_check",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "To check if FSX file system has access to the specified S3 bucket"
    },
    {
      "name": "elasticache_cluster_creation_check",
      "boto3_api": "elasticache.describe_cache_clusters()",
      "service": "elasticache",
      "rationale": "This function is needed to ensure the creation of Elastic File Cache"
    },
    {
      "name": "ec2_instance_lustre_client_installed",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if the Lustre Client is installed on the EC2 instance"
    },
    {
      "name": "ec2_instance_lustre_client_configured",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if the Lustre Client is properly configured on the EC2 instance"
    },
    {
      "name": "ec2_ami_kernel_compatibility_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to check if the kernel of the EC2 instance's AMI is compatible with Lustre service."
    },
    {
      "name": "ec2_ami_kernel_downgrade_prerequisites_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to check if the prerequisites for downgrading the kernel of the EC2 instance's AMI are met."
    },
    {
      "name": "fsx_cache_mount_check",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "This function is needed to check if the FSx cache is properly mounted to the compute instances"
    },
    {
      "name": "s3_bucket_cache_export_check",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "This function is needed to ensure that cache files are being exported to the specified S3 bucket"
    },
    {
      "name": "fsx_unused_resources_cleanup_check",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "This function is needed to check for unused or unnecessary FSx file systems and associated components that need to be removed to optimize costs and maintain a secure cloud environment."
    },
    {
      "name": "fsx_redundant_file_systems_cleanup_check",
      "boto3_api": "fsx.describe_file_systems()",
      "service": "fsx",
      "rationale": "This function is needed to check for redundant FSx file systems that need to be deleted to prevent resource sprawl, reduce expenses, and maintain the overall health and performance of the AWS infrastructure."
    },
    {
      "name": "fsx_snapshots_cleanup_check",
      "boto3_api": "fsx.describe_backups()",
      "service": "fsx",
      "rationale": "This function is needed to check for redundant FSx snapshots that need to be deleted to prevent resource sprawl, reduce expenses, and maintain the overall health and performance of the AWS infrastructure."
    },
    {
      "name": "fsx_mount_targets_cleanup_check",
      "boto3_api": "fsx.describe_mount_targets()",
      "service": "fsx",
      "rationale": "This function is needed to check for redundant FSx mount targets that need to be deleted to prevent resource sprawl, reduce expenses, and maintain the overall health and performance of the AWS infrastructure."
    },
    {
      "name": "s3_bucket_encryption_enabled",
      "boto3_api": "s3.get_bucket_encryption()",
      "service": "s3",
      "rationale": "To ensure that all data stored in S3 is encrypted at rest"
    },
    {
      "name": "s3_bucket_versioning_enabled",
      "boto3_api": "s3.get_bucket_versioning()",
      "service": "s3",
      "rationale": "To ensure that all versions of an object are stored in the bucket"
    },
    {
      "name": "s3_bucket_public_access_block",
      "boto3_api": "s3.get_public_access_block()",
      "service": "s3",
      "rationale": "To ensure that public access to the S3 bucket is blocked"
    },
    {
      "name": "s3_bucket_access_logging_enabled",
      "boto3_api": "s3.get_bucket_logging()",
      "service": "s3",
      "rationale": "To ensure that access logs are enabled for all requests made to the S3 bucket"
    },
    {
      "name": "s3_bucket_lifecycle_configuration_check",
      "boto3_api": "s3.get_bucket_lifecycle_configuration()",
      "service": "s3",
      "rationale": "To ensure that lifecycle management is enabled on the S3 bucket"
    },
    {
      "name": "s3_bucket_unique_check",
      "boto3_api": "s3.head_bucket()",
      "service": "s3",
      "rationale": "To ensure the bucket name is unique and not already in use on AWS"
    },
    {
      "name": "s3_bucket_direct_upload_check",
      "boto3_api": "s3.put_object()",
      "service": "s3",
      "rationale": "To ensure data can be directly uploaded to the S3 bucket"
    },
    {
      "name": "s3_bucket_storage_class_configured",
      "boto3_api": "s3.get_bucket_lifecycle_configuration()",
      "service": "s3",
      "rationale": "This function is needed to check if the storage classes for S3 buckets are properly configured according to the data access patterns and retention needs."
    },
    {
      "name": "elastic_disaster_recovery_configuration_check",
      "boto3_api": "elasticdisasterrecovery.describe_replication_sets()",
      "service": "elasticdisasterrecovery",
      "rationale": "To ensure that Elastic Disaster Recovery is properly configured, we need to check the replication sets."
    },
    {
      "name": "elastic_disaster_recovery_region_check",
      "boto3_api": "elasticdisasterrecovery.describe_regions()",
      "service": "elasticdisasterrecovery",
      "rationale": "To ensure that backups are maintained in selected AWS regions, we need to check the regions."
    },
    {
      "name": "aws_edr_replication_agent_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if AWS Replication Agent is connected to each resource"
    },
    {
      "name": "aws_edr_api_endpoints_check",
      "boto3_api": "ec2.describe_vpc_endpoints()",
      "service": "ec2",
      "rationale": "To check if API Endpoints for EC2, Disaster Recovery, and S3 are created"
    },
    {
      "name": "aws_edr_subnet_check",
      "boto3_api": "ec2.describe_subnets()",
      "service": "ec2",
      "rationale": "To check if Staging Area Subnets and Recovery Subnets are created in VPC"
    },
    {
      "name": "aws_edr_tcp_port_check",
      "boto3_api": "ec2.describe_security_groups()",
      "service": "ec2",
      "rationale": "To check if TCP port 443 and 1500 are connected to EDR, S3, and AWS replication servers"
    },
    {
      "name": "edr_functionality_check",
      "boto3_api": "ssm.describe_instance_information()",
      "service": "ssm",
      "rationale": "To check if EDR software is installed and running on all instances"
    },
    {
      "name": "edr_alerts_check",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To check if real-time alerts are configured for EDR software"
    },
    {
      "name": "edr_incident_reports_check",
      "boto3_api": "cloudwatch.describe_alarm_history()",
      "service": "cloudwatch",
      "rationale": "To check if detailed incident reports are generated for EDR alerts"
    },
    {
      "name": "edr_system_update_check",
      "boto3_api": "ssm.describe_patch_baselines()",
      "service": "ssm",
      "rationale": "To check if the EDR system is regularly updated"
    },
    {
      "name": "dms_replication_task_bandwidth_limit_check",
      "boto3_api": "dms.describe_replication_tasks()",
      "service": "dms",
      "rationale": "To ensure that bandwidth limits are set for replication tasks"
    },
    {
      "name": "dms_replication_task_schedule_check",
      "boto3_api": "dms.describe_replication_tasks()",
      "service": "dms",
      "rationale": "To ensure that replication schedules are defined for replication tasks"
    },
    {
      "name": "dms_replication_task_source_target_location_check",
      "boto3_api": "dms.describe_replication_tasks()",
      "service": "dms",
      "rationale": "To ensure that source and target locations are specified for replication tasks"
    },
    {
      "name": "elastic_disaster_recovery_iam_configuration_check",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "To ensure that IAM roles and policies are properly configured for AWS Elastic Disaster Recovery"
    },
    {
      "name": "elastic_disaster_recovery_mfa_enforcement_check",
      "boto3_api": "iam.get_account_summary()",
      "service": "iam",
      "rationale": "To enforce multi-factor authentication (MFA) for added security in AWS Elastic Disaster Recovery"
    },
    {
      "name": "dms_replication_agent_installation_check",
      "boto3_api": "dms.describe_replication_instances()",
      "service": "dms",
      "rationale": "To check if the AWS Replication Agent is installed on all relevant systems"
    },
    {
      "name": "dms_replication_agent_configuration_check",
      "boto3_api": "dms.describe_replication_instances()",
      "service": "dms",
      "rationale": "To verify the configuration of the AWS Replication Agent"
    },
    {
      "name": "dms_replication_agent_integration_check",
      "boto3_api": "dms.describe_replication_instances()",
      "service": "dms",
      "rationale": "To ensure the AWS Replication Agent is correctly integrated with the AWS environment"
    },
    {
      "name": "dms_replication_agent_performance_check",
      "boto3_api": "dms.describe_replication_instances()",
      "service": "dms",
      "rationale": "To regularly check the performance of the AWS Replication Agent"
    },
    {
      "name": "dms_replication_agent_update_check",
      "boto3_api": "dms.describe_replication_instances()",
      "service": "dms",
      "rationale": "To ensure the AWS Replication Agent is updated as needed"
    },
    {
      "name": "ec2_launch_settings_security_configuration_check",
      "boto3_api": "ec2.describe_launch_template_versions()",
      "service": "ec2",
      "rationale": "To ensure that the launch settings are configured securely, we need to check the security configurations of the EC2 launch settings."
    },
    {
      "name": "ec2_launch_settings_resource_specification_check",
      "boto3_api": "ec2.describe_launch_template_versions()",
      "service": "ec2",
      "rationale": "To ensure that the launch settings are configured correctly, we need to check if the required resources are specified in the EC2 launch settings."
    },
    {
      "name": "ec2_launch_settings_startup_parameters_check",
      "boto3_api": "ec2.describe_launch_template_versions()",
      "service": "ec2",
      "rationale": "To ensure that the systems and applications start correctly, we need to check if the startup parameters are defined in the EC2 launch settings."
    },
    {
      "name": "elastic_recovery_instance_drill_execution_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if a recovery drill has been executed on the Elastic Recovery Instance"
    },
    {
      "name": "disaster_recovery_plan_regular_update_check",
      "boto3_api": "N/A",
      "service": "N/A",
      "rationale": "To ensure that the disaster recovery plan is regularly updated"
    },
    {
      "name": "disaster_recovery_plan_regular_testing_check",
      "boto3_api": "N/A",
      "service": "N/A",
      "rationale": "To ensure that the disaster recovery plan is regularly tested"
    },
    {
      "name": "disaster_recovery_replication_process_monitoring_check",
      "boto3_api": "N/A",
      "service": "N/A",
      "rationale": "To ensure that the replication processes involved in disaster recovery are continuously monitored"
    },
    {
      "name": "disaster_recovery_backup_integrity_verification_check",
      "boto3_api": "N/A",
      "service": "N/A",
      "rationale": "To ensure that the integrity and accessibility of backups are regularly verified"
    },
    {
      "name": "disaster_recovery_strategy_evaluation_improvement_check",
      "boto3_api": "N/A",
      "service": "N/A",
      "rationale": "To ensure that disaster recovery strategies are continuously evaluated and improved to adapt to evolving threats and organizational changes"
    },
    {
      "name": "disaster_recovery_failover_execution_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To ensure that a disaster recovery failover has been executed and the operations have been transitioned from the primary system to a backup system during disruptions."
    },
    {
      "name": "disaster_recovery_data_replication_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "To ensure that all critical data and applications are accurately replicated to the backup site for seamless operational continuity."
    },
    {
      "name": "disaster_recovery_failover_test_documentation_check",
      "boto3_api": "s3.list_objects_v2()",
      "service": "s3",
      "rationale": "To ensure that the failover process is regularly tested and documented to identify and resolve any issues, maintaining readiness to minimize downtime and data loss during real disasters."
    },
    {
      "name": "ec2_failback_execution_check",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "To check if the failback process has been executed and the primary system is restored"
    },
    {
      "name": "rds_failback_execution_check",
      "boto3_api": "rds.describe_db_instances()",
      "service": "rds",
      "rationale": "To check if the failback process has been executed and the primary database is restored"
    },
    {
      "name": "s3_failback_execution_check",
      "boto3_api": "s3.list_buckets()",
      "service": "s3",
      "rationale": "To check if the failback process has been executed and the primary storage is restored"
    },
    {
      "name": "cloudwatch_edr_metrics_monitoring_enabled",
      "boto3_api": "cloudwatch.describe_alarms()",
      "service": "cloudwatch",
      "rationale": "To ensure that CloudWatch metrics for AWS EDR are being monitored"
    },
    {
      "name": "cloudwatch_edr_metrics_anomaly_detection",
      "boto3_api": "cloudwatch.describe_anomaly_detectors()",
      "service": "cloudwatch",
      "rationale": "To detect any anomalies in the CloudWatch metrics for AWS EDR"
    },
    {
      "name": "edr_working_check",
      "boto3_api": "ssm.describe_instance_information()",
      "service": "ssm",
      "rationale": "This function is needed to check the working status of EDR on EC2 instances"
    }
  ]
}