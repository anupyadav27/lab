[
  {
    "function_name": "gke_proxy_kubeconfig_file_permission_restricted",
    "description": "Checks if the proxy kubeconfig file permissions are set to 644 or more restrictive",
    "gcp_api_example": "gcloud container clusters describe --format='get(nodeConfig.proxyConfig)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kube_proxy_kubeconfig_ownership_root",
    "description": "Checks if the kube-proxy kubeconfig file ownership is set to root:root",
    "gcp_api_example": "gcloud container clusters describe --format=json --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_config_file_permission_check",
    "description": "Checks if the kubelet configuration file has permissions set to 644",
    "gcp_api_example": "gcloud container clusters describe --format='get(nodeConfig.kubeletConfig)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_config_file_root_ownership",
    "description": "Checks if the kubelet configuration file ownership is set to root:root",
    "gcp_api_example": "gcloud container clusters describe --format=json --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_anonymous_auth_disabled",
    "description": "Checks if anonymous requests to the Kubelet server are disabled",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='get(clusterAutoscaling.enableNodeAutoprovisioning)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_authorization_mode_not_always_allow",
    "description": "Checks that the --authorization-mode argument for GKE clusters is not set to AlwaysAllow",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAuthConfig.authorizationMode)'",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_kubelet_client_ca_file_configured",
    "description": "Checks if a Client CA File is configured for Kubelet authentication in GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(masterAuth.clientCertificateConfig.issueClientCertificate)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_read_only_port_disabled",
    "description": "Checks if the read-only port is disabled in the Kubelet process",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(clusterIpv4Cidr)'",
    "service_category": "Compute"
  },
  {
    "function_name": "streaming_connection_idle_timeout_set",
    "description": "Checks if the --streaming-connection-idle-timeout argument is not set to 0",
    "gcp_api_example": "gcloud alpha pubsub v1 projects.subscriptions.get --subscription=SUBSCRIPTION_ID",
    "service_category": "Network"
  },
  {
    "function_name": "gke_kubelet_make_iptables_util_chains_true",
    "description": "Checks if the --make-iptables-util-chains argument is set to true in GKE Kubelet",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(clusterIpv4Cidr)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_event_record_qps_set",
    "description": "Checks if the --eventRecordQPS argument is set to 0 or a level which ensures appropriate event capture",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(currentMasterVersion)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_client_certificate_rotation_enabled",
    "description": "Checks if the kubelet client certificate rotation is enabled in GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(name, status, nodeConfig.imageType)' --zone ZONE",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_rotate_kubelet_server_certificate_enabled",
    "description": "Checks if the RotateKubeletServerCertificate argument is set to true for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE_NAME CLUSTER_NAME --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_admin_role_restriction",
    "description": "Checks if the cluster-admin role is only used where and when needed",
    "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_secrets_access_minimized",
    "description": "Checks if access to secrets stored within the Kubernetes cluster is restricted",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='value(masterAuth.username)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_roles_clusterroles_minimize_wildcard_use",
    "description": "Checks if Kubernetes Roles and ClusterRoles minimize the use of wildcard '*'",
    "gcp_api_example": "kubectl get roles,clusterroles --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.rules[*].apiGroups}{\"\\n\"}{end}'",
    "service_category": "Security"
  },
  {
    "function_name": "gke_cluster_no_default_service_account",
    "description": "Checks if GKE clusters are using default service accounts",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value[separator=\" \"](nodeConfig.serviceAccount)'",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_pod_service_account_token_mount_restriction",
    "description": "Checks if Service Account Tokens are only mounted in GKE pods where necessary",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(workloadIdentityConfig.workloadPool)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_system_masters_group_restriction",
    "description": "Checks if the system:masters group is used to grant permissions to any user or service account in GKE clusters",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
    "description": "Checks if the bind, impersonate and escalate permissions in the Kubernetes cluster are limited",
    "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_role_bindings_system_anonymous_avoided",
    "description": "Checks if ClusterRoleBindings or RoleBindings are bound to the user system:anonymous in GKE clusters",
    "gcp_api_example": "gcloud container clusters get-credentials --region=REGION --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_cluster_role_binding_system_unauthenticated_check",
    "description": "Checks for non-default ClusterRoleBindings and RoleBindings with the group system:unauthenticated, except the ClusterRoleBinding system:public-info-viewer",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_clusterrolebindings_system_authenticated_restrictions",
    "description": "Checks for non-default ClusterRoleBindings and RoleBindings with the group system:authenticated, except the ClusterRoleBindings system:basic-user, system:discovery, and system:public-info-viewer.",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID; kubectl get clusterrolebindings,rolebindings -o json",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_cluster_pod_security_baseline_enforced",
    "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_cni_network_policies_supported",
    "description": "Checks if the CNI plugin in use by the GKE cluster supports Network Policies",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE_NAME CLUSTER_NAME",
    "service_category": "Network"
  },
  {
    "function_name": "gke_namespace_network_policy_defined",
    "description": "Checks if all namespaces in GKE have network policies defined",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone ZONE --project PROJECT_ID",
    "service_category": "Network"
  },
  {
    "function_name": "gke_secrets_as_files_preferred",
    "description": "Checks if Kubernetes secrets are mounted as data volumes instead of environment variables",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "kubernetes_external_secret_storage",
    "description": "Checks if Kubernetes is using an external secrets storage and management system",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='value(addonsConfig.configConnectorConfig.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_image_provenance_configured",
    "description": "Checks if Image Provenance is configured using ImagePolicyWebhook admission controller in GKE",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(addonsConfig.imagePolicyConfig.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_namespace_isolation_enabled",
    "description": "Checks if namespaces are used to isolate Kubernetes objects in GKE",
    "gcp_api_example": "kubectl get namespaces --context=CONTEXT_NAME",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_pod_seccomp_profile_runtime_default",
    "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterIpv4Cidr)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_pod_container_security_context_applied",
    "description": "Checks if Security Context is applied to GKE Pods and Containers",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_namespace_default_usage_restricted",
    "description": "Checks if the default namespace is not being used in GKE",
    "gcp_api_example": "kubectl get pods --all-namespaces --context=CONTEXT_NAME",
    "service_category": "Compute"
  },
  {
    "function_name": "container_registry_image_vulnerability_scanning_enabled",
    "description": "Checks if Image Vulnerability Scanning is enabled for images stored in Google Container Registry",
    "gcp_api_example": "gcloud artifacts docker images list-tags --project=PROJECT_ID --location=LOCATION --repository=REPOSITORY",
    "service_category": "Container Registry"
  },
  {
    "function_name": "container_registry_user_access_minimized",
    "description": "Checks if user access to Container Image repositories is minimized and only authorized personnel and service accounts can interact with build images.",
    "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
    "service_category": "Container"
  },
  {
    "function_name": "gke_cluster_service_account_artifact_registry_viewer_role",
    "description": "Checks if the Cluster Service Account is configured with Artifact Registry Viewer Role to only allow read-only access to AR repositories",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value[separator=\" \"](nodeConfig.serviceAccount)'",
    "service_category": "Compute"
  },
  {
    "function_name": "container_registry_trusted_images_only",
    "description": "Checks if Binary Authorization is configured to allowlist only approved container registries",
    "gcp_api_example": "gcloud container binauthz policy describe --project=PROJECT_ID",
    "service_category": "Container"
  },
  {
    "function_name": "gke_cluster_no_default_service_account",
    "description": "Checks if GKE clusters are not running using the Compute Engine default service account",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value[separator=\" \"](nodeConfig.serviceAccount)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_workload_identity_dedicated_service_account",
    "description": "Checks if GKE workloads use dedicated service accounts for authentication to Google Cloud APIs.",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(workloadIdentityConfig.workloadPool)'",
    "service_category": "Identity"
  },
  {
    "function_name": "gke_cluster_metadata_server_enabled",
    "description": "Checks if the GKE Metadata Server is enabled for a GKE cluster",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(metadataConfig.enableMetadataServer)'",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_node_images_cos_containerd",
    "description": "Checks if GKE node images are using Container-Optimized OS (cos_containerd)",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(nodeConfig.imageType)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_node_auto_repair_enabled",
    "description": "Checks if Node Auto-Repair is enabled for GKE nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(nodePools.autorepair)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_nodes_auto_upgrade_enabled",
    "description": "Checks if Node Auto-Upgrade is enabled for GKE nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(currentNodeVersion)'",
    "service_category": "Compute"
  },
  {
    "function_name": "container_gke_shielded_nodes_enabled",
    "description": "Checks if Shielded GKE Nodes are enabled for all GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(shieldedNodes.enabled)'",
    "service_category": "Container"
  },
  {
    "function_name": "gke_shielded_nodes_integrity_monitoring_enabled",
    "description": "Checks if Integrity Monitoring for Shielded GKE Nodes is enabled",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(shieldedNodes.enabled)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_node_shielded_secure_boot_enabled",
    "description": "Checks if Secure Boot for Shielded GKE Nodes is enabled",
    "gcp_api_example": "gcloud container node-pools describe NODE_POOL_ID --cluster=CLUSTER_ID --zone=ZONE --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "network_vpc_intranode_visibility_enabled",
    "description": "Checks if Intranode Visibility is enabled for VPC to see pod-level traffic within a worker node",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='get(networkConfig.intraNodeVisibilityConfig.enabled)'",
    "service_category": "Network"
  },
  {
    "function_name": "gke_cluster_vpc_native_enabled",
    "description": "Checks if the GKE clusters are VPC-native",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(ipAllocationPolicy.useIpAliases)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_control_plane_authorized_networks_enabled",
    "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID",
    "service_category": "Network"
  },
  {
    "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
    "description": "Checks if GKE clusters are created with private endpoint enabled and public access disabled",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --region=REGION CLUSTER_NAME",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_private_nodes_enabled",
    "description": "Checks if GKE clusters are created with private nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_node_auditd_logging_enabled",
    "description": "Checks if the auditd logging daemon is running on GKE nodes running Container-Optimized OS (COS)",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(nodeConfig.imageType)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_client_certificates_disabled",
    "description": "Checks if client certificates are disabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format=json",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_rbac_users_managed_with_google_groups",
    "description": "Checks if GKE RBAC users are managed using Google Groups",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_cluster_abac_disabled",
    "description": "Checks if Attribute-Based Access Control (ABAC) is disabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(legacyAbac.enabled)'",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_cluster_web_ui_disabled",
    "description": "Checks if the Kubernetes Web UI (Dashboard) is disabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(addonsConfig.kubernetesDashboard.disabled)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_alpha_status_check",
    "description": "Checks if any GKE clusters are in alpha status",
    "gcp_api_example": "gcloud container clusters list --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_sandbox_enabled_for_untrusted_workloads",
    "description": "Checks if GKE Sandbox is enabled for running untrusted workloads",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(cluster.gkeSandboxConfig.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_binary_authorization_enabled",
    "description": "Checks if Binary Authorization is enabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(binaryAuthorization.enabled)'",
    "service_category": "Security"
  },
  {
    "function_name": "security_posture_dashboard_enabled",
    "description": "Checks if the security posture dashboard is enabled for the workload",
    "gcp_api_example": "gcloud securitycenter settings describe --organization=ORGANIZATION_ID",
    "service_category": "Security"
  }
]