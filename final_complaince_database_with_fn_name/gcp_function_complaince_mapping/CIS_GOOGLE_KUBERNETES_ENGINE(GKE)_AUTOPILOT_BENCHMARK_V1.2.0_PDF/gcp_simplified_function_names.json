[
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_1",
    "description": "Considers All Structures of the Entity - Management and the board of directors consider the multiple structures used (including operating units, legal entities, geographic distribution, and outsourced service providers) to support the achievement of objectives. Establishes Reporting Lines - Management designs and evaluates lines of reporting for each entity structure to enable execution of authorities and responsibilities and flow of information to manage the activities of the entity. Defines, Assigns, and Limits Authorities and Responsibilities - Management and the board of directors delegate authority, define responsibilities, and use appropriate processes and technology to assign responsibility and segregate duties as necessary at the various levels of the organization. Additional points of focus specifically related to all engagements using the trust services criteria: Addresses Specific Requirements When Defining Authorities and Responsibilities—Management and the board of directors consider requirements relevant to security, availability, processing integrity, confidentiality, and privacy when defining authorities and responsibilities. Considers Interactions With External Parties When Establishing Structures, Reporting Lines, Authorities, and Responsibilities — Management and the board of directors consider the need for the entity to interact with and monitor the activities of external parties when establishing structures, reporting lines, authorities, and responsibilities.",
    "function_name": "iam_roles_define_authorities_responsibilities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_2",
    "description": "Identifies Information Requirements - A process is in place to identify the information required and expected to support the functioning of the other components of internal control and the achievement of the entity’s objectives. Captures Internal and External Sources of Data - Information systems capture internal and external sources of data. Processes Relevant Data Into Information - Information systems process and transform relevant data into information. Maintains Quality Throughout Processing - Information systems produce information that is timely, current, accurate, complete, accessible, protected, verifiable, and retained. Information is reviewed to assess its relevance in supporting the internal control components.",
    "function_name": "bigquery_datasets_information_quality_maintenance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_3",
    "description": "Operations Objectives: Reflects Management's Choices - Operations objectives reflect management's choices about structure, industry considerations, and performance of the entity. Considers Tolerances for Risk - Management considers the acceptable levels of variation relative to the achievement of operations objectives. External Financial Reporting Objectives: Complies With Applicable Accounting Standards - Financial reporting objectives are consistent with accounting principles suitable and available for that entity. The accounting principles selected are appropriate in the circumstances. External Nonfinancial Reporting Objectives: Complies With Externally Established Frameworks - Management establishes objectives consistent with lgcp and regulations or standards and frameworks of recognized external organizations. Reflects Entity Activities - External reporting reflects the underlying transactions and events within a range of acceptable limits. Considers the Required Level of Precision—Management reflects the required level of precision and accuracy suitable for user needs and based on criteria established by third parties in nonfinancial reporting. Internal Reporting Objectives: Reflects Management's Choices - Internal reporting provides management with accurate and complete information regarding management's choices and information needed in managing the entity. Considers the Required Level of Precision—Management reflects the required level of precision and accuracy suitable for user needs in nonfinancial reporting objectives and materiality within financial reporting objectives. Reflects Entity Activities—Internal reporting reflects the underlying transactions and events within a range of acceptable limits. Compliance Objectives: Reflects External Lgcp and Regulations - Lgcp and regulations establish minimum standards of conduct, which the entity integrates into compliance objectives. Considers Tolerances for Risk - Management considers the acceptable levels of variation relative to the achievement of operations objectives. Additional point of focus specifically related to all engagements using the trust services criteria: Establishes Sub-objectives to Support Objectives—Management identifies sub-objectives related to security, availability, processing integrity, confidentiality, and privacy to support the achievement of the entity’s objectives related to reporting, operations, and compliance.",
    "function_name": "iam_policies_reflect_management_choices",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_4",
    "description": "Includes Entity, Subsidiary, Division, Operating Unit, and Functional Levels - The entity identifies and assesses risk at the entity, subsidiary, division, operating unit, and functional levels relevant to the achievement of objectives. Analyzes Internal and External Factors - Risk identification considers both internal and external factors and their impact on the achievement of objectives. Involves Appropriate Levels of Management - The entity puts into place effective risk assessment mechanisms that involve appropriate levels of management. Estimates Significance of Risks Identified - Identified risks are analyzed through a process that includes estimating the potential significance of the risk. Determines How to Respond to Risks - Risk assessment includes considering how the risk should be managed and whether to accept, avoid, reduce, or share the risk. Additional points of focus specifically related to all engagements using the trust services criteria: Identifies and Assesses Criticality of Information Assets and Identifies Threats and Vulnerabilities - The entity's risk identification and assessment process includes (1) identifying information assets, including physical devices and systems, virtual devices, software, data and data flows, external information systems, and organizational roles; (2) assessing the criticality of those information assets; (3) identifying the threats to the assets from intentional (including malicious) and unintentional acts and environmental events; and (4) identifying the vulnerabilities of the identified assets.",
    "function_name": "security_command_center_risk_assessment_mechanisms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_5",
    "description": "Considers Various Types of Fraud - The assessment of fraud considers fraudulent reporting, possible loss of assets, and corruption resulting from the various ways that fraud and misconduct can occur. Assesses Incentives and Pressures - The assessment of fraud risks considers incentives and pressures. Assesses Opportunities - The assessment of fraud risk considers opportunities for unauthorized acquisition,use, or disposal of assets, altering the entity’s reporting records, or committing other inappropriate acts. Assesses Attitudes and Rationalizations - The assessment of fraud risk considers how management and other personnel might engage in or justify inappropriate actions. Additional point of focus specifically related to all engagements using the trust services criteria: Considers the Risks Related to the Use of IT and Access to Information - The assessment of fraud risks includes consideration of threats and vulnerabilities that arise specifically from the use of IT and access to information.",
    "function_name": "security_command_center_fraud_risk_assessment",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_6",
    "description": "Assesses Changes in the External Environment - The risk identification process considers changes to the regulatory, economic, and physical environment in which the entity operates. Assesses Changes in the Business Model - The entity considers the potential impacts of new business lines, dramatically altered compositions of existing business lines, acquired or divested business operations on the system of internal control, rapid growth, changing reliance on foreign geographies, and new technologies. Assesses Changes in Leadership - The entity considers changes in management and respective attitudes and philosophies on the system of internal control. Assess Changes in Systems and Technology - The risk identification process considers changes arising from changes in the entity’s systems and changes in the technology environment. Assess Changes in Vendor and Business Partner Relationships - The risk identification process considers changes in vendor and business partner relationships.",
    "function_name": "security_command_center_risk_identification_process_considers_environmental_changes",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_7",
    "description": "Assesses Results - Management and the board of directors, as appropriate, assess results of ongoing and separate evaluations. Communicates Deficiencies - Deficiencies are communicated to parties responsible for taking corrective action and to senior management and the board of directors, as appropriate. Monitors Corrective Action - Management tracks whether deficiencies are remedied on a timely basis.",
    "function_name": "security_command_center_monitor_corrective_action",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_8",
    "description": "Determines Dependency Between the Use of Technology in Business Processes and Technology General Controls - Management understands and determines the dependency and linkage between business processes, automated control activities, and technology general controls. Establishes Relevant Technology Infrastructure Control Activities - Management selects and develops control activities over the technology infrastructure, which are designed and implemented to help ensure the completeness, accuracy, and availability of technology processing. Establishes Relevant Security Management Process Controls Activities - Management selects and develops control activities that are designed and implemented to restrict technology access rights to authorized users commensurate with their job responsibilities and to protect the entity’s assets from external threats. Establishes Relevant Technology Acquisition, Development, and Maintenance Process Control Activities - Management selects and develops control activities over the acquisition, development, and maintenance of technology and its infrastructure to achieve management’s objectives.",
    "function_name": "iam_roles_access_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_9",
    "description": "Identifies and Manages the Inventory of Information Assets - The entity identifies, inventories, classifies, and manages information assets. Restricts Logical Access - Logical access to information assets, including hardware, data (at-rest, during processing, or in transmission), software, administrative authorities, mobile devices, output, and offline system components is restricted through the use of access control software and rule sets. Identifies and Authenticates Users - Persons, infrastructure and software are identified and authenticated prior to accessing information assets, whether locally or remotely. Considers Network Segmentation - Network segmentation permits unrelated portions of the entity's information system to be isolated from each other. Manages Points of Access - Points of access by outside entities and the types of data that flow through the points of access are identified, inventoried, and managed. The types of individuals and systems using each point of access are identified, documented, and managed. Restricts Access to Information Assets - Combinations of data classification, separate data structures, port restrictions, access protocol restrictions, user identification, and digital certificates are used to establish access control rules for information assets. Manages Identification and Authentication - Identification and authentication requirements are established, documented, and managed for individuals and systems accessing entity information, infrastructure and software. Manages Credentials for Infrastructure and Software - New internal and external infrastructure and software are registered, authorized, and documented prior to being granted access credentials and implemented on the network or access point. Credentials are removed and access is disabled when access is no longer required or the infrastructure and software are no longer in use. Uses Encryption to Protect Data - The entity uses encryption to supplement other measures used to protect data-at-rest, when such protections are deemed appropriate based on assessed risk. Protects Encryption Keys - Processes are in place to protect encryption keys during generation, storage, use, and destruction.",
    "function_name": "iam_user_identification_authentication_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_10",
    "description": "Prior to issuing system credentials and granting system access, the entity registers and authorizes new internal and external users whose access is administered by the entity. For those users whose access is administered by the entity, user system credentials are removed when user access is no longer authorized. Controls Access Credentials to Protected Assets - Information asset access credentials are created based on an authorization from the system's asset owner or authorized custodian. Removes Access to Protected Assets When Appropriate - Processes are in place to remove credential access when an individual no longer requires such access. Reviews Appropriateness of Access Credentials - The appropriateness of access credentials is reviewed on a periodic basis for unnecessary and inappropriate individuals with credentials.",
    "function_name": "iam_user_access_credential_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_11",
    "description": "Creates or Modifies Access to Protected Information Assets - Processes are in place to create or modify access to protected information assets based on authorization from the asset’s owner. Removes Access to Protected Information Assets - Processes are in place to remove access to protected information assets when an individual no longer requires access. Uses Role-Based Access Controls - Role-based access control is utilized to support segregation of incompatible functions.",
    "function_name": "iam_role_based_access_control_implementation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_12",
    "description": "Restricts Access — The types of activities that can occur through a communication channel (for example, FTP site, router port) are restricted. Protects Identification and Authentication Credentials — Identification and authentication credentials are protected during transmission outside its system boundaries. Requires Additional Authentication or Credentials — Additional authentication information or credentials are required when accessing the system from outside its boundaries. Implements Boundary Protection Systems — Boundary protection systems (for example, firewalls, demilitarized zones, and intrusion detection systems) are implemented to protect external access points from attempts and unauthorized access and are monitored to detect such attempts.",
    "function_name": "network_firewall_boundary_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_13",
    "description": "Restricts the Ability to Perform Transmission - Data loss prevention processes and technologies are used to restrict ability to authorize and execute transmission, movement and removal of information. Uses Encryption Technologies or Secure Communication Channels to Protect Data - Encryption technologies or secured communication channels are used to protect transmission of data and other communications beyond connectivity access points. Protects Removal Media - Encryption technologies and physical asset protections are used for removable media (such as USB drives and back-up tapes), as appropriate. Protects Mobile Devices - Processes are in place to protect mobile devices (such as laptops, smart phones and tablets) that serve as information assets.",
    "function_name": "network_vpc_encryption_for_data_transmission",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_14",
    "description": "Restricts Application and Software Installation - The ability to install applications and software is restricted to authorized individuals. Detects Unauthorized Changes to Software and Configuration Parameters - Processes are in place to detect changes to software and configuration parameters that may be indicative of unauthorized or malicious software. Uses a Defined Change Control Process - A management-defined change control process is used for the implementation of software. Uses Antivirus and Anti-Malware Software - Antivirus and anti-malware software is implemented and maintained to provide for the interception or detection and remediation of malware. Scans Information Assets from Outside the Entity for Malware and Other Unauthorized Software - Procedures are in place to scan information assets that have been transferred or returned to the entity’s custody for malware and other unauthorized software and to remove any items detected prior to its implementation on the network.",
    "function_name": "compute_instance_software_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_15",
    "description": "Uses Defined Configuration Standards - Management has defined configuration standards. Monitors Infrastructure and Software - The entity monitors infrastructure and software for noncompliance with the standards, which could threaten the achievement of the entity's objectives. Implements Change-Detection Mechanisms - The IT system includes a change-detection mechanism (for example, file integrity monitoring tools) to alert personnel to unauthorized modifications of critical system files, configuration files, or content files. Detects Unknown or Unauthorized Components - Procedures are in place to detect the introduction of unknown or unauthorized components. Conducts Vulnerability Scans - The entity conducts vulnerability scans designed to identify potential vulnerabilities or misconfigurations on a periodic basis and after any significant change in the environment and takes action to remediate identified deficiencies on a timely basis.",
    "function_name": "security_command_center_vulnerability_scans_implementation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_16",
    "description": "Implements Detection Policies, Procedures, and Tools - Detection policies and procedures are defined and implemented, and detection tools are implemented on Infrastructure and software to identify anomalies in the operation or unusual activity on systems. Procedures may include (1) a defined governance process for security event detection and management that includes provision of resources; (2) use of intelligence sources to identify newly discovered threats and vulnerabilities; and (3) logging of unusual system activities. Designs Detection Measures - Detection measures are designed to identify anomalies that could result from actual or attempted (1) compromise of physical barriers; (2) unauthorized actions of authorized personnel; (3) use of compromised identification and authentication credentials; (4) unauthorized access from outside the system boundaries; (5) compromise of authorized external parties; and (6) implementation or connection of unauthorized hardware and software. Implements Filters to Analyze Anomalies - Management has implemented procedures to filter, summarize, and analyze anomalies to identify security events. Monitors Detection Tools for Effective Operation - Management has implemented processes to monitor the effectiveness of detection tools.",
    "function_name": "security_command_center_detection_tools_implemented",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "securitycenter_client.projects.sources.findings.list(parent='projects/project_id/sources/source_id')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_17",
    "description": "Responds to Security Incidents - Procedures are in place for responding to security incidents and evaluating the effectiveness of those policies and procedures on a periodic basis. Communicates and Reviews Detected Security Events - Detected security events are communicated to and reviewed by the individuals responsible for the management of the security program and actions are taken, if necessary. Develops and Implements Procedures to Analyze Security Incidents - Procedures are in place to analyze security incidents and determine system impact. Assesses the Impact on Personal Information - Detected security events are evaluated to determine whether they could or did result in the unauthorized disclosure or use of personal information and whether there has been a failure to comply with applicable lgcp or regulations. Determines Personal Information Used or Disclosed - When an unauthorized use or disclosure of personal information has occurred, the affected information is identified.",
    "function_name": "security_incidents_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.incidents().list(parent='organizations/12345')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_18",
    "description": "Assigns Roles and Responsibilities - Roles and responsibilities for the design, implementation, maintenance, and execution of the incident response program are assigned, including the use of external resources when necessary. Contains Security Incidents - Procedures are in place to contain security incidents that actively threaten entity objectives. Mitigates Ongoing Security Incidents - Procedures are in place to mitigate the effects of ongoing security incidents. Ends Threats Posed by Security Incidents - Procedures are in place to end the threats posed by security incidents through closure of the vulnerability, removal of unauthorized access, and other remediation actions. Restores Operations - Procedures are in place to restore data and business operations to an interim state that permits the achievement of entity objectives. Develops and Implements Communication Protocols for Security Incidents - Protocols for communicating security incidents and actions taken to affected parties are developed and implemented to meet the entity's objectives. Obtains Understanding of Nature of Incident and Determines Containment Strategy - An understanding of the nature (for example, the method by which the incident occurred and the affected system resources) and severity of the security incident is obtained to determine the appropriate containment strategy, including (1) a determination of the appropriate response time frame, and (2) the determination and execution of the containment approach. Remediates Identified Vulnerabilities - Identified vulnerabilities are remediated through the development and execution of remediation activities. Communicates Remediation Activities - Remediation activities are documented and communicated in accordance with the incident response program. Evaluates the Effectiveness of Incident Response - The design of incident response activities is evaluated for effectiveness on a periodic basis. Periodically Evaluates Incidents - Periodically, management reviews incidents related to security, availability, processing integrity, confidentiality, and privacy and identifies the need for system changes based on incident patterns and root causes. Communicates Unauthorized Use and Disclosure - Events that resulted in unauthorized use or disclosure of personal information are communicated to the data subjects, legal and regulatory authorities, and others as required. Application of Sanctions - The conduct of individuals and organizations operating under the authority of the entity and involved in the unauthorized use or disclosure of personal information is evaluated and, if appropriate, sanctioned in accordance with entity policies and legal and regulatory requirements.",
    "function_name": "security_incident_response_roles_assigned",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().getSecurityHealthAnalyticsSettings(name='organizations/123/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_19",
    "description": "Restores the Affected Environment - The activities restore the affected environment to functional operation by rebuilding systems, updating software, installing patches, and changing configurations, as needed. Communicates Information About the Event - Communications about the nature of the incident, recovery actions taken, and activities required for the prevention of future security events are made to management and others as appropriate (internal and external). Determines Root Cause of the Event - The root cause of the event is determined. Implements Changes to Prevent and Detect Recurrences - Additional architecture or changes to preventive and detective controls, or both, are implemented to prevent and detect recurrences on a timely basis. Improves Response and Recovery Procedures - Lessons learned are analyzed, and the incident response plan and recovery procedures are improved. Implements Incident Recovery Plan Testing - Incident recovery plan testing is performed on a periodic basis. The testing includes (1) development of testing scenarios based on threat likelihood and magnitude; (2) consideration of relevant system components from across the entity that can impair availability; (3) scenarios that consider the potential for the lack of availability of key personnel; and (4) revision of continuity plans and systems based on test results.",
    "function_name": "compute_instance_recovery_plan_testing",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_20",
    "description": "Manages Changes Throughout the System Lifecycle - A process for managing system changes throughout the lifecycle of the system and its components (infrastructure, data, software and procedures) is used to support system availability and processing integrity. Authorizes Changes - A process is in place to authorize system changes prior to development. Designs and Develops Changes - A process is in place to design and develop system changes. Documents Changes - A process is in place to document system changes to support ongoing maintenance of the system and to support system users in performing their responsibilities. Tracks System Changes - A process is in place to track system changes prior to implementation. Configures Software - A process is in place to select and implement the configuration parameters used to control the functionality of software. Tests System Changes - A process is in place to test system changes prior to implementation. Approves System Changes - A process is in place to approve system changes prior to implementation. Deploys System Changes - A process is in place to implement system changes. Identifies and Evaluates System Changes - Objectives affected by system changes are identified, and the ability of the modified system to meet the objectives is evaluated throughout the system development life cycle. Identifies Changes in Infrastructure, Data, Software, and Procedures Required to Remediate Incidents - Changes in infrastructure, data, software, and procedures required to remediate incidents to continue to meet objectives are identified, and the change process is initiated upon identification. Creates Baseline Configuration of IT Technology - A baseline configuration of IT and control systems is created and maintained. Provides for Changes Necessary in Emergency Situations - A process is in place for authorizing, designing, testing, approving and implementing changes necessary in emergency situations (that is, changes that need to be implemented in an urgent timeframe). Protects Confidential Information - The entity protects confidential information during system design, development, testing, implementation, and change processes to meet the entity’s objectives related to confidentiality. Protects Personal Information - The entity protects personal information during system design, development, testing, implementation, and change processes to meet the entity’s objectives related to privacy.",
    "function_name": "compute_instance_change_management_process",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_21",
    "description": "Measures Current Usage - The use of the system components is measured to establish a baseline for capacity management and to use when evaluating the risk of impaired availability due to capacity constraints. Forecasts Capacity - The expected average and peak use of system components is forecasted and compared to system capacity and associated tolerances. Forecasting considers capacity in the event of the failure of system components that constrain capacity. Makes Changes Based on Forecasts - The system change management process is initiated when forecasted usage exceeds capacity tolerances.",
    "function_name": "monitoring_system_capacity_forecast",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_22",
    "description": "Identifies Confidential information - Procedures are in place to identify and designate confidential information when it is received or created and to determine the period over which the confidential information is to be retained. Protects Confidential Information from Destruction - Procedures are in place to protect confidential information from erasure or destruction during the specified retention period of the information",
    "function_name": "storage_objects_confidentiality_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_blob(blob_name)"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_23",
    "description": "Identifies Confidential Information for Destruction - Procedures are in place to identify confidential information requiring destruction when the end of the retention period is reached. Destroys Confidential Information - Procedures are in place to erase or otherwise destroy confidential information that has been identified for destruction.",
    "function_name": "storage_objects_confidential_destruction",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.delete_blob(bucket_name='bucket', blob_name='object')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_24",
    "description": "Considers All Structures of the Entity - Management and the board of directors consider the multiple structures used (including operating units, legal entities, geographic distribution, and outsourced service providers) to support the achievement of objectives. Establishes Reporting Lines - Management designs and evaluates lines of reporting for each entity structure to enable execution of authorities and responsibilities and flow of information to manage the activities of the entity. Defines, Assigns, and Limits Authorities and Responsibilities - Management and the board of directors delegate authority, define responsibilities, and use appropriate processes and technology to assign responsibility and segregate duties as necessary at the various levels of the organization. Additional points of focus specifically related to all engagements using the trust services criteria: Addresses Specific Requirements When Defining Authorities and Responsibilities—Management and the board of directors consider requirements relevant to security, availability, processing integrity, confidentiality, and privacy when defining authorities and responsibilities. Considers Interactions With External Parties When Establishing Structures, Reporting Lines, Authorities, and Responsibilities — Management and the board of directors consider the need for the entity to interact with and monitor the activities of external parties when establishing structures, reporting lines, authorities, and responsibilities.",
    "function_name": "iam_roles_define_authorities_responsibilities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_25",
    "description": "Identifies Information Requirements - A process is in place to identify the information required and expected to support the functioning of the other components of internal control and the achievement of the entity’s objectives. Captures Internal and External Sources of Data - Information systems capture internal and external sources of data. Processes Relevant Data Into Information - Information systems process and transform relevant data into information. Maintains Quality Throughout Processing - Information systems produce information that is timely, current, accurate, complete, accessible, protected, verifiable, and retained. Information is reviewed to assess its relevance in supporting the internal control components.",
    "function_name": "bigquery_datasets_information_quality_maintenance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_26",
    "description": "Operations Objectives: Reflects Management's Choices - Operations objectives reflect management's choices about structure, industry considerations, and performance of the entity. Considers Tolerances for Risk - Management considers the acceptable levels of variation relative to the achievement of operations objectives. External Financial Reporting Objectives: Complies With Applicable Accounting Standards - Financial reporting objectives are consistent with accounting principles suitable and available for that entity. The accounting principles selected are appropriate in the circumstances. External Nonfinancial Reporting Objectives: Complies With Externally Established Frameworks - Management establishes objectives consistent with lgcp and regulations or standards and frameworks of recognized external organizations. Reflects Entity Activities - External reporting reflects the underlying transactions and events within a range of acceptable limits. Considers the Required Level of Precision—Management reflects the required level of precision and accuracy suitable for user needs and based on criteria established by third parties in nonfinancial reporting. Internal Reporting Objectives: Reflects Management's Choices - Internal reporting provides management with accurate and complete information regarding management's choices and information needed in managing the entity. Considers the Required Level of Precision—Management reflects the required level of precision and accuracy suitable for user needs in nonfinancial reporting objectives and materiality within financial reporting objectives. Reflects Entity Activities—Internal reporting reflects the underlying transactions and events within a range of acceptable limits. Compliance Objectives: Reflects External Lgcp and Regulations - Lgcp and regulations establish minimum standards of conduct, which the entity integrates into compliance objectives. Considers Tolerances for Risk - Management considers the acceptable levels of variation relative to the achievement of operations objectives. Additional point of focus specifically related to all engagements using the trust services criteria: Establishes Sub-objectives to Support Objectives—Management identifies sub-objectives related to security, availability, processing integrity, confidentiality, and privacy to support the achievement of the entity’s objectives related to reporting, operations, and compliance.",
    "function_name": "iam_policies_reflect_management_choices",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_27",
    "description": "Includes Entity, Subsidiary, Division, Operating Unit, and Functional Levels - The entity identifies and assesses risk at the entity, subsidiary, division, operating unit, and functional levels relevant to the achievement of objectives. Analyzes Internal and External Factors - Risk identification considers both internal and external factors and their impact on the achievement of objectives. Involves Appropriate Levels of Management - The entity puts into place effective risk assessment mechanisms that involve appropriate levels of management. Estimates Significance of Risks Identified - Identified risks are analyzed through a process that includes estimating the potential significance of the risk. Determines How to Respond to Risks - Risk assessment includes considering how the risk should be managed and whether to accept, avoid, reduce, or share the risk. Additional points of focus specifically related to all engagements using the trust services criteria: Identifies and Assesses Criticality of Information Assets and Identifies Threats and Vulnerabilities - The entity's risk identification and assessment process includes (1) identifying information assets, including physical devices and systems, virtual devices, software, data and data flows, external information systems, and organizational roles; (2) assessing the criticality of those information assets; (3) identifying the threats to the assets from intentional (including malicious) and unintentional acts and environmental events; and (4) identifying the vulnerabilities of the identified assets.",
    "function_name": "security_command_center_risk_assessment_mechanisms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_28",
    "description": "Considers Various Types of Fraud - The assessment of fraud considers fraudulent reporting, possible loss of assets, and corruption resulting from the various ways that fraud and misconduct can occur. Assesses Incentives and Pressures - The assessment of fraud risks considers incentives and pressures. Assesses Opportunities - The assessment of fraud risk considers opportunities for unauthorized acquisition,use, or disposal of assets, altering the entity’s reporting records, or committing other inappropriate acts. Assesses Attitudes and Rationalizations - The assessment of fraud risk considers how management and other personnel might engage in or justify inappropriate actions. Additional point of focus specifically related to all engagements using the trust services criteria: Considers the Risks Related to the Use of IT and Access to Information - The assessment of fraud risks includes consideration of threats and vulnerabilities that arise specifically from the use of IT and access to information.",
    "function_name": "iam_access_risk_assessment",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_29",
    "description": "Assesses Changes in the External Environment - The risk identification process considers changes to the regulatory, economic, and physical environment in which the entity operates. Assesses Changes in the Business Model - The entity considers the potential impacts of new business lines, dramatically altered compositions of existing business lines, acquired or divested business operations on the system of internal control, rapid growth, changing reliance on foreign geographies, and new technologies. Assesses Changes in Leadership - The entity considers changes in management and respective attitudes and philosophies on the system of internal control. Assess Changes in Systems and Technology - The risk identification process considers changes arising from changes in the entity’s systems and changes in the technology environment. Assess Changes in Vendor and Business Partner Relationships - The risk identification process considers changes in vendor and business partner relationships.",
    "function_name": "security_command_center_risk_identification_process_consider_environmental_changes",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_30",
    "description": "Assesses Results - Management and the board of directors, as appropriate, assess results of ongoing and separate evaluations. Communicates Deficiencies - Deficiencies are communicated to parties responsible for taking corrective action and to senior management and the board of directors, as appropriate. Monitors Corrective Action - Management tracks whether deficiencies are remedied on a timely basis.",
    "function_name": "security_command_center_monitor_corrective_action",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_31",
    "description": "Determines Dependency Between the Use of Technology in Business Processes and Technology General Controls - Management understands and determines the dependency and linkage between business processes, automated control activities, and technology general controls. Establishes Relevant Technology Infrastructure Control Activities - Management selects and develops control activities over the technology infrastructure, which are designed and implemented to help ensure the completeness, accuracy, and availability of technology processing. Establishes Relevant Security Management Process Controls Activities - Management selects and develops control activities that are designed and implemented to restrict technology access rights to authorized users commensurate with their job responsibilities and to protect the entity’s assets from external threats. Establishes Relevant Technology Acquisition, Development, and Maintenance Process Control Activities - Management selects and develops control activities over the acquisition, development, and maintenance of technology and its infrastructure to achieve management’s objectives.",
    "function_name": "iam_roles_access_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_32",
    "description": "Identifies and Manages the Inventory of Information Assets - The entity identifies, inventories, classifies, and manages information assets. Restricts Logical Access - Logical access to information assets, including hardware, data (at-rest, during processing, or in transmission), software, administrative authorities, mobile devices, output, and offline system components is restricted through the use of access control software and rule sets. Identifies and Authenticates Users - Persons, infrastructure and software are identified and authenticated prior to accessing information assets, whether locally or remotely. Considers Network Segmentation - Network segmentation permits unrelated portions of the entity's information system to be isolated from each other. Manages Points of Access - Points of access by outside entities and the types of data that flow through the points of access are identified, inventoried, and managed. The types of individuals and systems using each point of access are identified, documented, and managed. Restricts Access to Information Assets - Combinations of data classification, separate data structures, port restrictions, access protocol restrictions, user identification, and digital certificates are used to establish access control rules for information assets. Manages Identification and Authentication - Identification and authentication requirements are established, documented, and managed for individuals and systems accessing entity information, infrastructure and software. Manages Credentials for Infrastructure and Software - New internal and external infrastructure and software are registered, authorized, and documented prior to being granted access credentials and implemented on the network or access point. Credentials are removed and access is disabled when access is no longer required or the infrastructure and software are no longer in use. Uses Encryption to Protect Data - The entity uses encryption to supplement other measures used to protect data-at-rest, when such protections are deemed appropriate based on assessed risk. Protects Encryption Keys - Processes are in place to protect encryption keys during generation, storage, use, and destruction.",
    "function_name": "iam_user_identification_authentication_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_33",
    "description": "Prior to issuing system credentials and granting system access, the entity registers and authorizes new internal and external users whose access is administered by the entity. For those users whose access is administered by the entity, user system credentials are removed when user access is no longer authorized. Controls Access Credentials to Protected Assets - Information asset access credentials are created based on an authorization from the system's asset owner or authorized custodian. Removes Access to Protected Assets When Appropriate - Processes are in place to remove credential access when an individual no longer requires such access. Reviews Appropriateness of Access Credentials - The appropriateness of access credentials is reviewed on a periodic basis for unnecessary and inappropriate individuals with credentials.",
    "function_name": "iam_user_access_credential_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_34",
    "description": "Creates or Modifies Access to Protected Information Assets - Processes are in place to create or modify access to protected information assets based on authorization from the asset’s owner. Removes Access to Protected Information Assets - Processes are in place to remove access to protected information assets when an individual no longer requires access. Uses Role-Based Access Controls - Role-based access control is utilized to support segregation of incompatible functions.",
    "function_name": "iam_role_based_access_control_implementation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_35",
    "description": "Restricts Access — The types of activities that can occur through a communication channel (for example, FTP site, router port) are restricted. Protects Identification and Authentication Credentials — Identification and authentication credentials are protected during transmission outside its system boundaries. Requires Additional Authentication or Credentials — Additional authentication information or credentials are required when accessing the system from outside its boundaries. Implements Boundary Protection Systems — Boundary protection systems (for example, firewalls, demilitarized zones, and intrusion detection systems) are implemented to protect external access points from attempts and unauthorized access and are monitored to detect such attempts.",
    "function_name": "network_firewall_boundary_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_36",
    "description": "Restricts the Ability to Perform Transmission - Data loss prevention processes and technologies are used to restrict ability to authorize and execute transmission, movement and removal of information. Uses Encryption Technologies or Secure Communication Channels to Protect Data - Encryption technologies or secured communication channels are used to protect transmission of data and other communications beyond connectivity access points. Protects Removal Media - Encryption technologies and physical asset protections are used for removable media (such as USB drives and back-up tapes), as appropriate. Protects Mobile Devices - Processes are in place to protect mobile devices (such as laptops, smart phones and tablets) that serve as information assets.",
    "function_name": "storage_bucket_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_37",
    "description": "Restricts Application and Software Installation - The ability to install applications and software is restricted to authorized individuals. Detects Unauthorized Changes to Software and Configuration Parameters - Processes are in place to detect changes to software and configuration parameters that may be indicative of unauthorized or malicious software. Uses a Defined Change Control Process - A management-defined change control process is used for the implementation of software. Uses Antivirus and Anti-Malware Software - Antivirus and anti-malware software is implemented and maintained to provide for the interception or detection and remediation of malware. Scans Information Assets from Outside the Entity for Malware and Other Unauthorized Software - Procedures are in place to scan information assets that have been transferred or returned to the entity’s custody for malware and other unauthorized software and to remove any items detected prior to its implementation on the network.",
    "function_name": "compute_instance_software_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_38",
    "description": "Uses Defined Configuration Standards - Management has defined configuration standards. Monitors Infrastructure and Software - The entity monitors infrastructure and software for noncompliance with the standards, which could threaten the achievement of the entity's objectives. Implements Change-Detection Mechanisms - The IT system includes a change-detection mechanism (for example, file integrity monitoring tools) to alert personnel to unauthorized modifications of critical system files, configuration files, or content files. Detects Unknown or Unauthorized Components - Procedures are in place to detect the introduction of unknown or unauthorized components. Conducts Vulnerability Scans - The entity conducts vulnerability scans designed to identify potential vulnerabilities or misconfigurations on a periodic basis and after any significant change in the environment and takes action to remediate identified deficiencies on a timely basis.",
    "function_name": "security_command_center_change_detection_mechanism",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_39",
    "description": "Implements Detection Policies, Procedures, and Tools - Detection policies and procedures are defined and implemented, and detection tools are implemented on Infrastructure and software to identify anomalies in the operation or unusual activity on systems. Procedures may include (1) a defined governance process for security event detection and management that includes provision of resources; (2) use of intelligence sources to identify newly discovered threats and vulnerabilities; and (3) logging of unusual system activities. Designs Detection Measures - Detection measures are designed to identify anomalies that could result from actual or attempted (1) compromise of physical barriers; (2) unauthorized actions of authorized personnel; (3) use of compromised identification and authentication credentials; (4) unauthorized access from outside the system boundaries; (5) compromise of authorized external parties; and (6) implementation or connection of unauthorized hardware and software. Implements Filters to Analyze Anomalies - Management has implemented procedures to filter, summarize, and analyze anomalies to identify security events. Monitors Detection Tools for Effective Operation - Management has implemented processes to monitor the effectiveness of detection tools.",
    "function_name": "security_command_center_detection_tools_implemented",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_40",
    "description": "Responds to Security Incidents - Procedures are in place for responding to security incidents and evaluating the effectiveness of those policies and procedures on a periodic basis. Communicates and Reviews Detected Security Events - Detected security events are communicated to and reviewed by the individuals responsible for the management of the security program and actions are taken, if necessary. Develops and Implements Procedures to Analyze Security Incidents - Procedures are in place to analyze security incidents and determine system impact. Assesses the Impact on Personal Information - Detected security events are evaluated to determine whether they could or did result in the unauthorized disclosure or use of personal information and whether there has been a failure to comply with applicable lgcp or regulations. Determines Personal Information Used or Disclosed - When an unauthorized use or disclosure of personal information has occurred, the affected information is identified.",
    "function_name": "security_incidents_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.incidents().list(parent='organizations/12345')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_41",
    "description": "Assigns Roles and Responsibilities - Roles and responsibilities for the design, implementation, maintenance, and execution of the incident response program are assigned, including the use of external resources when necessary. Contains Security Incidents - Procedures are in place to contain security incidents that actively threaten entity objectives. Mitigates Ongoing Security Incidents - Procedures are in place to mitigate the effects of ongoing security incidents. Ends Threats Posed by Security Incidents - Procedures are in place to end the threats posed by security incidents through closure of the vulnerability, removal of unauthorized access, and other remediation actions. Restores Operations - Procedures are in place to restore data and business operations to an interim state that permits the achievement of entity objectives. Develops and Implements Communication Protocols for Security Incidents - Protocols for communicating security incidents and actions taken to affected parties are developed and implemented to meet the entity's objectives. Obtains Understanding of Nature of Incident and Determines Containment Strategy - An understanding of the nature (for example, the method by which the incident occurred and the affected system resources) and severity of the security incident is obtained to determine the appropriate containment strategy, including (1) a determination of the appropriate response time frame, and (2) the determination and execution of the containment approach. Remediates Identified Vulnerabilities - Identified vulnerabilities are remediated through the development and execution of remediation activities. Communicates Remediation Activities - Remediation activities are documented and communicated in accordance with the incident response program. Evaluates the Effectiveness of Incident Response - The design of incident response activities is evaluated for effectiveness on a periodic basis. Periodically Evaluates Incidents - Periodically, management reviews incidents related to security, availability, processing integrity, confidentiality, and privacy and identifies the need for system changes based on incident patterns and root causes. Communicates Unauthorized Use and Disclosure - Events that resulted in unauthorized use or disclosure of personal information are communicated to the data subjects, legal and regulatory authorities, and others as required. Application of Sanctions - The conduct of individuals and organizations operating under the authority of the entity and involved in the unauthorized use or disclosure of personal information is evaluated and, if appropriate, sanctioned in accordance with entity policies and legal and regulatory requirements.",
    "function_name": "security_incident_response_roles_assigned",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().getSecurityHealthAnalyticsSettings(name='organizations/123/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_42",
    "description": "Restores the Affected Environment - The activities restore the affected environment to functional operation by rebuilding systems, updating software, installing patches, and changing configurations, as needed. Communicates Information About the Event - Communications about the nature of the incident, recovery actions taken, and activities required for the prevention of future security events are made to management and others as appropriate (internal and external). Determines Root Cause of the Event - The root cause of the event is determined. Implements Changes to Prevent and Detect Recurrences - Additional architecture or changes to preventive and detective controls, or both, are implemented to prevent and detect recurrences on a timely basis. Improves Response and Recovery Procedures - Lessons learned are analyzed, and the incident response plan and recovery procedures are improved. Implements Incident Recovery Plan Testing - Incident recovery plan testing is performed on a periodic basis. The testing includes (1) development of testing scenarios based on threat likelihood and magnitude; (2) consideration of relevant system components from across the entity that can impair availability; (3) scenarios that consider the potential for the lack of availability of key personnel; and (4) revision of continuity plans and systems based on test results.",
    "function_name": "compute_instance_restore_functional_operation",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().reset(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_43",
    "description": "Manages Changes Throughout the System Lifecycle - A process for managing system changes throughout the lifecycle of the system and its components (infrastructure, data, software and procedures) is used to support system availability and processing integrity. Authorizes Changes - A process is in place to authorize system changes prior to development. Designs and Develops Changes - A process is in place to design and develop system changes. Documents Changes - A process is in place to document system changes to support ongoing maintenance of the system and to support system users in performing their responsibilities. Tracks System Changes - A process is in place to track system changes prior to implementation. Configures Software - A process is in place to select and implement the configuration parameters used to control the functionality of software. Tests System Changes - A process is in place to test system changes prior to implementation. Approves System Changes - A process is in place to approve system changes prior to implementation. Deploys System Changes - A process is in place to implement system changes. Identifies and Evaluates System Changes - Objectives affected by system changes are identified, and the ability of the modified system to meet the objectives is evaluated throughout the system development life cycle. Identifies Changes in Infrastructure, Data, Software, and Procedures Required to Remediate Incidents - Changes in infrastructure, data, software, and procedures required to remediate incidents to continue to meet objectives are identified, and the change process is initiated upon identification. Creates Baseline Configuration of IT Technology - A baseline configuration of IT and control systems is created and maintained. Provides for Changes Necessary in Emergency Situations - A process is in place for authorizing, designing, testing, approving and implementing changes necessary in emergency situations (that is, changes that need to be implemented in an urgent timeframe). Protects Confidential Information - The entity protects confidential information during system design, development, testing, implementation, and change processes to meet the entity’s objectives related to confidentiality. Protects Personal Information - The entity protects personal information during system design, development, testing, implementation, and change processes to meet the entity’s objectives related to privacy.",
    "function_name": "compute_instance_change_management_process",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_44",
    "description": "Measures Current Usage - The use of the system components is measured to establish a baseline for capacity management and to use when evaluating the risk of impaired availability due to capacity constraints. Forecasts Capacity - The expected average and peak use of system components is forecasted and compared to system capacity and associated tolerances. Forecasting considers capacity in the event of the failure of system components that constrain capacity. Makes Changes Based on Forecasts - The system change management process is initiated when forecasted usage exceeds capacity tolerances.",
    "function_name": "compute_instance_capacity_forecast",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_45",
    "description": "Identifies Confidential information - Procedures are in place to identify and designate confidential information when it is received or created and to determine the period over which the confidential information is to be retained. Protects Confidential Information from Destruction - Procedures are in place to protect confidential information from erasure or destruction during the specified retention period of the information",
    "function_name": "storage_objects_confidentiality_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "SOC2",
    "rule_id": "SOC2_46",
    "description": "Identifies Confidential Information for Destruction - Procedures are in place to identify confidential information requiring destruction when the end of the retention period is reached. Destroys Confidential Information - Procedures are in place to erase or otherwise destroy confidential information that has been identified for destruction.",
    "function_name": "storage_objects_confidential_destruction",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.delete_blob(bucket_name='bucket', blob_name='object')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP(S) Load Balancers. The rule is NON_COMPLIANT if one or more HTTP(S) Load Balancers do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP(S) Load Balancers have forwarding to an HTTP backend instead of redirection.",
    "function_name": "network_https_load_balancer_redirect_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between CDN edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN configuration if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_no_deprecated_ssl_protocols",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.cdn().get(project='proj', cdn='cdn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3",
    "description": "Checks if Google Cloud CDN configurations are using a minimum security policy and cipher suite of TLSv1.2 or greater for viewer connections. This rule is NON_COMPLIANT for a Cloud CDN configuration if the minimumTlsVersion is below TLSv1.2.",
    "function_name": "network_cdn_tls_minimum_version_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_4",
    "description": "Checks if Google Cloud CDN is using a custom SSL certificate and is configured to use SNI for serving HTTPS requests. The rule is NON_COMPLIANT if a custom SSL certificate is associated but the SSL support method uses a dedicated IP address.",
    "function_name": "network_cdn_custom_ssl_sni_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_5",
    "description": "Checks if Google Cloud CDN configurations are encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'originProtocol' is 'HTTP_ONLY' or if 'originProtocol' is 'MATCH_VIEWER' and 'viewerProtocol' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_encryption_to_custom_origins",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_6",
    "description": "Checks if your Google Cloud CDN configurations enforce HTTPS. The rule is NON_COMPLIANT if the value of `enableOnRedirect` is set to 'true' for the backend service, which indicates that HTTPS is allowed without any restrictions.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_7",
    "description": "Check if Google Cloud's Managed Service for Elasticsearch nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the cluster.",
    "function_name": "dataproc_cluster_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_8",
    "description": "Checks whether your Google Cloud HTTP(S) Load Balancer SSL proxy is using a custom SSL policy. The rule is only applicable if there are SSL proxies for the Google Cloud HTTP(S) Load Balancer.",
    "function_name": "network_load_balancer_ssl_proxy_custom_ssl_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_9",
    "description": "Checks if your Google Cloud Platform HTTPS Load Balancer SSL proxy uses a predefined policy. The rule is NON_COMPLIANT if the HTTPS SSL proxy listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_https_load_balancer_ssl_proxy_predefined_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_10",
    "description": "Checks if your Google Cloud HTTP(S) Load Balancer is configured with SSL or HTTPS. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_11",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_12",
    "description": "Checks whether connections to Google Cloud Elasticsearch (GCP equivalent of OpenSearch) are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch domain 'EnforceHttps' is not 'true' or is 'true' and 'TlsSecurityPolicy' is not in 'tlsPolicies'.",
    "function_name": "network_elasticsearch_enforce_https_tls_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_13",
    "description": "Check if Google Cloud's Elasticsearch Service (part of Google Cloud operations suite) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the cluster.",
    "function_name": "monitoring_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"monitoring.googleapis.com/elasticsearch/node_to_node_encryption\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_14",
    "description": "Checks if Google BigQuery datasets require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any BigQuery dataset has the parameter require_ssl not set to true.",
    "function_name": "bigquery_dataset_require_ssl",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).require_ssl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_15",
    "description": "Checks if Cloud Storage buckets have IAM policies that require requests to use HTTPS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_iam_https_required",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_16",
    "description": "Checks if a Cloud Storage bucket created with Google Cloud Storage uses the 'gs' protocol for endpoint connection. The rule is NON_COMPLIANT if the bucket protocol for endpoint connection supports 'gs'.",
    "function_name": "storage_bucket_endpoint_protocol_gs",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_17",
    "description": "Checks if Google Cloud firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_18",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter backendServiceType. The rule returns NON_COMPLIANT if the API does not match the backend type configured in the rule parameter.",
    "function_name": "network_endpoints_api_backend_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_19",
    "description": "Checks if a Google Cloud Endpoints service uses an SSL certificate. The rule is NON_COMPLIANT if the Google Cloud Endpoints service does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(project='proj', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_20",
    "description": "Checks if Google Cloud APIs (specifically Google Cloud Endpoints or API Gateway) are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud API if it is not associated with a security policy.",
    "function_name": "network_api_gateway_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_21",
    "description": "Checks if Google Cloud CDN distributions are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN distribution is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_22",
    "description": "Checks if the certificate associated with a Google Cloud CDN service is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN service uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_non_default",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_23",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/my-project/repos/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_24",
    "description": "Checks if Google Cloud Database Migration Service (Google Cloud DMS) replication instances are public. The rule is NON_COMPLIANT if the 'public' field is set to true.",
    "function_name": "dms_replication_instance_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_25",
    "description": "Checks if Google Cloud Firestore backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore backups are public.",
    "function_name": "firestore_backups_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_26",
    "description": "Checks if the Google Cloud VPN authorization rules authorize connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_27",
    "description": "Checks if the status of Google Cloud's Config Connector compliance is COMPLIANT or NON_COMPLIANT after the resource configuration execution on the instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "security_config_connector_status_compliant",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().configConnectors().get(name='projects/proj/locations/global/configConnectors/default')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_28",
    "description": "Checks if Google Cloud Platform (GCP) VPC Network Peering has 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a VPC Network Peering if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_vpc_peering_autoacceptsharedattachments_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_29",
    "description": "Checks if the Google Kubernetes Engine (GKE) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_gke_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_30",
    "description": "Checks if Google Cloud Elasticsearch (part of Google Cloud's operations tools) clusters are configured within a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch cluster endpoint is accessible publicly.",
    "function_name": "network_elasticsearch_vpc_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_31",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services configured with SSL certificates from Google-managed SSL certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service configured without a Google-managed SSL certificate or is configured with a certificate different from a Google-managed SSL certificate.",
    "function_name": "network_load_balancer_backend_ssl_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_32",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure that your Load Balancer is configured with an SSL or HTTPS proxy. This rule is applicable to External HTTPS Load Balancers only. This rule does not check Internal Load Balancers.",
    "function_name": "network_external_https_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_33",
    "description": "Checks if a Google Cloud Platform account has public access settings enabled for a Google Dataproc cluster. The rule is NON_COMPLIANT if PublicAccessPrevention is false, or if true, firewall rules allowing access on ports other than Port 22 are configured.",
    "function_name": "dataproc_cluster_public_access_prevention_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_34",
    "description": "Google Cloud Platform (GCP) does not have a direct equivalent of this rule, but a similar approach can be achieved by configuring firewall rules to restrict incoming SSH (port 22) access, thus effectively disabling incoming SSH connections similarly to the INCOMING_SSH_DISABLED rule in other systems. The service involved is Google Cloud Firewall.",
    "function_name": "network_firewall_ssh_incoming_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_35",
    "description": "Checks if Cloud NAT gateways are attached to an authorized Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if Cloud NAT gateways are attached to an unauthorized VPC.",
    "function_name": "network_nat_gateway_authorized_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_36",
    "description": "Checks if the Cloud Function IAM policy attached to the Cloud Function resource prohibits public access. If the IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_37",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_38",
    "description": "Checks if firewall rules for SSH (port 22) and RDP (port 3389) ingress traffic in Google Cloud Platform are unrestricted. The rule is NON_COMPLIANT if a firewall rule allows any source IP for these ports.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_39",
    "description": "Checks if a GCP Firewall Rule is configured with a user-defined action for fragmented packets. The rule is NON_COMPLIANT if the specified action for fragmented packets does not match the user-defined action.",
    "function_name": "network_firewall_rule_fragmented_packets_action_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_40",
    "description": "Check if GCP's VPC Service Controls security policies are associated with stateful or stateless rules. This rule is NON_COMPLIANT if no stateful or stateless rules are associated with the VPC Service Controls policy; else COMPLIANT if any one of the rule types exists.",
    "function_name": "network_vpc_service_controls_stateful_or_stateless_rules_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.vpcServiceControls().get(project='proj', service='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_41",
    "description": "Checks if a Google Cloud Platform (GCP) Firewall Rule contains rules. The rule is NON_COMPLIANT if there are no rules in a Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_42",
    "description": "Checks if there are public routes in the Google Cloud Platform (GCP) VPC subnet route table that point to a Cloud Router or NAT Gateway. The rule is NON_COMPLIANT if a route to an Internet Gateway (IGW) has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_vpc_subnet_no_public_routes",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj', filter='network eq my-network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_43",
    "description": "Checks if Google Cloud Search instances are in a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Cloud Search instance endpoint is public.",
    "function_name": "network_cloud_search_private_endpoint",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.instances().get(project='proj', zone='zone', instance='cloud_search_instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_44",
    "description": "Checks if there are any Google Cloud SQL instance firewall rules that are not the default firewall rules. The rule is NON_COMPLIANT if there are any firewall rules that are not the default firewall rules.",
    "function_name": "sql_instance_firewall_default_only",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_45",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'IPConfiguration.requireSSL' field is false and 'IPConfiguration.ipv4Enabled' is true in the instance configuration.",
    "function_name": "sql_instance_non_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_46",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset access configuration allows public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_47",
    "description": "Checks if Google Cloud Storage access points have block public access settings enabled. The rule is NON_COMPLIANT if block public access settings are not enabled for Cloud Storage access points.",
    "function_name": "storage_access_points_block_public_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_48",
    "description": "Checks if the required public access prevention settings are configured at the project level. The rule is only NON_COMPLIANT when the fields set below do not match the corresponding fields in the project settings.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_49",
    "description": "Checks if the required public access prevention settings are configured at the project level in Google Cloud Platform. The rule is NON_COMPLIANT if the configuration does not match the specified settings or defaults.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_50",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket-level settings allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_51",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule examines the bucket IAM policies, uniform bucket-level access settings, and object-level permissions.",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_52",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access by evaluating the Bucket IAM policies, Uniform bucket-level access, and the bucket ACL settings.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_53",
    "description": "Checks if a Google Cloud AI Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_notebook_instance_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_54",
    "description": "Checks if direct internet access is disabled for a Google AI Platform (formerly AI Platform Notebooks) instance. The rule is NON_COMPLIANT if an AI Platform notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebooks_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_55",
    "description": "Checks if a Private Google Access Point is created for each Google Virtual Private Cloud (Google VPC). The rule is NON_COMPLIANT if a Google VPC doesn't have a Private Google Access Point created for the service.",
    "function_name": "network_vpc_private_google_access_point_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_56",
    "description": "Checks if there are unused VPC Firewalls (equivalent to network ACLs). The rule is COMPLIANT if each VPC Firewall rule is associated with a subnet. The rule is NON_COMPLIANT if a VPC Firewall rule is not associated with a subnet.",
    "function_name": "network_firewall_associated_with_subnet",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_57",
    "description": "Checks if Private Google Access is enabled for the VPC in GCP. The rule is NON_COMPLIANT if Private Google Access is not enabled for the VPC, as it is necessary for Google services to communicate with private IPs.",
    "function_name": "network_vpc_private_google_access_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_58",
    "description": "Checks if Google Cloud firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_rules_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_59",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_60",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_61",
    "description": "Checks whether a Google Cloud Armor Security Policy contains any rules. This rule is NON_COMPLIANT if a Security Policy does not contain any rules.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_62",
    "description": "Checks if Google Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_63",
    "description": "Checks whether Google Cloud Armor security policy contains rules with conditions. This rule is COMPLIANT if at least one rule within the security policy contains conditions and NON_COMPLIANT otherwise.",
    "function_name": "compute_security_policy_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_64",
    "description": "Checks if a Google Cloud Armor Security Policy contains any security rules. The rule is NON_COMPLIANT if there are no security rules present within a Security Policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_65",
    "description": "Checks if a Google Cloud API Gateway API configuration is using Google Cloud Armor for security. The rule is NON_COMPLIANT if Google Cloud Armor is not used or if the utilized security policies do not match the specified rule parameters.",
    "function_name": "apigateway_api_config_use_cloud_armor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().apis().configs().get(name='projects/proj/locations/global/apis/api/configs/config')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_66",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_67",
    "description": "Checks if an API Gateway configuration has an SSL certificate associated with it. The rule is NON_COMPLIANT if the API Gateway does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_68",
    "description": "Checks if Google Cloud Endpoints APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Endpoints API if it is not associated with a security policy.",
    "function_name": "network_endpoints_associated_with_armor_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.endpoints().get(project='proj', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_69",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with either Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Google Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_70",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN service is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN service uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().get(project='proj', sslCertificate='cert_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_71",
    "description": "Checks if the Google Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/my-project/repos/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_72",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) connection profiles are public. The rule is NON_COMPLIANT if the 'public' field is set to true.",
    "function_name": "dms_connection_profiles_non_public",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_73",
    "description": "Checks if Google Cloud Firestore (Firestore) exports are public. The rule is NON_COMPLIANT if any Firestore exports are public.",
    "function_name": "firestore_exports_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().exportDocuments(name='projects/my-project/databases/(default)', body={}).execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_74",
    "description": "Checks if the Google Cloud VPN authorization policy allows connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_policy_restrict_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_75",
    "description": "Checks if the status of the Google Cloud Configuration Management compliance is COMPLIANT or NON_COMPLIANT after the configuration execution on the VM instance. The rule is compliant if the field status is COMPLIANT. For more information about configurations, see What is a configuration?",
    "function_name": "compute_instance_configuration_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_76",
    "description": "Checks if Google Cloud Platform (GCP) VPC Network Peering has 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a VPC Network Peering if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_vpc_peering_autoacceptsharedattachments_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_77",
    "description": "Checks if the Google Kubernetes Engine (GKE) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_78",
    "description": "Checks if Google Cloud Memorystore for Redis instances are configured with a custom VPC network. The rule is NON_COMPLIANT for a Memorystore instance if it is using the default VPC network.",
    "function_name": "network_memorystore_custom_vpc_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.instances().get(project='proj', instance='memorystore_instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_79",
    "description": "Checks if Google Cloud Elasticsearch Service (part of Google Cloud's managed services) instances are within a Virtual Private Cloud (VPC) network. The rule is NON_COMPLIANT if an Elasticsearch Service instance endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_80",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured to use certificates from Google Cloud Managed Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 listener that is configured without a Google-managed certificate or is configured with a certificate different from Google-managed certificates.",
    "function_name": "network_load_balancer_google_managed_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_81",
    "description": "Checks if the Classic Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, a frontend configuration with SSL should be set on your Classic Load Balancer. This rule is only applicable to Classic Load Balancers in GCP and does not apply to HTTP(S) Load Balancers.",
    "function_name": "network_classic_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_82",
    "description": "Checks if a Google Cloud account with Dataproc has block public access settings enabled. The rule is NON_COMPLIANT if BlockPublicHttps is false, or if true, there are firewall rules that allow traffic on ports other than Port 22 from the internet.",
    "function_name": "dataproc_cluster_block_public_access_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_83",
    "description": "The rule identifier 'INCOMING_SSH_DISABLED' indicates that incoming SSH connections are disabled, whereas the rule name 'restricted-ssh' implies a policy to restrict SSH access. In GCP, this can be achieved by using a firewall rule that denies incoming traffic on port 22 (the default SSH port).",
    "function_name": "network_firewall_incoming_ssh_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_84",
    "description": "In Google Cloud Platform, the equivalent of EC2 instances in a VPC is Compute Engine instances within a Virtual Private Cloud (VPC). The rule identifier for VPC configuration in GCP can vary, but the service utilized is primarily Google Compute Engine.",
    "function_name": "network_vpc_secure_configuration",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_85",
    "description": "Checks if Cloud NAT is configured for an authorized Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if Cloud NAT is configured for an unauthorized VPC.",
    "function_name": "network_vpc_cloud_nat_authorized",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_86",
    "description": "Checks if the Google Cloud Function IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_87",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_88",
    "description": "Checks if firewall rules for SSH (port 22) and RDP (port 3389) ingress traffic in Google Cloud Platform (GCP) allow unrestricted access. The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from any source IP (0.0.0.0/0) for ports 22 or 3389.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_89",
    "description": "Checks if a Google Cloud VPC firewall rule is configured with a user-defined action for fragmented packets. The rule is NON_COMPLIANT if the action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_firewall_fragmented_packets_user_defined_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_90",
    "description": "Check Google Cloud Armor security policy is associated with backend services, as this rule is NON_COMPLIANT if no backend services are associated with the Google Cloud Armor policy, otherwise COMPLIANT if any backend service exists.",
    "function_name": "network_backendservice_associated_with_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_91",
    "description": "In GCP, checks if a Google Cloud Armor Security Policy contains any rules. The policy is CONFORMANT if there are rules defined within the Google Cloud Armor Security Policy.",
    "function_name": "network_security_policy_rules_defined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_92",
    "description": "Checks if there are public routes in the route table to a Cloud Router or Forwarding Rule. The rule is NON_COMPLIANT if a route to an Internet Gateway has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_93",
    "description": "Checks if Google Cloud Search domains are in a Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Cloud Search domain endpoint is public.",
    "function_name": "network_cloud_search_domain_private",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_94",
    "description": "Checks if there are any Google Cloud SQL database instances that are using non-default network tags. The rule is NON_COMPLIANT if there are any Cloud SQL instances with network tags that are not the default ones.",
    "function_name": "sql_instances_default_network_tags_enforced",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_95",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration.requireSsl' field is false and the 'ipConfiguration.enabled' field is true in the instance configuration.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_96",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the 'access' field in the dataset configuration item includes any entities with 'role' set to 'READER' or 'WRITER' for 'allAuthenticatedUsers' or 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_97",
    "description": "Checks if Google BigQuery has VPC Service Controls enabled. The rule is NON_COMPLIANT if VPC Service Controls are not enabled or if the configuration.vpcServiceControls field is 'false'.",
    "function_name": "bigquery_datasets_vpc_service_controls_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id').vpcServiceControls"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_98",
    "description": "Checks if Google Cloud Storage (GCS) bucket access control settings have public access prevention enabled. The rule is NON_COMPLIANT if public access prevention settings are not enabled for GCS buckets.",
    "function_name": "storage_bucket_public_access_prevention_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.public_access_prevention"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_99",
    "description": "Verifies if the necessary public access prevention settings are configured at the organization level in Google Cloud Platform. Compliance is marked as NON_COMPLIANT when the specified settings do not align with the organization's configuration items.",
    "function_name": "iam_organization_public_access_prevention_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_100",
    "description": "Checks if the required identity and access management (IAM) policies are configured at the organization level. The rule is NON_COMPLIANT if the IAM policies do not match one or more settings from parameters (or default).",
    "function_name": "iam_organization_policies_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_101",
    "description": "Checks if Google Cloud Storage (GCS) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and the bucket's IAM settings allow public access.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_102",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, the bucket policy, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_103",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, bucket IAM policies, and object-level access control lists (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_104",
    "description": "Checks if a Google Cloud AI Platform Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_105",
    "description": "Checks if direct internet access is disabled for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_106",
    "description": "Checks if a Private Service Connection for the service provided in the rule parameter is created for each Google Cloud Virtual Private Cloud (GCP VPC). The rule is NON_COMPLIANT if a GCP VPC doesn't have a Private Service Connection created for the service.",
    "function_name": "network_vpc_private_service_connection_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_107",
    "description": "Checks if there are unused firewall rules. The rule is COMPLIANT if each firewall rule is associated with a network. The rule is NON_COMPLIANT if a firewall rule is not associated with a network.",
    "function_name": "network_firewall_associated_with_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_108",
    "description": "Checks if DNS resolution from the accepting/requesting VPC to private IP is enabled. The result is NON_COMPLIANT if DNS resolution from the accepting/requesting VPC to private IP is not enabled. This is equivalent to checking VPC Private DNS settings in GCP.",
    "function_name": "network_vpc_private_dns_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_109",
    "description": "Checks if firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_110",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud Platform are in operational status (UP). The rule is NON_COMPLIANT if one or both tunnels are not operational (DOWN).",
    "function_name": "network_vpn_tunnels_operational_status",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_111",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_112",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Cloud Armor security policy.",
    "function_name": "network_security_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_113",
    "description": "Checks whether a Google Cloud Armor Security Policy contains any rules. This rule is NON_COMPLIANT if a Security Policy does not contain any rules.",
    "function_name": "compute_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_114",
    "description": "Checks if Google Cloud Armor security policies contain any security rules. The rule is NON_COMPLIANT if there are no rules present within a Google Cloud Armor security policy.",
    "function_name": "network_google_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_115",
    "description": "Verifies if a Google Cloud Platform WAF (Web Application Firewall) regional rule contains conditions. The rule is considered COMPLIANT if it includes at least one condition and NON_COMPLIANT if it does not.",
    "function_name": "network_waf_rule_has_conditions",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.regionBackendServices().get(project='proj', region='region', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_116",
    "description": "Checks if a Google Cloud Armor Security Policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within a Security Policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_117",
    "description": "Checks if a Google Cloud API is using Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Google Cloud Armor security policy is not used or if the used security policy does not match what is listed in the rule parameter.",
    "function_name": "network_load_balancer_armor_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_118",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_119",
    "description": "Checks if an API Gateway in GCP uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_120",
    "description": "Checks if Google Cloud Platform (GCP) App Engine services are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a GCP App Engine service if it is not associated with a Cloud Armor security policy.",
    "function_name": "app_engine_service_cloud_armor_policy_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_121",
    "description": "Checks if Google Cloud CDN instances are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN instance is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_122",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default Google-managed SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_123",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/my-project/repos/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_124",
    "description": "Checks if Google Cloud Database Migration Service replication instances are public. The rule is NON_COMPLIANT if the PubliclyAccessible field is set to true.",
    "function_name": "datamigration_replicationinstance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_125",
    "description": "Checks if Google Cloud Firestore manual backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore manual backups are public.",
    "function_name": "firestore_backup_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().documents().list(parent='projects/proj/databases/(default)/documents')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_126",
    "description": "Checks if the Google Cloud VPN authorization rules allow connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_127",
    "description": "Checks if the status of the Google Cloud Deployment Manager deployment is DEPLOYED or NOT_DEPLOYED after execution on the instance. The rule is compliant if the field status is DEPLOYED. For more information about deployments, see What is a deployment?",
    "function_name": "deploymentmanager_deployment_status_deployed",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "deployment_manager_client.deployments().get(project='proj', deployment='deployment_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_128",
    "description": "Checks if Google Cloud Platform (GCP) Cloud Interconnect or Cloud VPN setups have 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a Cloud Interconnect or VPN if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_interconnect_vpn_autoacceptsharedattachments_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.interconnects().get(project='proj', interconnect='interconnect')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_129",
    "description": "Checks if the Google Kubernetes Engine (GKE) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_gke_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_130",
    "description": "Checks if Google Cloud Memorystore for Redis instances are configured with a custom VPC network. The rule is NON_COMPLIANT for a Redis instance if it is using the default VPC network.",
    "function_name": "network_redis_custom_vpc_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_131",
    "description": "Checks if Google Cloud's Google Cloud Search is configured within a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Google Cloud Search service endpoint is publicly accessible.",
    "function_name": "network_google_cloud_search_vpc_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_132",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services configured with valid SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a valid SSL certificate or is configured with a certificate that is not from Google Cloud Certificate Manager.",
    "function_name": "network_load_balancer_backend_ssl_certificate_validity",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_133",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS listener with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers and does not check other services.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_134",
    "description": "Checks if a Google Cloud project has firewall rules that block public access settings enabled. The rule is NON_COMPLIANT if allowTcp is true for any rule with a port other than 22 or if there are any ingress rules that allow access from all IP addresses (0.0.0.0/0).",
    "function_name": "network_firewall_block_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_135",
    "description": "In Google Cloud Platform (GCP), the equivalent of the rule identifier 'INCOMING_SSH_DISABLED' and rule name 'restricted-ssh' could be represented through firewall rules that deny incoming SSH traffic. This can be accomplished by setting up an ingress rule that specifically denies traffic on port 22 for SSH access, effectively restricting SSH access to instances.",
    "function_name": "network_firewall_ssh_ingress_denied",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body={'name': 'deny-ssh', 'network': 'global/networks/default', 'direction': 'INGRESS', 'priority': 1000, 'targetTags': ['ssh-denied'], 'allowed': [], 'denied': [{'IPProtocol': 'tcp', 'ports': ['22']}]}).execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_136",
    "description": "This rule identifies Google Cloud Platform (GCP) virtual machine instances that are located within a Virtual Private Cloud (VPC) network. The equivalent rule identifier for this purpose is 'INSTANCES_IN_VPC', matching the functionality of the 'ec2-instances-in-vpc' rule from AWS.",
    "function_name": "compute_instance_in_vpc",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_137",
    "description": "Checks if Cloud NAT gateways are associated with an authorized Google Cloud VPC. The rule is NON_COMPLIANT if Cloud NAT gateways are associated with an unauthorized VPC.",
    "function_name": "network_nat_gateway_authorized_vpc_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_138",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function prohibits public access. If the Cloud Function IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_139",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_140",
    "description": "Checks if Google Cloud Firewall rules for SSH (port 22) and RDP (port 3389) ingress traffic are unrestricted. The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from all IP addresses (0.0.0.0/0) for these ports.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_141",
    "description": "Checks if a Google Cloud VPC firewall policy is configured with a user-defined stateless default action for fragmented packets. The rule is NON_COMPLIANT if the stateless default action for fragmented packets does not match with the user-defined default action.",
    "function_name": "network_vpc_firewall_stateless_default_action_fragmented_packets_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_142",
    "description": "Check if GCP Firewall Rules are associated with stateful or stateless rules. The rule is NON_COMPLIANT if no associated stateful or stateless rules exist with the Firewall Rules, otherwise COMPLIANT if any rule exists.",
    "function_name": "network_firewall_rules_associated_with_stateful_or_stateless",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_143",
    "description": "Verifies if a Google Cloud Platform (GCP) Firewall Rule contains firewall rules. The rule is NON_COMPLIANT if there are no rules in a GCP Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_144",
    "description": "Checks if there are public routes in the route table to a Cloud VPN or Cloud Router. The rule is NON_COMPLIANT if a route has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_route_no_public_cidr",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_145",
    "description": "Checks if Google Cloud Search service instances are within a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Search service endpoint is public.",
    "function_name": "network_searchservice_private_endpoint",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_146",
    "description": "Checks if there are any Google Cloud SQL database users that are not the default users. The rule is NON_COMPLIANT if there are any database users that are not the default users.",
    "function_name": "sql_database_users_default_only",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_service.users().list(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_147",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'authorizedNetworks' field allows public IP addresses in the instance configuration.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_148",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset access configuration includes any entries that allow public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_149",
    "description": "Checks if Google BigQuery dataset has 'authorizedNetworks' enabled. The rule is NON_COMPLIANT if 'authorizedNetworks' is not enabled or if the configuration.authorizedNetworks field is 'false'.",
    "function_name": "bigquery_dataset_authorized_networks_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_150",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access (similar to S3 block public access) enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_151",
    "description": "Verifies if the required public access prevention settings are configured at the project level in Google Cloud Platform. The rule is considered NON_COMPLIANT when the public access settings do not match the specified criteria.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_152",
    "description": "Verifies if the required public access prevention settings are configured at the project or organization level in Google Cloud Platform. The rule is NON_COMPLIANT if the configuration does not align with the specified settings or defaults.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_153",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a storage bucket is not listed in the excludedPublicBuckets parameter and the bucket-level permissions allow public access.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_154",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, the bucket policy, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_155",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform Bucket-Level Access settings, bucket policies, and access control lists (ACLs).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_156",
    "description": "Checks if a Google AI Platform Notebook instance is launched within a VPC network or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet is not included in the list of approved subnets.",
    "function_name": "ai_platform_notebook_vpc_subnet_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_157",
    "description": "Checks if direct internet access is disabled for a Google AI Platform (formerly known as AI Platform Notebooks) instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_158",
    "description": "Checks if a Private Service Connection for the service provided in the rule parameter is created for each Google Virtual Private Cloud (GCP VPC). The rule is NON_COMPLIANT if a GCP VPC doesn't have a Private Service Connection created for the service.",
    "function_name": "network_vpc_private_service_connection_exists",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_159",
    "description": "Checks if there are unused Firewall Rules. The rule is COMPLIANT if each Firewall Rule is associated with a VPC network. The rule is NON_COMPLIANT if a Firewall Rule is not associated with a VPC network.",
    "function_name": "network_firewall_associated_with_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_160",
    "description": "Checks if DNS resolution from accepter/requester VPC to private IP is enabled. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled in Google Cloud Platform (GCP).",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_161",
    "description": "Checks if firewall rules in GCP allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_unrestricted_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_162",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud are in ESTABLISHED state. The rule is NON_COMPLIANT if one or both tunnels are in DOWN state.",
    "function_name": "network_vpn_tunnels_established_state",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_163",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_164",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_165",
    "description": "Checks whether a Google Cloud Armor security policy contains any security rules. This rule is NON_COMPLIANT if a security policy does not contain any security rules.",
    "function_name": "network_security_policy_contains_security_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_166",
    "description": "Checks if Cloud Armor Security Policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor Security Policy.",
    "function_name": "network_security_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_167",
    "description": "Checks whether Google Cloud Armor security policy rules contain conditions. This rule is COMPLIANT if the security policy rule contains at least one condition and NON_COMPLIANT otherwise.",
    "function_name": "compute_security_policy_rules_conditions_present",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_168",
    "description": "Verifies if a Google Cloud Armor security policy contains any security rules. The policy is considered NON_COMPLIANT if there are no security rules present within it.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_169",
    "description": "Checks if a Google Cloud API Gateway API deployment is using Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Google Cloud Armor policy is not used or if the used policy does not match what is specified in the rule parameter.",
    "function_name": "apigateway_deployment_armor_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().apis().deployments().get(name='projects/proj/locations/global/apis/api/deployments/deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_170",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpoint_configuration_type. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_171",
    "description": "Checks if Google Cloud Memorystore instances are configured with a custom subnet. The rule is NON_COMPLIANT for a Memorystore instance if it is using the default subnet.",
    "function_name": "memorystore_instance_custom_subnet_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_172",
    "description": "The rule identifier (INSTANCES_IN_VPC) for Google Cloud Platform corresponds to the equivalent resource of Google Compute Engine instances within a Virtual Private Cloud (VPC), similar to EC2 instances in Amazon Web Services VPC. In GCP, this would involve the configuration of firewall rules and network settings within a VPC for Google Compute Engine instances.",
    "function_name": "network_vpc_instances_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_173",
    "description": "Checks if Cloud NAT is configured for a Google Cloud VPC network. The rule is NON_COMPLIANT if Cloud NAT is not configured for an authorized VPC network.",
    "function_name": "network_vpc_cloud_nat_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_174",
    "description": "Checks if there are public routes in the route table to a Cloud Router or VPN Gateway (equivalent to an Internet Gateway in AWS). The rule is NON_COMPLIANT if there is a route to a Cloud Router or VPN Gateway with a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_cidr_to_cloud_router_or_vpn_gateway",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj', filter='nextHopGateway:(cloudRouter OR vpnGateway) AND (destRange=0.0.0.0/0 OR destRange=::/0)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_175",
    "description": "Checks if BigQuery has 'VPC Service Controls' enabled. The rule is NON_COMPLIANT if 'VPC Service Controls' are not enabled or if the configuration.vpcServiceControls field is 'false'.",
    "function_name": "bigquery_datasets_vpc_service_controls_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).vpc_service_controls"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_176",
    "description": "Checks if a Google AI Platform Notebooks instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebooks_instance_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_177",
    "description": "Checks if DNS resolution from requester VPC to private IP is enabled in Google Cloud Platform. The rule is NON_COMPLIANT if DNS resolution is not enabled.",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_178",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud Platform are in 'ACTIVE' status. The rule is NON_COMPLIANT if one or both tunnels are in 'DOWN' or 'DISABLED' status.",
    "function_name": "network_vpn_tunnels_active_status",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_179",
    "description": "Checks if a Google Cloud Endpoints API is using Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Google Cloud Armor security policy is not used or if the used Google Cloud Armor policy does not match what is specified in the rule parameter.",
    "function_name": "network_endpoints_enforce_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_180",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_181",
    "description": "Verifies if a Google Cloud Endpoints service has an associated SSL certificate. The rule is NON_COMPLIANT if the Google Cloud Endpoints service does not have a valid SSL certificate configured for its API.",
    "function_name": "endpoints_service_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_182",
    "description": "Checks if Google Cloud Endpoints APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Endpoints API if it is not associated with a Cloud Armor security policy.",
    "function_name": "network_endpoints_associated_with_cloud_armor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_183",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Google Cloud CDN is not associated with a Google Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_184",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_185",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_186",
    "description": "Checks if Google Cloud SQL instances are publicly accessible. The rule is NON_COMPLIANT if the 'Authorized networks' field is set to allow public IP addresses.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_187",
    "description": "Checks if Google Cloud Firestore manual backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore manual backups are public.",
    "function_name": "firestore_backup_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().documents().list(parent='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_188",
    "description": "Checks if the GCP VPN authorization rules authorize connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_189",
    "description": "Checks if the status of the GCP Compute Engine instance's maintenance and compliance with the desired state (as configured with Instance Template and Managed Instance Groups) is 'HEALTHY' or 'UNHEALTHY' after the operation execution on the instance. The rule is compliant if the health status is 'HEALTHY'. For more information about instance groups, see Instance Groups and Autoscaling in GCP.",
    "function_name": "compute_instance_health_healthy",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_190",
    "description": "Checks if Google Cloud Platform (GCP) Cloud Interconnect connections have 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a Cloud Interconnect connection if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_interconnect_autoacceptsharedattachments_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.interconnects().get(project='proj', interconnect='interconnect_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_191",
    "description": "Checks if the Google Kubernetes Engine (GKE) cluster endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_192",
    "description": "Checks if Google Cloud's Elasticsearch (via Google Cloud Marketplace or third-party offering) is deployed within a Virtual Private Cloud (VPC) network. The rule is NON_COMPLIANT if the Elasticsearch domain endpoint is public.",
    "function_name": "network_elasticsearch_private_endpoint",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_193",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backends configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backends_use_gcm_ssl_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_194",
    "description": "Checks if the External HTTPS Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure an HTTPS or SSL proxy listener is configured with your External Load Balancer. This rule is specifically applicable to External HTTPS Load Balancers and does not check Internal Load Balancers or TCP/UDP Load Balancers.",
    "function_name": "network_external_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_195",
    "description": "Checks if a Google Cloud account has block public access settings enabled for Google Dataproc. The rule is NON_COMPLIANT if BlockPublicAccess is false, or if true, firewall rules allow traffic on ports other than Port 22.",
    "function_name": "dataproc_cluster_block_public_access_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_196",
    "description": "The rule identifier INCOMING_SSH_DISABLED indicates a policy to disable incoming SSH access, while the rule name restricted-ssh refers to the specific rule implemented within a firewall to restrict SSH connections. In Google Cloud Platform (GCP), this is achieved using 'Firewall Rules' to manage network access, specifically by configuring a firewall rule to deny incoming traffic on port 22, which is the default port for SSH.",
    "function_name": "network_firewall_ssh_incoming_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body={'name': 'deny-ssh', 'network': 'global/networks/default', 'direction': 'INGRESS', 'priority': 1000, 'targetTags': ['ssh-deny'], 'allowed': [], 'denied': [{'IPProtocol': 'tcp', 'ports': ['22']}]}).execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_197",
    "description": "Checks if internet access configurations are associated with an authorized Virtual Private Cloud (VPC) in Google Cloud Platform (GCP). The rule is NON_COMPLIANT if internet access configurations are linked to an unauthorized VPC.",
    "function_name": "network_vpc_authorized_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_198",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_199",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_200",
    "description": "Checks if the default ports for SSH (22) and RDP (3389) ingress traffic in Google Cloud Platform (GCP) firewall rules are unrestricted. The rule is NON_COMPLIANT if a firewall rule allows ingress from any source IP address on these ports.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_201",
    "description": "Checks if a Google Cloud VPC Firewall rule is configured with a user-defined default action for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_firewall_fragmented_packets_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_202",
    "description": "Check if Google Cloud Platform (GCP) Firewall Policy has associated rules. This rule is NON_COMPLIANT if no ingress or egress rules are associated with the Firewall Policy; otherwise, it is COMPLIANT if any rule exists.",
    "function_name": "network_firewall_policy_has_associated_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_203",
    "description": "Verifies whether a Serverless VPC Access connector has associated Serverless services. The connector is NON_COMPLIANT if there are no services linked to it.",
    "function_name": "network_vpc_connector_associated_services",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.connectors().get(project='proj', location='location', connector='connector')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_204",
    "description": "Checks if there are public routes in the VPC route table to an Internet Gateway. The rule is NON_COMPLIANT if a route to an IGW has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_vpc_routes_no_public_igw",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_205",
    "description": "Checks if Google Cloud's Elasticsearch Service (or a similar managed service) domains are in a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch Service domain endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_206",
    "description": "Checks if there are any Google Cloud SQL instances that are not using the default network and firewall settings. The rule is NON_COMPLIANT if there are any Cloud SQL instances not configured with the default settings.",
    "function_name": "sql_instances_default_network_firewall_settings",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_207",
    "description": "Checks if Cloud SQL instances in Google Cloud Platform (GCP) are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration' field has 'requireSsl' set to false or 'authorizedNetworks' is empty, indicating the instance is accessible from public IPs.",
    "function_name": "sql_instance_non_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_208",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset's access controls allow public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_209",
    "description": "Checks if Google BigQuery reservation has 'enableCapacityCommitment' enabled. The rule is NON_COMPLIANT if 'enableCapacityCommitment' is not enabled or if the configuration.enableCapacityCommitment field is 'false'.",
    "function_name": "bigquery_reservation_capacity_commitment_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_reservation(project='proj', reservation_id='res_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_210",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform access controls enabled. The rule is NON_COMPLIANT if uniform access controls are not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_controls_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_211",
    "description": "Checks if the required IAM policies for public access are configured properly at the project level. The rule is only NON_COMPLIANT when the IAM roles and permissions do not match the required configurations as specified.",
    "function_name": "iam_project_public_access_policies_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_212",
    "description": "Verifies that the necessary public access prevention configurations are established at the organization level. The rule is NON_COMPLIANT if the settings do not align with the specified parameters or default configurations.",
    "function_name": "iam_organization_public_access_prevention_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_213",
    "description": "Checks if Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_214",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the 'Uniform Bucket-Level Access' settings, the bucket IAM policies, and the bucket access control lists (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_215",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule verifies the Uniform Bucket-Level Access settings, bucket IAM policies, and ACLs.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_216",
    "description": "Checks if a Google AI Platform Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_217",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebooks instance. The rule is NON_COMPLIANT if an AI Platform Notebooks instance is internet-enabled.",
    "function_name": "ai_platform_notebooks_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_218",
    "description": "Checks if a Private Service Connection for the service provided in the rule parameter is created for each Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Google Cloud VPC doesn't have a Private Service Connection created for the service.",
    "function_name": "network_vpc_private_service_connection_required",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_219",
    "description": "Checks if there are unused Firewall Rules. The rule is COMPLIANT if each Firewall Rule is associated with a target resource. The rule is NON_COMPLIANT if a Firewall Rule is not associated with any target resource.",
    "function_name": "network_firewall_rule_association_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_220",
    "description": "Checks if DNS resolution from accepted/requester VPC to private IP is enabled in Google Cloud Platform. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled.",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_221",
    "description": "Checks if firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_222",
    "description": "Checks if both Cloud VPN tunnels provided by Google Cloud Platform (GCP) are in 'RUNNING' state. The rule is NON_COMPLIANT if one or both tunnels are in 'FAILED' state.",
    "function_name": "network_vpn_tunnels_running_state",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_223",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_224",
    "description": "Checks if a Google Cloud Armor security policy has any rules configured. The policy is NON_COMPLIANT if no rules are present within the Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_225",
    "description": "Checks whether a Cloud Armor security policy contains any security rules. This rule is NON_COMPLIANT if a security policy does not contain any security rule.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_226",
    "description": "Checks if Cloud Armor security policy rule groups contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy rule group.",
    "function_name": "network_cloud_armor_policy_rule_presence",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_227",
    "description": "Checks whether Google Cloud Armor security policy contains rules with conditions. This policy is COMPLIANT if the security policy contains at least one rule with conditions and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_contains_conditions",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_228",
    "description": "Checks if a Google Cloud Armor security policy contains any rules or rule groups. The policy is considered NON_COMPLIANT if there are no rules or rule groups present within the security policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_229",
    "description": "Checks if a Google Cloud VPC firewall policy is configured with a user-defined ruleset for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_vpc_firewall_policy_fragmented_packets_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_230",
    "description": "Checks if a Google Cloud Platform (GCP) firewall policy is configured with a user-defined default action for traffic. This rule is NON_COMPLIANT if the default action for traffic does not match the user-defined action.",
    "function_name": "network_firewall_policy_user_defined_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_231",
    "description": "Check if GCP Firewall Rule is associated with at least one target (such as instance tags or IP ranges). This rule is NON_COMPLIANT if no targets are associated with the Firewall Rule, else COMPLIANT if at least one target exists.",
    "function_name": "network_firewall_rule_has_targets",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_232",
    "description": "Checks if a Google Cloud API Gateway API is using Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud Armor security policy is not used or if the used security policy does not match what is listed in the rule parameter.",
    "function_name": "network_api_gateway_uses_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.api_gateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_233",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpointConfigurationType. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_234",
    "description": "Checks if Google Cloud Memorystore instances are configured with a custom VPC subnet. The rule is NON_COMPLIANT for a Memorystore instance if it is using the default VPC subnet.",
    "function_name": "network_memorystore_custom_vpc_subnet",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.instances().get(project='proj', instance='memorystore_instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_235",
    "description": "The rule identifier for instances in VPC in GCP is different from its rule name, similar to AWS's INSTANCES_IN_VPC and ec2-instances-in-vpc.",
    "function_name": "network_vpc_instances_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_236",
    "description": "Checks if Cloud Routers with internet access are associated with an authorized Virtual Private Cloud (VPC) Network. The rule is NON_COMPLIANT if Cloud Routers with internet access are associated with an unauthorized VPC Network.",
    "function_name": "network_cloud_router_authorized_vpc_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_237",
    "description": "Checks if there are public routes in the route table to a Cloud Internet Engine (CIE). The rule is NON_COMPLIANT if a route to a CIE has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_route_no_public_cie",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_238",
    "description": "Checks if Google BigQuery has 'VPC Service Controls' enabled. The rule is NON_COMPLIANT if 'VPC Service Controls' are not enabled for the BigQuery instance or if the configuration.vpcServiceControls field is 'false'.",
    "function_name": "bigquery_datasets_vpc_service_controls_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id').vpcServiceControls"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_239",
    "description": "Checks if a Google AI Platform Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_240",
    "description": "Checks if DNS resolution from accepter/requester VPC to private IP is enabled. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled in Google Cloud Platform (GCP).",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_241",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud Platform (GCP) are in 'ACTIVE' status. The rule is NON_COMPLIANT if one or both tunnels are in 'DOWN' status.",
    "function_name": "network_vpn_tunnels_active_status",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_242",
    "description": "Checks if Google Cloud Compute Instance Templates are set to assign public IP addresses to Network Interfaces. The rule is NON_COMPLIANT if the default version of a Compute Instance Template has at least 1 Network Interface with 'accessConfig' set to 'true' for assigning a public IP.",
    "function_name": "compute_instance_template_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instanceTemplates().get(project='proj', instanceTemplate='template')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_243",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods are configured to share a host's process namespace with their containers. The rule is NON_COMPLIANT if the HostPID parameter is set to 'true'.",
    "function_name": "container_pod_hostpid_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_244",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpointConfigurationType. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_245",
    "description": "Checks if an API Gateway stage uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway stage does not have an associated SSL certificate.",
    "function_name": "apigateway_stage_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_246",
    "description": "Checks if Google Cloud APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud API if it is not associated with a Cloud Armor security policy.",
    "function_name": "network_api_associated_with_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_247",
    "description": "Verifies if Google Cloud CDN is associated with Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Cloud Armor policy.",
    "function_name": "network_cdn_cloud_armor_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_248",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_249",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/my-project/repos/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_250",
    "description": "Checks if Google Cloud Database Migration Service (Cloud DMS) private services are exposed to the public. The rule is NON_COMPLIANT if the equivalent public access setting is enabled.",
    "function_name": "dms_private_service_no_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_251",
    "description": "Checks if Google Cloud Firestore or Google Cloud Spanner backups are public. The rule is NON_COMPLIANT if any Firestore or Spanner backups are public.",
    "function_name": "firestore_spanner_backups_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().backups().list(parent='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_252",
    "description": "Checks if the Google Cloud Platform (GCP) Identity-Aware Proxy (IAP) settings allow access for all users. The rule is NON_COMPLIANT if 'accessLevel' is set to 'allUsers'.",
    "function_name": "iap_settings_restrict_access_level",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "iap_client.projects().iapWeb().services().getIamPolicy(resource='projects/project-id/iap_web/service-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_253",
    "description": "Checks if the status of the Google Cloud Config Sync association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance. The rule is compliant if the field status is COMPLIANT. For more information about associations in GCP, see Config Sync documentation.",
    "function_name": "compute_instance_config_sync_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_254",
    "description": "Checks if Google Cloud Platform (GCP) Cloud VPN has 'AutoTunnel' enabled. The rule is NON_COMPLIANT for a Cloud VPN if 'AutoTunnel' is set to 'enable'.",
    "function_name": "network_vpn_autotunnel_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_255",
    "description": "Checks if the Google Kubernetes Engine (GKE) cluster endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_256",
    "description": "Checks if Google Cloud Elasticsearch clusters (via Google Cloud Marketplace or a self-managed deployment) are within a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch cluster endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_257",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without an SSL certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_258",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, an HTTPS load balancer should be configured. This rule is specifically applicable to Google Cloud Load Balancers and not to any other load balancing options.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_259",
    "description": "Checks if an account with Google Cloud Dataproc has block public access settings enabled. The rule is NON_COMPLIANT if the blockPublicAccess configuration is false or if true, ports other than Port 22 are listed in the allowedFirewallRules.",
    "function_name": "dataproc_cluster_block_public_access_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_260",
    "description": "In Google Cloud Platform (GCP), the equivalence for the incoming SSH policy that disables incoming SSH traffic can be achieved using Firewall Rules. Specifically, you would create a firewall rule that denies TCP traffic on port 22 (the default SSH port) to restrict SSH access for instances.",
    "function_name": "network_firewall_rule_deny_ssh",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body={'name': 'deny-ssh', 'network': 'global/networks/default', 'direction': 'INGRESS', 'priority': 1000, 'targetTags': ['ssh-deny'], 'allowed': [], 'denied': [{'IPProtocol': 'tcp', 'ports': ['22']}]}).execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_261",
    "description": "Checks if Cloud Routers are attached to an authorized Google Cloud VPC network. The rule is NON_COMPLIANT if Cloud Routers are attached to an unauthorized VPC network.",
    "function_name": "network_cloud_router_authorized_vpc_attachment",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_262",
    "description": "Checks if the Cloud Functions IAM policy attached to the Cloud Function prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "iam_cloud_function_policy_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_263",
    "description": "Checks if a Google Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_264",
    "description": "Checks if default ports for SSH (22) and RDP (3389) ingress traffic for Google Cloud Platform firewall rules is unrestricted. The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from any source IP address on ports 22 or 3389.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_265",
    "description": "Checks if a GCP Firewall Rule is configured with a user-defined default action for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined action.",
    "function_name": "network_firewall_rule_fragmented_packets_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_266",
    "description": "Check if Google Cloud Firewall policy is associated with stateful or stateless rules. This rule is NON_COMPLIANT if no stateful or stateless rules are associated with the Firewall policy, else COMPLIANT if any one of the rule types exists.",
    "function_name": "network_firewall_policy_stateful_or_stateless_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_267",
    "description": "Checks if a GCP Firewall Rule contains rules. The rule is NON_COMPLIANT if there are no rules in a Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_268",
    "description": "Checks if there are public routes in the route table to a Cloud Router (GCP equivalent). The rule is NON_COMPLIANT if a route to a Cloud Router has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_cloud_router",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_269",
    "description": "Checks if Google Cloud's Elasticsearch (managed) instances are in a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch instance endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_270",
    "description": "Checks if there are any Google Cloud SQL database instances that do not use the default Cloud SQL settings. The rule is NON_COMPLIANT if there are any database instances not configured with the default settings.",
    "function_name": "sql_database_instances_default_settings_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_271",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration' field's 'authorizedNetworks' array is not empty, indicating that the instance has been configured to allow connections from public IP addresses.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_272",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the `access` field contains an entry with `specialGroup` set to 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_273",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access enabled to block public access settings. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_274",
    "description": "Verifies if the necessary IAM permissions are properly configured at the project level in GCP. The rule is marked as NON_COMPLIANT when the assigned roles do not align with the expected IAM policy configurations.",
    "function_name": "iam_project_roles_configured",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_275",
    "description": "Checks if the required public access settings are configured at the project level. The rule is NON_COMPLIANT if the IAM policy does not restrict public access appropriately based on the specified parameters or defaults.",
    "function_name": "iam_project_public_access_restricted",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_276",
    "description": "Checks if Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_277",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Bucket Policy Only settings, uniform bucket-level access, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_278",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, the bucket IAM policies, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_279",
    "description": "Checks if a Google Cloud AI Platform Notebooks instance is launched within a Virtual Private Cloud (VPC) network or within a list of approved subnets. The rule is NON_COMPLIANT if an AI Platform Notebooks instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "network_ai_platform_notebooks_vpc_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_280",
    "description": "Checks if direct internet access is disabled for a Google Cloud Vertex AI Workbench instance. The rule is NON_COMPLIANT if the Vertex AI Workbench instance is internet-enabled.",
    "function_name": "vertex_ai_workbench_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_281",
    "description": "Checks if a Private Service Access connection is created for each Google Cloud Virtual Private Cloud (GCP VPC). The rule is NON_COMPLIANT if a GCP VPC doesn't have a Private Service Access connection created for the service.",
    "function_name": "network_vpc_private_service_access_required",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_282",
    "description": "Checks if there are unused firewall rules in Google Cloud Platform (GCP). The rule is COMPLIANT if each firewall rule is associated with a VPC network. The rule is NON_COMPLIANT if a firewall rule is not associated with a VPC network.",
    "function_name": "network_firewall_associated_with_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_283",
    "description": "Checks if Google Cloud firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_284",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is considered NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_285",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Cloud Armor security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_286",
    "description": "Checks whether a GCP Web Application Firewall (WAF) contains any firewall rules. This rule is NON_COMPLIANT if a WAF does not contain any firewall rule.",
    "function_name": "network_waf_firewall_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj', filter='name=waf-firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_287",
    "description": "Checks if Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_288",
    "description": "Checks whether the Google Cloud Armor security policy contains rules with match conditions. This rule is COMPLIANT if the security policy contains at least one match condition and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_match_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_289",
    "description": "Checks if a GCP Cloud Armor security policy contains any security rules. The policy is NON_COMPLIANT if there are no security rules present within a Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_security_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_290",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' is not present in the API configuration.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_291",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_292",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_293",
    "description": "Checks if a Google Cloud Platform (GCP) Cloud Run service has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'log level' is neither ERROR nor ALL.",
    "function_name": "cloud_run_service_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_294",
    "description": "Checks if Google Cloud Load Balancers (GCLB) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if GCLB Desync mitigation mode does not match with user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_295",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging configured.",
    "function_name": "network_cdn_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_296",
    "description": "Checks if at least one Google Cloud Audit Log is logging Google Cloud Storage (GCS) data access events for all GCS buckets. The rule is NON_COMPLIANT if there are no logs recording GCS data access events.",
    "function_name": "logging_auditlog_gcs_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_297",
    "description": "Verifies if Google Cloud Monitoring alerts have an action configured for ACTIVE, INACTIVE, or NO_DATA states. Optionally checks if any actions correspond to a specific notification channel. The rule is considered NON_COMPLIANT if there is no action specified for the alert or optional parameter.",
    "function_name": "monitoring_alerts_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_298",
    "description": "Checks if a resource type has a Google Cloud Monitoring alert policy for the named metric. For resource types, you can specify Compute Engine instances, Cloud Storage buckets, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the named metric has a resource ID and an alert policy in Google Cloud Monitoring.",
    "function_name": "monitoring_alert_policy_exists_for_metric",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_299",
    "description": "In GCP, the equivalence for ensuring logging is enabled is the 'Cloud Audit Logs' which serves a similar purpose as AWS CloudTrail. The rule can be compared to checking if 'Audit Logging' is enabled for the relevant services to track activity.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_300",
    "description": "Checks if a Google Cloud Build configuration has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_configuration_log_option_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_301",
    "description": "Checks if logging is enabled with a valid severity level for Cloud SQL database events in Google Cloud. The rule is NON_COMPLIANT if logging is not enabled or if the logging severity level for Cloud SQL events is not valid.",
    "function_name": "logging_cloudsql_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_302",
    "description": "Checks if a Google Cloud Firestore database has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore database does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_database_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_303",
    "description": "Checks if Google Cloud VPN has logging enabled for connections. The rule is NON_COMPLIANT if 'loggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_304",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if Stackdriver Monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_305",
    "description": "Checks if logging is configured for active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have logging enabled or the logging configuration is missing in at least one revision.",
    "function_name": "cloud_run_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/svc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_306",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_307",
    "description": "Checks if Google Cloud App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_308",
    "description": "Checks if the Google Cloud Load Balancing has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or if the log bucket is not set to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_309",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have audit logging enabled. The rule is NON_COMPLIANT if a subscription does not have audit logging enabled.",
    "function_name": "pubsub_subscription_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_310",
    "description": "Checks if a Google Cloud Pub/Sub service has Stackdriver logging enabled. The rule is NON_COMPLIANT if the service does not have logging enabled.",
    "function_name": "pubsub_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_311",
    "description": "In Google Cloud Platform (GCP), the equivalent service to AWS CloudTrail for logging and monitoring API calls is Google Cloud Audit Logs. This service provides details of actions taken by users in your GCP project across multiple regions.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_312",
    "description": "Checks if a Google Cloud SQL instance has audit logging enabled for its database operations. The rule is NON_COMPLIANT if a Cloud SQL instance does not have audit logging enabled.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_313",
    "description": "Checks if Google Cloud Firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the firewall rules. You can specify which logging type you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_314",
    "description": "Checks if Google Cloud SQL MySQL instances are configured to enable logging for Audit logs. The rule is NON_COMPLIANT if Cloud SQL MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_instances_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_315",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types (such as general, slow query, or error logs) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_316",
    "description": "Checks if Google BigQuery audit logs are being exported to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logs_exported_to_storage",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_317",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_318",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_319",
    "description": "Checks if logging is enabled for your Google Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_320",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "securitycenter_client.projects().getSecurityHealthAnalyticsSettings(name='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_321",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic for the subscriptions. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_322",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_323",
    "description": "Checks if Google Cloud VPC flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_324",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_expected",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_325",
    "description": "Checks if Google Cloud Monitoring logging for Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'loggingEnabled' field is set to false.",
    "function_name": "monitoring_cloud_armor_logging_enabled",
    "service_category": "Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_326",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_327",
    "description": "Checks if Google Cloud Endpoints have access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' configuration is not present in the Endpoints settings.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_328",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logLevel is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_329",
    "description": "Checks if Google Cloud Trace (formerly known as Stackdriver Trace) tracing is enabled on Google Cloud API Gateway services. The rule is COMPLIANT if Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "apigateway_service_trace_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_330",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled or 'logLevel' is set to neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_331",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined session affinity setting. The rule is NON_COMPLIANT if the session affinity setting does not match the user-defined value.",
    "function_name": "network_load_balancer_session_affinity_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_332",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_333",
    "description": "Checks if at least one Google Cloud Audit Log is logging Cloud Storage data events for all buckets. The rule is NON_COMPLIANT if there are no logs recording Cloud Storage data events.",
    "function_name": "logging_auditlog_cloudstorage_dataevents_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_334",
    "description": "GCP's equivalent rule is to ensure that Cloud Audit Logs are enabled for tracking API calls and other activities on resources, similar to AWS CloudTrail.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_335",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if all logging options are set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_336",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service (Cloud DMS) replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "logging_cloud_dms_replication_task_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(filter='resource.type=\"cloud_dms_replication_task\" AND severity>=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_337",
    "description": "Checks if a Google Cloud Firestore (with MongoDB compatibility) instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_338",
    "description": "Checks if Google Cloud VPN has logging enabled. The rule is NON_COMPLIANT if 'logging' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_339",
    "description": "Checks if logging configuration is set on active GKE Pod specifications. This rule is NON_COMPLIANT if an active GKE Pod does not have a logging configuration defined or the logging configuration is null in at least one container defined in the Pod spec.",
    "function_name": "container_pod_logging_configuration_set",
    "service_category": "Container",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_340",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_341",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_342",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging settings are not enabled or the log bucket is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_343",
    "description": "Checks if Google Cloud Pub/Sub has audit logging enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have audit logging enabled.",
    "function_name": "logging_pubsub_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_344",
    "description": "Checks if a Google Cloud Pub/Sub topic has logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().topics().get(name='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_345",
    "description": "Google Cloud Platform equivalent service for AWS CloudTrail is Google Cloud Audit Logs, which provides similar logging of activities in the cloud environment. The corresponding rule in GCP would ensure that audit logs are enabled in multiple regions.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/project-id/locations/global/buckets/_Default')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_346",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_347",
    "description": "Checks if Google Cloud Platform VPC Service Controls have logging enabled. The rule is NON_COMPLIANT if a logging type (such as 'Data Access' logs) is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.vpcs().get(project='proj', vpc='vpc_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_348",
    "description": "Checks if Google Cloud SQL instances for MySQL are configured to export logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_349",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_350",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific location in Google Cloud Storage. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_datasets_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='my_dataset')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_351",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if audit logging is not enabled for the dataset.",
    "function_name": "bigquery_dataset_encryption_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_352",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_353",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_354",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_355",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_356",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the value of the parameter.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_357",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_358",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLog' settings are not present in the OpenAPI configuration for the API.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('servicemanagement', 'v1'); request = service.services().configs().get(serviceName='api-name', configId='config-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_359",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logLevel is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_360",
    "description": "Checks if Google Cloud Trace is enabled for Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_361",
    "description": "Checks if a Google Cloud Firestore or Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is not set to ERROR or ALL.",
    "function_name": "firestore_api_gateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_362",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if the Load Balancer Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_363",
    "description": "Checks if Google Cloud CDN is configured to log requests to Google Cloud Storage. The rule is NON_COMPLIANT if a Cloud CDN resource does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_364",
    "description": "Checks if at least one Google Cloud Audit Log is logging data events for all Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs recording data events.",
    "function_name": "logging_auditlog_dataevents_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_365",
    "description": "The equivalence in GCP for the AWS rule 'CLOUD_TRAIL_ENABLED' is 'Cloud Audit Logs' which ensures that logging is enabled for tracking actions in the GCP environment.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_366",
    "description": "Checks if a Google Cloud Build trigger has log streaming enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_log_streaming_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_367",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "logging_database_migration_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_368",
    "description": "Checks if a Google Cloud Firestore or Google Cloud Datastore instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Firestore or Datastore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_datastore_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_369",
    "description": "Checks if Google Cloud IAP (Identity-Aware Proxy) has client connection logging enabled. The rule is NON_COMPLIANT if 'IapSettings.clientConnectionLogEnabled' is set to false.",
    "function_name": "iap_client_connection_logging_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "iap_client.get_iap_settings(name='projects/project_id/iap_web')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_370",
    "description": "Checks if logging is enabled on active Google Kubernetes Engine (GKE) workloads. This rule is NON_COMPLIANT if an active GKE workload does not have logging enabled through the Stackdriver Logging or if the logging configuration is null in at least one container definition.",
    "function_name": "container_workload_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_371",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_372",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_373",
    "description": "Checks if the Cloud Load Balancing has logging enabled. The rule is NON_COMPLIANT if the logBucket is not set or the logBucket does not match the required bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_374",
    "description": "Checks if Google Cloud Pub/Sub has Cloud Audit Logs enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have audit logging enabled.",
    "function_name": "logging_pubsub_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_375",
    "description": "Checks if a Google Cloud Pub/Sub topic has Cloud Logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().topics().get(name='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_376",
    "description": "In Google Cloud Platform (GCP), the equivalent service to AWS CloudTrail for logging and monitoring API activity is Google Cloud Audit Logs. To ensure comprehensive auditing, it is essential to enable Audit Logs that span multiple regions.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_377",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver Logging export enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver Logging export enabled for audit logs.",
    "function_name": "spanner_instance_logging_export_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_378",
    "description": "Checks if Google Cloud Platform (GCP) VPC (Virtual Private Cloud) firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the specified firewall rules.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_379",
    "description": "Checks if Cloud SQL for MySQL instances are configured to enable 'Cloud SQL Insights' for monitoring and logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have Cloud SQL Insights enabled.",
    "function_name": "sql_mysql_insights_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_380",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_381",
    "description": "Checks if Google BigQuery audit logs are being exported to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logs_exported_to_storage",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/proj/sinks/sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_382",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_383",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud Platform public hosted zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud Platform public hosted zones.",
    "function_name": "dns_public_hosted_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_384",
    "description": "Checks if logging is enabled for your Cloud Storage buckets (equivalent to S3). The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_385",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_386",
    "description": "Checks if Google Cloud Virtual Private Cloud (VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_387",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_expected",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_388",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_389",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' are not configured in the service's endpoint configuration.",
    "function_name": "endpoints_service_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_390",
    "description": "Checks if all methods in Google Cloud Endpoints configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_391",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(project='proj', service='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_392",
    "description": "Checks if a Google Cloud Endpoints API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'logLevel' is neither ERROR nor ALL.",
    "function_name": "endpoints_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_393",
    "description": "Checks if Google Cloud Load Balancers (GCLB) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if GCLB Desync mitigation mode does not match with the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_394",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_395",
    "description": "Checks if at least one Google Cloud Audit Log (Cloud Logging) trail is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no trails recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_396",
    "description": "Google Cloud Platform (GCP) equivalent of enabling audit logs is through enabling Cloud Audit Logs, which is analogous to enabling AWS CloudTrail. The rule identifier in GCP can differ from other identifiers but essentially serves the same function.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_397",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_398",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud SQL replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "sql_replication_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.list_log_entries(filter='resource.type=\"cloudsql_database\" AND logName=\"projects/my-project/logs/cloudsql.googleapis.com%2Freplication\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_399",
    "description": "Checks if a Google Cloud Firestore instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_instance_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_400",
    "description": "Checks if Google Cloud VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logConfig.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_401",
    "description": "Checks if logging configuration is set on active GKE Pod specifications. This rule is NON_COMPLIANT if an active GKE Pod does not have logging configured or if the logging configuration is null in at least one container definition.",
    "function_name": "container_pod_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_402",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_403",
    "description": "Checks if Google Cloud Platform App Engine environments are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_environment_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_404",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the 'logging' is disabled or the 'logBucket' is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_405",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have logging enabled. The rule is NON_COMPLIANT if a subscription does not have logging enabled.",
    "function_name": "pubsub_subscription_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().subscriptions().get(subscription='subscription_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_406",
    "description": "Checks if a Google Cloud Pub/Sub topic has audit logging enabled. The rule is NON_COMPLIANT if the topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_407",
    "description": "The rule MULTI_REGION_CLOUD_TRAIL_ENABLED in AWS corresponds to Google Cloud's equivalent service which ensures that logging is performed across multiple regions to have a more robust audit trail, similar to Cloud Audit Logs in Google Cloud Platform. This ensures that all operations are tracked across geographically distributed resources.",
    "function_name": "logging_audit_logs_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_408",
    "description": "Checks if a Google Cloud SQL database instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_409",
    "description": "Checks if Google Cloud Platform (GCP) VPC firewalls have logging enabled. The rule is NON_COMPLIANT if 'logConfig' is not set. You can specify which logging configurations you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_410",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_411",
    "description": "Checks if respective logs of Google Cloud SQL (GCP equivalent of Amazon RDS) are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_412",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specific_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_413",
    "description": "Checks if Google BigQuery datasets have the specified security settings. The rule is NON_COMPLIANT if the dataset is not encrypted, or if it is not using the specified encryption key, or if audit logging is not enabled for the dataset.",
    "function_name": "bigquery_dataset_encryption_and_logging_compliance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_414",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_415",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_416",
    "description": "Checks if Google Cloud Workflows have logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='workflow_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_417",
    "description": "Checks if Google Cloud VPC Flow Logs are found and enabled for all Google Cloud VPC networks. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_418",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the value of the parameter.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_419",
    "description": "Checks if logging is enabled for Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_420",
    "description": "Checks if Google Cloud Endpoints have access logging enabled. The rule is NON_COMPLIANT if 'logs' configuration is not present in the Endpoints settings.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_421",
    "description": "Checks if all methods in Google Cloud Endpoints or API Gateway have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the logging level is neither ERROR nor INFO.",
    "function_name": "api_gateway_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/project-id/services/service-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_422",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage.projects().services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_423",
    "description": "Checks if a Google Cloud API Gateway API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled or if the log level is not set to 'ERROR' or 'ALL'.",
    "function_name": "apigateway_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_424",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with a user-defined desynchronization (Desync) mitigation mode. The rule is NON_COMPLIANT if the HTTP(S) Load Balancer Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_425",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN is not configured for logging.",
    "function_name": "network_cdn_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_426",
    "description": "Checks if at least one Google Cloud audit log is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_427",
    "description": "Google Cloud Platform equivalent for AWS CloudTrail is Google Cloud Audit Logs, which provides similar logging and auditing capabilities for tracking API requests and changes in your Google Cloud resources.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_428",
    "description": "Checks if a Google Cloud Build trigger has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_log_option_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_429",
    "description": "Checks if logging is enabled with a valid severity level for GCP Database Migration Service (DMS) replication task events of a target Cloud SQL database. The rule is NON_COMPLIANT if logging is not enabled or if the replication task logging of a target database has a severity level that is not valid.",
    "function_name": "dms_replication_task_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(project_ids=['project_id'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_430",
    "description": "Checks if a Google Cloud Firestore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_431",
    "description": "Checks if Google Cloud VPN has connection logging enabled. The rule is NON_COMPLIANT if 'loggingEnabled' is set to false in the VPN configuration.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_432",
    "description": "Checks if logging is configured for active Google Cloud Run services. This rule is NON_COMPLIANT if a Cloud Run service does not have the logging configuration set or if the logging configuration is null in at least one revision.",
    "function_name": "cloudrun_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_433",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_434",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the log routing settings do not include exporting to Cloud Logging.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_435",
    "description": "Checks if the Google Cloud Load Balancer has access logs enabled. The rule is NON_COMPLIANT if the 'logging.enabled' is false or 'logging.bucket' is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_access_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_436",
    "description": "Checks if Google Cloud Pub/Sub (GCP equivalent of Amazon MQ) has logging enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_437",
    "description": "Checks if a Google Cloud Pub/Sub service has Stackdriver logging enabled. The rule is NON_COMPLIANT if the Pub/Sub service does not have logging enabled.",
    "function_name": "pubsub_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_438",
    "description": "The GCP equivalent for enabling a multi-region logging service to track and audit activities is by using Cloud Audit Logs in combination with Google Cloud Logging. This allows users to enable logging across multiple regions for better compliance and tracking of resources.",
    "function_name": "logging_audit_logs_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_439",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_440",
    "description": "Checks if Google Cloud Platform (GCP) VPC Service Controls have logging enabled. The rule is NON_COMPLIANT if a logging type is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.get_vpc_logging(project='proj', vpc='vpc_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_441",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to enable the Cloud SQL Insights feature for audit log data analysis. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_instances_audit_log_publishing_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_442",
    "description": "Checks if the respective logs of Cloud SQL for PostgreSQL and MySQL are enabled in Google Cloud Platform (GCP). The rule is NON_COMPLIANT if any log types (such as general log, slow query log, error log) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_443",
    "description": "Checks if Google BigQuery datasets have audit logging enabled and if the configured logging destination matches the specified location. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the logging destination does not match the provided criteria.",
    "function_name": "bigquery_datasets_audit_logging_enabled_destination_matched",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_444",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have auditing enabled.",
    "function_name": "bigquery_dataset_encryption_and_auditing_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_445",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_446",
    "description": "Checks if logging is enabled for your Google Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_447",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_448",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_449",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the specified value.",
    "function_name": "network_security_policy_logging_destination",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_450",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_451",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' settings are not present in the Endpoints configuration.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_452",
    "description": "Checks if all methods in Google Cloud API Gateway have logging enabled. The rule is NON_COMPLIANT if logging is not enabled or if logging level is neither ERROR nor INFO.",
    "function_name": "apigateway_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_453",
    "description": "Checks if Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/my-project/services/my-service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_454",
    "description": "Checks if a Google Cloud Platform (GCP) Cloud Run service has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is neither ERROR nor ALL.",
    "function_name": "cloudrun_service_logging_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_455",
    "description": "Checks if HTTPS load balancers in Google Cloud Platform (GCP) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if the HTTPS load balancer's Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_https_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_456",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_457",
    "description": "Checks if at least one Google Cloud Audit Log is configured to log data access events for all Google Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs recording data access events for Cloud Storage.",
    "function_name": "logging_auditlog_data_access_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_458",
    "description": "Google Cloud Logging must be enabled for operational logging similar to AWS CloudTrail.",
    "function_name": "logging_cloud_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_459",
    "description": "Checks if a Google Cloud Build project environment has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_project_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_460",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service (DMS) migration jobs. The rule is NON_COMPLIANT if logging is not enabled or migration job logging has a severity level that is not valid.",
    "function_name": "dms_migration_jobs_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_461",
    "description": "Checks if a Google Cloud Firestore instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_instance_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_462",
    "description": "Checks if Google Cloud VPN has logging enabled for the tunnel. The rule is NON_COMPLIANT if 'tunnel.logging' is set to false.",
    "function_name": "network_vpn_tunnel_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_463",
    "description": "Checks if logging is enabled in GCP Cloud Run services. This rule is NON_COMPLIANT if any active Cloud Run service does not have the logging configuration set or the logging setting is null.",
    "function_name": "cloudrun_service_logging_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_464",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_465",
    "description": "Checks if Google Cloud App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the logging configuration is set to false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_466",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or if the log bucket is not equal to the specified GCS bucket.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_467",
    "description": "Checks if Google Cloud Pub/Sub topics have logging enabled. The rule is NON_COMPLIANT if a topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_468",
    "description": "Checks if a Google Cloud Pub/Sub topic has Logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_469",
    "description": "In GCP, the equivalent service for AWS CloudTrail is Google Cloud Audit Logging, which provides similar functionality for logging and monitoring activities across your GCP projects. However, there is no direct equivalent to a multi-region setup in Google Cloud as it operates on a region-specific basis, but logs can be configured to be exported to different storage locations for centralized management.",
    "function_name": "logging_audit_logs_centralized_export",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().create(parent='projects/proj', body={'name': 'my-sink', 'destination': 'storage.googleapis.com/my-bucket'})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_470",
    "description": "Checks if a Google Cloud SQL (PostgreSQL or MySQL) instance has Stackdriver (now Cloud Operations) logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_471",
    "description": "Checks if Google Cloud Platform (GCP) Virtual Private Cloud (VPC) firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the specified firewall rule.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_472",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to enable audit logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit logging enabled.",
    "function_name": "sql_mysql_audit_logging_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_473",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_474",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_datasets_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_475",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if it is encrypted with a different key, or if the dataset does not have access logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_logging_configured",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_476",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "network_dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_477",
    "description": "Checks if Cloud Storage bucket logging is enabled. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_478",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_479",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_480",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the specified logging configuration.",
    "function_name": "network_security_policy_logging_destination_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_481",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_482",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in the service configuration.",
    "function_name": "endpoints_service_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_483",
    "description": "Checks if all methods in Google Cloud Endpoints configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_484",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/my-project/services/my-service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_485",
    "description": "Checks if a Google Cloud Platform (GCP) serverless API (e.g., Cloud Endpoints or API Gateway) has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or the log level is not set to ERROR or ALL.",
    "function_name": "api_gateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_486",
    "description": "Checks if Google Cloud Load Balancers are configured with a user defined Desync mitigation mode. The rule is NON_COMPLIANT if the Load Balancer's Desync mitigation mode does not match with the user defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_487",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN is not configured to log requests.",
    "function_name": "network_cdn_access_logs_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_488",
    "description": "Checks if at least one Google Cloud Audit Log is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs that record GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_489",
    "description": "In GCP, the equivalent to enabling AWS CloudTrail would be using Cloud Audit Logs for logging administrative activities on your Google Cloud resources.",
    "function_name": "logging_audit_logs_enable_administrative_activities",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_490",
    "description": "Checks if a Google Cloud Build configuration has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_configuration_log_option_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_491",
    "description": "Verifies whether logging is enabled with a valid severity level for Cloud SQL database replication task events in GCP. The rule is NON_COMPLIANT if logging is not enabled or the logging severity level for replication tasks in the target Cloud SQL database is invalid.",
    "function_name": "sql_replication_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'], filter='resource.type=\"cloudsql_database\" AND severity>=\"ERROR\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_492",
    "description": "Checks if a Google Cloud Firestore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_493",
    "description": "Checks if Google Cloud Platform (GCP) VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logging' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_494",
    "description": "Checks if logging is configured for active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have logging enabled or the log configuration is null in at least one revision.",
    "function_name": "cloud_run_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/svc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_495",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_496",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of `enableStackdriverLogging` is false.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_497",
    "description": "Checks if the Google Cloud Load Balancing has logging enabled. The rule is NON_COMPLIANT if the logging is disabled or the log bucket does not match the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_498",
    "description": "Checks if Google Cloud Pub/Sub topics have audit logging enabled. The rule is NON_COMPLIANT if a topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_499",
    "description": "Checks if a Google Cloud Pub/Sub topic has logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().topics().get(name='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_500",
    "description": "The equivalence in GCP for enabling Cloud Audit Logs across multiple regions is to configure 'Cloud Audit Logs' to ensure that logs are captured for activities across multiple regions.",
    "function_name": "logging_audit_logs_multiregion_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_501",
    "description": "Checks if a Google Cloud SQL instance has Cloud Logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Cloud Logging enabled for audit logs.",
    "function_name": "sql_instance_logging_audit_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_502",
    "description": "Checks if GCP Firewall Rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the firewall rules. You can specify which logging type you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_503",
    "description": "Checks if Cloud SQL for MySQL instances are configured to publish audit logs to Stackdriver Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_504",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_505",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specific_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_506",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or is encrypted with another key, or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_507",
    "description": "Checks if DNS query logging is enabled for your Google Cloud Platform Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud Platform Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_508",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_509",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='projects/project_id/locations/location_id/workflows/workflow_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_510",
    "description": "Checks if Google Cloud Virtual Private Cloud (Google Cloud VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_511",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_expected",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_512",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_513",
    "description": "Checks if Google Cloud API Gateway has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' is not present in API configuration.",
    "function_name": "apigateway_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_514",
    "description": "Checks if all methods in Google Cloud Endpoints or Apigee API Gateway have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if log level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_515",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Google Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_516",
    "description": "Checks if a Google Cloud Platform (GCP) API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'logLevel' is neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_517",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with a user defined Desync mitigation mode. The rule is NON_COMPLIANT if the HTTP(S) Load Balancer Desync mitigation mode does not match with user defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_518",
    "description": "Checks if Google Cloud CDN has logging configured to send access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_519",
    "description": "Checks if at least one Google Cloud Audit Log is logging Cloud Storage data access events for all Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs that record Cloud Storage data access events.",
    "function_name": "logging_auditlog_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_520",
    "description": "In Google Cloud Platform (GCP), the equivalent of AWS CloudTrail is Cloud Audit Logs, which track all actions in Google Cloud services. The rule identifier might be different, but it serves a similar purpose of monitoring and logging account activity.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_521",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_522",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud SQL database audit logs. The rule is NON_COMPLIANT if logging is not enabled or database logging has a severity level that is not valid.",
    "function_name": "logging_cloudsql_audit_logs_severity_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_523",
    "description": "Checks if a Google Cloud Firestore or Google Cloud Datastore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Firestore or Datastore instance does not have logging enabled for audit logs.",
    "function_name": "logging_firestore_datastore_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_524",
    "description": "Checks if Google Cloud VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logging.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_525",
    "description": "Checks if logging is configured for active Google Kubernetes Engine (GKE) Pod specifications. This rule is NON_COMPLIANT if an active GKE Pod does not have the logging configuration defined or if the logging configuration is null in at least one container definition.",
    "function_name": "container_pod_logging_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_526",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_527",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'serviceAccountManaged' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_528",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_529",
    "description": "Checks if Google Cloud Pub/Sub topics have Cloud Audit Logs enabled. The rule is NON_COMPLIANT if a topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_530",
    "description": "Checks if a Google Cloud Pub/Sub service has audit logging enabled. The rule is NON_COMPLIANT if the service does not have audit logging enabled.",
    "function_name": "pubsub_service_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='projects/my-project', sinkName='pubsub.googleapis.com/projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_531",
    "description": "This rule checks whether Cloud Trail is enabled in multiple regions within GCP. The equivalent service in GCP is Cloud Audit Logs, which provides a similar audit trail capability across multiple regions.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_532",
    "description": "Checks if a Google Cloud Spanner instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "spanner_client.instance_admin().get_iam_policy(resource='projects/my-project/instances/my-instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_533",
    "description": "Checks if GCP VPC Service Controls have logging enabled. The rule is NON_COMPLIANT if the logging configuration for the service perimeter is not set. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_service_controls_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.servicePerimeters().get(name='projects/{project_id}/servicePerimeters/{perimeter_name}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_534",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export logs to Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_535",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_536",
    "description": "Checks if Google BigQuery is configured to log audit logs to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_configured_to_storage_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='my_dataset')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_537",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the dataset is not encrypted at rest or if it does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_538",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_539",
    "description": "Checks if logging is enabled for your Google Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_540",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_541",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_542",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected configuration.",
    "function_name": "network_security_policy_logging_destination_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_543",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_544",
    "description": "Checks if Google Cloud Endpoints configurations have access logging enabled. The rule is NON_COMPLIANT if 'accessLog' settings are not present in the API configuration.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_545",
    "description": "Verifies whether all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_546",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints APIs. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_apis_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage.projects().services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_547",
    "description": "Checks if a Google Cloud Endpoints API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or the log level is neither ERROR nor ALL.",
    "function_name": "endpoints_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_548",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with the user-defined settings for connection draining. The rule is NON_COMPLIANT if the connection draining settings do not match the user-defined parameters.",
    "function_name": "network_load_balancer_connection_draining_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_549",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_550",
    "description": "Checks if at least one Google Cloud Audit Log is enabled for Google Cloud Storage (GCS) data access events across all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_551",
    "description": "GCP equivalent of enabling Cloud Audit Logs for project-level auditing.",
    "function_name": "logging_project_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().get(projectId='my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_552",
    "description": "Checks if a Google Cloud Build (GCB) trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present logging configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_553",
    "description": "Verifies if logging is enabled with a valid severity level for Google Cloud Database Migration Service (DMS) replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or if the replication task logging of a target database has an invalid severity level.",
    "function_name": "logging_dms_replication_task_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_554",
    "description": "Checks if a Google Cloud Firestore (with MongoDB compatibility) instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_instance_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_555",
    "description": "Checks if Google Cloud VPN has logging enabled for the connection. The rule is NON_COMPLIANT if 'LogConfig.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_556",
    "description": "Checks if log configuration is set on active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have the logging configuration defined or the logging setting is null in at least one revision.",
    "function_name": "cloudrun_service_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/location/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_557",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_558",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'logSeverity' is not set or 'logSeverity' is configured incorrectly.",
    "function_name": "app_engine_service_logging_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.entries().list(projectIds=['proj'], filter='resource.type=\"gae_app\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_559",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the loggingConfig.enable is false or loggingConfig.logBucket is not equal to the specified logBucketName.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_560",
    "description": "Checks if Google Cloud Pub/Sub topic message logging is enabled. The rule is NON_COMPLIANT if a topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_561",
    "description": "Checks if a Google Cloud Pub/Sub service has Logging enabled for audit purposes. The rule is NON_COMPLIANT if the service does not have audit logging enabled.",
    "function_name": "pubsub_service_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_562",
    "description": "The Google Cloud Platform (GCP) equivalent for enabling multi-region logging is using Google Cloud Logging with the configuration to ensure that logs are retained across multiple regions, similar to AWS CloudTrail's multi-region capability.",
    "function_name": "logging_logs_multi_region_retention",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().create(parent='projects/proj', body={'name': 'my-sink', 'destination': 'bigquery.googleapis.com/projects/proj/datasets/dataset'})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_563",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='projects/my-project', sinkName='my-sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_564",
    "description": "Checks if Google Cloud Platform (GCP) VPC firewall rules have logging enabled. The rule is NON_COMPLIANT if the logging for a specific action (such as 'allowed' or 'denied') is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_565",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to publish logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log publishing configured.",
    "function_name": "sql_mysql_log_publishing_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_566",
    "description": "Checks if the respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_567",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_datasets_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_568",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_569",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_570",
    "description": "Checks if logging is enabled for your Google Cloud Storage (GCS) buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_571",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_572",
    "description": "Checks if Google Cloud VPC flow logs are found and enabled for all Google Cloud VPC networks. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC network.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_573",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policies_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_574",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_575",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' is not present in the Endpoints configuration.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_576",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_577",
    "description": "Checks if Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1'); request = service.projects().services().get(name='projects/my-project/services/my-service'); response = request.execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_578",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or the logging level is neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_579",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if Load Balancer Desync mitigation mode does not match with user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_580",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_581",
    "description": "Checks if at least one Google Cloud Audit Log is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_582",
    "description": "Equivalent rule in GCP for CLOUD_TRAIL_ENABLED is to ensure that 'Cloud Audit Logging' is enabled for projects, as it provides similar audit logging capabilities.",
    "function_name": "logging_project_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_583",
    "description": "Checks if a Google Cloud Build trigger has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_log_option_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_584",
    "description": "Checks if logging is enabled with a valid severity level for GCP Cloud SQL database instances. The rule is NON_COMPLIANT if logging is not enabled or Cloud SQL instance logging has a severity level that is not valid.",
    "function_name": "sql_instance_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_585",
    "description": "Checks if a Google Cloud Firestore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_586",
    "description": "Checks if Google Cloud Platform (GCP) VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'loggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_587",
    "description": "Checks if Logging Configuration is set on active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have Logging Configuration defined or the value for Logging Configuration is null in at least one revision.",
    "function_name": "cloudrun_service_logging_configuration_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_588",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_589",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the services are not set to enable logging.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_590",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging configuration is disabled or the log bucket does not match the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_591",
    "description": "Checks if Google Cloud Pub/Sub has audit logging enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have audit logging enabled.",
    "function_name": "logging_pubsub_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_592",
    "description": "Checks if a Cloud Pub/Sub topic has Stackdriver Logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_593",
    "description": "The GCP equivalent for enabling multi-region logging is to utilize Google Cloud's Stackdriver Logging in a multi-region configuration. This enhances the visibility and tracking of logs across different regions, similar to AWS CloudTrail's functionality for multi-region tracking.",
    "function_name": "logging_cloud_logging_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_594",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver Logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver Logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_595",
    "description": "Checks if Google Cloud Firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the firewall rules. You can specify which logging type (e.g., 'log all', 'log denied') you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_596",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export audit logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log exporting configured.",
    "function_name": "sql_mysql_audit_logs_exported",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_597",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types (such as general log, slow query log, or error log) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_598",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specific_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_599",
    "description": "Checks if Google Cloud BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_600",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_601",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_602",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='workflow_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_603",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_604",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the value of the parameter.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_605",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_606",
    "description": "Checks if a GCP Backup resource (using Cloud Storage or native backup services) has an attached IAM policy that prevents deletion of backups. The rule is NON_COMPLIANT if the Backup resource does not have IAM policies or has policies without a suitable 'Deny' statement (for permissions like storage.objects.delete or any equivalent for protecting backup data).",
    "function_name": "storage_backup_iam_policy_prevent_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_607",
    "description": "Checks that there is at least one Google Cloud Audit Logging service enabled with security best practices. This rule is COMPLIANT if there is at least one audit log that meets all necessary security configurations.",
    "function_name": "logging_audit_log_security_best_practices_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_608",
    "description": "Checks if Google Cloud Logging Log Buckets are encrypted with a customer-managed encryption key (CMEK) or a specified key. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a CMEK or is encrypted with a key not supplied in the rule parameter.",
    "function_name": "logging_log_buckets_cmek_encrypted",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_609",
    "description": "Checks if Google Cloud Audit Logs is configured to use Customer-managed encryption keys (CMEK). The rule is COMPLIANT if the encryption key is defined in the Cloud KMS service.",
    "function_name": "logging_audit_logs_cmek_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_610",
    "description": "Checks if Google Cloud Audit Logs has log integrity (signed digest) enabled. Google Cloud recommends that integrity validation must be enabled for all audit logs. The rule is NON_COMPLIANT if the validation is not enabled.",
    "function_name": "logging_audit_logs_integrity_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_611",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) migration jobs are publicly accessible. The rule is NON_COMPLIANT if the 'publiclyAccessible' field is set to true.",
    "function_name": "dms_migration_jobs_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_612",
    "description": "Checks if Google Cloud Firestore database backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore database backups are public.",
    "function_name": "firestore_database_backups_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_613",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots are shared with 'allUsers', meaning Google Cloud snapshots are public.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_614",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the PodSpec is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_615",
    "description": "Checks if Google Cloud Filestore access instances are configured to enforce a root directory. The rule is NON_COMPLIANT if the root path is set to '/' (default root directory of the file system).",
    "function_name": "filestore_instance_enforce_root_directory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_616",
    "description": "Checks if Google Cloud Filestore access control configurations are set up to enforce an identity by ensuring that user permissions are properly defined. The rule is NON_COMPLIANT if permissions are not defined or if provided parameters do not match access control requirements.",
    "function_name": "filestore_access_control_enforce_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_617",
    "description": "Checks if a Google Cloud account has VPC firewall rules configured to block public access. The rule is NON_COMPLIANT if there are firewall rules allowing ingress traffic from 0.0.0.0/0 on ports other than port 22.",
    "function_name": "network_firewall_block_public_ingress_except_ssh",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_618",
    "description": "Checks if the Google Cloud Function IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_619",
    "description": "Checks if a Google Cloud SQL for PostgreSQL or MySQL manual database snapshot is public. The rule is NON_COMPLIANT if any existing and new Cloud SQL database snapshot is public.",
    "function_name": "sql_snapshot_public_access_restricted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_620",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration.requireSsl' field is false.",
    "function_name": "sql_instances_ssl_required",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_621",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().getBackupRuns(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_622",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset has 'access' permissions with 'role' set to 'roles/viewer' for 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_viewer_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_623",
    "description": "Checks if Google Cloud Storage buckets have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for Cloud Storage buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_624",
    "description": "Verifies if the required public access prevention settings are configured at the project level. The compliance rule is considered NON_COMPLIANT when the specified fields do not align with the configuration settings in the Google Cloud resource.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_625",
    "description": "Checks if the required IAM policies or organization policies are configured at the project or organization level. The rule is NON_COMPLIANT if the configuration item does not align with the expected policies for public access.",
    "function_name": "iam_policies_public_access_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_626",
    "description": "Checks if Google Cloud Storage (GCS) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and the uniform bucket-level access is disabled (allowing public access).",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_627",
    "description": "Checks if Object Versioning is enabled in Google Cloud Storage (GCS) buckets. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_628",
    "description": "Checks if your Google Cloud Storage buckets do not allow public access. The rule checks the Uniform Resource Identifier (URI) access control settings, IAM policies, and the bucket ACL.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_629",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, bucket policy, and bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_630",
    "description": "Checks if direct internet access is disabled for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_631",
    "description": "Checks if Google Cloud Documents (specifically, Cloud Storage buckets or Pub/Sub topics) owned by the account are public. The rule is NON_COMPLIANT if Cloud Storage buckets or Pub/Sub topics with the owner 'Self' are publicly accessible.",
    "function_name": "storage_buckets_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_632",
    "description": "Checks if Google Cloud SQL instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Cloud SQL instance is not protected by a backup plan.",
    "function_name": "sql_instance_backup_plan_enforced",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_633",
    "description": "Checks if a backup policy has a backup rule that meets the required frequency and retention duration. The rule is NON_COMPLIANT if recovery snapshots are not created at least as frequently as the specified schedule or expire before the designated retention period.",
    "function_name": "compute_disk_backup_policy_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_634",
    "description": "Verifies that a backup or snapshot's retention policy for a Google Cloud Platform (GCP) resource, such as a Cloud Storage bucket or Compute Engine snapshot, meets the specified minimum retention period. If a backup's retention point is less than the required retention period, the rule is considered NON_COMPLIANT.",
    "function_name": "storage_bucket_retention_policy_minimum_period",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_635",
    "description": "Checks that there is at least one Google Cloud Audit Log enabled with security best practices. This rule is COMPLIANT if there is at least one log that meets all of the following security configurations.",
    "function_name": "logging_auditlog_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_636",
    "description": "Checks if Google Cloud Logging Log Buckets are encrypted with Google Cloud KMS keys. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "function_name": "logging_log_buckets_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/proj/locations/loc/buckets/bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_637",
    "description": "Checks if Google Cloud Audit Logging is configured to use Google Cloud Key Management Service (Cloud KMS) for encryption. The rule is COMPLIANT if the KmsKeyId is defined.",
    "function_name": "logging_audit_logging_kms_encryption_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_638",
    "description": "Checks if Google Cloud Audit Logs allows for log ingestion integrity verification. Google Cloud recommends that log integrity check should be enabled for all audit logs. The rule is NON_COMPLIANT if integrity verification is not enabled.",
    "function_name": "logging_audit_logs_integrity_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_639",
    "description": "Checks if Cloud SQL instances have automated backups enabled. Optionally, the rule checks the backup retention period and the backup window.",
    "function_name": "sql_instances_backup_automated_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_640",
    "description": "Checks whether Google Cloud Firestore collections are included in Google Cloud Backup plans. The rule is NON_COMPLIANT if Google Cloud Firestore collections are not present in any Google Cloud Backup plan.",
    "function_name": "firestore_collections_backup_inclusion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_641",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore collections. The rule is NON_COMPLIANT if PITR is not enabled for Firestore collections.",
    "function_name": "firestore_collections_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_642",
    "description": "Checks if Google Cloud Firestore collections are protected by a backup plan. The rule is NON_COMPLIANT if the Firestore collection is not covered by a backup plan.",
    "function_name": "firestore_collection_backup_plan_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_643",
    "description": "Check if Google Cloud Persistent Disk snapshots are included in Google Cloud Backup plans. The rule is NON_COMPLIANT if Google Cloud Persistent Disk snapshots are not included in backup plans.",
    "function_name": "compute_disk_snapshots_included_in_backup_plans",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_644",
    "description": "Checks if Google Persistent Disks are protected by a backup plan. The rule is NON_COMPLIANT if the Google Persistent Disk is not covered by a backup plan.",
    "function_name": "compute_disk_backup_plan_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_645",
    "description": "Checks if Google Compute Engine (GCE) instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Compute Engine instance is not covered by a backup plan.",
    "function_name": "compute_instance_backup_plan_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_646",
    "description": "Checks if Google Cloud Filestore instances are included in the backup plans of Google Cloud Backup. The rule is NON_COMPLIANT if Filestore instances are not included in the backup plans.",
    "function_name": "filestore_instance_backup_inclusion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_647",
    "description": "Checks if Google Cloud Filestore instances are protected by a backup plan. The rule is NON_COMPLIANT if the Filestore instance is not covered by a backup plan.",
    "function_name": "filestore_instance_backup_plan_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_648",
    "description": "Check if the Google Cloud Memorystore for Redis instances have automatic backup turned on. The rule is NON_COMPLIANT if the Redis instance backup frequency is less than the specified retention period. For example: If the parameter is 15 days, then the rule is non-compliant if the backup frequency is set to less than 15 days.",
    "function_name": "memorystore_redis_backup_frequency_compliant",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_649",
    "description": "Checks if Google Cloud Filestore instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Cloud Filestore instance is not covered by a backup plan.",
    "function_name": "filestore_instance_backup_plan_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_650",
    "description": "Checks if a Google Cloud SQL instance retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "sql_instance_retention_period_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_651",
    "description": "Checks if Google Cloud SQL databases are present in Google Cloud Backup plans. The rule is NON_COMPLIANT if Google Cloud SQL databases are not included in any Google Cloud Backup plan.",
    "function_name": "sql_databases_included_in_backup_plans",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_652",
    "description": "Checks if Google Cloud SQL instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Cloud SQL Database instance is not covered by a backup plan.",
    "function_name": "sql_instance_backup_plan_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_653",
    "description": "Checks that Google Cloud BigQuery automated snapshots are enabled for datasets. The rule is NON_COMPLIANT if the value for snapshot retention period is greater than MaxRetentionPeriod or less than MinRetentionPeriod or the value is 0.",
    "function_name": "bigquery_dataset_snapshot_retention_configured",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).default_table_expiration_ms"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_654",
    "description": "Checks if GCS (Google Cloud Storage) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_655",
    "description": "Checks if Google Cloud Storage (GCS) buckets are protected by a backup plan. The rule is NON_COMPLIANT if the GCS bucket is not covered by a backup plan.",
    "function_name": "storage_bucket_backup_plan_enforced",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_656",
    "description": "Checks if a Google Cloud CDN (Content Delivery Network) distribution with Google Cloud Storage as the origin has an authorized service account configured. The rule is NON_COMPLIANT if the CDN distribution is backed by Google Cloud Storage and the origin service account is not configured correctly, or the origin is not a Google Cloud Storage bucket.",
    "function_name": "cdn_distribution_storage_origin_service_account_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_657",
    "description": "Checks if a Google Cloud CDN service with a Google Cloud Storage origin has signed URLs enabled. The rule is NON_COMPLIANT for Cloud CDN services with Google Cloud Storage origins that don't have signed URLs enabled.",
    "function_name": "network_cdn_signed_urls_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_658",
    "description": "Checks that there is at least one Google Cloud Audit Log configured with security best practices. This rule is COMPLIANT if there is at least one log that meets all of the following standards.",
    "function_name": "logging_audit_log_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_659",
    "description": "Checks if Google Cloud Logging (formerly Stackdriver Logging) Logs are encrypted with Google-managed or customer-managed encryption keys. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a KMS key or is encrypted with a KMS key not specified in the rule parameter.",
    "function_name": "logging_log_bucket_encryption_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/project-id/locations/location-id/buckets/bucket-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_660",
    "description": "Checks if Google Cloud Audit Logs is configured to use Customer-managed encryption keys (Cmek) for logs. The rule is COMPLIANT if the kmsKeyName is defined.",
    "function_name": "logging_audit_logs_cmek_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_661",
    "description": "Checks if Google Cloud Audit Logs have integrity checking enabled. Google Cloud recommends that integrity checking must be enabled for all logs. The rule is NON_COMPLIANT if the integrity checking is not enabled.",
    "function_name": "logging_audit_logs_integrity_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_662",
    "description": "Checks if the Cloud Storage bucket has Object Versioning enabled, by default. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_663",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket-level settings are public.",
    "function_name": "storage_bucket_non_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_664",
    "description": "Checks if versioning is enabled for your Google Cloud Storage buckets. Optionally, the rule checks if Object Versioning with minimum retention policies is configured for your buckets.",
    "function_name": "storage_bucket_versioning_enabled_with_minimum_retention",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_665",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_666",
    "description": "Checks if a resource type has a Google Cloud Monitoring alerting policy for the specified metric. For resource types, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or persistent disks. The rule is COMPLIANT if the specified metric has a resource ID and an associated alerting policy.",
    "function_name": "monitoring_resource_alerting_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_667",
    "description": "Checks if Google Cloud Audit Logs are configured to export logs to Google Cloud Storage. The audit configuration is NON_COMPLIANT if the export destination for logs is empty.",
    "function_name": "logging_audit_logs_export_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/proj/sinks/sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_668",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "compute_instance_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_669",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a GCP project. The rule is NON_COMPLIANT if Google Cloud SCC is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "securitycenter_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_670",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_671",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'monitoringConfig.enabled' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"cloudarmor.googleapis.com/policy/metric\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_672",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud API Gateway. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "apigateway_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_673",
    "description": "Checks if a resource type has a Cloud Monitoring alerting policy for the specified metric. For resource types, you can specify Google Compute Engine instances, Google Kubernetes Engine clusters, Cloud SQL instances, or Google Cloud Storage buckets. The rule is COMPLIANT if the specified metric has a resource ID and a corresponding alerting policy.",
    "function_name": "monitoring_resource_alerting_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_674",
    "description": "Checks if Stackdriver Monitoring (now known as Cloud Monitoring) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_675",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "securitycenter_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_676",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_logging_delivery_status_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_677",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'visible' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_678",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_679",
    "description": "Checks if Google Cloud Monitoring (formerly Stackdriver Monitoring) alert policies have an action configured for the 'ALERTING', 'NO_DATA', or 'CLOSED' state. Optionally checks if any actions match a named notification channel. The rule is NON_COMPLIANT if there is no action specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_680",
    "description": "Checks if a resource type has a Cloud Monitoring alert policy for the specified metric. For resource types, you can specify Google Compute Engine instances, Google Cloud Storage buckets, or Google SQL instances. The rule is COMPLIANT if the named metric has a resource ID and a Cloud Monitoring alert policy.",
    "function_name": "monitoring_alert_policy_exists_for_metric",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_681",
    "description": "Checks if Stackdriver monitoring (now known as Google Cloud Operations suite) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_monitoring_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\"', interval=interval)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_682",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a GCP Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_scc_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "securitycenter_client.organizations().getSecurityHealthAnalyticsSettings(name='organizations/123/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_683",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_684",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'monitoringEnabled' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"cloudarmor.googleapis.com/security_policy/metric\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_685",
    "description": "Checks if Google Cloud Monitoring alerting policies have a notification channel configured for the 'Triggered', 'Pending', or 'OK' state. Optionally checks if any notification channels match a specified resource name. The rule is NON_COMPLIANT if there is no notification channel specified for the alerting policy or optional parameter.",
    "function_name": "monitoring_alerting_policy_notification_channel_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_686",
    "description": "Verifies if a Google Cloud Platform (GCP) backup plan has a backup policy that meets the required frequency and retention period. The policy is deemed NON_COMPLIANT if recovery points are not created as often as the specified frequency or if they expire before the specified retention period.",
    "function_name": "compute_backup_plan_policy_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_687",
    "description": "Checks if a backup retention policy in Google Cloud Storage or Google Cloud Backup expires no earlier than after the specified period. The rule is NON_COMPLIANT if the backup has a retention policy that is less than the required retention period.",
    "function_name": "storage_backup_retention_policy_minimum_period",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_688",
    "description": "Checks that there is at least one Google Cloud Audit log configuration defined with security best practices. This rule is COMPLIANT if there is at least one log configuration that meets all of the following: logging is enabled for all services and appropriate IAM policies are applied.",
    "function_name": "logging_audit_log_configuration_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_689",
    "description": "Checks if a Google Cloud Logging Log Bucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_log_bucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_690",
    "description": "Checks if a Google Cloud Firestore backup retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the specified value.",
    "function_name": "firestore_backup_retention_period_set",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().backups().get(name='backup_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_691",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore databases. The rule is NON_COMPLIANT if PITR is not enabled for Firestore databases.",
    "function_name": "firestore_database_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_692",
    "description": "Checks if Persistent Disks are attached to Google Compute Engine instances. Optionally checks if Persistent Disks are set to be deleted when their associated instance is terminated.",
    "function_name": "compute_persistent_disks_attached_and_auto_delete",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_693",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container.projects().locations().repositories().getIamPolicy(resource='projects/my-project/locations/us-central1/repositories/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_694",
    "description": "Checks if Google Cloud Search domains (using Google Cloud's managed search services) are configured to send logs to Google Cloud Logging. The rule is COMPLIANT if logging is enabled for a Google Cloud Search domain. This rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "logging_cloud_search_domain_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_695",
    "description": "Checks if Google Cloud Elasticsearch Service (GCP's equivalent to Amazon OpenSearch Service) has audit logging enabled. The rule is NON_COMPLIANT if an Elasticsearch Service domain does not have audit logging enabled.",
    "function_name": "logging_elasticsearch_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_696",
    "description": "Checks if Google Cloud Elasticsearch clusters are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "dataproc_clusters_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_697",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match the specified parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_698",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have lifecycle policies configured. The rule is NON_COMPLIANT if GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_699",
    "description": "Checks if Google Cloud API Gateway has access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in the API Gateway configuration.",
    "function_name": "apigateway_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_700",
    "description": "Checks if all methods in Google Cloud API Gateway configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if loggingLevel is neither ERROR nor INFO.",
    "function_name": "apigateway_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_701",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_702",
    "description": "Checks if a Google Cloud Platform (GCP) Cloud Endpoints API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if 'logLevel' is neither ERROR nor ALL.",
    "function_name": "endpoints_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_703",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with a user-defined security policy to mitigate desynchronization attacks. The rule is NON_COMPLIANT if the HTTP(S) Load Balancer's security policy does not match the user-defined security policy.",
    "function_name": "network_https_load_balancer_security_policy_configured",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_704",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_705",
    "description": "Checks if at least one Google Cloud Audit Log is logging Cloud Storage data access events for all Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs recording Cloud Storage data access events.",
    "function_name": "logging_auditlog_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_706",
    "description": "Checks if Google Cloud Monitoring alerting policies have notification channels configured for the ALERTING, PENDING, or OK state. Optionally checks if any notification channels match a named channel ID. The rule is NON_COMPLIANT if there is no notification channel specified for the alerting policy or optional parameter.",
    "function_name": "monitoring_alerting_policy_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_707",
    "description": "Checks if a resource type has a Stackdriver Monitoring alerting policy for the specified metric. For resource type, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the specified metric has a resource ID and Stackdriver alerting policy.",
    "function_name": "monitoring_resource_alerting_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_708",
    "description": "This rule checks if Cloud Audit Logs are enabled in GCP, which is equivalent to the AWS rule for ensuring that CloudTrail is enabled. The main service involved is Cloud Logging.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_709",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_710",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud SQL database replication events. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "sql_replication_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.list_log_entries(filter='resource.type=\"cloudsql_database\" AND logName=\"projects/my-project/logs/cloudsql.googleapis.com%2Freplication\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_711",
    "description": "Checks if a Google Cloud Firestore instance has Cloud Logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Cloud Logging enabled for audit logs.",
    "function_name": "firestore_instance_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_712",
    "description": "Checks if GCP Cloud VPN has logging enabled for its tunnels. The rule is NON_COMPLIANT if 'logConfig.loggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_713",
    "description": "Checks if 'Stackdriver Monitoring' is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_714",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the Pod security context is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_715",
    "description": "Checks if logging configuration is set on active Google Kubernetes Engine (GKE) deployments. This rule is NON_COMPLIANT if an active GKE deployment does not have logging enabled or the logging configuration is null in at least one container definition.",
    "function_name": "container_gke_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_716",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_717",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_718",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or the log bucket does not match the specified bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_719",
    "description": "Verifies if IAM users are part of at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_720",
    "description": "Checks if Google Cloud Pub/Sub has logs enabled for audit logging. The rule is NON_COMPLIANT if Pub/Sub does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_721",
    "description": "Checks if a Google Cloud Pub/Sub topic has audit logging enabled. The rule is NON_COMPLIANT if the topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_722",
    "description": "The GCP equivalent for the rule identifier MULTI_REGION_CLOUD_TRAIL_ENABLED in the context of multi-region logging is to ensure that audit logs for services are enabled across multiple regions. This ensures that logs are available for compliance and monitoring across geographic boundaries.",
    "function_name": "logging_audit_logs_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_723",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_724",
    "description": "Checks if Google Cloud Platform (GCP) VPC firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured. You can specify which logging option you want the rule to check.",
    "function_name": "network_vpc_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_725",
    "description": "Checks if Google Cloud Search instances have fine-grained access control enabled. The rule is NON_COMPLIANT if Access Control settings are not properly configured for the Cloud Search instance.",
    "function_name": "cloudsearch_instance_fine_grained_access_control_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.settings().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_726",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to enable Cloud Audit Logs. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing enabled.",
    "function_name": "sql_mysql_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_727",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_728",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specific_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_729",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if it is encrypted with another key, or if dataset audit logging is not enabled.",
    "function_name": "bigquery_dataset_encryption_and_logging_compliance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='my_dataset')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_730",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_731",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.objects.get and storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_blocklisted_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_732",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_733",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_734",
    "description": "Checks if Google Cloud Security Command Center is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "securitycenter_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_735",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_736",
    "description": "Checks if Google Cloud Workflow has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration does not meet the minimum requirements.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_737",
    "description": "Checks if Google Cloud Virtual Private Cloud (Google Cloud VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_738",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the specified parameter value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_739",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The policy is NON_COMPLIANT if the 'logConfig.enable' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_740",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_741",
    "description": "Checks if Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "serviceusage.projects().services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_742",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications",
    "service_category": "Deployment Manager",
    "confidence": 9,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_743",
    "description": "Checks if Google Cloud Monitoring alerting policies have notifications configured for various states (triggered, pending notification, and resolved). Optionally checks if any notifications match a specified topic. The rule is NON_COMPLIANT if there are no notifications specified for the alerting policy or the optional parameter.",
    "function_name": "monitoring_alerting_policy_notifications_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_744",
    "description": "Checks if a resource type has a Cloud Monitoring alert for the named metric. For resource type, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the named metric has a resource ID and Cloud Monitoring alert.",
    "function_name": "monitoring_resource_metric_alert_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_745",
    "description": "Checks if Stackdriver Monitoring (now Google Cloud Monitoring) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "compute_instance_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_746",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a Google Cloud Platform (GCP) project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_747",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_748",
    "description": "Checks if Google Cloud's monitoring for the Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'enableMetrics' field is set to false.",
    "function_name": "network_cloud_armor_metrics_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_749",
    "description": "Checks if Google Cloud Trace is enabled for Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project_id}/services/{service_name}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_750",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_751",
    "description": "Checks if Google Cloud Monitoring alert policies have notification channels configured for the ALARM, NO_DATA, or OK state. Optionally checks if any notification channels match a specified resource name. The rule is NON_COMPLIANT if there is no notification channel specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_752",
    "description": "Checks if a resource type has a Cloud Monitoring alert policy for the specified metric. For resource type, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the specified metric has a resource ID and a Cloud Monitoring alert policy.",
    "function_name": "monitoring_resource_alert_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_753",
    "description": "Checks if Stackdriver Monitoring (now part of Google Cloud Operations Suite) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_monitoring_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\"', interval=interval)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_754",
    "description": "Checks if Google Cloud Security Command Center is enabled for a GCP Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_755",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for message delivery status. The rule is NON_COMPLIANT if delivery status notifications for messages are not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_756",
    "description": "Checks if Google Cloud Monitoring security metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'enableMonitoring' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_757",
    "description": "Check if specified applications are installed on a Compute Engine instance, with an option to specify minimum versions and platforms.",
    "function_name": "compute_instance_application_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_758",
    "description": "Checks if the compliance status of Google Cloud OS Config patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the Compute Engine instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_os_config_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_759",
    "description": "Checks if a private Google Container Registry (GCR) repository has vulnerability scanning enabled. The rule is NON_COMPLIANT if the private GCR repository's scan frequency is not set to scan on push or continuous scan. For more information on enabling vulnerability scanning, see Vulnerability scanning in the Google Container Registry documentation.",
    "function_name": "container_registry_vulnerability_scanning_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_760",
    "description": "Verifies if the specified applications are installed on a Google Cloud instance, with the option to define the minimum acceptable version and restrict the rule to specific platforms (e.g., Linux, Windows).",
    "function_name": "compute_instance_application_version_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_761",
    "description": "Checks if the compliance status of the Google Cloud OS Config patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_os_config_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_762",
    "description": "Checks if a private Google Container Registry (GCR) repository has vulnerability scanning enabled. The rule is NON_COMPLIANT if the private GCR repository's scan frequency is not set to scan on push or continuous scan. For more information on enabling image vulnerability scanning, see Container Analysis API documentation.",
    "function_name": "container_registry_repository_vulnerability_scanning_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "containeranalysis_client.projects().notes().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_763",
    "description": "Checks if all of the specified applications are installed on the Google Compute Engine instance. Optionally, specify the minimum acceptable version. You can also specify the platform to apply the rule only to instances running that platform.",
    "function_name": "compute_instance_applications_installed_version_platform",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_764",
    "description": "Checks if the compliance status of Google Cloud's OS Config patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_os_config_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_765",
    "description": "Checks if a private Google Container Registry (GCR) repository has vulnerability scanning enabled. The rule is NON_COMPLIANT if the private GCR repository's scan setting is not set to either scan on push or continuous scanning. For more information on enabling vulnerability scanning, see the Google Cloud documentation for Container Analysis.",
    "function_name": "container_registry_vulnerability_scanning_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_766",
    "description": "Checks whether a Google Cloud Load Balancer or Cloud CDN has Google Cloud Armor protection. It also checks if they have Security Policies associated for Google Cloud Load Balancer and Cloud CDN.",
    "function_name": "network_load_balancer_cloud_armor_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_767",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled in your Google Cloud account and project. If you provide a GCP project for centralization, the rule evaluates the SCC results in the centralized project. The rule is COMPLIANT when SCC is enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/my-project/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_768",
    "description": "Checks whether a Google Cloud Load Balancer or Cloud CDN has Google Cloud Armor protection. It also checks if they have security policies associated for Google Cloud Load Balancer and Cloud CDN.",
    "function_name": "network_load_balancer_cdn_armor_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_769",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled in your GCP project. The rule evaluates the SCC results in the specified GCP project. The rule is COMPLIANT when Security Command Center is enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_770",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_771",
    "description": "Checks if Google Cloud Monitoring Uptime Checks have an alerting policy configured for the HEALTHY, UNHEALTHY, or DISABLED state. Optionally checks if any actions match a specific notification channel. The rule is NON_COMPLIANT if there is no action specified for the alerting policy or optional parameter.",
    "function_name": "monitoring_uptime_checks_alerting_policy_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_772",
    "description": "Checks whether Google Cloud Monitoring alerts with the given metric name have the specified settings.",
    "function_name": "monitoring_alerts_metric_settings",
    "service_category": "Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_773",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Google Cloud Logging. The audit log configuration is NON_COMPLIANT if the log sink is not set up or does not route logs correctly.",
    "function_name": "logging_audit_logs_configured_to_logging",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_774",
    "description": "Checks if Google Cloud Storage Object Change Notifications are enabled on a Cloud Storage bucket. The rule is NON_COMPLIANT if Cloud Storage Object Change Notifications are not set on a bucket, or if the notification type or destination do not match the event types and destination fields.",
    "function_name": "storage_bucket_object_change_notifications_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).notification()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_775",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for message delivery status of notifications sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_776",
    "description": "Checks if your Google Cloud Deployment Manager templates send notifications to a Google Cloud Pub/Sub topic. The rule is NON_COMPLIANT if Deployment Manager templates do not send notifications.",
    "function_name": "deploymentmanager_templates_pubsub_notifications_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_777",
    "description": "Checks if Google Cloud Monitoring alert policies have an action configured for the ALERT, NO_DATA, or OK state. Optionally checks if any actions match a specified notification channel. The rule is NON_COMPLIANT if there is no action specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_778",
    "description": "Checks whether Google Cloud Monitoring alerting policies with the given metric type have the specified settings.",
    "function_name": "monitoring_alerting_policy_metric_settings",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_779",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Cloud Logging. The audit log configuration is NON_COMPLIANT if the corresponding sink is not creating logs in Cloud Logging.",
    "function_name": "logging_audit_logs_sink_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_780",
    "description": "Checks if Google Cloud Storage (GCS) Notifications are enabled on a GCS bucket. The rule is NON_COMPLIANT if GCS Notifications are not set on a bucket, or if the event type or destination do not match the defined event types and notification destination.",
    "function_name": "storage_bucket_notifications_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_781",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_782",
    "description": "Checks if your Google Cloud Deployment Manager templates send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager templates do not send notifications.",
    "function_name": "deploymentmanager_templates_pubsub_notifications",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_783",
    "description": "Checks if Google Cloud Monitoring alerts have an action configured for the ALERT, NO_DATA, or OK state. Optionally checks if any actions match a named notification channel. The rule is NON_COMPLIANT if there is no action specified for the alert or optional parameter.",
    "function_name": "monitoring_alerts_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_784",
    "description": "Checks whether Google Cloud Monitoring alert policies with the given metric type have the specified settings.",
    "function_name": "monitoring_alert_policy_metric_settings",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_785",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Google Cloud Logging. The audit log is NON_COMPLIANT if the log sink is not configured to export logs to Cloud Logging.",
    "function_name": "logging_audit_logs_configured_to_cloud_logging",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_786",
    "description": "Checks if Google Cloud Storage Notifications are enabled on a Cloud Storage bucket. The rule is NON_COMPLIANT if Cloud Storage Notifications are not set on a bucket, or if the event type or destination do not match the specified eventTypes and destination parameters.",
    "function_name": "storage_bucket_notifications_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).notification()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_787",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for message delivery status notifications sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notifications for messages are not enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_788",
    "description": "Checks if Google Cloud Resource Manager shares projects with an organization when integration is enabled with Cloud Identity. The rule is NON_COMPLIANT if the project is shared with individual users rather than the organization.",
    "function_name": "resource_manager_project_organization_sharing",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudresourcemanager.projects().getIamPolicy(resource='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_789",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP load balancers. The rule is NON_COMPLIANT if one or more HTTP load balancers do not have HTTP to HTTPS redirection configured, or if one or more HTTP load balancers have forwarding to an HTTP backend instead of redirection.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().list(project='proj', region='region')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_790",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN configuration if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_no_deprecated_ssl_protocols",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_791",
    "description": "Checks if Google Cloud CDN backends are using a minimum security policy and cipher suite of TLSv1.2 or greater for viewer connections. This rule is NON_COMPLIANT for a Cloud CDN backend if the minimumProtocolVersion is below TLSv1.2.",
    "function_name": "network_cdn_backend_tls_minimum_protocol_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_792",
    "description": "Checks if Google Cloud CDN services are using a custom SSL certificate and are configured to use SNI to serve HTTPS requests. The rule is NON_COMPLIANT if a custom SSL certificate is associated but the SSL support method is a dedicated IP address.",
    "function_name": "network_cdn_ssl_sni_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_793",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'OriginProtocolPolicy' is set to 'HTTP_ONLY' or if 'OriginProtocolPolicy' is set to 'match-viewer' and 'ViewerProtocolPolicy' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_origin_encryption_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_794",
    "description": "Checks if your Google Cloud CDN configurations use HTTPS for serving content. The rule is NON_COMPLIANT if the value of 'enableBackendService' is set to 'true' without enforcing HTTPS for backend services.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_795",
    "description": "Check if Google Cloud Search nodes are encrypted end to end. The rule is NON_COMPLIANT if node-to-node encryption is not enabled on the service.",
    "function_name": "compute_cloud_search_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_796",
    "description": "Checks whether your Google Cloud Load Balancer SSL proxies are using a custom SSL policy. The rule is only applicable if there are SSL proxies for the Load Balancer.",
    "function_name": "network_load_balancer_ssl_proxies_custom_ssl_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_797",
    "description": "Checks if your Google Cloud Load Balancer SSL certificates use a predefined policy. The rule is NON_COMPLIANT if the Google Cloud Load Balancer's HTTPS/SSL certificate policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_certificates_predefined_policy_enforced",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_798",
    "description": "Checks if your Cloud Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_listeners_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_799",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if no security configuration is attached to the cluster or the security configuration does not meet the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_800",
    "description": "Checks whether connections to Google Cloud Elasticsearch clusters are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch cluster 'enableHttps' is not true or is true, and 'minimumTlsVersion' is not in 'tlsVersions'.",
    "function_name": "dataproc_cluster_https_tls_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_801",
    "description": "Check if Google Cloud's Elasticsearch Service nodes are encrypted end-to-end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the Elasticsearch instance.",
    "function_name": "compute_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_802",
    "description": "Checks if Google BigQuery datasets require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any Google BigQuery dataset does not have encryption enabled for data in transit.",
    "function_name": "bigquery_dataset_encryption_in_transit_required",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_803",
    "description": "Checks if Cloud Storage buckets have policies that require requests to use HTTPS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_https_policy_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_804",
    "description": "Checks if a server created with Google Cloud Storage uses FTP for data transfer. The rule is NON_COMPLIANT if the server protocol for data transfer is FTP-enabled.",
    "function_name": "storage_bucket_protocol_no_ftp",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_805",
    "description": "Checks if Google Cloud Firewall rules allow unrestricted incoming traffic ('0.0.0.0/0' or '::/0') and verify if only authorized TCP or UDP connections on specified ports are permitted. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_incoming_traffic",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_806",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP load balancers. The rule is NON_COMPLIANT if one or more HTTP load balancers do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP load balancers have forwarding to an HTTP load balancer instead of redirection.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().list(project='proj', region='region')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_807",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between edge locations and custom origins. This rule is NON_COMPLIANT for a Cloud CDN configuration if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_origin_ssl_protocols_no_sslv3",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_808",
    "description": "Checks if Google Cloud CDN configurations are encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'originProtocol' is 'HTTP_ONLY' or if 'originProtocol' is 'MATCH_VIEWER' and 'viewerProtocol' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_origin_encryption_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_809",
    "description": "Checks if your Google Cloud CDN configurations use HTTPS. The rule is NON_COMPLIANT if the value of 'enableHttp2' is set to 'true' while 'enableCaching' is set to 'true', but the backend service does not support HTTPS.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_810",
    "description": "Checks if your Google Cloud Firestore in Datastore mode has TLS enabled for secure connections. The rule is NON_COMPLIANT if Firestore is not encrypted by transport layer security (TLS).",
    "function_name": "firestore_datastore_tls_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_811",
    "description": "Checks if Google Cloud Database Migration service endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if Google Cloud Database Migration service does not have an SSL connection configured.",
    "function_name": "datamigration_endpoints_ssl_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_812",
    "description": "Checks if Google Cloud Database Migration Service endpoints for Redis data stores are enabled for TLS/SSL encryption of data communicated with other endpoints. The rule is NON_COMPLIANT if TLS/SSL encryption is not enabled.",
    "function_name": "datamigration_redis_tls_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_813",
    "description": "Checks if Google Cloud Memorystore (Redis) instances have encryption-in-transit enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transit_encryption_mode' is set to 'DISABLED'.",
    "function_name": "memorystore_instance_encryption_in_transit_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_814",
    "description": "Check if Google Cloud's Elasticsearch service (operated through Google Cloud Marketplace) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the Elasticsearch cluster.",
    "function_name": "marketplace_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "marketplace_client.projects().locations().clusters().get(project='proj', location='loc', cluster='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_815",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers and does not check other types of load balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_816",
    "description": "Checks whether your Google Cloud Load Balancer SSL proxies are using a custom SSL policy. The rule is only applicable if there are SSL proxy listeners configured for the Load Balancer.",
    "function_name": "network_load_balancer_ssl_proxy_custom_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_817",
    "description": "Checks if your Google Cloud Platform (GCP) HTTPS Load Balancer SSL certificates are using a predefined policy. The rule is NON_COMPLIANT if the HTTPS Load Balancer SSL certificate's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_https_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_818",
    "description": "Checks if your Google Cloud Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_819",
    "description": "Checks if Google Cloud Dataproc clusters have IAM conditions enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_iam_conditions_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_820",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) for communication with the subscribers of the topic. The rule is NON_COMPLIANT if plain text communication is enabled for in-transit messages.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_821",
    "description": "Checks whether connections to Google Cloud Elasticsearch (GCP equivalent of OpenSearch) are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch domain 'enableHttps' is not 'true' or is 'true' and 'tlsPolicy' is not in the allowed TLS policies.",
    "function_name": "network_elasticsearch_https_enabled_tls_policy_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.elasticsearch().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_822",
    "description": "Check if Google Cloud's Elasticsearch on GCP (via Google Cloud Marketplace) has end-to-end encryption enabled. The rule is NON_COMPLIANT if the node-to-node encryption is not activated.",
    "function_name": "marketplace_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_823",
    "description": "Checks if Google BigQuery datasets require secure access (TLS/SSL encryption) for connections. The rule is NON_COMPLIANT if any Google BigQuery dataset does not enforce secure connections.",
    "function_name": "bigquery_datasets_enforce_secure_connections",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id').access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_824",
    "description": "Checks if Cloud Storage buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_ssl_tls_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_825",
    "description": "Checks if a backup plan in Google Cloud Platform has a backup policy that meets the necessary frequency and retention duration. The policy is NON_COMPLIANT if recovery snapshots are not taken with the required frequency or if they expire before the designated retention time.",
    "function_name": "compute_backup_plan_policy_frequency_and_retention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_826",
    "description": "Checks if a Cloud Storage object (recovery point) retains data for at least the specified retention period. The rule is NON_COMPLIANT if the object's retention policy is less than the required retention duration.",
    "function_name": "storage_object_retention_policy_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_blob('object_name').retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_827",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_828",
    "description": "Checks if a Google Cloud Firestore database retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_id').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_829",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore collections. The rule is NON_COMPLIANT if PITR is not enabled for Firestore collections.",
    "function_name": "firestore_collections_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_830",
    "description": "Checks if Persistent Disks are attached to Google Compute Engine instances. Optionally checks if Persistent Disks are set to delete on instance termination.",
    "function_name": "compute_persistent_disks_attached_delete_on_termination",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_831",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_832",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration or the configuration does not match the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_833",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have lifecycle policies configured. The rule is NON_COMPLIANT if the GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_834",
    "description": "Verifies if a backup policy has a backup job that meets the necessary schedule and retention criteria. The job is deemed NON_COMPLIANT if recovery snapshots are not created at least as frequently as defined by the schedule or if they expire before the defined retention period.",
    "function_name": "compute_disks_backup_policy_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_835",
    "description": "Checks if a recovery point expiration in Google Cloud Platform (GCP) meets the specified retention period requirements. The rule is NON_COMPLIANT if the recovery point has a retention period shorter than the required retention period, specifically for services like Google Cloud Storage or Google Cloud Backup and DR.",
    "function_name": "storage_recovery_point_retention_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_836",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_365_days",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_837",
    "description": "Checks if a Google Cloud Firestore database's retention policy is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_policy_days",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('my_collection').document('my_document').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_838",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Cloud Firestore or Cloud Bigtable tables. The rule is NON_COMPLIANT if PITR is not enabled for these tables.",
    "function_name": "firestore_bigtable_tables_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().documents().get(name='projects/my-project/databases/(default)/documents/my-collection/my-document')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_839",
    "description": "Checks if Persistent Disk volumes are attached to Compute Engine instances. Optionally checks if Persistent Disk volumes are configured to be deleted when an instance is terminated.",
    "function_name": "compute_disk_attached_to_instance_delete_on_termination",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_840",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_841",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_rules()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_842",
    "description": "Checks if Google Cloud Storage (GCS) version-enabled buckets have lifecycle management policies configured. The rule is NON_COMPLIANT if GCS lifecycle management policies are not enabled.",
    "function_name": "storage_bucket_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_843",
    "description": "Checks if a backup plan has a backup rule that meets the required frequency and retention period in Google Cloud Platform (GCP). The rule is considered NON_COMPLIANT if recovery points are not created at least as frequently as the specified frequency or if they expire before the defined retention period.",
    "function_name": "storage_backup_plan_frequency_and_retention_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_844",
    "description": "Verifies that a backup in Google Cloud Storage does not expire before the specified retention period. The rule is NON_COMPLIANT if the backup's retention policy is set to less than the required retention period.",
    "function_name": "storage_bucket_retention_policy_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_845",
    "description": "Checks if a Google Cloud Logging Log Bucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_log_bucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_846",
    "description": "Checks if a Google Cloud Firestore database's retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_compliant",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('my_collection').document('my_document').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_847",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore databases. The rule is NON_COMPLIANT if PITR is not enabled for Firestore databases.",
    "function_name": "firestore_database_pitr_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.get_database(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_848",
    "description": "Checks if Persistent Disks are attached to Compute Engine instances. Optionally checks if Persistent Disks are set to delete on instance termination.",
    "function_name": "compute_persistent_disks_attached_delete_on_termination",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_849",
    "description": "Checks if a private Google Container Registry (GCR) has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().getIamPolicy(resource='projects/my-project/locations/us-central1/repositories/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_850",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage (GCS) bucket. The rule is NON_COMPLIANT if there is no active Object Lifecycle Management configuration or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_851",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have lifecycle policies configured. The rule is NON_COMPLIANT if GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_852",
    "description": "Verifies if a backup plan has a backup policy that meets the required frequency and retention period. The policy is NON_COMPLIANT if recovery points are not created at least as frequently as specified or are deleted before the required retention duration.",
    "function_name": "storage_backup_policy_frequency_and_retention_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_853",
    "description": "Checks if a backup in Cloud Storage or Persistent Disk has a retention period that meets or exceeds the specified duration. The rule is NON_COMPLIANT if the backup retention policy is shorter than required.",
    "function_name": "storage_backup_retention_policy_compliant",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_854",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_365_days",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_855",
    "description": "Checks if a Google Cloud Firestore database's retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_id').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_856",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore. The rule is NON_COMPLIANT if PITR is not enabled for Firestore.",
    "function_name": "firestore_database_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_857",
    "description": "Checks if Persistent Disks are attached to Compute Engine instances. Optionally checks if Persistent Disks are set to be deleted when the instance is deleted.",
    "function_name": "compute_persistent_disks_attached_and_auto_delete",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_858",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container.projects().locations().repositories().getIamPolicy(resource='projects/my-project/locations/global/repositories/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_859",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage (GCS) bucket. The rule is NON_COMPLIANT if there are no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_860",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have a lifecycle management policy configured. The rule is NON_COMPLIANT if GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_861",
    "description": "Verifies if a backup policy in GCP has a backup rule that meets the necessary frequency and retention criteria. The rule is deemed NON_COMPLIANT if recovery snapshots are not created at least as frequently as specified in the policy or if they expire before the established retention period.",
    "function_name": "compute_backup_policy_frequency_retention_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_862",
    "description": "Checks if a backup retention policy for Google Cloud Storage complies with the specified retention period. The rule is NON_COMPLIANT if the backup's retention setting is less than the required duration.",
    "function_name": "storage_bucket_retention_policy_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_863",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_864",
    "description": "Checks if a Google Cloud Firestore database retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_set",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_865",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore or Cloud Spanner databases. The rule is NON_COMPLIANT if PITR is not enabled for Firestore or Spanner databases.",
    "function_name": "firestore_spanner_databases_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_866",
    "description": "Checks if Persistent Disks are attached to Compute Engine instances. Optionally checks if Persistent Disks are set to be deleted when the instance is terminated.",
    "function_name": "compute_instance_persistent_disks_attached_delete_on_terminate",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_867",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_868",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_rules()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_869",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have a retention policy configured. The rule is NON_COMPLIANT if GCS retention policy is not enabled.",
    "function_name": "storage_bucket_versioning_retention_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_870",
    "description": "Checks if Google Cloud Platform (GCP) SSL Certificates are marked for expiration within the specified number of days. GCP manages SSL certificates through Google-managed SSL certificates which are automatically renewed; however, user-managed certificates need manual renewal. The rule is NON_COMPLIANT if your SSL certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_871",
    "description": "Checks if Google Cloud's Certificate Authority Service has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "certificate_authority_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_872",
    "description": "Checks if a Cloud Endpoints API service uses a valid SSL certificate. The rule is NON_COMPLIANT if the API service does not have an associated SSL certificate enabled.",
    "function_name": "endpoints_api_ssl_certificate_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='projects/project_id/services/service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_873",
    "description": "Checks if the certificate associated with a Google Cloud CDN (Content Delivery Network) is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN distribution uses the default SSL certificate.",
    "function_name": "network_cdn_certificate_custom_ssl",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_874",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Certificate Manager or is configured with a certificate different from a Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_manager",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_875",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, an SSL or HTTPS listener must be configured with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers and does not apply to other types of load balancers in GCP.",
    "function_name": "network_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_876",
    "description": "Checks if the managed Google Cloud IAM policies you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_877",
    "description": "Checks if the IAM policies attached to your GCP Service Accounts do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in a policy.",
    "function_name": "iam_service_accounts_restrict_kms_key_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/sa')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_878",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/project/locations/location/keyRings/keyRing/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_879",
    "description": "Checks if Google Cloud Certificate Manager Certificates in your account are marked for expiration within the specified number of days. Certificates provided by Certificate Manager are automatically renewed if they are managed by Google Cloud. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_880",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_881",
    "description": "Checks if an API Gateway endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway endpoint does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_882",
    "description": "Checks if a Backup Vault in GCP has an attached resource-based policy that prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have resource-based policies or has policies lacking a suitable 'Deny' statement (statement with 'storage.objects.delete', 'storage.objects.update', and 'storage.buckets.setIamPolicy' permissions).",
    "function_name": "storage_backup_vault_prevent_deletion_policy",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_883",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN configuration uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_884",
    "description": "Checks if Google Cloud Database Migration Service (Google Cloud DMS) instances are public. The rule is NON_COMPLIANT if the 'public' field is set to true.",
    "function_name": "dms_instance_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_885",
    "description": "Checks if Google Cloud Firestore database backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore database backups are public.",
    "function_name": "firestore_backup_non_public",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_886",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots are shared with all users, indicating that Google Cloud Persistent Disk snapshots are public.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_887",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the ReadOnlyRootFilesystem parameter in the container specifications of a Kubernetes Pod is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_888",
    "description": "Checks if Google Cloud Filestore access control is configured to enforce a root directory. The rule is NON_COMPLIANT if the access path is set to '/' (default root directory of the file system).",
    "function_name": "filestore_access_control_enforce_root_directory",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_889",
    "description": "Checks if Google Cloud Filestore instances are configured to enforce user identity. The rule is NON_COMPLIANT if 'POSIX user' is not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "function_name": "filestore_instance_enforce_user_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_890",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Managed Certificates or other trusted Certificate Authority. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a valid SSL certificate or is configured with a certificate that is not trusted.",
    "function_name": "network_load_balancer_backend_ssl_certificate_trusted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_891",
    "description": "Checks if the Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS backend service with your Global or Regional Load Balancer. This rule is only applicable to HTTP(S) Load Balancers and does not check TCP/UDP Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_892",
    "description": "Checks if a Google Cloud Platform project has VPC firewall rules configured to block public access settings. The rule is NON_COMPLIANT if the ingress firewall rules allow traffic from 0.0.0.0/0 on ports other than port 22.",
    "function_name": "network_vpc_firewall_block_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_893",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_894",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not permit actions that are blocked on all GCP KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on any GCP KMS key in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_895",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) keys are not scheduled for deletion in GCP KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_896",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_v1.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_897",
    "description": "Checks if a Google Cloud SQL database instance snapshot is public. The rule is NON_COMPLIANT if any existing and new Cloud SQL snapshot is public.",
    "function_name": "sql_instance_snapshot_non_public",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_898",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration.enablePublicIp' field is true in the instance configuration.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_899",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.backupRuns().list(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_900",
    "description": "Checks if Google BigQuery datasets have public access enabled. The rule is NON_COMPLIANT if the 'access' field contains any entries allowing public (allUsers) access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_901",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_902",
    "description": "Checks if the required public access prevention settings are configured at the project level in Google Cloud. The rule is only NON_COMPLIANT when the fields set below do not match the corresponding fields in the configuration item.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_903",
    "description": "Checks if the required Public Access prevention settings are configured at the project level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_904",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_905",
    "description": "Checks if Object Versioning is enabled on a Google Cloud Storage (GCS) bucket, as MFA Delete equivalent functionality is not available. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_906",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, bucket policy, and bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_907",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule examines the bucket IAM policies, access control policies, and uniform bucket-level access settings.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_908",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebooks instance. The rule is NON_COMPLIANT if an AI Platform Notebooks instance is internet-enabled.",
    "function_name": "ai_platform_notebooks_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_909",
    "description": "Checks if Google Cloud Document AI processor resources owned by the account are public. The rule is NON_COMPLIANT if Document AI processors with the owner 'Self' are public.",
    "function_name": "documentai_processor_nonpublic_self_owned",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "documentai_client.projects().locations().processors().get(name='processor_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_910",
    "description": "Checks if all methods in Google Cloud Endpoints services have caching enabled and cache encrypted. The rule is NON_COMPLIANT if any method in a Google Cloud Endpoints service is not configured to cache or the cache is not encrypted.",
    "function_name": "endpoints_methods_cache_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_911",
    "description": "Checks if a Google BigQuery dataset is encrypted at rest. The rule is NON_COMPLIANT if encryption of data at rest is not enabled for a BigQuery dataset.",
    "function_name": "bigquery_dataset_encryption_at_rest_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_912",
    "description": "Checks if a Google Cloud Platform (GCP) recovery point is encrypted. The rule is NON_COMPLIANT if the recovery point is not encrypted.",
    "function_name": "compute_recovery_point_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_913",
    "description": "Checks if Google Cloud Logging log sinks are encrypted with a specified Google Cloud KMS key. The rule is NON_COMPLIANT if a log sink is not encrypted with any KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "function_name": "logging_log_sinks_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_914",
    "description": "Checks if Google Cloud Audit Logs is configured to use the Google Cloud Key Management Service (Cloud KMS) for encryption. The rule is COMPLIANT if the KmsKeyId is defined.",
    "function_name": "logging_audit_logs_encryption_with_kms",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_915",
    "description": "Checks if a Google Cloud Build trigger has encryption enabled for all of its artifacts. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' for any primary or secondary (if present) artifact configurations.",
    "function_name": "cloudbuild_trigger_artifacts_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_916",
    "description": "Checks if the project contains environment variables GOOGLE_CLOUD_ACCESS_KEY and GOOGLE_CLOUD_SECRET_KEY. The rule is NON_COMPLIANT when the project environment variables contain plaintext credentials.",
    "function_name": "compute_project_no_plaintext_credentials",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_917",
    "description": "Checks if a Google Cloud Build project configured with Google Cloud Storage (GCS) Logs has encryption enabled for its logs. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' in the 'storage' configuration of a Cloud Build project.",
    "function_name": "cloudbuild_project_storage_logs_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_918",
    "description": "Checks if Google Cloud Firestore or Google Cloud Bigtable instances are encrypted. The rule is NON_COMPLIANT if a Firestore or Bigtable instance is not encrypted.",
    "function_name": "firestore_bigtable_instance_encryption",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.get_document(document_path='projects/project_id/databases/(default)/documents/collection/document_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_919",
    "description": "Checks if storage encryption is enabled for your Google Cloud Firestore databases. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "firestore_database_storage_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_920",
    "description": "Checks if Google Cloud Firestore or Google Cloud Bigtable table is encrypted with Google Cloud Key Management Service (KMS). The rule is NON_COMPLIANT if the Firestore or Bigtable table is not encrypted with Google Cloud KMS. The rule is also NON_COMPLIANT if the encrypted Google Cloud KMS key is not present in the keyResourceIds input parameter.",
    "function_name": "firestore_bigtable_encryption_with_kms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/my-project/locations/global/keyRings/my-key-ring/cryptoKeys/my-key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_921",
    "description": "Checks if the Google Cloud Firestore databases are encrypted and checks their status. The rule is COMPLIANT if the status is enabled or enabling.",
    "function_name": "firestore_database_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_922",
    "description": "Checks if Google Cloud Persistent Disk encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled.",
    "function_name": "compute_disk_default_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_923",
    "description": "Verifies if secrets are passed as environment variables in Google Cloud Platform containers. The rule is NON_COMPLIANT if any environment variable key matches a key listed in the 'secretKeys' parameter (excluding environment variables from other sources such as Google Cloud Storage).",
    "function_name": "container_environment_variables_no_secrets",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_924",
    "description": "Checks if Google Cloud Filestore is configured to encrypt file data using Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if the 'fileShare.encryptionKey.name' is not set or does not match the required KMS key.",
    "function_name": "filestore_fileshare_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_925",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud KMS. The rule is NON_COMPLIANT if a GKE cluster does not have the appropriate encryption settings in place or if secrets are not being encrypted using the specified KMS key.",
    "function_name": "container_gke_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_926",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud KMS (Key Management Service).",
    "function_name": "container_gke_clusters_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_927",
    "description": "Checks if Google Cloud Memorystore for Redis instances have encryption-at-rest enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'redis_version' does not support encryption or if the KMS key does not match the approved KMS key settings.",
    "function_name": "memorystore_redis_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.instances().get(project='proj', location='location', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_928",
    "description": "Checks if Google Cloud Elasticsearch (managed by Google Cloud) has encryption at rest configuration enabled. The rule is NON_COMPLIANT if the encryption at rest option is not enabled.",
    "function_name": "compute_elasticsearch_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_929",
    "description": "Checks if attached Google Cloud Persistent Disks are encrypted and optionally are encrypted with a specified CMEK (Customer Managed Encryption Keys). The rule is NON_COMPLIANT if attached Persistent Disks are unencrypted or are encrypted with a CMEK key not in the supplied parameters.",
    "function_name": "compute_persistent_disks_encrypted_with_cmek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_930",
    "description": "Checks if Google Cloud Pub/Sub topics are encrypted at rest with Google-managed encryption. The rule is NON_COMPLIANT for a Pub/Sub topic if 'encryptionConfiguration' is not present.",
    "function_name": "pubsub_topic_encryption_google_managed",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_931",
    "description": "Checks if storage encryption is enabled for your Google Cloud SQL instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "sql_instances_storage_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_932",
    "description": "Checks if a Google Cloud SQL instance has automated backups encrypted. The rule is NON_COMPLIANT if a Cloud SQL instance does not have automated backups encrypted.",
    "function_name": "sql_instance_backup_encryption",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_933",
    "description": "Checks if Google Cloud's Elasticsearch (GCP equivalent of Amazon OpenSearch Service) instances have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the 'encryption' settings are not enabled.",
    "function_name": "compute_elasticsearch_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_934",
    "description": "Checks if a Google Cloud SQL instance is encrypted at rest. The rule is NON_COMPLIANT if a Google Cloud SQL instance is not encrypted at rest.",
    "function_name": "sql_instance_encryption_at_rest",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_935",
    "description": "Checks if Google Cloud SQL database backups are encrypted. The rule is NON_COMPLIANT if the Google Cloud SQL database backups are not encrypted.",
    "function_name": "sql_database_backups_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.backupRuns().list(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_936",
    "description": "Checks if storage encryption is enabled for your Google Cloud SQL instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "sql_instances_storage_encryption_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_937",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_938",
    "description": "Checks if Google BigQuery datasets are using a specified Google Cloud Key Management Service (GCP KMS) key for encryption. The rule is COMPLIANT if encryption is enabled and the dataset is encrypted with the key provided in the kmsKeyResource parameter. The rule is NON_COMPLIANT if the dataset is not encrypted or encrypted with another key.",
    "function_name": "bigquery_dataset_encryption_with_specified_kms_key",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_939",
    "description": "Checks if your Google Cloud Storage bucket has default object encryption enabled or that the bucket policy explicitly denies upload requests without server-side encryption. The rule is NON_COMPLIANT if your Google Cloud Storage bucket is not encrypted by default.",
    "function_name": "storage_bucket_default_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).default_kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_940",
    "description": "Checks if GCS buckets are encrypted with Google Cloud Key Management Service (Cloud KMS). The rule is NON_COMPLIANT if the GCS bucket is not encrypted with a Cloud KMS key.",
    "function_name": "storage_bucket_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_941",
    "description": "Checks if Google Cloud KMS (Cloud Key Management Service) key is configured for a Google AI Platform endpoint configuration. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the Google AI Platform endpoint configuration.",
    "function_name": "ai_platform_endpoint_kms_key_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "ai_platform_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_942",
    "description": "Checks if a Google Cloud Key Management Service (Google Cloud KMS) key is configured for a Google AI Platform notebook instance. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the AI Platform notebook instance.",
    "function_name": "ai_platform_notebook_kms_key_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_943",
    "description": "Checks if all secrets in Google Cloud Secret Manager are encrypted using a customer managed encryption key (CMEK) created in Google Cloud Key Management Service (KMS). The rule is COMPLIANT if a secret is encrypted using a customer managed key. This rule is NON_COMPLIANT if a secret is encrypted using the default Google-managed encryption keys.",
    "function_name": "secretmanager_secret_cmek_encrypted",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_944",
    "description": "Checks if Pub/Sub topics are encrypted with Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if a Pub/Sub topic is not encrypted with Google Cloud KMS. Optionally, specify the key resource names for the rule to check.",
    "function_name": "pubsub_topic_encryption_with_kms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_945",
    "description": "Checks if Google Cloud Certificate Manager certificates in your account are marked for expiration within the specified number of days. Certificates managed by Google Cloud Certificate Manager are automatically renewed, but those imported from other providers are not. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_946",
    "description": "Checks if Google Cloud Certificate Authority Service (Google CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_disabled_status",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_947",
    "description": "Checks if a Google Cloud Endpoints API has an SSL certificate associated with its configuration. The rule is NON_COMPLIANT if the API does not have an associated SSL certificate for secure communication.",
    "function_name": "endpoints_api_ssl_certificate_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_948",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().get(project='proj', sslCertificate='cert_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_949",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without an SSL certificate or is configured with a certificate that is not from Google Cloud Certificate Manager.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_950",
    "description": "Checks if the Classic Load Balancers use SSL certificates provided by Google Cloud SSL Certificates. To use this rule, an SSL or HTTPS load balancer configuration must be applied with your load balancer in GCP. This rule is only applicable to HTTP(S) Load Balancers. This rule does not check TCP Proxy Load Balancers and Internal Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_951",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_952",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_953",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) keys are not scheduled for deletion in GCP KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_954",
    "description": "Checks if Google Cloud Platform SSL Certificates in your project are marked for expiration within the specified number of days. Google-managed SSL certificates are automatically renewed. User-managed certificates are not automatically renewed. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_955",
    "description": "Checks if Google Cloud Certificate Authority Service (Google Cloud CA) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with a status that is not DISABLED.",
    "function_name": "security_certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_956",
    "description": "Checks if a Google Cloud HTTP(S) Load Balancer front-end configuration uses an SSL certificate. The rule is NON_COMPLIANT if the load balancer does not have an associated SSL certificate.",
    "function_name": "network_load_balancer_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_957",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_958",
    "description": "Checks if Google Cloud Load Balancers (both HTTP(S) Load Balancers and TCP/UDP Load Balancers) have backend services and target proxies configured to use certificates from Google-managed SSL Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service or target proxy that is configured without a Google-managed SSL Certificate or is configured with a certificate different from a Google-managed SSL Certificate.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_959",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend configuration with your Google Cloud Load Balancer. This rule is only applicable to HTTPS Load Balancers. This rule does not check TCP Load Balancers or Internal Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_960",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_961",
    "description": "Checks if the IAM policies attached to your GCP users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_962",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_963",
    "description": "Checks if Google Cloud Certificate Manager Certificates in your project are marked for expiration within the specified number of days. Certificates provided by Certificate Manager are automatically renewed. Certificate Manager does not automatically renew certificates that you import. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_check",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_964",
    "description": "Checks if Google Cloud Certificate Authority Service has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_authority_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_965",
    "description": "Checks if an API Gateway stage uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway stage does not have an associated SSL certificate.",
    "function_name": "apigateway_stage_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_966",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is a default certificate. The rule is NON_COMPLIANT if a Google Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().get(project='proj', sslCertificate='cert_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_967",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with HTTPS certificates from Google Managed SSL Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a Google Managed SSL certificate or is configured with a certificate not issued by Google.",
    "function_name": "network_load_balancer_backend_https_google_managed_ssl",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_968",
    "description": "Checks if the Google Cloud HTTP(S) Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure that an SSL or HTTPS frontend configuration is set up with your HTTP(S) Load Balancer. This rule is only applicable to HTTP(S) Load Balancers. This rule does not check TCP/SSL Proxy Load Balancers or Internal Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_969",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "kms_keys_iam_policy_no_blocked_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.policies().get(name='projects/my-project/policies/my-policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_970",
    "description": "Checks if the IAM policies attached to your GCP users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_971",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) keys are not scheduled for deletion in GCP KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_972",
    "description": "Checks if Google Cloud Certificate Manager SSL Certificates in your account are marked for expiration within the specified number of days. Certificates managed by Google Cloud are automatically renewed. Certificates that are imported do not renew automatically. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_973",
    "description": "Checks if Google Cloud Certificate Authority Service (CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_974",
    "description": "Checks if a Google Cloud Endpoints API has an SSL certificate. The rule is NON_COMPLIANT if the Google Cloud Endpoints API does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(project='proj', location='global', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_975",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_976",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backends that are configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud certificate.",
    "function_name": "network_load_balancer_backends_use_gcp_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_977",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure you have an SSL or HTTPS listener configured with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers. This rule does not check other types of load balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_978",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_979",
    "description": "Checks if the IAM policies attached to your Google Cloud users, service accounts, and groups do not permit actions that are blocked for all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed for all Google Cloud KMS keys in a policy.",
    "function_name": "iam_policy_no_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_980",
    "description": "Checks if Google Cloud Key Management Service (Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_981",
    "description": "Checks if Google Cloud Certificate Manager certificates in your account are marked for expiration within the specified number of days. Certificates in Google Cloud can be managed, including automatic renewals for managed certificates. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_982",
    "description": "Checks if RSA certificates managed by Google Cloud's Certificate Manager have a key length of at least '2048' bits. The rule is NON_COMPLIANT if the minimum key length is less than 2048 bits.",
    "function_name": "certificate_manager_rsa_key_minimum_length_2048_bits",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().get(project='proj', location='location', certificate='cert')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_983",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with a status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/location/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_984",
    "description": "Checks if a Cloud Endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the Cloud Endpoint does not have an associated SSL certificate.",
    "function_name": "network_endpoint_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_985",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN configuration uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_986",
    "description": "Checks if Google Cloud HTTPS Load Balancers have backend services configured with SSL/TLS certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 HTTPS Load Balancer has at least 1 backend service that is configured without a SSL/TLS certificate from Google Cloud Certificate Manager or is configured with a certificate different from those managed by Google Cloud Certificate Manager.",
    "function_name": "network_https_load_balancer_ssl_tls_certificate_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_987",
    "description": "Checks if the Global Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend with your Global Load Balancer. This rule is only applicable to Global Load Balancers. This rule does not check Regional Load Balancers or Internal Load Balancers.",
    "function_name": "network_global_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_988",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_989",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on any Google Cloud KMS key in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_990",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_991",
    "description": "Checks if Google Cloud's Certificate Manager Certificates in your project are marked for expiration within the specified number of days. Certificates provided by Google Cloud are automatically renewed. Google Cloud does not automatically renew certificates that you import. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_992",
    "description": "Checks if Google Cloud Private CA has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "privateca_root_ca_disabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "privateca_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_993",
    "description": "Checks if a Cloud Endpoints API uses an SSL certificate. The rule is NON_COMPLIANT if the Cloud Endpoints API does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_994",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_995",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without an SSL certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_996",
    "description": "Checks if the HTTPS Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an HTTPS or SSL proxy load balancer. This rule is only applicable to HTTPS Load Balancers. This rule does not check TCP/UDP Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_997",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_998",
    "description": "Checks if the IAM policies attached to your GCP IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all GCP KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_999",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for destruction in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for destruction.",
    "function_name": "kms_keys_no_scheduled_destruction",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1000",
    "description": "Checks if Google Cloud Certificate Manager Certificates in your account are marked for expiration within the specified number of days. Certificates managed by Google Cloud Certificate Manager can be automatically renewed, but the auto-renewal is dependent on the proper configuration. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1001",
    "description": "Checks if Google Cloud Certificate Authority Service (CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1002",
    "description": "Checks if a Google Cloud Endpoints API has an SSL certificate associated. The rule is NON_COMPLIANT if the API does not have an associated SSL certificate.",
    "function_name": "endpoints_api_ssl_certificate_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1003",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().get(project='proj', sslCertificate='cert_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1004",
    "description": "Checks if automatic key rotation is enabled for each key and matches to the key ID of the customer created Google Cloud KMS key. The rule is NON_COMPLIANT if the IAM role associated with the resource does not have the cloudkms.keys.get permission",
    "function_name": "kms_key_automatic_rotation_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1005",
    "description": "Checks if Google Cloud Load Balancers (including HTTP(S) Load Balancers and TCP/UDP Load Balancers) have backend services that are configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from one in Google Cloud Certificate Manager.",
    "function_name": "network_load_balancer_backend_ssl_certificate_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1006",
    "description": "Checks if the Classic Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend configuration with your Network Load Balancer. This rule is only applicable to Classic Load Balancers. This rule does not check HTTP(S) Load Balancers.",
    "function_name": "network_classic_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetSslProxies().get(project='proj', targetSslProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1007",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1008",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1009",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1010",
    "description": "Checks if Google Cloud Certificate Manager SSL certificates in your account are nearing expiration within the specified number of days. Certificates managed by Google Cloud are automatically renewed, while those imported must be manually renewed. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_monitor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1011",
    "description": "Checks if automatic key rotation is enabled for each key in Google Cloud's KMS and matches to the key ID of the customer created Google Cloud KMS key. The rule is NON_COMPLIANT if the IAM role associated with the resource does not have the 'cloudkms.keys.get' permission.",
    "function_name": "kms_key_automatic_rotation_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1012",
    "description": "Checks if Google Cloud Certificate Manager certificates in your account are marked for expiration within the specified number of days. Certificates provided by Google Cloud are not automatically renewed, and you must manually renew them before expiration. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1013",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1014",
    "description": "Checks if an API Gateway endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway endpoint does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1015",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default Google-managed SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN configuration uses the default Google-managed SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1016",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Managed SSL Certificates. This rule is NON_COMPLIANT if at least 1 HTTP(S) Load Balancer has at least 1 backend service that is configured without a Google Managed SSL Certificate or is configured with a certificate different from a Google Managed SSL Certificate.",
    "function_name": "network_load_balancer_backend_google_managed_ssl_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1017",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. This rule is applicable only to HTTP(S) Load Balancers. It does not check TCP/UDP Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1018",
    "description": "Verifies that the Google Cloud IAM policies do not permit blocked actions on Google Cloud KMS keys. The rule is considered NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the IAM policy.",
    "function_name": "kms_keys_iam_policies_blocked_actions_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1019",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1020",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1021",
    "description": "Checks if Google Cloud Certificate Manager certificates in your project are marked for expiration within the specified number of days. Certificates created by Google Cloud Certificate Manager are automatically renewed. However, imported certificates are not automatically renewed. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1022",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1023",
    "description": "Checks if a Cloud Endpoints service configuration is using an SSL certificate. The rule is NON_COMPLIANT if the Cloud Endpoints service does not have an associated SSL certificate.",
    "function_name": "endpoints_service_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1024",
    "description": "Checks if the certificate associated with a Google Cloud CDN (Content Delivery Network) backend service is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN backend service uses the default SSL certificate.",
    "function_name": "network_cdn_backendservice_non_default_ssl_certificate",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1025",
    "description": "Checks if Google Cloud Load Balancers have backend services configured to use certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_certificate_manager_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1026",
    "description": "Checks if the Network Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure your Network Load Balancer has a frontend configuration with HTTPS. This rule is applicable only to Network Load Balancers and does not check HTTP(S) Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetSslProxies().get(project='proj', targetSslProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1027",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1028",
    "description": "Checks if the IAM policies attached to your Google Cloud users, service accounts, and groups do not allow blocked actions on all GCP KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all GCP KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1029",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_no_deletion_scheduled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1030",
    "description": "Checks if Google Cloud Managed SSL Certificates in your project are about to expire within the specified number of days. Managed SSL Certificates are automatically renewed by Google Cloud. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiry_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1031",
    "description": "Checks if Google Cloud Certificate Authority (GCP Certificate Authority Service) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_authority_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1032",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP load balancers. The rule is NON_COMPLIANT if one or more HTTP load balancers do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP load balancers have forwarding to an HTTP listener instead of redirection.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1033",
    "description": "Checks if an API Gateway endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway endpoint does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1034",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().get(project='proj', sslCertificate='cert_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1035",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between Google Cloud CDN edge locations and backend services. This rule is NON_COMPLIANT for a Cloud CDN if any 'SslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_ssl_protocols_no_sslv3",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1036",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'OriginProtocolPolicy' is 'HTTP_ONLY' or if 'OriginProtocolPolicy' is 'MATCH_VIEWER' and 'ViewerProtocolPolicy' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_origin_encryption_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1037",
    "description": "Checks if your Google Cloud CDN uses HTTPS for serving content (directly or via a redirection). The rule is NON_COMPLIANT if the value of 'https' is not enforced in the Load Balancer settings for the backend service.",
    "function_name": "network_load_balancer_https_enforced",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1038",
    "description": "Checks if your Google Cloud Firestore database has transport security enabled. The rule is NON_COMPLIANT if a Firestore database is not secured by Transport Layer Security (TLS).",
    "function_name": "firestore_database_tls_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.collection('my_collection').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1039",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) connections are configured with an SSL connection. The rule is NON_COMPLIANT if GCP DMS does not have an SSL connection configured.",
    "function_name": "dms_connections_ssl_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1040",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) endpoints for Redis data stores are enabled for TLS/SSL encryption of data communicated with other endpoints. The rule is NON_COMPLIANT if TLS/SSL encryption is not enabled.",
    "function_name": "dms_redis_endpoints_tls_ssl_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1041",
    "description": "Checks if Google Cloud Memorystore for Redis replication instances have encryption-in-transit enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transitEncryptionEnabled' is set to 'false'.",
    "function_name": "memorystore_redis_replication_encryption_in_transit_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.instances().get(project='proj', location='location', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1042",
    "description": "Check if Google Cloud's Elasticsearch Service nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled.",
    "function_name": "compute_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1043",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1044",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure an SSL or HTTPS proxy is configured with your Google Cloud Load Balancer. This rule is only applicable to External Load Balancers. This rule does not check Internal Load Balancers.",
    "function_name": "network_external_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1045",
    "description": "Checks whether your Google Cloud Load Balancer SSL certificates are using a custom policy. The rule is only applicable if there are SSL certificates associated with the Google Cloud Load Balancer.",
    "function_name": "network_load_balancer_ssl_custom_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1046",
    "description": "Checks if your Google Cloud Load Balancer (GCLB) SSL policies use a predefined policy. The rule is NON_COMPLIANT if the GCLB HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1047",
    "description": "Checks if your Google Cloud Load Balancer is configured with HTTPS or SSL certificates. The rule is NON_COMPLIANT if a backend service does not have an SSL certificate configured for HTTPS traffic.",
    "function_name": "network_load_balancer_https_ssl_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1048",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1049",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "kms_keys_iam_policy_no_blocked_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.policies().get(name='projects/my-project/policies/my-policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1050",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1051",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for destruction in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for destruction.",
    "function_name": "kms_keys_no_scheduled_destruction",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1052",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) for communication between publishers and subscribers. The rule is NON_COMPLIANT if plain text communication is enabled for in-transit messages.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1053",
    "description": "Checks whether connections to Google Cloud Elasticsearch (GCP equivalent of Amazon OpenSearch) are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch domain 'enforceHTTPS' is not 'true' or is 'true' and 'tlsSecurityPolicy' is not in 'tlsPolicies'.",
    "function_name": "network_elasticsearch_enforce_https_tls_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1054",
    "description": "Check if Google Cloud's Managed Service for Elasticsearch nodes are encrypted end to end. The rule is NON_COMPLIANT if the communication between nodes is not encrypted.",
    "function_name": "compute_elasticsearch_nodes_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1055",
    "description": "Checks if Google BigQuery datasets require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any Google BigQuery dataset has parameter 'require_ssl' not set to true.",
    "function_name": "bigquery_datasets_require_ssl",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).require_ssl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1056",
    "description": "Checks if Google Cloud Storage buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any Google Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1057",
    "description": "Checks if HTTP to HTTPS redirection is configured on all backend services associated with Google Cloud Load Balancers. The rule is NON_COMPLIANT if one or more backend services do not have HTTP to HTTPS redirection configured or if any backend services forward requests to another HTTP backend service instead of redirecting.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1058",
    "description": "Checks if Google Cloud CDN (Cloud Content Delivery Network) backends are using deprecated SSL protocols for HTTPS communication between edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN backend if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_backends_no_deprecated_ssl",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1059",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom backends. The rule is NON_COMPLIANT if 'originProtocol' is 'HTTP' and 'clientRedirect' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_encryption_to_custom_backends",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1060",
    "description": "Checks if your Google Cloud CDN configurations enforce HTTPS by verifying that the 'secure' option is enabled for the load balancer backend service. The rule is NON_COMPLIANT if the load balancer allows HTTP traffic without redirection to HTTPS.",
    "function_name": "network_load_balancer_enforce_https",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1061",
    "description": "Checks if your Google Cloud Firestore is set to use HTTPS for API requests. The rule is NON_COMPLIANT if Firestore does not have HTTPS enabled for secure communication.",
    "function_name": "firestore_api_https_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1062",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if GCP DMS does not have an SSL connection configured.",
    "function_name": "dms_endpoints_ssl_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1063",
    "description": "Checks if Google Cloud Platform (GCP) Cloud SQL for Redis data stores is configured to use SSL encryption for data communicated with other endpoints. The rule is NON_COMPLIANT if SSL encryption is not enabled.",
    "function_name": "cloudsql_redis_ssl_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1064",
    "description": "Checks if Google Cloud Memorystore (Redis) instances have in-transit encryption enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transitEncryptionMode' is set to 'DISABLED'.",
    "function_name": "memorystore_redis_transit_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1065",
    "description": "Check if Google Cloud's Elasticsearch nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the ElastiSearch cluster.",
    "function_name": "dataproc_cluster_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1066",
    "description": "Checks if the Google Cloud Load Balancers (GCLB) use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an HTTPS load balancer with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers. This rule does not check TCP Proxy Load Balancers or SSL Proxy Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1067",
    "description": "Checks whether your Google Cloud Platform (GCP) HTTPS Load Balancer is using a custom SSL policy. The rule is only applicable if there are SSL listeners for the HTTPS Load Balancer.",
    "function_name": "network_https_load_balancer_custom_ssl_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1068",
    "description": "Checks if your Google Cloud Load Balancer SSL certificates use a predefined policy. The rule is NON_COMPLIANT if the Google Cloud Load Balancer HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1069",
    "description": "Checks if your Google Cloud Platform Load Balancer is configured with SSL (HTTPS) backend services. The rule is NON_COMPLIANT if a backend service is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_backend_services_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1070",
    "description": "Checks if Google Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or if the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1071",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) with the broker nodes of the topic. The rule is NON_COMPLIANT if plain text communication is enabled for in-topic broker node connections.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1072",
    "description": "Checks whether connections to Google Cloud Search domains are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Search domain 'RequireHTTPS' is not 'true' or is 'true' and the 'TLSVersion' is not in the acceptable security policies.",
    "function_name": "cloudsearch_domain_https_tls_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.domains().get(name='domains/domain-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1073",
    "description": "Check if Google Cloud's Elasticsearch (GCP equivalent to Amazon OpenSearch Service) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the cluster.",
    "function_name": "dataproc_cluster_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1074",
    "description": "Checks if Google BigQuery requires TLS/SSL encryption for connections to SQL clients. The rule is NON_COMPLIANT if any Google BigQuery dataset has parameter `enable_legacy_sql` not set to false, as BigQuery encrypts data in transit using TLS by default.",
    "function_name": "bigquery_dataset_tls_encryption_required",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1075",
    "description": "Checks if Google Cloud Storage buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1076",
    "description": "Checks if Google Cloud Endpoints (API Gateway in GCP) has access logging enabled. The rule is NON_COMPLIANT if 'access_log' is not present in the API configuration.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1077",
    "description": "Checks if all methods in Google Cloud Endpoints configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logLevel is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1078",
    "description": "Checks if Google Cloud Trace is enabled for Google Cloud Functions or Cloud Run services. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "cloudfunctions_cloudtrace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1079",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is set to a value other than ERROR or ALL.",
    "function_name": "apigateway_logging_enabled_error_or_all",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1080",
    "description": "Checks if Network Load Balancers (NLB) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if NLB Desync mitigation mode does not match with the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='nlb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1081",
    "description": "Checks if Google Cloud CDN backends are configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN backend does not have logging configured.",
    "function_name": "network_cdn_backends_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1082",
    "description": "Checks if at least one Google Cloud Logging service is logging Google Cloud Storage (GCS) data access events for all GCS buckets. The rule is NON_COMPLIANT if there are no logging configurations that record GCS data access events.",
    "function_name": "logging_gcs_data_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1083",
    "description": "Checks that there is at least one Google Cloud Audit Log configured with security best practices. This rule is COMPLIANT if there is at least one log that meets all of the following:",
    "function_name": "logging_auditlog_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1084",
    "description": "Google Cloud Logging must be enabled to ensure that all actions and events in the project are recorded, similar to AWS CloudTrail.",
    "function_name": "logging_project_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1085",
    "description": "Checks if a Google Cloud Build project has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_project_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1086",
    "description": "Checks if a Google Cloud Logging log bucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_log_bucket_retention_period_enforced",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1087",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service (DMS) replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "dms_replication_task_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.entries().list(filter='resource.type=\"dms_replication_task\" AND severity>=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1088",
    "description": "Checks if a Google Cloud Firestore (with Datastore compatibility) instance has Cloud Logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Cloud Logging enabled for audit logs.",
    "function_name": "firestore_instance_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1089",
    "description": "Checks if Google Cloud VPN has logging enabled for the tunnel. The rule is NON_COMPLIANT if 'LoggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1090",
    "description": "Checks if logging configuration is set on active Google Kubernetes Engine (GKE) Pod Definitions. This rule is NON_COMPLIANT if an active GKE Pod Definition does not have the logging configuration resource defined or the value for logging configuration is null in at least one container definition.",
    "function_name": "container_pod_logging_configuration_set",
    "service_category": "Container",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1091",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1092",
    "description": "Checks if Google Cloud Elasticsearch domains (via Google Cloud's Elastic Stack solution) are configured to send logs to Google Cloud Logging. The rule is COMPLIANT if logging is enabled for a Google Cloud Elasticsearch domain. This rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "logging_elasticsearch_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1093",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Cloud Logging. The rule is NON_COMPLIANT if the value of `logHealthChecks` is false.",
    "function_name": "appengine_service_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1094",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or the log bucket is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1095",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have audit logging enabled. The rule is NON_COMPLIANT if a subscription does not have audit logging enabled.",
    "function_name": "pubsub_subscription_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='project', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1096",
    "description": "Checks if a Google Cloud Pub/Sub service has Cloud Logging (formerly Stackdriver Logging) enabled for audit logs. The rule is NON_COMPLIANT if audit logging is not enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1097",
    "description": "In GCP, enabling audit logging across multiple regions can be achieved using Google Cloud Audit Logs, ensuring that logs are collected and stored in a centralized location, similar to AWS CloudTrail. This service provides multi-regional logging capabilities.",
    "function_name": "logging_audit_logs_enable_multiregional",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().create(parent='projects/my-project', body={'name': 'my-sink', 'destination': 'bigquery.googleapis.com/projects/my-project/datasets/my_dataset'})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1098",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1099",
    "description": "Checks if Google Cloud Platform (GCP) Firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not enabled for the firewall rules.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1100",
    "description": "Checks if Google Cloud Elasticsearch (GCP variant of OpenSearch) clusters have audit logging enabled. The rule is NON_COMPLIANT if a Google Cloud Elasticsearch cluster does not have audit logging enabled.",
    "function_name": "logging_elasticsearch_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1101",
    "description": "Checks if Google Cloud Elasticsearch (GCP's equivalent to Amazon OpenSearch Service) clusters are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "logging_elasticsearch_clusters_log_configuration",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1102",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1103",
    "description": "Checks if logging is enabled for Google Cloud SQL databases. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_databases_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1104",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific logging sink. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'sinkNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).labels"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1105",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if audit logging is not enabled for the dataset.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1106",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud Platform (GCP) Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your GCP Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1107",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1108",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration does not meet the minimum requirements.",
    "function_name": "workflows_logging_configuration_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='workflow_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1109",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are enabled for all GCP VPC networks. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1110",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the specified value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1111",
    "description": "Checks if logging is enabled on GCP Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1112",
    "description": "Checks if all of the specified applications are installed on the instance. Optionally, specify the minimum acceptable version. You can also specify the platform to apply the rule only to instances running that platform.",
    "function_name": "compute_instance_application_installed_version",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1113",
    "description": "Checks if the compliance status of Google Cloud Compute Engine instance patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1114",
    "description": "Checks if Google Cloud Run services are set to the latest platform version. The rule is NON_COMPLIANT if the platform is not set to LATEST_VERSION, or if neither the latestLinuxVersion nor latestWindowsVersion are specified as parameters.",
    "function_name": "cloud_run_service_latest_platform_version",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1115",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is running the oldest supported version. The rule is NON_COMPLIANT if a GKE cluster is running the oldest supported version (equal to the parameter 'oldestVersionSupported').",
    "function_name": "container_cluster_avoid_oldest_supported_version",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1116",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is running a supported Kubernetes version. This rule is NON_COMPLIANT if a GKE cluster is running an unsupported version (less than the parameter 'oldestVersionSupported').",
    "function_name": "container_cluster_supported_kubernetes_version",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1117",
    "description": "Checks if Google Cloud Memorystore for Redis instances have automatic updates enabled. The rule is NON_COMPLIANT for a Memorystore instance if it is using the Redis engine and automatic updates are not enabled.",
    "function_name": "memorystore_redis_automatic_updates_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1118",
    "description": "Checks if automatic application updates in a GCP App Engine environment are enabled. The rule is COMPLIANT if the value for automatic updates is set to true. The rule is NON_COMPLIANT if the value for automatic updates is set to false, or if a parameter is provided and its value does not match the existing configurations.",
    "function_name": "app_engine_application_automatic_updates_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().get(appsId='app_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1119",
    "description": "Checks if the Google Cloud Function settings for runtime, service account, timeout, and memory size match the expected values. The rule ignores functions with 'container' deployment type and functions with runtime set to 'OS-only Runtime'. The rule is NON_COMPLIANT if the Cloud Function settings do not match the expected values.",
    "function_name": "cloudfunctions_function_settings_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_v1.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1120",
    "description": "Checks if Google Cloud Elasticsearch (GCE) version updates are available but not installed. The rule is NON_COMPLIANT for an Elasticsearch cluster if the latest software updates are not installed.",
    "function_name": "compute_elasticsearch_version_up_to_date",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1121",
    "description": "Checks if Google Cloud SQL instances are configured for automatic minor version upgrades. The rule is NON_COMPLIANT if the value of 'autoUpgrade' is false.",
    "function_name": "sql_instances_auto_upgrade_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1122",
    "description": "Checks if Google BigQuery datasets have the specified maintenance settings. The rule is NON_COMPLIANT if the automatic upgrades to major version are disabled.",
    "function_name": "bigquery_datasets_automatic_upgrades_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1123",
    "description": "Checks if Google Cloud Armor is enabled on Google Cloud Load Balancers. The rule is NON_COMPLIANT if key: armor.enabled is set to false.",
    "function_name": "network_load_balancer_armor_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1124",
    "description": "Checks if a Google Cloud API Gateway API configuration is using a Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Google Cloud Armor policy is not used or if the used policy does not match what is specified in the rule parameter.",
    "function_name": "network_api_gateway_uses_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.api_gateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1125",
    "description": "Checks if Google Cloud Apigee APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Apigee API if it is not associated with a security policy.",
    "function_name": "apigee_api_associated_with_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigee_client.apis().get(project='proj', api='api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1126",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1127",
    "description": "Checks if the security policy is associated with a Global External HTTP(S) Load Balancer or Cloud CDN in GCP. When Google Cloud Platform Firewall Rules are set up, the policy owner specifies the security policy ID in the GCP policy and can optionally enable remediation.",
    "function_name": "network_load_balancer_security_policy_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1128",
    "description": "Verifies that the security policies associated with the GCP Web Application Firewall (WAF) are applied in the correct order of precedence. The correct precedence is determined by the ranks specified in the rules configuration. When Google Cloud Security Policies are established, the highest precedence is given the lowest numeric value (0), followed by subsequent values (1, 2, etc.). The policy owner defines the order in the security policy configuration and can implement automatic remediation if desired.",
    "function_name": "network_waf_security_policy_precedence",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1129",
    "description": "Checks if Cloud Armor Security Policies contain rules. The policy is NON_COMPLIANT if there are no rules in a Cloud Armor Security Policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1130",
    "description": "Checks if a Google Cloud Armor Security Policy contains any security rules. This rule is NON_COMPLIANT if a Security Policy does not contain any security rules.",
    "function_name": "compute_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1131",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1132",
    "description": "Checks if a Google Cloud Armor security policy rule contains any conditions. The rule is NON_COMPLIANT if no conditions are present within the Cloud Armor security policy rule.",
    "function_name": "network_security_policy_rule_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1133",
    "description": "Verifies if a Cloud Armor Security Policy includes any security rules or rule groups. This rule is NON_COMPLIANT if a Security Policy does not contain any security rule or rule group.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1134",
    "description": "Checks if Google Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1135",
    "description": "Checks whether Google Cloud Armor security policy rule contains conditions. This rule is COMPLIANT if the regional rule contains at least one condition and NON_COMPLIANT otherwise.",
    "function_name": "compute_security_policy_rule_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1136",
    "description": "Checks if a Google Cloud Armor Security Policy contains any security rules. The policy is NON_COMPLIANT if there are no security rules defined within the policy.",
    "function_name": "compute_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1137",
    "description": "Checks if Google Cloud Armor is enabled on Google Cloud Load Balancers (GCLBs). The rule is NON_COMPLIANT if key: armor.enabled is set to false.",
    "function_name": "network_load_balancer_armor_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1138",
    "description": "Checks if a Google Cloud Endpoints API is using a Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Google Cloud Armor security policy is not used or if the used security policy does not match what is listed in the rule parameter.",
    "function_name": "network_endpoints_enforce_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1139",
    "description": "Checks if Google Cloud Endpoints APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Endpoints API if it is not associated with a security policy.",
    "function_name": "network_endpoints_associated_with_armor_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1140",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with a Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Cloud Armor policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1141",
    "description": "Checks if the security policy is associated with a Google Cloud Load Balancer, Google Cloud Armor security policies, or Cloud CDN. When Google Cloud Armor creates this rule, the policy owner specifies the securityPolicyId in the policy and can optionally enable remediation.",
    "function_name": "network_load_balancer_security_policy_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1142",
    "description": "Verifies if the firewall rules within the Google Cloud Armor security policy are in the correct order based on their priority. The priority is determined by the sequence in which firewall rules are defined in the security policy. Google Cloud Armor allows the user to specify the order of the rules, starting from the highest priority (0) and increasing subsequent priorities (1, 2, etc.). Remediation can be optionally implemented to correct misconfigured priorities.",
    "function_name": "network_security_policy_firewall_rule_priority_order",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1143",
    "description": "Checks if Google Cloud Armor Security Policies contain rules. The rule is NON_COMPLIANT if there are no rules in a Google Cloud Armor Security Policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1144",
    "description": "Checks if a Google Cloud Armor security policy contains any security rules. This rule is NON_COMPLIANT if a security policy does not contain any security rules.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1145",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1146",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Cloud Armor security policy.",
    "function_name": "compute_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1147",
    "description": "Checks whether a Google Cloud Armor Security Policy contains any security rules. This rule is NON_COMPLIANT if a Security Policy does not contain any security rules.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1148",
    "description": "Checks if Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1149",
    "description": "Checks whether a Google Cloud Armor security policy rule contains at least one condition. This rule is COMPLIANT if the security policy rule contains at least one condition and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_rule_condition_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1150",
    "description": "Checks if a Google Cloud Armor Security Policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within a Security Policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1151",
    "description": "Checks if the Google Cloud Function is not using the default traffic allocation settings. The rule is NON_COMPLIANT if the Cloud Function is using the traffic allocation of '100% to the latest version'.",
    "function_name": "cloudfunctions_function_traffic_allocation_custom",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1152",
    "description": "Verifies if the first deployment step of Google Cloud Build performs multiple deployments. Optionally checks if each following stage deploys to more than the specified number of deployments (deploymentLimit).",
    "function_name": "cloudbuild_first_step_single_deployment",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1153",
    "description": "Checks if the Cloud Function's deployment configuration is not using the default deployment strategy. The rule is NON_COMPLIANT if the Cloud Function is using the deployment strategy 'ALWAYS_ACTIVE'.",
    "function_name": "cloudfunctions_function_deployment_strategy_not_always_active",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1154",
    "description": "Checks if the first deployment stage of Google Cloud Deploy performs more than one deployment. Optionally checks if each of the subsequent remaining stages deploy to more than the specified number of deployments (deploymentLimit).",
    "function_name": "deploy_stage_single_deployment_limit",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploy_client.projects().locations().deliveryPipelines().releases().get(name='projects/proj/locations/loc/deliveryPipelines/pipeline/releases/release')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1155",
    "description": "Checks if a GCP project is part of an Organization. The rule is NON_COMPLIANT if a GCP project is not part of an Organization or the Organization ID does not match rule parameter OrganizationId.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1156",
    "description": "Checks if a backup vault in Google Cloud Platform (GCP) has an attached resource-based policy that prevents deletion of backup snapshots. The rule is considered NON_COMPLIANT if the Backup Vault does not have resource-based policies or has policies without a suitable 'Deny' statement (statement with 'storage.objects.delete', 'storage.objects.update', and 'storage.buckets.setIamPolicy' permissions).",
    "function_name": "storage_backup_vault_prevent_snapshot_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket='backup-vault')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1157",
    "description": "Checks if a Google Cloud Build (GCB) configuration has privileged mode enabled. The rule is NON_COMPLIANT for a GCB build configuration if 'privileged' is set to 'true'.",
    "function_name": "cloudbuild_configuration_privileged_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1158",
    "description": "Checks if custom Google Cloud Pub/Sub topics have an IAM policy attached. The rule is NON_COMPLIANT for custom Pub/Sub topics without an IAM policy attached.",
    "function_name": "pubsub_topic_iam_policy_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.get_iam_policy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1159",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1160",
    "description": "Checks if the privileged parameter in the container definition of Google Kubernetes Engine (GKE) Pod specifications is set to 'false'. The rule is NON_COMPLIANT if the privileged parameter is 'true'.",
    "function_name": "container_pod_privileged_false",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1161",
    "description": "Checks if Google Cloud Run (GCR) services only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the 'Readiness checks' option for the service does not enforce read-only file system permissions.",
    "function_name": "cloud_run_service_readonly_filesystem_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloud_run_client.services().getIamPolicy(resource='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1162",
    "description": "Checks if Google Kubernetes Engine (GKE) deployment specifications have a security context defined to specify a user for containers to run on. The rule is NON_COMPLIANT if the 'runAsUser' parameter is not present or set to '0' (root).",
    "function_name": "container_deployment_security_context_defined",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1163",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1164",
    "description": "Checks if the IAM policies attached to your GCP service accounts, roles, and groups do not allow blocked actions on all GCP Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all GCP Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1165",
    "description": "Checks if the IAM feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity (GCI) user, service account, or Google Group has any IAM policies that are attached inline rather than using predefined IAM roles.",
    "function_name": "iam_user_service_account_group_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1166",
    "description": "Checks in each Google Cloud Identity and Access Management (IAM) resource if a policy resource name (IAM role) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the role is attached to the IAM resource.",
    "function_name": "iam_policy_role_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1167",
    "description": "Checks whether the IAM policy is attached to an IAM user, a group with one or more IAM users, or a service account in Google Cloud Platform (GCP).",
    "function_name": "iam_policy_user_group_service_account_attachment",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1168",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'role': 'roles/owner' which effectively allows all permissions on all resources.",
    "function_name": "iam_policy_no_roles_owner",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1169",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1170",
    "description": "Checks if all specified managed IAM roles are associated with a Google Cloud IAM service account. The rule is NON_COMPLIANT if a managed IAM role is not associated with the service account.",
    "function_name": "iam_service_account_managed_roles_associated",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1171",
    "description": "Checks if the root user access key is available in Google Cloud Platform. The rule is COMPLIANT if the user access key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_root_user_access_key_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1172",
    "description": "Verifies if IAM users are associated with at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_group_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1173",
    "description": "Checks if none of your Google Cloud IAM users have roles or permissions directly attached to them. IAM users must inherit permissions from IAM groups or service accounts. The rule is NON_COMPLIANT if there is at least one custom role or permission that is directly attached to the IAM user.",
    "function_name": "iam_user_no_direct_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1174",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1175",
    "description": "Checks if Google Cloud Elasticsearch clusters have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM permissions are not set up correctly for the Elasticsearch cluster.",
    "function_name": "dataproc_cluster_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1176",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1177",
    "description": "Checks if a Google Cloud SQL instance has Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1178",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1179",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud accounts. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud account to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_blocklisted_actions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1180",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud IAM principals, service accounts, IP addresses, or VPC Service Controls that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1181",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1182",
    "description": "Checks if the Google AI Platform Notebooks Root Access setting is enabled for AI Platform Notebook instances. The rule is NON_COMPLIANT if the Root Access setting is set to 'Enabled' for an AI Platform Notebook instance.",
    "function_name": "ai_platform_notebooks_root_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1183",
    "description": "Checks if the Google Cloud Incident Response Team (GCSIRT) can access your GCP account. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for GCSIRT access is not configured.",
    "function_name": "network_google_cloud_armor_gcsirt_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1184",
    "description": "Checks if a GCP project is part of an organization. The rule is NON_COMPLIANT if a GCP project is not linked to any organization or the organization ID does not match the specified rule parameter OrganizationId.",
    "function_name": "iam_project_organization_linked",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1185",
    "description": "Checks if a GCP Cloud Storage bucket used for backups has an attached IAM policy preventing deletion of backup files. The rule is NON_COMPLIANT if the bucket does not have IAM policies or has policies without sufficient 'Deny' permissions regarding the deletion of objects in the bucket.",
    "function_name": "storage_bucket_iam_policy_prevent_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1186",
    "description": "Checks if a Google Cloud Build project has privileged mode enabled. The rule is NON_COMPLIANT for a Cloud Build project if 'privileged' option is set to 'true'.",
    "function_name": "cloudbuild_project_privileged_mode_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1187",
    "description": "Checks if custom Google Cloud Pub/Sub schemas have a resource policy attached. The rule is NON_COMPLIANT for custom schemas without a resource policy attached.",
    "function_name": "pubsub_schema_resource_policy_attached",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().schemas().get(name='projects/proj/schemas/schema')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1188",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1189",
    "description": "Checks if the Privileged flag in the IAM policy for GKE Pod specifications is set to 'true'. The rule is NON_COMPLIANT if the Privileged flag is 'true'.",
    "function_name": "container_pod_privileged_flag_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1190",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem field in the Pod specification is set to ‘false’.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1191",
    "description": "Checks if Google Kubernetes Engine (GKE) Pod specifications define a user for containers to run on. The rule is NON_COMPLIANT if the 'securityContext.runAsUser' parameter is not present or set to '0' (root user).",
    "function_name": "container_pod_run_as_user_defined",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1192",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1193",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1194",
    "description": "Checks if the IAM user, role, or group has any custom IAM policies that are directly attached to them, which would indicate that inline policy features are being used. The rule is NON_COMPLIANT if a Google Cloud IAM (Identity and Access Management) user, service account, or group has any custom IAM policy bindings.",
    "function_name": "iam_user_custom_policy_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1195",
    "description": "Checks in each Google Cloud IAM resource if a policy (Policy ID) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1196",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group with one or more IAM users, or a service account with one or more trusted identities.",
    "function_name": "iam_policy_attached_to_user_or_group_or_service_account",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1197",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'allow' permissions on all roles over 'all resources'.",
    "function_name": "iam_policy_no_allow_all_resources",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1198",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1199",
    "description": "Checks if all Google Cloud Platform (GCP) Identity and Access Management (IAM) roles have the specified policies attached. The rule is NON_COMPLIANT if a specified policy is not attached to the IAM role.",
    "function_name": "iam_roles_policy_attachment",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1200",
    "description": "Checks if the Google Cloud Platform (GCP) service account with owner privileges exists. The rule is COMPLIANT if the service account does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_owner_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1201",
    "description": "Verifies if IAM users are part of at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1202",
    "description": "Checks if none of your Google Cloud Platform (GCP) Identity and Access Management (IAM) users have custom roles or permissions attached directly to them. IAM users should inherit permissions from IAM groups or predefined roles. The rule is NON_COMPLIANT if there is at least one custom role or permission directly attached to the IAM user.",
    "function_name": "iam_user_no_custom_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1203",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1204",
    "description": "Checks if Google Cloud Elasticsearch instances have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM roles and permissions are not properly configured for the Elasticsearch instance.",
    "function_name": "dataproc_elasticsearch_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1205",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1206",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1207",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1208",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. The rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.buckets.get* actions and storage.objects.delete on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1209",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, service accounts, IAM roles, or specified IP addresses. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1210",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1211",
    "description": "Checks if the Google AI Platform Notebook instance has root access enabled. The rule is NON_COMPLIANT if the root access is set to 'Enabled' for a Google AI Platform Notebook instance.",
    "function_name": "ai_platform_notebook_instance_root_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1212",
    "description": "Checks if the Google Cloud Security Incident Response Team (SIRT) can access your GCP project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for SIRT access is not configured.",
    "function_name": "network_google_cloud_armor_sirt_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1213",
    "description": "Checks if a Cloud Build project environment has privileged mode enabled. The rule is NON_COMPLIANT for a Cloud Build project if 'privileged' is set to 'true'.",
    "function_name": "cloudbuild_project_privileged_mode_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1214",
    "description": "Checks if Google Cloud Pub/Sub schema registries have an access control policy attached. The rule is NON_COMPLIANT for custom schema registries without an access control policy attached.",
    "function_name": "pubsub_schema_registry_access_control_policy_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().schemas().getIamPolicy(resource='projects/my-project/schemas/my-schema')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1215",
    "description": "Checks if the 'privileged' flag in the container configuration of Google Kubernetes Engine (GKE) Pod specifications is set to 'true'. The rule is NON_COMPLIANT if the 'privileged' flag is 'true'.",
    "function_name": "container_pod_privileged_flag_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1216",
    "description": "Checks if Google Kubernetes Engine (GKE) Pod specifications specify a user for containers to run on. The rule is NON_COMPLIANT if the 'securityContext.runAsUser' parameter is not present or set to '0'.",
    "function_name": "container_pod_run_as_user_specified",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1217",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "kms_keys_blocked_actions_restricted",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='resource')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1218",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1219",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'role: 'roles/owner' which grants broad permissions over all resources.",
    "function_name": "iam_policy_no_roles_owner",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1220",
    "description": "Checks if the root user service account key exists. The rule is COMPLIANT if the service account key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_key_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1221",
    "description": "Checks if the Vertex AI Workbench Root Access setting is enabled for Vertex AI Workbench Notebooks. The rule is NON_COMPLIANT if the Root Access setting is set to 'Enabled' for a Vertex AI Workbench Notebook instance.",
    "function_name": "vertex_ai_workbench_notebook_root_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "vertex_ai_client.get_notebook_instance(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1222",
    "description": "Checks whether IAM groups in Google Cloud Platform (GCP) have at least one IAM user associated with them.",
    "function_name": "iam_group_has_user_association",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1223",
    "description": "Checks if your Google Cloud IAM users have passwords or active access keys that have not been used within the specified number of days you provided. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_user_inactive_access_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1224",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1225",
    "description": "Verifies if IAM Groups in Google Cloud Platform have at least one IAM User assigned to them.",
    "function_name": "iam_group_user_assignment_required",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1226",
    "description": "Checks if your GCP Identity and Access Management (IAM) users have service account keys that have not been used within the specified number of days you provided. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_service_account_keys_recent_usage",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1227",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1228",
    "description": "Checks if a Google Cloud account is part of Google Cloud Resource Manager Organization. The rule is NON_COMPLIANT if a Google Cloud account is not part of an Organization or the Organization ID does not match rule parameter MasterAccountId.",
    "function_name": "iam_account_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm_v1.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1229",
    "description": "Checks if a Google Cloud Storage bucket has an attached IAM policy that prevents deletion of objects. The rule is NON_COMPLIANT if the Cloud Storage bucket does not have IAM policies or has policies without suitable 'Deny' statements (statements with storage.objects.delete and storage.objects.update permissions).",
    "function_name": "storage_bucket_iam_policy_prevent_object_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1230",
    "description": "Checks if a Compute Engine instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the Compute Engine instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1231",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the 'readOnlyRootFilesystem' parameter in the Pod Security Policy or the Pod specification is set to 'false'.",
    "function_name": "container_pod_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1232",
    "description": "Checks if the managed Google Cloud IAM policies you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1233",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1234",
    "description": "Verifies that no IAM users, roles, or groups have inline policies defined in Google Cloud Platform, where a non-compliant status is assigned if any are found.",
    "function_name": "iam_roles_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1235",
    "description": "Checks in each Google Cloud Platform Identity and Access Management (IAM) resource, if a policy Google Resource Name (GRN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy GRN is attached to the IAM resource.",
    "function_name": "iam_policy_grn_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1236",
    "description": "Checks whether the IAM policy is attached to a Google Cloud Identity and Access Management (IAM) user, a group with one or more IAM users, or a service account with one or more trusted entities.",
    "function_name": "iam_policy_attached_to_user_or_group",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1237",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'allow' with 'roles/owner' over '//cloudresourcemanager.googleapis.com/projects/{project_id}'.",
    "function_name": "iam_policy_no_roles_owner_on_projects",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/{project_id}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1238",
    "description": "Checks if GCP IAM policies that you create grant permissions to all actions on individual GCP resources. The rule is NON_COMPLIANT if any customer managed IAM policy allows full access to at least 1 GCP service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1239",
    "description": "Checks if all specified IAM policies are attached to the Google Cloud Identity and Access Management (IAM) role. The rule is NON_COMPLIANT if a specified policy is not attached to the IAM role.",
    "function_name": "iam_role_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1240",
    "description": "Checks if none of your Google Cloud IAM users have roles directly attached. IAM users must inherit permissions from IAM groups or service accounts. The rule is NON_COMPLIANT if there is at least one role that is directly attached to the IAM user.",
    "function_name": "iam_user_no_direct_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1241",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1242",
    "description": "Checks if Google Cloud Search has fine-grained access control enabled. The rule is NON_COMPLIANT if IAM roles and permissions are not properly configured for the Search resources.",
    "function_name": "search_resources_fine_grained_access_control_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1243",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1244",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1245",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1246",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other GCP projects. For example, the rule checks that the GCS bucket policy does not allow another GCP project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1247",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, federated users, service accounts, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1248",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1249",
    "description": "Checks if the Google Cloud Security Team (GCST) can access your Google Cloud account. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for GCST access is not configured.",
    "function_name": "network_google_cloud_armor_gcst_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1250",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the container specification is set to ‘false’.",
    "function_name": "container_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1251",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP).",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1252",
    "description": "Checks if Google Cloud's Managed Service for Elasticsearch has IAM roles properly configured for access control. The rule is NON_COMPLIANT if IAM roles are not set correctly for the Elasticsearch service.",
    "function_name": "iam_elasticsearch_roles_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1253",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket IAM policy does not allow another Google Cloud project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1254",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1255",
    "description": "Checks if a GCP project is part of an Organization. The rule is NON_COMPLIANT if a GCP project is not part of an Organization or the Organization ID does not match the specified parameter OrganizationId.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudresourcemanager_v1.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1256",
    "description": "Checks if a Google Cloud Storage bucket used for backups has an attached IAM policy which prevents deletion of backup objects. The rule is NON_COMPLIANT if the Storage bucket does not have IAM policies or has policies without a suitable 'Deny' statement (statement with storage.objects.delete, storage.objects.update permissions).",
    "function_name": "storage_bucket_iam_policy_prevent_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1257",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1258",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the 'readOnlyRootFilesystem' parameter in the container specification of the Pod definition is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1259",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1260",
    "description": "Checks if the IAM policies attached to your GCP service accounts and roles do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policies_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1261",
    "description": "Checks if there are any IAM policies directly attached to GCP service accounts, which would indicate the service accounts have inline policies. The rule is NON_COMPLIANT if a GCP service account has any IAM role directly attached.",
    "function_name": "iam_service_account_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1262",
    "description": "Checks in each Google Cloud Identity and Access Management (IAM) resource if a policy (IAM Role or Permission) associated with the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1263",
    "description": "Verifies if the Google Cloud IAM policy is attached to a Google Cloud user, a Google Cloud group with one or more users, or a Google Cloud service account with one or more trusted entities.",
    "function_name": "iam_policy_attached_to_user_or_group_or_service_account",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1264",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy binding includes 'role' that allows '*' permissions to 'allUsers'.",
    "function_name": "iam_policy_no_wildcard_permissions_all_users",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1265",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1266",
    "description": "Checks if all predefined IAM roles specified in the list are assigned to the Google Cloud IAM service account. The rule is NON_COMPLIANT if a predefined role is not assigned to the service account.",
    "function_name": "iam_service_account_predefined_roles_assigned",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1267",
    "description": "Checks if none of your Google Cloud IAM (Identity and Access Management) users have custom roles or permissions assigned directly. IAM users (service accounts) should inherit permissions from IAM groups or organizational policies. The rule is NON_COMPLIANT if there is at least one custom role or permission assigned directly to the IAM user.",
    "function_name": "iam_user_no_direct_custom_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1268",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1269",
    "description": "Checks if Google Cloud Elasticsearch Service instances have fine-grained access control enabled. The rule is NON_COMPLIANT if the fine-grained access control setting is not enabled for the Elasticsearch instance.",
    "function_name": "elasticsearch_instance_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1270",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1271",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1272",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1273",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.objects.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1274",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud IAM principals, service accounts, IP addresses, or VPC Service Controls that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1275",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1276",
    "description": "Checks if the Google Cloud Security Operations Center (SOC) can access your Google Cloud account. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for SOC access is not configured.",
    "function_name": "security_operations_center_role_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1277",
    "description": "Checks if a GCP project belongs to a Google Cloud Organization. The rule is NON_COMPLIANT if a GCP project is not part of a Google Cloud Organization or if the Organization ID does not match the specified parameter.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudresourcemanager.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1278",
    "description": "Checks if a backup plan in Google Cloud Platform (GCP) has a resource policy that prevents the deletion of backup snapshots. The rule is NON_COMPLIANT if the backup plan does not have resource policies or has policies without a suitable 'Deny' statement (conditions that restrict deletion operations on the backup resources).",
    "function_name": "compute_backup_plan_prevent_snapshot_deletion",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1279",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM (Identity and Access Management) service account attached to it. The rule is NON_COMPLIANT if no service account is attached to the GCE instance.",
    "function_name": "compute_instance_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1280",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the container specification is set to 'false'.",
    "function_name": "container_gke_containers_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1281",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1282",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1283",
    "description": "Checks if IAM policies are managed instead of using inline policies. The rule is NON_COMPLIANT if a Google Cloud IAM user, service account, or group has any inline policy instead of only using Google Cloud IAM custom roles and permissions.",
    "function_name": "iam_user_service_account_group_use_managed_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1284",
    "description": "Checks in each GCP Identity and Access Management (IAM) resource if a policy (e.g., IAM Role or IAM Policy) is attached to the IAM resource. The rule is NON_COMPLIANT if the specified policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1285",
    "description": "Checks whether the IAM policy is attached to a GCP user (service account), a Google group containing one or more users, or a GCP role with one or more principals.",
    "function_name": "iam_policy_attached_to_user_or_group_or_role",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1286",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer-managed IAM policy binding includes 'role: roles/owner' or any role that grants permissions to all actions over 'resource: /*'.",
    "function_name": "iam_policy_no_universal_owner_role",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1287",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any custom IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1288",
    "description": "Checks if all managed IAM roles specified in the list of IAM policies are attached to the Google Cloud Identity and Access Management (IAM) role. The rule is NON_COMPLIANT if a managed policy is not attached to the IAM role.",
    "function_name": "iam_role_managed_policies_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1289",
    "description": "Checks if none of your Google Cloud Platform (GCP) IAM users have custom roles or permissions directly attached. IAM users must inherit permissions from IAM groups or predefined roles. The rule is NON_COMPLIANT if there is at least one custom role or permission attached directly to the IAM user.",
    "function_name": "iam_user_no_custom_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1290",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1291",
    "description": "Checks if Google Cloud's Elasticsearch Service (managed by Elastic) domains have fine-grained access control enabled. The rule is NON_COMPLIANT if security features are not enabled for the Elasticsearch Service domain.",
    "function_name": "elastic_domain_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "elastic_client.domains().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1292",
    "description": "Checks if a Google Cloud SQL instance has Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1293",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Cloud IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1294",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1295",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other GCP projects or external accounts. The rule checks that the GCS bucket IAM policy does not allow another GCP project or external account to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_blocklisted_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1296",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, service accounts, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy does not allow public access.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1297",
    "description": "Checks if your Google Cloud Storage bucket IAM policies do not allow other inter-account permissions than the control Google Cloud Storage bucket IAM policy that you provide.",
    "function_name": "storage_bucket_iam_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1298",
    "description": "Checks if the Google Cloud Security Command Center (SCC) can access your Google Cloud project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for SCC access is not configured.",
    "function_name": "security_command_center_access_role_configured",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1299",
    "description": "Checks if a GCP project is part of an organization. The rule is NON_COMPLIANT if a GCP project is not associated with an organization or if the organization ID does not match the rule parameter 'OrganizationId'.",
    "function_name": "iam_project_organization_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1300",
    "description": "Checks if a Google Cloud Backup (GCB) Vault has an attached IAM policy which prevents deletion of backup recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have IAM policies or has policies without appropriate 'deny' conditions.",
    "function_name": "iam_backup_vault_deny_deletion_policy",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1301",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1302",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the container spec is set to 'false'.",
    "function_name": "container_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1303",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "kms_keys_blocked_actions_restricted",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-keyring/cryptoKeys/my-key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1304",
    "description": "Verifies that the IAM policies associated with your GCP service accounts and Google groups do not permit actions that are blocked by GCP's key management controls on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in a policy.",
    "function_name": "iam_service_accounts_policies_restrict_kms_blocked_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1305",
    "description": "Checks if the IAM policy feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity and Access Management (IAM) user, service account, or IAM group has any inline policies associated with them.",
    "function_name": "iam_user_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1306",
    "description": "Checks in each Google Cloud IAM resource, if a policy specified by Resource Name (URN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy URN is attached to the IAM resource.",
    "function_name": "iam_policy_urn_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1307",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a Google Group with one or more IAM users, or a Google Service Account with one or more trusted identities.",
    "function_name": "iam_policy_attached_to_trusted_identities",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1308",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'binding' with 'role' that grants 'roles/owner', 'roles/editor', or any other role that has broad permissions over 'allUsers' or 'allAuthenticatedUsers' over 'projects/*'.",
    "function_name": "iam_policy_no_broad_permissions_all_users",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1309",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1310",
    "description": "Checks if all specified IAM roles in Google Cloud have the required IAM policies attached. The rule is NON_COMPLIANT if a required IAM policy is not attached to the role.",
    "function_name": "iam_roles_required_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1311",
    "description": "Checks if none of your Google Cloud IAM users have policies attached. IAM users must inherit permissions from IAM groups or roles. The rule is NON_COMPLIANT if there is at least one policy that is attached to the IAM user.",
    "function_name": "iam_user_no_direct_policy_attachment",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1312",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1313",
    "description": "Checks if Google Cloud Search instances have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM policies do not enforce fine-grained access control for the Cloud Search instance.",
    "function_name": "cloudsearch_instance_fine_grained_access_control_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={}).execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1314",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1315",
    "description": "Checks if a Google Cloud SQL instance has Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have Cloud IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1316",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1317",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the Google Cloud Storage bucket IAM policy does not allow another Google Cloud project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the Google Cloud Storage bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_blocklisted_actions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1318",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, IAM users, service accounts, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1319",
    "description": "Checks if your Google Cloud Storage bucket permissions do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_permissions_restrict_inter_account",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1320",
    "description": "Checks if the Google Cloud Armor Security Team can access your GCP project. The rule is NON_COMPLIANT if Cloud Armor is enabled but the role for the Security Team access is not configured.",
    "function_name": "network_cloud_armor_security_team_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1321",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud Keys. The rule is NON_COMPLIANT if a running GCE instance is launched with a service account key.",
    "function_name": "compute_instance_use_cloud_keys",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1322",
    "description": "Checks whether IAM groups in GCP have at least one IAM member (user/service account)",
    "function_name": "iam_group_has_member",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1323",
    "description": "Checks whether the IAM policy is attached to a Google Cloud Identity and Access Management (IAM) user, or to a group of users, or to a service account with trusted identities.",
    "function_name": "iam_policy_attached_to_trusted_identities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1324",
    "description": "Checks if the Google Cloud Platform (GCP) root service account (unrestricted access) key is available. The rule is COMPLIANT if the service account key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_root_key",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1325",
    "description": "Verifies if IAM users belong to at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1326",
    "description": "Checks if the project contains environment variables GOOGLE_APPLICATION_CREDENTIALS. The rule is NON_COMPLIANT when the project environment variables contain plaintext credentials.",
    "function_name": "compute_project_no_plaintext_credentials",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1327",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud key pairs. The rule is NON_COMPLIANT if a running GCE instance is launched with a key pair.",
    "function_name": "compute_instance_no_external_key_pairs",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1328",
    "description": "Checks if secrets are passed as container environment variables. The rule is NON_COMPLIANT if 1 or more environment variable key matches a key listed in the 'secretKeys' parameter (excluding environmental variables from other locations such as Google Cloud Storage).",
    "function_name": "container_environment_variables_no_secrets",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1329",
    "description": "Checks whether IAM groups have at least one IAM user in Google Cloud Platform.",
    "function_name": "iam_group_has_user",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1330",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group of Google Cloud IAM users, or a Google Cloud IAM role with one or more trusted entities.",
    "function_name": "iam_policy_attached_to_trusted_entities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1331",
    "description": "Checks if the Google Cloud project has any service account key with Owner role. The rule is COMPLIANT if no service account key with the Owner role exists. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_owner_role",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1332",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP). This can be done using the Identity and Access Management (IAM) service to review roles and group memberships.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1333",
    "description": "Checks if Google Secret Manager secret has rotation enabled. The rule also checks an optional maxAllowedRotationFrequency parameter. If specified, the rotation frequency of the secret is compared with the max allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation or if the rotation frequency exceeds the specified maxAllowedRotationFrequency.",
    "function_name": "secretmanager_secret_rotation_enabled_within_max_frequency",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1334",
    "description": "Checks if Google Cloud Secret Manager secrets rotated successfully according to the rotation schedule. Secret Manager monitors the rotation date, and the rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secrets_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1335",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1336",
    "description": "Checks if Google Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1337",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud key pairs. The rule is NON_COMPLIANT if a running GCE instance is launched with a key pair.",
    "function_name": "compute_instance_no_external_key_pair",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1338",
    "description": "Verifica se os grupos IAM têm pelo menos um usuário IAM.",
    "function_name": "iam_groups_have_iam_user",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1339",
    "description": "Verifies if the IAM policy is attached to a Google Cloud IAM user, a Google Group containing one or more IAM users, or a Google Cloud IAM Role that has one or more trusted identities.",
    "function_name": "iam_policy_attached_to_user_group_or_role",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1340",
    "description": "Check if the service account with editor or owner roles has been assigned. The rule is COMPLIANT if such service accounts do not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_editor_owner_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1341",
    "description": "Verifies if IAM users are included in at least one IAM group within Google Cloud Platform (GCP).",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/sa-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1342",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using SSH keys. The rule is NON_COMPLIANT if a running GCE instance is launched with a project-wide SSH key.",
    "function_name": "compute_instance_ssh_key_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1343",
    "description": "In Google Cloud Platform (GCP), this can be achieved by checking the IAM policy of a group to see if it contains any IAM members. This involves verifying that each IAM group has at least one user assigned in the IAM roles.",
    "function_name": "iam_group_membership_ensured",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().getIamPolicy(resource='group_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1344",
    "description": "Verifies whether the IAM policy is attached to a Google Cloud IAM user, a Google Group that contains one or more IAM users, or a Google IAM role that is associated with one or more service accounts.",
    "function_name": "iam_policy_association_to_user_group_role",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1345",
    "description": "Checks if the Google Cloud IAM service account key for the root user exists. The rule is COMPLIANT if the service account key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_key_absent_for_root_user",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/root@project.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1346",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP).",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1347",
    "description": "Checks whether IAM groups in Google Cloud Platform have at least one IAM user assigned to them.",
    "function_name": "iam_group_has_user",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1348",
    "description": "Checks if your GCP Identity and Access Management (IAM) users have passwords or active service account keys that have not been used within the specified number of days. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_users_inactive_passwords_or_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1349",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1350",
    "description": "Checks if a GCP project is part of a Google Cloud Organization. The rule is NON_COMPLIANT if a GCP project is not associated with the organization or if the Organization ID does not match the rule parameter MasterOrganizationId.",
    "function_name": "iam_project_organization_association",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudresourcemanager.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1351",
    "description": "Checks if a GCP Backup Policy has suitable IAM policies attached to it to prevent the deletion of backup sources. The rule is NON_COMPLIANT if the Backup Policy does not have IAM policies or has policies without a suitable 'deny' condition (condition with storage.objects.delete, storage.objects.update permissions).",
    "function_name": "iam_backup_policy_deny_condition_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.policies().get(name='projects/project-id/policies/policy-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1352",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM (Identity and Access Management) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1353",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem field in the container spec of GKE Pod definitions is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1354",
    "description": "Verifies that the IAM policies within Google Cloud Platform do not permit disallowed actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any disallowed action is allowed on Google Cloud KMS keys by the IAM policy.",
    "function_name": "kms_keys_disallowed_actions_restricted",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-key-ring/cryptoKeys/my-key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1355",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on any Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1356",
    "description": "Checks if the IAM policy feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity (GCP IAM) user, IAM role, or IAM group has any inline policy.",
    "function_name": "iam_user_role_group_no_inline_policy",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1357",
    "description": "Checks in each Google Cloud IAM resource if a policy (role or binding) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1358",
    "description": "Checks whether the IAM policy ARN is attached to a user, group, or role with associated members in Google Cloud Platform.",
    "function_name": "iam_policy_arn_attached_to_member",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1359",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer-managed IAM policy binding includes 'role' that grants 'roles/owner' or 'roles/editor' over 'allUsers'.",
    "function_name": "iam_policy_no_overprivileged_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1360",
    "description": "Checks if Google Cloud IAM roles that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer managed IAM role allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_roles_no_full_access",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1361",
    "description": "Checks if all Google Cloud IAM policies specified in the list of IAM roles are attached to the Google Cloud IAM role. The rule is NON_COMPLIANT if a IAM policy is not attached to the IAM role.",
    "function_name": "iam_role_policies_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1362",
    "description": "Checks if none of your Google Cloud IAM users have roles attached directly. IAM users must inherit permissions from IAM groups or service accounts. The rule is NON_COMPLIANT if there is at least one role that is attached directly to the IAM user.",
    "function_name": "iam_user_roles_inherited",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1363",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1364",
    "description": "Checks if Google Cloud Search has fine-grained access control enabled. The rule is NON_COMPLIANT if security features for Cloud Search are not configured correctly.",
    "function_name": "cloudsearch_access_control_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.settings().get(project='proj', setting='accessControl')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1365",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1366",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1367",
    "description": "Checks if Google Cloud Storage Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1368",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket IAM policy does not allow another Google Cloud project to perform any storage.buckets.get and storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1369",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the GCP principals, service accounts, or IP addresses that you provide. The rule is COMPLIANT if a bucket policy (IAM role bindings) is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1370",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1371",
    "description": "Checks if the Google Cloud Incident Response Team (GCSIRT) can access your GCP project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for GCSIRT access is not configured.",
    "function_name": "network_load_balancer_gcsirt_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1372",
    "description": "Checks if a Google Cloud account is part of Google Cloud Resource Manager Organization. The rule is NON_COMPLIANT if a Google Cloud project is not associated with any organization or the organization's ID does not match the specified OrganizationId parameter.",
    "function_name": "resource_manager_project_organization_association",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm_client.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1373",
    "description": "Checks whether only the Google Cloud Platform (GCP) Metadata Server v2 is enabled. This rule is NON_COMPLIANT if the Metadata version is not specified in the instance configuration or if both Metadata v1 and v2 are enabled.",
    "function_name": "compute_instance_metadata_v2_only_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1374",
    "description": "Checks if a Google Cloud Platform (GCP) Backup Policy has an attached resource-based IAM policy which prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Policy does not have IAM policies or has policies without a suitable 'Deny' statement (statement with roles/storage.admin permissions for backup deletion).",
    "function_name": "iam_backup_policy_prevent_deletion",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1375",
    "description": "Checks if your Google Compute Engine (GCE) instance metadata version is configured with the Enhanced Metadata feature enabled. The rule is NON_COMPLIANT if the metadata access is set to legacy mode.",
    "function_name": "compute_instance_metadata_enhanced_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1376",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1377",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the ReadOnlyRootFilesystem parameter in the container specification of the Pod definition is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1378",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1379",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow forbidden actions on Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any forbidden action is permitted on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_forbidden_actions_on_kms_keys_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1380",
    "description": "Checks if the IAM policy feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity and Access Management (IAM) user, service account, or IAM group has any IAM policy bindings attached directly to them instead of using predefined roles or custom roles.",
    "function_name": "iam_user_policy_bindings_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1381",
    "description": "Checks in each Google Cloud IAM resource if a policy Google Cloud Resource Name (GCRN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy GCRN is attached to the IAM resource.",
    "function_name": "iam_policy_disallowed_gcrn_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1382",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group with one or more IAM users, or a Google Cloud IAM role with one or more trusted entities.",
    "function_name": "iam_policy_attachment_compliance",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1383",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'role' that allows all actions on all resources.",
    "function_name": "iam_policy_no_wildcard_permissions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1384",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1385",
    "description": "Checks if all IAM policies specified in the list are attached to the Google Cloud IAM role. The rule is NON_COMPLIANT if a managed policy is not attached to the IAM role.",
    "function_name": "iam_role_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1386",
    "description": "Checks if none of your Google Cloud IAM users have policies attached directly to them. IAM users must inherit permissions from IAM roles or groups. The rule is NON_COMPLIANT if there is at least one policy that is attached to the IAM user.",
    "function_name": "iam_user_no_direct_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1387",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1388",
    "description": "Checks if Google Cloud Elasticsearch domains have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM roles and permissions for the Elasticsearch Service are not configured properly to enforce fine-grained access control.",
    "function_name": "elasticsearch_domain_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "elasticsearch_client.get_domain_config(DomainName='domain-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1389",
    "description": "Checks if a Google Cloud SQL instance has IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1390",
    "description": "Checks if a Google Cloud SQL instance has Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1391",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1392",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other GCP projects. For example, the rule checks that the GCS bucket IAM policy does not allow another GCP project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1393",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted to specified Google Cloud principals, service accounts, user accounts, or IP addresses provided. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1394",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1395",
    "description": "Checks if the Google Cloud Security Team can access your GCP project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for Security Team access is not configured.",
    "function_name": "network_google_cloud_armor_security_team_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1396",
    "description": "Checks if active IAM service account keys are rotated within the number of days specified in maxAccessKeyAge. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1397",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maximumAllowedRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret does not have a scheduled rotation. The rule is also NON_COMPLIANT if the rotation frequency exceeds the maximumAllowedRotationFrequency parameter.",
    "function_name": "secretmanager_secret_rotation_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1398",
    "description": "Checks if Google Cloud Secret Manager secrets rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secrets_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1399",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/project_id/secrets/secret_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1400",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud key pairs. The rule is NON_COMPLIANT if a running GCE instance is launched with a key pair.",
    "function_name": "compute_instance_no_external_key_pairs",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1401",
    "description": "Checks whether IAM groups in Google Cloud Platform have at least one IAM user associated with them.",
    "function_name": "iam_group_user_association_required",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1402",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group of IAM users, or a service account with one or more trusted entities.",
    "function_name": "iam_policy_trusted_entities_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1403",
    "description": "Checks if the root user access key is available. The rule is COMPLIANT if the user access key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_user_root_access_key_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@project.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1404",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP). This can be achieved using Cloud IAM to manage roles and permissions associated with groups and users.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1405",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP(S) Load Balancers in Google Cloud Platform. The rule is NON_COMPLIANT if one or more HTTP(S) Load Balancer configurations do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP(S) Load Balancer configurations forward traffic to an HTTP listener instead of redirecting to HTTPS.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1406",
    "description": "Checks if all methods in Google Cloud API Gateway APIs have cache enabled and cache encrypted. The rule is NON_COMPLIANT if any method in a Google Cloud API Gateway API is not configured to cache or the cache is not encrypted.",
    "function_name": "apigateway_methods_cache_encrypted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1407",
    "description": "Checks if a Google BigQuery dataset is encrypted at rest. The rule is NON_COMPLIANT if encryption of data at rest is not enabled for a BigQuery dataset.",
    "function_name": "bigquery_dataset_encryption_at_rest_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1408",
    "description": "Checks if a Cloud Storage backup snapshot is encrypted. The rule is NON_COMPLIANT if the snapshot is not encrypted.",
    "function_name": "storage_snapshot_encrypted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_blob(blob_name).kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1409",
    "description": "Checks if Google Cloud CDN distributions are using deprecated SSL protocols for HTTPS communication between CDN edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN distribution if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_distribution_no_deprecated_ssl",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1410",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'OriginProtocol' is 'HTTP' or if 'OriginProtocol' is 'MATCH_VIEWER' and 'ViewerProtocol' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_traffic_encryption_custom_origins",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1411",
    "description": "Checks if your Google Cloud CDN configurations use HTTPS. The rule is NON_COMPLIANT if the value of 'https' is not enforced for the backend services serving content.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1412",
    "description": "Checks if Google Cloud Logging (Stackdriver Logging) log sinks are encrypted with a specified Google Cloud KMS key or any KMS key. The rule is NON_COMPLIANT if a log sink is not encrypted with a KMS key or is encrypted with a KMS key that is not supplied in the rule parameter.",
    "function_name": "logging_log_sinks_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1413",
    "description": "Checks if Google Cloud Audit Logs is configured to use Cloud KMS for encryption. The rule is COMPLIANT if the KmsKeyId for the service account is defined.",
    "function_name": "logging_audit_logs_kms_encryption_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1414",
    "description": "Checks if a Google Cloud Build configuration has encryption enabled for all of its artifacts. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' for any artifact configurations in the build triggers.",
    "function_name": "cloudbuild_artifact_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1415",
    "description": "Checks if the project contains environment variables GOOGLE_CLOUD_ACCESS_KEY_ID and GOOGLE_CLOUD_SECRET_ACCESS_KEY. The rule is NON_COMPLIANT when the project environment variables contain plaintext credentials.",
    "function_name": "compute_project_no_plaintext_credentials",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1416",
    "description": "Checks if a Google Cloud Build (GCB) project configured with Google Cloud Storage (GCS) logs has encryption enabled for its logs. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' in the GCS logs configuration of a Cloud Build project.",
    "function_name": "cloudbuild_project_gcs_logs_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1417",
    "description": "Checks if Google Cloud Datastore instances are encrypted. The rule is NON_COMPLIANT if a Datastore instance is not encrypted.",
    "function_name": "datastore_instance_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "datastore_client.get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1418",
    "description": "Checks if your Google Cloud Firestore database has network encryption enabled. The rule is NON_COMPLIANT if a Firestore database is not encrypted by transport layer security (TLS).",
    "function_name": "firestore_database_network_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1419",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if Google Cloud DMS does not have an SSL connection configured.",
    "function_name": "dms_endpoints_ssl_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1420",
    "description": "Checks if Google Cloud Database Migration Service (GCDMS) endpoints for Redis data stores are enabled for TLS/SSL encryption of data communicated with other endpoints. The rule is NON_COMPLIANT if TLS/SSL encryption is not enabled.",
    "function_name": "gcdms_redis_endpoints_tls_ssl_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "datamigration.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1421",
    "description": "Checks if storage encryption is enabled for Google Cloud Firestore. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "firestore_database_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1422",
    "description": "Checks if Google Cloud Firestore is encrypted with Google Cloud Key Management Service (KMS). The rule is NON_COMPLIANT if the Google Cloud Firestore database is not encrypted with Google Cloud KMS. The rule is also NON_COMPLIANT if the specified Google Cloud KMS key is not present in the kmsKeyArns input parameter.",
    "function_name": "firestore_database_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1423",
    "description": "Checks if the Google Cloud Firestore databases are encrypted and checks their status. The rule is COMPLIANT if the status is enabled or enabling.",
    "function_name": "firestore_database_encryption_status",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1424",
    "description": "Checks if Google Cloud Persistent Disk encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled.",
    "function_name": "compute_disk_encryption_enabled_by_default",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1425",
    "description": "Checks if secrets are passed as environment variables in Google Cloud Run or Google Kubernetes Engine (GKE). The rule is NON_COMPLIANT if 1 or more environment variable key matches a key listed in the 'secretKeys' parameter, excluding variables from other sources like Google Cloud Storage.",
    "function_name": "container_environment_variables_no_secrets",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/loc/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1426",
    "description": "Checks if Google Cloud Filestore is configured to encrypt the file data using Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if the 'encryptionKey' parameter in the Filestore instance configuration does not match the specified KMS key.",
    "function_name": "filestore_instance_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1427",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud KMS. The rule is NON_COMPLIANT if a GKE cluster does not have an encryption configuration for secrets or if the encryption configuration does not specify secrets as a resource.",
    "function_name": "container_gke_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1428",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud Key Management Service (KMS) keys.",
    "function_name": "container_gke_clusters_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/loc/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1429",
    "description": "Checks if Google Cloud Memorystore for Redis instances have encryption-at-rest enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'redisConfig.enableAuth' is disabled or if the 'redisConfig.kmsKeyName' does not match the approvedKmsKeyArns parameter.",
    "function_name": "memorystore_redis_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1430",
    "description": "Checks if Google Cloud Memorystore for Redis instances have encryption-in-transit enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transitEncryptionMode' is set to 'DISABLED'.",
    "function_name": "memorystore_redis_encryption_in_transit_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1431",
    "description": "Checks if Google Cloud Search instances have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the encryption settings are not properly configured.",
    "function_name": "search_instances_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1432",
    "description": "Check if Google Cloud Elasticsearch (part of Google Cloud's managed services) has node-to-node encryption enabled. The rule should be NON_COMPLIANT if node-to-node encryption is not enabled for the Elasticsearch deployment.",
    "function_name": "dataproc_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1433",
    "description": "Checks if the TCP/UDP Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure the Load Balancer is set up for SSL or HTTPS traffic. This rule is only applicable to TCP/UDP Load Balancers. This rule does not check Application Load Balancers.",
    "function_name": "network_tcp_udp_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.targetTcpProxies().get(project='proj', targetTcpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1434",
    "description": "Checks whether your Cloud Load Balancer SSL policies are configured with a custom policy. The rule is only applicable if there are SSL listeners for the Cloud Load Balancer.",
    "function_name": "network_load_balancer_ssl_custom_policy_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1435",
    "description": "Checks if your Google Cloud Platform Load Balancer SSL policies use a predefined policy. The rule is NON_COMPLIANT if the Google Cloud Load Balancer HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1436",
    "description": "Checks if your Google Cloud Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1437",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1438",
    "description": "Checks if attached Google Persistent Disks are encrypted and optionally are encrypted with a specified Customer Managed Encryption Key (CMEK). The rule is NON_COMPLIANT if attached Persistent Disks are unencrypted or are encrypted with a CMEK not in the supplied parameters.",
    "function_name": "compute_persistent_disks_encrypted_with_cmek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1439",
    "description": "Checks if Google Cloud Pub/Sub topics are encrypted at rest with Google-managed encryption. The rule is NON_COMPLIANT for a Pub/Sub topic if 'Encryption' is not configured.",
    "function_name": "pubsub_topic_encryption_google_managed",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1440",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) when communicating with subscribers. The rule is NON_COMPLIANT if plain text communication is enabled for connections to the topic.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1441",
    "description": "Checks if storage encryption is enabled for your Google Cloud Spanner instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "spanner_instance_storage_encryption_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance_admin().get_instance(name='instance_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1442",
    "description": "Checks if a Cloud SQL instance in GCP has backups encrypted. The rule is NON_COMPLIANT if a Cloud SQL instance does not have backups encrypted.",
    "function_name": "sql_instance_backups_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1443",
    "description": "Checks if Google Cloud OpenSearch domains have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the encryption at rest options are not enabled.",
    "function_name": "opensearch_domain_encryption_at_rest_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "opensearch_client.get_domain_config(DomainName='domain_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1444",
    "description": "Checks whether connections to Google Cloud Search domains are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Search domain 'EnforceHTTPS' is not 'true' or is 'true' and 'TLSecurityPolicy' is not in 'securityPolicies'.",
    "function_name": "network_cloud_search_enforce_https_tls_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1445",
    "description": "Check if Google Cloud Search nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the search service.",
    "function_name": "search_nodes_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1446",
    "description": "Checks if a Google Cloud SQL instance is encrypted at rest. The rule is NON_COMPLIANT if a Google Cloud SQL instance is not encrypted at rest.",
    "function_name": "sql_instance_encryption_at_rest",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1447",
    "description": "Checks if Google Cloud SQL database snapshots are encrypted. The rule is NON_COMPLIANT if the Google Cloud SQL database snapshots are not encrypted.",
    "function_name": "sql_snapshots_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1448",
    "description": "Checks if storage encryption is enabled for your Google Cloud SQL instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "sql_instances_storage_encryption_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1449",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1450",
    "description": "Checks if Google BigQuery datasets are using a specified Google Cloud Key Management Service (Cloud KMS) key for encryption. The rule is COMPLIANT if encryption is enabled and the dataset is encrypted with the key provided. The rule is NON_COMPLIANT if the dataset is not encrypted or encrypted with another key.",
    "function_name": "bigquery_dataset_encryption_with_kms_key",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1451",
    "description": "Checks if Google BigQuery requires TLS/SSL encryption for connections. The rule is NON_COMPLIANT if any Google BigQuery service does not enforce TLS/SSL encryption for client connections.",
    "function_name": "bigquery_service_enforce_tls_ssl",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_service_account(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1452",
    "description": "Checks if your Google Cloud Storage bucket has default object encryption enabled or if the bucket's IAM policies explicitly deny write access without using encryption such as Google-managed encryption keys. The rule is NON_COMPLIANT if your Google Cloud Storage bucket is not encrypted by default.",
    "function_name": "storage_bucket_default_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).default_kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1453",
    "description": "Checks if Google Cloud Storage (GCS) buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any GCS bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1454",
    "description": "Checks if the Google Cloud Storage buckets are encrypted with Google Cloud KMS. The rule is NON_COMPLIANT if the Cloud Storage bucket is not encrypted with a Google Cloud KMS key.",
    "function_name": "storage_bucket_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1455",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) key is configured for a Google Cloud AI Platform endpoint configuration. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the Google Cloud AI Platform endpoint configuration.",
    "function_name": "ai_platform_endpoint_kms_key_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "ai_platform_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1456",
    "description": "Checks if a Google Cloud Key Management Service (GCP KMS) key is configured for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the AI Platform Notebook instance.",
    "function_name": "ai_platform_notebook_kms_key_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(project='proj', location='location', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1457",
    "description": "Checks if all secrets in Google Cloud Secret Manager are encrypted using Google-managed encryption keys or a customer-managed key created in Google Cloud Key Management Service (KMS). The rule is COMPLIANT if a secret is encrypted using a customer-managed key. This rule is NON_COMPLIANT if a secret is encrypted using Google-managed encryption keys.",
    "function_name": "secretmanager_secret_encryption_customer_managed_key",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1458",
    "description": "Checks if Pub/Sub topics are encrypted with Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if a Pub/Sub topic is not encrypted with Google Cloud KMS. Optionally, specify the key resource names, the key aliases, or the key IDs for the rule to check.",
    "function_name": "pubsub_topic_encrypted_with_kms",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1459",
    "description": "Checks if a GCP project is part of an Organization. The rule is NON_COMPLIANT if a GCP project is not attached to a GCP Organization or the Organization ID does not match rule parameter OrganizationId.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1460",
    "description": "Checks if a Backup Vault in GCP has an attached IAM policy which prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have IAM policies or has policies without a suitable 'Deny' statement (statement with the permissions backup.deleteRecoveryPoint, backup.updateRecoveryPointLifecycle, and backup.putBackupVaultAccessPolicy).",
    "function_name": "iam_backup_vault_iam_policy_prevent_deletion",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1461",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1462",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the Pod security context is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1463",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1464",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1465",
    "description": "Checks if IAM policies are not inline policies. The rule is NON_COMPLIANT if a Google Cloud IAM user, IAM role, or IAM group has any inline policy associated with it.",
    "function_name": "iam_user_role_group_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1466",
    "description": "Checks in each Google Cloud Identity and Access Management (IAM) resource if a policy resource name (policy ARN equivalent) specified in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy resource name is attached to the IAM resource.",
    "function_name": "iam_policy_attachment_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1467",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group with one or more IAM users, or a service account (role) with one or more trusted identities.",
    "function_name": "iam_policy_attached_to_user_group_or_service_account",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1468",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer-managed IAM policy statement includes 'role': 'roles/owner' or grants 'allUser' permissions over 'allResources'.",
    "function_name": "iam_policy_no_owner_or_alluser_permissions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1469",
    "description": "Checks if Google Cloud IAM roles that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer managed IAM role allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_role_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1470",
    "description": "Checks if all specified IAM policies are attached to the Google Cloud IAM Service Account. The rule is NON_COMPLIANT if a policy is not attached to the Service Account.",
    "function_name": "iam_service_account_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1471",
    "description": "Checks if none of your Google Cloud IAM users have policies directly attached. IAM users must inherit permissions from IAM groups or roles. The rule is NON_COMPLIANT if there is at least one policy attached to the IAM user.",
    "function_name": "iam_user_no_direct_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1472",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1473",
    "description": "Checks if Google Cloud's Elasticsearch Service (managed by Elastic) domains have fine-grained access control enabled. The rule is NON_COMPLIANT if fine-grained access control is not enabled for the Elasticsearch domain.",
    "function_name": "elastic_domain_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "elastic_client.domains().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1474",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1475",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1476",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1477",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.objects.get and storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1478",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, IAM roles, service accounts, IP addresses, or VPNs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1479",
    "description": "Verifies that your Google Cloud Storage bucket policies do not permit inter-project permissions beyond the specified control Cloud Storage bucket policy.",
    "function_name": "storage_bucket_policy_no_inter_project_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1480",
    "description": "Checks if the Google Cloud Security Operations team can access your Google Cloud account. The rule is NON_COMPLIANT if Cloud Armor is enabled but the role for Security Operations team access is not configured.",
    "function_name": "network_load_balancer_security_operations_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1481",
    "description": "Checks if active IAM service account keys are rotated (changed) within the number of days specified in keyRotationPeriod. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_period",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1482",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled and verifies the rotation frequency against the maximum allowed frequency specified. The rule is NON_COMPLIANT if the secret is not scheduled for rotation or if the rotation frequency exceeds the given maximum allowed frequency.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1483",
    "description": "Checks if Google Cloud Secret Manager secrets are rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1484",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1485",
    "description": "Checks if the account password policy for Google Cloud Identity users meets the specified requirements indicated in the parameters. The rule is NON_COMPLIANT if the account password policy does not meet the specified requirements.",
    "function_name": "iam_identity_password_policy_compliance",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1486",
    "description": "Checks if active IAM access keys are rotated (changed) within the number of days specified in maxAccessKeyAge (default 90 days). The rule is NON_COMPLIANT if access keys are not rotated within the specified time period.",
    "function_name": "iam_access_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1487",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maxAllowedRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation or if the rotation frequency exceeds the specified maxAllowedRotationFrequency.",
    "function_name": "secretmanager_secret_rotation_enabled_within_max_frequency",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1488",
    "description": "Checks if Google Cloud Secret Manager secrets rotated successfully according to the rotation schedule. Google Cloud Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secrets_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1489",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1490",
    "description": "Checks if active IAM service account keys are rotated (changed) within the number of days specified in maxKeyAge. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1491",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maximumAllowedRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation. The rule is also NON_COMPLIANT if the rotation frequency is higher than the specified maximumAllowedRotationFrequency parameter.",
    "function_name": "secretmanager_secret_rotation_enabled_max_frequency",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1492",
    "description": "Checks if GCP Secret Manager secrets are rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1493",
    "description": "Checks if Google Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_recent_rotation",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1494",
    "description": "Checks if the Google Cloud Identity and Access Management (IAM) users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "function_name": "iam_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1495",
    "description": "Checks if Google Cloud multi-factor authentication (MFA) is enabled for all Google Cloud Identity and Access Management (IAM) users that use a console password. The rule is COMPLIANT if MFA is enabled.",
    "function_name": "iam_users_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1496",
    "description": "Checks if your GCP account is enabled to use multi-factor authentication (MFA) for signing in with the root service account. The rule is NON_COMPLIANT if any virtual MFA devices are allowed for root service account sign-ins.",
    "function_name": "iam_service_account_mfa_enabled_root",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1497",
    "description": "Verifies if the Google Cloud Platform (GCP) service account used has multi-factor authentication (MFA) enabled for enhanced security. The evaluation returns NON_COMPLIANT if the service account does not have MFA set up.",
    "function_name": "iam_service_account_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1498",
    "description": "Checks if Object Versioning is enabled in Google Cloud Storage buckets. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1499",
    "description": "Checks if the Google Cloud Identity and Access Management (IAM) users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "function_name": "iam_users_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1500",
    "description": "Checks if Google Cloud Platform (GCP) multi-factor authentication (MFA) is enabled for all Google Identity users that use a console password. The rule is COMPLIANT if MFA is enabled.",
    "function_name": "iam_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1501",
    "description": "Checks if your GCP account is enabled to use multi-factor authentication (MFA) for Google Cloud Platform accounts. The rule is NON_COMPLIANT if any accounts can sign in without a valid MFA setup.",
    "function_name": "iam_account_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1502",
    "description": "Checks if the root user of your GCP account requires multi-factor authentication for console sign-in. The rule is NON_COMPLIANT if the Google Cloud Platform (GCP) root account user does not have multi-factor authentication (MFA) enabled.",
    "function_name": "iam_root_user_mfa_required",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@your-project-id.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1503",
    "description": "Checks if Object Versioning is enabled in Google Cloud Storage (GCS) buckets. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1504",
    "description": "Checks if Google Cloud IAM users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "function_name": "iam_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1505",
    "description": "Checks if Google Cloud Platform (GCP) multi-factor authentication (MFA) is enabled for all Google Cloud Identity users. The rule is COMPLIANT if MFA is enabled.",
    "function_name": "iam_identity_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1506",
    "description": "Checks if your Google Cloud Platform (GCP) account is enabled to use multi-factor authentication (MFA) for the root user. The rule is NON_COMPLIANT if any virtual MFA devices are allowed for signing in with the administrator account.",
    "function_name": "iam_account_mfa_enabled_root_user",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@your-project-id.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1507",
    "description": "Checks if the root user of your GCP account requires multi-factor authentication for console sign-in. The rule is NON_COMPLIANT if the Google Cloud Identity root account user does not have multi-factor authentication (MFA) enabled.",
    "function_name": "iam_root_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@your-project-id.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1508",
    "description": "Checks if Object Versioning is enabled on Google Cloud Storage (GCS) buckets and requires additional security measures for delete operations. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1509",
    "description": "Checks if active IAM service account keys are rotated (changed) within the number of days specified in maxAccessKeyAge. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1510",
    "description": "Verifies if the organization’s Google Cloud Identity password policy adheres to specified requirements for users. The rule is NON_COMPLIANT if the password policy does not comply with these requirements.",
    "function_name": "iam_identity_password_policy_compliance",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1511",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maxRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation. The rule is also NON_COMPLIANT if the rotation frequency is higher than the specified maxRotationFrequency parameter.",
    "function_name": "secretmanager_secret_rotation_enabled_max_frequency",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1512",
    "description": "Checks if Google Cloud Secret Manager secrets are rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1513",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1514",
    "description": "Checks if a backup vault has an attached IAM policy that prevents deletion of backup recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have IAM policies or has policies lacking a suitable 'Deny' statement for deleting backups.",
    "function_name": "iam_backup_vault_deny_deletion_policy",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1515",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) instances are publicly accessible. The rule is NON_COMPLIANT if the 'public' option is set to true.",
    "function_name": "dms_instance_public_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1516",
    "description": "Checks if Google Cloud Firestore snapshots are public. The rule is NON_COMPLIANT if any Google Cloud Firestore snapshots are public.",
    "function_name": "firestore_snapshots_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('snapshots').document('snapshot_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1517",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots have permissions that allow public access.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1518",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem field in the Pod security context is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1519",
    "description": "Checks if Google Cloud Filestore instances are configured to enforce a root directory. The rule is NON_COMPLIANT if the root directory is set to '/' (default root directory of the file system).",
    "function_name": "filestore_instance_enforce_root_directory",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1520",
    "description": "Checks if Google Cloud Filestore (GCP equivalent of Amazon EFS) access points are configured to enforce a user identity. The rule is NON_COMPLIANT if 'IAM permissions' are not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "function_name": "filestore_access_points_enforce_user_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1521",
    "description": "Checks if a Google Cloud account has VPC firewall rules set to block public access. The rule is NON_COMPLIANT if 'allowIngressFromAll' is true, or if true, ports other than Port 22 are open to ingress traffic from any source.",
    "function_name": "network_vpc_firewall_block_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1522",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1523",
    "description": "Checks if a Google Cloud SQL database instance snapshot is shared publicly. The rule is NON_COMPLIANT if any existing and new Cloud SQL snapshot is shared publicly.",
    "function_name": "sql_instance_snapshot_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1524",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the `ipConfiguration.requireSsl` field is false and there are any public IP addresses assigned to the instance.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1525",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1526",
    "description": "Checks if Google BigQuery datasets do not have public access. The rule is NON_COMPLIANT if the dataset's 'access' configuration includes entries that grant 'allUsers' or 'allAuthenticatedUsers' permissions.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1527",
    "description": "Checks if Google Cloud Storage (GCS) bucket access settings have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1528",
    "description": "Verifies if the necessary public access prevention settings are applied at the project level. The rule is considered NON_COMPLIANT only when the specified settings do not align with the corresponding settings in the configuration item.",
    "function_name": "storage_project_public_access_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1529",
    "description": "Checks if the required public access prevention settings are configured at the project level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1530",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket access control settings allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1531",
    "description": "Checks if Object Versioning is enabled and if Object Versioning is configured to require the 'Object Versioning' actions to be performed with the appropriate IAM policies in Google Cloud Storage (GCS). The rule is NON_COMPLIANT if these configurations are not met.",
    "function_name": "storage_bucket_object_versioning_enabled_with_iam_policies",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1532",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule evaluates the Uniform Bucket-Level Access settings, the bucket IAM policies, and ACLs to ensure they are properly configured to prevent public access.",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1533",
    "description": "Checks if your Google Cloud Storage (GCS) buckets do not allow public write access. The rule checks the Bucket IAM policies, Uniform bucket-level access settings, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1534",
    "description": "Checks if direct internet access is disabled for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1535",
    "description": "Checks if Google Cloud Platform (GCP) Deployment Manager configurations owned by the account are public. The rule is NON_COMPLIANT if Deployment Manager configurations with the owner 'Self' are public.",
    "function_name": "deployment_manager_configurations_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1536",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpointConfigurationType. The rule returns NON_COMPLIANT if the REST API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1537",
    "description": "Checks if a Cloud Endpoints API service uses an SSL certificate. The rule is NON_COMPLIANT if the API service does not have an associated SSL certificate.",
    "function_name": "endpoints_api_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().get(name='projects/proj/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1538",
    "description": "Checks if Google Cloud App Engine services are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud App Engine service if it is not associated with a security policy.",
    "function_name": "app_engine_service_associated_with_armor_policy",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1539",
    "description": "Checks if Google Cloud CDN distributions are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN distribution is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1540",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1541",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1542",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) migration jobs are public. The rule is NON_COMPLIANT if the PubliclyAccessible field is set to true.",
    "function_name": "dms_migration_jobs_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1543",
    "description": "Checks if Google Cloud Firestore backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore backups are public.",
    "function_name": "firestore_backups_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1544",
    "description": "Checks if the Google Cloud VPN's authorization policies allow connection access for all users. The rule is NON_COMPLIANT if 'AllowAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_allow_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1545",
    "description": "Checks if the status of the Google Cloud Resource Manager Policy compliance is COMPLIANT or NON_COMPLIANT after the policy execution on the resource. The rule is compliant if the field status is COMPLIANT. For more information about organizations and policies, see Understanding Organization Policies.",
    "function_name": "iam_policy_compliance_status",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1546",
    "description": "Checks if Google Cloud Platform (GCP) Cloud VPN requires 'auto-accept' for shared attachments to be enabled. The rule is NON_COMPLIANT for a Cloud VPN if 'auto-accept' is set to 'true'.",
    "function_name": "network_vpn_auto_accept_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn_tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1547",
    "description": "Verifies if the Google Kubernetes Engine (GKE) cluster endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1548",
    "description": "Checks if Google Cloud Search (a service similar to Amazon OpenSearch) instances are in Google Virtual Private Cloud (Google VPC). The rule is NON_COMPLIANT if a Google Cloud Search instance is publicly accessible.",
    "function_name": "network_cloud_search_vpc_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1549",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Cloud Managed Certificates or Google Cloud IAM Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service configured without a certificate or is configured with a certificate different from Google Cloud Managed Certificates or IAM certificates.",
    "function_name": "network_load_balancer_backend_ssl_certificate_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1550",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Managed SSL Certificates. To use this rule, use an SSL or HTTPS frontend configuration with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers. This rule does not check other types of load balancers.",
    "function_name": "network_load_balancer_ssl_google_managed_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1551",
    "description": "Checks if a Google Cloud account has public access settings enabled for its Compute Engine instances. The rule is NON_COMPLIANT if 'blockPublicIp' is false, or if true, any firewall rules allow ingress traffic on ports other than Port 22.",
    "function_name": "compute_instance_public_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1552",
    "description": "In GCP, the equivalent for disabling incoming SSH traffic can be achieved by configuring firewall rules to disallow ingress on port 22, effectively restricting SSH access.",
    "function_name": "network_firewall_disallow_ingress_ssh",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1553",
    "description": "Checks if the Cloud Router is associated with an authorized Virtual Private Cloud (VPC) in Google Cloud Platform (GCP). The rule is NON_COMPLIANT if the Cloud Router is associated with an unauthorized VPC.",
    "function_name": "network_cloud_router_associated_authorized_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1554",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1555",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1556",
    "description": "Checks if Google Cloud firewall rules allow unrestricted ingress traffic for SSH (port 22) and RDP (port 3389). The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from any source IP range (0.0.0.0/0) for those ports.",
    "function_name": "network_firewall_restrict_ingress_ssh_rdp",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1557",
    "description": "Checks if a Google Cloud Platform (GCP) firewall policy is configured with a user-defined 'default action' for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_firewall_policy_fragmented_packets_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1558",
    "description": "Check GCP Firewall Rule is associated with ingress or egress rules. This rule is NON_COMPLIANT if no ingress or egress rules are associated with the Firewall Rule, else COMPLIANT if any one of the rule types exists.",
    "function_name": "network_firewallrule_associated_with_ingress_or_egress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1559",
    "description": "Checks if a Google Cloud Platform (GCP) Firewall Rule contains rules. The rule is NON_COMPLIANT if there are no rules in a GCP Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1560",
    "description": "Checks if there are public routes in the route table to a Cloud Router or Cloud NAT. The rule is NON_COMPLIANT if a route to a Cloud Router or Cloud NAT has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_cidr_to_cloud_router_nat",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1561",
    "description": "Checks if Google Cloud Elasticsearch (GCE) clusters are within a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch cluster endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1562",
    "description": "Checks if there are any Google Cloud SQL database instances that are not using the default Cloud SQL service account. The rule is NON_COMPLIANT if there are any Cloud SQL instances that are not using the default service account.",
    "function_name": "sql_instances_use_default_service_account",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1563",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipAddresses' field contains a public IP address.",
    "function_name": "sql_instances_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1564",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset's access control configuration allows public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1565",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1566",
    "description": "Checks if the required public access options are configured at the project level in Google Cloud Platform (GCP). The rule is only NON_COMPLIANT when the public access settings do not match the configured settings.",
    "function_name": "iam_project_public_access_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1567",
    "description": "Checks if the required public access prevention settings are configured at the project level in Google Cloud Platform. The rule is NON_COMPLIANT if the configuration does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1568",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket does not meet the exclusion criteria and has bucket-level permissions that allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1569",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule verifies the Uniform Bucket-Level Access settings, the bucket IAM policies, and the bucket permissions.",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1570",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access by evaluating the Bucket IAM policies and public access prevention settings.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.public_access_prevention"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1571",
    "description": "Checks if a Google AI Platform Notebooks instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebooks_instance_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1572",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1573",
    "description": "Checks if Private Service Access for the service specified in the rule parameter is configured for each Google Cloud VPC. The rule is NON_COMPLIANT if a Google Cloud VPC doesn't have a Private Service Access configured for the service.",
    "function_name": "network_vpc_private_service_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1574",
    "description": "Checks if there are unused firewall rules in Google Cloud. The rule is COMPLIANT if each firewall rule is associated with a network. The rule is NON_COMPLIANT if a firewall rule is not associated with a network.",
    "function_name": "network_firewall_rule_associated_with_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1575",
    "description": "Checks if Google Cloud Firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1576",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1577",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Google Cloud Armor security policy.",
    "function_name": "network_security_policy_has_rules",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1578",
    "description": "Verifies if a Google Cloud Armor Security Policy contains any firewall rules or rule groups. The policy is considered NON_COMPLIANT if it does not include any security rules or rule groups.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1579",
    "description": "Checks if Cloud Armor security policy rule groups contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy rule group.",
    "function_name": "network_cloud_armor_policy_rule_group_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1580",
    "description": "Checks whether the Google Cloud Armor security policy contains rules with conditions. The rule is COMPLIANT if the security policy contains at least one rule with conditions and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_contains_conditions",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1581",
    "description": "Checks if a GCP Cloud Armor Security Policy contains any rules. The rule is NON_COMPLIANT if there are no security rules present within a Cloud Armor Security Policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1582",
    "description": "Checks if Google Cloud Endpoints services have access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in the service configuration.",
    "function_name": "endpoints_service_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1583",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1584",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1'); service.projects().services().get(name='projects/my-project/services/my-service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1585",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled or the 'logLevel' is neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1586",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if the Load Balancer's Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1587",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1588",
    "description": "Checks if at least one Google Cloud Audit logging configuration is logging read and write events for all Google Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs configured to record Cloud Storage data events.",
    "function_name": "logging_audit_config_storage_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1589",
    "description": "Checks that there is at least one Google Cloud Audit Logging enabled for a project with security best practices. This rule is COMPLIANT if there is at least one audit log configuration that meets all of the following criteria.",
    "function_name": "logging_audit_log_configuration_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1590",
    "description": "Checks if Google Cloud Logging Log Buckets are encrypted with any Google Cloud KMS key or a specified Google Cloud KMS key Id. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "function_name": "logging_log_buckets_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1591",
    "description": "In GCP, the equivalent for enabling CloudTrail is enabling Cloud Audit Logs, which tracks API activity for projects and services.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1592",
    "description": "Checks if Google Cloud Logging is configured to use Cloud Key Management Service (Cloud KMS) encryption. The rule is COMPLIANT if the KmsKeyId is defined.",
    "function_name": "logging_configuration_kms_encryption_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1593",
    "description": "Checks if Google Cloud Audit Logs have integrity validation enabled. Google Cloud recommends that integrity validation should be enabled for all audit logs to ensure their authenticity. The rule is NON_COMPLIANT if the validation is not enabled.",
    "function_name": "logging_audit_logs_integrity_validation_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().get(name='projects/proj/logs/audit')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1594",
    "description": "Checks if a Google Cloud Build configuration has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present logging configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_configuration_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1595",
    "description": "Checks if logging is enabled with a valid severity level for GCP Data Migration Service replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "logging_datamigration_replicationtask_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'], filter='severity>=ERROR')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1596",
    "description": "Checks if a Google Cloud Firestore (NoSQL document database) instance has Cloud Logging export enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Cloud Logging export enabled for audit logs.",
    "function_name": "firestore_instance_logging_export_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(parent='projects/proj', sink='sink_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1597",
    "description": "Checks if Google Cloud VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logging.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1598",
    "description": "Checks if logging is configured on active Google Cloud Run services. This rule is NON_COMPLIANT if an active service does not have logging enabled or the logging configuration is not set for at least one revision.",
    "function_name": "cloud_run_service_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/svc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1599",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1600",
    "description": "Checks if Google Cloud App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1601",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the 'logging' property is false or the 'logBucket' is not equal to the provided bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1602",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have Cloud Logging enabled. The rule is NON_COMPLIANT if a subscription does not have logging enabled.",
    "function_name": "pubsub_subscription_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().subscriptions().get(subscription='subscription_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1603",
    "description": "Checks if a Google Cloud Pub/Sub subscription has logging enabled. The rule is NON_COMPLIANT if the subscription does not have logging enabled.",
    "function_name": "pubsub_subscription_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().subscriptions().get(subscription='subscription_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1604",
    "description": "In GCP, the equivalent of enabling multi-region logging is to ensure that Cloud Logging is set up to collect logs from multiple regions. This ensures that logs are stored and accessible across different geographical locations.",
    "function_name": "logging_cloud_logging_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1605",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver Logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver Logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance_admin().get_instance(name='instance_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1606",
    "description": "Checks if Google Cloud Platform (GCP) firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1607",
    "description": "Checks if Google Cloud SQL instances for MySQL are configured to log audit logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1608",
    "description": "Checks if the respective logs of Cloud SQL for PostgreSQL or MySQL are enabled. The rule is NON_COMPLIANT if any log types (like general logs, slow query logs, or audit logs) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1609",
    "description": "Checks if Google BigQuery datasets have audit logging enabled to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specific_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1610",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1611",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1612",
    "description": "Checks if Google Cloud Storage (GCS) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1613",
    "description": "Checks if logging is enabled for your Cloud Storage buckets in GCP. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1614",
    "description": "Checks if Google Cloud Workflow has logging enabled. The rule is NON_COMPLIANT if a Cloud Workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1615",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1616",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the specified value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1617",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1618",
    "description": "Checks if you have provided security contact information for your Google Cloud Platform project. The rule is NON_COMPLIANT if security contact information within the project is not provided.",
    "function_name": "iam_project_security_contact_provided",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1619",
    "description": "Checks if automated sensitive data discovery is enabled for Google Cloud Data Loss Prevention (DLP). The rule is NON_COMPLIANT if automated sensitive data discovery is disabled. The rule is APPLICABLE for administrator accounts and NOT_APPLICABLE for member accounts.",
    "function_name": "dlp_project_sensitive_data_discovery_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "dlp_client.get_project_settings(name='projects/project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1620",
    "description": "Checks if Google Cloud Data Loss Prevention (DLP) is enabled in your project. The rule is NON_COMPLIANT if the 'status' attribute is not set to 'ENABLED'.",
    "function_name": "security_dlp_status_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "dlp_client.get_dlp_job(name='projects/proj/dlpJobs/job_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1621",
    "description": "Checks if automated sensitive data discovery is enabled for Google Cloud Data Loss Prevention (DLP). The rule is NON_COMPLIANT if automated sensitive data discovery is disabled. The rule is APPLICABLE for administrator accounts and NOT_APPLICABLE for member accounts.",
    "function_name": "dlp_project_sensitive_data_discovery_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "dlp_client.get_project_settings(name='projects/project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1622",
    "description": "Checks if Google Cloud Data Loss Prevention (DLP) is enabled in your project. The rule is NON_COMPLIANT if the DLP API is not enabled.",
    "function_name": "dlp_api_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/dlp.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1623",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1624",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deployment_manager_configurations_pubsub_notifications_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1625",
    "description": "Checks if Google Cloud Monitoring alert policies have notification channels configured for the 'ALERTING', 'PENDING', or 'DISABLED' states. Optionally checks if any channels match a specified notification channel ID. The rule is NON_COMPLIANT if there is no notification channel specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1626",
    "description": "Checks if a resource type has a Cloud Monitoring alert policy for the specified metric. For resource types, you can specify Persistent Disks, Compute Engine instances, Cloud SQL instances, or Cloud Storage buckets. The rule is COMPLIANT if the specified metric has a resource ID and a Cloud Monitoring alert policy.",
    "function_name": "monitoring_resource_alert_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1627",
    "description": "Checks whether Google Cloud Monitoring alerts with the given metric name have the specified settings.",
    "function_name": "monitoring_alerts_metric_settings",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1628",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Google Cloud Logging. The audit logging is NON_COMPLIANT if the log sink is not properly set up or is not sending the audit logs to Google Cloud Logging.",
    "function_name": "logging_audit_logs_configured_to_cloud_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1629",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if Stackdriver Monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1630",
    "description": "Checks if Google Cloud Storage (GCS) Notifications are enabled on a GCS bucket. The rule is NON_COMPLIANT if GCS Notifications are not set on a bucket, or if the event type or destination do not match specified event types and destination parameters.",
    "function_name": "storage_bucket_notifications_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1631",
    "description": "Checks if Google Cloud Security Command Center is enabled for a Google Cloud project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "securitycenter_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1632",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_logging_delivery_status_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1633",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'enableMonitoring' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1634",
    "description": "Checks if a Cloud Storage bucket has an attached IAM policy which prevents deletion of objects. The rule is NON_COMPLIANT if the Cloud Storage bucket does not have IAM policies or has policies without a suitable 'Deny' statement (statement with storage.objects.delete permission).",
    "function_name": "storage_bucket_iam_policy_prevent_object_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1635",
    "description": "Checks if Google Cloud Database Migration Service (Cloud DMS) connection profiles are public. The rule is NON_COMPLIANT if the 'public' property is set to true.",
    "function_name": "dms_connection_profiles_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1636",
    "description": "Checks if Google Cloud Firestore database snapshots are public. The rule is NON_COMPLIANT if any Firestore database snapshots are public.",
    "function_name": "firestore_snapshot_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('snapshots').document('snapshot_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1637",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots have permissions that allow public access, indicating that Google Cloud Persistent Disk snapshots are public.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1638",
    "description": "Checks if Google Kubernetes Engine (GKE) Containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the securityContext.privileged parameter in the container specification is set to 'false' or the readOnlyRootFilesystem parameter is not set to 'true'.",
    "function_name": "container_gke_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1639",
    "description": "Checks if Google Cloud Filestore instances are configured to enforce a root directory. The rule is NON_COMPLIANT if the root path is accessible without restrictions.",
    "function_name": "filestore_instance_enforce_root_directory",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1640",
    "description": "Checks if Google Cloud Filestore access control is configured to enforce a user identity. The rule is NON_COMPLIANT if 'identity' is not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "function_name": "filestore_access_control_enforce_user_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1641",
    "description": "Checks if a Google Cloud account has block public access settings enabled. The rule is NON_COMPLIANT if 'BlockPublicAccess' is false, or if true, firewall rules allowing traffic on ports other than Port 22 are listed in 'AllowedFirewallRules'.",
    "function_name": "network_firewall_block_public_access_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1642",
    "description": "Checks if IAM groups in Google Cloud have at least one IAM user assigned.",
    "function_name": "iam_group_has_user_assigned",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1643",
    "description": "Checks if your Google Cloud IAM users have passwords or active access keys that have not been used within the specified number of days you provided. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_user_inactive_access_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1644",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1645",
    "description": "Checks if a Google Cloud SQL instance snapshot is public. The rule is NON_COMPLIANT if any existing and new Cloud SQL instance snapshots are public.",
    "function_name": "sql_instance_snapshot_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1646",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'publicIp' field is enabled in the instance configuration.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1647",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1648",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset's defaultAccessEntry has a role of 'READER' granted to 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1649",
    "description": "Checks if Google Cloud Storage bucket IAM policies have public access prevention settings enabled. The rule is NON_COMPLIANT if public access prevention settings are not enabled for Google Cloud Storage buckets.",
    "function_name": "storage_bucket_public_access_prevention_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.public_access_prevention"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1650",
    "description": "Verifies that the required public access prevention settings are configured at the project level. The status is considered NON_COMPLIANT when the specified settings do not match the corresponding fields in the project configuration.",
    "function_name": "iam_project_public_access_prevention_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1651",
    "description": "Checks if the required public access prevention settings are configured at the project level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1652",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket's permissions settings allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1653",
    "description": "Checks if Object Versioning is enabled and if it requires additional authentication for critical actions in Google Cloud Storage buckets. The rule is NON_COMPLIANT if additional authentication is not required.",
    "function_name": "storage_bucket_versioning_authentication_required",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1654",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, the bucket policy, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1655",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, the bucket IAM policies, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1656",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1657",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1658",
    "description": "Checks if Google Cloud Compute Engine instance templates owned by the account are public. The rule is NON_COMPLIANT if instance templates with the owner 'Self' are set to allow public access.",
    "function_name": "compute_instance_templates_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instanceTemplates().get(project='proj', instanceTemplate='template')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1659",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(project='proj', service='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1660",
    "description": "Checks if your Google Cloud deployments (using Deployment Manager) send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager deployments do not send notifications.",
    "function_name": "deploymentmanager_deployments_pubsub_notifications",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1661",
    "description": "Checks if Cloud Monitoring alerts have notification channels configured for ALERTING, PENDING, or NO_DATA states. Optionally checks if any notification channels match a specific resource name (ARN). The rule is NON_COMPLIANT if there is no action specified for the alert or optional parameter.",
    "function_name": "monitoring_alerts_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1662",
    "description": "Checks if a Google Cloud resource type has a Google Cloud Monitoring alert policy for the specified metric. For resource types, you can specify Compute Engine instances, Cloud Storage buckets, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the specified metric has a resource ID and an alert policy.",
    "function_name": "monitoring_resource_alert_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1663",
    "description": "Checks whether Google Cloud Monitoring alerts with the given metric name have the specified settings.",
    "function_name": "monitoring_alerts_metric_settings_compliance",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1664",
    "description": "Checks if Google Cloud Audit Logging is configured to send logs to Cloud Logging. The audit log configuration is NON_COMPLIANT if the log sink is not properly set to export logs.",
    "function_name": "logging_audit_logs_configured_to_cloud_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1665",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if Stackdriver Monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1666",
    "description": "Checks if Google Cloud Storage (GCS) notifications are enabled on a GCS bucket. The rule is NON_COMPLIANT if GCS notifications are not set on a bucket, or if the event type or destination do not match the specified event types and destination parameters.",
    "function_name": "storage_bucket_notifications_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1667",
    "description": "Checks if Google Cloud Security Command Center is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1668",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1669",
    "description": "Checks if Google Cloud Monitoring (formerly Stackdriver) security metrics collection on Google Cloud Armor rule sets is enabled. The rule is NON_COMPLIANT if the 'enableMonitoring' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1670",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP(S) Load Balancers. The rule is NON_COMPLIANT if one or more HTTP(S) Load Balancers do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP(S) Load Balancers have forwarding to an HTTP backend instead of redirection.",
    "function_name": "network_https_load_balancer_https_redirect_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1671",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between CDN edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN configuration if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_origin_ssl_protocols_non_deprecated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.cdn().get(project='proj', cdn='cdn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1672",
    "description": "Checks if Google Cloud CDN configurations are using a minimum security policy and cipher suite of TLSv1.2 or greater for viewer connections. This rule is NON_COMPLIANT for a Cloud CDN configuration if the minimumTlsVersion is below TLSv1.2.",
    "function_name": "network_cdn_tls_minimum_version_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1673",
    "description": "Checks if Google Cloud CDN is using a custom SSL certificate and is configured to use SNI for serving HTTPS requests. The rule is NON_COMPLIANT if a custom SSL certificate is associated but the SSL support method uses a dedicated IP address.",
    "function_name": "network_cdn_ssl_sni_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.sslCertificates().get(project='proj', sslCertificate='cert')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1674",
    "description": "Checks if Google Cloud CDN configurations are encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'originProtocol' is 'HTTP_ONLY' or if 'originProtocol' is 'MATCH_VIEWER' and 'viewerProtocol' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_traffic_encryption_to_custom_origins",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.cdn().get(project='proj', cdn='cdn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1675",
    "description": "Checks if your Google Cloud CDN configurations enforce HTTPS. The rule is NON_COMPLIANT if the value of `enableOnRedirect` is set to 'true' for the backend service, which indicates that HTTPS is allowed without any restrictions.",
    "function_name": "network_cdn_https_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1676",
    "description": "Check if Google Cloud's Managed Service for Elasticsearch nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the cluster.",
    "function_name": "dataproc_cluster_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1677",
    "description": "Checks whether your Google Cloud HTTP(S) Load Balancer SSL proxy is using a custom SSL policy. The rule is only applicable if there are SSL proxies for the Google Cloud HTTP(S) Load Balancer.",
    "function_name": "network_load_balancer_ssl_proxy_custom_ssl_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1678",
    "description": "Checks if your Google Cloud Platform HTTPS Load Balancer SSL proxy uses a predefined policy. The rule is NON_COMPLIANT if the HTTPS SSL proxy listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_https_ssl_proxy_predefined_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1679",
    "description": "Checks if your Google Cloud HTTP(S) Load Balancer is configured with SSL or HTTPS. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1680",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1681",
    "description": "Checks whether connections to Google Cloud Elasticsearch (GCP equivalent of OpenSearch) are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch domain 'EnforceHttps' is not 'true' or is 'true' and 'TlsSecurityPolicy' is not in 'tlsPolicies'.",
    "function_name": "network_elasticsearch_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1682",
    "description": "Check if Google Cloud's Elasticsearch Service (part of Google Cloud operations suite) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the cluster.",
    "function_name": "monitoring_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/my-project', filter='metric.type=\"monitoring.googleapis.com/elasticsearch/node_to_node_encryption\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1683",
    "description": "Checks if Google BigQuery datasets require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any BigQuery dataset has the parameter require_ssl not set to true.",
    "function_name": "bigquery_dataset_require_ssl",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1684",
    "description": "Checks if Cloud Storage buckets have IAM policies that require requests to use HTTPS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_iam_https_required",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1685",
    "description": "Checks if a Cloud Storage bucket created with Google Cloud Storage uses the 'gs' protocol for endpoint connection. The rule is NON_COMPLIANT if the bucket protocol for endpoint connection supports 'gs'.",
    "function_name": "storage_bucket_endpoint_protocol_gs",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1686",
    "description": "Checks if Google Cloud firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_rules_restrict_unrestricted_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1687",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter backendServiceType. The rule returns NON_COMPLIANT if the API does not match the backend type configured in the rule parameter.",
    "function_name": "network_endpoints_api_backend_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1688",
    "description": "Checks if a Google Cloud Endpoints service uses an SSL certificate. The rule is NON_COMPLIANT if the Google Cloud Endpoints service does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.sslCertificates().get(project='proj', sslCertificate='cert')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1689",
    "description": "Checks if Google Cloud APIs (specifically Google Cloud Endpoints or API Gateway) are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud API if it is not associated with a security policy.",
    "function_name": "network_api_gateway_associated_with_security_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1690",
    "description": "Checks if Google Cloud CDN distributions are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN distribution is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1691",
    "description": "Checks if the certificate associated with a Google Cloud CDN service is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN service uses the default SSL certificate.",
    "function_name": "network_cdn_custom_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1692",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1693",
    "description": "Checks if Google Cloud Database Migration Service (Google Cloud DMS) replication instances are public. The rule is NON_COMPLIANT if the 'public' field is set to true.",
    "function_name": "dms_replication_instance_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1694",
    "description": "Checks if Google Cloud Firestore backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore backups are public.",
    "function_name": "firestore_backup_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1695",
    "description": "Checks if the Google Cloud VPN authorization rules authorize connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1696",
    "description": "Checks if the status of Google Cloud's Config Connector compliance is COMPLIANT or NON_COMPLIANT after the resource configuration execution on the instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_config_connector_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1697",
    "description": "Checks if Google Cloud Platform (GCP) VPC Network Peering has 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a VPC Network Peering if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_vpc_peering_autoacceptsharedattachments_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1698",
    "description": "Checks if the Google Kubernetes Engine (GKE) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_gke_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1699",
    "description": "Checks if Google Cloud Elasticsearch (part of Google Cloud's operations tools) clusters are configured within a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch cluster endpoint is accessible publicly.",
    "function_name": "network_elasticsearch_vpc_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1700",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services configured with SSL certificates from Google-managed SSL certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service configured without a Google-managed SSL certificate or is configured with a certificate different from a Google-managed SSL certificate.",
    "function_name": "network_load_balancer_backend_ssl_google_managed",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1701",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure that your Load Balancer is configured with an SSL or HTTPS proxy. This rule is applicable to External HTTPS Load Balancers only. This rule does not check Internal Load Balancers.",
    "function_name": "network_external_https_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1702",
    "description": "Checks if a Google Cloud Platform account has public access settings enabled for a Google Dataproc cluster. The rule is NON_COMPLIANT if PublicAccessPrevention is false, or if true, firewall rules allowing access on ports other than Port 22 are configured.",
    "function_name": "dataproc_cluster_public_access_prevention_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1703",
    "description": "Google Cloud Platform (GCP) does not have a direct equivalent of this rule, but a similar approach can be achieved by configuring firewall rules to restrict incoming SSH (port 22) access, thus effectively disabling incoming SSH connections similarly to the INCOMING_SSH_DISABLED rule in other systems. The service involved is Google Cloud Firewall.",
    "function_name": "network_firewall_ssh_incoming_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1704",
    "description": "Checks if Cloud NAT gateways are attached to an authorized Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if Cloud NAT gateways are attached to an unauthorized VPC.",
    "function_name": "network_nat_gateway_authorized_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1705",
    "description": "Checks if the Cloud Function IAM policy attached to the Cloud Function resource prohibits public access. If the IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions.projects.locations.functions.getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1706",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1707",
    "description": "Checks if firewall rules for SSH (port 22) and RDP (port 3389) ingress traffic in Google Cloud Platform are unrestricted. The rule is NON_COMPLIANT if a firewall rule allows any source IP for these ports.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1708",
    "description": "Checks if a GCP Firewall Rule is configured with a user-defined action for fragmented packets. The rule is NON_COMPLIANT if the specified action for fragmented packets does not match the user-defined action.",
    "function_name": "network_firewall_rule_fragmented_packets_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1709",
    "description": "Check if GCP's VPC Service Controls security policies are associated with stateful or stateless rules. This rule is NON_COMPLIANT if no stateful or stateless rules are associated with the VPC Service Controls policy; else COMPLIANT if any one of the rule types exists.",
    "function_name": "network_vpc_service_controls_stateful_stateless_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.vpcServiceControls().get(project='proj', service='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1710",
    "description": "Checks if a Google Cloud Platform (GCP) Firewall Rule contains rules. The rule is NON_COMPLIANT if there are no rules in a Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1711",
    "description": "Checks if there are public routes in the Google Cloud Platform (GCP) VPC subnet route table that point to a Cloud Router or NAT Gateway. The rule is NON_COMPLIANT if a route to an Internet Gateway (IGW) has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_vpc_subnet_no_public_routes",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj', filter='network eq my-network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1712",
    "description": "Checks if Google Cloud Search instances are in a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Cloud Search instance endpoint is public.",
    "function_name": "network_cloud_search_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1713",
    "description": "Checks if there are any Google Cloud SQL instance firewall rules that are not the default firewall rules. The rule is NON_COMPLIANT if there are any firewall rules that are not the default firewall rules.",
    "function_name": "sql_instance_firewall_default_only",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1714",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'IPConfiguration.requireSSL' field is false and 'IPConfiguration.ipv4Enabled' is true in the instance configuration.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1715",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset access configuration allows public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1716",
    "description": "Checks if Google Cloud Storage access points have block public access settings enabled. The rule is NON_COMPLIANT if block public access settings are not enabled for Cloud Storage access points.",
    "function_name": "storage_access_points_block_public_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1717",
    "description": "Checks if the required public access prevention settings are configured at the project level. The rule is only NON_COMPLIANT when the fields set below do not match the corresponding fields in the project settings.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1718",
    "description": "Checks if the required public access prevention settings are configured at the project level in Google Cloud Platform. The rule is NON_COMPLIANT if the configuration does not match the specified settings or defaults.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1719",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket-level settings allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1720",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule examines the bucket IAM policies, uniform bucket-level access settings, and object-level permissions.",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1721",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access by evaluating the Bucket IAM policies, Uniform bucket-level access, and the bucket ACL settings.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1722",
    "description": "Checks if a Google Cloud AI Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_notebook_instance_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1723",
    "description": "Checks if direct internet access is disabled for a Google AI Platform (formerly AI Platform Notebooks) instance. The rule is NON_COMPLIANT if an AI Platform notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebooks_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1724",
    "description": "Checks if a Private Google Access Point is created for each Google Virtual Private Cloud (Google VPC). The rule is NON_COMPLIANT if a Google VPC doesn't have a Private Google Access Point created for the service.",
    "function_name": "network_vpc_private_google_access_point_exists",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1725",
    "description": "Checks if there are unused VPC Firewalls (equivalent to network ACLs). The rule is COMPLIANT if each VPC Firewall rule is associated with a subnet. The rule is NON_COMPLIANT if a VPC Firewall rule is not associated with a subnet.",
    "function_name": "network_firewall_associated_with_subnet",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1726",
    "description": "Checks if Private Google Access is enabled for the VPC in GCP. The rule is NON_COMPLIANT if Private Google Access is not enabled for the VPC, as it is necessary for Google services to communicate with private IPs.",
    "function_name": "network_vpc_private_google_access_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1727",
    "description": "Checks if Google Cloud firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1728",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1729",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1730",
    "description": "Checks whether a Google Cloud Armor Security Policy contains any rules. This rule is NON_COMPLIANT if a Security Policy does not contain any rules.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1731",
    "description": "Checks if Google Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1732",
    "description": "Checks whether Google Cloud Armor security policy contains rules with conditions. This rule is COMPLIANT if at least one rule within the security policy contains conditions and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_contains_conditions",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1733",
    "description": "Checks if a Google Cloud Armor Security Policy contains any security rules. The rule is NON_COMPLIANT if there are no security rules present within a Security Policy.",
    "function_name": "compute_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1734",
    "description": "Checks if a Google Cloud API Gateway API configuration is using Google Cloud Armor for security. The rule is NON_COMPLIANT if Google Cloud Armor is not used or if the utilized security policies do not match the specified rule parameters.",
    "function_name": "apigateway_api_config_uses_cloud_armor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().apis().configs().get(name='projects/proj/locations/global/apis/api/configs/config')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1735",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1736",
    "description": "Checks if an API Gateway configuration has an SSL certificate associated with it. The rule is NON_COMPLIANT if the API Gateway does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1737",
    "description": "Checks if Google Cloud Endpoints APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Endpoints API if it is not associated with a security policy.",
    "function_name": "network_endpoints_associated_with_armor_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1738",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with either Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Google Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1739",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN service is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN service uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1740",
    "description": "Checks if the Google Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1741",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) connection profiles are public. The rule is NON_COMPLIANT if the 'public' field is set to true.",
    "function_name": "dms_connection_profiles_non_public",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1742",
    "description": "Checks if Google Cloud Firestore (Firestore) exports are public. The rule is NON_COMPLIANT if any Firestore exports are public.",
    "function_name": "firestore_exports_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().documents().list(parent='projects/proj/databases/(default)/documents')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1743",
    "description": "Checks if the Google Cloud VPN authorization policy allows connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_policy_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1744",
    "description": "Checks if the status of the Google Cloud Configuration Management compliance is COMPLIANT or NON_COMPLIANT after the configuration execution on the VM instance. The rule is compliant if the field status is COMPLIANT. For more information about configurations, see What is a configuration?",
    "function_name": "compute_instance_configuration_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1745",
    "description": "Checks if Google Cloud Platform (GCP) VPC Network Peering has 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a VPC Network Peering if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_vpc_peering_autoacceptsharedattachments_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1746",
    "description": "Checks if the Google Kubernetes Engine (GKE) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1747",
    "description": "Checks if Google Cloud Memorystore for Redis instances are configured with a custom VPC network. The rule is NON_COMPLIANT for a Memorystore instance if it is using the default VPC network.",
    "function_name": "network_memorystore_custom_vpc_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.instances().get(project='proj', instance='memorystore_instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1748",
    "description": "Checks if Google Cloud Elasticsearch Service (part of Google Cloud's managed services) instances are within a Virtual Private Cloud (VPC) network. The rule is NON_COMPLIANT if an Elasticsearch Service instance endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1749",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured to use certificates from Google Cloud Managed Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 listener that is configured without a Google-managed certificate or is configured with a certificate different from Google-managed certificates.",
    "function_name": "network_load_balancer_google_managed_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1750",
    "description": "Checks if the Classic Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, a frontend configuration with SSL should be set on your Classic Load Balancer. This rule is only applicable to Classic Load Balancers in GCP and does not apply to HTTP(S) Load Balancers.",
    "function_name": "network_classic_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1751",
    "description": "Checks if a Google Cloud account with Dataproc has block public access settings enabled. The rule is NON_COMPLIANT if BlockPublicHttps is false, or if true, there are firewall rules that allow traffic on ports other than Port 22 from the internet.",
    "function_name": "dataproc_cluster_block_public_access_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1752",
    "description": "The rule identifier 'INCOMING_SSH_DISABLED' indicates that incoming SSH connections are disabled, whereas the rule name 'restricted-ssh' implies a policy to restrict SSH access. In GCP, this can be achieved by using a firewall rule that denies incoming traffic on port 22 (the default SSH port).",
    "function_name": "network_firewall_incoming_ssh_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1753",
    "description": "In Google Cloud Platform, the equivalent of EC2 instances in a VPC is Compute Engine instances within a Virtual Private Cloud (VPC). The rule identifier for VPC configuration in GCP can vary, but the service utilized is primarily Google Compute Engine.",
    "function_name": "network_vpc_configuration_pci_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1754",
    "description": "Checks if Cloud NAT is configured for an authorized Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if Cloud NAT is configured for an unauthorized VPC.",
    "function_name": "network_vpc_cloud_nat_authorized",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1755",
    "description": "Checks if the Google Cloud Function IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_policy_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_v1.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1756",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1757",
    "description": "Checks if firewall rules for SSH (port 22) and RDP (port 3389) ingress traffic in Google Cloud Platform (GCP) allow unrestricted access. The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from any source IP (0.0.0.0/0) for ports 22 or 3389.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1758",
    "description": "Checks if a Google Cloud VPC firewall rule is configured with a user-defined action for fragmented packets. The rule is NON_COMPLIANT if the action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_firewall_rule_fragmented_packets_action_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1759",
    "description": "Check Google Cloud Armor security policy is associated with backend services, as this rule is NON_COMPLIANT if no backend services are associated with the Google Cloud Armor policy, otherwise COMPLIANT if any backend service exists.",
    "function_name": "network_backend_services_associated_with_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1760",
    "description": "In GCP, checks if a Google Cloud Armor Security Policy contains any rules. The policy is CONFORMANT if there are rules defined within the Google Cloud Armor Security Policy.",
    "function_name": "network_security_policy_rules_defined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1761",
    "description": "Checks if there are public routes in the route table to a Cloud Router or Forwarding Rule. The rule is NON_COMPLIANT if a route to an Internet Gateway has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_route_no_public_internet_gateway",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1762",
    "description": "Checks if Google Cloud Search domains are in a Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Cloud Search domain endpoint is public.",
    "function_name": "network_cloud_search_domain_private",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1763",
    "description": "Checks if there are any Google Cloud SQL database instances that are using non-default network tags. The rule is NON_COMPLIANT if there are any Cloud SQL instances with network tags that are not the default ones.",
    "function_name": "sql_instances_default_network_tags",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1764",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration.requireSsl' field is false and the 'ipConfiguration.enabled' field is true in the instance configuration.",
    "function_name": "sql_instance_non_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1765",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the 'access' field in the dataset configuration item includes any entities with 'role' set to 'READER' or 'WRITER' for 'allAuthenticatedUsers' or 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1766",
    "description": "Checks if Google BigQuery has VPC Service Controls enabled. The rule is NON_COMPLIANT if VPC Service Controls are not enabled or if the configuration.vpcServiceControls field is 'false'.",
    "function_name": "bigquery_datasets_vpc_service_controls_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).vpcServiceControls"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1767",
    "description": "Checks if Google Cloud Storage (GCS) bucket access control settings have public access prevention enabled. The rule is NON_COMPLIANT if public access prevention settings are not enabled for GCS buckets.",
    "function_name": "storage_bucket_public_access_prevention_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.public_access_prevention"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1768",
    "description": "Verifies if the necessary public access prevention settings are configured at the organization level in Google Cloud Platform. Compliance is marked as NON_COMPLIANT when the specified settings do not align with the organization's configuration items.",
    "function_name": "iam_organization_public_access_prevention_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1769",
    "description": "Checks if the required identity and access management (IAM) policies are configured at the organization level. The rule is NON_COMPLIANT if the IAM policies do not match one or more settings from parameters (or default).",
    "function_name": "iam_organization_policies_configured",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1770",
    "description": "Checks if Google Cloud Storage (GCS) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and the bucket's IAM settings allow public access.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1771",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, the bucket policy, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1772",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, bucket IAM policies, and object-level access control lists (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1773",
    "description": "Checks if a Google Cloud AI Platform Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1774",
    "description": "Checks if direct internet access is disabled for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1775",
    "description": "Checks if a Private Service Connection for the service provided in the rule parameter is created for each Google Cloud Virtual Private Cloud (GCP VPC). The rule is NON_COMPLIANT if a GCP VPC doesn't have a Private Service Connection created for the service.",
    "function_name": "network_vpc_private_service_connection_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1776",
    "description": "Checks if there are unused firewall rules. The rule is COMPLIANT if each firewall rule is associated with a network. The rule is NON_COMPLIANT if a firewall rule is not associated with a network.",
    "function_name": "network_firewall_associated_with_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1777",
    "description": "Checks if DNS resolution from the accepting/requesting VPC to private IP is enabled. The result is NON_COMPLIANT if DNS resolution from the accepting/requesting VPC to private IP is not enabled. This is equivalent to checking VPC Private DNS settings in GCP.",
    "function_name": "network_vpc_private_dns_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1778",
    "description": "Checks if firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_unrestricted_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1779",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud Platform are in operational status (UP). The rule is NON_COMPLIANT if one or both tunnels are not operational (DOWN).",
    "function_name": "network_vpn_tunnels_operational_status",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1780",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1781",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1782",
    "description": "Checks whether a Google Cloud Armor Security Policy contains any rules. This rule is NON_COMPLIANT if a Security Policy does not contain any rules.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1783",
    "description": "Checks if Google Cloud Armor security policies contain any security rules. The rule is NON_COMPLIANT if there are no rules present within a Google Cloud Armor security policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1784",
    "description": "Verifies if a Google Cloud Platform WAF (Web Application Firewall) regional rule contains conditions. The rule is considered COMPLIANT if it includes at least one condition and NON_COMPLIANT if it does not.",
    "function_name": "network_waf_rule_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1785",
    "description": "Checks if a Google Cloud Armor Security Policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within a Security Policy.",
    "function_name": "compute_security_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1786",
    "description": "Checks if a Google Cloud API is using Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Google Cloud Armor security policy is not used or if the used security policy does not match what is listed in the rule parameter.",
    "function_name": "network_load_balancer_armor_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1787",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1788",
    "description": "Checks if an API Gateway in GCP uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1789",
    "description": "Checks if Google Cloud Platform (GCP) App Engine services are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a GCP App Engine service if it is not associated with a Cloud Armor security policy.",
    "function_name": "appengine_service_cloud_armor_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1790",
    "description": "Checks if Google Cloud CDN instances are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN instance is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1791",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default Google-managed SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_custom_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1792",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1793",
    "description": "Checks if Google Cloud Database Migration Service replication instances are public. The rule is NON_COMPLIANT if the PubliclyAccessible field is set to true.",
    "function_name": "datamigration_replication_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1794",
    "description": "Checks if Google Cloud Firestore manual backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore manual backups are public.",
    "function_name": "firestore_backup_non_public",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1795",
    "description": "Checks if the Google Cloud VPN authorization rules allow connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1796",
    "description": "Checks if the status of the Google Cloud Deployment Manager deployment is DEPLOYED or NOT_DEPLOYED after execution on the instance. The rule is compliant if the field status is DEPLOYED. For more information about deployments, see What is a deployment?",
    "function_name": "deploymentmanager_deployment_status_deployed",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1797",
    "description": "Checks if Google Cloud Platform (GCP) Cloud Interconnect or Cloud VPN setups have 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a Cloud Interconnect or VPN if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_interconnect_vpn_autoacceptsharedattachments_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.interconnects().get(project='proj', interconnect='interconnect_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1798",
    "description": "Checks if the Google Kubernetes Engine (GKE) endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1799",
    "description": "Checks if Google Cloud Memorystore for Redis instances are configured with a custom VPC network. The rule is NON_COMPLIANT for a Redis instance if it is using the default VPC network.",
    "function_name": "network_redis_custom_vpc_configured",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1800",
    "description": "Checks if Google Cloud's Google Cloud Search is configured within a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Google Cloud Search service endpoint is publicly accessible.",
    "function_name": "network_cloud_search_vpc_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1801",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services configured with valid SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a valid SSL certificate or is configured with a certificate that is not from Google Cloud Certificate Manager.",
    "function_name": "network_load_balancer_backend_ssl_certificate_valid",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1802",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS listener with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers and does not check other services.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1803",
    "description": "Checks if a Google Cloud project has firewall rules that block public access settings enabled. The rule is NON_COMPLIANT if allowTcp is true for any rule with a port other than 22 or if there are any ingress rules that allow access from all IP addresses (0.0.0.0/0).",
    "function_name": "network_firewall_block_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1804",
    "description": "In Google Cloud Platform (GCP), the equivalent of the rule identifier 'INCOMING_SSH_DISABLED' and rule name 'restricted-ssh' could be represented through firewall rules that deny incoming SSH traffic. This can be accomplished by setting up an ingress rule that specifically denies traffic on port 22 for SSH access, effectively restricting SSH access to instances.",
    "function_name": "network_firewall_ssh_ingress_denied",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1805",
    "description": "This rule identifies Google Cloud Platform (GCP) virtual machine instances that are located within a Virtual Private Cloud (VPC) network. The equivalent rule identifier for this purpose is 'INSTANCES_IN_VPC', matching the functionality of the 'ec2-instances-in-vpc' rule from AWS.",
    "function_name": "compute_instance_in_vpc",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1806",
    "description": "Checks if Cloud NAT gateways are associated with an authorized Google Cloud VPC. The rule is NON_COMPLIANT if Cloud NAT gateways are associated with an unauthorized VPC.",
    "function_name": "network_nat_gateway_associated_authorized_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1807",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function prohibits public access. If the Cloud Function IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1808",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.get_vpc_access_connector(name='projects/proj/locations/region/connectors/connector')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1809",
    "description": "Checks if Google Cloud Firewall rules for SSH (port 22) and RDP (port 3389) ingress traffic are unrestricted. The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from all IP addresses (0.0.0.0/0) for these ports.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1810",
    "description": "Checks if a Google Cloud VPC firewall policy is configured with a user-defined stateless default action for fragmented packets. The rule is NON_COMPLIANT if the stateless default action for fragmented packets does not match with the user-defined default action.",
    "function_name": "network_vpc_firewall_policy_stateless_default_action_fragmented_packets",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1811",
    "description": "Check if GCP Firewall Rules are associated with stateful or stateless rules. The rule is NON_COMPLIANT if no associated stateful or stateless rules exist with the Firewall Rules, otherwise COMPLIANT if any rule exists.",
    "function_name": "network_firewall_rules_associated_with_stateful_or_stateless",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1812",
    "description": "Verifies if a Google Cloud Platform (GCP) Firewall Rule contains firewall rules. The rule is NON_COMPLIANT if there are no rules in a GCP Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1813",
    "description": "Checks if there are public routes in the route table to a Cloud VPN or Cloud Router. The rule is NON_COMPLIANT if a route has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_cidr",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1814",
    "description": "Checks if Google Cloud Search service instances are within a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Search service endpoint is public.",
    "function_name": "network_searchservice_private_endpoint",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1815",
    "description": "Checks if there are any Google Cloud SQL database users that are not the default users. The rule is NON_COMPLIANT if there are any database users that are not the default users.",
    "function_name": "sql_database_users_default_only",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_service.users().list(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1816",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'authorizedNetworks' field allows public IP addresses in the instance configuration.",
    "function_name": "sql_instances_no_public_access",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1817",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset access configuration includes any entries that allow public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1818",
    "description": "Checks if Google BigQuery dataset has 'authorizedNetworks' enabled. The rule is NON_COMPLIANT if 'authorizedNetworks' is not enabled or if the configuration.authorizedNetworks field is 'false'.",
    "function_name": "bigquery_dataset_authorized_networks_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1819",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access (similar to S3 block public access) enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1820",
    "description": "Verifies if the required public access prevention settings are configured at the project level in Google Cloud Platform. The rule is considered NON_COMPLIANT when the public access settings do not match the specified criteria.",
    "function_name": "iam_project_public_access_prevention_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1821",
    "description": "Verifies if the required public access prevention settings are configured at the project or organization level in Google Cloud Platform. The rule is NON_COMPLIANT if the configuration does not align with the specified settings or defaults.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1822",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a storage bucket is not listed in the excludedPublicBuckets parameter and the bucket-level permissions allow public access.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1823",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, the bucket policy, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1824",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform Bucket-Level Access settings, bucket policies, and access control lists (ACLs).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1825",
    "description": "Checks if a Google AI Platform Notebook instance is launched within a VPC network or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet is not included in the list of approved subnets.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1826",
    "description": "Checks if direct internet access is disabled for a Google AI Platform (formerly known as AI Platform Notebooks) instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1827",
    "description": "Checks if a Private Service Connection for the service provided in the rule parameter is created for each Google Virtual Private Cloud (GCP VPC). The rule is NON_COMPLIANT if a GCP VPC doesn't have a Private Service Connection created for the service.",
    "function_name": "network_vpc_private_service_connection_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1828",
    "description": "Checks if there are unused Firewall Rules. The rule is COMPLIANT if each Firewall Rule is associated with a VPC network. The rule is NON_COMPLIANT if a Firewall Rule is not associated with a VPC network.",
    "function_name": "network_firewall_associated_with_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1829",
    "description": "Checks if DNS resolution from accepter/requester VPC to private IP is enabled. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled in Google Cloud Platform (GCP).",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1830",
    "description": "Checks if firewall rules in GCP allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1831",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud are in ESTABLISHED state. The rule is NON_COMPLIANT if one or both tunnels are in DOWN state.",
    "function_name": "network_vpn_tunnels_established_state",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1832",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1833",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1834",
    "description": "Checks whether a Google Cloud Armor security policy contains any security rules. This rule is NON_COMPLIANT if a security policy does not contain any security rules.",
    "function_name": "network_security_policy_contains_security_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1835",
    "description": "Checks if Cloud Armor Security Policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor Security Policy.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1836",
    "description": "Checks whether Google Cloud Armor security policy rules contain conditions. This rule is COMPLIANT if the security policy rule contains at least one condition and NON_COMPLIANT otherwise.",
    "function_name": "compute_security_policy_rules_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1837",
    "description": "Verifies if a Google Cloud Armor security policy contains any security rules. The policy is considered NON_COMPLIANT if there are no security rules present within it.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1838",
    "description": "Checks if a Google Cloud API Gateway API deployment is using Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Google Cloud Armor policy is not used or if the used policy does not match what is specified in the rule parameter.",
    "function_name": "apigateway_api_deployment_uses_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1839",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpoint_configuration_type. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1840",
    "description": "Checks if Google Cloud Memorystore instances are configured with a custom subnet. The rule is NON_COMPLIANT for a Memorystore instance if it is using the default subnet.",
    "function_name": "memorystore_instance_custom_subnet_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1841",
    "description": "The rule identifier (INSTANCES_IN_VPC) for Google Cloud Platform corresponds to the equivalent resource of Google Compute Engine instances within a Virtual Private Cloud (VPC), similar to EC2 instances in Amazon Web Services VPC. In GCP, this would involve the configuration of firewall rules and network settings within a VPC for Google Compute Engine instances.",
    "function_name": "network_vpc_instances_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1842",
    "description": "Checks if Cloud NAT is configured for a Google Cloud VPC network. The rule is NON_COMPLIANT if Cloud NAT is not configured for an authorized VPC network.",
    "function_name": "network_vpc_cloud_nat_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1843",
    "description": "Checks if there are public routes in the route table to a Cloud Router or VPN Gateway (equivalent to an Internet Gateway in AWS). The rule is NON_COMPLIANT if there is a route to a Cloud Router or VPN Gateway with a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_cidr_to_cloud_router_or_vpn_gateway",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1844",
    "description": "Checks if BigQuery has 'VPC Service Controls' enabled. The rule is NON_COMPLIANT if 'VPC Service Controls' are not enabled or if the configuration.vpcServiceControls field is 'false'.",
    "function_name": "bigquery_datasets_vpc_service_controls_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id').vpcServiceControls"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1845",
    "description": "Checks if a Google AI Platform Notebooks instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebooks_instance_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1846",
    "description": "Checks if DNS resolution from requester VPC to private IP is enabled in Google Cloud Platform. The rule is NON_COMPLIANT if DNS resolution is not enabled.",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1847",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud Platform are in 'ACTIVE' status. The rule is NON_COMPLIANT if one or both tunnels are in 'DOWN' or 'DISABLED' status.",
    "function_name": "network_vpn_tunnels_active_status",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1848",
    "description": "Checks if a Google Cloud Endpoints API is using Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Google Cloud Armor security policy is not used or if the used Google Cloud Armor policy does not match what is specified in the rule parameter.",
    "function_name": "network_endpoints_enforce_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1849",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_type_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1850",
    "description": "Verifies if a Google Cloud Endpoints service has an associated SSL certificate. The rule is NON_COMPLIANT if the Google Cloud Endpoints service does not have a valid SSL certificate configured for its API.",
    "function_name": "endpoints_service_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1851",
    "description": "Checks if Google Cloud Endpoints APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Endpoints API if it is not associated with a Cloud Armor security policy.",
    "function_name": "network_endpoints_associated_with_cloud_armor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1852",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Google Cloud CDN is not associated with a Google Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1853",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1854",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1855",
    "description": "Checks if Google Cloud SQL instances are publicly accessible. The rule is NON_COMPLIANT if the 'Authorized networks' field is set to allow public IP addresses.",
    "function_name": "sql_instances_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1856",
    "description": "Checks if Google Cloud Firestore manual backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore manual backups are public.",
    "function_name": "firestore_backup_public_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().documents().get(name='projects/proj/databases/(default)/documents/backup')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1857",
    "description": "Checks if the GCP VPN authorization rules authorize connection access for all clients. The rule is NON_COMPLIANT if 'AccessAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_access_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1858",
    "description": "Checks if the status of the GCP Compute Engine instance's maintenance and compliance with the desired state (as configured with Instance Template and Managed Instance Groups) is 'HEALTHY' or 'UNHEALTHY' after the operation execution on the instance. The rule is compliant if the health status is 'HEALTHY'. For more information about instance groups, see Instance Groups and Autoscaling in GCP.",
    "function_name": "compute_instance_health_status_healthy",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1859",
    "description": "Checks if Google Cloud Platform (GCP) Cloud Interconnect connections have 'AutoAcceptSharedAttachments' enabled. The rule is NON_COMPLIANT for a Cloud Interconnect connection if 'AutoAcceptSharedAttachments' is set to 'enable'.",
    "function_name": "network_interconnect_autoacceptsharedattachments_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.interconnects().get(project='proj', interconnect='interconnect_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1860",
    "description": "Checks if the Google Kubernetes Engine (GKE) cluster endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1861",
    "description": "Checks if Google Cloud's Elasticsearch (via Google Cloud Marketplace or third-party offering) is deployed within a Virtual Private Cloud (VPC) network. The rule is NON_COMPLIANT if the Elasticsearch domain endpoint is public.",
    "function_name": "network_elasticsearch_private_endpoint",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1862",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backends configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backends_ssl_certificates_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1863",
    "description": "Checks if the External HTTPS Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure an HTTPS or SSL proxy listener is configured with your External Load Balancer. This rule is specifically applicable to External HTTPS Load Balancers and does not check Internal Load Balancers or TCP/UDP Load Balancers.",
    "function_name": "network_external_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1864",
    "description": "Checks if a Google Cloud account has block public access settings enabled for Google Dataproc. The rule is NON_COMPLIANT if BlockPublicAccess is false, or if true, firewall rules allow traffic on ports other than Port 22.",
    "function_name": "dataproc_cluster_block_public_access_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1865",
    "description": "The rule identifier INCOMING_SSH_DISABLED indicates a policy to disable incoming SSH access, while the rule name restricted-ssh refers to the specific rule implemented within a firewall to restrict SSH connections. In Google Cloud Platform (GCP), this is achieved using 'Firewall Rules' to manage network access, specifically by configuring a firewall rule to deny incoming traffic on port 22, which is the default port for SSH.",
    "function_name": "network_firewall_incoming_ssh_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1866",
    "description": "Checks if internet access configurations are associated with an authorized Virtual Private Cloud (VPC) in Google Cloud Platform (GCP). The rule is NON_COMPLIANT if internet access configurations are linked to an unauthorized VPC.",
    "function_name": "network_vpc_authorized_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1867",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1868",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1869",
    "description": "Checks if the default ports for SSH (22) and RDP (3389) ingress traffic in Google Cloud Platform (GCP) firewall rules are unrestricted. The rule is NON_COMPLIANT if a firewall rule allows ingress from any source IP address on these ports.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1870",
    "description": "Checks if a Google Cloud VPC Firewall rule is configured with a user-defined default action for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_firewall_rule_fragmented_packets_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1871",
    "description": "Check if Google Cloud Platform (GCP) Firewall Policy has associated rules. This rule is NON_COMPLIANT if no ingress or egress rules are associated with the Firewall Policy; otherwise, it is COMPLIANT if any rule exists.",
    "function_name": "network_firewall_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1872",
    "description": "Verifies whether a Serverless VPC Access connector has associated Serverless services. The connector is NON_COMPLIANT if there are no services linked to it.",
    "function_name": "network_vpc_access_connector_associated_services",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().connectors().get(name='projects/proj/locations/loc/connectors/connector')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1873",
    "description": "Checks if there are public routes in the VPC route table to an Internet Gateway. The rule is NON_COMPLIANT if a route to an IGW has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_vpc_routes_no_public_igw",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1874",
    "description": "Checks if Google Cloud's Elasticsearch Service (or a similar managed service) domains are in a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch Service domain endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1875",
    "description": "Checks if there are any Google Cloud SQL instances that are not using the default network and firewall settings. The rule is NON_COMPLIANT if there are any Cloud SQL instances not configured with the default settings.",
    "function_name": "sql_instances_default_network_firewall_settings",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1876",
    "description": "Checks if Cloud SQL instances in Google Cloud Platform (GCP) are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration' field has 'requireSsl' set to false or 'authorizedNetworks' is empty, indicating the instance is accessible from public IPs.",
    "function_name": "sql_instance_non_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1877",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset's access controls allow public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1878",
    "description": "Checks if Google BigQuery reservation has 'enableCapacityCommitment' enabled. The rule is NON_COMPLIANT if 'enableCapacityCommitment' is not enabled or if the configuration.enableCapacityCommitment field is 'false'.",
    "function_name": "bigquery_reservation_capacity_commitment_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_reservation_client.get_reservation(name='projects/proj/locations/location/reservations/reservation')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1879",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform access controls enabled. The rule is NON_COMPLIANT if uniform access controls are not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_controls_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1880",
    "description": "Checks if the required IAM policies for public access are configured properly at the project level. The rule is only NON_COMPLIANT when the IAM roles and permissions do not match the required configurations as specified.",
    "function_name": "iam_project_public_access_policies_configured",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1881",
    "description": "Verifies that the necessary public access prevention configurations are established at the organization level. The rule is NON_COMPLIANT if the settings do not align with the specified parameters or default configurations.",
    "function_name": "iam_organization_public_access_prevention_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1882",
    "description": "Checks if Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1883",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the 'Uniform Bucket-Level Access' settings, the bucket IAM policies, and the bucket access control lists (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1884",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule verifies the Uniform Bucket-Level Access settings, bucket IAM policies, and ACLs.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1885",
    "description": "Checks if a Google AI Platform Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1886",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebooks instance. The rule is NON_COMPLIANT if an AI Platform Notebooks instance is internet-enabled.",
    "function_name": "ai_platform_notebooks_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1887",
    "description": "Checks if a Private Service Connection for the service provided in the rule parameter is created for each Google Cloud Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if a Google Cloud VPC doesn't have a Private Service Connection created for the service.",
    "function_name": "network_vpc_private_service_connection_required",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1888",
    "description": "Checks if there are unused Firewall Rules. The rule is COMPLIANT if each Firewall Rule is associated with a target resource. The rule is NON_COMPLIANT if a Firewall Rule is not associated with any target resource.",
    "function_name": "network_firewall_rule_association_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1889",
    "description": "Checks if DNS resolution from accepted/requester VPC to private IP is enabled in Google Cloud Platform. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled.",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1890",
    "description": "Checks if firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_unrestricted_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1891",
    "description": "Checks if both Cloud VPN tunnels provided by Google Cloud Platform (GCP) are in 'RUNNING' state. The rule is NON_COMPLIANT if one or both tunnels are in 'FAILED' state.",
    "function_name": "network_vpn_tunnels_running_state",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1892",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1893",
    "description": "Checks if a Google Cloud Armor security policy has any rules configured. The policy is NON_COMPLIANT if no rules are present within the Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1894",
    "description": "Checks whether a Cloud Armor security policy contains any security rules. This rule is NON_COMPLIANT if a security policy does not contain any security rule.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1895",
    "description": "Checks if Cloud Armor security policy rule groups contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy rule group.",
    "function_name": "network_cloud_armor_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1896",
    "description": "Checks whether Google Cloud Armor security policy contains rules with conditions. This policy is COMPLIANT if the security policy contains at least one rule with conditions and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_contains_conditions",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1897",
    "description": "Checks if a Google Cloud Armor security policy contains any rules or rule groups. The policy is considered NON_COMPLIANT if there are no rules or rule groups present within the security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1898",
    "description": "Checks if a Google Cloud VPC firewall policy is configured with a user-defined ruleset for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_vpc_firewall_policy_fragmented_packets_user_defined_ruleset",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1899",
    "description": "Checks if a Google Cloud Platform (GCP) firewall policy is configured with a user-defined default action for traffic. This rule is NON_COMPLIANT if the default action for traffic does not match the user-defined action.",
    "function_name": "network_firewall_policy_user_defined_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1900",
    "description": "Check if GCP Firewall Rule is associated with at least one target (such as instance tags or IP ranges). This rule is NON_COMPLIANT if no targets are associated with the Firewall Rule, else COMPLIANT if at least one target exists.",
    "function_name": "network_firewall_rule_has_target",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1901",
    "description": "Checks if a Google Cloud API Gateway API is using Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud Armor security policy is not used or if the used security policy does not match what is listed in the rule parameter.",
    "function_name": "network_api_gateway_uses_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.api_gateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1902",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpointConfigurationType. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1903",
    "description": "Checks if Google Cloud Memorystore instances are configured with a custom VPC subnet. The rule is NON_COMPLIANT for a Memorystore instance if it is using the default VPC subnet.",
    "function_name": "network_memorystore_custom_vpc_subnet",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.instances().get(project='proj', region='region', instance='memorystore')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1904",
    "description": "The rule identifier for instances in VPC in GCP is different from its rule name, similar to AWS's INSTANCES_IN_VPC and ec2-instances-in-vpc.",
    "function_name": "network_vpc_instances_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1905",
    "description": "Checks if Cloud Routers with internet access are associated with an authorized Virtual Private Cloud (VPC) Network. The rule is NON_COMPLIANT if Cloud Routers with internet access are associated with an unauthorized VPC Network.",
    "function_name": "network_cloud_router_authorized_vpc_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1906",
    "description": "Checks if there are public routes in the route table to a Cloud Internet Engine (CIE). The rule is NON_COMPLIANT if a route to a CIE has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_routes_no_public_cidr",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1907",
    "description": "Checks if Google BigQuery has 'VPC Service Controls' enabled. The rule is NON_COMPLIANT if 'VPC Service Controls' are not enabled for the BigQuery instance or if the configuration.vpcServiceControls field is 'false'.",
    "function_name": "bigquery_instance_vpc_service_controls_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_service_account(project='project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1908",
    "description": "Checks if a Google AI Platform Notebook instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebook_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1909",
    "description": "Checks if DNS resolution from accepter/requester VPC to private IP is enabled. The rule is NON_COMPLIANT if DNS resolution from accepter/requester VPC to private IP is not enabled in Google Cloud Platform (GCP).",
    "function_name": "network_vpc_dns_resolution_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1910",
    "description": "Checks if both Cloud VPN tunnels in Google Cloud Platform (GCP) are in 'ACTIVE' status. The rule is NON_COMPLIANT if one or both tunnels are in 'DOWN' status.",
    "function_name": "network_vpn_tunnels_active_status",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1911",
    "description": "Checks if Google Cloud Compute Instance Templates are set to assign public IP addresses to Network Interfaces. The rule is NON_COMPLIANT if the default version of a Compute Instance Template has at least 1 Network Interface with 'accessConfig' set to 'true' for assigning a public IP.",
    "function_name": "compute_instance_template_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instanceTemplates().get(project='proj', instanceTemplate='template')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1912",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods are configured to share a host's process namespace with their containers. The rule is NON_COMPLIANT if the HostPID parameter is set to 'true'.",
    "function_name": "container_pod_hostpid_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1913",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpointConfigurationType. The rule returns NON_COMPLIANT if the API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1914",
    "description": "Checks if an API Gateway stage uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway stage does not have an associated SSL certificate.",
    "function_name": "apigateway_stage_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1915",
    "description": "Checks if Google Cloud APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud API if it is not associated with a Cloud Armor security policy.",
    "function_name": "network_api_association_with_cloud_armor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1916",
    "description": "Verifies if Google Cloud CDN is associated with Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Cloud Armor policy.",
    "function_name": "network_cdn_associated_with_cloud_armor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1917",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1918",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/my-project/repos/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1919",
    "description": "Checks if Google Cloud Database Migration Service (Cloud DMS) private services are exposed to the public. The rule is NON_COMPLIANT if the equivalent public access setting is enabled.",
    "function_name": "network_dms_private_services_no_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1920",
    "description": "Checks if Google Cloud Firestore or Google Cloud Spanner backups are public. The rule is NON_COMPLIANT if any Firestore or Spanner backups are public.",
    "function_name": "firestore_spanner_backups_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().backups().list(parent='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1921",
    "description": "Checks if the Google Cloud Platform (GCP) Identity-Aware Proxy (IAP) settings allow access for all users. The rule is NON_COMPLIANT if 'accessLevel' is set to 'allUsers'.",
    "function_name": "iap_settings_restrict_access_level",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "iap_client.projects().iapWeb().services().getIamPolicy(resource='projects/project_id/iap_web/service_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1922",
    "description": "Checks if the status of the Google Cloud Config Sync association compliance is COMPLIANT or NON_COMPLIANT after the association execution on the instance. The rule is compliant if the field status is COMPLIANT. For more information about associations in GCP, see Config Sync documentation.",
    "function_name": "compute_instance_config_sync_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1923",
    "description": "Checks if Google Cloud Platform (GCP) Cloud VPN has 'AutoTunnel' enabled. The rule is NON_COMPLIANT for a Cloud VPN if 'AutoTunnel' is set to 'enable'.",
    "function_name": "network_vpn_autotunnel_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1924",
    "description": "Checks if the Google Kubernetes Engine (GKE) cluster endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1925",
    "description": "Checks if Google Cloud Elasticsearch clusters (via Google Cloud Marketplace or a self-managed deployment) are within a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch cluster endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1926",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without an SSL certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1927",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, an HTTPS load balancer should be configured. This rule is specifically applicable to Google Cloud Load Balancers and not to any other load balancing options.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1928",
    "description": "Checks if an account with Google Cloud Dataproc has block public access settings enabled. The rule is NON_COMPLIANT if the blockPublicAccess configuration is false or if true, ports other than Port 22 are listed in the allowedFirewallRules.",
    "function_name": "dataproc_cluster_block_public_access_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1929",
    "description": "In Google Cloud Platform (GCP), the equivalence for the incoming SSH policy that disables incoming SSH traffic can be achieved using Firewall Rules. Specifically, you would create a firewall rule that denies TCP traffic on port 22 (the default SSH port) to restrict SSH access for instances.",
    "function_name": "network_firewall_deny_ssh",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body={'name': 'deny-ssh', 'network': 'global/networks/default', 'direction': 'INGRESS', 'priority': 1000, 'targetTags': ['ssh-deny'], 'allowed': [], 'denied': [{'IPProtocol': 'tcp', 'ports': ['22']}], 'sourceRanges': ['0.0.0.0/0']})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1930",
    "description": "Checks if Cloud Routers are attached to an authorized Google Cloud VPC network. The rule is NON_COMPLIANT if Cloud Routers are attached to an unauthorized VPC network.",
    "function_name": "network_cloud_router_authorized_vpc_attachment",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1931",
    "description": "Checks if the Cloud Functions IAM policy attached to the Cloud Function prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "iam_cloud_function_policy_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1932",
    "description": "Checks if a Google Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1933",
    "description": "Checks if default ports for SSH (22) and RDP (3389) ingress traffic for Google Cloud Platform firewall rules is unrestricted. The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from any source IP address on ports 22 or 3389.",
    "function_name": "network_firewall_restrict_ssh_rdp_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1934",
    "description": "Checks if a GCP Firewall Rule is configured with a user-defined default action for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined action.",
    "function_name": "network_firewall_rule_fragmented_packets_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1935",
    "description": "Check if Google Cloud Firewall policy is associated with stateful or stateless rules. This rule is NON_COMPLIANT if no stateful or stateless rules are associated with the Firewall policy, else COMPLIANT if any one of the rule types exists.",
    "function_name": "network_firewall_policy_stateful_or_stateless_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1936",
    "description": "Checks if a GCP Firewall Rule contains rules. The rule is NON_COMPLIANT if there are no rules in a Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1937",
    "description": "Checks if there are public routes in the route table to a Cloud Router (GCP equivalent). The rule is NON_COMPLIANT if a route to a Cloud Router has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_route_no_public_cidr",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1938",
    "description": "Checks if Google Cloud's Elasticsearch (managed) instances are in a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch instance endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1939",
    "description": "Checks if there are any Google Cloud SQL database instances that do not use the default Cloud SQL settings. The rule is NON_COMPLIANT if there are any database instances not configured with the default settings.",
    "function_name": "sql_database_instances_default_settings_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1940",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration' field's 'authorizedNetworks' array is not empty, indicating that the instance has been configured to allow connections from public IP addresses.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1941",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the `access` field contains an entry with `specialGroup` set to 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1942",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access enabled to block public access settings. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1943",
    "description": "Verifies if the necessary IAM permissions are properly configured at the project level in GCP. The rule is marked as NON_COMPLIANT when the assigned roles do not align with the expected IAM policy configurations.",
    "function_name": "iam_project_roles_configured",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1944",
    "description": "Checks if the required public access settings are configured at the project level. The rule is NON_COMPLIANT if the IAM policy does not restrict public access appropriately based on the specified parameters or defaults.",
    "function_name": "iam_project_public_access_restricted",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1945",
    "description": "Checks if Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_non_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1946",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Bucket Policy Only settings, uniform bucket-level access, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1947",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, the bucket IAM policies, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1948",
    "description": "Checks if a Google Cloud AI Platform Notebooks instance is launched within a Virtual Private Cloud (VPC) network or within a list of approved subnets. The rule is NON_COMPLIANT if an AI Platform Notebooks instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "network_ai_platform_notebooks_vpc_compliance",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1949",
    "description": "Checks if direct internet access is disabled for a Google Cloud Vertex AI Workbench instance. The rule is NON_COMPLIANT if the Vertex AI Workbench instance is internet-enabled.",
    "function_name": "vertex_ai_workbench_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1950",
    "description": "Checks if a Private Service Access connection is created for each Google Cloud Virtual Private Cloud (GCP VPC). The rule is NON_COMPLIANT if a GCP VPC doesn't have a Private Service Access connection created for the service.",
    "function_name": "network_vpc_private_service_access_connection_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1951",
    "description": "Checks if there are unused firewall rules in Google Cloud Platform (GCP). The rule is COMPLIANT if each firewall rule is associated with a VPC network. The rule is NON_COMPLIANT if a firewall rule is not associated with a VPC network.",
    "function_name": "network_firewall_rule_association_with_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1952",
    "description": "Checks if Google Cloud firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_rules_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1953",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is considered NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1954",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1955",
    "description": "Checks whether a GCP Web Application Firewall (WAF) contains any firewall rules. This rule is NON_COMPLIANT if a WAF does not contain any firewall rule.",
    "function_name": "network_waf_contains_firewall_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1956",
    "description": "Checks if Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1957",
    "description": "Checks whether the Google Cloud Armor security policy contains rules with match conditions. This rule is COMPLIANT if the security policy contains at least one match condition and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_match_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1958",
    "description": "Checks if a GCP Cloud Armor security policy contains any security rules. The policy is NON_COMPLIANT if there are no security rules present within a Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_security_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1959",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' is not present in the API configuration.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1960",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1961",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1962",
    "description": "Checks if a Google Cloud Platform (GCP) Cloud Run service has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'log level' is neither ERROR nor ALL.",
    "function_name": "cloudrun_service_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1963",
    "description": "Checks if Google Cloud Load Balancers (GCLB) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if GCLB Desync mitigation mode does not match with user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1964",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging configured.",
    "function_name": "network_cdn_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1965",
    "description": "Checks if at least one Google Cloud Audit Log is logging Google Cloud Storage (GCS) data access events for all GCS buckets. The rule is NON_COMPLIANT if there are no logs recording GCS data access events.",
    "function_name": "logging_auditlog_gcs_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1966",
    "description": "Verifies if Google Cloud Monitoring alerts have an action configured for ACTIVE, INACTIVE, or NO_DATA states. Optionally checks if any actions correspond to a specific notification channel. The rule is considered NON_COMPLIANT if there is no action specified for the alert or optional parameter.",
    "function_name": "monitoring_alerts_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1967",
    "description": "Checks if a resource type has a Google Cloud Monitoring alert policy for the named metric. For resource types, you can specify Compute Engine instances, Cloud Storage buckets, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the named metric has a resource ID and an alert policy in Google Cloud Monitoring.",
    "function_name": "monitoring_compute_alert_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1968",
    "description": "In GCP, the equivalence for ensuring logging is enabled is the 'Cloud Audit Logs' which serves a similar purpose as AWS CloudTrail. The rule can be compared to checking if 'Audit Logging' is enabled for the relevant services to track activity.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1969",
    "description": "Checks if a Google Cloud Build configuration has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_configuration_log_option_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1970",
    "description": "Checks if logging is enabled with a valid severity level for Cloud SQL database events in Google Cloud. The rule is NON_COMPLIANT if logging is not enabled or if the logging severity level for Cloud SQL events is not valid.",
    "function_name": "logging_cloudsql_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1971",
    "description": "Checks if a Google Cloud Firestore database has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore database does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_database_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1972",
    "description": "Checks if Google Cloud VPN has logging enabled for connections. The rule is NON_COMPLIANT if 'loggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1973",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if Stackdriver Monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1974",
    "description": "Checks if logging is configured for active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have logging enabled or the logging configuration is missing in at least one revision.",
    "function_name": "cloud_run_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1975",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1976",
    "description": "Checks if Google Cloud App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1977",
    "description": "Checks if the Google Cloud Load Balancing has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or if the log bucket is not set to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1978",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have audit logging enabled. The rule is NON_COMPLIANT if a subscription does not have audit logging enabled.",
    "function_name": "pubsub_subscription_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1979",
    "description": "Checks if a Google Cloud Pub/Sub service has Stackdriver logging enabled. The rule is NON_COMPLIANT if the service does not have logging enabled.",
    "function_name": "pubsub_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1980",
    "description": "In Google Cloud Platform (GCP), the equivalent service to AWS CloudTrail for logging and monitoring API calls is Google Cloud Audit Logs. This service provides details of actions taken by users in your GCP project across multiple regions.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1981",
    "description": "Checks if a Google Cloud SQL instance has audit logging enabled for its database operations. The rule is NON_COMPLIANT if a Cloud SQL instance does not have audit logging enabled.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1982",
    "description": "Checks if Google Cloud Firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the firewall rules. You can specify which logging type you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1983",
    "description": "Checks if Google Cloud SQL MySQL instances are configured to enable logging for Audit logs. The rule is NON_COMPLIANT if Cloud SQL MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1984",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types (such as general, slow query, or error logs) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1985",
    "description": "Checks if Google BigQuery audit logs are being exported to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logs_exported_to_storage",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1986",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1987",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1988",
    "description": "Checks if logging is enabled for your Google Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1989",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1990",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic for the subscriptions. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1991",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1992",
    "description": "Checks if Google Cloud VPC flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1993",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1994",
    "description": "Checks if Google Cloud Monitoring logging for Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'loggingEnabled' field is set to false.",
    "function_name": "monitoring_cloud_armor_logging_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1995",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1996",
    "description": "Checks if Google Cloud Endpoints have access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' configuration is not present in the Endpoints settings.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1997",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logLevel is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1998",
    "description": "Checks if Google Cloud Trace (formerly known as Stackdriver Trace) tracing is enabled on Google Cloud API Gateway services. The rule is COMPLIANT if Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "api_gateway_trace_tracing_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('apigateway', 'v1'); service.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_1999",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled or 'logLevel' is set to neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2000",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined session affinity setting. The rule is NON_COMPLIANT if the session affinity setting does not match the user-defined value.",
    "function_name": "network_load_balancer_session_affinity_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2001",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2002",
    "description": "Checks if at least one Google Cloud Audit Log is logging Cloud Storage data events for all buckets. The rule is NON_COMPLIANT if there are no logs recording Cloud Storage data events.",
    "function_name": "logging_auditlog_cloudstorage_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2003",
    "description": "GCP's equivalent rule is to ensure that Cloud Audit Logs are enabled for tracking API calls and other activities on resources, similar to AWS CloudTrail.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2004",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if all logging options are set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2005",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service (Cloud DMS) replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "logging_dms_replication_task_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(filter='resource.type=\"cloudsql_database\" AND severity>=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2006",
    "description": "Checks if a Google Cloud Firestore (with MongoDB compatibility) instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2007",
    "description": "Checks if Google Cloud VPN has logging enabled. The rule is NON_COMPLIANT if 'logging' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2008",
    "description": "Checks if logging configuration is set on active GKE Pod specifications. This rule is NON_COMPLIANT if an active GKE Pod does not have a logging configuration defined or the logging configuration is null in at least one container defined in the Pod spec.",
    "function_name": "container_pod_logging_configuration_set",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2009",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2010",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2011",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging settings are not enabled or the log bucket is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2012",
    "description": "Checks if Google Cloud Pub/Sub has audit logging enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have audit logging enabled.",
    "function_name": "logging_pubsub_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2013",
    "description": "Checks if a Google Cloud Pub/Sub topic has logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2014",
    "description": "Google Cloud Platform equivalent service for AWS CloudTrail is Google Cloud Audit Logs, which provides similar logging of activities in the cloud environment. The corresponding rule in GCP would ensure that audit logs are enabled in multiple regions.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/project-id/locations/location-id/buckets/bucket-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2015",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2016",
    "description": "Checks if Google Cloud Platform VPC Service Controls have logging enabled. The rule is NON_COMPLIANT if a logging type (such as 'Data Access' logs) is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.vpcs().get(project='proj', vpc='vpc_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2017",
    "description": "Checks if Google Cloud SQL instances for MySQL are configured to export logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2018",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2019",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific location in Google Cloud Storage. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_specific_location",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2020",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if audit logging is not enabled for the dataset.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2021",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "network_dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2022",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2023",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='projects/project_id/locations/location_id/workflows/workflow_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2024",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2025",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the value of the parameter.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2026",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2027",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLog' settings are not present in the OpenAPI configuration for the API.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service_management_client.services().configs().get(serviceName='api', configId='config')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2028",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logLevel is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2029",
    "description": "Checks if Google Cloud Trace is enabled for Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(project='proj', service='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2030",
    "description": "Checks if a Google Cloud Firestore or Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is not set to ERROR or ALL.",
    "function_name": "firestore_api_gateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2031",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if the Load Balancer Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2032",
    "description": "Checks if Google Cloud CDN is configured to log requests to Google Cloud Storage. The rule is NON_COMPLIANT if a Cloud CDN resource does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2033",
    "description": "Checks if at least one Google Cloud Audit Log is logging data events for all Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs recording data events.",
    "function_name": "logging_auditlog_dataevents_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2034",
    "description": "The equivalence in GCP for the AWS rule 'CLOUD_TRAIL_ENABLED' is 'Cloud Audit Logs' which ensures that logging is enabled for tracking actions in the GCP environment.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2035",
    "description": "Checks if a Google Cloud Build trigger has log streaming enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_log_streaming_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2036",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "logging_database_migration_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2037",
    "description": "Checks if a Google Cloud Firestore or Google Cloud Datastore instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Firestore or Datastore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_datastore_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2038",
    "description": "Checks if Google Cloud IAP (Identity-Aware Proxy) has client connection logging enabled. The rule is NON_COMPLIANT if 'IapSettings.clientConnectionLogEnabled' is set to false.",
    "function_name": "iap_client_connection_logging_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "iap.projects().getIapSettings(name='projects/project_id/iap_web')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2039",
    "description": "Checks if logging is enabled on active Google Kubernetes Engine (GKE) workloads. This rule is NON_COMPLIANT if an active GKE workload does not have logging enabled through the Stackdriver Logging or if the logging configuration is null in at least one container definition.",
    "function_name": "container_workload_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2040",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2041",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2042",
    "description": "Checks if the Cloud Load Balancing has logging enabled. The rule is NON_COMPLIANT if the logBucket is not set or the logBucket does not match the required bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2043",
    "description": "Checks if Google Cloud Pub/Sub has Cloud Audit Logs enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2044",
    "description": "Checks if a Google Cloud Pub/Sub topic has Cloud Logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().topics().get(name='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2045",
    "description": "In Google Cloud Platform (GCP), the equivalent service to AWS CloudTrail for logging and monitoring API activity is Google Cloud Audit Logs. To ensure comprehensive auditing, it is essential to enable Audit Logs that span multiple regions.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2046",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver Logging export enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver Logging export enabled for audit logs.",
    "function_name": "spanner_instance_logging_export_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(parent='projects/proj', sink='sink_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2047",
    "description": "Checks if Google Cloud Platform (GCP) VPC (Virtual Private Cloud) firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the specified firewall rules.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2048",
    "description": "Checks if Cloud SQL for MySQL instances are configured to enable 'Cloud SQL Insights' for monitoring and logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have Cloud SQL Insights enabled.",
    "function_name": "sql_mysql_insights_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2049",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2050",
    "description": "Checks if Google BigQuery audit logs are being exported to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logs_exported_to_storage",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2051",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2052",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud Platform public hosted zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud Platform public hosted zones.",
    "function_name": "dns_public_hosted_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2053",
    "description": "Checks if logging is enabled for your Cloud Storage buckets (equivalent to S3). The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2054",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2055",
    "description": "Checks if Google Cloud Virtual Private Cloud (VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2056",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_expected",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2057",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2058",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' are not configured in the service's endpoint configuration.",
    "function_name": "endpoints_service_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2059",
    "description": "Checks if all methods in Google Cloud Endpoints configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2060",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2061",
    "description": "Checks if a Google Cloud Endpoints API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'logLevel' is neither ERROR nor ALL.",
    "function_name": "endpoints_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2062",
    "description": "Checks if Google Cloud Load Balancers (GCLB) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if GCLB Desync mitigation mode does not match with the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2063",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2064",
    "description": "Checks if at least one Google Cloud Audit Log (Cloud Logging) trail is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no trails recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2065",
    "description": "Google Cloud Platform (GCP) equivalent of enabling audit logs is through enabling Cloud Audit Logs, which is analogous to enabling AWS CloudTrail. The rule identifier in GCP can differ from other identifiers but essentially serves the same function.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2066",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2067",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud SQL replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "sql_replication_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.list_log_entries(filter='resource.type=\"cloudsql_database\" AND severity>=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2068",
    "description": "Checks if a Google Cloud Firestore instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2069",
    "description": "Checks if Google Cloud VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logConfig.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2070",
    "description": "Checks if logging configuration is set on active GKE Pod specifications. This rule is NON_COMPLIANT if an active GKE Pod does not have logging configured or if the logging configuration is null in at least one container definition.",
    "function_name": "container_pod_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2071",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2072",
    "description": "Checks if Google Cloud Platform App Engine environments are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "app_engine_environment_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2073",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the 'logging' is disabled or the 'logBucket' is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2074",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have logging enabled. The rule is NON_COMPLIANT if a subscription does not have logging enabled.",
    "function_name": "pubsub_subscription_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().subscriptions().get(subscription='subscription_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2075",
    "description": "Checks if a Google Cloud Pub/Sub topic has audit logging enabled. The rule is NON_COMPLIANT if the topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2076",
    "description": "The rule MULTI_REGION_CLOUD_TRAIL_ENABLED in AWS corresponds to Google Cloud's equivalent service which ensures that logging is performed across multiple regions to have a more robust audit trail, similar to Cloud Audit Logs in Google Cloud Platform. This ensures that all operations are tracked across geographically distributed resources.",
    "function_name": "logging_audit_logs_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/proj/locations/global/buckets/_Default')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2077",
    "description": "Checks if a Google Cloud SQL database instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2078",
    "description": "Checks if Google Cloud Platform (GCP) VPC firewalls have logging enabled. The rule is NON_COMPLIANT if 'logConfig' is not set. You can specify which logging configurations you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2079",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2080",
    "description": "Checks if respective logs of Google Cloud SQL (GCP equivalent of Amazon RDS) are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2081",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2082",
    "description": "Checks if Google BigQuery datasets have the specified security settings. The rule is NON_COMPLIANT if the dataset is not encrypted, or if it is not using the specified encryption key, or if audit logging is not enabled for the dataset.",
    "function_name": "bigquery_dataset_encryption_and_logging_compliance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2083",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2084",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2085",
    "description": "Checks if Google Cloud Workflows have logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2086",
    "description": "Checks if Google Cloud VPC Flow Logs are found and enabled for all Google Cloud VPC networks. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2087",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the value of the parameter.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2088",
    "description": "Checks if logging is enabled for Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "compute_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2089",
    "description": "Checks if Google Cloud Endpoints have access logging enabled. The rule is NON_COMPLIANT if 'logs' configuration is not present in the Endpoints settings.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(project='proj', service='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2090",
    "description": "Checks if all methods in Google Cloud Endpoints or API Gateway have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the logging level is neither ERROR nor INFO.",
    "function_name": "api_gateway_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/apigateway.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2091",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_trace_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project}/services/{service}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2092",
    "description": "Checks if a Google Cloud API Gateway API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled or if the log level is not set to 'ERROR' or 'ALL'.",
    "function_name": "apigateway_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2093",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with a user-defined desynchronization (Desync) mitigation mode. The rule is NON_COMPLIANT if the HTTP(S) Load Balancer Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2094",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN is not configured for logging.",
    "function_name": "network_cdn_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2095",
    "description": "Checks if at least one Google Cloud audit log is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2096",
    "description": "Google Cloud Platform equivalent for AWS CloudTrail is Google Cloud Audit Logs, which provides similar logging and auditing capabilities for tracking API requests and changes in your Google Cloud resources.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2097",
    "description": "Checks if a Google Cloud Build trigger has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_log_option_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2098",
    "description": "Checks if logging is enabled with a valid severity level for GCP Database Migration Service (DMS) replication task events of a target Cloud SQL database. The rule is NON_COMPLIANT if logging is not enabled or if the replication task logging of a target database has a severity level that is not valid.",
    "function_name": "dms_replication_task_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['project-id'], filter='severity>=ERROR')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2099",
    "description": "Checks if a Google Cloud Firestore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2100",
    "description": "Checks if Google Cloud VPN has connection logging enabled. The rule is NON_COMPLIANT if 'loggingEnabled' is set to false in the VPN configuration.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2101",
    "description": "Checks if logging is configured for active Google Cloud Run services. This rule is NON_COMPLIANT if a Cloud Run service does not have the logging configuration set or if the logging configuration is null in at least one revision.",
    "function_name": "cloudrun_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/svc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2102",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2103",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the log routing settings do not include exporting to Cloud Logging.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2104",
    "description": "Checks if the Google Cloud Load Balancer has access logs enabled. The rule is NON_COMPLIANT if the 'logging.enabled' is false or 'logging.bucket' is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2105",
    "description": "Checks if Google Cloud Pub/Sub (GCP equivalent of Amazon MQ) has logging enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2106",
    "description": "Checks if a Google Cloud Pub/Sub service has Stackdriver logging enabled. The rule is NON_COMPLIANT if the Pub/Sub service does not have logging enabled.",
    "function_name": "pubsub_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2107",
    "description": "The GCP equivalent for enabling a multi-region logging service to track and audit activities is by using Cloud Audit Logs in combination with Google Cloud Logging. This allows users to enable logging across multiple regions for better compliance and tracking of resources.",
    "function_name": "logging_auditlogs_multiregion_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2108",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2109",
    "description": "Checks if Google Cloud Platform (GCP) VPC Service Controls have logging enabled. The rule is NON_COMPLIANT if a logging type is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.get(project='proj', vpc='vpc_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2110",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to enable the Cloud SQL Insights feature for audit log data analysis. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_audit_log_insights_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2111",
    "description": "Checks if the respective logs of Cloud SQL for PostgreSQL and MySQL are enabled in Google Cloud Platform (GCP). The rule is NON_COMPLIANT if any log types (such as general log, slow query log, error log) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2112",
    "description": "Checks if Google BigQuery datasets have audit logging enabled and if the configured logging destination matches the specified location. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the logging destination does not match the provided criteria.",
    "function_name": "bigquery_dataset_audit_logging_enabled_destination_matched",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).labels"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2113",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have auditing enabled.",
    "function_name": "bigquery_dataset_encryption_auditing_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2114",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2115",
    "description": "Checks if logging is enabled for your Google Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2116",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='projects/project_id/locations/location_id/workflows/workflow_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2117",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2118",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the specified value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2119",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2120",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' settings are not present in the Endpoints configuration.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2121",
    "description": "Checks if all methods in Google Cloud API Gateway have logging enabled. The rule is NON_COMPLIANT if logging is not enabled or if logging level is neither ERROR nor INFO.",
    "function_name": "apigateway_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2122",
    "description": "Checks if Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "service = discovery.build('endpoints', 'v1', credentials=credentials)\nrequest = service.projects().services().get(name='projects/{project_id}/services/{service_id}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2123",
    "description": "Checks if a Google Cloud Platform (GCP) Cloud Run service has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is neither ERROR nor ALL.",
    "function_name": "cloudrun_service_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2124",
    "description": "Checks if HTTPS load balancers in Google Cloud Platform (GCP) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if the HTTPS load balancer's Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_https_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2125",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2126",
    "description": "Checks if at least one Google Cloud Audit Log is configured to log data access events for all Google Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs recording data access events for Cloud Storage.",
    "function_name": "logging_auditlog_data_access_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2127",
    "description": "Google Cloud Logging must be enabled for operational logging similar to AWS CloudTrail.",
    "function_name": "logging_cloud_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2128",
    "description": "Checks if a Google Cloud Build project environment has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_project_log_option_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2129",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service (DMS) migration jobs. The rule is NON_COMPLIANT if logging is not enabled or migration job logging has a severity level that is not valid.",
    "function_name": "dms_migration_jobs_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'], filter='resource.type=\"dms_migration_job\" AND severity>=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2130",
    "description": "Checks if a Google Cloud Firestore instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_instance_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2131",
    "description": "Checks if Google Cloud VPN has logging enabled for the tunnel. The rule is NON_COMPLIANT if 'tunnel.logging' is set to false.",
    "function_name": "network_vpn_tunnel_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2132",
    "description": "Checks if logging is enabled in GCP Cloud Run services. This rule is NON_COMPLIANT if any active Cloud Run service does not have the logging configuration set or the logging setting is null.",
    "function_name": "cloudrun_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2133",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2134",
    "description": "Checks if Google Cloud App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the logging configuration is set to false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2135",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or if the log bucket is not equal to the specified GCS bucket.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2136",
    "description": "Checks if Google Cloud Pub/Sub topics have logging enabled. The rule is NON_COMPLIANT if a topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2137",
    "description": "Checks if a Google Cloud Pub/Sub topic has Logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().topics().get(name='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2138",
    "description": "In GCP, the equivalent service for AWS CloudTrail is Google Cloud Audit Logging, which provides similar functionality for logging and monitoring activities across your GCP projects. However, there is no direct equivalent to a multi-region setup in Google Cloud as it operates on a region-specific basis, but logs can be configured to be exported to different storage locations for centralized management.",
    "function_name": "logging_audit_logs_centralized_export",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().create(parent='projects/proj', body={'name': 'my-sink', 'destination': 'storage.googleapis.com/my-bucket'})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2139",
    "description": "Checks if a Google Cloud SQL (PostgreSQL or MySQL) instance has Stackdriver (now Cloud Operations) logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2140",
    "description": "Checks if Google Cloud Platform (GCP) Virtual Private Cloud (VPC) firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the specified firewall rule.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2141",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to enable audit logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit logging enabled.",
    "function_name": "sql_mysql_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2142",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2143",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specific_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.datasets().get(projectId='proj', datasetId='dataset')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2144",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if it is encrypted with a different key, or if the dataset does not have access logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_logging_compliance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2145",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2146",
    "description": "Checks if Cloud Storage bucket logging is enabled. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2147",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2148",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2149",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the specified logging configuration.",
    "function_name": "network_security_policy_logging_destination_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2150",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2151",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in the service configuration.",
    "function_name": "endpoints_service_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2152",
    "description": "Checks if all methods in Google Cloud Endpoints configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2153",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2154",
    "description": "Checks if a Google Cloud Platform (GCP) serverless API (e.g., Cloud Endpoints or API Gateway) has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or the log level is not set to ERROR or ALL.",
    "function_name": "logging_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2155",
    "description": "Checks if Google Cloud Load Balancers are configured with a user defined Desync mitigation mode. The rule is NON_COMPLIANT if the Load Balancer's Desync mitigation mode does not match with the user defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2156",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN is not configured to log requests.",
    "function_name": "network_cdn_access_logs_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2157",
    "description": "Checks if at least one Google Cloud Audit Log is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs that record GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2158",
    "description": "In GCP, the equivalent to enabling AWS CloudTrail would be using Cloud Audit Logs for logging administrative activities on your Google Cloud resources.",
    "function_name": "logging_audit_logs_enable_administrative",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2159",
    "description": "Checks if a Google Cloud Build configuration has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_configuration_log_option_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2160",
    "description": "Verifies whether logging is enabled with a valid severity level for Cloud SQL database replication task events in GCP. The rule is NON_COMPLIANT if logging is not enabled or the logging severity level for replication tasks in the target Cloud SQL database is invalid.",
    "function_name": "sql_replication_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(filter='resource.type=\"cloudsql_database\" AND severity=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2161",
    "description": "Checks if a Google Cloud Firestore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2162",
    "description": "Checks if Google Cloud Platform (GCP) VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logging' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2163",
    "description": "Checks if logging is configured for active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have logging enabled or the log configuration is null in at least one revision.",
    "function_name": "cloud_run_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/svc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2164",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2165",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of `enableStackdriverLogging` is false.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2166",
    "description": "Checks if the Google Cloud Load Balancing has logging enabled. The rule is NON_COMPLIANT if the logging is disabled or the log bucket does not match the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2167",
    "description": "Checks if Google Cloud Pub/Sub topics have audit logging enabled. The rule is NON_COMPLIANT if a topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2168",
    "description": "Checks if a Google Cloud Pub/Sub topic has logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2169",
    "description": "The equivalence in GCP for enabling Cloud Audit Logs across multiple regions is to configure 'Cloud Audit Logs' to ensure that logs are captured for activities across multiple regions.",
    "function_name": "logging_audit_logs_multiregion_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2170",
    "description": "Checks if a Google Cloud SQL instance has Cloud Logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Cloud Logging enabled for audit logs.",
    "function_name": "sql_instance_logging_audit_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2171",
    "description": "Checks if GCP Firewall Rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the firewall rules. You can specify which logging type you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2172",
    "description": "Checks if Cloud SQL for MySQL instances are configured to publish audit logs to Stackdriver Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2173",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2174",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2175",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or is encrypted with another key, or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2176",
    "description": "Checks if DNS query logging is enabled for your Google Cloud Platform Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud Platform Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2177",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2178",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().workflows().get(name='workflow_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2179",
    "description": "Checks if Google Cloud Virtual Private Cloud (Google Cloud VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2180",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_expected",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2181",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2182",
    "description": "Checks if Google Cloud API Gateway has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' is not present in API configuration.",
    "function_name": "apigateway_api_access_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "apigateway_client.projects().locations().apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2183",
    "description": "Checks if all methods in Google Cloud Endpoints or Apigee API Gateway have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if log level is neither ERROR nor INFO.",
    "function_name": "apigee_api_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigee_client.projects().apis().get(projectId='proj', apiId='api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2184",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Google Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2185",
    "description": "Checks if a Google Cloud Platform (GCP) API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or 'logLevel' is neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2186",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with a user defined Desync mitigation mode. The rule is NON_COMPLIANT if the HTTP(S) Load Balancer Desync mitigation mode does not match with user defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2187",
    "description": "Checks if Google Cloud CDN has logging configured to send access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2188",
    "description": "Checks if at least one Google Cloud Audit Log is logging Cloud Storage data access events for all Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs that record Cloud Storage data access events.",
    "function_name": "logging_auditlog_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2189",
    "description": "In Google Cloud Platform (GCP), the equivalent of AWS CloudTrail is Cloud Audit Logs, which track all actions in Google Cloud services. The rule identifier might be different, but it serves a similar purpose of monitoring and logging account activity.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2190",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2191",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud SQL database audit logs. The rule is NON_COMPLIANT if logging is not enabled or database logging has a severity level that is not valid.",
    "function_name": "logging_cloudsql_auditlogs_severity_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2192",
    "description": "Checks if a Google Cloud Firestore or Google Cloud Datastore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Firestore or Datastore instance does not have logging enabled for audit logs.",
    "function_name": "logging_firestore_datastore_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2193",
    "description": "Checks if Google Cloud VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logging.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2194",
    "description": "Checks if logging is configured for active Google Kubernetes Engine (GKE) Pod specifications. This rule is NON_COMPLIANT if an active GKE Pod does not have the logging configuration defined or if the logging configuration is null in at least one container definition.",
    "function_name": "container_pod_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2195",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2196",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'serviceAccountManaged' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2197",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2198",
    "description": "Checks if Google Cloud Pub/Sub topics have Cloud Audit Logs enabled. The rule is NON_COMPLIANT if a topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2199",
    "description": "Checks if a Google Cloud Pub/Sub service has audit logging enabled. The rule is NON_COMPLIANT if the service does not have audit logging enabled.",
    "function_name": "pubsub_service_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2200",
    "description": "This rule checks whether Cloud Trail is enabled in multiple regions within GCP. The equivalent service in GCP is Cloud Audit Logs, which provides a similar audit trail capability across multiple regions.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2201",
    "description": "Checks if a Google Cloud Spanner instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance_admin().get_iam_policy(resource='projects/my-project/instances/my-instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2202",
    "description": "Checks if GCP VPC Service Controls have logging enabled. The rule is NON_COMPLIANT if the logging configuration for the service perimeter is not set. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_service_controls_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.servicePerimeters().get(name='projects/proj/servicePerimeters/perimeter')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2203",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export logs to Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "sql_mysql_log_export_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2204",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2205",
    "description": "Checks if Google BigQuery is configured to log audit logs to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_configured",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2206",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the dataset is not encrypted at rest or if it does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2207",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2208",
    "description": "Checks if logging is enabled for your Google Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2209",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2210",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2211",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected configuration.",
    "function_name": "network_security_policy_logging_destination_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2212",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2213",
    "description": "Checks if Google Cloud Endpoints configurations have access logging enabled. The rule is NON_COMPLIANT if 'accessLog' settings are not present in the API configuration.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.projects().configs().get(name='projects/proj/apis/api/configs/config')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2214",
    "description": "Verifies whether all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2215",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints APIs. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_api_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2216",
    "description": "Checks if a Google Cloud Endpoints API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or the log level is neither ERROR nor ALL.",
    "function_name": "endpoints_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2217",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with the user-defined settings for connection draining. The rule is NON_COMPLIANT if the connection draining settings do not match the user-defined parameters.",
    "function_name": "network_load_balancer_connection_draining_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2218",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2219",
    "description": "Checks if at least one Google Cloud Audit Log is enabled for Google Cloud Storage (GCS) data access events across all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs recording GCS data events.",
    "function_name": "logging_gcs_data_access_audit_log_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2220",
    "description": "GCP equivalent of enabling Cloud Audit Logs for project-level auditing.",
    "function_name": "logging_project_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2221",
    "description": "Checks if a Google Cloud Build (GCB) trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present logging configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2222",
    "description": "Verifies if logging is enabled with a valid severity level for Google Cloud Database Migration Service (DMS) replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or if the replication task logging of a target database has an invalid severity level.",
    "function_name": "dms_replication_task_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['project_id'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2223",
    "description": "Checks if a Google Cloud Firestore (with MongoDB compatibility) instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "firestore_instance_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2224",
    "description": "Checks if Google Cloud VPN has logging enabled for the connection. The rule is NON_COMPLIANT if 'LogConfig.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2225",
    "description": "Checks if log configuration is set on active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have the logging configuration defined or the logging setting is null in at least one revision.",
    "function_name": "cloudrun_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/svc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2226",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2227",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'logSeverity' is not set or 'logSeverity' is configured incorrectly.",
    "function_name": "app_engine_service_logging_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2228",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the loggingConfig.enable is false or loggingConfig.logBucket is not equal to the specified logBucketName.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2229",
    "description": "Checks if Google Cloud Pub/Sub topic message logging is enabled. The rule is NON_COMPLIANT if a topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2230",
    "description": "Checks if a Google Cloud Pub/Sub service has Logging enabled for audit purposes. The rule is NON_COMPLIANT if the service does not have audit logging enabled.",
    "function_name": "pubsub_service_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2231",
    "description": "The Google Cloud Platform (GCP) equivalent for enabling multi-region logging is using Google Cloud Logging with the configuration to ensure that logs are retained across multiple regions, similar to AWS CloudTrail's multi-region capability.",
    "function_name": "logging_logs_multi_region_retention",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2232",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "spanner_client.instance_admin().get_iam_policy(resource='projects/my-project/instances/my-instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2233",
    "description": "Checks if Google Cloud Platform (GCP) VPC firewall rules have logging enabled. The rule is NON_COMPLIANT if the logging for a specific action (such as 'allowed' or 'denied') is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_vpc_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2234",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to publish logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log publishing configured.",
    "function_name": "sql_mysql_instance_log_publishing_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2235",
    "description": "Checks if the respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2236",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled_to_specified_bucket",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2237",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2238",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2239",
    "description": "Checks if logging is enabled for your Google Cloud Storage (GCS) buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2240",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2241",
    "description": "Checks if Google Cloud VPC flow logs are found and enabled for all Google Cloud VPC networks. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC network.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2242",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the expected value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2243",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2244",
    "description": "Checks if Google Cloud Endpoints has access logging enabled. The rule is NON_COMPLIANT if 'accessLogs' is not present in the Endpoints configuration.",
    "function_name": "endpoints_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2245",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logging level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2246",
    "description": "Checks if Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_tracing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service_client.projects().services().getConfig(name='services/service_name').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2247",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or the logging level is neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled_error_or_all",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2248",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if Load Balancer Desync mitigation mode does not match with user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2249",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2250",
    "description": "Checks if at least one Google Cloud Audit Log is logging Google Cloud Storage (GCS) data events for all GCS buckets. The rule is NON_COMPLIANT if there are no audit logs recording GCS data events.",
    "function_name": "logging_auditlog_gcs_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2251",
    "description": "Equivalent rule in GCP for CLOUD_TRAIL_ENABLED is to ensure that 'Cloud Audit Logging' is enabled for projects, as it provides similar audit logging capabilities.",
    "function_name": "logging_project_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2252",
    "description": "Checks if a Google Cloud Build trigger has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_log_option_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2253",
    "description": "Checks if logging is enabled with a valid severity level for GCP Cloud SQL database instances. The rule is NON_COMPLIANT if logging is not enabled or Cloud SQL instance logging has a severity level that is not valid.",
    "function_name": "sql_instance_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2254",
    "description": "Checks if a Google Cloud Firestore instance has logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have logging enabled for audit logs.",
    "function_name": "firestore_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2255",
    "description": "Checks if Google Cloud Platform (GCP) VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'loggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2256",
    "description": "Checks if Logging Configuration is set on active Cloud Run services. This rule is NON_COMPLIANT if an active Cloud Run service does not have Logging Configuration defined or the value for Logging Configuration is null in at least one revision.",
    "function_name": "cloudrun_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2257",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2258",
    "description": "Checks if Google App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the services are not set to enable logging.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app_id', servicesId='service_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2259",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging configuration is disabled or the log bucket does not match the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2260",
    "description": "Checks if Google Cloud Pub/Sub has audit logging enabled. The rule is NON_COMPLIANT if a Pub/Sub topic does not have audit logging enabled.",
    "function_name": "logging_pubsub_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='project', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2261",
    "description": "Checks if a Cloud Pub/Sub topic has Stackdriver Logging enabled. The rule is NON_COMPLIANT if the topic does not have logging enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().topics().get(name='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2262",
    "description": "The GCP equivalent for enabling multi-region logging is to utilize Google Cloud's Stackdriver Logging in a multi-region configuration. This enhances the visibility and tracking of logs across different regions, similar to AWS CloudTrail's functionality for multi-region tracking.",
    "function_name": "logging_cloud_logging_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2263",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver Logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver Logging enabled for audit logs.",
    "function_name": "spanner_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='projects/my-project', sinkName='my-sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2264",
    "description": "Checks if Google Cloud Firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured for the firewall rules. You can specify which logging type (e.g., 'log all', 'log denied') you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2265",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export audit logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log exporting configured.",
    "function_name": "sql_mysql_audit_logs_export_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2266",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types (such as general log, slow query log, or error log) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2267",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2268",
    "description": "Checks if Google Cloud BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2269",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2270",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2271",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2272",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2273",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the value of the parameter.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2274",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2275",
    "description": "Checks if a GCP Backup resource (using Cloud Storage or native backup services) has an attached IAM policy that prevents deletion of backups. The rule is NON_COMPLIANT if the Backup resource does not have IAM policies or has policies without a suitable 'Deny' statement (for permissions like storage.objects.delete or any equivalent for protecting backup data).",
    "function_name": "storage_backup_iam_policy_protect_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2276",
    "description": "Checks that there is at least one Google Cloud Audit Logging service enabled with security best practices. This rule is COMPLIANT if there is at least one audit log that meets all necessary security configurations.",
    "function_name": "logging_audit_logs_security_best_practices",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2277",
    "description": "Checks if Google Cloud Logging Log Buckets are encrypted with a customer-managed encryption key (CMEK) or a specified key. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a CMEK or is encrypted with a key not supplied in the rule parameter.",
    "function_name": "logging_log_buckets_cmek_encrypted",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/my-location/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2278",
    "description": "Checks if Google Cloud Audit Logs is configured to use Customer-managed encryption keys (CMEK). The rule is COMPLIANT if the encryption key is defined in the Cloud KMS service.",
    "function_name": "logging_audit_logs_cmek_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2279",
    "description": "Checks if Google Cloud Audit Logs has log integrity (signed digest) enabled. Google Cloud recommends that integrity validation must be enabled for all audit logs. The rule is NON_COMPLIANT if the validation is not enabled.",
    "function_name": "logging_audit_logs_integrity_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2280",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) migration jobs are publicly accessible. The rule is NON_COMPLIANT if the 'publiclyAccessible' field is set to true.",
    "function_name": "dms_migration_jobs_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2281",
    "description": "Checks if Google Cloud Firestore database backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore database backups are public.",
    "function_name": "firestore_backup_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2282",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots are shared with 'allUsers', meaning Google Cloud snapshots are public.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2283",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the PodSpec is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2284",
    "description": "Checks if Google Cloud Filestore access instances are configured to enforce a root directory. The rule is NON_COMPLIANT if the root path is set to '/' (default root directory of the file system).",
    "function_name": "filestore_instance_enforce_root_directory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2285",
    "description": "Checks if Google Cloud Filestore access control configurations are set up to enforce an identity by ensuring that user permissions are properly defined. The rule is NON_COMPLIANT if permissions are not defined or if provided parameters do not match access control requirements.",
    "function_name": "filestore_access_control_enforce_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.instances().get(project='proj', location='location', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2286",
    "description": "Checks if a Google Cloud account has VPC firewall rules configured to block public access. The rule is NON_COMPLIANT if there are firewall rules allowing ingress traffic from 0.0.0.0/0 on ports other than port 22.",
    "function_name": "network_firewall_block_public_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2287",
    "description": "Checks if the Google Cloud Function IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "iam_cloud_function_policy_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/us-central1/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2288",
    "description": "Checks if a Google Cloud SQL for PostgreSQL or MySQL manual database snapshot is public. The rule is NON_COMPLIANT if any existing and new Cloud SQL database snapshot is public.",
    "function_name": "sql_database_snapshot_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2289",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration.requireSsl' field is false.",
    "function_name": "sql_instances_ssl_required",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2290",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2291",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset has 'access' permissions with 'role' set to 'roles/viewer' for 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2292",
    "description": "Checks if Google Cloud Storage buckets have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for Cloud Storage buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2293",
    "description": "Verifies if the required public access prevention settings are configured at the project level. The compliance rule is considered NON_COMPLIANT when the specified fields do not align with the configuration settings in the Google Cloud resource.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2294",
    "description": "Checks if the required IAM policies or organization policies are configured at the project or organization level. The rule is NON_COMPLIANT if the configuration item does not align with the expected policies for public access.",
    "function_name": "iam_project_organization_policy_public_access_restricted",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2295",
    "description": "Checks if Google Cloud Storage (GCS) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and the uniform bucket-level access is disabled (allowing public access).",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2296",
    "description": "Checks if Object Versioning is enabled in Google Cloud Storage (GCS) buckets. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2297",
    "description": "Checks if your Google Cloud Storage buckets do not allow public access. The rule checks the Uniform Resource Identifier (URI) access control settings, IAM policies, and the bucket ACL.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2298",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, bucket policy, and bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2299",
    "description": "Checks if direct internet access is disabled for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2300",
    "description": "Checks if Google Cloud Documents (specifically, Cloud Storage buckets or Pub/Sub topics) owned by the account are public. The rule is NON_COMPLIANT if Cloud Storage buckets or Pub/Sub topics with the owner 'Self' are publicly accessible.",
    "function_name": "storage_buckets_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2301",
    "description": "Checks if Google Cloud SQL instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Cloud SQL instance is not protected by a backup plan.",
    "function_name": "sql_instance_backup_plan_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2302",
    "description": "Checks if a backup policy has a backup rule that meets the required frequency and retention duration. The rule is NON_COMPLIANT if recovery snapshots are not created at least as frequently as the specified schedule or expire before the designated retention period.",
    "function_name": "compute_disks_backup_policy_frequency_retention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2303",
    "description": "Verifies that a backup or snapshot's retention policy for a Google Cloud Platform (GCP) resource, such as a Cloud Storage bucket or Compute Engine snapshot, meets the specified minimum retention period. If a backup's retention point is less than the required retention period, the rule is considered NON_COMPLIANT.",
    "function_name": "storage_bucket_retention_policy_minimum_period",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2304",
    "description": "Checks that there is at least one Google Cloud Audit Log enabled with security best practices. This rule is COMPLIANT if there is at least one log that meets all of the following security configurations.",
    "function_name": "logging_auditlog_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2305",
    "description": "Checks if Google Cloud Logging Log Buckets are encrypted with Google Cloud KMS keys. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "function_name": "logging_log_buckets_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/project-id/locations/location-id/buckets/bucket-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2306",
    "description": "Checks if Google Cloud Audit Logging is configured to use Google Cloud Key Management Service (Cloud KMS) for encryption. The rule is COMPLIANT if the KmsKeyId is defined.",
    "function_name": "logging_audit_logging_kms_encryption_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2307",
    "description": "Checks if Google Cloud Audit Logs allows for log ingestion integrity verification. Google Cloud recommends that log integrity check should be enabled for all audit logs. The rule is NON_COMPLIANT if integrity verification is not enabled.",
    "function_name": "logging_audit_logs_integrity_verification_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2308",
    "description": "Checks if Cloud SQL instances have automated backups enabled. Optionally, the rule checks the backup retention period and the backup window.",
    "function_name": "sql_instances_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2309",
    "description": "Checks whether Google Cloud Firestore collections are included in Google Cloud Backup plans. The rule is NON_COMPLIANT if Google Cloud Firestore collections are not present in any Google Cloud Backup plan.",
    "function_name": "firestore_collections_backup_inclusion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2310",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore collections. The rule is NON_COMPLIANT if PITR is not enabled for Firestore collections.",
    "function_name": "firestore_collections_pitr_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.collection('collection_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2311",
    "description": "Checks if Google Cloud Firestore collections are protected by a backup plan. The rule is NON_COMPLIANT if the Firestore collection is not covered by a backup plan.",
    "function_name": "firestore_collection_backup_plan_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2312",
    "description": "Check if Google Cloud Persistent Disk snapshots are included in Google Cloud Backup plans. The rule is NON_COMPLIANT if Google Cloud Persistent Disk snapshots are not included in backup plans.",
    "function_name": "compute_disk_snapshots_included_in_backup_plans",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2313",
    "description": "Checks if Google Persistent Disks are protected by a backup plan. The rule is NON_COMPLIANT if the Google Persistent Disk is not covered by a backup plan.",
    "function_name": "compute_disk_backup_plan_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2314",
    "description": "Checks if Google Compute Engine (GCE) instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Compute Engine instance is not covered by a backup plan.",
    "function_name": "compute_instance_backup_plan_coverage",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2315",
    "description": "Checks if Google Cloud Filestore instances are included in the backup plans of Google Cloud Backup. The rule is NON_COMPLIANT if Filestore instances are not included in the backup plans.",
    "function_name": "filestore_instance_backup_inclusion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2316",
    "description": "Checks if Google Cloud Filestore instances are protected by a backup plan. The rule is NON_COMPLIANT if the Filestore instance is not covered by a backup plan.",
    "function_name": "filestore_instance_backup_plan_ensured",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2317",
    "description": "Check if the Google Cloud Memorystore for Redis instances have automatic backup turned on. The rule is NON_COMPLIANT if the Redis instance backup frequency is less than the specified retention period. For example: If the parameter is 15 days, then the rule is non-compliant if the backup frequency is set to less than 15 days.",
    "function_name": "memorystore_redis_backup_frequency_meets_retention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2318",
    "description": "Checks if Google Cloud Filestore instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Cloud Filestore instance is not covered by a backup plan.",
    "function_name": "filestore_instance_backup_plan_ensured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2319",
    "description": "Checks if a Google Cloud SQL instance retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "sql_instance_retention_period_compliant",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2320",
    "description": "Checks if Google Cloud SQL databases are present in Google Cloud Backup plans. The rule is NON_COMPLIANT if Google Cloud SQL databases are not included in any Google Cloud Backup plan.",
    "function_name": "sql_databases_included_in_backup_plans",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2321",
    "description": "Checks if Google Cloud SQL instances are protected by a backup plan. The rule is NON_COMPLIANT if the Google Cloud SQL Database instance is not covered by a backup plan.",
    "function_name": "sql_instance_backup_plan_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2322",
    "description": "Checks that Google Cloud BigQuery automated snapshots are enabled for datasets. The rule is NON_COMPLIANT if the value for snapshot retention period is greater than MaxRetentionPeriod or less than MinRetentionPeriod or the value is 0.",
    "function_name": "bigquery_dataset_automated_snapshots_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2323",
    "description": "Checks if GCS (Google Cloud Storage) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2324",
    "description": "Checks if Google Cloud Storage (GCS) buckets are protected by a backup plan. The rule is NON_COMPLIANT if the GCS bucket is not covered by a backup plan.",
    "function_name": "storage_bucket_backup_plan_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2325",
    "description": "Checks if a Google Cloud CDN (Content Delivery Network) distribution with Google Cloud Storage as the origin has an authorized service account configured. The rule is NON_COMPLIANT if the CDN distribution is backed by Google Cloud Storage and the origin service account is not configured correctly, or the origin is not a Google Cloud Storage bucket.",
    "function_name": "network_cdn_distribution_authorized_service_account",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2326",
    "description": "Checks if a Google Cloud CDN service with a Google Cloud Storage origin has signed URLs enabled. The rule is NON_COMPLIANT for Cloud CDN services with Google Cloud Storage origins that don't have signed URLs enabled.",
    "function_name": "network_cdn_signed_urls_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2327",
    "description": "Checks that there is at least one Google Cloud Audit Log configured with security best practices. This rule is COMPLIANT if there is at least one log that meets all of the following standards.",
    "function_name": "logging_auditlog_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2328",
    "description": "Checks if Google Cloud Logging (formerly Stackdriver Logging) Logs are encrypted with Google-managed or customer-managed encryption keys. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a KMS key or is encrypted with a KMS key not specified in the rule parameter.",
    "function_name": "logging_log_bucket_encryption_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/project-id/locations/location-id/buckets/bucket-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2329",
    "description": "Checks if Google Cloud Audit Logs is configured to use Customer-managed encryption keys (Cmek) for logs. The rule is COMPLIANT if the kmsKeyName is defined.",
    "function_name": "logging_auditlogs_cmek_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2330",
    "description": "Checks if Google Cloud Audit Logs have integrity checking enabled. Google Cloud recommends that integrity checking must be enabled for all logs. The rule is NON_COMPLIANT if the integrity checking is not enabled.",
    "function_name": "logging_audit_logs_integrity_checking_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2331",
    "description": "Checks if the Cloud Storage bucket has Object Versioning enabled, by default. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2332",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket-level settings are public.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2333",
    "description": "Checks if versioning is enabled for your Google Cloud Storage buckets. Optionally, the rule checks if Object Versioning with minimum retention policies is configured for your buckets.",
    "function_name": "storage_bucket_versioning_enabled_minimum_retention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2334",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2335",
    "description": "Checks if a resource type has a Google Cloud Monitoring alerting policy for the specified metric. For resource types, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or persistent disks. The rule is COMPLIANT if the specified metric has a resource ID and an associated alerting policy.",
    "function_name": "monitoring_resource_alerting_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2336",
    "description": "Checks if Google Cloud Audit Logs are configured to export logs to Google Cloud Storage. The audit configuration is NON_COMPLIANT if the export destination for logs is empty.",
    "function_name": "logging_auditlogs_export_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2337",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_monitoring_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2338",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a GCP project. The rule is NON_COMPLIANT if Google Cloud SCC is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "securitycenter_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2339",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2340",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'monitoringConfig.enabled' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2341",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud API Gateway. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "apigateway_tracing_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2342",
    "description": "Checks if a resource type has a Cloud Monitoring alerting policy for the specified metric. For resource types, you can specify Google Compute Engine instances, Google Kubernetes Engine clusters, Cloud SQL instances, or Google Cloud Storage buckets. The rule is COMPLIANT if the specified metric has a resource ID and a corresponding alerting policy.",
    "function_name": "monitoring_resource_alerting_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2343",
    "description": "Checks if Stackdriver Monitoring (now known as Cloud Monitoring) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2344",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "securitycenter_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2345",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2346",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'visible' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2347",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "service_client.projects().services().getConfig(name='services/service_name').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2348",
    "description": "Checks if Google Cloud Monitoring (formerly Stackdriver Monitoring) alert policies have an action configured for the 'ALERTING', 'NO_DATA', or 'CLOSED' state. Optionally checks if any actions match a named notification channel. The rule is NON_COMPLIANT if there is no action specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2349",
    "description": "Checks if a resource type has a Cloud Monitoring alert policy for the specified metric. For resource types, you can specify Google Compute Engine instances, Google Cloud Storage buckets, or Google SQL instances. The rule is COMPLIANT if the named metric has a resource ID and a Cloud Monitoring alert policy.",
    "function_name": "monitoring_alert_policy_exists_for_metric",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2350",
    "description": "Checks if Stackdriver monitoring (now known as Google Cloud Operations suite) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "compute_instance_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2351",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a GCP Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2352",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2353",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'monitoringEnabled' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2354",
    "description": "Checks if Google Cloud Monitoring alerting policies have a notification channel configured for the 'Triggered', 'Pending', or 'OK' state. Optionally checks if any notification channels match a specified resource name. The rule is NON_COMPLIANT if there is no notification channel specified for the alerting policy or optional parameter.",
    "function_name": "monitoring_alerting_policy_notification_channel_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2355",
    "description": "Verifies if a Google Cloud Platform (GCP) backup plan has a backup policy that meets the required frequency and retention period. The policy is deemed NON_COMPLIANT if recovery points are not created as often as the specified frequency or if they expire before the specified retention period.",
    "function_name": "compute_backup_plan_policy_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2356",
    "description": "Checks if a backup retention policy in Google Cloud Storage or Google Cloud Backup expires no earlier than after the specified period. The rule is NON_COMPLIANT if the backup has a retention policy that is less than the required retention period.",
    "function_name": "storage_backup_retention_policy_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2357",
    "description": "Checks that there is at least one Google Cloud Audit log configuration defined with security best practices. This rule is COMPLIANT if there is at least one log configuration that meets all of the following: logging is enabled for all services and appropriate IAM policies are applied.",
    "function_name": "logging_auditlog_configuration_compliant",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2358",
    "description": "Checks if a Google Cloud Logging Log Bucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_log_bucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/project-id/locations/location-id/buckets/bucket-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2359",
    "description": "Checks if a Google Cloud Firestore backup retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the specified value.",
    "function_name": "firestore_backup_retention_period_set",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().backups().get(name='backup_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2360",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore databases. The rule is NON_COMPLIANT if PITR is not enabled for Firestore databases.",
    "function_name": "firestore_database_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2361",
    "description": "Checks if Persistent Disks are attached to Google Compute Engine instances. Optionally checks if Persistent Disks are set to be deleted when their associated instance is terminated.",
    "function_name": "compute_disk_attachment_and_auto_delete",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2362",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "container.projects().locations().repositories().getIamPolicy(resource='projects/my-project/locations/global/repositories/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2363",
    "description": "Checks if Google Cloud Search domains (using Google Cloud's managed search services) are configured to send logs to Google Cloud Logging. The rule is COMPLIANT if logging is enabled for a Google Cloud Search domain. This rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "logging_cloud_search_domain_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2364",
    "description": "Checks if Google Cloud Elasticsearch Service (GCP's equivalent to Amazon OpenSearch Service) has audit logging enabled. The rule is NON_COMPLIANT if an Elasticsearch Service domain does not have audit logging enabled.",
    "function_name": "logging_elasticsearch_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2365",
    "description": "Checks if Google Cloud Elasticsearch clusters are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "dataproc_clusters_logging_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2366",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match the specified parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_rules()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2367",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have lifecycle policies configured. The rule is NON_COMPLIANT if GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2368",
    "description": "Checks if Google Cloud API Gateway has access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in the API Gateway configuration.",
    "function_name": "apigateway_configuration_access_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2369",
    "description": "Checks if all methods in Google Cloud API Gateway configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if loggingLevel is neither ERROR nor INFO.",
    "function_name": "apigateway_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2370",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(project='proj', service='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2371",
    "description": "Checks if a Google Cloud Platform (GCP) Cloud Endpoints API has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if 'logLevel' is neither ERROR nor ALL.",
    "function_name": "endpoints_api_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().getIamPolicy(resource='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2372",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers are configured with a user-defined security policy to mitigate desynchronization attacks. The rule is NON_COMPLIANT if the HTTP(S) Load Balancer's security policy does not match the user-defined security policy.",
    "function_name": "network_https_load_balancer_security_policy_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2373",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2374",
    "description": "Checks if at least one Google Cloud Audit Log is logging Cloud Storage data access events for all Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs recording Cloud Storage data access events.",
    "function_name": "logging_auditlog_data_access_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2375",
    "description": "Checks if Google Cloud Monitoring alerting policies have notification channels configured for the ALERTING, PENDING, or OK state. Optionally checks if any notification channels match a named channel ID. The rule is NON_COMPLIANT if there is no notification channel specified for the alerting policy or optional parameter.",
    "function_name": "monitoring_alerting_policy_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2376",
    "description": "Checks if a resource type has a Stackdriver Monitoring alerting policy for the specified metric. For resource type, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the specified metric has a resource ID and Stackdriver alerting policy.",
    "function_name": "monitoring_resource_alerting_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2377",
    "description": "This rule checks if Cloud Audit Logs are enabled in GCP, which is equivalent to the AWS rule for ensuring that CloudTrail is enabled. The main service involved is Cloud Logging.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2378",
    "description": "Checks if a Google Cloud Build trigger has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_trigger_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2379",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud SQL database replication events. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "sql_replication_logging_severity_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(filter='resource.type=\"cloudsql_database\" AND logName=\"projects/my-project/logs/cloudsql.googleapis.com%2Freplication\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2380",
    "description": "Checks if a Google Cloud Firestore instance has Cloud Logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Cloud Logging enabled for audit logs.",
    "function_name": "firestore_instance_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2381",
    "description": "Checks if GCP Cloud VPN has logging enabled for its tunnels. The rule is NON_COMPLIANT if 'logConfig.loggingEnabled' is set to false.",
    "function_name": "network_vpn_tunnel_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2382",
    "description": "Checks if 'Stackdriver Monitoring' is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2383",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the Pod security context is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2384",
    "description": "Checks if logging configuration is set on active Google Kubernetes Engine (GKE) deployments. This rule is NON_COMPLIANT if an active GKE deployment does not have logging enabled or the logging configuration is null in at least one container definition.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2385",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2386",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "app_engine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2387",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or the log bucket does not match the specified bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2388",
    "description": "Verifies if IAM users are part of at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2389",
    "description": "Checks if Google Cloud Pub/Sub has logs enabled for audit logging. The rule is NON_COMPLIANT if Pub/Sub does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2390",
    "description": "Checks if a Google Cloud Pub/Sub topic has audit logging enabled. The rule is NON_COMPLIANT if the topic does not have audit logging enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2391",
    "description": "The GCP equivalent for the rule identifier MULTI_REGION_CLOUD_TRAIL_ENABLED in the context of multi-region logging is to ensure that audit logs for services are enabled across multiple regions. This ensures that logs are available for compliance and monitoring across geographic boundaries.",
    "function_name": "logging_audit_logs_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2392",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2393",
    "description": "Checks if Google Cloud Platform (GCP) VPC firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured. You can specify which logging option you want the rule to check.",
    "function_name": "network_vpc_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2394",
    "description": "Checks if Google Cloud Search instances have fine-grained access control enabled. The rule is NON_COMPLIANT if Access Control settings are not properly configured for the Cloud Search instance.",
    "function_name": "cloudsearch_instance_fine_grained_access_control_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.indexing().datasources().get(name='datasource_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2395",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to enable Cloud Audit Logs. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing enabled.",
    "function_name": "sql_mysql_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2396",
    "description": "Checks if respective logs of Google Cloud SQL are enabled. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2397",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_datasets_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2398",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if it is encrypted with another key, or if dataset audit logging is not enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2399",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS public managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS public managed zones.",
    "function_name": "dns_public_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2400",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.objects.get and storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2401",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2402",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2403",
    "description": "Checks if Google Cloud Security Command Center is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2404",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2405",
    "description": "Checks if Google Cloud Workflow has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration does not meet the minimum requirements.",
    "function_name": "workflows_logging_configuration_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2406",
    "description": "Checks if Google Cloud Virtual Private Cloud (Google Cloud VPC) flow logs are found and enabled for all Google Cloud VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one Google Cloud VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2407",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the specified parameter value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2408",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The policy is NON_COMPLIANT if the 'logConfig.enable' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2409",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2410",
    "description": "Checks if Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='projects/proj/services/service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2411",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications",
    "service_category": "Deployment Manager",
    "confidence": 9,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2412",
    "description": "Checks if Google Cloud Monitoring alerting policies have notifications configured for various states (triggered, pending notification, and resolved). Optionally checks if any notifications match a specified topic. The rule is NON_COMPLIANT if there are no notifications specified for the alerting policy or the optional parameter.",
    "function_name": "monitoring_alerting_policy_notifications_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2413",
    "description": "Checks if a resource type has a Cloud Monitoring alert for the named metric. For resource type, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the named metric has a resource ID and Cloud Monitoring alert.",
    "function_name": "monitoring_resource_metric_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2414",
    "description": "Checks if Stackdriver Monitoring (now Google Cloud Monitoring) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_monitoring_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/disk/write_bytes_count\"', interval=interval)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2415",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled for a Google Cloud Platform (GCP) project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2416",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2417",
    "description": "Checks if Google Cloud's monitoring for the Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'enableMetrics' field is set to false.",
    "function_name": "security_cloud_armor_metrics_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2418",
    "description": "Checks if Google Cloud Trace is enabled for Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2419",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2420",
    "description": "Checks if Google Cloud Monitoring alert policies have notification channels configured for the ALARM, NO_DATA, or OK state. Optionally checks if any notification channels match a specified resource name. The rule is NON_COMPLIANT if there is no notification channel specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2421",
    "description": "Checks if a resource type has a Cloud Monitoring alert policy for the specified metric. For resource type, you can specify Google Cloud Storage buckets, Compute Engine instances, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the specified metric has a resource ID and a Cloud Monitoring alert policy.",
    "function_name": "monitoring_alert_policy_exists_for_metric",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2422",
    "description": "Checks if Stackdriver Monitoring (now part of Google Cloud Operations Suite) is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if detailed monitoring is not enabled.",
    "function_name": "monitoring_compute_engine_detailed_monitoring_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2423",
    "description": "Checks if Google Cloud Security Command Center is enabled for a GCP Project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2424",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for message delivery status. The rule is NON_COMPLIANT if delivery status notifications for messages are not enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2425",
    "description": "Checks if Google Cloud Monitoring security metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'enableMonitoring' field is set to false.",
    "function_name": "monitoring_cloud_armor_security_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2426",
    "description": "Check if specified applications are installed on a Compute Engine instance, with an option to specify minimum versions and platforms.",
    "function_name": "compute_instance_application_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2427",
    "description": "Checks if the compliance status of Google Cloud OS Config patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the Compute Engine instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_os_config_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2428",
    "description": "Checks if a private Google Container Registry (GCR) repository has vulnerability scanning enabled. The rule is NON_COMPLIANT if the private GCR repository's scan frequency is not set to scan on push or continuous scan. For more information on enabling vulnerability scanning, see Vulnerability scanning in the Google Container Registry documentation.",
    "function_name": "container_registry_vulnerability_scanning_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2429",
    "description": "Verifies if the specified applications are installed on a Google Cloud instance, with the option to define the minimum acceptable version and restrict the rule to specific platforms (e.g., Linux, Windows).",
    "function_name": "compute_instance_application_version_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2430",
    "description": "Checks if the compliance status of the Google Cloud OS Config patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_os_config_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2431",
    "description": "Checks if a private Google Container Registry (GCR) repository has vulnerability scanning enabled. The rule is NON_COMPLIANT if the private GCR repository's scan frequency is not set to scan on push or continuous scan. For more information on enabling image vulnerability scanning, see Container Analysis API documentation.",
    "function_name": "container_registry_vulnerability_scanning_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2432",
    "description": "Checks if all of the specified applications are installed on the Google Compute Engine instance. Optionally, specify the minimum acceptable version. You can also specify the platform to apply the rule only to instances running that platform.",
    "function_name": "compute_instance_application_installed_version_platform",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2433",
    "description": "Checks if the compliance status of Google Cloud's OS Config patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation on the instance. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_os_config_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2434",
    "description": "Checks if a private Google Container Registry (GCR) repository has vulnerability scanning enabled. The rule is NON_COMPLIANT if the private GCR repository's scan setting is not set to either scan on push or continuous scanning. For more information on enabling vulnerability scanning, see the Google Cloud documentation for Container Analysis.",
    "function_name": "container_registry_vulnerability_scanning_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2435",
    "description": "Checks whether a Google Cloud Load Balancer or Cloud CDN has Google Cloud Armor protection. It also checks if they have Security Policies associated for Google Cloud Load Balancer and Cloud CDN.",
    "function_name": "network_load_balancer_cloud_armor_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2436",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled in your Google Cloud account and project. If you provide a GCP project for centralization, the rule evaluates the SCC results in the centralized project. The rule is COMPLIANT when SCC is enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/my-project/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2437",
    "description": "Checks whether a Google Cloud Load Balancer or Cloud CDN has Google Cloud Armor protection. It also checks if they have security policies associated for Google Cloud Load Balancer and Cloud CDN.",
    "function_name": "network_load_balancer_cdn_armor_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2438",
    "description": "Checks if Google Cloud Security Command Center (SCC) is enabled in your GCP project. The rule evaluates the SCC results in the specified GCP project. The rule is COMPLIANT when Security Command Center is enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2439",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2440",
    "description": "Checks if Google Cloud Monitoring Uptime Checks have an alerting policy configured for the HEALTHY, UNHEALTHY, or DISABLED state. Optionally checks if any actions match a specific notification channel. The rule is NON_COMPLIANT if there is no action specified for the alerting policy or optional parameter.",
    "function_name": "monitoring_uptime_checks_alerting_policy_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2441",
    "description": "Checks whether Google Cloud Monitoring alerts with the given metric name have the specified settings.",
    "function_name": "monitoring_alerts_metric_settings_compliance",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2442",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Google Cloud Logging. The audit log configuration is NON_COMPLIANT if the log sink is not set up or does not route logs correctly.",
    "function_name": "logging_audit_logs_configured_to_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2443",
    "description": "Checks if Google Cloud Storage Object Change Notifications are enabled on a Cloud Storage bucket. The rule is NON_COMPLIANT if Cloud Storage Object Change Notifications are not set on a bucket, or if the notification type or destination do not match the event types and destination fields.",
    "function_name": "storage_bucket_object_change_notifications_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).notification()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2444",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for message delivery status of notifications sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2445",
    "description": "Checks if your Google Cloud Deployment Manager templates send notifications to a Google Cloud Pub/Sub topic. The rule is NON_COMPLIANT if Deployment Manager templates do not send notifications.",
    "function_name": "deploymentmanager_templates_pubsub_notifications_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2446",
    "description": "Checks if Google Cloud Monitoring alert policies have an action configured for the ALERT, NO_DATA, or OK state. Optionally checks if any actions match a specified notification channel. The rule is NON_COMPLIANT if there is no action specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2447",
    "description": "Checks whether Google Cloud Monitoring alerting policies with the given metric type have the specified settings.",
    "function_name": "monitoring_alerting_policy_metric_settings",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2448",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Cloud Logging. The audit log configuration is NON_COMPLIANT if the corresponding sink is not creating logs in Cloud Logging.",
    "function_name": "logging_audit_logs_configured_to_cloud_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2449",
    "description": "Checks if Google Cloud Storage (GCS) Notifications are enabled on a GCS bucket. The rule is NON_COMPLIANT if GCS Notifications are not set on a bucket, or if the event type or destination do not match the defined event types and notification destination.",
    "function_name": "storage_bucket_notifications_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2450",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of notification messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_logging_delivery_status_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2451",
    "description": "Checks if your Google Cloud Deployment Manager templates send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Google Cloud Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager templates do not send notifications.",
    "function_name": "deploymentmanager_templates_pubsub_notifications",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2452",
    "description": "Checks if Google Cloud Monitoring alerts have an action configured for the ALERT, NO_DATA, or OK state. Optionally checks if any actions match a named notification channel. The rule is NON_COMPLIANT if there is no action specified for the alert or optional parameter.",
    "function_name": "monitoring_alerts_action_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2453",
    "description": "Checks whether Google Cloud Monitoring alert policies with the given metric type have the specified settings.",
    "function_name": "monitoring_alert_policy_metric_settings",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2454",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Google Cloud Logging. The audit log is NON_COMPLIANT if the log sink is not configured to export logs to Cloud Logging.",
    "function_name": "logging_audit_logs_configured_for_cloud_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2455",
    "description": "Checks if Google Cloud Storage Notifications are enabled on a Cloud Storage bucket. The rule is NON_COMPLIANT if Cloud Storage Notifications are not set on a bucket, or if the event type or destination do not match the specified eventTypes and destination parameters.",
    "function_name": "storage_bucket_notifications_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2456",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for message delivery status notifications sent to a topic for the endpoints. The rule is NON_COMPLIANT if the delivery status notifications for messages are not enabled.",
    "function_name": "pubsub_topic_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2457",
    "description": "Checks if Google Cloud Resource Manager shares projects with an organization when integration is enabled with Cloud Identity. The rule is NON_COMPLIANT if the project is shared with individual users rather than the organization.",
    "function_name": "resource_manager_project_organization_sharing",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm.projects().getIamPolicy(resource='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2458",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP load balancers. The rule is NON_COMPLIANT if one or more HTTP load balancers do not have HTTP to HTTPS redirection configured, or if one or more HTTP load balancers have forwarding to an HTTP backend instead of redirection.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().list(project='proj', region='region')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2459",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN configuration if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_no_deprecated_ssl_protocols",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2460",
    "description": "Checks if Google Cloud CDN backends are using a minimum security policy and cipher suite of TLSv1.2 or greater for viewer connections. This rule is NON_COMPLIANT for a Cloud CDN backend if the minimumProtocolVersion is below TLSv1.2.",
    "function_name": "network_cdn_backend_tls_minimum_protocol_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='backend')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2461",
    "description": "Checks if Google Cloud CDN services are using a custom SSL certificate and are configured to use SNI to serve HTTPS requests. The rule is NON_COMPLIANT if a custom SSL certificate is associated but the SSL support method is a dedicated IP address.",
    "function_name": "network_cdn_ssl_sni_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2462",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'OriginProtocolPolicy' is set to 'HTTP_ONLY' or if 'OriginProtocolPolicy' is set to 'match-viewer' and 'ViewerProtocolPolicy' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_origin_protocol_encryption",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2463",
    "description": "Checks if your Google Cloud CDN configurations use HTTPS for serving content. The rule is NON_COMPLIANT if the value of 'enableBackendService' is set to 'true' without enforcing HTTPS for backend services.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2464",
    "description": "Check if Google Cloud Search nodes are encrypted end to end. The rule is NON_COMPLIANT if node-to-node encryption is not enabled on the service.",
    "function_name": "compute_cloud_search_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2465",
    "description": "Checks whether your Google Cloud Load Balancer SSL proxies are using a custom SSL policy. The rule is only applicable if there are SSL proxies for the Load Balancer.",
    "function_name": "network_load_balancer_ssl_proxies_custom_ssl_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2466",
    "description": "Checks if your Google Cloud Load Balancer SSL certificates use a predefined policy. The rule is NON_COMPLIANT if the Google Cloud Load Balancer's HTTPS/SSL certificate policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_certificates_predefined_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2467",
    "description": "Checks if your Cloud Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2468",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if no security configuration is attached to the cluster or the security configuration does not meet the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2469",
    "description": "Checks whether connections to Google Cloud Elasticsearch clusters are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch cluster 'enableHttps' is not true or is true, and 'minimumTlsVersion' is not in 'tlsVersions'.",
    "function_name": "dataproc_cluster_https_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2470",
    "description": "Check if Google Cloud's Elasticsearch Service nodes are encrypted end-to-end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the Elasticsearch instance.",
    "function_name": "compute_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2471",
    "description": "Checks if Google BigQuery datasets require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any Google BigQuery dataset does not have encryption enabled for data in transit.",
    "function_name": "bigquery_datasets_encryption_in_transit_required",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2472",
    "description": "Checks if Cloud Storage buckets have policies that require requests to use HTTPS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_buckets_https_only_policy",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2473",
    "description": "Checks if a server created with Google Cloud Storage uses FTP for data transfer. The rule is NON_COMPLIANT if the server protocol for data transfer is FTP-enabled.",
    "function_name": "storage_server_protocol_ftp_disabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2474",
    "description": "Checks if Google Cloud Firewall rules allow unrestricted incoming traffic ('0.0.0.0/0' or '::/0') and verify if only authorized TCP or UDP connections on specified ports are permitted. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_incoming_traffic_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2475",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP load balancers. The rule is NON_COMPLIANT if one or more HTTP load balancers do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP load balancers have forwarding to an HTTP load balancer instead of redirection.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().list(project='proj', region='region')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2476",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between edge locations and custom origins. This rule is NON_COMPLIANT for a Cloud CDN configuration if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_no_deprecated_ssl_protocols",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2477",
    "description": "Checks if Google Cloud CDN configurations are encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'originProtocol' is 'HTTP_ONLY' or if 'originProtocol' is 'MATCH_VIEWER' and 'viewerProtocol' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_encryption_to_custom_origins",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2478",
    "description": "Checks if your Google Cloud CDN configurations use HTTPS. The rule is NON_COMPLIANT if the value of 'enableHttp2' is set to 'true' while 'enableCaching' is set to 'true', but the backend service does not support HTTPS.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2479",
    "description": "Checks if your Google Cloud Firestore in Datastore mode has TLS enabled for secure connections. The rule is NON_COMPLIANT if Firestore is not encrypted by transport layer security (TLS).",
    "function_name": "firestore_datastore_tls_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2480",
    "description": "Checks if Google Cloud Database Migration service endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if Google Cloud Database Migration service does not have an SSL connection configured.",
    "function_name": "datamigration_endpoints_ssl_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2481",
    "description": "Checks if Google Cloud Database Migration Service endpoints for Redis data stores are enabled for TLS/SSL encryption of data communicated with other endpoints. The rule is NON_COMPLIANT if TLS/SSL encryption is not enabled.",
    "function_name": "datamigration_redis_tls_ssl_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2482",
    "description": "Checks if Google Cloud Memorystore (Redis) instances have encryption-in-transit enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transit_encryption_mode' is set to 'DISABLED'.",
    "function_name": "memorystore_redis_encryption_in_transit_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2483",
    "description": "Check if Google Cloud's Elasticsearch service (operated through Google Cloud Marketplace) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the Elasticsearch cluster.",
    "function_name": "marketplace_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2484",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers and does not check other types of load balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2485",
    "description": "Checks whether your Google Cloud Load Balancer SSL proxies are using a custom SSL policy. The rule is only applicable if there are SSL proxy listeners configured for the Load Balancer.",
    "function_name": "network_load_balancer_ssl_proxy_custom_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2486",
    "description": "Checks if your Google Cloud Platform (GCP) HTTPS Load Balancer SSL certificates are using a predefined policy. The rule is NON_COMPLIANT if the HTTPS Load Balancer SSL certificate's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_https_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2487",
    "description": "Checks if your Google Cloud Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2488",
    "description": "Checks if Google Cloud Dataproc clusters have IAM conditions enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_iam_conditions_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2489",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) for communication with the subscribers of the topic. The rule is NON_COMPLIANT if plain text communication is enabled for in-transit messages.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2490",
    "description": "Checks whether connections to Google Cloud Elasticsearch (GCP equivalent of OpenSearch) are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch domain 'enableHttps' is not 'true' or is 'true' and 'tlsPolicy' is not in the allowed TLS policies.",
    "function_name": "network_elasticsearch_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.elasticsearch().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2491",
    "description": "Check if Google Cloud's Elasticsearch on GCP (via Google Cloud Marketplace) has end-to-end encryption enabled. The rule is NON_COMPLIANT if the node-to-node encryption is not activated.",
    "function_name": "marketplace_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2492",
    "description": "Checks if Google BigQuery datasets require secure access (TLS/SSL encryption) for connections. The rule is NON_COMPLIANT if any Google BigQuery dataset does not enforce secure connections.",
    "function_name": "bigquery_datasets_enforce_secure_connections",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2493",
    "description": "Checks if Cloud Storage buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_policy_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2494",
    "description": "Checks if a backup plan in Google Cloud Platform has a backup policy that meets the necessary frequency and retention duration. The policy is NON_COMPLIANT if recovery snapshots are not taken with the required frequency or if they expire before the designated retention time.",
    "function_name": "compute_backup_plan_policy_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2495",
    "description": "Checks if a Cloud Storage object (recovery point) retains data for at least the specified retention period. The rule is NON_COMPLIANT if the object's retention policy is less than the required retention duration.",
    "function_name": "storage_object_retention_policy_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_blob('object_name').retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2496",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2497",
    "description": "Checks if a Google Cloud Firestore database retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2498",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore collections. The rule is NON_COMPLIANT if PITR is not enabled for Firestore collections.",
    "function_name": "firestore_collections_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2499",
    "description": "Checks if Persistent Disks are attached to Google Compute Engine instances. Optionally checks if Persistent Disks are set to delete on instance termination.",
    "function_name": "compute_persistent_disks_attached_delete_on_termination",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2500",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_gcr_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2501",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration or the configuration does not match the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2502",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have lifecycle policies configured. The rule is NON_COMPLIANT if the GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2503",
    "description": "Verifies if a backup policy has a backup job that meets the necessary schedule and retention criteria. The job is deemed NON_COMPLIANT if recovery snapshots are not created at least as frequently as defined by the schedule or if they expire before the defined retention period.",
    "function_name": "compute_disks_backup_policy_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2504",
    "description": "Checks if a recovery point expiration in Google Cloud Platform (GCP) meets the specified retention period requirements. The rule is NON_COMPLIANT if the recovery point has a retention period shorter than the required retention period, specifically for services like Google Cloud Storage or Google Cloud Backup and DR.",
    "function_name": "storage_recovery_point_retention_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2505",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_365_days",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2506",
    "description": "Checks if a Google Cloud Firestore database's retention policy is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_policy_days",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_id').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2507",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Cloud Firestore or Cloud Bigtable tables. The rule is NON_COMPLIANT if PITR is not enabled for these tables.",
    "function_name": "firestore_bigtable_tables_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2508",
    "description": "Checks if Persistent Disk volumes are attached to Compute Engine instances. Optionally checks if Persistent Disk volumes are configured to be deleted when an instance is terminated.",
    "function_name": "compute_disk_attached_and_auto_delete",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2509",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_gcr_repository_lifecycle_policy_configured",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "container.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2510",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_rules()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2511",
    "description": "Checks if Google Cloud Storage (GCS) version-enabled buckets have lifecycle management policies configured. The rule is NON_COMPLIANT if GCS lifecycle management policies are not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).lifecycle_rules"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2512",
    "description": "Checks if a backup plan has a backup rule that meets the required frequency and retention period in Google Cloud Platform (GCP). The rule is considered NON_COMPLIANT if recovery points are not created at least as frequently as the specified frequency or if they expire before the defined retention period.",
    "function_name": "compute_backup_plan_frequency_retention_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2513",
    "description": "Verifies that a backup in Google Cloud Storage does not expire before the specified retention period. The rule is NON_COMPLIANT if the backup's retention policy is set to less than the required retention period.",
    "function_name": "storage_bucket_retention_policy_enforced",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2514",
    "description": "Checks if a Google Cloud Logging Log Bucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_log_bucket_retention_period_greater_than_365_days",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2515",
    "description": "Checks if a Google Cloud Firestore database's retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('my_collection').document('my_document').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2516",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore databases. The rule is NON_COMPLIANT if PITR is not enabled for Firestore databases.",
    "function_name": "firestore_database_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2517",
    "description": "Checks if Persistent Disks are attached to Compute Engine instances. Optionally checks if Persistent Disks are set to delete on instance termination.",
    "function_name": "compute_disk_attached_to_instance_delete_on_termination",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2518",
    "description": "Checks if a private Google Container Registry (GCR) has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().getIamPolicy(resource='projects/my-project/locations/my-location/repositories/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2519",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage (GCS) bucket. The rule is NON_COMPLIANT if there is no active Object Lifecycle Management configuration or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2520",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have lifecycle policies configured. The rule is NON_COMPLIANT if GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_versioning_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2521",
    "description": "Verifies if a backup plan has a backup policy that meets the required frequency and retention period. The policy is NON_COMPLIANT if recovery points are not created at least as frequently as specified or are deleted before the required retention duration.",
    "function_name": "compute_backup_plan_frequency_and_retention_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2522",
    "description": "Checks if a backup in Cloud Storage or Persistent Disk has a retention period that meets or exceeds the specified duration. The rule is NON_COMPLIANT if the backup retention policy is shorter than required.",
    "function_name": "storage_backup_retention_policy_compliant",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2523",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_compliant",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/proj/locations/global/buckets/bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2524",
    "description": "Checks if a Google Cloud Firestore database's retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_id').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2525",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore. The rule is NON_COMPLIANT if PITR is not enabled for Firestore.",
    "function_name": "firestore_database_pitr_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2526",
    "description": "Checks if Persistent Disks are attached to Compute Engine instances. Optionally checks if Persistent Disks are set to be deleted when the instance is deleted.",
    "function_name": "compute_disk_attachment_persistent",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2527",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_registry_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container.projects().locations().repositories().getIamPolicy(resource='projects/my-project/locations/us-central1/repositories/my-repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2528",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage (GCS) bucket. The rule is NON_COMPLIANT if there are no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_rules()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2529",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have a lifecycle management policy configured. The rule is NON_COMPLIANT if GCS lifecycle policy is not enabled.",
    "function_name": "storage_bucket_lifecycle_policy_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2530",
    "description": "Verifies if a backup policy in GCP has a backup rule that meets the necessary frequency and retention criteria. The rule is deemed NON_COMPLIANT if recovery snapshots are not created at least as frequently as specified in the policy or if they expire before the established retention period.",
    "function_name": "compute_backup_policy_frequency_retention_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().list(project='proj', filter='creationTimestamp > start_time')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2531",
    "description": "Checks if a backup retention policy for Google Cloud Storage complies with the specified retention period. The rule is NON_COMPLIANT if the backup's retention setting is less than the required duration.",
    "function_name": "storage_bucket_backup_retention_policy_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2532",
    "description": "Checks if a Google Cloud Logging LogBucket retention period is set to greater than 365 days or a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_logbucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2533",
    "description": "Checks if a Google Cloud Firestore database retention period is set to a specific number of days. The rule is NON_COMPLIANT if the retention period is less than the value specified by the parameter.",
    "function_name": "firestore_database_retention_period_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('collection_name').document('document_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2534",
    "description": "Checks if point-in-time recovery (PITR) is enabled for Google Cloud Firestore or Cloud Spanner databases. The rule is NON_COMPLIANT if PITR is not enabled for Firestore or Spanner databases.",
    "function_name": "firestore_spanner_databases_pitr_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2535",
    "description": "Checks if Persistent Disks are attached to Compute Engine instances. Optionally checks if Persistent Disks are set to be deleted when the instance is terminated.",
    "function_name": "compute_persistent_disks_attached_and_auto_delete",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2536",
    "description": "Checks if a private Google Container Registry (GCR) repository has at least one lifecycle policy configured. The rule is NON_COMPLIANT if no lifecycle policy is configured for the GCR private repository.",
    "function_name": "container_gcr_repository_lifecycle_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().repositories().get(name='projects/proj/locations/location/repositories/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2537",
    "description": "Checks if a lifecycle rule is configured for a Google Cloud Storage bucket. The rule is NON_COMPLIANT if there is no active lifecycle configuration rules or the configuration does not match with the parameter values.",
    "function_name": "storage_bucket_lifecycle_rule_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_lifecycle_rules()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2538",
    "description": "Checks if Google Cloud Storage (GCS) buckets with versioning enabled have a retention policy configured. The rule is NON_COMPLIANT if GCS retention policy is not enabled.",
    "function_name": "storage_bucket_versioning_retention_policy_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).retention_policy"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2539",
    "description": "Checks if Google Cloud Platform (GCP) SSL Certificates are marked for expiration within the specified number of days. GCP manages SSL certificates through Google-managed SSL certificates which are automatically renewed; however, user-managed certificates need manual renewal. The rule is NON_COMPLIANT if your SSL certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2540",
    "description": "Checks if Google Cloud's Certificate Authority Service has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "certificate_authority_service_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_authority_service.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2541",
    "description": "Checks if a Cloud Endpoints API service uses a valid SSL certificate. The rule is NON_COMPLIANT if the API service does not have an associated SSL certificate enabled.",
    "function_name": "endpoints_api_ssl_certificate_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='projects/proj/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2542",
    "description": "Checks if the certificate associated with a Google Cloud CDN (Content Delivery Network) is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN distribution uses the default SSL certificate.",
    "function_name": "network_cdn_certificate_custom_ssl",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2543",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Certificate Manager or is configured with a certificate different from a Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_manager",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2544",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, an SSL or HTTPS listener must be configured with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers and does not apply to other types of load balancers in GCP.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2545",
    "description": "Checks if the managed Google Cloud IAM policies you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2546",
    "description": "Checks if the IAM policies attached to your GCP Service Accounts do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in a policy.",
    "function_name": "iam_service_accounts_restrict_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2547",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2548",
    "description": "Checks if Google Cloud Certificate Manager Certificates in your account are marked for expiration within the specified number of days. Certificates provided by Certificate Manager are automatically renewed if they are managed by Google Cloud. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2549",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2550",
    "description": "Checks if an API Gateway endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway endpoint does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2551",
    "description": "Checks if a Backup Vault in GCP has an attached resource-based policy that prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have resource-based policies or has policies lacking a suitable 'Deny' statement (statement with 'storage.objects.delete', 'storage.objects.update', and 'storage.buckets.setIamPolicy' permissions).",
    "function_name": "storage_backup_vault_prevent_deletion_policy",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2552",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN configuration uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_non_default",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2553",
    "description": "Checks if Google Cloud Database Migration Service (Google Cloud DMS) instances are public. The rule is NON_COMPLIANT if the 'public' field is set to true.",
    "function_name": "dms_instance_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2554",
    "description": "Checks if Google Cloud Firestore database backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore database backups are public.",
    "function_name": "firestore_backup_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2555",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots are shared with all users, indicating that Google Cloud Persistent Disk snapshots are public.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2556",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the ReadOnlyRootFilesystem parameter in the container specifications of a Kubernetes Pod is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2557",
    "description": "Checks if Google Cloud Filestore access control is configured to enforce a root directory. The rule is NON_COMPLIANT if the access path is set to '/' (default root directory of the file system).",
    "function_name": "filestore_access_control_enforce_root_directory",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2558",
    "description": "Checks if Google Cloud Filestore instances are configured to enforce user identity. The rule is NON_COMPLIANT if 'POSIX user' is not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "function_name": "filestore_instance_enforce_user_identity",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2559",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Managed Certificates or other trusted Certificate Authority. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a valid SSL certificate or is configured with a certificate that is not trusted.",
    "function_name": "network_load_balancer_backend_ssl_certificate_trusted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2560",
    "description": "Checks if the Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS backend service with your Global or Regional Load Balancer. This rule is only applicable to HTTP(S) Load Balancers and does not check TCP/UDP Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2561",
    "description": "Checks if a Google Cloud Platform project has VPC firewall rules configured to block public access settings. The rule is NON_COMPLIANT if the ingress firewall rules allow traffic from 0.0.0.0/0 on ports other than port 22.",
    "function_name": "network_firewall_block_public_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2562",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2563",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not permit actions that are blocked on all GCP KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on any GCP KMS key in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2564",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) keys are not scheduled for deletion in GCP KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2565",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access, it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2566",
    "description": "Checks if a Google Cloud SQL database instance snapshot is public. The rule is NON_COMPLIANT if any existing and new Cloud SQL snapshot is public.",
    "function_name": "sql_instance_snapshot_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2567",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipConfiguration.enablePublicIp' field is true in the instance configuration.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2568",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.backupRuns().list(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2569",
    "description": "Checks if Google BigQuery datasets have public access enabled. The rule is NON_COMPLIANT if the 'access' field contains any entries allowing public (allUsers) access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2570",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2571",
    "description": "Checks if the required public access prevention settings are configured at the project level in Google Cloud. The rule is only NON_COMPLIANT when the fields set below do not match the corresponding fields in the configuration item.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2572",
    "description": "Checks if the required Public Access prevention settings are configured at the project level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2573",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2574",
    "description": "Checks if Object Versioning is enabled on a Google Cloud Storage (GCS) bucket, as MFA Delete equivalent functionality is not available. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2575",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, bucket policy, and bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2576",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule examines the bucket IAM policies, access control policies, and uniform bucket-level access settings.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2577",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebooks instance. The rule is NON_COMPLIANT if an AI Platform Notebooks instance is internet-enabled.",
    "function_name": "ai_platform_notebooks_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2578",
    "description": "Checks if Google Cloud Document AI processor resources owned by the account are public. The rule is NON_COMPLIANT if Document AI processors with the owner 'Self' are public.",
    "function_name": "documentai_processor_non_public_self_owned",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "documentai_client.projects().locations().processors().get(name='processor_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2579",
    "description": "Checks if all methods in Google Cloud Endpoints services have caching enabled and cache encrypted. The rule is NON_COMPLIANT if any method in a Google Cloud Endpoints service is not configured to cache or the cache is not encrypted.",
    "function_name": "endpoints_methods_cache_encrypted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2580",
    "description": "Checks if a Google BigQuery dataset is encrypted at rest. The rule is NON_COMPLIANT if encryption of data at rest is not enabled for a BigQuery dataset.",
    "function_name": "bigquery_dataset_encryption_at_rest_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2581",
    "description": "Checks if a Google Cloud Platform (GCP) recovery point is encrypted. The rule is NON_COMPLIANT if the recovery point is not encrypted.",
    "function_name": "compute_recovery_point_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2582",
    "description": "Checks if Google Cloud Logging log sinks are encrypted with a specified Google Cloud KMS key. The rule is NON_COMPLIANT if a log sink is not encrypted with any KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "function_name": "logging_log_sinks_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2583",
    "description": "Checks if Google Cloud Audit Logs is configured to use the Google Cloud Key Management Service (Cloud KMS) for encryption. The rule is COMPLIANT if the KmsKeyId is defined.",
    "function_name": "logging_audit_logs_encryption_with_kms",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2584",
    "description": "Checks if a Google Cloud Build trigger has encryption enabled for all of its artifacts. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' for any primary or secondary (if present) artifact configurations.",
    "function_name": "cloudbuild_trigger_artifacts_encryption_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2585",
    "description": "Checks if the project contains environment variables GOOGLE_CLOUD_ACCESS_KEY and GOOGLE_CLOUD_SECRET_KEY. The rule is NON_COMPLIANT when the project environment variables contain plaintext credentials.",
    "function_name": "compute_project_no_plaintext_credentials",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2586",
    "description": "Checks if a Google Cloud Build project configured with Google Cloud Storage (GCS) Logs has encryption enabled for its logs. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' in the 'storage' configuration of a Cloud Build project.",
    "function_name": "cloudbuild_storage_logs_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2587",
    "description": "Checks if Google Cloud Firestore or Google Cloud Bigtable instances are encrypted. The rule is NON_COMPLIANT if a Firestore or Bigtable instance is not encrypted.",
    "function_name": "firestore_bigtable_instance_encryption",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2588",
    "description": "Checks if storage encryption is enabled for your Google Cloud Firestore databases. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "firestore_database_storage_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2589",
    "description": "Checks if Google Cloud Firestore or Google Cloud Bigtable table is encrypted with Google Cloud Key Management Service (KMS). The rule is NON_COMPLIANT if the Firestore or Bigtable table is not encrypted with Google Cloud KMS. The rule is also NON_COMPLIANT if the encrypted Google Cloud KMS key is not present in the keyResourceIds input parameter.",
    "function_name": "firestore_bigtable_table_encrypted_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2590",
    "description": "Checks if the Google Cloud Firestore databases are encrypted and checks their status. The rule is COMPLIANT if the status is enabled or enabling.",
    "function_name": "firestore_database_encryption_status_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2591",
    "description": "Checks if Google Cloud Persistent Disk encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled.",
    "function_name": "compute_disk_encryption_enabled_by_default",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2592",
    "description": "Verifies if secrets are passed as environment variables in Google Cloud Platform containers. The rule is NON_COMPLIANT if any environment variable key matches a key listed in the 'secretKeys' parameter (excluding environment variables from other sources such as Google Cloud Storage).",
    "function_name": "container_environment_variables_no_secrets",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2593",
    "description": "Checks if Google Cloud Filestore is configured to encrypt file data using Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if the 'fileShare.encryptionKey.name' is not set or does not match the required KMS key.",
    "function_name": "filestore_fileshare_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2594",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud KMS. The rule is NON_COMPLIANT if a GKE cluster does not have the appropriate encryption settings in place or if secrets are not being encrypted using the specified KMS key.",
    "function_name": "container_gke_clusters_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2595",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud KMS (Key Management Service).",
    "function_name": "container_gke_clusters_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2596",
    "description": "Checks if Google Cloud Memorystore for Redis instances have encryption-at-rest enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'redis_version' does not support encryption or if the KMS key does not match the approved KMS key settings.",
    "function_name": "memorystore_redis_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2597",
    "description": "Checks if Google Cloud Elasticsearch (managed by Google Cloud) has encryption at rest configuration enabled. The rule is NON_COMPLIANT if the encryption at rest option is not enabled.",
    "function_name": "compute_elasticsearch_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2598",
    "description": "Checks if attached Google Cloud Persistent Disks are encrypted and optionally are encrypted with a specified CMEK (Customer Managed Encryption Keys). The rule is NON_COMPLIANT if attached Persistent Disks are unencrypted or are encrypted with a CMEK key not in the supplied parameters.",
    "function_name": "compute_persistent_disks_encrypted_with_cmek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2599",
    "description": "Checks if Google Cloud Pub/Sub topics are encrypted at rest with Google-managed encryption. The rule is NON_COMPLIANT for a Pub/Sub topic if 'encryptionConfiguration' is not present.",
    "function_name": "pubsub_topic_encryption_google_managed",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2600",
    "description": "Checks if storage encryption is enabled for your Google Cloud SQL instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "sql_instances_storage_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2601",
    "description": "Checks if a Google Cloud SQL instance has automated backups encrypted. The rule is NON_COMPLIANT if a Cloud SQL instance does not have automated backups encrypted.",
    "function_name": "sql_instance_backup_encryption_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2602",
    "description": "Checks if Google Cloud's Elasticsearch (GCP equivalent of Amazon OpenSearch Service) instances have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the 'encryption' settings are not enabled.",
    "function_name": "dataproc_instances_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2603",
    "description": "Checks if a Google Cloud SQL instance is encrypted at rest. The rule is NON_COMPLIANT if a Google Cloud SQL instance is not encrypted at rest.",
    "function_name": "sql_instance_encryption_at_rest",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2604",
    "description": "Checks if Google Cloud SQL database backups are encrypted. The rule is NON_COMPLIANT if the Google Cloud SQL database backups are not encrypted.",
    "function_name": "sql_database_backups_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2605",
    "description": "Checks if storage encryption is enabled for your Google Cloud SQL instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "sql_instances_storage_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2606",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2607",
    "description": "Checks if Google BigQuery datasets are using a specified Google Cloud Key Management Service (GCP KMS) key for encryption. The rule is COMPLIANT if encryption is enabled and the dataset is encrypted with the key provided in the kmsKeyResource parameter. The rule is NON_COMPLIANT if the dataset is not encrypted or encrypted with another key.",
    "function_name": "bigquery_dataset_encryption_with_specified_kms_key",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2608",
    "description": "Checks if your Google Cloud Storage bucket has default object encryption enabled or that the bucket policy explicitly denies upload requests without server-side encryption. The rule is NON_COMPLIANT if your Google Cloud Storage bucket is not encrypted by default.",
    "function_name": "storage_bucket_default_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).default_kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2609",
    "description": "Checks if GCS buckets are encrypted with Google Cloud Key Management Service (Cloud KMS). The rule is NON_COMPLIANT if the GCS bucket is not encrypted with a Cloud KMS key.",
    "function_name": "storage_bucket_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2610",
    "description": "Checks if Google Cloud KMS (Cloud Key Management Service) key is configured for a Google AI Platform endpoint configuration. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the Google AI Platform endpoint configuration.",
    "function_name": "ai_platform_endpoint_kms_key_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "ai_platform_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2611",
    "description": "Checks if a Google Cloud Key Management Service (Google Cloud KMS) key is configured for a Google AI Platform notebook instance. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the AI Platform notebook instance.",
    "function_name": "ai_platform_notebook_kms_key_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2612",
    "description": "Checks if all secrets in Google Cloud Secret Manager are encrypted using a customer managed encryption key (CMEK) created in Google Cloud Key Management Service (KMS). The rule is COMPLIANT if a secret is encrypted using a customer managed key. This rule is NON_COMPLIANT if a secret is encrypted using the default Google-managed encryption keys.",
    "function_name": "secretmanager_secret_cmek_encryption",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2613",
    "description": "Checks if Pub/Sub topics are encrypted with Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if a Pub/Sub topic is not encrypted with Google Cloud KMS. Optionally, specify the key resource names for the rule to check.",
    "function_name": "pubsub_topic_encryption_with_kms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2614",
    "description": "Checks if Google Cloud Certificate Manager certificates in your account are marked for expiration within the specified number of days. Certificates managed by Google Cloud Certificate Manager are automatically renewed, but those imported from other providers are not. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2615",
    "description": "Checks if Google Cloud Certificate Authority Service (Google CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_disabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2616",
    "description": "Checks if a Google Cloud Endpoints API has an SSL certificate associated with its configuration. The rule is NON_COMPLIANT if the API does not have an associated SSL certificate for secure communication.",
    "function_name": "endpoints_api_ssl_certificate_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2617",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2618",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without an SSL certificate or is configured with a certificate that is not from Google Cloud Certificate Manager.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2619",
    "description": "Checks if the Classic Load Balancers use SSL certificates provided by Google Cloud SSL Certificates. To use this rule, an SSL or HTTPS load balancer configuration must be applied with your load balancer in GCP. This rule is only applicable to HTTP(S) Load Balancers. This rule does not check TCP Proxy Load Balancers and Internal Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2620",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2621",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2622",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) keys are not scheduled for deletion in GCP KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/project/locations/location/keyRings/keyRing/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2623",
    "description": "Checks if Google Cloud Platform SSL Certificates in your project are marked for expiration within the specified number of days. Google-managed SSL certificates are automatically renewed. User-managed certificates are not automatically renewed. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2624",
    "description": "Checks if Google Cloud Certificate Authority Service (Google Cloud CA) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with a status that is not DISABLED.",
    "function_name": "certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_authority_service.projects().locations().certificateAuthorities().get(name='projects/project_id/locations/location/certificateAuthorities/ca_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2625",
    "description": "Checks if a Google Cloud HTTP(S) Load Balancer front-end configuration uses an SSL certificate. The rule is NON_COMPLIANT if the load balancer does not have an associated SSL certificate.",
    "function_name": "network_load_balancer_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2626",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2627",
    "description": "Checks if Google Cloud Load Balancers (both HTTP(S) Load Balancers and TCP/UDP Load Balancers) have backend services and target proxies configured to use certificates from Google-managed SSL Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service or target proxy that is configured without a Google-managed SSL Certificate or is configured with a certificate different from a Google-managed SSL Certificate.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2628",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend configuration with your Google Cloud Load Balancer. This rule is only applicable to HTTPS Load Balancers. This rule does not check TCP Load Balancers or Internal Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2629",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2630",
    "description": "Checks if the IAM policies attached to your GCP users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2631",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2632",
    "description": "Checks if Google Cloud Certificate Manager Certificates in your project are marked for expiration within the specified number of days. Certificates provided by Certificate Manager are automatically renewed. Certificate Manager does not automatically renew certificates that you import. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2633",
    "description": "Checks if Google Cloud Certificate Authority Service has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "certificate_authority_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2634",
    "description": "Checks if an API Gateway stage uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway stage does not have an associated SSL certificate.",
    "function_name": "apigateway_stage_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "apigateway_client.projects().locations().gateways().get(name='projects/proj/locations/loc/gateways/gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2635",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is a default certificate. The rule is NON_COMPLIANT if a Google Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2636",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with HTTPS certificates from Google Managed SSL Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a Google Managed SSL certificate or is configured with a certificate not issued by Google.",
    "function_name": "network_load_balancer_backend_https_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2637",
    "description": "Checks if the Google Cloud HTTP(S) Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure that an SSL or HTTPS frontend configuration is set up with your HTTP(S) Load Balancer. This rule is only applicable to HTTP(S) Load Balancers. This rule does not check TCP/SSL Proxy Load Balancers or Internal Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2638",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2639",
    "description": "Checks if the IAM policies attached to your GCP users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2640",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) keys are not scheduled for deletion in GCP KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2641",
    "description": "Checks if Google Cloud Certificate Manager SSL Certificates in your account are marked for expiration within the specified number of days. Certificates managed by Google Cloud are automatically renewed. Certificates that are imported do not renew automatically. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2642",
    "description": "Checks if Google Cloud Certificate Authority Service (CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2643",
    "description": "Checks if a Google Cloud Endpoints API has an SSL certificate. The rule is NON_COMPLIANT if the Google Cloud Endpoints API does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(project='proj', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2644",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2645",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backends that are configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud certificate.",
    "function_name": "network_load_balancer_backends_use_gcp_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2646",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure you have an SSL or HTTPS listener configured with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers. This rule does not check other types of load balancers.",
    "function_name": "network_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2647",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2648",
    "description": "Checks if the IAM policies attached to your Google Cloud users, service accounts, and groups do not permit actions that are blocked for all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed for all Google Cloud KMS keys in a policy.",
    "function_name": "iam_policy_blocked_actions_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2649",
    "description": "Checks if Google Cloud Key Management Service (Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2650",
    "description": "Checks if Google Cloud Certificate Manager certificates in your account are marked for expiration within the specified number of days. Certificates in Google Cloud can be managed, including automatic renewals for managed certificates. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2651",
    "description": "Checks if RSA certificates managed by Google Cloud's Certificate Manager have a key length of at least '2048' bits. The rule is NON_COMPLIANT if the minimum key length is less than 2048 bits.",
    "function_name": "certificate_manager_rsa_key_minimum_length_2048_bits",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().get(project='proj', location='location', certificate='cert')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2652",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with a status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2653",
    "description": "Checks if a Cloud Endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the Cloud Endpoint does not have an associated SSL certificate.",
    "function_name": "network_endpoint_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2654",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN configuration uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2655",
    "description": "Checks if Google Cloud HTTPS Load Balancers have backend services configured with SSL/TLS certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 HTTPS Load Balancer has at least 1 backend service that is configured without a SSL/TLS certificate from Google Cloud Certificate Manager or is configured with a certificate different from those managed by Google Cloud Certificate Manager.",
    "function_name": "network_https_load_balancer_backend_ssl_tls_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2656",
    "description": "Checks if the Global Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend with your Global Load Balancer. This rule is only applicable to Global Load Balancers. This rule does not check Regional Load Balancers or Internal Load Balancers.",
    "function_name": "network_global_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2657",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2658",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on any Google Cloud KMS key in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2659",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2660",
    "description": "Checks if Google Cloud's Certificate Manager Certificates in your project are marked for expiration within the specified number of days. Certificates provided by Google Cloud are automatically renewed. Google Cloud does not automatically renew certificates that you import. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "security_certificate_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2661",
    "description": "Checks if Google Cloud Private CA has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "privateca_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "privateca_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2662",
    "description": "Checks if a Cloud Endpoints API uses an SSL certificate. The rule is NON_COMPLIANT if the Cloud Endpoints API does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2663",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().get(project='proj', sslCertificate='cert_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2664",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without an SSL certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2665",
    "description": "Checks if the HTTPS Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an HTTPS or SSL proxy load balancer. This rule is only applicable to HTTPS Load Balancers. This rule does not check TCP/UDP Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2666",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2667",
    "description": "Checks if the IAM policies attached to your GCP IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all GCP KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2668",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for destruction in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for destruction.",
    "function_name": "kms_keys_not_scheduled_for_destruction",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2669",
    "description": "Checks if Google Cloud Certificate Manager Certificates in your account are marked for expiration within the specified number of days. Certificates managed by Google Cloud Certificate Manager can be automatically renewed, but the auto-renewal is dependent on the proper configuration. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2670",
    "description": "Checks if Google Cloud Certificate Authority Service (CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2671",
    "description": "Checks if a Google Cloud Endpoints API has an SSL certificate associated. The rule is NON_COMPLIANT if the API does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_associated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(project='proj', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2672",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2673",
    "description": "Checks if automatic key rotation is enabled for each key and matches to the key ID of the customer created Google Cloud KMS key. The rule is NON_COMPLIANT if the IAM role associated with the resource does not have the cloudkms.keys.get permission",
    "function_name": "kms_key_automatic_rotation_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2674",
    "description": "Checks if Google Cloud Load Balancers (including HTTP(S) Load Balancers and TCP/UDP Load Balancers) have backend services that are configured to use SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from one in Google Cloud Certificate Manager.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2675",
    "description": "Checks if the Classic Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an SSL or HTTPS frontend configuration with your Network Load Balancer. This rule is only applicable to Classic Load Balancers. This rule does not check HTTP(S) Load Balancers.",
    "function_name": "network_classic_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2676",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2677",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2678",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2679",
    "description": "Checks if Google Cloud Certificate Manager SSL certificates in your account are nearing expiration within the specified number of days. Certificates managed by Google Cloud are automatically renewed, while those imported must be manually renewed. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiration_monitor",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2680",
    "description": "Checks if automatic key rotation is enabled for each key in Google Cloud's KMS and matches to the key ID of the customer created Google Cloud KMS key. The rule is NON_COMPLIANT if the IAM role associated with the resource does not have the 'cloudkms.keys.get' permission.",
    "function_name": "kms_key_automatic_rotation_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2681",
    "description": "Checks if Google Cloud Certificate Manager certificates in your account are marked for expiration within the specified number of days. Certificates provided by Google Cloud are not automatically renewed, and you must manually renew them before expiration. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_monitor",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2682",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2683",
    "description": "Checks if an API Gateway endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway endpoint does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2684",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default Google-managed SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN configuration uses the default Google-managed SSL certificate.",
    "function_name": "network_cdn_custom_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2685",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Managed SSL Certificates. This rule is NON_COMPLIANT if at least 1 HTTP(S) Load Balancer has at least 1 backend service that is configured without a Google Managed SSL Certificate or is configured with a certificate different from a Google Managed SSL Certificate.",
    "function_name": "network_load_balancer_backend_ssl_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2686",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. This rule is applicable only to HTTP(S) Load Balancers. It does not check TCP/UDP Load Balancers.",
    "function_name": "network_https_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2687",
    "description": "Verifies that the Google Cloud IAM policies do not permit blocked actions on Google Cloud KMS keys. The rule is considered NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the IAM policy.",
    "function_name": "kms_keys_iam_policy_no_blocked_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2688",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2689",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2690",
    "description": "Checks if Google Cloud Certificate Manager certificates in your project are marked for expiration within the specified number of days. Certificates created by Google Cloud Certificate Manager are automatically renewed. However, imported certificates are not automatically renewed. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "certificate_manager_certificates_expiration_check",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_manager_client.certificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2691",
    "description": "Checks if Google Cloud Certificate Authority Service (GCP CAS) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "cas_root_ca_status_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cas_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2692",
    "description": "Checks if a Cloud Endpoints service configuration is using an SSL certificate. The rule is NON_COMPLIANT if the Cloud Endpoints service does not have an associated SSL certificate.",
    "function_name": "endpoints_service_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2693",
    "description": "Checks if the certificate associated with a Google Cloud CDN (Content Delivery Network) backend service is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN backend service uses the default SSL certificate.",
    "function_name": "network_cdn_backendservice_non_default_ssl_certificate",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2694",
    "description": "Checks if Google Cloud Load Balancers have backend services configured to use certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_certificate_manager_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2695",
    "description": "Checks if the Network Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure your Network Load Balancer has a frontend configuration with HTTPS. This rule is applicable only to Network Load Balancers and does not check HTTP(S) Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2696",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2697",
    "description": "Checks if the IAM policies attached to your Google Cloud users, service accounts, and groups do not allow blocked actions on all GCP KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all GCP KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2698",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for deletion in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for deletion.",
    "function_name": "kms_keys_not_scheduled_for_deletion",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2699",
    "description": "Checks if Google Cloud Managed SSL Certificates in your project are about to expire within the specified number of days. Managed SSL Certificates are automatically renewed by Google Cloud. The rule is NON_COMPLIANT if your certificates are about to expire.",
    "function_name": "network_ssl_certificates_expiry_within_days",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2700",
    "description": "Checks if Google Cloud Certificate Authority (GCP Certificate Authority Service) has a root CA that is disabled. The rule is NON_COMPLIANT for root CAs with status that is not DISABLED.",
    "function_name": "certificate_authority_root_ca_disabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "certificate_authority_client.projects().locations().certificateAuthorities().get(name='projects/proj/locations/loc/certificateAuthorities/ca')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2701",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP load balancers. The rule is NON_COMPLIANT if one or more HTTP load balancers do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP load balancers have forwarding to an HTTP listener instead of redirection.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().list(project='proj', region='region')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2702",
    "description": "Checks if an API Gateway endpoint uses an SSL certificate. The rule is NON_COMPLIANT if the API Gateway endpoint does not have an associated SSL certificate.",
    "function_name": "network_api_gateway_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.apiGateways().get(project='proj', location='location', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2703",
    "description": "Checks if the certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2704",
    "description": "Checks if Google Cloud CDN is using deprecated SSL protocols for HTTPS communication between Google Cloud CDN edge locations and backend services. This rule is NON_COMPLIANT for a Cloud CDN if any 'SslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_ssl_protocols_non_deprecated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2705",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'OriginProtocolPolicy' is 'HTTP_ONLY' or if 'OriginProtocolPolicy' is 'MATCH_VIEWER' and 'ViewerProtocolPolicy' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_traffic_encryption_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2706",
    "description": "Checks if your Google Cloud CDN uses HTTPS for serving content (directly or via a redirection). The rule is NON_COMPLIANT if the value of 'https' is not enforced in the Load Balancer settings for the backend service.",
    "function_name": "network_load_balancer_https_enforced",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2707",
    "description": "Checks if your Google Cloud Firestore database has transport security enabled. The rule is NON_COMPLIANT if a Firestore database is not secured by Transport Layer Security (TLS).",
    "function_name": "firestore_database_transport_security_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2708",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) connections are configured with an SSL connection. The rule is NON_COMPLIANT if GCP DMS does not have an SSL connection configured.",
    "function_name": "dms_connections_ssl_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2709",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) endpoints for Redis data stores are enabled for TLS/SSL encryption of data communicated with other endpoints. The rule is NON_COMPLIANT if TLS/SSL encryption is not enabled.",
    "function_name": "dms_redis_endpoints_tls_ssl_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2710",
    "description": "Checks if Google Cloud Memorystore for Redis replication instances have encryption-in-transit enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transitEncryptionEnabled' is set to 'false'.",
    "function_name": "memorystore_redis_replication_encryption_in_transit_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.instances().get(project='proj', location='location', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2711",
    "description": "Check if Google Cloud's Elasticsearch Service nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled.",
    "function_name": "compute_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2712",
    "description": "Checks if Google Cloud Load Balancers have backend services configured with SSL certificates from Google Cloud Certificate Manager. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service that is configured without a certificate from Google Cloud Certificate Manager or is configured with a certificate different from a Google Cloud Certificate Manager certificate.",
    "function_name": "network_load_balancer_backend_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2713",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure an SSL or HTTPS proxy is configured with your Google Cloud Load Balancer. This rule is only applicable to External Load Balancers. This rule does not check Internal Load Balancers.",
    "function_name": "network_external_load_balancer_ssl_certificates_google_managed",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2714",
    "description": "Checks whether your Google Cloud Load Balancer SSL certificates are using a custom policy. The rule is only applicable if there are SSL certificates associated with the Google Cloud Load Balancer.",
    "function_name": "network_load_balancer_ssl_custom_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2715",
    "description": "Checks if your Google Cloud Load Balancer (GCLB) SSL policies use a predefined policy. The rule is NON_COMPLIANT if the GCLB HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2716",
    "description": "Checks if your Google Cloud Load Balancer is configured with HTTPS or SSL certificates. The rule is NON_COMPLIANT if a backend service does not have an SSL certificate configured for HTTPS traffic.",
    "function_name": "network_load_balancer_https_ssl_certificate_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2717",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2718",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2719",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2720",
    "description": "Checks if Google Cloud Key Management Service (Google Cloud KMS) keys are not scheduled for destruction in Google Cloud KMS. The rule is NON_COMPLIANT if KMS keys are scheduled for destruction.",
    "function_name": "kms_keys_no_scheduled_destruction",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2721",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) for communication between publishers and subscribers. The rule is NON_COMPLIANT if plain text communication is enabled for in-transit messages.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2722",
    "description": "Checks whether connections to Google Cloud Elasticsearch (GCP equivalent of Amazon OpenSearch) are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Elasticsearch domain 'enforceHTTPS' is not 'true' or is 'true' and 'tlsSecurityPolicy' is not in 'tlsPolicies'.",
    "function_name": "network_elasticsearch_enforce_https_tls_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2723",
    "description": "Check if Google Cloud's Managed Service for Elasticsearch nodes are encrypted end to end. The rule is NON_COMPLIANT if the communication between nodes is not encrypted.",
    "function_name": "compute_elasticsearch_nodes_encryption_end_to_end",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2724",
    "description": "Checks if Google BigQuery datasets require TLS/SSL encryption to connect to SQL clients. The rule is NON_COMPLIANT if any Google BigQuery dataset has parameter 'require_ssl' not set to true.",
    "function_name": "bigquery_datasets_require_ssl",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).require_ssl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2725",
    "description": "Checks if Google Cloud Storage buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any Google Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2726",
    "description": "Checks if HTTP to HTTPS redirection is configured on all backend services associated with Google Cloud Load Balancers. The rule is NON_COMPLIANT if one or more backend services do not have HTTP to HTTPS redirection configured or if any backend services forward requests to another HTTP backend service instead of redirecting.",
    "function_name": "network_load_balancer_https_redirection_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2727",
    "description": "Checks if Google Cloud CDN (Cloud Content Delivery Network) backends are using deprecated SSL protocols for HTTPS communication between edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN backend if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_backends_no_deprecated_ssl",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2728",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom backends. The rule is NON_COMPLIANT if 'originProtocol' is 'HTTP' and 'clientRedirect' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_encryption_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2729",
    "description": "Checks if your Google Cloud CDN configurations enforce HTTPS by verifying that the 'secure' option is enabled for the load balancer backend service. The rule is NON_COMPLIANT if the load balancer allows HTTP traffic without redirection to HTTPS.",
    "function_name": "network_load_balancer_enforce_https",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2730",
    "description": "Checks if your Google Cloud Firestore is set to use HTTPS for API requests. The rule is NON_COMPLIANT if Firestore does not have HTTPS enabled for secure communication.",
    "function_name": "firestore_api_https_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2731",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if GCP DMS does not have an SSL connection configured.",
    "function_name": "dms_endpoints_ssl_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2732",
    "description": "Checks if Google Cloud Platform (GCP) Cloud SQL for Redis data stores is configured to use SSL encryption for data communicated with other endpoints. The rule is NON_COMPLIANT if SSL encryption is not enabled.",
    "function_name": "cloudsql_redis_ssl_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2733",
    "description": "Checks if Google Cloud Memorystore (Redis) instances have in-transit encryption enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transitEncryptionMode' is set to 'DISABLED'.",
    "function_name": "memorystore_redis_in_transit_encryption_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2734",
    "description": "Check if Google Cloud's Elasticsearch nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the ElastiSearch cluster.",
    "function_name": "dataproc_cluster_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2735",
    "description": "Checks if the Google Cloud Load Balancers (GCLB) use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, use an HTTPS load balancer with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers. This rule does not check TCP Proxy Load Balancers or SSL Proxy Load Balancers.",
    "function_name": "network_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2736",
    "description": "Checks whether your Google Cloud Platform (GCP) HTTPS Load Balancer is using a custom SSL policy. The rule is only applicable if there are SSL listeners for the HTTPS Load Balancer.",
    "function_name": "network_https_load_balancer_custom_ssl_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2737",
    "description": "Checks if your Google Cloud Load Balancer SSL certificates use a predefined policy. The rule is NON_COMPLIANT if the Google Cloud Load Balancer HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2738",
    "description": "Checks if your Google Cloud Platform Load Balancer is configured with SSL (HTTPS) backend services. The rule is NON_COMPLIANT if a backend service is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_backend_services",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2739",
    "description": "Checks if Google Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or if the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2740",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) with the broker nodes of the topic. The rule is NON_COMPLIANT if plain text communication is enabled for in-topic broker node connections.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2741",
    "description": "Checks whether connections to Google Cloud Search domains are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Search domain 'RequireHTTPS' is not 'true' or is 'true' and the 'TLSVersion' is not in the acceptable security policies.",
    "function_name": "cloudsearch_domain_https_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.domains().get(name='domains/domain-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2742",
    "description": "Check if Google Cloud's Elasticsearch (GCP equivalent to Amazon OpenSearch Service) nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the cluster.",
    "function_name": "dataproc_cluster_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2743",
    "description": "Checks if Google BigQuery requires TLS/SSL encryption for connections to SQL clients. The rule is NON_COMPLIANT if any Google BigQuery dataset has parameter `enable_legacy_sql` not set to false, as BigQuery encrypts data in transit using TLS by default.",
    "function_name": "bigquery_dataset_disable_legacy_sql",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).dataset_reference"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2744",
    "description": "Checks if Google Cloud Storage buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any Cloud Storage bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2745",
    "description": "Checks if Google Cloud Endpoints (API Gateway in GCP) has access logging enabled. The rule is NON_COMPLIANT if 'access_log' is not present in the API configuration.",
    "function_name": "endpoints_api_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2746",
    "description": "Checks if all methods in Google Cloud Endpoints configurations have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if logLevel is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "endpoints_client.services().getConfig(serviceName='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2747",
    "description": "Checks if Google Cloud Trace is enabled for Google Cloud Functions or Cloud Run services. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "cloudfunctions_cloudtrace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2748",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is set to a value other than ERROR or ALL.",
    "function_name": "apigateway_logging_enabled_error_or_all",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(project='proj', api='api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2749",
    "description": "Checks if Network Load Balancers (NLB) are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if NLB Desync mitigation mode does not match with the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='nlb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2750",
    "description": "Checks if Google Cloud CDN backends are configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN backend does not have logging configured.",
    "function_name": "network_cdn_backends_logging_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='backend')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2751",
    "description": "Checks if at least one Google Cloud Logging service is logging Google Cloud Storage (GCS) data access events for all GCS buckets. The rule is NON_COMPLIANT if there are no logging configurations that record GCS data access events.",
    "function_name": "logging_gcs_data_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2752",
    "description": "Checks that there is at least one Google Cloud Audit Log configured with security best practices. This rule is COMPLIANT if there is at least one log that meets all of the following:",
    "function_name": "logging_auditlog_security_best_practices",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2753",
    "description": "Google Cloud Logging must be enabled to ensure that all actions and events in the project are recorded, similar to AWS CloudTrail.",
    "function_name": "logging_project_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2754",
    "description": "Checks if a Google Cloud Build project has at least one log option enabled. The rule is NON_COMPLIANT if the status of all present log configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_project_log_option_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2755",
    "description": "Checks if a Google Cloud Logging log bucket retention period is set to greater than 365 days or else a specified retention period. The rule is NON_COMPLIANT if the retention period is less than MinRetentionTime, if specified, or else 365 days.",
    "function_name": "logging_log_bucket_retention_period_greater_than_minimum",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/my-project/locations/global/buckets/my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2756",
    "description": "Checks if logging is enabled with a valid severity level for Google Cloud Database Migration Service (DMS) replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "dms_replication_task_logging_enabled_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['project_id'])"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2757",
    "description": "Checks if a Google Cloud Firestore (with Datastore compatibility) instance has Cloud Logging enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Cloud Logging enabled for audit logs.",
    "function_name": "firestore_instance_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2758",
    "description": "Checks if Google Cloud VPN has logging enabled for the tunnel. The rule is NON_COMPLIANT if 'LoggingEnabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='tunnel')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2759",
    "description": "Checks if logging configuration is set on active Google Kubernetes Engine (GKE) Pod Definitions. This rule is NON_COMPLIANT if an active GKE Pod Definition does not have the logging configuration resource defined or the value for logging configuration is null in at least one container definition.",
    "function_name": "container_pod_logging_configuration_set",
    "service_category": "Container",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2760",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_gke_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().getLogging(projectId='proj', location='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2761",
    "description": "Checks if Google Cloud Elasticsearch domains (via Google Cloud's Elastic Stack solution) are configured to send logs to Google Cloud Logging. The rule is COMPLIANT if logging is enabled for a Google Cloud Elasticsearch domain. This rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "logging_elasticsearch_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2762",
    "description": "Checks if Google Cloud Platform App Engine services are configured to send logs to Cloud Logging. The rule is NON_COMPLIANT if the value of `logHealthChecks` is false.",
    "function_name": "appengine_service_logs_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2763",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the logging is not enabled or the log bucket is not equal to the specified Cloud Storage bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2764",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have audit logging enabled. The rule is NON_COMPLIANT if a subscription does not have audit logging enabled.",
    "function_name": "pubsub_subscription_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2765",
    "description": "Checks if a Google Cloud Pub/Sub service has Cloud Logging (formerly Stackdriver Logging) enabled for audit logs. The rule is NON_COMPLIANT if audit logging is not enabled.",
    "function_name": "pubsub_topic_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2766",
    "description": "In GCP, enabling audit logging across multiple regions can be achieved using Google Cloud Audit Logs, ensuring that logs are collected and stored in a centralized location, similar to AWS CloudTrail. This service provides multi-regional logging capabilities.",
    "function_name": "logging_audit_logs_enabled_multiregion",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2767",
    "description": "Checks if a Google Cloud SQL instance has Stackdriver logging enabled for audit logs. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Stackdriver logging enabled for audit logs.",
    "function_name": "sql_instance_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2768",
    "description": "Checks if Google Cloud Platform (GCP) Firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not enabled for the firewall rules.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2769",
    "description": "Checks if Google Cloud Elasticsearch (GCP variant of OpenSearch) clusters have audit logging enabled. The rule is NON_COMPLIANT if a Google Cloud Elasticsearch cluster does not have audit logging enabled.",
    "function_name": "logging_elasticsearch_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2770",
    "description": "Checks if Google Cloud Elasticsearch (GCP's equivalent to Amazon OpenSearch Service) clusters are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if logging is not configured.",
    "function_name": "logging_elasticsearch_clusters_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2771",
    "description": "Checks if Google Cloud SQL for MySQL instances are configured to export logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have log export configured.",
    "function_name": "cloudsql_mysql_log_export_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2772",
    "description": "Checks if logging is enabled for Google Cloud SQL databases. The rule is NON_COMPLIANT if any log types are not enabled.",
    "function_name": "sql_database_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2773",
    "description": "Checks if Google BigQuery datasets are logging audits to a specific logging sink. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'sinkNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.datasets().get(projectId='proj', datasetId='dataset')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2774",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if audit logging is not enabled for the dataset.",
    "function_name": "bigquery_dataset_encryption_and_logging_compliance",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2775",
    "description": "Checks if Cloud DNS query logging is enabled for your Google Cloud Platform (GCP) Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your GCP Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2776",
    "description": "Checks if logging is enabled for your Cloud Storage buckets. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).logging"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2777",
    "description": "Checks if Google Cloud Workflows has logging enabled. The rule is NON_COMPLIANT if a workflow does not have logging enabled or the logging configuration does not meet the minimum requirements.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2778",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are enabled for all GCP VPC networks. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2779",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if logging is enabled but the logging destination does not match the specified value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2780",
    "description": "Checks if logging is enabled on GCP Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2781",
    "description": "Checks if all of the specified applications are installed on the instance. Optionally, specify the minimum acceptable version. You can also specify the platform to apply the rule only to instances running that platform.",
    "function_name": "compute_instance_application_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2782",
    "description": "Checks if the compliance status of Google Cloud Compute Engine instance patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation. The rule is compliant if the field status is COMPLIANT.",
    "function_name": "compute_instance_patch_compliance_status",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2783",
    "description": "Checks if Google Cloud Run services are set to the latest platform version. The rule is NON_COMPLIANT if the platform is not set to LATEST_VERSION, or if neither the latestLinuxVersion nor latestWindowsVersion are specified as parameters.",
    "function_name": "cloud_run_service_platform_latest_version",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2784",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is running the oldest supported version. The rule is NON_COMPLIANT if a GKE cluster is running the oldest supported version (equal to the parameter 'oldestVersionSupported').",
    "function_name": "container_gke_cluster_avoid_oldest_supported_version",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2785",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is running a supported Kubernetes version. This rule is NON_COMPLIANT if a GKE cluster is running an unsupported version (less than the parameter 'oldestVersionSupported').",
    "function_name": "container_gke_cluster_supported_version",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2786",
    "description": "Checks if Google Cloud Memorystore for Redis instances have automatic updates enabled. The rule is NON_COMPLIANT for a Memorystore instance if it is using the Redis engine and automatic updates are not enabled.",
    "function_name": "memorystore_redis_automatic_updates_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2787",
    "description": "Checks if automatic application updates in a GCP App Engine environment are enabled. The rule is COMPLIANT if the value for automatic updates is set to true. The rule is NON_COMPLIANT if the value for automatic updates is set to false, or if a parameter is provided and its value does not match the existing configurations.",
    "function_name": "appengine_environment_automatic_updates_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().get(appsId='app_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2788",
    "description": "Checks if the Google Cloud Function settings for runtime, service account, timeout, and memory size match the expected values. The rule ignores functions with 'container' deployment type and functions with runtime set to 'OS-only Runtime'. The rule is NON_COMPLIANT if the Cloud Function settings do not match the expected values.",
    "function_name": "cloudfunctions_function_settings_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2789",
    "description": "Checks if Google Cloud Elasticsearch (GCE) version updates are available but not installed. The rule is NON_COMPLIANT for an Elasticsearch cluster if the latest software updates are not installed.",
    "function_name": "compute_elasticsearch_version_up_to_date",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2790",
    "description": "Checks if Google Cloud SQL instances are configured for automatic minor version upgrades. The rule is NON_COMPLIANT if the value of 'autoUpgrade' is false.",
    "function_name": "sql_instances_auto_upgrade_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2791",
    "description": "Checks if Google BigQuery datasets have the specified maintenance settings. The rule is NON_COMPLIANT if the automatic upgrades to major version are disabled.",
    "function_name": "bigquery_dataset_automatic_upgrade_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2792",
    "description": "Checks if Google Cloud Armor is enabled on Google Cloud Load Balancers. The rule is NON_COMPLIANT if key: armor.enabled is set to false.",
    "function_name": "network_load_balancer_armor_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2793",
    "description": "Checks if a Google Cloud API Gateway API configuration is using a Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Google Cloud Armor policy is not used or if the used policy does not match what is specified in the rule parameter.",
    "function_name": "network_api_gateway_armor_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.api_gateways().get(project='proj', location='loc', gateway='gateway')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2794",
    "description": "Checks if Google Cloud Apigee APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Apigee API if it is not associated with a security policy.",
    "function_name": "apigee_api_associated_with_cloud_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigee_client.apis().get(project='proj', api='api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2795",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2796",
    "description": "Checks if the security policy is associated with a Global External HTTP(S) Load Balancer or Cloud CDN in GCP. When Google Cloud Platform Firewall Rules are set up, the policy owner specifies the security policy ID in the GCP policy and can optionally enable remediation.",
    "function_name": "network_load_balancer_security_policy_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2797",
    "description": "Verifies that the security policies associated with the GCP Web Application Firewall (WAF) are applied in the correct order of precedence. The correct precedence is determined by the ranks specified in the rules configuration. When Google Cloud Security Policies are established, the highest precedence is given the lowest numeric value (0), followed by subsequent values (1, 2, etc.). The policy owner defines the order in the security policy configuration and can implement automatic remediation if desired.",
    "function_name": "network_waf_security_policy_precedence",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2798",
    "description": "Checks if Cloud Armor Security Policies contain rules. The policy is NON_COMPLIANT if there are no rules in a Cloud Armor Security Policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2799",
    "description": "Checks if a Google Cloud Armor Security Policy contains any security rules. This rule is NON_COMPLIANT if a Security Policy does not contain any security rules.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2800",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2801",
    "description": "Checks if a Google Cloud Armor security policy rule contains any conditions. The rule is NON_COMPLIANT if no conditions are present within the Cloud Armor security policy rule.",
    "function_name": "network_security_policy_rule_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2802",
    "description": "Verifies if a Cloud Armor Security Policy includes any security rules or rule groups. This rule is NON_COMPLIANT if a Security Policy does not contain any security rule or rule group.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2803",
    "description": "Checks if Google Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2804",
    "description": "Checks whether Google Cloud Armor security policy rule contains conditions. This rule is COMPLIANT if the regional rule contains at least one condition and NON_COMPLIANT otherwise.",
    "function_name": "compute_security_policy_rule_conditions_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2805",
    "description": "Checks if a Google Cloud Armor Security Policy contains any security rules. The policy is NON_COMPLIANT if there are no security rules defined within the policy.",
    "function_name": "compute_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2806",
    "description": "Checks if Google Cloud Armor is enabled on Google Cloud Load Balancers (GCLBs). The rule is NON_COMPLIANT if key: armor.enabled is set to false.",
    "function_name": "network_load_balancer_armor_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.globalForwardingRules().get(project='proj', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2807",
    "description": "Checks if a Google Cloud Endpoints API is using a Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Google Cloud Armor security policy is not used or if the used security policy does not match what is listed in the rule parameter.",
    "function_name": "network_endpoints_armor_policy_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2808",
    "description": "Checks if Google Cloud Endpoints APIs are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud Endpoints API if it is not associated with a security policy.",
    "function_name": "network_endpoints_associated_with_armor_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.endpoints().get(project='proj', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2809",
    "description": "Checks if Google Cloud CDN (Content Delivery Network) is associated with a Google Cloud Armor security policy. The rule is NON_COMPLIANT if a Cloud CDN is not associated with a Cloud Armor policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2810",
    "description": "Checks if the security policy is associated with a Google Cloud Load Balancer, Google Cloud Armor security policies, or Cloud CDN. When Google Cloud Armor creates this rule, the policy owner specifies the securityPolicyId in the policy and can optionally enable remediation.",
    "function_name": "network_load_balancer_security_policy_association",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2811",
    "description": "Verifies if the firewall rules within the Google Cloud Armor security policy are in the correct order based on their priority. The priority is determined by the sequence in which firewall rules are defined in the security policy. Google Cloud Armor allows the user to specify the order of the rules, starting from the highest priority (0) and increasing subsequent priorities (1, 2, etc.). Remediation can be optionally implemented to correct misconfigured priorities.",
    "function_name": "network_firewall_rules_priority_order",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2812",
    "description": "Checks if Google Cloud Armor Security Policies contain rules. The rule is NON_COMPLIANT if there are no rules in a Google Cloud Armor Security Policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2813",
    "description": "Checks if a Google Cloud Armor security policy contains any security rules. This rule is NON_COMPLIANT if a security policy does not contain any security rules.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2814",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2815",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2816",
    "description": "Checks whether a Google Cloud Armor Security Policy contains any security rules. This rule is NON_COMPLIANT if a Security Policy does not contain any security rules.",
    "function_name": "compute_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2817",
    "description": "Checks if Cloud Armor security policies contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2818",
    "description": "Checks whether a Google Cloud Armor security policy rule contains at least one condition. This rule is COMPLIANT if the security policy rule contains at least one condition and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_rule_condition_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2819",
    "description": "Checks if a Google Cloud Armor Security Policy contains any rules. The rule is NON_COMPLIANT if there are no rules present within a Security Policy.",
    "function_name": "compute_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2820",
    "description": "Checks if the Google Cloud Function is not using the default traffic allocation settings. The rule is NON_COMPLIANT if the Cloud Function is using the traffic allocation of '100% to the latest version'.",
    "function_name": "cloudfunctions_function_traffic_allocation_custom",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2821",
    "description": "Verifies if the first deployment step of Google Cloud Build performs multiple deployments. Optionally checks if each following stage deploys to more than the specified number of deployments (deploymentLimit).",
    "function_name": "cloudbuild_pipeline_first_step_single_deployment",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2822",
    "description": "Checks if the Cloud Function's deployment configuration is not using the default deployment strategy. The rule is NON_COMPLIANT if the Cloud Function is using the deployment strategy 'ALWAYS_ACTIVE'.",
    "function_name": "functions_deployment_strategy_non_default",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2823",
    "description": "Checks if the first deployment stage of Google Cloud Deploy performs more than one deployment. Optionally checks if each of the subsequent remaining stages deploy to more than the specified number of deployments (deploymentLimit).",
    "function_name": "deploy_stage_single_deployment_limit",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploy_client.projects().locations().deliveryPipelines().releases().get(name='projects/proj/locations/loc/deliveryPipelines/pipeline/releases/release')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2824",
    "description": "Checks if a GCP project is part of an Organization. The rule is NON_COMPLIANT if a GCP project is not part of an Organization or the Organization ID does not match rule parameter OrganizationId.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2825",
    "description": "Checks if a backup vault in Google Cloud Platform (GCP) has an attached resource-based policy that prevents deletion of backup snapshots. The rule is considered NON_COMPLIANT if the Backup Vault does not have resource-based policies or has policies without a suitable 'Deny' statement (statement with 'storage.objects.delete', 'storage.objects.update', and 'storage.buckets.setIamPolicy' permissions).",
    "function_name": "storage_backup_vault_deny_policy_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2826",
    "description": "Checks if a Google Cloud Build (GCB) configuration has privileged mode enabled. The rule is NON_COMPLIANT for a GCB build configuration if 'privileged' is set to 'true'.",
    "function_name": "cloudbuild_configuration_privileged_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().builds().get(projectId='proj', id='build_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2827",
    "description": "Checks if custom Google Cloud Pub/Sub topics have an IAM policy attached. The rule is NON_COMPLIANT for custom Pub/Sub topics without an IAM policy attached.",
    "function_name": "pubsub_topic_iam_policy_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/my-project/topics/my-topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2828",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2829",
    "description": "Checks if the privileged parameter in the container definition of Google Kubernetes Engine (GKE) Pod specifications is set to 'false'. The rule is NON_COMPLIANT if the privileged parameter is 'true'.",
    "function_name": "container_pod_privileged_false",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2830",
    "description": "Checks if Google Cloud Run (GCR) services only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the 'Readiness checks' option for the service does not enforce read-only file system permissions.",
    "function_name": "cloud_run_service_readonly_filesystem_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloud_run_client.services().getIamPolicy(resource='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2831",
    "description": "Checks if Google Kubernetes Engine (GKE) deployment specifications have a security context defined to specify a user for containers to run on. The rule is NON_COMPLIANT if the 'runAsUser' parameter is not present or set to '0' (root).",
    "function_name": "container_deployment_security_context_defined",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2832",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2833",
    "description": "Checks if the IAM policies attached to your GCP service accounts, roles, and groups do not allow blocked actions on all GCP Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all GCP Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2834",
    "description": "Checks if the IAM feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity (GCI) user, service account, or Google Group has any IAM policies that are attached inline rather than using predefined IAM roles.",
    "function_name": "iam_user_service_account_group_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2835",
    "description": "Checks in each Google Cloud Identity and Access Management (IAM) resource if a policy resource name (IAM role) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the role is attached to the IAM resource.",
    "function_name": "iam_policy_role_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2836",
    "description": "Checks whether the IAM policy is attached to an IAM user, a group with one or more IAM users, or a service account in Google Cloud Platform (GCP).",
    "function_name": "iam_policy_user_group_service_account_attachment",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2837",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'role': 'roles/owner' which effectively allows all permissions on all resources.",
    "function_name": "iam_policy_no_roles_owner",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2838",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2839",
    "description": "Checks if all specified managed IAM roles are associated with a Google Cloud IAM service account. The rule is NON_COMPLIANT if a managed IAM role is not associated with the service account.",
    "function_name": "iam_service_account_managed_roles_associated",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2840",
    "description": "Checks if the root user access key is available in Google Cloud Platform. The rule is COMPLIANT if the user access key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_root_user_access_key_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2841",
    "description": "Verifies if IAM users are associated with at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_group_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2842",
    "description": "Checks if none of your Google Cloud IAM users have roles or permissions directly attached to them. IAM users must inherit permissions from IAM groups or service accounts. The rule is NON_COMPLIANT if there is at least one custom role or permission that is directly attached to the IAM user.",
    "function_name": "iam_user_no_direct_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2843",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2844",
    "description": "Checks if Google Cloud Elasticsearch clusters have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM permissions are not set up correctly for the Elasticsearch cluster.",
    "function_name": "dataproc_cluster_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2845",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2846",
    "description": "Checks if a Google Cloud SQL instance has Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2847",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2848",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud accounts. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud account to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_account_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2849",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud IAM principals, service accounts, IP addresses, or VPC Service Controls that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2850",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2851",
    "description": "Checks if the Google AI Platform Notebooks Root Access setting is enabled for AI Platform Notebook instances. The rule is NON_COMPLIANT if the Root Access setting is set to 'Enabled' for an AI Platform Notebook instance.",
    "function_name": "ai_platform_notebooks_instance_root_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2852",
    "description": "Checks if the Google Cloud Incident Response Team (GCSIRT) can access your GCP account. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for GCSIRT access is not configured.",
    "function_name": "network_google_cloud_armor_gcsirt_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2853",
    "description": "Checks if a GCP project is part of an organization. The rule is NON_COMPLIANT if a GCP project is not linked to any organization or the organization ID does not match the specified rule parameter OrganizationId.",
    "function_name": "iam_project_organization_linked",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2854",
    "description": "Checks if a GCP Cloud Storage bucket used for backups has an attached IAM policy preventing deletion of backup files. The rule is NON_COMPLIANT if the bucket does not have IAM policies or has policies without sufficient 'Deny' permissions regarding the deletion of objects in the bucket.",
    "function_name": "storage_bucket_iam_policy_prevent_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2855",
    "description": "Checks if a Google Cloud Build project has privileged mode enabled. The rule is NON_COMPLIANT for a Cloud Build project if 'privileged' option is set to 'true'.",
    "function_name": "cloudbuild_project_privileged_mode_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2856",
    "description": "Checks if custom Google Cloud Pub/Sub schemas have a resource policy attached. The rule is NON_COMPLIANT for custom schemas without a resource policy attached.",
    "function_name": "pubsub_schema_resource_policy_attached",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().schemas().get(name='projects/proj/schemas/schema')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2857",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2858",
    "description": "Checks if the Privileged flag in the IAM policy for GKE Pod specifications is set to 'true'. The rule is NON_COMPLIANT if the Privileged flag is 'true'.",
    "function_name": "container_pod_privileged_flag_false",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2859",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem field in the Pod specification is set to ‘false’.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2860",
    "description": "Checks if Google Kubernetes Engine (GKE) Pod specifications define a user for containers to run on. The rule is NON_COMPLIANT if the 'securityContext.runAsUser' parameter is not present or set to '0' (root user).",
    "function_name": "container_pod_run_as_user_defined",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2861",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2862",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2863",
    "description": "Checks if the IAM user, role, or group has any custom IAM policies that are directly attached to them, which would indicate that inline policy features are being used. The rule is NON_COMPLIANT if a Google Cloud IAM (Identity and Access Management) user, service account, or group has any custom IAM policy bindings.",
    "function_name": "iam_user_custom_policy_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2864",
    "description": "Checks in each Google Cloud IAM resource if a policy (Policy ID) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/sa')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2865",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group with one or more IAM users, or a service account with one or more trusted identities.",
    "function_name": "iam_policy_attached_to_user_group_service_account",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2866",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'allow' permissions on all roles over 'all resources'.",
    "function_name": "iam_policy_no_allow_all_resources",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2867",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2868",
    "description": "Checks if all Google Cloud Platform (GCP) Identity and Access Management (IAM) roles have the specified policies attached. The rule is NON_COMPLIANT if a specified policy is not attached to the IAM role.",
    "function_name": "iam_roles_policy_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2869",
    "description": "Checks if the Google Cloud Platform (GCP) service account with owner privileges exists. The rule is COMPLIANT if the service account does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_owner_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2870",
    "description": "Verifies if IAM users are part of at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2871",
    "description": "Checks if none of your Google Cloud Platform (GCP) Identity and Access Management (IAM) users have custom roles or permissions attached directly to them. IAM users should inherit permissions from IAM groups or predefined roles. The rule is NON_COMPLIANT if there is at least one custom role or permission directly attached to the IAM user.",
    "function_name": "iam_user_no_custom_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2872",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2873",
    "description": "Checks if Google Cloud Elasticsearch instances have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM roles and permissions are not properly configured for the Elasticsearch instance.",
    "function_name": "compute_elasticsearch_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2874",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2875",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2876",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2877",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. The rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.buckets.get* actions and storage.objects.delete on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2878",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, service accounts, IAM roles, or specified IP addresses. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2879",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2880",
    "description": "Checks if the Google AI Platform Notebook instance has root access enabled. The rule is NON_COMPLIANT if the root access is set to 'Enabled' for a Google AI Platform Notebook instance.",
    "function_name": "ai_platform_notebook_instance_root_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2881",
    "description": "Checks if the Google Cloud Security Incident Response Team (SIRT) can access your GCP project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for SIRT access is not configured.",
    "function_name": "network_google_cloud_armor_sirt_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2882",
    "description": "Checks if a Cloud Build project environment has privileged mode enabled. The rule is NON_COMPLIANT for a Cloud Build project if 'privileged' is set to 'true'.",
    "function_name": "cloudbuild_project_privileged_mode_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloudbuild_client.projects().get(projectId='project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2883",
    "description": "Checks if Google Cloud Pub/Sub schema registries have an access control policy attached. The rule is NON_COMPLIANT for custom schema registries without an access control policy attached.",
    "function_name": "pubsub_schema_registry_access_control_policy_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().schemas().getIamPolicy(resource='projects/my-project/schemas/my-schema')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2884",
    "description": "Checks if the 'privileged' flag in the container configuration of Google Kubernetes Engine (GKE) Pod specifications is set to 'true'. The rule is NON_COMPLIANT if the 'privileged' flag is 'true'.",
    "function_name": "container_pod_privileged_flag_false",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2885",
    "description": "Checks if Google Kubernetes Engine (GKE) Pod specifications specify a user for containers to run on. The rule is NON_COMPLIANT if the 'securityContext.runAsUser' parameter is not present or set to '0'.",
    "function_name": "container_pod_specifications_user_defined",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2886",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2887",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2888",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'role: 'roles/owner' which grants broad permissions over all resources.",
    "function_name": "iam_policy_no_roles_owner",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2889",
    "description": "Checks if the root user service account key exists. The rule is COMPLIANT if the service account key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_key_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2890",
    "description": "Checks if the Vertex AI Workbench Root Access setting is enabled for Vertex AI Workbench Notebooks. The rule is NON_COMPLIANT if the Root Access setting is set to 'Enabled' for a Vertex AI Workbench Notebook instance.",
    "function_name": "vertex_ai_workbench_notebook_root_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "vertex_ai_client.get_notebook_instance(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2891",
    "description": "Checks whether IAM groups in Google Cloud Platform (GCP) have at least one IAM user associated with them.",
    "function_name": "iam_group_has_user_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2892",
    "description": "Checks if your Google Cloud IAM users have passwords or active access keys that have not been used within the specified number of days you provided. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_user_inactive_access_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2893",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2894",
    "description": "Verifies if IAM Groups in Google Cloud Platform have at least one IAM User assigned to them.",
    "function_name": "iam_group_user_assignment_required",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2895",
    "description": "Checks if your GCP Identity and Access Management (IAM) users have service account keys that have not been used within the specified number of days you provided. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_service_account_keys_unused",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2896",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2897",
    "description": "Checks if a Google Cloud account is part of Google Cloud Resource Manager Organization. The rule is NON_COMPLIANT if a Google Cloud account is not part of an Organization or the Organization ID does not match rule parameter MasterAccountId.",
    "function_name": "resource_manager_account_organization_membership",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "crm_client.organizations().get(name='organizations/123456789')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2898",
    "description": "Checks if a Google Cloud Storage bucket has an attached IAM policy that prevents deletion of objects. The rule is NON_COMPLIANT if the Cloud Storage bucket does not have IAM policies or has policies without suitable 'Deny' statements (statements with storage.objects.delete and storage.objects.update permissions).",
    "function_name": "storage_bucket_iam_policy_prevent_object_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2899",
    "description": "Checks if a Compute Engine instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the Compute Engine instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2900",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the 'readOnlyRootFilesystem' parameter in the Pod Security Policy or the Pod specification is set to 'false'.",
    "function_name": "container_pod_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2901",
    "description": "Checks if the managed Google Cloud IAM policies you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2902",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2903",
    "description": "Verifies that no IAM users, roles, or groups have inline policies defined in Google Cloud Platform, where a non-compliant status is assigned if any are found.",
    "function_name": "iam_roles_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2904",
    "description": "Checks in each Google Cloud Platform Identity and Access Management (IAM) resource, if a policy Google Resource Name (GRN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy GRN is attached to the IAM resource.",
    "function_name": "iam_policy_grn_not_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2905",
    "description": "Checks whether the IAM policy is attached to a Google Cloud Identity and Access Management (IAM) user, a group with one or more IAM users, or a service account with one or more trusted entities.",
    "function_name": "iam_policy_attached_to_user_group_service_account",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2906",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'allow' with 'roles/owner' over '//cloudresourcemanager.googleapis.com/projects/{project_id}'.",
    "function_name": "iam_policy_no_owner_role_on_project",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/{project_id}')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2907",
    "description": "Checks if GCP IAM policies that you create grant permissions to all actions on individual GCP resources. The rule is NON_COMPLIANT if any customer managed IAM policy allows full access to at least 1 GCP service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2908",
    "description": "Checks if all specified IAM policies are attached to the Google Cloud Identity and Access Management (IAM) role. The rule is NON_COMPLIANT if a specified policy is not attached to the IAM role.",
    "function_name": "iam_role_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2909",
    "description": "Checks if none of your Google Cloud IAM users have roles directly attached. IAM users must inherit permissions from IAM groups or service accounts. The rule is NON_COMPLIANT if there is at least one role that is directly attached to the IAM user.",
    "function_name": "iam_user_no_direct_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2910",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2911",
    "description": "Checks if Google Cloud Search has fine-grained access control enabled. The rule is NON_COMPLIANT if IAM roles and permissions are not properly configured for the Search resources.",
    "function_name": "search_resources_fine_grained_access_control_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2912",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2913",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2914",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_disallow_user_acls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2915",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other GCP projects. For example, the rule checks that the GCS bucket policy does not allow another GCP project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2916",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, federated users, service accounts, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2917",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2918",
    "description": "Checks if the Google Cloud Security Team (GCST) can access your Google Cloud account. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for GCST access is not configured.",
    "function_name": "network_google_cloud_armor_gcst_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2919",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the container specification is set to ‘false’.",
    "function_name": "container_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2920",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP).",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2921",
    "description": "Checks if Google Cloud's Managed Service for Elasticsearch has IAM roles properly configured for access control. The rule is NON_COMPLIANT if IAM roles are not set correctly for the Elasticsearch service.",
    "function_name": "iam_elasticsearch_roles_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2922",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket IAM policy does not allow another Google Cloud project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2923",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2924",
    "description": "Checks if a GCP project is part of an Organization. The rule is NON_COMPLIANT if a GCP project is not part of an Organization or the Organization ID does not match the specified parameter OrganizationId.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2925",
    "description": "Checks if a Google Cloud Storage bucket used for backups has an attached IAM policy which prevents deletion of backup objects. The rule is NON_COMPLIANT if the Storage bucket does not have IAM policies or has policies without a suitable 'Deny' statement (statement with storage.objects.delete, storage.objects.update permissions).",
    "function_name": "storage_bucket_iam_policy_prevent_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2926",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2927",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the 'readOnlyRootFilesystem' parameter in the container specification of the Pod definition is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2928",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2929",
    "description": "Checks if the IAM policies attached to your GCP service accounts and roles do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_service_accounts_roles_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2930",
    "description": "Checks if there are any IAM policies directly attached to GCP service accounts, which would indicate the service accounts have inline policies. The rule is NON_COMPLIANT if a GCP service account has any IAM role directly attached.",
    "function_name": "iam_service_account_no_inline_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2931",
    "description": "Checks in each Google Cloud Identity and Access Management (IAM) resource if a policy (IAM Role or Permission) associated with the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2932",
    "description": "Verifies if the Google Cloud IAM policy is attached to a Google Cloud user, a Google Cloud group with one or more users, or a Google Cloud service account with one or more trusted entities.",
    "function_name": "iam_policy_attached_to_user_or_group_or_service_account",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2933",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy binding includes 'role' that allows '*' permissions to 'allUsers'.",
    "function_name": "iam_policy_no_wildcard_permissions_all_users",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2934",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2935",
    "description": "Checks if all predefined IAM roles specified in the list are assigned to the Google Cloud IAM service account. The rule is NON_COMPLIANT if a predefined role is not assigned to the service account.",
    "function_name": "iam_service_account_predefined_roles_assigned",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2936",
    "description": "Checks if none of your Google Cloud IAM (Identity and Access Management) users have custom roles or permissions assigned directly. IAM users (service accounts) should inherit permissions from IAM groups or organizational policies. The rule is NON_COMPLIANT if there is at least one custom role or permission assigned directly to the IAM user.",
    "function_name": "iam_user_no_direct_custom_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2937",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2938",
    "description": "Checks if Google Cloud Elasticsearch Service instances have fine-grained access control enabled. The rule is NON_COMPLIANT if the fine-grained access control setting is not enabled for the Elasticsearch instance.",
    "function_name": "elasticsearch_instance_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "elasticsearch_client.get_instance(project='proj', instance_id='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2939",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2940",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2941",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_disallow_acl_user_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2942",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.objects.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_blocklist_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2943",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud IAM principals, service accounts, IP addresses, or VPC Service Controls that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2944",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2945",
    "description": "Checks if the Google Cloud Security Operations Center (SOC) can access your Google Cloud account. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for SOC access is not configured.",
    "function_name": "security_operations_center_role_configured",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2946",
    "description": "Checks if a GCP project belongs to a Google Cloud Organization. The rule is NON_COMPLIANT if a GCP project is not part of a Google Cloud Organization or if the Organization ID does not match the specified parameter.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudresourcemanager_v1.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2947",
    "description": "Checks if a backup plan in Google Cloud Platform (GCP) has a resource policy that prevents the deletion of backup snapshots. The rule is NON_COMPLIANT if the backup plan does not have resource policies or has policies without a suitable 'Deny' statement (conditions that restrict deletion operations on the backup resources).",
    "function_name": "compute_backup_plan_prevent_snapshot_deletion",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().getIamPolicy(project='proj', resource='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2948",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM (Identity and Access Management) service account attached to it. The rule is NON_COMPLIANT if no service account is attached to the GCE instance.",
    "function_name": "compute_instance_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2949",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the container specification is set to 'false'.",
    "function_name": "container_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2950",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2951",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, service accounts, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2952",
    "description": "Checks if IAM policies are managed instead of using inline policies. The rule is NON_COMPLIANT if a Google Cloud IAM user, service account, or group has any inline policy instead of only using Google Cloud IAM custom roles and permissions.",
    "function_name": "iam_user_service_account_group_no_inline_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2953",
    "description": "Checks in each GCP Identity and Access Management (IAM) resource if a policy (e.g., IAM Role or IAM Policy) is attached to the IAM resource. The rule is NON_COMPLIANT if the specified policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2954",
    "description": "Checks whether the IAM policy is attached to a GCP user (service account), a Google group containing one or more users, or a GCP role with one or more principals.",
    "function_name": "iam_policy_principal_association",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2955",
    "description": "Checks if Google Cloud Identity and Access Management (IAM) policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer-managed IAM policy binding includes 'role: roles/owner' or any role that grants permissions to all actions over 'resource: /*'.",
    "function_name": "iam_policy_no_universal_owner_role",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2956",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any custom IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2957",
    "description": "Checks if all managed IAM roles specified in the list of IAM policies are attached to the Google Cloud Identity and Access Management (IAM) role. The rule is NON_COMPLIANT if a managed policy is not attached to the IAM role.",
    "function_name": "iam_roles_managed_policy_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2958",
    "description": "Checks if none of your Google Cloud Platform (GCP) IAM users have custom roles or permissions directly attached. IAM users must inherit permissions from IAM groups or predefined roles. The rule is NON_COMPLIANT if there is at least one custom role or permission attached directly to the IAM user.",
    "function_name": "iam_user_no_custom_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2959",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2960",
    "description": "Checks if Google Cloud's Elasticsearch Service (managed by Elastic) domains have fine-grained access control enabled. The rule is NON_COMPLIANT if security features are not enabled for the Elasticsearch Service domain.",
    "function_name": "elastic_domain_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "elastic_client.domains().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2961",
    "description": "Checks if a Google Cloud SQL instance has Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2962",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have Cloud IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2963",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_disallow_acl_user_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2964",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other GCP projects or external accounts. The rule checks that the GCS bucket IAM policy does not allow another GCP project or external account to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_blocklisted_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2965",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, service accounts, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy does not allow public access.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2966",
    "description": "Checks if your Google Cloud Storage bucket IAM policies do not allow other inter-account permissions than the control Google Cloud Storage bucket IAM policy that you provide.",
    "function_name": "storage_bucket_iam_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2967",
    "description": "Checks if the Google Cloud Security Command Center (SCC) can access your Google Cloud project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for SCC access is not configured.",
    "function_name": "security_command_center_access_role_configured",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2968",
    "description": "Checks if a GCP project is part of an organization. The rule is NON_COMPLIANT if a GCP project is not associated with an organization or if the organization ID does not match the rule parameter 'OrganizationId'.",
    "function_name": "iam_project_organization_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "cloudresourcemanager.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2969",
    "description": "Checks if a Google Cloud Backup (GCB) Vault has an attached IAM policy which prevents deletion of backup recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have IAM policies or has policies without appropriate 'deny' conditions.",
    "function_name": "iam_backup_vault_immutable_policy",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2970",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2971",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the container spec is set to 'false'.",
    "function_name": "container_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2972",
    "description": "Checks if the managed GCP Identity and Access Management (IAM) policies do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2973",
    "description": "Verifies that the IAM policies associated with your GCP service accounts and Google groups do not permit actions that are blocked by GCP's key management controls on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in a policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2974",
    "description": "Checks if the IAM policy feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity and Access Management (IAM) user, service account, or IAM group has any inline policies associated with them.",
    "function_name": "iam_user_no_inline_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2975",
    "description": "Checks in each Google Cloud IAM resource, if a policy specified by Resource Name (URN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy URN is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2976",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a Google Group with one or more IAM users, or a Google Service Account with one or more trusted identities.",
    "function_name": "iam_policy_attached_to_trusted_identities",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2977",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'binding' with 'role' that grants 'roles/owner', 'roles/editor', or any other role that has broad permissions over 'allUsers' or 'allAuthenticatedUsers' over 'projects/*'.",
    "function_name": "iam_policy_no_broad_permissions_all_users",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2978",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2979",
    "description": "Checks if all specified IAM roles in Google Cloud have the required IAM policies attached. The rule is NON_COMPLIANT if a required IAM policy is not attached to the role.",
    "function_name": "iam_roles_required_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2980",
    "description": "Checks if none of your Google Cloud IAM users have policies attached. IAM users must inherit permissions from IAM groups or roles. The rule is NON_COMPLIANT if there is at least one policy that is attached to the IAM user.",
    "function_name": "iam_user_no_direct_policy_attachment",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2981",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2982",
    "description": "Checks if Google Cloud Search instances have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM policies do not enforce fine-grained access control for the Cloud Search instance.",
    "function_name": "cloudsearch_instance_fine_grained_access_control_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2983",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2984",
    "description": "Checks if a Google Cloud SQL instance has Cloud IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have Cloud IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2985",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_disallow_acl_user_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2986",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the Google Cloud Storage bucket IAM policy does not allow another Google Cloud project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the Google Cloud Storage bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2987",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, IAM users, service accounts, IP addresses, or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2988",
    "description": "Checks if your Google Cloud Storage bucket permissions do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_permissions_restrict_inter_account",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2989",
    "description": "Checks if the Google Cloud Armor Security Team can access your GCP project. The rule is NON_COMPLIANT if Cloud Armor is enabled but the role for the Security Team access is not configured.",
    "function_name": "network_cloud_armor_security_team_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2990",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud Keys. The rule is NON_COMPLIANT if a running GCE instance is launched with a service account key.",
    "function_name": "compute_instance_no_service_account_key",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2991",
    "description": "Checks whether IAM groups in GCP have at least one IAM member (user/service account)",
    "function_name": "iam_group_has_members",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2992",
    "description": "Checks whether the IAM policy is attached to a Google Cloud Identity and Access Management (IAM) user, or to a group of users, or to a service account with trusted identities.",
    "function_name": "iam_policy_attached_to_trusted_identities",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2993",
    "description": "Checks if the Google Cloud Platform (GCP) root service account (unrestricted access) key is available. The rule is COMPLIANT if the service account key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_root_key",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2994",
    "description": "Verifies if IAM users belong to at least one IAM group in Google Cloud Platform.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/sa')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2995",
    "description": "Checks if the project contains environment variables GOOGLE_APPLICATION_CREDENTIALS. The rule is NON_COMPLIANT when the project environment variables contain plaintext credentials.",
    "function_name": "compute_project_no_plaintext_credentials",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2996",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud key pairs. The rule is NON_COMPLIANT if a running GCE instance is launched with a key pair.",
    "function_name": "compute_instance_no_external_key_pair",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2997",
    "description": "Checks if secrets are passed as container environment variables. The rule is NON_COMPLIANT if 1 or more environment variable key matches a key listed in the 'secretKeys' parameter (excluding environmental variables from other locations such as Google Cloud Storage).",
    "function_name": "container_environment_variables_no_secrets",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2998",
    "description": "Checks whether IAM groups have at least one IAM user in Google Cloud Platform.",
    "function_name": "iam_group_user_membership_required",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_2999",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group of Google Cloud IAM users, or a Google Cloud IAM role with one or more trusted entities.",
    "function_name": "iam_policy_trusted_entities_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3000",
    "description": "Checks if the Google Cloud project has any service account key with Owner role. The rule is COMPLIANT if no service account key with the Owner role exists. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_owner_role_key",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3001",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP). This can be done using the Identity and Access Management (IAM) service to review roles and group memberships.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3002",
    "description": "Checks if Google Secret Manager secret has rotation enabled. The rule also checks an optional maxAllowedRotationFrequency parameter. If specified, the rotation frequency of the secret is compared with the max allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation or if the rotation frequency exceeds the specified maxAllowedRotationFrequency.",
    "function_name": "secretmanager_secret_rotation_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3003",
    "description": "Checks if Google Cloud Secret Manager secrets rotated successfully according to the rotation schedule. Secret Manager monitors the rotation date, and the rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secrets_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3004",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3005",
    "description": "Checks if Google Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3006",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud key pairs. The rule is NON_COMPLIANT if a running GCE instance is launched with a key pair.",
    "function_name": "compute_instance_no_external_key_pairs",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3007",
    "description": "Verifica se os grupos IAM têm pelo menos um usuário IAM.",
    "function_name": "iam_group_user_presence",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3008",
    "description": "Verifies if the IAM policy is attached to a Google Cloud IAM user, a Google Group containing one or more IAM users, or a Google Cloud IAM Role that has one or more trusted identities.",
    "function_name": "iam_policy_attached_to_trusted_identities",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3009",
    "description": "Check if the service account with editor or owner roles has been assigned. The rule is COMPLIANT if such service accounts do not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_no_editor_owner_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3010",
    "description": "Verifies if IAM users are included in at least one IAM group within Google Cloud Platform (GCP).",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/sa')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3011",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using SSH keys. The rule is NON_COMPLIANT if a running GCE instance is launched with a project-wide SSH key.",
    "function_name": "compute_instance_ssh_key_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3012",
    "description": "In Google Cloud Platform (GCP), this can be achieved by checking the IAM policy of a group to see if it contains any IAM members. This involves verifying that each IAM group has at least one user assigned in the IAM roles.",
    "function_name": "iam_group_membership_ensured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().getIamPolicy(resource='group_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3013",
    "description": "Verifies whether the IAM policy is attached to a Google Cloud IAM user, a Google Group that contains one or more IAM users, or a Google IAM role that is associated with one or more service accounts.",
    "function_name": "iam_policy_user_group_role_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3014",
    "description": "Checks if the Google Cloud IAM service account key for the root user exists. The rule is COMPLIANT if the service account key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_service_account_key_absent_for_root",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3015",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP).",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3016",
    "description": "Checks whether IAM groups in Google Cloud Platform have at least one IAM user assigned to them.",
    "function_name": "iam_group_has_user_assigned",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3017",
    "description": "Checks if your GCP Identity and Access Management (IAM) users have passwords or active service account keys that have not been used within the specified number of days. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_users_passwords_keys_unused_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3018",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secrets_accessed_within_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().getIamPolicy(resource='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3019",
    "description": "Checks if a GCP project is part of a Google Cloud Organization. The rule is NON_COMPLIANT if a GCP project is not associated with the organization or if the Organization ID does not match the rule parameter MasterOrganizationId.",
    "function_name": "iam_project_organization_association",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "crm.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3020",
    "description": "Checks if a GCP Backup Policy has suitable IAM policies attached to it to prevent the deletion of backup sources. The rule is NON_COMPLIANT if the Backup Policy does not have IAM policies or has policies without a suitable 'deny' condition (condition with storage.objects.delete, storage.objects.update permissions).",
    "function_name": "iam_backup_policy_deny_condition_enforced",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3021",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM (Identity and Access Management) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3022",
    "description": "Checks if Google Kubernetes Engine (GKE) containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem field in the container spec of GKE Pod definitions is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3023",
    "description": "Verifies that the IAM policies within Google Cloud Platform do not permit disallowed actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any disallowed action is allowed on Google Cloud KMS keys by the IAM policy.",
    "function_name": "kms_keys_iam_policy_no_disallowed_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3024",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on any Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3025",
    "description": "Checks if the IAM policy feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity (GCP IAM) user, IAM role, or IAM group has any inline policy.",
    "function_name": "iam_user_role_group_no_inline_policy",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3026",
    "description": "Checks in each Google Cloud IAM resource if a policy (role or binding) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy is attached to the IAM resource.",
    "function_name": "iam_resource_policy_absence",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/sa')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3027",
    "description": "Checks whether the IAM policy ARN is attached to a user, group, or role with associated members in Google Cloud Platform.",
    "function_name": "iam_policy_arn_attached_to_member",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3028",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer-managed IAM policy binding includes 'role' that grants 'roles/owner' or 'roles/editor' over 'allUsers'.",
    "function_name": "iam_policy_no_roles_owner_editor_allusers",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3029",
    "description": "Checks if Google Cloud IAM roles that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer managed IAM role allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_roles_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3030",
    "description": "Checks if all Google Cloud IAM policies specified in the list of IAM roles are attached to the Google Cloud IAM role. The rule is NON_COMPLIANT if a IAM policy is not attached to the IAM role.",
    "function_name": "iam_role_policies_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3031",
    "description": "Checks if none of your Google Cloud IAM users have roles attached directly. IAM users must inherit permissions from IAM groups or service accounts. The rule is NON_COMPLIANT if there is at least one role that is attached directly to the IAM user.",
    "function_name": "iam_user_roles_inherited",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3032",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3033",
    "description": "Checks if Google Cloud Search has fine-grained access control enabled. The rule is NON_COMPLIANT if security features for Cloud Search are not configured correctly.",
    "function_name": "cloudsearch_access_control_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "cloudsearch_client.settings().get(project='proj', setting='access_control')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3034",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3035",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3036",
    "description": "Checks if Google Cloud Storage Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3037",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket IAM policy does not allow another Google Cloud project to perform any storage.buckets.get and storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3038",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the GCP principals, service accounts, or IP addresses that you provide. The rule is COMPLIANT if a bucket policy (IAM role bindings) is not present.",
    "function_name": "storage_bucket_iam_policy_absent",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3039",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_restrict_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3040",
    "description": "Checks if the Google Cloud Incident Response Team (GCSIRT) can access your GCP project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for GCSIRT access is not configured.",
    "function_name": "network_load_balancer_gcsirt_role_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.loadBalancers().get(project='proj', region='region', loadBalancer='lb')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3041",
    "description": "Checks if a Google Cloud account is part of Google Cloud Resource Manager Organization. The rule is NON_COMPLIANT if a Google Cloud project is not associated with any organization or the organization's ID does not match the specified OrganizationId parameter.",
    "function_name": "resource_manager_project_organization_association",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm_client.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3042",
    "description": "Checks whether only the Google Cloud Platform (GCP) Metadata Server v2 is enabled. This rule is NON_COMPLIANT if the Metadata version is not specified in the instance configuration or if both Metadata v1 and v2 are enabled.",
    "function_name": "compute_instance_metadata_v2_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3043",
    "description": "Checks if a Google Cloud Platform (GCP) Backup Policy has an attached resource-based IAM policy which prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Policy does not have IAM policies or has policies without a suitable 'Deny' statement (statement with roles/storage.admin permissions for backup deletion).",
    "function_name": "iam_backup_policy_prevent_deletion",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3044",
    "description": "Checks if your Google Compute Engine (GCE) instance metadata version is configured with the Enhanced Metadata feature enabled. The rule is NON_COMPLIANT if the metadata access is set to legacy mode.",
    "function_name": "compute_instance_metadata_enhanced_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3045",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud IAM service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3046",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the ReadOnlyRootFilesystem parameter in the container specification of the Pod definition is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem_enforced",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3047",
    "description": "Checks if the managed Google Cloud Identity and Access Management (IAM) policies you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3048",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow forbidden actions on Cloud Key Management Service (KMS) keys. The rule is NON_COMPLIANT if any forbidden action is permitted on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_forbidden_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3049",
    "description": "Checks if the IAM policy feature is not in use. The rule is NON_COMPLIANT if a Google Cloud Identity and Access Management (IAM) user, service account, or IAM group has any IAM policy bindings attached directly to them instead of using predefined roles or custom roles.",
    "function_name": "iam_user_policy_bindings_absent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3050",
    "description": "Checks in each Google Cloud IAM resource if a policy Google Cloud Resource Name (GCRN) in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy GCRN is attached to the IAM resource.",
    "function_name": "iam_policy_disallowed_gcrn_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3051",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group with one or more IAM users, or a Google Cloud IAM role with one or more trusted entities.",
    "function_name": "iam_policy_attachment_compliance",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3052",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer managed IAM policy statement includes 'role' that allows all actions on all resources.",
    "function_name": "iam_policy_no_wildcard_permissions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3053",
    "description": "Checks if Google Cloud IAM policies that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer-managed IAM policy allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_policy_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3054",
    "description": "Checks if all IAM policies specified in the list are attached to the Google Cloud IAM role. The rule is NON_COMPLIANT if a managed policy is not attached to the IAM role.",
    "function_name": "iam_role_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3055",
    "description": "Checks if none of your Google Cloud IAM users have policies attached directly to them. IAM users must inherit permissions from IAM roles or groups. The rule is NON_COMPLIANT if there is at least one policy that is attached to the IAM user.",
    "function_name": "iam_user_no_direct_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3056",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM database authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3057",
    "description": "Checks if Google Cloud Elasticsearch domains have fine-grained access control enabled. The rule is NON_COMPLIANT if IAM roles and permissions for the Elasticsearch Service are not configured properly to enforce fine-grained access control.",
    "function_name": "elasticsearch_domain_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3058",
    "description": "Checks if a Google Cloud SQL instance has IAM authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3059",
    "description": "Checks if a Google Cloud SQL instance has Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3060",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_disallow_acl_user_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3061",
    "description": "Checks if a Google Cloud Storage (GCS) bucket IAM policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other GCP projects. For example, the rule checks that the GCS bucket IAM policy does not allow another GCP project to perform any storage.buckets.get or storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket IAM policy.",
    "function_name": "storage_bucket_iam_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3062",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted to specified Google Cloud principals, service accounts, user accounts, or IP addresses provided. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3063",
    "description": "Checks if your Google Cloud Storage bucket policies do not allow other inter-account permissions than the control Google Cloud Storage bucket policy that you provide.",
    "function_name": "storage_bucket_policy_no_inter_account_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3064",
    "description": "Checks if the Google Cloud Security Team can access your GCP project. The rule is NON_COMPLIANT if Google Cloud Armor is enabled but the role for Security Team access is not configured.",
    "function_name": "security_project_role_configured_for_team_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/proj/roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3065",
    "description": "Checks if active IAM service account keys are rotated within the number of days specified in maxAccessKeyAge. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_key_rotation_within_max_age",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3066",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maximumAllowedRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret does not have a scheduled rotation. The rule is also NON_COMPLIANT if the rotation frequency exceeds the maximumAllowedRotationFrequency parameter.",
    "function_name": "secretmanager_secret_rotation_enabled_within_max_frequency",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3067",
    "description": "Checks if Google Cloud Secret Manager secrets rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3068",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3069",
    "description": "Checks if running Google Compute Engine (GCE) instances are launched using Google Cloud key pairs. The rule is NON_COMPLIANT if a running GCE instance is launched with a key pair.",
    "function_name": "compute_instance_no_external_key_pair",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3070",
    "description": "Checks whether IAM groups in Google Cloud Platform have at least one IAM user associated with them.",
    "function_name": "iam_group_has_user_association",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3071",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group of IAM users, or a service account with one or more trusted entities.",
    "function_name": "iam_policy_trusted_entities_attached",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3072",
    "description": "Checks if the root user access key is available. The rule is COMPLIANT if the user access key does not exist. Otherwise, NON_COMPLIANT.",
    "function_name": "iam_user_root_access_key_absent",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@project.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3073",
    "description": "Checks whether IAM users are members of at least one IAM group in Google Cloud Platform (GCP). This can be achieved using Cloud IAM to manage roles and permissions associated with groups and users.",
    "function_name": "iam_user_membership_in_group",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().memberships().list(parent='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3074",
    "description": "Checks if HTTP to HTTPS redirection is configured on all HTTP(S) Load Balancers in Google Cloud Platform. The rule is NON_COMPLIANT if one or more HTTP(S) Load Balancer configurations do not have HTTP to HTTPS redirection configured. The rule is also NON_COMPLIANT if one or more HTTP(S) Load Balancer configurations forward traffic to an HTTP listener instead of redirecting to HTTPS.",
    "function_name": "network_load_balancer_https_redirect_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3075",
    "description": "Checks if all methods in Google Cloud API Gateway APIs have cache enabled and cache encrypted. The rule is NON_COMPLIANT if any method in a Google Cloud API Gateway API is not configured to cache or the cache is not encrypted.",
    "function_name": "apigateway_methods_cache_encrypted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.projects().locations().apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3076",
    "description": "Checks if a Google BigQuery dataset is encrypted at rest. The rule is NON_COMPLIANT if encryption of data at rest is not enabled for a BigQuery dataset.",
    "function_name": "bigquery_dataset_encryption_at_rest_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3077",
    "description": "Checks if a Cloud Storage backup snapshot is encrypted. The rule is NON_COMPLIANT if the snapshot is not encrypted.",
    "function_name": "storage_snapshot_encryption_required",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_blob(blob_name).kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3078",
    "description": "Checks if Google Cloud CDN distributions are using deprecated SSL protocols for HTTPS communication between CDN edge locations and custom origins. This rule is NON_COMPLIANT for a Google Cloud CDN distribution if any 'OriginSslProtocols' includes 'SSLv3'.",
    "function_name": "network_cdn_origin_ssl_protocols_non_deprecated",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.cdn().get(project='proj', cdn='cdn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3079",
    "description": "Checks if Google Cloud CDN is encrypting traffic to custom origins. The rule is NON_COMPLIANT if 'OriginProtocol' is 'HTTP' or if 'OriginProtocol' is 'MATCH_VIEWER' and 'ViewerProtocol' is 'ALLOW_ALL'.",
    "function_name": "network_cdn_traffic_encryption_custom_origins",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3080",
    "description": "Checks if your Google Cloud CDN configurations use HTTPS. The rule is NON_COMPLIANT if the value of 'https' is not enforced for the backend services serving content.",
    "function_name": "network_cdn_https_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3081",
    "description": "Checks if Google Cloud Logging (Stackdriver Logging) log sinks are encrypted with a specified Google Cloud KMS key or any KMS key. The rule is NON_COMPLIANT if a log sink is not encrypted with a KMS key or is encrypted with a KMS key that is not supplied in the rule parameter.",
    "function_name": "logging_log_sinks_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3082",
    "description": "Checks if Google Cloud Audit Logs is configured to use Cloud KMS for encryption. The rule is COMPLIANT if the KmsKeyId for the service account is defined.",
    "function_name": "logging_auditlogs_encryption_kms_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3083",
    "description": "Checks if a Google Cloud Build configuration has encryption enabled for all of its artifacts. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' for any artifact configurations in the build triggers.",
    "function_name": "cloudbuild_artifact_encryption_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3084",
    "description": "Checks if the project contains environment variables GOOGLE_CLOUD_ACCESS_KEY_ID and GOOGLE_CLOUD_SECRET_ACCESS_KEY. The rule is NON_COMPLIANT when the project environment variables contain plaintext credentials.",
    "function_name": "compute_project_no_plaintext_credentials",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3085",
    "description": "Checks if a Google Cloud Build (GCB) project configured with Google Cloud Storage (GCS) logs has encryption enabled for its logs. The rule is NON_COMPLIANT if 'encryptionDisabled' is set to 'true' in the GCS logs configuration of a Cloud Build project.",
    "function_name": "cloudbuild_gcs_logs_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3086",
    "description": "Checks if Google Cloud Datastore instances are encrypted. The rule is NON_COMPLIANT if a Datastore instance is not encrypted.",
    "function_name": "datastore_instance_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "datastore_client.get(project='proj', namespace='namespace', kind='kind', id='id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3087",
    "description": "Checks if your Google Cloud Firestore database has network encryption enabled. The rule is NON_COMPLIANT if a Firestore database is not encrypted by transport layer security (TLS).",
    "function_name": "firestore_database_network_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3088",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) endpoints are configured with an SSL connection. The rule is NON_COMPLIANT if Google Cloud DMS does not have an SSL connection configured.",
    "function_name": "dms_endpoints_ssl_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3089",
    "description": "Checks if Google Cloud Database Migration Service (GCDMS) endpoints for Redis data stores are enabled for TLS/SSL encryption of data communicated with other endpoints. The rule is NON_COMPLIANT if TLS/SSL encryption is not enabled.",
    "function_name": "datamigration_redis_endpoints_tls_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "datamigration_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3090",
    "description": "Checks if storage encryption is enabled for Google Cloud Firestore. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "firestore_database_storage_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/proj/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3091",
    "description": "Checks if Google Cloud Firestore is encrypted with Google Cloud Key Management Service (KMS). The rule is NON_COMPLIANT if the Google Cloud Firestore database is not encrypted with Google Cloud KMS. The rule is also NON_COMPLIANT if the specified Google Cloud KMS key is not present in the kmsKeyArns input parameter.",
    "function_name": "firestore_database_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3092",
    "description": "Checks if the Google Cloud Firestore databases are encrypted and checks their status. The rule is COMPLIANT if the status is enabled or enabling.",
    "function_name": "firestore_databases_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.projects().databases().get(name='projects/my-project/databases/(default)')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3093",
    "description": "Checks if Google Cloud Persistent Disk encryption is enabled by default. The rule is NON_COMPLIANT if the encryption is not enabled.",
    "function_name": "compute_disk_default_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3094",
    "description": "Checks if secrets are passed as environment variables in Google Cloud Run or Google Kubernetes Engine (GKE). The rule is NON_COMPLIANT if 1 or more environment variable key matches a key listed in the 'secretKeys' parameter, excluding variables from other sources like Google Cloud Storage.",
    "function_name": "container_environment_variables_no_secrets",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3095",
    "description": "Checks if Google Cloud Filestore is configured to encrypt the file data using Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if the 'encryptionKey' parameter in the Filestore instance configuration does not match the specified KMS key.",
    "function_name": "filestore_instance_encryption_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3096",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud KMS. The rule is NON_COMPLIANT if a GKE cluster does not have an encryption configuration for secrets or if the encryption configuration does not specify secrets as a resource.",
    "function_name": "container_gke_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3097",
    "description": "Checks if Google Kubernetes Engine (GKE) clusters are configured to have Kubernetes secrets encrypted using Google Cloud Key Management Service (KMS) keys.",
    "function_name": "container_gke_clusters_secrets_encrypted_with_kms",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3098",
    "description": "Checks if Google Cloud Memorystore for Redis instances have encryption-at-rest enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'redisConfig.enableAuth' is disabled or if the 'redisConfig.kmsKeyName' does not match the approvedKmsKeyArns parameter.",
    "function_name": "memorystore_redis_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3099",
    "description": "Checks if Google Cloud Memorystore for Redis instances have encryption-in-transit enabled. The rule is NON_COMPLIANT for a Memorystore instance if 'transitEncryptionMode' is set to 'DISABLED'.",
    "function_name": "memorystore_redis_encryption_in_transit_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "redis_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3100",
    "description": "Checks if Google Cloud Search instances have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the encryption settings are not properly configured.",
    "function_name": "search_instances_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3101",
    "description": "Check if Google Cloud Elasticsearch (part of Google Cloud's managed services) has node-to-node encryption enabled. The rule should be NON_COMPLIANT if node-to-node encryption is not enabled for the Elasticsearch deployment.",
    "function_name": "dataproc_elasticsearch_node_to_node_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3102",
    "description": "Checks if the TCP/UDP Load Balancers use SSL certificates provided by Google Cloud Certificate Manager. To use this rule, ensure the Load Balancer is set up for SSL or HTTPS traffic. This rule is only applicable to TCP/UDP Load Balancers. This rule does not check Application Load Balancers.",
    "function_name": "network_tcp_udp_load_balancer_ssl_certificate_google_managed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.targetTcpProxies().get(project='proj', targetTcpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3103",
    "description": "Checks whether your Cloud Load Balancer SSL policies are configured with a custom policy. The rule is only applicable if there are SSL listeners for the Cloud Load Balancer.",
    "function_name": "network_load_balancer_ssl_custom_policy_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3104",
    "description": "Checks if your Google Cloud Platform Load Balancer SSL policies use a predefined policy. The rule is NON_COMPLIANT if the Google Cloud Load Balancer HTTPS/SSL listener's policy does not equal the value of the parameter 'predefinedPolicyName'.",
    "function_name": "network_load_balancer_ssl_policy_predefined",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3105",
    "description": "Checks if your Google Cloud Load Balancer is configured with SSL or HTTPS listeners. The rule is NON_COMPLIANT if a listener is not configured with SSL or HTTPS.",
    "function_name": "network_load_balancer_ssl_https_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3106",
    "description": "Checks if Google Cloud Dataproc clusters have Kerberos enabled. The rule is NON_COMPLIANT if a security configuration is not attached to the cluster or the security configuration does not satisfy the specified rule parameters.",
    "function_name": "dataproc_cluster_kerberos_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3107",
    "description": "Checks if attached Google Persistent Disks are encrypted and optionally are encrypted with a specified Customer Managed Encryption Key (CMEK). The rule is NON_COMPLIANT if attached Persistent Disks are unencrypted or are encrypted with a CMEK not in the supplied parameters.",
    "function_name": "compute_persistent_disks_encrypted_with_cmke",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3108",
    "description": "Checks if Google Cloud Pub/Sub topics are encrypted at rest with Google-managed encryption. The rule is NON_COMPLIANT for a Pub/Sub topic if 'Encryption' is not configured.",
    "function_name": "pubsub_topic_encryption_google_managed",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3109",
    "description": "Checks if a Google Cloud Pub/Sub topic enforces encryption in transit using HTTPS (TLS) when communicating with subscribers. The rule is NON_COMPLIANT if plain text communication is enabled for connections to the topic.",
    "function_name": "pubsub_topic_encryption_in_transit_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3110",
    "description": "Checks if storage encryption is enabled for your Google Cloud Spanner instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "spanner_instance_storage_encryption_enabled",
    "service_category": "Compute|Storage|BigQuery|IAM|Security|Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3111",
    "description": "Checks if a Cloud SQL instance in GCP has backups encrypted. The rule is NON_COMPLIANT if a Cloud SQL instance does not have backups encrypted.",
    "function_name": "sql_instance_backups_encrypted",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3112",
    "description": "Checks if Google Cloud OpenSearch domains have encryption at rest configuration enabled. The rule is NON_COMPLIANT if the encryption at rest options are not enabled.",
    "function_name": "opensearch_domain_encryption_at_rest_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "opensearch_client.get_domain_config(DomainName='domain_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3113",
    "description": "Checks whether connections to Google Cloud Search domains are using HTTPS. The rule is NON_COMPLIANT if the Google Cloud Search domain 'EnforceHTTPS' is not 'true' or is 'true' and 'TLSecurityPolicy' is not in 'securityPolicies'.",
    "function_name": "search_domain_https_enforced",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "search_client.domains().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3114",
    "description": "Check if Google Cloud Search nodes are encrypted end to end. The rule is NON_COMPLIANT if the node-to-node encryption is not enabled on the search service.",
    "function_name": "compute_search_nodes_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3115",
    "description": "Checks if a Google Cloud SQL instance is encrypted at rest. The rule is NON_COMPLIANT if a Google Cloud SQL instance is not encrypted at rest.",
    "function_name": "sql_instance_encryption_at_rest",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3116",
    "description": "Checks if Google Cloud SQL database snapshots are encrypted. The rule is NON_COMPLIANT if the Google Cloud SQL database snapshots are not encrypted.",
    "function_name": "sql_snapshots_encrypted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3117",
    "description": "Checks if storage encryption is enabled for your Google Cloud SQL instances. The rule is NON_COMPLIANT if storage encryption is not enabled.",
    "function_name": "sql_instances_storage_encryption_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3118",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or if a dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3119",
    "description": "Checks if Google BigQuery datasets are using a specified Google Cloud Key Management Service (Cloud KMS) key for encryption. The rule is COMPLIANT if encryption is enabled and the dataset is encrypted with the key provided. The rule is NON_COMPLIANT if the dataset is not encrypted or encrypted with another key.",
    "function_name": "bigquery_dataset_encryption_with_kms_key",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3120",
    "description": "Checks if Google BigQuery requires TLS/SSL encryption for connections. The rule is NON_COMPLIANT if any Google BigQuery service does not enforce TLS/SSL encryption for client connections.",
    "function_name": "bigquery_service_enforce_tls_ssl",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_service_account_email(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3121",
    "description": "Checks if your Google Cloud Storage bucket has default object encryption enabled or if the bucket's IAM policies explicitly deny write access without using encryption such as Google-managed encryption keys. The rule is NON_COMPLIANT if your Google Cloud Storage bucket is not encrypted by default.",
    "function_name": "storage_bucket_default_encryption_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).default_kms_key_name"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3122",
    "description": "Checks if Google Cloud Storage (GCS) buckets have policies that require requests to use SSL/TLS. The rule is NON_COMPLIANT if any GCS bucket has policies allowing HTTP requests.",
    "function_name": "storage_bucket_enforce_ssl_tls",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3123",
    "description": "Checks if the Google Cloud Storage buckets are encrypted with Google Cloud KMS. The rule is NON_COMPLIANT if the Cloud Storage bucket is not encrypted with a Google Cloud KMS key.",
    "function_name": "storage_bucket_encrypted_with_kms",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3124",
    "description": "Checks if Google Cloud Key Management Service (GCP KMS) key is configured for a Google Cloud AI Platform endpoint configuration. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the Google Cloud AI Platform endpoint configuration.",
    "function_name": "ai_platform_endpoint_kms_key_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "ai_platform_client.projects().locations().endpoints().get(name='projects/proj/locations/loc/endpoints/endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3125",
    "description": "Checks if a Google Cloud Key Management Service (GCP KMS) key is configured for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if 'kmsKeyName' is not specified for the AI Platform Notebook instance.",
    "function_name": "ai_platform_notebook_kms_key_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3126",
    "description": "Checks if all secrets in Google Cloud Secret Manager are encrypted using Google-managed encryption keys or a customer-managed key created in Google Cloud Key Management Service (KMS). The rule is COMPLIANT if a secret is encrypted using a customer-managed key. This rule is NON_COMPLIANT if a secret is encrypted using Google-managed encryption keys.",
    "function_name": "secretmanager_secret_encryption_customer_managed_key",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3127",
    "description": "Checks if Pub/Sub topics are encrypted with Google Cloud Key Management Service (Google Cloud KMS). The rule is NON_COMPLIANT if a Pub/Sub topic is not encrypted with Google Cloud KMS. Optionally, specify the key resource names, the key aliases, or the key IDs for the rule to check.",
    "function_name": "pubsub_topic_encryption_with_kms",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "pubsub_client.projects().topics().get(topic='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3128",
    "description": "Checks if a GCP project is part of an Organization. The rule is NON_COMPLIANT if a GCP project is not attached to a GCP Organization or the Organization ID does not match rule parameter OrganizationId.",
    "function_name": "iam_project_organization_membership",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "crm.projects().get(projectId='project-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3129",
    "description": "Checks if a Backup Vault in GCP has an attached IAM policy which prevents deletion of recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have IAM policies or has policies without a suitable 'Deny' statement (statement with the permissions backup.deleteRecoveryPoint, backup.updateRecoveryPointLifecycle, and backup.putBackupVaultAccessPolicy).",
    "function_name": "iam_backup_vault_immutable_policy",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project', body={})"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3130",
    "description": "Checks if a Google Compute Engine (GCE) instance has a Google Cloud Identity and Access Management (IAM) service account attached to it. The rule is NON_COMPLIANT if no IAM service account is attached to the GCE instance.",
    "function_name": "compute_instance_iam_service_account_attached",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3131",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem parameter in the Pod security context is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3132",
    "description": "Checks if the managed Google Cloud IAM policies that you create do not allow blocked actions on Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on Google Cloud KMS keys by the managed IAM policy.",
    "function_name": "iam_policy_disallow_blocked_kms_actions",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3133",
    "description": "Checks if the IAM policies attached to your Google Cloud IAM users, roles, and groups do not allow blocked actions on all Google Cloud KMS keys. The rule is NON_COMPLIANT if any blocked action is allowed on all Google Cloud KMS keys in an IAM policy.",
    "function_name": "iam_policy_disallow_blocked_actions_on_kms_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='roles/roleName')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3134",
    "description": "Checks if IAM policies are not inline policies. The rule is NON_COMPLIANT if a Google Cloud IAM user, IAM role, or IAM group has any inline policy associated with it.",
    "function_name": "iam_user_role_group_no_inline_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3135",
    "description": "Checks in each Google Cloud Identity and Access Management (IAM) resource if a policy resource name (policy ARN equivalent) specified in the input parameter is attached to the IAM resource. The rule is NON_COMPLIANT if the policy resource name is attached to the IAM resource.",
    "function_name": "iam_resource_policy_attachment_non_compliant",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3136",
    "description": "Checks whether the IAM policy is attached to a Google Cloud IAM user, a group with one or more IAM users, or a service account (role) with one or more trusted identities.",
    "function_name": "iam_policy_attached_to_user_or_group_or_service_account",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3137",
    "description": "Checks if Google Cloud IAM policies that you create have Allow statements that grant permissions to all actions on all resources. The rule is NON_COMPLIANT if any customer-managed IAM policy statement includes 'role': 'roles/owner' or grants 'allUser' permissions over 'allResources'.",
    "function_name": "iam_policy_no_owner_or_alluser_permissions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3138",
    "description": "Checks if Google Cloud IAM roles that you create grant permissions to all actions on individual Google Cloud resources. The rule is NON_COMPLIANT if any customer managed IAM role allows full access to at least 1 Google Cloud service.",
    "function_name": "iam_role_no_full_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3139",
    "description": "Checks if all specified IAM policies are attached to the Google Cloud IAM Service Account. The rule is NON_COMPLIANT if a policy is not attached to the Service Account.",
    "function_name": "iam_service_account_policies_attached",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3140",
    "description": "Checks if none of your Google Cloud IAM users have policies directly attached. IAM users must inherit permissions from IAM groups or roles. The rule is NON_COMPLIANT if there is at least one policy attached to the IAM user.",
    "function_name": "iam_user_no_direct_policies",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3141",
    "description": "Checks if a Google Cloud Spanner instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud Spanner instance does not have IAM database authentication enabled.",
    "function_name": "spanner_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "spanner_client.instance(instance_id).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3142",
    "description": "Checks if Google Cloud's Elasticsearch Service (managed by Elastic) domains have fine-grained access control enabled. The rule is NON_COMPLIANT if fine-grained access control is not enabled for the Elasticsearch domain.",
    "function_name": "elastic_domain_fine_grained_access_control_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "elastic_client.domains().get(project='proj', domain='domain')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3143",
    "description": "Checks if a Google Cloud SQL instance has IAM database authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3144",
    "description": "Checks if a Google Cloud SQL instance has Google Cloud Identity and Access Management (IAM) authentication enabled. The rule is NON_COMPLIANT if a Google Cloud SQL instance does not have IAM authentication enabled.",
    "function_name": "sql_instance_iam_authentication_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3145",
    "description": "Checks if Google Cloud Storage (GCS) Buckets allow user permissions through access control lists (ACLs). The rule is NON_COMPLIANT if ACLs are configured for user access in Google Cloud Storage Buckets.",
    "function_name": "storage_bucket_no_user_acl",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).acl"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3146",
    "description": "Checks if a Google Cloud Storage (GCS) bucket policy does not allow blocklisted bucket-level and object-level actions on resources in the bucket for principals from other Google Cloud projects. For example, the rule checks that the GCS bucket policy does not allow another Google Cloud project to perform any storage.objects.get and storage.objects.delete actions on any object in the bucket. The rule is NON_COMPLIANT if any blocklisted actions are allowed by the GCS bucket policy.",
    "function_name": "storage_bucket_policy_restrict_cross_project_actions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3147",
    "description": "Checks that the access granted by the Google Cloud Storage bucket is restricted by any of the Google Cloud principals, IAM roles, service accounts, IP addresses, or VPNs that you provide. The rule is COMPLIANT if a bucket policy is not present.",
    "function_name": "storage_bucket_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3148",
    "description": "Verifies that your Google Cloud Storage bucket policies do not permit inter-project permissions beyond the specified control Cloud Storage bucket policy.",
    "function_name": "storage_bucket_policy_no_interproject_permissions",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3149",
    "description": "Checks if the Google Cloud Security Operations team can access your Google Cloud account. The rule is NON_COMPLIANT if Cloud Armor is enabled but the role for Security Operations team access is not configured.",
    "function_name": "network_cloud_armor_security_ops_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3150",
    "description": "Checks if active IAM service account keys are rotated (changed) within the number of days specified in keyRotationPeriod. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_period",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3151",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled and verifies the rotation frequency against the maximum allowed frequency specified. The rule is NON_COMPLIANT if the secret is not scheduled for rotation or if the rotation frequency exceeds the given maximum allowed frequency.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3152",
    "description": "Checks if Google Cloud Secret Manager secrets are rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3153",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/project_id/secrets/secret_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3154",
    "description": "Checks if the account password policy for Google Cloud Identity users meets the specified requirements indicated in the parameters. The rule is NON_COMPLIANT if the account password policy does not meet the specified requirements.",
    "function_name": "iam_identity_password_policy_compliance",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3155",
    "description": "Checks if active IAM access keys are rotated (changed) within the number of days specified in maxAccessKeyAge (default 90 days). The rule is NON_COMPLIANT if access keys are not rotated within the specified time period.",
    "function_name": "iam_access_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3156",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maxAllowedRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation or if the rotation frequency exceeds the specified maxAllowedRotationFrequency.",
    "function_name": "secretmanager_secret_rotation_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3157",
    "description": "Checks if Google Cloud Secret Manager secrets rotated successfully according to the rotation schedule. Google Cloud Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3158",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3159",
    "description": "Checks if active IAM service account keys are rotated (changed) within the number of days specified in maxKeyAge. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3160",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maximumAllowedRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation. The rule is also NON_COMPLIANT if the rotation frequency is higher than the specified maximumAllowedRotationFrequency parameter.",
    "function_name": "secretmanager_secret_rotation_enabled_with_max_frequency",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3161",
    "description": "Checks if GCP Secret Manager secrets are rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3162",
    "description": "Checks if Google Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3163",
    "description": "Checks if the Google Cloud Identity and Access Management (IAM) users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "function_name": "iam_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3164",
    "description": "Checks if Google Cloud multi-factor authentication (MFA) is enabled for all Google Cloud Identity and Access Management (IAM) users that use a console password. The rule is COMPLIANT if MFA is enabled.",
    "function_name": "iam_users_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3165",
    "description": "Checks if your GCP account is enabled to use multi-factor authentication (MFA) for signing in with the root service account. The rule is NON_COMPLIANT if any virtual MFA devices are allowed for root service account sign-ins.",
    "function_name": "iam_service_account_mfa_enabled_root",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@project.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3166",
    "description": "Verifies if the Google Cloud Platform (GCP) service account used has multi-factor authentication (MFA) enabled for enhanced security. The evaluation returns NON_COMPLIANT if the service account does not have MFA set up.",
    "function_name": "iam_service_account_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3167",
    "description": "Checks if Object Versioning is enabled in Google Cloud Storage buckets. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3168",
    "description": "Checks if the Google Cloud Identity and Access Management (IAM) users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "function_name": "iam_users_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3169",
    "description": "Checks if Google Cloud Platform (GCP) multi-factor authentication (MFA) is enabled for all Google Identity users that use a console password. The rule is COMPLIANT if MFA is enabled.",
    "function_name": "iam_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3170",
    "description": "Checks if your GCP account is enabled to use multi-factor authentication (MFA) for Google Cloud Platform accounts. The rule is NON_COMPLIANT if any accounts can sign in without a valid MFA setup.",
    "function_name": "iam_account_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3171",
    "description": "Checks if the root user of your GCP account requires multi-factor authentication for console sign-in. The rule is NON_COMPLIANT if the Google Cloud Platform (GCP) root account user does not have multi-factor authentication (MFA) enabled.",
    "function_name": "iam_root_user_mfa_required",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@your-project-id.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3172",
    "description": "Checks if Object Versioning is enabled in Google Cloud Storage (GCS) buckets. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3173",
    "description": "Checks if Google Cloud IAM users have multi-factor authentication (MFA) enabled. The rule is NON_COMPLIANT if MFA is not enabled for at least one IAM user.",
    "function_name": "iam_user_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/email')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3174",
    "description": "Checks if Google Cloud Platform (GCP) multi-factor authentication (MFA) is enabled for all Google Cloud Identity users. The rule is COMPLIANT if MFA is enabled.",
    "function_name": "iam_identity_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3175",
    "description": "Checks if your Google Cloud Platform (GCP) account is enabled to use multi-factor authentication (MFA) for the root user. The rule is NON_COMPLIANT if any virtual MFA devices are allowed for signing in with the administrator account.",
    "function_name": "iam_account_mfa_enabled_root_user",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@your-project-id.iam.gserviceaccount.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3176",
    "description": "Checks if the root user of your GCP account requires multi-factor authentication for console sign-in. The rule is NON_COMPLIANT if the Google Cloud Identity root account user does not have multi-factor authentication (MFA) enabled.",
    "function_name": "iam_root_user_mfa_required",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/root@domain.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3177",
    "description": "Checks if Object Versioning is enabled on Google Cloud Storage (GCS) buckets and requires additional security measures for delete operations. The rule is NON_COMPLIANT if Object Versioning is not enabled.",
    "function_name": "storage_bucket_object_versioning_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3178",
    "description": "Checks if active IAM service account keys are rotated (changed) within the number of days specified in maxAccessKeyAge. The rule is NON_COMPLIANT if service account keys are not rotated within the specified time period. The default value is 90 days.",
    "function_name": "iam_service_account_keys_rotated_within_max_age",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3179",
    "description": "Verifies if the organization’s Google Cloud Identity password policy adheres to specified requirements for users. The rule is NON_COMPLIANT if the password policy does not comply with these requirements.",
    "function_name": "iam_identity_password_policy_compliance",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3180",
    "description": "Checks if Google Cloud Secret Manager secret has rotation enabled. The rule also checks an optional maxRotationFrequency parameter. If the parameter is specified, the rotation frequency of the secret is compared with the maximum allowed frequency. The rule is NON_COMPLIANT if the secret is not scheduled for rotation. The rule is also NON_COMPLIANT if the rotation frequency is higher than the specified maxRotationFrequency parameter.",
    "function_name": "secretmanager_secret_rotation_enabled_max_frequency",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3181",
    "description": "Checks if Google Cloud Secret Manager secrets are rotated successfully according to the rotation schedule. Secret Manager calculates the date the rotation should happen. The rule is NON_COMPLIANT if the date passes and the secret isn't rotated.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3182",
    "description": "Checks if Google Cloud Secret Manager secrets have been rotated in the past specified number of days. The rule is NON_COMPLIANT if a secret has not been rotated for more than maxDaysSinceRotation number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_rotation_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/my-project/secrets/my-secret')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3183",
    "description": "Checks if a backup vault has an attached IAM policy that prevents deletion of backup recovery points. The rule is NON_COMPLIANT if the Backup Vault does not have IAM policies or has policies lacking a suitable 'Deny' statement for deleting backups.",
    "function_name": "iam_backup_vault_iam_policy_prevent_deletion",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3184",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) instances are publicly accessible. The rule is NON_COMPLIANT if the 'public' option is set to true.",
    "function_name": "dms_instance_public_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3185",
    "description": "Checks if Google Cloud Firestore snapshots are public. The rule is NON_COMPLIANT if any Google Cloud Firestore snapshots are public.",
    "function_name": "firestore_snapshot_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('snapshots').document('snapshot_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3186",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots have permissions that allow public access.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3187",
    "description": "Checks if Google Kubernetes Engine (GKE) Pods only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the readOnlyRootFilesystem field in the Pod security context is set to 'false'.",
    "function_name": "container_pod_readonly_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3188",
    "description": "Checks if Google Cloud Filestore instances are configured to enforce a root directory. The rule is NON_COMPLIANT if the root directory is set to '/' (default root directory of the file system).",
    "function_name": "filestore_instance_enforce_non_root_directory",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3189",
    "description": "Checks if Google Cloud Filestore (GCP equivalent of Amazon EFS) access points are configured to enforce a user identity. The rule is NON_COMPLIANT if 'IAM permissions' are not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "function_name": "filestore_access_points_enforce_user_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3190",
    "description": "Checks if a Google Cloud account has VPC firewall rules set to block public access. The rule is NON_COMPLIANT if 'allowIngressFromAll' is true, or if true, ports other than Port 22 are open to ingress traffic from any source.",
    "function_name": "network_vpc_firewall_block_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3191",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3192",
    "description": "Checks if a Google Cloud SQL database instance snapshot is shared publicly. The rule is NON_COMPLIANT if any existing and new Cloud SQL snapshot is shared publicly.",
    "function_name": "sql_instance_snapshot_no_public_access",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3193",
    "description": "Checks if the Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the `ipConfiguration.requireSsl` field is false and there are any public IP addresses assigned to the instance.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3194",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3195",
    "description": "Checks if Google BigQuery datasets do not have public access. The rule is NON_COMPLIANT if the dataset's 'access' configuration includes entries that grant 'allUsers' or 'allAuthenticatedUsers' permissions.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3196",
    "description": "Checks if Google Cloud Storage (GCS) bucket access settings have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3197",
    "description": "Verifies if the necessary public access prevention settings are applied at the project level. The rule is considered NON_COMPLIANT only when the specified settings do not align with the corresponding settings in the configuration item.",
    "function_name": "storage_project_public_access_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3198",
    "description": "Checks if the required public access prevention settings are configured at the project level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3199",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket access control settings allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3200",
    "description": "Checks if Object Versioning is enabled and if Object Versioning is configured to require the 'Object Versioning' actions to be performed with the appropriate IAM policies in Google Cloud Storage (GCS). The rule is NON_COMPLIANT if these configurations are not met.",
    "function_name": "storage_bucket_object_versioning_enabled_iam_configured",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3201",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule evaluates the Uniform Bucket-Level Access settings, the bucket IAM policies, and ACLs to ensure they are properly configured to prevent public access.",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3202",
    "description": "Checks if your Google Cloud Storage (GCS) buckets do not allow public write access. The rule checks the Bucket IAM policies, Uniform bucket-level access settings, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3203",
    "description": "Checks if direct internet access is disabled for a Google AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_no_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3204",
    "description": "Checks if Google Cloud Platform (GCP) Deployment Manager configurations owned by the account are public. The rule is NON_COMPLIANT if Deployment Manager configurations with the owner 'Self' are public.",
    "function_name": "deployment_manager_configurations_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3205",
    "description": "Checks if Google Cloud Endpoints APIs are of the type specified in the rule parameter endpointConfigurationType. The rule returns NON_COMPLIANT if the REST API does not match the endpoint type configured in the rule parameter.",
    "function_name": "endpoints_api_endpoint_configuration_type_compliant",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.apis().get(project='proj', api='api_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3206",
    "description": "Checks if a Cloud Endpoints API service uses an SSL certificate. The rule is NON_COMPLIANT if the API service does not have an associated SSL certificate.",
    "function_name": "network_endpoints_ssl_certificate_required",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_services_client.endpoints().get(project='proj', endpoint='endpoint')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3207",
    "description": "Checks if Google Cloud App Engine services are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT for a Google Cloud App Engine service if it is not associated with a security policy.",
    "function_name": "appengine_service_security_policy_association",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "appengine_client.apps().services().get(appsId='app', servicesId='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3208",
    "description": "Checks if Google Cloud CDN distributions are associated with Google Cloud Armor security policies. The rule is NON_COMPLIANT if a Cloud CDN distribution is not associated with a Cloud Armor security policy.",
    "function_name": "network_cdn_associated_with_armor_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.urlMaps().get(project='proj', urlMap='url_map')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3209",
    "description": "Checks if the SSL certificate associated with a Google Cloud CDN is the default SSL certificate. The rule is NON_COMPLIANT if a Cloud CDN uses the default SSL certificate.",
    "function_name": "network_cdn_ssl_certificate_custom",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3210",
    "description": "Checks if the Cloud Source Repositories URL contains sign-in credentials or not. The rule is NON_COMPLIANT if the URL contains any sign-in information and COMPLIANT if it doesn't.",
    "function_name": "source_repositories_url_no_signin_credentials",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "source_client.projects().repos().get(name='projects/proj/repos/repo')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3211",
    "description": "Checks if Google Cloud Database Migration Service (GCP DMS) migration jobs are public. The rule is NON_COMPLIANT if the PubliclyAccessible field is set to true.",
    "function_name": "dms_migration_jobs_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().migrationJobs().get(name='projects/proj/locations/loc/migrationJobs/job')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3212",
    "description": "Checks if Google Cloud Firestore backups are public. The rule is NON_COMPLIANT if any Google Cloud Firestore backups are public.",
    "function_name": "firestore_backups_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('backups').document('backup_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3213",
    "description": "Checks if the Google Cloud VPN's authorization policies allow connection access for all users. The rule is NON_COMPLIANT if 'AllowAll' is present and set to true.",
    "function_name": "network_vpn_authorization_no_allow_all",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3214",
    "description": "Checks if the status of the Google Cloud Resource Manager Policy compliance is COMPLIANT or NON_COMPLIANT after the policy execution on the resource. The rule is compliant if the field status is COMPLIANT. For more information about organizations and policies, see Understanding Organization Policies.",
    "function_name": "iam_policy_compliance_status_compliant",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3215",
    "description": "Checks if Google Cloud Platform (GCP) Cloud VPN requires 'auto-accept' for shared attachments to be enabled. The rule is NON_COMPLIANT for a Cloud VPN if 'auto-accept' is set to 'true'.",
    "function_name": "network_vpn_auto_accept_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3216",
    "description": "Verifies if the Google Kubernetes Engine (GKE) cluster endpoint is not publicly accessible. The rule is NON_COMPLIANT if the endpoint is publicly accessible.",
    "function_name": "container_cluster_endpoint_private",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "container_client.projects().zones().clusters().get(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3217",
    "description": "Checks if Google Cloud Search (a service similar to Amazon OpenSearch) instances are in Google Virtual Private Cloud (Google VPC). The rule is NON_COMPLIANT if a Google Cloud Search instance is publicly accessible.",
    "function_name": "network_cloud_search_vpc_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3218",
    "description": "Checks if Google Cloud HTTP(S) Load Balancers have backend services that are configured to use SSL certificates from Google Cloud Managed Certificates or Google Cloud IAM Certificates. This rule is NON_COMPLIANT if at least 1 load balancer has at least 1 backend service configured without a certificate or is configured with a certificate different from Google Cloud Managed Certificates or IAM certificates.",
    "function_name": "network_load_balancer_backend_ssl_certificates_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3219",
    "description": "Checks if the Google Cloud Load Balancers use SSL certificates provided by Google Managed SSL Certificates. To use this rule, use an SSL or HTTPS frontend configuration with your Google Cloud Load Balancer. This rule is only applicable to Google Cloud Load Balancers. This rule does not check other types of load balancers.",
    "function_name": "network_load_balancer_ssl_google_managed_certificates",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslCertificates().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3220",
    "description": "Checks if a Google Cloud account has public access settings enabled for its Compute Engine instances. The rule is NON_COMPLIANT if 'blockPublicIp' is false, or if true, any firewall rules allow ingress traffic on ports other than Port 22.",
    "function_name": "compute_instance_block_public_ip_and_restrict_ingress",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3221",
    "description": "In GCP, the equivalent for disabling incoming SSH traffic can be achieved by configuring firewall rules to disallow ingress on port 22, effectively restricting SSH access.",
    "function_name": "network_firewall_disallow_ingress_ssh",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3222",
    "description": "Checks if the Cloud Router is associated with an authorized Virtual Private Cloud (VPC) in Google Cloud Platform (GCP). The rule is NON_COMPLIANT if the Cloud Router is associated with an unauthorized VPC.",
    "function_name": "network_cloud_router_associated_authorized_vpc",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routers().get(project='proj', region='region', router='router')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3223",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function resource prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='function_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3224",
    "description": "Checks if a Cloud Function is allowed access to a Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if the Cloud Function is not VPC enabled.",
    "function_name": "network_cloud_function_vpc_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3225",
    "description": "Checks if Google Cloud firewall rules allow unrestricted ingress traffic for SSH (port 22) and RDP (port 3389). The rule is NON_COMPLIANT if a firewall rule allows ingress traffic from any source IP range (0.0.0.0/0) for those ports.",
    "function_name": "network_firewall_restrict_ingress_ssh_rdp",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3226",
    "description": "Checks if a Google Cloud Platform (GCP) firewall policy is configured with a user-defined 'default action' for fragmented packets. The rule is NON_COMPLIANT if the default action for fragmented packets does not match the user-defined default action.",
    "function_name": "network_firewall_policy_fragmented_packets_default_action",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3227",
    "description": "Check GCP Firewall Rule is associated with ingress or egress rules. This rule is NON_COMPLIANT if no ingress or egress rules are associated with the Firewall Rule, else COMPLIANT if any one of the rule types exists.",
    "function_name": "network_firewall_rule_associated_with_ingress_or_egress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3228",
    "description": "Checks if a Google Cloud Platform (GCP) Firewall Rule contains rules. The rule is NON_COMPLIANT if there are no rules in a GCP Firewall Rule.",
    "function_name": "network_firewall_rule_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3229",
    "description": "Checks if there are public routes in the route table to a Cloud Router or Cloud NAT. The rule is NON_COMPLIANT if a route to a Cloud Router or Cloud NAT has a destination CIDR block of '0.0.0.0/0' or '::/0' or if a destination CIDR block does not match the rule parameter.",
    "function_name": "network_route_no_public_cidr_to_cloud_router_or_nat",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.routes().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3230",
    "description": "Checks if Google Cloud Elasticsearch (GCE) clusters are within a Google Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if an Elasticsearch cluster endpoint is public.",
    "function_name": "network_elasticsearch_vpc_enforcement",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3231",
    "description": "Checks if there are any Google Cloud SQL database instances that are not using the default Cloud SQL service account. The rule is NON_COMPLIANT if there are any Cloud SQL instances that are not using the default service account.",
    "function_name": "sql_instances_use_default_service_account",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3232",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'ipAddresses' field contains a public IP address.",
    "function_name": "sql_instance_no_public_access",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3233",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset's access control configuration allows public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3234",
    "description": "Checks if Google Cloud Storage (GCS) buckets have uniform bucket-level access enabled. The rule is NON_COMPLIANT if uniform bucket-level access is not enabled for GCS buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3235",
    "description": "Checks if the required public access options are configured at the project level in Google Cloud Platform (GCP). The rule is only NON_COMPLIANT when the public access settings do not match the configured settings.",
    "function_name": "iam_project_public_access_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3236",
    "description": "Checks if the required public access prevention settings are configured at the project level in Google Cloud Platform. The rule is NON_COMPLIANT if the configuration does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3237",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket does not meet the exclusion criteria and has bucket-level permissions that allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3238",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule verifies the Uniform Bucket-Level Access settings, the bucket IAM policies, and the bucket permissions.",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3239",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access by evaluating the Bucket IAM policies and public access prevention settings.",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.public_access_prevention"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3240",
    "description": "Checks if a Google AI Platform Notebooks instance is launched within a VPC or within a list of approved subnets. The rule is NON_COMPLIANT if a notebook instance is not launched within a VPC or if its subnet ID is not included in the parameter list.",
    "function_name": "ai_platform_notebooks_instance_vpc_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3241",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3242",
    "description": "Checks if Private Service Access for the service specified in the rule parameter is configured for each Google Cloud VPC. The rule is NON_COMPLIANT if a Google Cloud VPC doesn't have a Private Service Access configured for the service.",
    "function_name": "network_vpc_private_service_access_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3243",
    "description": "Checks if there are unused firewall rules in Google Cloud. The rule is COMPLIANT if each firewall rule is associated with a network. The rule is NON_COMPLIANT if a firewall rule is not associated with a network.",
    "function_name": "network_firewall_associated_with_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3244",
    "description": "Checks if Google Cloud Firewall rules allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such firewall rules do not have ports specified in the rule parameters.",
    "function_name": "network_firewall_restrict_inbound_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3245",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if there are no rules present within the security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3246",
    "description": "Checks if a Google Cloud Armor security policy contains any rules. The policy is NON_COMPLIANT if no rules are present within the Google Cloud Armor security policy.",
    "function_name": "network_security_policy_rules_present",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3247",
    "description": "Verifies if a Google Cloud Armor Security Policy contains any firewall rules or rule groups. The policy is considered NON_COMPLIANT if it does not include any security rules or rule groups.",
    "function_name": "network_security_policy_contains_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3248",
    "description": "Checks if Cloud Armor security policy rule groups contain any rules. The rule is NON_COMPLIANT if there are no rules present within a Cloud Armor security policy rule group.",
    "function_name": "network_cloud_armor_policy_rule_group_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3249",
    "description": "Checks whether the Google Cloud Armor security policy contains rules with conditions. The rule is COMPLIANT if the security policy contains at least one rule with conditions and NON_COMPLIANT otherwise.",
    "function_name": "network_security_policy_contains_conditions",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3250",
    "description": "Checks if a GCP Cloud Armor Security Policy contains any rules. The rule is NON_COMPLIANT if there are no security rules present within a Cloud Armor Security Policy.",
    "function_name": "network_cloud_armor_policy_has_rules",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3251",
    "description": "Checks if Google Cloud Endpoints services have access logging enabled. The rule is NON_COMPLIANT if 'accessLogSettings' is not present in the service configuration.",
    "function_name": "endpoints_service_access_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3252",
    "description": "Checks if all methods in Google Cloud Endpoints have logging enabled. The rule is NON_COMPLIANT if logging is not enabled, or if the log level is neither ERROR nor INFO.",
    "function_name": "endpoints_methods_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3253",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3254",
    "description": "Checks if a Google Cloud API Gateway has logging enabled. The rule is NON_COMPLIANT if logging is not enabled or the 'logLevel' is neither ERROR nor ALL.",
    "function_name": "apigateway_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "apigateway_client.apis().get(name='projects/proj/locations/global/apis/api')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3255",
    "description": "Checks if Google Cloud Load Balancers are configured with a user-defined Desync mitigation mode. The rule is NON_COMPLIANT if the Load Balancer's Desync mitigation mode does not match the user-defined Desync mitigation mode.",
    "function_name": "network_load_balancer_desync_mitigation_mode_configured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpProxies().get(project='proj', targetHttpProxy='proxy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3256",
    "description": "Checks if Google Cloud CDN is configured to deliver access logs to a Google Cloud Storage bucket. The rule is NON_COMPLIANT if a Cloud CDN configuration does not have logging enabled.",
    "function_name": "network_cdn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.backendServices().get(project='proj', backendService='service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3257",
    "description": "Checks if at least one Google Cloud Audit logging configuration is logging read and write events for all Google Cloud Storage buckets. The rule is NON_COMPLIANT if there are no audit logs configured to record Cloud Storage data events.",
    "function_name": "logging_audit_config_storage_data_events_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3258",
    "description": "Checks that there is at least one Google Cloud Audit Logging enabled for a project with security best practices. This rule is COMPLIANT if there is at least one audit log configuration that meets all of the following criteria.",
    "function_name": "logging_project_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().get(projectId='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3259",
    "description": "Checks if Google Cloud Logging Log Buckets are encrypted with any Google Cloud KMS key or a specified Google Cloud KMS key Id. The rule is NON_COMPLIANT if a Log Bucket is not encrypted with a KMS key or is encrypted with a KMS key not supplied in the rule parameter.",
    "function_name": "logging_log_buckets_encrypted_with_kms_key",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().locations().buckets().get(name='projects/proj/locations/loc/buckets/bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3260",
    "description": "In GCP, the equivalent for enabling CloudTrail is enabling Cloud Audit Logs, which tracks API activity for projects and services.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3261",
    "description": "Checks if Google Cloud Logging is configured to use Cloud Key Management Service (Cloud KMS) encryption. The rule is COMPLIANT if the KmsKeyId is defined.",
    "function_name": "logging_cloudkms_encryption_configured",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3262",
    "description": "Checks if Google Cloud Audit Logs have integrity validation enabled. Google Cloud recommends that integrity validation should be enabled for all audit logs to ensure their authenticity. The rule is NON_COMPLIANT if the validation is not enabled.",
    "function_name": "logging_audit_logs_integrity_validation_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3263",
    "description": "Checks if a Google Cloud Build configuration has at least one logging option enabled. The rule is NON_COMPLIANT if the status of all present logging configurations is set to 'DISABLED'.",
    "function_name": "cloudbuild_configuration_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "cloudbuild_client.projects().triggers().get(projectId='proj', triggerId='trigger')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3264",
    "description": "Checks if logging is enabled with a valid severity level for GCP Data Migration Service replication task events of a target database. The rule is NON_COMPLIANT if logging is not enabled or replication task logging of a target database has a severity level that is not valid.",
    "function_name": "logging_data_migration_replication_task_logging_enabled_with_valid_severity",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(filter='resource.type=\"data_migration\" AND severity>=\"INFO\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3265",
    "description": "Checks if a Google Cloud Firestore (NoSQL document database) instance has Cloud Logging export enabled for audit logs. The rule is NON_COMPLIANT if a Google Cloud Firestore instance does not have Cloud Logging export enabled for audit logs.",
    "function_name": "firestore_instance_logging_export_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3266",
    "description": "Checks if Google Cloud VPN has logging enabled for client connections. The rule is NON_COMPLIANT if 'logging.enabled' is set to false.",
    "function_name": "network_vpn_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.vpnTunnels().get(project='proj', region='region', vpnTunnel='vpn')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3267",
    "description": "Checks if logging is configured on active Google Cloud Run services. This rule is NON_COMPLIANT if an active service does not have logging enabled or the logging configuration is not set for at least one revision.",
    "function_name": "cloudrun_service_logging_configured",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "cloud_run_client.projects().locations().services().get(name='projects/proj/locations/loc/services/service')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3268",
    "description": "Checks if a Google Kubernetes Engine (GKE) cluster is configured with logging enabled. The rule is NON_COMPLIANT if logging for GKE clusters is not enabled for all log types.",
    "function_name": "container_cluster_logging_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().zones().clusters().getLogging(projectId='proj', zone='zone', clusterId='cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3269",
    "description": "Checks if Google Cloud App Engine services are configured to send logs to Google Cloud Logging. The rule is NON_COMPLIANT if the value of 'enableStackdriverLogging' is false.",
    "function_name": "appengine_service_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.services().get(project='proj', serviceId='service').execute()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3270",
    "description": "Checks if the Google Cloud Load Balancer has logging enabled. The rule is NON_COMPLIANT if the 'logging' property is false or the 'logBucket' is not equal to the provided bucket name.",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3271",
    "description": "Checks if Google Cloud Pub/Sub subscriptions have Cloud Logging enabled. The rule is NON_COMPLIANT if a subscription does not have logging enabled.",
    "function_name": "pubsub_subscription_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().subscriptions().get(subscription='subscription_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3272",
    "description": "Checks if a Google Cloud Pub/Sub subscription has logging enabled. The rule is NON_COMPLIANT if the subscription does not have logging enabled.",
    "function_name": "pubsub_subscription_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().subscriptions().get(subscription='subscription_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3273",
    "description": "In GCP, the equivalent of enabling multi-region logging is to ensure that Cloud Logging is set up to collect logs from multiple regions. This ensures that logs are stored and accessible across different geographical locations.",
    "function_name": "logging_cloud_logging_multi_region_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3274",
    "description": "Checks if a Google Cloud Spanner instance has Stackdriver Logging enabled for audit logs. The rule is NON_COMPLIANT if a Spanner instance does not have Stackdriver Logging enabled for audit logs.",
    "function_name": "spanner_instance_stackdriver_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3275",
    "description": "Checks if Google Cloud Platform (GCP) firewall rules have logging enabled. The rule is NON_COMPLIANT if logging is not configured. You can specify which logging type you want the rule to check.",
    "function_name": "network_firewall_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3276",
    "description": "Checks if Google Cloud SQL instances for MySQL are configured to log audit logs to Google Cloud Logging. The rule is NON_COMPLIANT if Cloud SQL for MySQL instances do not have audit log publishing configured.",
    "function_name": "sql_mysql_audit_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3277",
    "description": "Checks if the respective logs of Cloud SQL for PostgreSQL or MySQL are enabled. The rule is NON_COMPLIANT if any log types (like general logs, slow query logs, or audit logs) are not enabled.",
    "function_name": "sql_instance_logs_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3278",
    "description": "Checks if Google BigQuery datasets have audit logging enabled to a specific Cloud Storage bucket. The rule is NON_COMPLIANT if audit logging is not enabled for a BigQuery dataset or if the 'bucketNames' parameter is provided but the audit logging destination does not match.",
    "function_name": "bigquery_dataset_audit_logging_enabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3279",
    "description": "Checks if Google BigQuery datasets have the specified settings. The rule is NON_COMPLIANT if the BigQuery dataset is not encrypted or encrypted with another key, or if the dataset does not have audit logging enabled.",
    "function_name": "bigquery_dataset_encryption_and_audit_logging",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3280",
    "description": "Checks if DNS query logging is enabled for your Google Cloud DNS managed zones. The rule is NON_COMPLIANT if DNS query logging is not enabled for your Google Cloud DNS managed zones.",
    "function_name": "dns_managed_zones_query_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3281",
    "description": "Checks if Google Cloud Storage (GCS) buckets are publicly accessible. The rule is NON_COMPLIANT if a GCS bucket is not listed in the excludedPublicBuckets parameter and bucket level settings are public.",
    "function_name": "storage_bucket_public_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3282",
    "description": "Checks if logging is enabled for your Cloud Storage buckets in GCP. The rule is NON_COMPLIANT if logging is not enabled.",
    "function_name": "storage_bucket_logging_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket_logging(bucket_name='my-bucket')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3283",
    "description": "Checks if Google Cloud Workflow has logging enabled. The rule is NON_COMPLIANT if a Cloud Workflow does not have logging enabled or the logging configuration is not at the minimum level provided.",
    "function_name": "workflows_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3284",
    "description": "Checks if Google Cloud Virtual Private Cloud (GCP VPC) flow logs are found and enabled for all GCP VPCs. The rule is NON_COMPLIANT if flow logs are not enabled for at least one GCP VPC.",
    "function_name": "network_vpc_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3285",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT if the logging is enabled but the logging destination does not match the specified value.",
    "function_name": "network_security_policy_logging_destination_match",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3286",
    "description": "Checks if logging is enabled on Google Cloud Armor security policies. The rule is NON_COMPLIANT for a security policy, if it does not have logging enabled.",
    "function_name": "network_security_policy_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.securityPolicies().get(project='proj', securityPolicy='policy')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3287",
    "description": "Checks if you have provided security contact information for your Google Cloud Platform project. The rule is NON_COMPLIANT if security contact information within the project is not provided.",
    "function_name": "iam_project_security_contact_provided",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3288",
    "description": "Checks if automated sensitive data discovery is enabled for Google Cloud Data Loss Prevention (DLP). The rule is NON_COMPLIANT if automated sensitive data discovery is disabled. The rule is APPLICABLE for administrator accounts and NOT_APPLICABLE for member accounts.",
    "function_name": "dlp_project_sensitive_data_discovery_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "dlp_client.get_project_settings(name='projects/project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3289",
    "description": "Checks if Google Cloud Data Loss Prevention (DLP) is enabled in your project. The rule is NON_COMPLIANT if the 'status' attribute is not set to 'ENABLED'.",
    "function_name": "security_dlp_status_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "dlp_client.get_dlp_job(name='projects/proj/dlpJobs/job_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3290",
    "description": "Checks if automated sensitive data discovery is enabled for Google Cloud Data Loss Prevention (DLP). The rule is NON_COMPLIANT if automated sensitive data discovery is disabled. The rule is APPLICABLE for administrator accounts and NOT_APPLICABLE for member accounts.",
    "function_name": "dlp_project_sensitive_data_discovery_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "dlp_client.get_project_settings(name='projects/project_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3291",
    "description": "Checks if Google Cloud Data Loss Prevention (DLP) is enabled in your project. The rule is NON_COMPLIANT if the DLP API is not enabled.",
    "function_name": "security_dlp_api_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "service_usage_client.services().get(name='projects/proj/services/dlp.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3292",
    "description": "Checks if Google Cloud Trace tracing is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace tracing is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "serviceusage_client.services().get(name='projects/proj/services/endpoints.googleapis.com')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3293",
    "description": "Checks if your Google Cloud Deployment Manager configurations send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager configurations do not send notifications.",
    "function_name": "deploymentmanager_configurations_pubsub_notifications_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3294",
    "description": "Checks if Google Cloud Monitoring alert policies have notification channels configured for the 'ALERTING', 'PENDING', or 'DISABLED' states. Optionally checks if any channels match a specified notification channel ID. The rule is NON_COMPLIANT if there is no notification channel specified for the alert policy or optional parameter.",
    "function_name": "monitoring_alert_policy_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3295",
    "description": "Checks if a resource type has a Cloud Monitoring alert policy for the specified metric. For resource types, you can specify Persistent Disks, Compute Engine instances, Cloud SQL instances, or Cloud Storage buckets. The rule is COMPLIANT if the specified metric has a resource ID and a Cloud Monitoring alert policy.",
    "function_name": "monitoring_resource_alert_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3296",
    "description": "Checks whether Google Cloud Monitoring alerts with the given metric name have the specified settings.",
    "function_name": "monitoring_alerts_metric_settings_compliance",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3297",
    "description": "Checks if Google Cloud Audit Logs are configured to send logs to Google Cloud Logging. The audit logging is NON_COMPLIANT if the log sink is not properly set up or is not sending the audit logs to Google Cloud Logging.",
    "function_name": "logging_audit_logs_configured_to_cloud_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/project-id/sinks/sink-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3298",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if Stackdriver Monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3299",
    "description": "Checks if Google Cloud Storage (GCS) Notifications are enabled on a GCS bucket. The rule is NON_COMPLIANT if GCS Notifications are not set on a bucket, or if the event type or destination do not match specified event types and destination parameters.",
    "function_name": "storage_bucket_notifications_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3300",
    "description": "Checks if Google Cloud Security Command Center is enabled for a Google Cloud project. The rule is NON_COMPLIANT if Google Cloud Security Command Center is not enabled.",
    "function_name": "security_command_center_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/proj/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3301",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3302",
    "description": "Checks if Google Cloud Monitoring metrics collection on Google Cloud Armor security policies is enabled. The rule is NON_COMPLIANT if the 'enableMonitoring' field is set to false.",
    "function_name": "monitoring_cloud_armor_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"cloudarmor.googleapis.com/security_policy/enableMonitoring\"')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3303",
    "description": "Checks if a Cloud Storage bucket has an attached IAM policy which prevents deletion of objects. The rule is NON_COMPLIANT if the Cloud Storage bucket does not have IAM policies or has policies without a suitable 'Deny' statement (statement with storage.objects.delete permission).",
    "function_name": "storage_bucket_iam_policy_prevent_object_deletion",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3304",
    "description": "Checks if Google Cloud Database Migration Service (Cloud DMS) connection profiles are public. The rule is NON_COMPLIANT if the 'public' property is set to true.",
    "function_name": "dms_connection_profiles_non_public",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dms_client.projects().locations().connectionProfiles().get(name='projects/proj/locations/loc/connectionProfiles/profile')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3305",
    "description": "Checks if Google Cloud Firestore database snapshots are public. The rule is NON_COMPLIANT if any Firestore database snapshots are public.",
    "function_name": "firestore_snapshots_non_public",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "firestore_client.collection('snapshots').document('snapshot_id').get()"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3306",
    "description": "Checks if Google Cloud Persistent Disk snapshots are not publicly accessible. The rule is NON_COMPLIANT if one or more snapshots have permissions that allow public access, indicating that Google Cloud Persistent Disk snapshots are public.",
    "function_name": "compute_disk_snapshots_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.snapshots().get(project='proj', snapshot='snapshot')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3307",
    "description": "Checks if Google Kubernetes Engine (GKE) Containers only have read-only access to their root filesystems. The rule is NON_COMPLIANT if the securityContext.privileged parameter in the container specification is set to 'false' or the readOnlyRootFilesystem parameter is not set to 'true'.",
    "function_name": "container_gke_containers_read_only_root_filesystem",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "container_client.projects().locations().clusters().get(name='projects/proj/locations/zone/clusters/cluster')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3308",
    "description": "Checks if Google Cloud Filestore instances are configured to enforce a root directory. The rule is NON_COMPLIANT if the root path is accessible without restrictions.",
    "function_name": "filestore_instance_enforce_root_directory",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.projects().locations().instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3309",
    "description": "Checks if Google Cloud Filestore access control is configured to enforce a user identity. The rule is NON_COMPLIANT if 'identity' is not defined or if parameters are provided and there is no match in the corresponding parameter.",
    "function_name": "filestore_access_control_enforce_user_identity",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "filestore_client.instances().get(project='proj', location='location', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3310",
    "description": "Checks if a Google Cloud account has block public access settings enabled. The rule is NON_COMPLIANT if 'BlockPublicAccess' is false, or if true, firewall rules allowing traffic on ports other than Port 22 are listed in 'AllowedFirewallRules'.",
    "function_name": "network_firewall_block_public_access_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3311",
    "description": "Checks if IAM groups in Google Cloud have at least one IAM user assigned.",
    "function_name": "iam_group_user_assignment_required",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().groups().get(name='groups/group-id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3312",
    "description": "Checks if your Google Cloud IAM users have passwords or active access keys that have not been used within the specified number of days you provided. The rule is NON_COMPLIANT if there are inactive accounts not recently used.",
    "function_name": "iam_user_inactive_access_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3313",
    "description": "Checks if the Google Cloud Functions IAM policy attached to the Cloud Function prohibits public access. If the Cloud Function IAM policy allows public access it is NON_COMPLIANT.",
    "function_name": "cloudfunctions_function_iam_no_public_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "cloudfunctions_client.projects().locations().functions().getIamPolicy(resource='projects/my-project/locations/my-location/functions/my-function')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3314",
    "description": "Checks if a Google Cloud SQL instance snapshot is public. The rule is NON_COMPLIANT if any existing and new Cloud SQL instance snapshots are public.",
    "function_name": "sql_instance_snapshot_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3315",
    "description": "Checks if Google Cloud SQL instances are not publicly accessible. The rule is NON_COMPLIANT if the 'publicIp' field is enabled in the instance configuration.",
    "function_name": "sql_instance_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3316",
    "description": "Checks if Google Cloud SQL backups are public. The rule is NON_COMPLIANT if any existing and new Google Cloud SQL backups are public.",
    "function_name": "sql_backups_non_public",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.backupRuns().list(project='proj', instance='instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3317",
    "description": "Checks if Google BigQuery datasets are not publicly accessible. The rule is NON_COMPLIANT if the dataset's defaultAccessEntry has a role of 'READER' granted to 'allUsers'.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3318",
    "description": "Checks if Google Cloud Storage bucket IAM policies have public access prevention settings enabled. The rule is NON_COMPLIANT if public access prevention settings are not enabled for Google Cloud Storage buckets.",
    "function_name": "storage_bucket_public_access_prevention_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.public_access_prevention"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3319",
    "description": "Verifies that the required public access prevention settings are configured at the project level. The status is considered NON_COMPLIANT when the specified settings do not match the corresponding fields in the project configuration.",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name, requested_policy_version=3)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3320",
    "description": "Checks if the required public access prevention settings are configured at the project level. The rule is NON_COMPLIANT if the configuration item does not match one or more settings from parameters (or default).",
    "function_name": "storage_project_public_access_prevention_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_iam_policy(bucket_name)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3321",
    "description": "Checks if Google Cloud Storage buckets are publicly accessible. The rule is NON_COMPLIANT if a Cloud Storage bucket is not listed in the excludedPublicBuckets parameter and the bucket's permissions settings allow public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3322",
    "description": "Checks if Object Versioning is enabled and if it requires additional authentication for critical actions in Google Cloud Storage buckets. The rule is NON_COMPLIANT if additional authentication is not required.",
    "function_name": "storage_bucket_versioning_authentication_required",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).versioning_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3323",
    "description": "Checks if your Google Cloud Storage buckets do not allow public read access. The rule checks the Uniform Bucket-Level Access settings, the bucket policy, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_read_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3324",
    "description": "Checks if your Google Cloud Storage buckets do not allow public write access. The rule checks the Uniform bucket-level access settings, the bucket IAM policies, and the bucket access control list (ACL).",
    "function_name": "storage_bucket_no_public_write_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3325",
    "description": "Checks if direct internet access is disabled for a Google Cloud AI Platform Notebook instance. The rule is NON_COMPLIANT if an AI Platform Notebook instance is internet-enabled.",
    "function_name": "ai_platform_notebook_instance_disable_internet_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "notebooks_client.instances().get(name='projects/proj/locations/loc/instances/instance')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3326",
    "description": "Checks if Google Cloud Secret Manager secrets have been accessed within a specified number of days. The rule is NON_COMPLIANT if a secret has not been accessed in 'unusedForDays' number of days. The default value is 90 days.",
    "function_name": "secretmanager_secret_accessed_within_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "secretmanager_client.projects().secrets().get(name='projects/project_id/secrets/secret_id')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3327",
    "description": "Checks if Google Cloud Compute Engine instance templates owned by the account are public. The rule is NON_COMPLIANT if instance templates with the owner 'Self' are set to allow public access.",
    "function_name": "compute_instance_templates_no_public_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instanceTemplates().get(project='proj', instanceTemplate='template')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3328",
    "description": "Checks if Google Cloud Trace is enabled on Google Cloud Endpoints. The rule is COMPLIANT if Cloud Trace is enabled and NON_COMPLIANT otherwise.",
    "function_name": "endpoints_cloud_trace_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "endpoints_client.services().get(name='service_name')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3329",
    "description": "Checks if your Google Cloud deployments (using Deployment Manager) send event notifications to a Google Cloud Pub/Sub topic. Optionally checks if specified Pub/Sub topics are used. The rule is NON_COMPLIANT if Deployment Manager deployments do not send notifications.",
    "function_name": "deploymentmanager_deployments_pubsub_notifications_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "deploymentmanager_client.deployments().get(project='proj', deployment='deployment')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3330",
    "description": "Checks if Cloud Monitoring alerts have notification channels configured for ALERTING, PENDING, or NO_DATA states. Optionally checks if any notification channels match a specific resource name (ARN). The rule is NON_COMPLIANT if there is no action specified for the alert or optional parameter.",
    "function_name": "monitoring_alerts_notification_channels_configured",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3331",
    "description": "Checks if a Google Cloud resource type has a Google Cloud Monitoring alert policy for the specified metric. For resource types, you can specify Compute Engine instances, Cloud Storage buckets, Cloud SQL instances, or Persistent Disks. The rule is COMPLIANT if the specified metric has a resource ID and an alert policy.",
    "function_name": "monitoring_resource_alert_policy_exists",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3332",
    "description": "Checks whether Google Cloud Monitoring alerts with the given metric name have the specified settings.",
    "function_name": "monitoring_alerts_metric_settings_compliance",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3333",
    "description": "Checks if Google Cloud Audit Logging is configured to send logs to Cloud Logging. The audit log configuration is NON_COMPLIANT if the log sink is not properly set to export logs.",
    "function_name": "logging_audit_logs_configured_to_cloud_logging",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().get(sinkName='projects/proj/sinks/sink')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3334",
    "description": "Checks if Stackdriver Monitoring is enabled for Google Compute Engine instances. The rule is NON_COMPLIANT if Stackdriver Monitoring is not enabled.",
    "function_name": "compute_instance_stackdriver_monitoring_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3335",
    "description": "Checks if Google Cloud Storage (GCS) notifications are enabled on a GCS bucket. The rule is NON_COMPLIANT if GCS notifications are not set on a bucket, or if the event type or destination do not match the specified event types and destination parameters.",
    "function_name": "storage_bucket_notifications_configured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_notification(notification_id)"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3336",
    "description": "Checks if Google Cloud Security Command Center is enabled for a Google Cloud Project. The rule is NON_COMPLIANT if Security Command Center is not enabled.",
    "function_name": "security_command_center_project_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3337",
    "description": "Checks if Google Cloud Pub/Sub logging is enabled for the delivery status of messages sent to a topic. The rule is NON_COMPLIANT if the delivery status notification for messages is not enabled.",
    "function_name": "pubsub_topic_delivery_status_logging_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "pubsub_client.projects().topics().getIamPolicy(resource='projects/proj/topics/topic')"
  },
  {
    "sheet": "PCI",
    "rule_id": "PCI_3338",
    "description": "Checks if Google Cloud Monitoring (formerly Stackdriver) security metrics collection on Google Cloud Armor rule sets is enabled. The rule is NON_COMPLIANT if the 'enableMonitoring' field is set to false.",
    "function_name": "monitoring_cloud_armor_security_metrics_enabled",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_1",
    "description": "Information security policy and topic-specific policies should be defined, approved by management, published, communicated to and acknowledged by relevant personnel and relevant interested parties, and reviewed at planned intervals and if significant changes occur.",
    "function_name": "iam_policy_defined_approved_published",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_2",
    "description": "Information security roles and responsibilities should be defined and allocated according to the organisation needs.",
    "function_name": "iam_roles_responsibilities_defined",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_3",
    "description": "Conflicting duties and conflicting areas of responsibility should be segregated.",
    "function_name": "iam_roles_duties_segregated",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_4",
    "description": "Management should require all personnel to apply information security in accordance with the established information security policy, topic-specific policies and procedures of the organization.",
    "function_name": "iam_policy_enforcement_information_security",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_5",
    "description": "The organisation should establish and maintain contact with relevant authorities.",
    "function_name": "security_command_center_authorities_contact_established",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().contacts().list(parent='organizations/123456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_6",
    "description": "The organisation should establish and maintain contact with special interest groups or other specialist security forums and professional associations.",
    "function_name": "security_command_center_contact_maintenance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().getContact(project='proj', organization='org')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_7",
    "description": "Information relating to information security threats should be collected and analysed to produce threat intelligence.",
    "function_name": "security_command_center_threat_intelligence_collection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_8",
    "description": "Information security should be integrated into project management.",
    "function_name": "iam_project_management_security_integration",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/project-id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_9",
    "description": "An inventory of information and other associated assets, including owners, should be developed and maintained.",
    "function_name": "iam_assets_inventory_maintained",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_10",
    "description": "Rules for the acceptable use and procedures for handling information and other associated assets should be identified, documented and implemented.",
    "function_name": "iam_service_accounts_usage_documented",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_11",
    "description": "Personnel and other interested parties as appropriate should return all the organisation’s assets in their possession upon change or termination of their employment, contract or agreement.",
    "function_name": "iam_service_accounts_ownership_termination",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_12",
    "description": "Information should be classified according to the information security needs of the organisation based on confidentiality, integrity, availability and relevant interested party requirements.",
    "function_name": "iam_roles_information_classification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_13",
    "description": "An appropriate set of procedures for information labelling should be developed and implemented in accordance with the information classification scheme adopted by the organisation.",
    "function_name": "storage_bucket_information_labelling_procedures",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_14",
    "description": "Information transfer rules, procedures, or agreements should be in place for all types of transfer facilities within the organisation and between the organisation and other parties.",
    "function_name": "network_transfer_agreements_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_15",
    "description": "Rules to control physical and logical access to information and other associated assets should be established",
    "function_name": "iam_service_accounts_access_control",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_16",
    "description": "The full lifecycle of identities should be managed.",
    "function_name": "iam_identity_lifecycle_management",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_17",
    "description": "Allocation and management of authentication information should be controlled by a management process, including advising personnel on the appropriate handling of authentication information.",
    "function_name": "iam_authentication_management_process",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_18",
    "description": "Access rights to information and other associated assets should be provisioned, reviewed, modified and removed in accordance with the organisation’s topic-specific policy on and rules for access control.",
    "function_name": "iam_access_rights_provisioned_reviewed",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_19",
    "description": "Processes and procedures should be defined and implemented to manage the information security risks associated with the use of supplier’s products or services.",
    "function_name": "iam_service_accounts_risk_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_20",
    "description": "Relevant information security requirements should be established and agreed with each supplier based on the type of supplier relationship.",
    "function_name": "iam_supplier_security_requirements_established",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_21",
    "description": "Processes and procedures should be defined and implemented to manage the information security risks associated with the ICT products and services supply chain.",
    "function_name": "security_supply_chain_risk_management",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().getSecurityHealthAnalyticsSettings(name='organizations/123/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_22",
    "description": "The organisation should regularly monitor, review, evaluate and manage change in supplier information security practices and service delivery.",
    "function_name": "security_supplier_practices_monitoring",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_23",
    "description": "Processes for acquisition, use, management and exit from cloud services should be established in accordance with the organisation’s information security requirements.",
    "function_name": "iam_service_accounts_management_process",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_24",
    "description": "The organization should plan and prepare for managing information security incidents by defining, establishing and communicating information security incident management processes, roles and responsibilities.",
    "function_name": "security_incident_management_process_defined",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_25",
    "description": "The organisation should assess information security events and decide if they are to be categorised as information security incidents.",
    "function_name": "security_command_center_event_categorization",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_26",
    "description": "Information security incidents should be responded to in accordance with the documented procedures.",
    "function_name": "security_incidents_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.incidents().list(parent='organizations/12345')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_27",
    "description": "Knowledge gained from information security incidents should be used to strengthen and improve the information security controls.",
    "function_name": "security_command_center_incident_response_enhancement",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_28",
    "description": "The organisation should establish and implement procedures for the identification, collection, acquisition and preservation of evidence related to information security events.",
    "function_name": "logging_auditlogs_evidence_preservation",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\"'})"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_29",
    "description": "The organisation should plan how to maintain information security at an appropriate level during disruption.",
    "function_name": "compute_engine_vm_disruption_resilience_plan",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_30",
    "description": "ICT readiness should be planned, implemented, maintained and tested based on business continuity objectives and ICT continuity requirements. ",
    "function_name": "compute_vm_continuity_planned",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_31",
    "description": "Legal, statutory, regulatory and contractual requirements relevant to information security and the organisations approach to meet these requirements should be identified, documented and kept up to date. ",
    "function_name": "iam_policies_documentation_up_to_date",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_32",
    "description": "The organisation should implement appropriate procedures to protect intellectual property rights.",
    "function_name": "kms_keys_intellectual_property_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_33",
    "description": "Records should be protected from loss, destruction, falsification, unauthorised access and unauthorised release.",
    "function_name": "storage_objects_protected_from_unauthorized_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_34",
    "description": "The organisation should identify and meet the requirements regarding the preservation of privacy and protection of PII according to applicable laws and regulations and contractual requirements.",
    "function_name": "iam_service_accounts_pii_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_35",
    "description": "The organisations approach to managing information security and its implementation including people, processes and technologies should be reviewed independently at planned intervals, or when significant changes occur. ",
    "function_name": "security_command_center_independent_review_schedule",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_36",
    "description": "Compliance with the organisations information security policy, topic-specific policies, rules and standards should be regularly reviewed. ",
    "function_name": "iam_policies_regular_review",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_37",
    "description": "Operating procedures for information processing facilities should be documented and made available to personnel who need them.",
    "function_name": "compute_instance_documentation_availability",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_38",
    "description": "Background verification checks on all candidates to become personnel should be carried out prior to joining the organisation and on an ongoing basis taking into consideration applicable laws, regulations and ethics and be proportional to the business requirements, the classification of the information to be accessed and the perceived risks. ",
    "function_name": "iam_personnel_background_verification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_39",
    "description": "The employment contractual agreements should state the personnel’s and the organisations responsibilities for information security.",
    "function_name": "iam_roles_information_security_responsibilities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_40",
    "description": "Personnel of the organisation and relevant interested parties should receive appropriate information security awareness, education and training and regular updates of the organisations information security policy, topic-specific policies and procedures, as relevant for their job function.",
    "function_name": "iam_policy_information_security_training",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_41",
    "description": "A disciplinary process should be formalised and communicated to take actions against personnel and other relevant interested parties who have committed an information security policy violation.",
    "function_name": "iam_policy_disciplinary_process_formalized",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_42",
    "description": "Information security responsibilities and duties that remain valid after termination or change of employment should be defined, enforced and communicated to relevant personnel and other interested parties.",
    "function_name": "iam_roles_post_employment_responsibilities_defined",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_43",
    "description": "Confidentiality or non-disclosure agreements reflecting the organisation’s needs for the protection of information should be identified, documented, regularly reviewed and signed by personnel and other relevant interested parties.",
    "function_name": "iam_policies_confidentiality_agreements_documented",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_44",
    "description": "Security measures should be implemented when personnel are working remotely to protect information accessed, processed or stored outside the organisation’s premises.",
    "function_name": "network_vpc_remote_access_security_measures",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_45",
    "description": "The organisation should provide a mechanism for personnel to report observed or suspected information security events through appropriate channels in a timely manner.",
    "function_name": "security_command_center_event_reporting_mechanism",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='projects/project_id/sources/source_id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_46",
    "description": "To prevent unauthorised physical access, damage and interference to the organisations information and other associated assets.",
    "function_name": "compute_vm_physical_access_prevented",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_47",
    "description": "Secure areas should be protected by appropriate entry controls and access points.",
    "function_name": "network_vpc_entry_control",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_48",
    "description": "Physical security for offices, rooms and facilities should be designed and implemented.",
    "function_name": "network_facility_physical_security_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_49",
    "description": "Premises should be continuously monitored for unauthorised physical access.",
    "function_name": "security_command_center_premises_unauthorized_access_monitoring",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_50",
    "description": "Protection against physical and environmental threats, such as natural disasters and other intentional or unintentional physical threats to infrastructure should be designed and implemented.",
    "function_name": "compute_infrastructure_physical_threat_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_51",
    "description": "Security measures for working in secure areas should be designed and implemented.",
    "function_name": "compute_vm_secure_area_measures",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_52",
    "description": "Clear desk rules for papers and removable storage media and clear screen rules for information processing facilities should be defined and appropriately enforced.",
    "function_name": "compute_instance_clear_screen_enforcement",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_53",
    "description": "Equipment should be sited securely and protected.",
    "function_name": "compute_instance_secure_siting",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_54",
    "description": "Off-site assets should be protected.",
    "function_name": "compute_instance_offsite_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_55",
    "description": "Storage media should be managed through their life cycle of acquisition, use, transportation and disposal in accordance with the organisations classification scheme and handling requirements.",
    "function_name": "storage_media_lifecycle_management",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_56",
    "description": "Information processing facilities should be protected from power failures and other disruptions caused by failures in supporting utilities.",
    "function_name": "compute_instance_utility_resilience",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_57",
    "description": "Cables carrying power, data or supporting information services should be protected from interception",
    "function_name": "network_vpc_data_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_58",
    "description": "Equipment should be maintained correctly to ensure availability, integrity and confidentiality of information.",
    "function_name": "compute_instance_maintenance_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_59",
    "description": "Items of equipment containing storage media should be verified to ensure that any sensitive data and licensed software has been removed or securely overwritten prior to disposal or re-use.",
    "function_name": "compute_disks_sensitive_data_removed",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_60",
    "description": "Information stored on, processed by or accessible via user endpoint devices should be protected.",
    "function_name": "compute_instance_data_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_61",
    "description": "The allocation and use of privileged access rights should be restricted and managed.",
    "function_name": "iam_service_accounts_privileged_access_restricted",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_62",
    "description": "Access to information and other associated assets should be restricted in accordance with the established topic-specific policy on access control.",
    "function_name": "iam_policy_access_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_63",
    "description": "Read and write access to source code, development tools and software libraries should be appropriately managed.",
    "function_name": "iam_roles_source_code_access_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_64",
    "description": "Secure authentication technologies and procedures should be implemented based on information access restrictions and the topic-specific policy on access control.",
    "function_name": "iam_service_accounts_secure_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_65",
    "description": "The use of resources should be monitored and adjusted in line with current and expected capacity requirements.",
    "function_name": "monitoring_resources_capacity_alignment",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_66",
    "description": "Protection against malware should be implemented and supported by appropriate user awareness.",
    "function_name": "compute_instance_malware_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_67",
    "description": "Information about technical vulnerabilities of information systems in use should be obtained, the organisations exposure to such vulnerabilities should be evaluated and appropriate measures should be taken.",
    "function_name": "security_command_center_vulnerabilities_assessed",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_68",
    "description": "Configurations, including security configurations, of hardware, software, services and networks should be established, documented, implemented, monitored and reviewed.",
    "function_name": "compute_instance_security_configuration_documented",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_69",
    "description": "Information stored in information systems, devices or in any other storage media should be deleted when no longer required.",
    "function_name": "storage_objects_deletion_when_no_longer_required",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.delete_blob(bucket_name='bucket', blob_name='object')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_70",
    "description": "Data masking should be used in accordance with the organisation’s topic-specific policy on access control and other related topic-specific policies, and business requirements, taking applicable legislation into consideration.",
    "function_name": "bigquery_table_data_masking_policy",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_ref).encryption_configuration"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_71",
    "description": "Data leakage prevention measures should be applied to systems, networks and any other devices that process, store or transmit sensitive information.",
    "function_name": "network_vpc_data_leakage_prevention",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_72",
    "description": "Backup copies of information, software and systems should be maintained and regularly tested in accordance with the agreed topic-specific policy on backup.",
    "function_name": "storage_buckets_backup_maintenance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_73",
    "description": "Information processing facilities should be implemented with redundancy sufficient to meet availability",
    "function_name": "compute_instance_redundancy_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_74",
    "description": "Logs that record activities, exceptions, faults and other relevant events should be produced, stored, protected and analysed.",
    "function_name": "logging_audit_logs_protected_and_analyzed",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_75",
    "description": "Networks, systems and applications should be monitored for anomalous behaviour and appropriate actions taken to evaluate potential information security incidents.",
    "function_name": "monitoring_systems_anomalous_behaviour_detection",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_76",
    "description": "The clocks of information processing systems used by the organisation should be synchronised to approved time sources.",
    "function_name": "compute_instances_time_synchronized",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_77",
    "description": "The use of utility programs that can be capable of overriding system and application controls should be restricted and tightly controlled",
    "function_name": "compute_vm_restrict_utility_programs",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_78",
    "description": "Procedures and measures should be implemented to securely manage software installation on operational systems.",
    "function_name": "compute_instance_secure_software_management",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_79",
    "description": "Networks and network devices should be secured, managed and controlled to protect information in systems and applications.",
    "function_name": "network_vpc_secure_configuration",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_80",
    "description": "Security mechanisms, service levels and service requirements of network services should be identified, implemented and monitored.",
    "function_name": "network_services_security_mechanisms_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_81",
    "description": "Security mechanisms, service levels and service requirements of network services should be identified, implemented and monitored.",
    "function_name": "network_services_security_mechanisms_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_82",
    "description": "Access to external websites should be managed to reduce exposure to malicious content.",
    "function_name": "network_firewall_external_access_restriction",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_83",
    "description": "Rules for the effective use of cryptography, including cryptographic key management, should be defined and implemented.",
    "function_name": "kms_keys_cryptography_management",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_84",
    "description": "Rules for the secure development of software and systems should be established and applied.",
    "function_name": "security_software_development_secure_practices",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_85",
    "description": "Information security requirements should be identified, specified and approved when developing or acquiring applications.",
    "function_name": "iam_application_security_requirements_specified",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_86",
    "description": "Principles for engineering secure systems should be established, documented, maintained and applied to any information system development activities.",
    "function_name": "security_systems_engineering_principles_applied",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_87",
    "description": "Security testing processes should be defined and implemented in the development life cycle.",
    "function_name": "security_command_center_development_lifecycle_security_testing_defined",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_88",
    "description": "The organisation should direct, monitor and review the activities related to outsourced system development.",
    "function_name": "iam_service_accounts_outsourced_development_monitoring",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_89",
    "description": "Development, testing and production environments should be separated and secured.",
    "function_name": "compute_environment_separation_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_90",
    "description": "Changes to information processing facilities and information systems should be subject to change management procedures.",
    "function_name": "compute_instance_change_management_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_91",
    "description": "Test information should be appropriately selected, protected and managed.",
    "function_name": "storage_objects_protection_management",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_92",
    "description": "Audit tests and other assurance activities involving assessment of operational systems should be planned and agreed between the tester and appropriate management.",
    "function_name": "security_command_center_audit_planning_agreement",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_93",
    "description": "Information security policy and topic-specific policies should be defined, approved by management, published, communicated to and acknowledged by relevant personnel and relevant interested parties, and reviewed at planned intervals and if significant changes occur.",
    "function_name": "iam_policy_defined_and_approved",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_94",
    "description": "Information security roles and responsibilities should be defined and allocated according to the organisation needs.",
    "function_name": "iam_roles_responsibilities_defined",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_95",
    "description": "Conflicting duties and conflicting areas of responsibility should be segregated.",
    "function_name": "iam_roles_duties_segregated",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_96",
    "description": "Management should require all personnel to apply information security in accordance with the established information security policy, topic-specific policies and procedures of the organization.",
    "function_name": "iam_personnel_security_policy_compliance",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_97",
    "description": "The organisation should establish and maintain contact with relevant authorities.",
    "function_name": "security_command_center_authority_contact_established",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().getContact(project='proj', organization='org')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_98",
    "description": "The organisation should establish and maintain contact with special interest groups or other specialist security forums and professional associations.",
    "function_name": "security_command_center_special_interest_group_contact",
    "service_category": "Security",
    "confidence": 7,
    "gcp_sdk_example": "security_client.organizations().getSecurityHealthAnalyticsSettings(name='organizations/123/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_99",
    "description": "Information relating to information security threats should be collected and analysed to produce threat intelligence.",
    "function_name": "security_command_center_threat_intelligence_collection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_100",
    "description": "Information security should be integrated into project management.",
    "function_name": "iam_project_management_security_integration",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/project-id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_101",
    "description": "An inventory of information and other associated assets, including owners, should be developed and maintained.",
    "function_name": "iam_assets_inventory_maintained",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_102",
    "description": "Rules for the acceptable use and procedures for handling information and other associated assets should be identified, documented and implemented.",
    "function_name": "iam_service_accounts_acceptable_use_documented",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_103",
    "description": "Personnel and other interested parties as appropriate should return all the organisation’s assets in their possession upon change or termination of their employment, contract or agreement.",
    "function_name": "iam_service_accounts_termination_asset_return",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_104",
    "description": "Information should be classified according to the information security needs of the organisation based on confidentiality, integrity, availability and relevant interested party requirements.",
    "function_name": "iam_roles_classification_based_on_security_needs",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_105",
    "description": "An appropriate set of procedures for information labelling should be developed and implemented in accordance with the information classification scheme adopted by the organisation.",
    "function_name": "storage_bucket_information_labelling_procedures",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_106",
    "description": "Information transfer rules, procedures, or agreements should be in place for all types of transfer facilities within the organisation and between the organisation and other parties.",
    "function_name": "network_transfer_facility_rules_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_107",
    "description": "Rules to control physical and logical access to information and other associated assets should be established",
    "function_name": "iam_service_accounts_access_control",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_108",
    "description": "The full lifecycle of identities should be managed.",
    "function_name": "iam_identity_lifecycle_management",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_109",
    "description": "Allocation and management of authentication information should be controlled by a management process, including advising personnel on the appropriate handling of authentication information.",
    "function_name": "iam_authentication_management_process",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_110",
    "description": "Access rights to information and other associated assets should be provisioned, reviewed, modified and removed in accordance with the organisation’s topic-specific policy on and rules for access control.",
    "function_name": "iam_access_rights_policy_compliance",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_111",
    "description": "Processes and procedures should be defined and implemented to manage the information security risks associated with the use of supplier’s products or services.",
    "function_name": "iam_service_accounts_supplier_risk_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_112",
    "description": "Relevant information security requirements should be established and agreed with each supplier based on the type of supplier relationship.",
    "function_name": "iam_supplier_security_requirements_established",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_113",
    "description": "Processes and procedures should be defined and implemented to manage the information security risks associated with the ICT products and services supply chain.",
    "function_name": "security_supply_chain_risk_management",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().getSecurityHealthAnalyticsSettings(name='organizations/123/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_114",
    "description": "The organisation should regularly monitor, review, evaluate and manage change in supplier information security practices and service delivery.",
    "function_name": "security_supplier_practices_monitoring",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_115",
    "description": "Processes for acquisition, use, management and exit from cloud services should be established in accordance with the organisation’s information security requirements.",
    "function_name": "iam_service_accounts_management_process",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_116",
    "description": "The organization should plan and prepare for managing information security incidents by defining, establishing and communicating information security incident management processes, roles and responsibilities.",
    "function_name": "security_incident_management_process_defined",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/proj/securitySettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_117",
    "description": "The organisation should assess information security events and decide if they are to be categorised as information security incidents.",
    "function_name": "security_command_center_event_categorization",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().eventThreatDetectionSettings().get(name='projects/proj/locations/global/eventThreatDetectionSettings')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_118",
    "description": "Information security incidents should be responded to in accordance with the documented procedures.",
    "function_name": "security_incidents_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.incidents().list(parent='organizations/12345')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_119",
    "description": "Knowledge gained from information security incidents should be used to strengthen and improve the information security controls.",
    "function_name": "logging_incidents_knowledge_enhancement",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_120",
    "description": "The organisation should establish and implement procedures for the identification, collection, acquisition and preservation of evidence related to information security events.",
    "function_name": "logging_audit_logs_evidence_preservation",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\"'})"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_121",
    "description": "The organisation should plan how to maintain information security at an appropriate level during disruption.",
    "function_name": "compute_engine_vm_disruption_resilience_plan",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_122",
    "description": "ICT readiness should be planned, implemented, maintained and tested based on business continuity objectives and ICT continuity requirements. ",
    "function_name": "compute_instance_continuity_planned",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_123",
    "description": "Legal, statutory, regulatory and contractual requirements relevant to information security and the organisations approach to meet these requirements should be identified, documented and kept up to date. ",
    "function_name": "iam_policies_documentation_up_to_date",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_124",
    "description": "The organisation should implement appropriate procedures to protect intellectual property rights.",
    "function_name": "storage_buckets_intellectual_property_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_125",
    "description": "Records should be protected from loss, destruction, falsification, unauthorised access and unauthorised release.",
    "function_name": "storage_buckets_protected_from_unauthorized_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_126",
    "description": "The organisation should identify and meet the requirements regarding the preservation of privacy and protection of PII according to applicable laws and regulations and contractual requirements.",
    "function_name": "iam_service_accounts_pii_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_127",
    "description": "The organisations approach to managing information security and its implementation including people, processes and technologies should be reviewed independently at planned intervals, or when significant changes occur. ",
    "function_name": "security_command_center_review_schedule",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_128",
    "description": "Compliance with the organisations information security policy, topic-specific policies, rules and standards should be regularly reviewed. ",
    "function_name": "iam_policy_compliance_review",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_129",
    "description": "Operating procedures for information processing facilities should be documented and made available to personnel who need them.",
    "function_name": "compute_instance_documentation_availability",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_130",
    "description": "Background verification checks on all candidates to become personnel should be carried out prior to joining the organisation and on an ongoing basis taking into consideration applicable laws, regulations and ethics and be proportional to the business requirements, the classification of the information to be accessed and the perceived risks. ",
    "function_name": "iam_personnel_background_verification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_131",
    "description": "The employment contractual agreements should state the personnel’s and the organisations responsibilities for information security.",
    "function_name": "iam_personnel_contractual_agreements_information_security_responsibilities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_132",
    "description": "Personnel of the organisation and relevant interested parties should receive appropriate information security awareness, education and training and regular updates of the organisations information security policy, topic-specific policies and procedures, as relevant for their job function.",
    "function_name": "iam_policy_information_security_training",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_133",
    "description": "A disciplinary process should be formalised and communicated to take actions against personnel and other relevant interested parties who have committed an information security policy violation.",
    "function_name": "iam_policy_disciplinary_process_formalized",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_134",
    "description": "Information security responsibilities and duties that remain valid after termination or change of employment should be defined, enforced and communicated to relevant personnel and other interested parties.",
    "function_name": "iam_roles_post_employment_responsibilities_defined",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/roleName')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_135",
    "description": "Confidentiality or non-disclosure agreements reflecting the organisation’s needs for the protection of information should be identified, documented, regularly reviewed and signed by personnel and other relevant interested parties.",
    "function_name": "iam_policies_confidentiality_agreements_documented",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_136",
    "description": "Security measures should be implemented when personnel are working remotely to protect information accessed, processed or stored outside the organisation’s premises.",
    "function_name": "network_vpc_remote_access_security_measures",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_137",
    "description": "The organisation should provide a mechanism for personnel to report observed or suspected information security events through appropriate channels in a timely manner.",
    "function_name": "security_command_center_event_reporting_mechanism",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='projects/project_id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_138",
    "description": "To prevent unauthorised physical access, damage and interference to the organisations information and other associated assets.",
    "function_name": "compute_vm_physical_access_prevention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_139",
    "description": "Secure areas should be protected by appropriate entry controls and access points.",
    "function_name": "network_vpc_entry_control",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_140",
    "description": "Physical security for offices, rooms and facilities should be designed and implemented.",
    "function_name": "compute_facility_physical_security_implemented",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_141",
    "description": "Premises should be continuously monitored for unauthorised physical access.",
    "function_name": "security_command_center_physical_access_monitoring",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_142",
    "description": "Protection against physical and environmental threats, such as natural disasters and other intentional or unintentional physical threats to infrastructure should be designed and implemented.",
    "function_name": "compute_infrastructure_physical_threat_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_143",
    "description": "Security measures for working in secure areas should be designed and implemented.",
    "function_name": "security_command_center_secure_area_measures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_144",
    "description": "Clear desk rules for papers and removable storage media and clear screen rules for information processing facilities should be defined and appropriately enforced.",
    "function_name": "compute_instance_clear_screen_enforcement",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_145",
    "description": "Equipment should be sited securely and protected.",
    "function_name": "compute_instance_secure_siting",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_146",
    "description": "Off-site assets should be protected.",
    "function_name": "storage_buckets_offsite_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_147",
    "description": "Storage media should be managed through their life cycle of acquisition, use, transportation and disposal in accordance with the organisations classification scheme and handling requirements.",
    "function_name": "storage_media_lifecycle_management",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_148",
    "description": "Information processing facilities should be protected from power failures and other disruptions caused by failures in supporting utilities.",
    "function_name": "compute_instance_utility_resilience",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_149",
    "description": "Cables carrying power, data or supporting information services should be protected from interception",
    "function_name": "network_vpc_data_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_150",
    "description": "Equipment should be maintained correctly to ensure availability, integrity and confidentiality of information.",
    "function_name": "compute_instance_maintenance_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_151",
    "description": "Items of equipment containing storage media should be verified to ensure that any sensitive data and licensed software has been removed or securely overwritten prior to disposal or re-use.",
    "function_name": "compute_disks_sensitive_data_removed",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_152",
    "description": "Information stored on, processed by or accessible via user endpoint devices should be protected.",
    "function_name": "compute_instance_data_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_153",
    "description": "The allocation and use of privileged access rights should be restricted and managed.",
    "function_name": "iam_service_accounts_privileged_access_restricted",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_154",
    "description": "Access to information and other associated assets should be restricted in accordance with the established topic-specific policy on access control.",
    "function_name": "iam_service_accounts_access_restricted",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_155",
    "description": "Read and write access to source code, development tools and software libraries should be appropriately managed.",
    "function_name": "iam_roles_source_code_access_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_156",
    "description": "Secure authentication technologies and procedures should be implemented based on information access restrictions and the topic-specific policy on access control.",
    "function_name": "iam_service_accounts_secure_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_157",
    "description": "The use of resources should be monitored and adjusted in line with current and expected capacity requirements.",
    "function_name": "monitoring_resources_capacity_management",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_158",
    "description": "Protection against malware should be implemented and supported by appropriate user awareness.",
    "function_name": "compute_instance_malware_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_159",
    "description": "Information about technical vulnerabilities of information systems in use should be obtained, the organisations exposure to such vulnerabilities should be evaluated and appropriate measures should be taken.",
    "function_name": "security_command_center_vulnerabilities_assessed",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/org_id/sources/source_id')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_160",
    "description": "Configurations, including security configurations, of hardware, software, services and networks should be established, documented, implemented, monitored and reviewed.",
    "function_name": "compute_network_security_configuration_documented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_161",
    "description": "Information stored in information systems, devices or in any other storage media should be deleted when no longer required.",
    "function_name": "storage_objects_deletion_when_no_longer_required",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.delete_blob(bucket_name='bucket', blob_name='object')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_162",
    "description": "Data masking should be used in accordance with the organisation’s topic-specific policy on access control and other related topic-specific policies, and business requirements, taking applicable legislation into consideration.",
    "function_name": "bigquery_tables_data_masking_policy",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_id).encryption_configuration"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_163",
    "description": "Data leakage prevention measures should be applied to systems, networks and any other devices that process, store or transmit sensitive information.",
    "function_name": "network_devices_data_leakage_prevention",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_164",
    "description": "Backup copies of information, software and systems should be maintained and regularly tested in accordance with the agreed topic-specific policy on backup.",
    "function_name": "storage_buckets_backup_maintenance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_165",
    "description": "Information processing facilities should be implemented with redundancy sufficient to meet availability",
    "function_name": "compute_instance_redundancy_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_166",
    "description": "Logs that record activities, exceptions, faults and other relevant events should be produced, stored, protected and analysed.",
    "function_name": "logging_logs_produced_stored_protected_analyzed",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_167",
    "description": "Networks, systems and applications should be monitored for anomalous behaviour and appropriate actions taken to evaluate potential information security incidents.",
    "function_name": "monitoring_systems_anomalous_behaviour_detection",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_168",
    "description": "The clocks of information processing systems used by the organisation should be synchronised to approved time sources.",
    "function_name": "compute_instances_time_sync",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_169",
    "description": "The use of utility programs that can be capable of overriding system and application controls should be restricted and tightly controlled",
    "function_name": "compute_vm_utility_programs_restricted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_170",
    "description": "Procedures and measures should be implemented to securely manage software installation on operational systems.",
    "function_name": "compute_instance_secure_software_management",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_171",
    "description": "Networks and network devices should be secured, managed and controlled to protect information in systems and applications.",
    "function_name": "network_vpc_security_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_172",
    "description": "Security mechanisms, service levels and service requirements of network services should be identified, implemented and monitored.",
    "function_name": "network_services_security_mechanisms_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_173",
    "description": "Security mechanisms, service levels and service requirements of network services should be identified, implemented and monitored.",
    "function_name": "network_services_security_mechanisms_implemented",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_174",
    "description": "Access to external websites should be managed to reduce exposure to malicious content.",
    "function_name": "network_vpc_external_access_restriction",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_175",
    "description": "Rules for the effective use of cryptography, including cryptographic key management, should be defined and implemented.",
    "function_name": "kms_keys_cryptography_management",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_176",
    "description": "Rules for the secure development of software and systems should be established and applied.",
    "function_name": "compute_engine_secure_development_rules",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_177",
    "description": "Information security requirements should be identified, specified and approved when developing or acquiring applications.",
    "function_name": "iam_application_security_requirements_specified",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_178",
    "description": "Principles for engineering secure systems should be established, documented, maintained and applied to any information system development activities.",
    "function_name": "compute_engineering_principles_documented",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_179",
    "description": "Security testing processes should be defined and implemented in the development life cycle.",
    "function_name": "security_command_center_development_lifecycle_security_testing_defined",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_180",
    "description": "The organisation should direct, monitor and review the activities related to outsourced system development.",
    "function_name": "iam_service_accounts_outsourced_development_monitoring",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_181",
    "description": "Development, testing and production environments should be separated and secured.",
    "function_name": "compute_vm_environment_separation",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_182",
    "description": "Changes to information processing facilities and information systems should be subject to change management procedures.",
    "function_name": "compute_instance_change_management_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_183",
    "description": "Test information should be appropriately selected, protected and managed.",
    "function_name": "storage_objects_protected_management",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_blob(blob_name)"
  },
  {
    "sheet": "ISO2700",
    "rule_id": "ISO2700_184",
    "description": "Audit tests and other assurance activities involving assessment of operational systems should be planned and agreed between the tester and appropriate management.",
    "function_name": "security_command_center_audit_planning_agreement",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_1",
    "description": "Identificación",
    "function_name": "iam_service_account_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_2",
    "description": "Identificacion Avanzada",
    "function_name": "iam_service_account_advanced_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_3",
    "description": "Identificacion Avanzada",
    "function_name": "iam_service_account_advanced_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_4",
    "description": "Requisitos de acceso",
    "function_name": "iam_service_accounts_access_requirements",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_5",
    "description": "Privilegios de acceso",
    "function_name": "iam_roles_least_privilege",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_6",
    "description": "Segregación de funciones y tareas",
    "function_name": "iam_roles_segregation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_7",
    "description": "Cuentas de servicio",
    "function_name": "iam_service_accounts_ens_compliance",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_8",
    "description": "Segregación rigurosa",
    "function_name": "network_vpc_rigorous_segregation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_9",
    "description": "Proceso de gestión de derechos de acceso",
    "function_name": "iam_access_rights_management_process",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_10",
    "description": "Mecanismo de autenticación (usuarios de la organización)",
    "function_name": "iam_users_authentication_mechanism",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_11",
    "description": "Contraseñas",
    "function_name": "iam_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_12",
    "description": "Contraseña + otro factor de autenticación",
    "function_name": "iam_user_multifactor_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_13",
    "description": "Certificados",
    "function_name": "kms_keys_certificate_management",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_14",
    "description": "Certificados en dispositivo físico",
    "function_name": "compute_instance_physical_certificate",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_15",
    "description": "Registro de la actividad",
    "function_name": "logging_activity_registration",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_16",
    "description": "Doble factor para acceso desde o através de zonas no controladas",
    "function_name": "iam_access_two_factor_uncontrolled_zones",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_17",
    "description": "Acceso remoto",
    "function_name": "compute_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_18",
    "description": "Inventario de activos",
    "function_name": "compute_vm_asset_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_19",
    "description": "Inventario de etiquetado",
    "function_name": "compute_instance_label_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_20",
    "description": "Identificación periódica de activos",
    "function_name": "compute_instances_periodic_identification",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_21",
    "description": "Identificación de activos críticos",
    "function_name": "security_assets_identification_critical",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_22",
    "description": "Lista de componentes software",
    "function_name": "compute_instance_software_list",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_23",
    "description": "Mantenimiento y actualizaciones de seguridad",
    "function_name": "compute_instances_security_updates_maintenance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_24",
    "description": "Pruebas en preproducción",
    "function_name": "compute_instances_preproduction_testing",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_25",
    "description": "Prevención de fallos",
    "function_name": "compute_instance_fault_prevention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_26",
    "description": "Monitorización contínua",
    "function_name": "monitoring_continuous_monitoring_ens",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_27",
    "description": "Protección frente a código dañino",
    "function_name": "compute_instance_malware_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_28",
    "description": "Escaneo periódico",
    "function_name": "security_command_center_periodic_scan",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_29",
    "description": "Revisión preventiva del sistema",
    "function_name": "compute_instance_preventive_review",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_30",
    "description": "Lista blanca",
    "function_name": "network_firewall_whitelist_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_31",
    "description": "Capacidad de respuesta en caso de incidente",
    "function_name": "security_incident_response_capability",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/project-id/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_32",
    "description": "Registro de la actividad",
    "function_name": "logging_activity_registration",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_33",
    "description": "Revisión de los registros",
    "function_name": "logging_audit_logs_review",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_34",
    "description": "Sincronización del reloj del sistema",
    "function_name": "compute_instance_clock_synchronization",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_35",
    "description": "Retención de registros",
    "function_name": "logging_audit_logs_retention",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_36",
    "description": "Control de acceso",
    "function_name": "iam_service_account_access_control",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_37",
    "description": "Revisión automática y correlación de eventos",
    "function_name": "logging_event_correlation_automatic_review",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projectIds=['proj'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_38",
    "description": "Protección de claves criptográficas",
    "function_name": "kms_keys_protection",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_39",
    "description": "Algoritmos autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_40",
    "description": "Protección de la cadena de suministro",
    "function_name": "compute_instance_supply_chain_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_41",
    "description": "Protección de la cadena de suministro",
    "function_name": "compute_instance_supply_chain_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_42",
    "description": "Interconexión de sistemas",
    "function_name": "network_vpc_system_interconnection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_43",
    "description": "Coordinación de actividades",
    "function_name": "iam_service_accounts_activity_coordination",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_44",
    "description": "Plan de continuidad",
    "function_name": "compute_instance_continuity_plan",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_45",
    "description": "Detección de intrusión",
    "function_name": "security_command_center_intrusion_detection_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/project-id/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_46",
    "description": "Detección basada en reglas",
    "function_name": "security_command_center_rule_based_detection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='projects/project_id/sources/source_id')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_47",
    "description": "Procedimientos de respuesta",
    "function_name": "security_command_center_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_48",
    "description": "Acciones predeterminadas",
    "function_name": "compute_instance_default_actions",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_49",
    "description": "Vigilancia",
    "function_name": "security_command_center_vigilance_ens",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_50",
    "description": "Correlación de eventos",
    "function_name": "logging_event_correlation_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_51",
    "description": "Análisis dinámico",
    "function_name": "security_command_center_dynamic_analysis",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_52",
    "description": "Ciberamenazas avanzadas",
    "function_name": "security_command_center_ciberamenazas_avanzadas_detection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_53",
    "description": "Observatorios digitales",
    "function_name": "security_command_center_observatorios_digitales_ens_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_54",
    "description": "Minería de datos",
    "function_name": "bigquery_datasets_data_mining_protection",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_55",
    "description": "Inspecciones de seguridad",
    "function_name": "security_command_center_security_inspections",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_56",
    "description": "Perímetro seguro",
    "function_name": "network_vpc_secure_perimeter",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_57",
    "description": "Perímetro seguro",
    "function_name": "network_vpc_secure_perimeter",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_58",
    "description": "Protección de la confidencialidad",
    "function_name": "kms_keys_confidentiality_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_59",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_60",
    "description": "Dispositivos hardware",
    "function_name": "compute_instance_hardware_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_61",
    "description": "Productos certificados",
    "function_name": "compute_engine_vm_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_62",
    "description": "Cifradores",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_63",
    "description": "Cifrado de la información especialmente sensible",
    "function_name": "kms_keys_sensitive_information_encryption",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_64",
    "description": "Protección de la integridad y de la autenticidad",
    "function_name": "kms_keys_integrity_authenticity_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/loc/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_65",
    "description": "Redes privadas virtuales",
    "function_name": "network_vpc_private_networks",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_66",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_67",
    "description": "Dispositivos hardware",
    "function_name": "compute_instance_hardware_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_68",
    "description": "Productos certificados",
    "function_name": "compute_vm_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_69",
    "description": "Separación de flujos de información en la red",
    "function_name": "network_vpc_information_flow_separation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_70",
    "description": "Separación de flujos de información en la red",
    "function_name": "network_vpc_information_flow_separation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_71",
    "description": "Segmentación lógica básica",
    "function_name": "network_vpc_logical_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_72",
    "description": "Segmentación lógica avanzada",
    "function_name": "network_vpc_advanced_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_73",
    "description": "Segmentación física",
    "function_name": "network_vpc_physical_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_74",
    "description": "Puntos de interconexión",
    "function_name": "network_vpc_interconnection_points",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_75",
    "description": "Criptografía",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_76",
    "description": "Productos certificados",
    "function_name": "compute_engine_vms_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_77",
    "description": "Copias de seguridad",
    "function_name": "compute_disks_backup_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_78",
    "description": "Firma electrónica",
    "function_name": "iam_service_account_digital_signature_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_79",
    "description": "Certificados cualificados",
    "function_name": "kms_keys_certificados_cualificados",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_80",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_81",
    "description": "Verificación y validación de firma",
    "function_name": "iam_service_account_signature_verification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_82",
    "description": "Firma electrónica avanzada basada en certificados cualificados",
    "function_name": "iam_service_account_advanced_electronic_signature",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_83",
    "description": "Limpieza de documentos",
    "function_name": "storage_objects_cleanup",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name='bucket')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_84",
    "description": "Copias de seguridad",
    "function_name": "compute_disks_backup_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_85",
    "description": "Pruebas de recuperación",
    "function_name": "compute_instance_backup_recovery",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_86",
    "description": "Protección de las copias de seguridad",
    "function_name": "storage_buckets_backup_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_87",
    "description": "Protección del correo electrónico",
    "function_name": "security_email_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/project-id/securitySettings')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_88",
    "description": "Protección de servicios y aplicaciones web",
    "function_name": "network_load_balancer_web_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_89",
    "description": "Auditorías de seguirdad avanzada",
    "function_name": "security_command_center_advanced_audits",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_90",
    "description": "Protección de cachés",
    "function_name": "compute_instance_cache_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_91",
    "description": "Protección frente a denegación de servicio",
    "function_name": "network_vpc_ddos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_92",
    "description": "Detección y reacción",
    "function_name": "logging_audit_logs_detection_reaction",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_93",
    "description": "Identificación",
    "function_name": "iam_service_account_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_94",
    "description": "Identificacion Avanzada",
    "function_name": "iam_service_account_advanced_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_95",
    "description": "Identificacion Avanzada",
    "function_name": "iam_service_account_advanced_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_96",
    "description": "Requisitos de acceso",
    "function_name": "iam_service_accounts_access_requirements",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_97",
    "description": "Privilegios de acceso",
    "function_name": "iam_roles_least_privilege",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_98",
    "description": "Segregación de funciones y tareas",
    "function_name": "iam_roles_function_segregation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_99",
    "description": "Cuentas de servicio",
    "function_name": "iam_service_accounts_ens_compliance",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_100",
    "description": "Segregación rigurosa",
    "function_name": "network_vpc_strict_segregation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_101",
    "description": "Proceso de gestión de derechos de acceso",
    "function_name": "iam_service_account_access_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_102",
    "description": "Mecanismo de autenticación (usuarios de la organización)",
    "function_name": "iam_users_authentication_mechanism",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_103",
    "description": "Contraseñas",
    "function_name": "iam_password_policy_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_104",
    "description": "Contraseña + otro factor de autenticación",
    "function_name": "iam_user_multifactor_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_105",
    "description": "Certificados",
    "function_name": "iam_certificates_compliance_ens",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_106",
    "description": "Certificados en dispositivo físico",
    "function_name": "compute_instance_physical_certificate",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_107",
    "description": "Registro de la actividad",
    "function_name": "logging_activity_registration",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(project_ids=['my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_108",
    "description": "Doble factor para acceso desde o através de zonas no controladas",
    "function_name": "iam_access_two_factor_uncontrolled_zones",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_109",
    "description": "Acceso remoto",
    "function_name": "compute_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_110",
    "description": "Inventario de activos",
    "function_name": "compute_vm_asset_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_111",
    "description": "Inventario de etiquetado",
    "function_name": "compute_instance_label_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_112",
    "description": "Identificación periódica de activos",
    "function_name": "compute_instances_identification_periodic",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_113",
    "description": "Identificación de activos críticos",
    "function_name": "security_assets_identification_critical",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_114",
    "description": "Lista de componentes software",
    "function_name": "compute_vm_software_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getGuestAttributes(project='proj', zone='zone', instance='vm', queryPath='guestInventory')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_115",
    "description": "Mantenimiento y actualizaciones de seguridad",
    "function_name": "compute_instances_security_updates_maintenance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_116",
    "description": "Pruebas en preproducción",
    "function_name": "compute_instance_preprod_testing",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_117",
    "description": "Prevención de fallos",
    "function_name": "compute_instance_failure_prevention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_118",
    "description": "Monitorización contínua",
    "function_name": "monitoring_continuous_monitoring_ens",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_119",
    "description": "Protección frente a código dañino",
    "function_name": "compute_instance_malware_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_120",
    "description": "Escaneo periódico",
    "function_name": "security_command_center_periodic_scan",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_121",
    "description": "Revisión preventiva del sistema",
    "function_name": "compute_vm_preventive_review",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_122",
    "description": "Lista blanca",
    "function_name": "network_firewall_whitelist_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_123",
    "description": "Capacidad de respuesta en caso de incidente",
    "function_name": "security_command_center_incident_response_capability",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_124",
    "description": "Registro de la actividad",
    "function_name": "logging_activity_registration",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_125",
    "description": "Revisión de los registros",
    "function_name": "logging_audit_logs_review",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project']})"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_126",
    "description": "Sincronización del reloj del sistema",
    "function_name": "compute_instance_clock_synchronization",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_127",
    "description": "Retención de registros",
    "function_name": "logging_audit_logs_retention",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_128",
    "description": "Control de acceso",
    "function_name": "iam_service_account_access_control",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_129",
    "description": "Revisión automática y correlación de eventos",
    "function_name": "logging_event_correlation_automatic_review",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_130",
    "description": "Protección de claves criptográficas",
    "function_name": "kms_keys_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_131",
    "description": "Algoritmos autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_132",
    "description": "Protección de la cadena de suministro",
    "function_name": "iam_service_accounts_supply_chain_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_133",
    "description": "Protección de la cadena de suministro",
    "function_name": "compute_instance_supply_chain_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_134",
    "description": "Interconexión de sistemas",
    "function_name": "network_vpc_system_interconnection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_135",
    "description": "Coordinación de actividades",
    "function_name": "iam_service_accounts_activity_coordination",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_136",
    "description": "Plan de continuidad",
    "function_name": "compute_instance_continuity_plan",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_137",
    "description": "Detección de intrusión",
    "function_name": "security_command_center_intrusion_detection_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/project-id/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_138",
    "description": "Detección basada en reglas",
    "function_name": "security_command_center_rule_based_detection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='projects/project_id/sources/source_id')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_139",
    "description": "Procedimientos de respuesta",
    "function_name": "security_command_center_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_140",
    "description": "Acciones predeterminadas",
    "function_name": "compute_instance_default_actions",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_141",
    "description": "Vigilancia",
    "function_name": "logging_audit_logs_vigilance",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_142",
    "description": "Correlación de eventos",
    "function_name": "logging_event_correlation_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_143",
    "description": "Análisis dinámico",
    "function_name": "security_command_center_dynamic_analysis",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_144",
    "description": "Ciberamenazas avanzadas",
    "function_name": "security_command_center_ciberamenazas_avanzadas_detection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_145",
    "description": "Observatorios digitales",
    "function_name": "security_command_center_digital_observatories_ens_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/proj/locations/global')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_146",
    "description": "Minería de datos",
    "function_name": "bigquery_datasets_data_mining_protection",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_147",
    "description": "Inspecciones de seguridad",
    "function_name": "security_command_center_security_inspections",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_148",
    "description": "Perímetro seguro",
    "function_name": "network_vpc_secure_perimeter",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_149",
    "description": "Perímetro seguro",
    "function_name": "network_vpc_secure_perimeter",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_150",
    "description": "Protección de la confidencialidad",
    "function_name": "kms_keys_confidentiality_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_151",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_152",
    "description": "Dispositivos hardware",
    "function_name": "compute_instance_hardware_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_153",
    "description": "Productos certificados",
    "function_name": "compute_engine_vms_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_154",
    "description": "Cifradores",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_155",
    "description": "Cifrado de la información especialmente sensible",
    "function_name": "kms_keys_sensitive_data_encrypted",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_156",
    "description": "Protección de la integridad y de la autenticidad",
    "function_name": "kms_keys_integrity_authenticity_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/loc/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_157",
    "description": "Redes privadas virtuales",
    "function_name": "network_vpc_private_networks",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_158",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_159",
    "description": "Dispositivos hardware",
    "function_name": "compute_instance_hardware_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_160",
    "description": "Productos certificados",
    "function_name": "compute_engine_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_161",
    "description": "Separación de flujos de información en la red",
    "function_name": "network_vpc_information_flow_separation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_162",
    "description": "Separación de flujos de información en la red",
    "function_name": "network_vpc_information_flow_separation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_163",
    "description": "Segmentación lógica básica",
    "function_name": "network_vpc_logical_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_164",
    "description": "Segmentación lógica avanzada",
    "function_name": "network_vpc_advanced_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_165",
    "description": "Segmentación física",
    "function_name": "network_vpc_physical_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_166",
    "description": "Puntos de interconexión",
    "function_name": "network_vpc_interconnection_points",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_167",
    "description": "Criptografía",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_168",
    "description": "Productos certificados",
    "function_name": "compute_engine_vms_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_169",
    "description": "Copias de seguridad",
    "function_name": "storage_buckets_backup_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_170",
    "description": "Firma electrónica",
    "function_name": "iam_service_account_digital_signature",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_171",
    "description": "Certificados cualificados",
    "function_name": "kms_keys_certificados_cualificados",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_172",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_173",
    "description": "Verificación y validación de firma",
    "function_name": "kms_keys_signature_verification",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_174",
    "description": "Firma electrónica avanzada basada en certificados cualificados",
    "function_name": "iam_service_accounts_advanced_electronic_signature",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_175",
    "description": "Limpieza de documentos",
    "function_name": "storage_objects_document_cleanup",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name='my-bucket')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_176",
    "description": "Copias de seguridad",
    "function_name": "compute_disks_backup_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_177",
    "description": "Pruebas de recuperación",
    "function_name": "compute_instance_recovery_test",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_178",
    "description": "Protección de las copias de seguridad",
    "function_name": "storage_buckets_backup_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_179",
    "description": "Protección del correo electrónico",
    "function_name": "security_email_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(name='projects/project-id/securitySettings')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_180",
    "description": "Protección de servicios y aplicaciones web",
    "function_name": "network_load_balancer_web_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_181",
    "description": "Auditorías de seguirdad avanzada",
    "function_name": "security_command_center_advanced_audits",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_182",
    "description": "Protección de cachés",
    "function_name": "compute_instance_cache_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_183",
    "description": "Protección frente a denegación de servicio",
    "function_name": "network_vpc_ddos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_184",
    "description": "Detección y reacción",
    "function_name": "logging_audit_logs_detection_reaction",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_185",
    "description": "Ciberamenazas avanzadas",
    "function_name": "security_command_center_ciberamenazas_avanzadas_detection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_186",
    "description": "Observatorios digitales",
    "function_name": "security_command_center_digital_observatories_ens_compliance",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/loc/clusters/cluster')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_187",
    "description": "Minería de datos",
    "function_name": "bigquery_datasets_data_mining_protection",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_188",
    "description": "Inspecciones de seguridad",
    "function_name": "security_command_center_security_inspections",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_189",
    "description": "Perímetro seguro",
    "function_name": "network_vpc_secure_perimeter",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_190",
    "description": "Perímetro seguro",
    "function_name": "network_vpc_secure_perimeter",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_191",
    "description": "Protección de la confidencialidad",
    "function_name": "kms_keys_confidentiality_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_192",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_193",
    "description": "Dispositivos hardware",
    "function_name": "compute_instance_hardware_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_194",
    "description": "Productos certificados",
    "function_name": "compute_engine_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_195",
    "description": "Cifradores",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_196",
    "description": "Cifrado de la información especialmente sensible",
    "function_name": "storage_objects_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').default_kms_key_name"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_197",
    "description": "Protección de la integridad y de la autenticidad",
    "function_name": "kms_keys_integrity_authenticity_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_198",
    "description": "Redes privadas virtuales",
    "function_name": "network_vpc_private_state",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_199",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_200",
    "description": "Dispositivos hardware",
    "function_name": "compute_instance_hardware_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_201",
    "description": "Productos certificados",
    "function_name": "compute_engine_vms_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_202",
    "description": "Separación de flujos de información en la red",
    "function_name": "network_vpc_information_flow_separation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_203",
    "description": "Separación de flujos de información en la red",
    "function_name": "network_vpc_information_flow_separation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_204",
    "description": "Segmentación lógica básica",
    "function_name": "network_vpc_logical_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_205",
    "description": "Segmentación lógica avanzada",
    "function_name": "network_vpc_advanced_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_206",
    "description": "Segmentación física",
    "function_name": "network_vpc_physical_segmentation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_207",
    "description": "Puntos de interconexión",
    "function_name": "network_vpc_interconnection_points",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_208",
    "description": "Criptografía",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_209",
    "description": "Productos certificados",
    "function_name": "compute_engine_certified_products",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_210",
    "description": "Copias de seguridad",
    "function_name": "compute_disks_backup_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_211",
    "description": "Firma electrónica",
    "function_name": "iam_service_account_digital_signature_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_212",
    "description": "Certificados cualificados",
    "function_name": "iam_service_accounts_qualified_certificates",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_213",
    "description": "Algoritmos y parámetros autorizados",
    "function_name": "kms_keys_use_authorized_algorithms",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_214",
    "description": "Verificación y validación de firma",
    "function_name": "iam_service_account_signature_verification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_215",
    "description": "Firma electrónica avanzada basada en certificados cualificados",
    "function_name": "iam_service_accounts_advanced_electronic_signature",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_216",
    "description": "Limpieza de documentos",
    "function_name": "storage_objects_document_cleanup",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name='bucket')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_217",
    "description": "Copias de seguridad",
    "function_name": "compute_disks_backup_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_218",
    "description": "Pruebas de recuperación",
    "function_name": "compute_instance_recovery_test",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_219",
    "description": "Protección de las copias de seguridad",
    "function_name": "storage_buckets_backup_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_220",
    "description": "Protección del correo electrónico",
    "function_name": "security_email_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecuritySettings(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_221",
    "description": "Protección de servicios y aplicaciones web",
    "function_name": "network_load_balancer_web_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_222",
    "description": "Auditorías de seguirdad avanzada",
    "function_name": "security_command_center_advanced_audits",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_223",
    "description": "Protección de cachés",
    "function_name": "compute_instance_cache_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_224",
    "description": "Protección frente a denegación de servicio",
    "function_name": "network_vpc_ddos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "ENS",
    "rule_id": "ENS_225",
    "description": "Detección y reacción",
    "function_name": "logging_audit_logs_detection_reaction",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\"'})"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_1",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.",
    "function_name": "network_vpc_no_insecure_configurations",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_2",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
    "function_name": "iam_service_account_least_privilege",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_3",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
    "function_name": "iam_service_accounts_least_privilege_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_4",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.",
    "function_name": "compute_vm_disable_script_execution",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setMetadata(project='proj', zone='zone', instance='vm', body={'items': [{'key': 'block-project-ssh-keys', 'value': 'true'}]})"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_5",
    "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.",
    "function_name": "compute_engine_vm_secure_configuration",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_6",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.",
    "function_name": "security_command_center_user_action_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_7",
    "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.",
    "function_name": "iam_account_credential_integrity",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_8",
    "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "function_name": "iam_account_creation_prevention",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_9",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.",
    "function_name": "logging_event_based_execution_prevention",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_10",
    "description": "Adversaries may abuse cloud management services to execute commands within virtual machines or hybrid-joined devices. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. Similarly, in Azure AD environments, Microsoft Endpoint Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to the Azure AD.",
    "function_name": "compute_instance_command_execution_prevention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_11",
    "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
    "function_name": "compute_image_integrity_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.images().get(project='proj', image='image_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_12",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.",
    "function_name": "iam_authentication_mechanism_integrity",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_13",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
    "function_name": "network_firewall_rules_ensure_integrity",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_14",
    "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
    "function_name": "compute_instance_unauthorized_modification_prevent",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_15",
    "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
    "function_name": "compute_instance_geographic_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_16",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
    "function_name": "iam_service_account_token_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_17",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
    "function_name": "iam_account_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_18",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
    "function_name": "iam_service_account_token_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_19",
    "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.",
    "function_name": "iam_account_mfa_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_20",
    "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
    "function_name": "network_vpc_promiscuous_mode_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_21",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).",
    "function_name": "compute_instance_secure_credential_storage",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_22",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
    "function_name": "network_vpc_restrict_protocol_exfiltration",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_23",
    "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
    "function_name": "storage_bucket_cross_account_exfiltration_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_24",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools.",
    "function_name": "storage_objects_automated_collection_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name='bucket')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_25",
    "description": "Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.[5][6][7] There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_26",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization.",
    "function_name": "storage_buckets_external_sharing_disabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_27",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.",
    "function_name": "storage_bucket_data_staging_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_28",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
    "function_name": "compute_disks_data_integrity_preserved",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_29",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.",
    "function_name": "kms_keys_encryption_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_30",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "function_name": "storage_objects_integrity_preserved",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_31",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.",
    "function_name": "network_firewall_endpoint_dos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body=firewall_body)"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_32",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2] This may deny access to available backups and recovery options.",
    "function_name": "compute_instance_backup_protection_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_33",
    "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability.",
    "function_name": "compute_instance_resource_limits",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_34",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.",
    "function_name": "network_vpc_bandwidth_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_35",
    "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).",
    "function_name": "iam_service_accounts_no_listing",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_36",
    "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
    "function_name": "compute_instance_discovery_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_37",
    "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
    "function_name": "security_command_center_assets_visibility",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_38",
    "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.",
    "function_name": "logging_audit_logs_enumeration_protection",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_39",
    "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.",
    "function_name": "storage_objects_access_restriction",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_40",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.",
    "function_name": "network_vpc_no_open_ports",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_41",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).",
    "function_name": "iam_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_42",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
    "function_name": "network_connections_restricted_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_43",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_geolocation_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_44",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_system_info_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_45",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_software_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getGuestAttributes(project='proj', zone='zone', instance='vm', queryPath='guestInventory')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_46",
    "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.",
    "function_name": "iam_roles_permissions_discovery_prevention",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_47",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.",
    "function_name": "network_vpc_no_insecure_configurations",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_48",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
    "function_name": "iam_service_account_least_privilege_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_49",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
    "function_name": "iam_service_account_least_privilege_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_50",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.",
    "function_name": "compute_instance_disable_script_execution",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setMetadata(project='proj', zone='zone', instance='vm', body={'items': [{'key': 'enable-oslogin', 'value': 'TRUE'}]})"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_51",
    "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.",
    "function_name": "compute_engine_secure_configuration",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_52",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.",
    "function_name": "security_command_center_user_action_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_53",
    "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.",
    "function_name": "iam_account_credential_integrity",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_54",
    "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "function_name": "iam_account_creation_prevention",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_55",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.",
    "function_name": "logging_event_based_execution_prevention",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(filter='resource.type=\"gce_instance\" AND protoPayload.methodName=\"v1.compute.instances.insert\"')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_56",
    "description": "Adversaries may abuse cloud management services to execute commands within virtual machines or hybrid-joined devices. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. Similarly, in Azure AD environments, Microsoft Endpoint Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to the Azure AD.",
    "function_name": "compute_instance_command_execution_prevention",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_57",
    "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
    "function_name": "compute_image_integrity_ensured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.images().get(project='proj', image='image_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_58",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.",
    "function_name": "iam_service_accounts_ensure_strong_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_59",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
    "function_name": "network_firewall_rules_ensure_integrity",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall-name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_60",
    "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
    "function_name": "compute_instance_unauthorized_modification_prevent",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_61",
    "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
    "function_name": "compute_instance_geographic_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_62",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
    "function_name": "iam_service_accounts_secure_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_63",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
    "function_name": "iam_account_password_policy_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_64",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
    "function_name": "iam_service_account_token_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_65",
    "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.",
    "function_name": "iam_account_mfa_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_66",
    "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
    "function_name": "network_vpc_promiscuous_mode_disabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_67",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).",
    "function_name": "compute_instance_secure_credential_storage",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_68",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
    "function_name": "network_vpc_prevent_protocol_exfiltration",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_69",
    "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
    "function_name": "storage_bucket_cross_account_exfiltration_prevent",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_70",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools.",
    "function_name": "storage_objects_automated_data_collection_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name='my-bucket')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_71",
    "description": "Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.[5][6][7] There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_72",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization.",
    "function_name": "storage_bucket_external_sharing_disabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_73",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.",
    "function_name": "storage_bucket_data_staging_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_74",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
    "function_name": "compute_disks_data_integrity_preserved",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_75",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_76",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "function_name": "storage_objects_integrity_preserved",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_77",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.",
    "function_name": "network_firewall_endpoint_dos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body=firewall_body)"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_78",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2] This may deny access to available backups and recovery options.",
    "function_name": "compute_instance_backup_recovery_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_79",
    "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability.",
    "function_name": "compute_instance_resource_intensive_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_80",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.",
    "function_name": "network_vpc_dos_protection_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_81",
    "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).",
    "function_name": "iam_service_accounts_no_exposure",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_82",
    "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
    "function_name": "compute_instance_discovery_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_83",
    "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
    "function_name": "security_command_center_assets_visibility",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_84",
    "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.",
    "function_name": "logging_audit_logs_enumeration_protection",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_85",
    "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.",
    "function_name": "storage_objects_access_restriction",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_86",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.",
    "function_name": "network_vpc_services_exposure",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_87",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).",
    "function_name": "iam_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_88",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
    "function_name": "network_connections_restricted_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_89",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_location_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_90",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_system_info_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_91",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_software_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getGuestAttributes(project='proj', zone='zone', instance='vm', queryPath='guestInventory')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_92",
    "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.",
    "function_name": "iam_roles_permissions_discovery_prevent",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_93",
    "description": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.",
    "function_name": "network_vpc_no_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_94",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.",
    "function_name": "iam_service_account_least_privilege_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_95",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.[1] Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.",
    "function_name": "iam_service_account_least_privilege_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_96",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell.",
    "function_name": "compute_instance_restrict_script_execution",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setMetadata(project='proj', zone='zone', instance='vm', body={'items': [{'key': 'block-script-execution', 'value': 'true'}]})"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_97",
    "description": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers.",
    "function_name": "compute_engine_secure_serverless_execution",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_98",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing.",
    "function_name": "security_command_center_user_action_protection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_99",
    "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials.",
    "function_name": "iam_account_credential_integrity",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_100",
    "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
    "function_name": "iam_account_creation_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_101",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.",
    "function_name": "logging_event_based_execution_prevention",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projectIds=['proj'], filter='resource.type=\"gce_instance\" AND protoPayload.methodName=\"v1.compute.instances.insert\"')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_102",
    "description": "Adversaries may abuse cloud management services to execute commands within virtual machines or hybrid-joined devices. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. Similarly, in Azure AD environments, Microsoft Endpoint Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to the Azure AD.",
    "function_name": "compute_instance_restrict_remote_command_execution",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_103",
    "description": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image.",
    "function_name": "compute_images_ensure_no_malicious_code",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.images().get(project='proj', image='image')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_104",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts.",
    "function_name": "iam_authentication_mechanisms_integrity",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_105",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.",
    "function_name": "compute_firewall_rules_immutable",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_106",
    "description": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots.",
    "function_name": "compute_instance_unauthorized_modification_prevent",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_107",
    "description": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure.",
    "function_name": "compute_instance_geographic_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_108",
    "description": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls.",
    "function_name": "iam_service_account_token_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_109",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.",
    "function_name": "iam_account_password_policy_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_110",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.",
    "function_name": "iam_service_accounts_secure_token_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_111",
    "description": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users.",
    "function_name": "iam_account_mfa_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_112",
    "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.",
    "function_name": "network_vpc_disable_promiscuous_mode",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().patch(project='proj', network='network', body={'promiscuousMode': False})"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_113",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys).",
    "function_name": "compute_vm_secure_credential_storage",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_114",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.",
    "function_name": "network_vpc_exfiltration_prevention",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_115",
    "description": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection.",
    "function_name": "storage_bucket_cross_account_exfiltration_prevent",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_116",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools.",
    "function_name": "storage_objects_automated_collection_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name='my-bucket')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_117",
    "description": "Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.[5][6][7] There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_118",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization.",
    "function_name": "storage_bucket_external_sharing_disabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_119",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.",
    "function_name": "storage_bucket_data_staging_prevention",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_120",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.[1][2][3][4][5][6] Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.",
    "function_name": "compute_disks_data_integrity_preserved",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().get(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_121",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.",
    "function_name": "kms_keys_encryption_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_122",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages.",
    "function_name": "storage_objects_integrity_ensured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_123",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.",
    "function_name": "network_firewall_endpoint_dos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().insert(project='proj', body=firewall_body)"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_124",
    "description": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.[1][2] This may deny access to available backups and recovery options.",
    "function_name": "compute_instance_backup_recovery_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_125",
    "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems, which may impact system and/or hosted service availability.",
    "function_name": "compute_instance_resource_limits_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_126",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes[1] and to support other malicious activities, including distraction[2], hacktivism, and extortion.",
    "function_name": "network_vpc_dos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().insert(project='proj', body=firewall_body)"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_127",
    "description": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts).",
    "function_name": "iam_service_accounts_no_excessive_permissions",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_128",
    "description": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services.",
    "function_name": "compute_instance_discovery_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_129",
    "description": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports.",
    "function_name": "security_command_center_assets_visibility",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_130",
    "description": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs.",
    "function_name": "logging_audit_logs_enumeration_protection",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_131",
    "description": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure.",
    "function_name": "storage_objects_access_restricted",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_132",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.",
    "function_name": "network_vpc_services_exposure_prevention",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_133",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).",
    "function_name": "iam_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_134",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.",
    "function_name": "network_connections_list_restriction",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_135",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_location_restriction",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_136",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_os_info_restricted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_137",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
    "function_name": "compute_instance_software_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getGuestAttributes(project='proj', zone='zone', instance='vm', queryPath='guestInventory/software')"
  },
  {
    "sheet": "MITRE-ATTACK",
    "rule_id": "MITRE-ATTACK_138",
    "description": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.",
    "function_name": "iam_roles_permissions_discovery_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_1",
    "description": "Use corporate login credentials instead of personal accounts, such as Gmail accounts.",
    "function_name": "iam_service_accounts_corporate_login_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_2",
    "description": "Setup multi-factor authentication for Google Cloud Platform accounts.",
    "function_name": "iam_account_multi_factor_authentication_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_3",
    "description": "Setup Security Key Enforcement for Google Cloud Platform admin accounts.",
    "function_name": "iam_admin_accounts_security_key_enforcement",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/admin@example.com')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_4",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. API keys are always at risk because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to restrict API keys to use (call) only APIs required by an application.",
    "function_name": "iam_api_key_usage_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_5",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. If they are in use it is recommended to rotate API keys every 90 days.",
    "function_name": "iam_api_keys_rotation_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_6",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. Unused keys with their permissions in tact may still exist within a project. Keys are insecure because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to use standard authentication flow instead.",
    "function_name": "iam_api_keys_standard_authentication_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_7",
    "description": "It is recommended that Essential Contacts is configured to designate email addresses for Google Cloud services to notify of important technical or security information.",
    "function_name": "security_essential_contacts_configured",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getContact(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_8",
    "description": "Google Cloud Key Management Service stores cryptographic keys in a hierarchical structure designed for useful and elegant access control management.   The format for the rotation schedule depends on the client library that is used. For the gcloud command-line tool, the next rotation time must be in `ISO` or `RFC3339` format, and the rotation period must be in the form `INTEGERUNIT`, where units can be one of seconds (s), minutes (m), hours (h) or days (d).",
    "function_name": "kms_key_rotation_schedule_format",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_9",
    "description": "It is recommended that the IAM policy on Cloud KMS `cryptokeys` should restrict anonymous and/or public access.",
    "function_name": "kms_cryptokeys_restrict_public_access",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-keyring/cryptoKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_10",
    "description": "When you use Dataproc, cluster and job data is stored on Persistent Disks (PDs) associated with the Compute Engine VMs in your cluster and in a Cloud Storage staging bucket. This PD and bucket data is encrypted using a Google-generated data encryption key (DEK) and key encryption key (KEK). The CMEK feature allows you to create, use, and revoke the key encryption key (KEK). Google still controls the data encryption key (DEK).",
    "function_name": "dataproc_cluster_cmek_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_11",
    "description": "It is recommended to assign the `Service Account User (iam.serviceAccountUser)` and `Service Account Token Creator (iam.serviceAccountTokenCreator)` roles to a user for a specific service account rather than assigning the role to a user at project level.",
    "function_name": "iam_service_account_role_assignment_specific",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_12",
    "description": "It is recommended that the principle of 'Separation of Duties' is enforced while assigning KMS related roles to users.",
    "function_name": "kms_roles_separation_of_duties_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().get(name='projects/proj/locations/global/keyRings/ring')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_13",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. In this case, unrestricted keys are insecure because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to restrict API key usage to trusted hosts, HTTP referrers and apps. It is recommended to use the more secure standard authentication flow instead.",
    "function_name": "iam_api_keys_restricted_usage",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().apiKeys().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_14",
    "description": "It is recommended that the principle of 'Separation of Duties' is enforced while assigning service-account related roles to users.",
    "function_name": "iam_service_account_role_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_15",
    "description": "A service account is a special Google account that belongs to an application or a VM, instead of to an individual end-user. The application uses the service account to call the service's Google API so that users aren't directly involved. It's recommended not to use admin access for ServiceAccount.",
    "function_name": "iam_service_account_no_admin_access",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/{account_email}')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_16",
    "description": "User managed service accounts should not have user-managed keys.",
    "function_name": "iam_service_accounts_no_user_managed_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_17",
    "description": "Service Account keys consist of a key ID (Private_key_Id) and Private key, which are used to sign programmatic requests users make to Google cloud services accessible to that particular service account. It is recommended that all Service Account keys are regularly rotated.",
    "function_name": "iam_service_account_keys_rotation",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_18",
    "description": "Google Cloud Functions allow you to host serverless code that is executed when an event is triggered, without the requiring the management a host operating system. These functions can also store environment variables to be used by the code that may contain authentication or other information that needs to remain confidential.",
    "function_name": "functions_environment_variables_confidential",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_19",
    "description": "GCP Access Approval enables you to require your organizations' explicit approval whenever Google support try to access your projects. You can then select users within your organization who can approve these requests through giving them a security role in IAM. All access requests display which Google Employee requested them in an email or Pub/Sub message that you can choose to Approve. This adds an additional control and logging of who in your organization approved/denied these requests.",
    "function_name": "iam_access_approval_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getAccessApprovalSettings(name='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_20",
    "description": "GCP Cloud Asset Inventory is services that provides a historical view of GCP resources and IAM policies through a time-series database. The information recorded includes metadata on Google Cloud resources, metadata on policies set on Google Cloud projects or resources, and runtime information gathered within a Google Cloud resource.",
    "function_name": "security_cloud_asset_inventory_historical_view_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='projects/proj', contentType='RESOURCE')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_21",
    "description": "In order to prevent unnecessary project ownership assignments to users/service-accounts and further misuses of projects and resources, all `roles/Owner` assignments should be monitored.  Members (users/Service-Accounts) with a role assignment to primitive role `roles/Owner` are project owners.  The project owner has all the privileges on the project the role belongs to. These are summarized below: - All viewer permissions on all GCP Services within the project - Permissions for actions that modify the state of all GCP services within the project - Manage roles and permissions for a project and all resources within the project - Set up billing for a project  Granting the owner role to a member (user/Service-Account) will allow that member to modify the Identity and Access Management (IAM) policy. Therefore, grant the owner role only if the member has a legitimate purpose to manage the IAM policy. This is because the project IAM policy contains sensitive access control data. Having a minimal set of users allowed to manage IAM policy will simplify any auditing that may be necessary.",
    "function_name": "iam_project_owner_role_restriction",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_22",
    "description": "Logging enabled on a HTTPS Load Balancer will show all network traffic and its destination.",
    "function_name": "network_https_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_23",
    "description": "It is recommended that Cloud Audit Logging is configured to track all admin activities and read, write access to user data.",
    "function_name": "logging_audit_logs_configured_for_admin_and_data_access",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_24",
    "description": "Cloud DNS logging records the queries from the name servers within your VPC to Stackdriver. Logged queries can come from Compute Engine VMs, GKE containers, or other GCP resources provisioned within the VPC.",
    "function_name": "logging_dns_queries_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_25",
    "description": "Enabling retention policies on log buckets will protect logs stored in cloud storage buckets from being overwritten or accidentally deleted. It is recommended to set up retention policies and configure Bucket Lock on all storage buckets that are used as log sinks.",
    "function_name": "storage_bucket_retention_policy_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_26",
    "description": "It is recommended to create a sink that will export copies of all the log entries. This can help aggregate logs from multiple projects and export them to a Security Information and Event Management (SIEM).",
    "function_name": "logging_sink_export_all_logs",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().create(parent='projects/my-project', body={'name': 'my-sink', 'destination': 'bigquery.googleapis.com/projects/my-project/datasets/my_dataset'})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_27",
    "description": "Google Cloud Platform (GCP) services write audit log entries to the Admin Activity and Data Access logs to help answer the questions of, \"who did what, where, and when?\" within GCP projects.  Cloud audit logging records information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by GCP services. Cloud audit logging provides a history of GCP API calls for an account, including API calls made via the console, SDKs, command-line tools, and other GCP services.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_28",
    "description": "It is recommended that a metric filter and alarm be established for Cloud Storage Bucket IAM changes.",
    "function_name": "storage_bucket_iam_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_29",
    "description": "It is recommended that a metric filter and alarm be established for changes to Identity and Access Management (IAM) role creation, deletion and updating activities.",
    "function_name": "logging_iam_role_change_alert",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.metricDescriptors().create(name='projects/my-project', body=metric_descriptor)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_30",
    "description": "It is recommended that a metric filter and alarm be established for SQL instance configuration changes.",
    "function_name": "monitoring_sql_instance_config_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_31",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) network changes.",
    "function_name": "network_vpc_metric_filter_alarm_established",
    "service_category": "Network|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_32",
    "description": "GCP Access Transparency provides audit logs for all actions that Google personnel take in your Google Cloud resources.",
    "function_name": "logging_auditlogs_access_transparency_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_33",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) Network Firewall rule changes.",
    "function_name": "network_vpc_firewall_rule_change_alert",
    "service_category": "Network|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/proj', body=alert_policy)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_34",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) network route changes.",
    "function_name": "network_vpc_route_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_35",
    "description": "In order to prevent use of legacy networks, a project should not have a legacy network configured. As of now, Legacy Networks are gradually being phased out, and you can no longer create projects with them. This recommendation is to check older projects to ensure that they are not using Legacy Networks.",
    "function_name": "network_vpc_no_legacy_networks",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_36",
    "description": "Cloud Domain Name System (DNS) is a fast, reliable and cost-effective domain name system that powers millions of domains on the internet. Domain Name System Security Extensions (DNSSEC) in Cloud DNS enables domain owners to take easy steps to protect their domains against DNS hijacking and man-in-the-middle and other attacks.",
    "function_name": "network_dns_dnssec_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_37",
    "description": "GCP `Firewall Rules` are specific to a `VPC Network`. Each rule either `allows` or `denies` traffic when its conditions are met. Its conditions allow users to specify the type of traffic, such as ports and protocols, and the source or destination of the traffic, including IP addresses, subnets, and instances.  Firewall rules are defined at the VPC network level and are specific to the network in which they are defined. The rules themselves cannot be shared among networks. Firewall rules only support IPv4 traffic. When specifying a source for an ingress rule or a destination for an egress rule by address, an `IPv4` address or `IPv4 block in CIDR` notation can be used. Generic `(0.0.0.0/0)` incoming traffic from the Internet to a VPC or VM instance using `RDP` on `Port 3389` can be avoided.",
    "function_name": "network_firewall_rules_restrict_rdp_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_38",
    "description": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.  DNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.",
    "function_name": "network_dnssec_algorithm_recommended",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_39",
    "description": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.  DNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.",
    "function_name": "network_dnssec_algorithm_recommended",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_40",
    "description": "GCP `Firewall Rules` are specific to a `VPC Network`. Each rule either `allows` or `denies` traffic when its conditions are met. Its conditions allow the user to specify the type of traffic, such as ports and protocols, and the source or destination of the traffic, including IP addresses, subnets, and instances.  Firewall rules are defined at the VPC network level and are specific to the network in which they are defined. The rules themselves cannot be shared among networks. Firewall rules only support IPv4 traffic. When specifying a source for an ingress rule or a destination for an egress rule by address, only an `IPv4` address or `IPv4 block in CIDR` notation can be used. Generic `(0.0.0.0/0)` incoming traffic from the internet to VPC or VM instance using `SSH` on `Port 22` can be avoided.",
    "function_name": "network_firewall_rules_restrict_ssh_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_41",
    "description": "To prevent use of `default` network, a project should not have a `default` network.",
    "function_name": "network_vpc_no_default_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_42",
    "description": "Flow Logs is a feature that enables users to capture information about the IP traffic going to and from network interfaces in the organization's VPC Subnets. Once a flow log is created, the user can view and retrieve its data in Stackdriver Logging. It is recommended that Flow Logs be enabled for every business-critical VPC subnet.",
    "function_name": "network_vpc_subnet_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.subnetworks().get(project='proj', region='region', subnetwork='subnet')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_43",
    "description": "Secure Sockets Layer (SSL) policies determine what port Transport Layer Security (TLS) features clients are permitted to use when connecting to load balancers. To prevent usage of insecure features, SSL policies should use (a) at least TLS 1.2 with the MODERN profile; or (b) the RESTRICTED profile, because it effectively requires clients to use TLS 1.2 regardless of the chosen minimum TLS version; or (3) a CUSTOM profile that does not support any of the following features:  ``` TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_3DES_EDE_CBC_SHA ```",
    "function_name": "network_ssl_policy_enforce_tls12_modern_or_restricted",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_44",
    "description": "IAP authenticates the user requests to your apps via a Google single sign in. You can then manage these users with permissions to control access. It is recommended to use both IAP permissions and firewalls to restrict this access to your apps with sensitive information.",
    "function_name": "network_iap_firewall_restriction",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_45",
    "description": "Interacting with a serial port is often referred to as the serial console, which is similar to using a terminal window, in that input and output is entirely in text mode and there is no graphical interface or mouse support.  If you enable the interactive serial console on an instance, clients can attempt to connect to that instance from any IP address. Therefore interactive serial console support should be disabled.",
    "function_name": "compute_instance_disable_serial_console",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setSerialPortOutput(project='proj', zone='zone', instance='vm', enable=False)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_46",
    "description": "It is recommended to use Instance specific SSH key(s) instead of using common/shared project-wide SSH key(s) to access Instances.",
    "function_name": "compute_instance_use_instance_specific_ssh_keys",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_47",
    "description": "To defend against advanced threats and ensure that the boot loader and firmware on your VMs are signed and untampered, it is recommended that Compute instances are launched with Shielded VM enabled.",
    "function_name": "compute_instance_shielded_vm_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getShieldedInstanceConfig(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_48",
    "description": "Enabling OS login binds SSH certificates to IAM users and facilitates effective SSH certificate management.",
    "function_name": "compute_instance_enable_os_login",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setIamPolicy(project='proj', zone='zone', resource='vm', body=policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_49",
    "description": "Compute instances should not be configured to have external IP addresses.",
    "function_name": "compute_instance_no_external_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_50",
    "description": "Google Cloud encrypts data at-rest and in-transit, but customer data must be decrypted for processing. Confidential Computing is a breakthrough technology which encrypts data in-use—while it is being processed. Confidential Computing environments keep data encrypted in memory and elsewhere outside the central processing unit (CPU).   Confidential VMs leverage the Secure Encrypted Virtualization (SEV) feature of AMD EPYC™ CPUs. Customer data will stay encrypted while it is used, indexed, queried, or trained on. Encryption keys are generated in hardware, per VM, and not exportable. Thanks to built-in hardware optimizations of both performance and security, there is no significant performance penalty to Confidential Computing workloads.",
    "function_name": "compute_instance_confidential_computing_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_51",
    "description": "It is recommended to configure your instance to not use the default Compute Engine service account because it has the Editor role on the project.",
    "function_name": "compute_instance_non_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_52",
    "description": "To support principle of least privileges and prevent potential privilege escalation it is recommended that instances are not assigned to default service account `Compute Engine default service account` with Scope `Allow full access to all Cloud APIs`.",
    "function_name": "compute_instance_no_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_53",
    "description": "Compute Engine instance cannot forward a packet unless the source IP address of the packet matches the IP address of the instance. Similarly, GCP won't deliver a packet whose destination IP address is different than the IP address of the instance receiving the packet. However, both capabilities are required if you want to use instances to help route packets.  Forwarding of data packets should be disabled to prevent data loss or information disclosure.",
    "function_name": "compute_instance_disable_ip_forwarding",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setMetadata(project='proj', zone='zone', instance='vm', body={'items': [{'key': 'canIpForward', 'value': 'false'}]})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_54",
    "description": "In order to maintain the highest level of security all connections to an application should be secure by default.",
    "function_name": "network_load_balancer_secure_connections",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_55",
    "description": "Customer-Supplied Encryption Keys (CSEK) are a feature in Google Cloud Storage and Google Compute Engine. If you supply your own encryption keys, Google uses your key to protect the Google-generated keys used to encrypt and decrypt your data. By default, Google Compute Engine encrypts all data at rest. Compute Engine handles and manages this encryption for you without any additional actions on your part. However, if you wanted to control and manage this encryption yourself, you can provide your own encryption keys.",
    "function_name": "compute_instance_csek_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_56",
    "description": "Google Cloud Virtual Machines have the ability via an OS Config agent API to periodically (about every 10 minutes) report OS inventory data. A patch compliance API periodically reads this data, and cross references metadata to determine if the latest updates are installed.  This is not the only Patch Management solution available to your organization and you should weigh your needs before committing to using this method.",
    "function_name": "compute_vm_os_inventory_reporting_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_57",
    "description": "It is recommended that IAM policy on Cloud Storage bucket does not allows anonymous or public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_58",
    "description": "It is recommended that uniform bucket-level access is enabled on Cloud Storage buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_59",
    "description": "It is recommended to have all SQL database instances set to enable automated backups.",
    "function_name": "sql_instances_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_60",
    "description": "It is recommended to configure Second Generation Sql instance to use private IPs instead of public IPs.",
    "function_name": "sql_instance_private_ip_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_61",
    "description": "Database Server should accept connections only from trusted Network(s)/IP(s) and restrict access from public IP addresses.",
    "function_name": "network_firewall_restrict_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_62",
    "description": "It is recommended to enforce all incoming connections to SQL database instance to use SSL.",
    "function_name": "sql_instance_ssl_enforcement",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'ipConfiguration': {'requireSsl': True}}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_63",
    "description": "It is recommended to set a password for the administrative user (`root` by default) to prevent unauthorized access to the SQL database instances.  This recommendation is applicable only for MySQL Instances. PostgreSQL does not offer any setting for No Password from the cloud console.",
    "function_name": "sql_mysql_instance_password_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'userLabels': {'password': 'your_password'}}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_64",
    "description": "It is recommended to set `skip_show_database` database flag for Cloud SQL Mysql instance to `on`",
    "function_name": "sql_instance_skip_show_database_on",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'skip_show_database', 'value': 'on'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_65",
    "description": "It is recommended to set the `local_infile` database flag for a Cloud SQL MySQL instance to `off`.",
    "function_name": "sql_instance_local_infile_flag_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'local_infile', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_66",
    "description": "The `log_error_verbosity` flag controls the verbosity/details of messages logged. Valid values are: - `TERSE` - `DEFAULT` - `VERBOSE`  `TERSE` excludes the logging of `DETAIL`, `HINT`, `QUERY`, and `CONTEXT` error information.  `VERBOSE` output includes the `SQLSTATE` error code, source code file name, function name, and line number that generated the error.  Ensure an appropriate value is set to 'DEFAULT' or stricter.",
    "function_name": "compute_instance_log_error_verbosity_default_or_stricter",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_67",
    "description": "The `log_min_error_statement` flag defines the minimum message severity level that are considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include `DEBUG5`, `DEBUG4`, `DEBUG3`, `DEBUG2`, `DEBUG1`, `INFO`, `NOTICE`, `WARNING`, `ERROR`, `LOG`, `FATAL`, and `PANIC`. Each severity level includes the subsequent levels mentioned above. Ensure a value of `ERROR` or stricter is set.",
    "function_name": "compute_instance_log_min_error_statement_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_68",
    "description": "The value of `log_statement` flag determined the SQL statements that are logged. Valid values are: - `none` - `ddl` - `mod` - `all`  The value `ddl` logs all data definition statements. The value `mod` logs all ddl statements, plus data-modifying statements.  The statements are logged after a basic parsing is done and statement type is determined, thus this does not logs statements with errors. When using extended query protocol, logging occurs after an Execute message is received and values of the Bind parameters are included.  A value of 'ddl' is recommended unless otherwise directed by your organization's logging policy.",
    "function_name": "dataproc_cluster_log_statement_ddl",
    "service_category": "Dataproc",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_69",
    "description": "Instance addresses can be public IP or private IP. Public IP means that the instance is accessible through the public internet. In contrast, instances using only private IP are not accessible through the public internet, but are accessible through a Virtual Private Cloud (VPC).  Limiting network access to your database will limit potential attacks.",
    "function_name": "compute_instance_private_ip_enforcement",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_70",
    "description": "Ensure `cloudsql.enable_pgaudit` database flag for Cloud SQL PostgreSQL instance is set to `on` to allow for centralized logging.",
    "function_name": "cloudsql_postgresql_enable_pgaudit_flag",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_71",
    "description": "Enabling the `log_connections` setting causes each attempted connection to the server to be logged, along with successful completion of client authentication. This parameter cannot be changed after the session starts.",
    "function_name": "compute_instance_log_connections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_72",
    "description": "Enabling the `log_disconnections` setting logs the end of each session, including the session duration.",
    "function_name": "compute_instance_log_disconnections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_73",
    "description": "The `log_min_duration_statement` flag defines the minimum amount of execution time of a statement in milliseconds where the total duration of the statement is logged. Ensure that `log_min_duration_statement` is disabled, i.e., a value of `-1` is set.",
    "function_name": "dataproc_cluster_log_min_duration_statement_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_74",
    "description": "The `log_min_messages` flag defines the minimum message severity level that is considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include `DEBUG5`, `DEBUG4`, `DEBUG3`, `DEBUG2`, `DEBUG1`, `INFO`, `NOTICE`, `WARNING`, `ERROR`, `LOG`, `FATAL`, and `PANIC`. Each severity level includes the subsequent levels mentioned above. ERROR is considered the best practice setting. Changes should only be made in accordance with the organization's logging policy.",
    "function_name": "logging_log_min_messages_set_to_error",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_75",
    "description": "It is recommended to set `3625 (trace flag)` database flag for Cloud SQL SQL Server instance to `on`.",
    "function_name": "sql_database_trace_flag_3625_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': '3625', 'value': 'on'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_76",
    "description": "It is recommended to set `external scripts enabled` database flag for Cloud SQL SQL Server instance to `off`",
    "function_name": "sql_instance_external_scripts_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'external scripts enabled', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_77",
    "description": "It is recommended to set `remote access` database flag for Cloud SQL SQL Server instance to `off`.",
    "function_name": "sql_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'remote access', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_78",
    "description": "It is recommended to check the `user connections` for a Cloud SQL SQL Server instance to ensure that it is not artificially limiting connections.",
    "function_name": "sql_instance_user_connections_unrestricted",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_79",
    "description": "It is recommended that, `user options` database flag for Cloud SQL SQL Server instance should not be configured.",
    "function_name": "sql_instance_user_options_flag_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_80",
    "description": "It is recommended to set `contained database authentication` database flag for Cloud SQL on the SQL Server instance to `off`.",
    "function_name": "sql_database_contained_authentication_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'contained database authentication', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_81",
    "description": "It is recommended to set `cross db ownership chaining` database flag for Cloud SQL SQL Server instance to `off`.",
    "function_name": "sql_cloudsql_cross_db_ownership_chaining_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'cross db ownership chaining', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_82",
    "description": "BigQuery by default encrypts the data as rest by employing `Envelope Encryption` using Google managed cryptographic keys. The data is encrypted using the `data encryption keys` and data encryption keys themselves are further encrypted using `key encryption keys`. This is seamless and do not require any additional input from the user. However, if you want to have greater control, Customer-managed encryption keys (CMEK) can be used as encryption key management solution for BigQuery Data Sets.",
    "function_name": "bigquery_datasets_use_cmek",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.update_dataset(dataset_ref, {'encryptionConfiguration': {'kmsKeyName': 'projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key'}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_83",
    "description": "BigQuery by default encrypts the data as rest by employing `Envelope Encryption` using Google managed cryptographic keys. The data is encrypted using the `data encryption keys` and data encryption keys themselves are further encrypted using `key encryption keys`. This is seamless and do not require any additional input from the user. However, if you want to have greater control, Customer-managed encryption keys (CMEK) can be used as encryption key management solution for BigQuery Data Sets. If CMEK is used, the CMEK is used to encrypt the data encryption keys instead of using google-managed encryption keys.",
    "function_name": "bigquery_datasets_use_cmek_encryption",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.update_dataset(dataset_ref, {'encryptionConfiguration': {'kmsKeyName': 'projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key'}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_84",
    "description": "It is recommended that the IAM policy on BigQuery datasets does not allow anonymous and/or public access.",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_85",
    "description": "Ensure that Corporate Login Credentials are Used",
    "function_name": "iam_service_accounts_corporate_login_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_86",
    "description": "Ensure that Multi-Factor Authentication is 'Enabled' for All Non-Service Accounts",
    "function_name": "iam_non_service_accounts_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_87",
    "description": "Ensure that Security Key Enforcement is Enabled for All Admin Accounts",
    "function_name": "iam_admin_accounts_security_key_enforcement_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/admin-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_88",
    "description": "Ensure That There Are Only GCP-Managed Service Account Keys for Each Service Account",
    "function_name": "iam_service_account_gcp_managed_keys_only",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_89",
    "description": "Ensure That Service Account Has No Admin Privileges",
    "function_name": "iam_service_account_no_admin_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_90",
    "description": "Ensure That IAM Users Are Not Assigned the Service Account User or Service Account Token Creator Roles at Project Level",
    "function_name": "iam_project_no_service_account_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_91",
    "description": "Ensure User-Managed/External Keys for Service Accounts Are Rotated Every 90 Days or Fewer",
    "function_name": "iam_service_account_key_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_92",
    "description": "Ensure That Separation of Duties Is Enforced While Assigning Service Account Related Roles to Users",
    "function_name": "iam_service_account_roles_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_93",
    "description": "Ensure That Cloud KMS Cryptokeys Are Not Anonymously or Publicly Accessible",
    "function_name": "kms_cryptokeys_no_public_access",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-key-ring/cryptoKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_94",
    "description": "Ensure KMS Encryption Keys Are Rotated Within a Period of 90 Days",
    "function_name": "kms_keys_rotation_within_90_days",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_95",
    "description": "Ensure That Separation of Duties Is Enforced While Assigning KMS Related Roles to Users",
    "function_name": "kms_roles_separation_of_duties_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_96",
    "description": "Ensure API Keys Only Exist for Active Services",
    "function_name": "iam_api_keys_active_services_only",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_97",
    "description": "Ensure API Keys Are Restricted To Use by Only Specified Hosts and Apps",
    "function_name": "iam_api_keys_host_app_restriction",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_98",
    "description": "Ensure API Keys Are Restricted to Only APIs That Application Needs Access",
    "function_name": "iam_api_key_restriction_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().apiKeys().get(name='projects/my-project/locations/global/apiKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_99",
    "description": "Ensure API Keys Are Rotated Every 90 Days",
    "function_name": "iam_api_keys_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_100",
    "description": "Ensure Essential Contacts is Configured for Organization",
    "function_name": "iam_organization_essential_contacts_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_101",
    "description": "Ensure Secrets are Not Stored in Cloud Functions Environment Variables by Using Secret Manager",
    "function_name": "functions_environment_variables_use_secret_manager",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_102",
    "description": "Ensure That Cloud Audit Logging Is Configured Properly",
    "function_name": "logging_audit_logs_configured_properly",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_103",
    "description": "Ensure That Sinks Are Configured for All Log Entries",
    "function_name": "logging_log_entries_sinks_configured",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_104",
    "description": "Ensure That Retention Policies on Cloud Storage Buckets Used for Exporting Logs Are Configured Using Bucket Lock",
    "function_name": "storage_bucket_retention_policy_configured_with_lock",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_105",
    "description": "Ensure Log Metric Filter and Alerts Exist for Project Ownership Assignments/Changes",
    "function_name": "logging_metric_filter_alerts_project_ownership_changes",
    "service_category": "Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_106",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Audit Configuration Changes",
    "function_name": "logging_audit_config_changes_alerts_exist",
    "service_category": "Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.metricDescriptors().list(name='projects/my-project').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_107",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Custom Role Changes",
    "function_name": "logging_metric_filter_alerts_for_custom_role_changes",
    "service_category": "Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.metricDescriptors().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_108",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Firewall Rule Changes",
    "function_name": "network_firewall_log_metric_alerts_exist",
    "service_category": "Network|Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.metricDescriptors().list(name='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_109",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Route Changes",
    "function_name": "logging_vpc_route_change_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_110",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Changes",
    "function_name": "logging_vpc_log_metric_filter_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_111",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Cloud Storage IAM Permission Changes",
    "function_name": "logging_metric_filter_alerts_for_storage_iam_changes",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_112",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for SQL Instance Configuration Changes",
    "function_name": "logging_sql_instance_config_change_alerts_exist",
    "service_category": "Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_113",
    "description": "Ensure That Cloud DNS Logging Is Enabled for All VPC Networks",
    "function_name": "network_vpc_dns_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_114",
    "description": "Ensure Cloud Asset Inventory Is Enabled",
    "function_name": "security_command_center_asset_inventory_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_115",
    "description": "Ensure 'Access Transparency' is 'Enabled'",
    "function_name": "security_command_center_access_transparency_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.access_transparency().get(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_116",
    "description": "Ensure 'Access Approval' is 'Enabled'",
    "function_name": "security_access_approval_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.accessApprovalSettings().get(name='projects/project-id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_117",
    "description": "Ensure Logging is enabled for HTTP(S) Load Balancer",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_118",
    "description": "Ensure That the Default Network Does Not Exist in a Project",
    "function_name": "network_vpc_default_network_absent",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='default')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_119",
    "description": "Ensure Legacy Networks Do Not Exist for Older Projects",
    "function_name": "network_vpc_legacy_networks_absent",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_120",
    "description": "Ensure That DNSSEC Is Enabled for Cloud DNS",
    "function_name": "network_dns_dnssec_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_121",
    "description": "Ensure That RSASHA1 Is Not Used for the Key-Signing Key in Cloud DNS DNSSEC",
    "function_name": "dns_dnssec_keysigningkey_no_rsasha1",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_122",
    "description": "Ensure That RSASHA1 Is Not Used for the Zone-Signing Key in Cloud DNS DNSSEC",
    "function_name": "dns_zone_dnssec_rsasha1_not_used",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_123",
    "description": "Ensure That SSH Access Is Restricted From the Internet",
    "function_name": "network_firewall_ssh_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_124",
    "description": "Ensure That RDP Access Is Restricted From the Internet",
    "function_name": "network_firewall_rdp_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_125",
    "description": "Ensure that VPC Flow Logs is Enabled for Every Subnet in a VPC Network",
    "function_name": "network_vpc_subnet_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.subnetworks().get(project='proj', region='region', subnetwork='subnet')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_126",
    "description": "Ensure No HTTPS or SSL Proxy Load Balancers Permit SSL Policies With Weak Cipher Suites",
    "function_name": "network_load_balancer_disallow_weak_ssl_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_127",
    "description": "Use Identity Aware Proxy (IAP) to Ensure Only Traffic From Google IP Addresses are 'Allowed'",
    "function_name": "network_iap_google_ip_traffic_allowed",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_128",
    "description": "Ensure That Instances Are Not Configured To Use the Default Service Account",
    "function_name": "compute_instance_non_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_129",
    "description": "Ensure That Instances Are Not Configured To Use the Default Service Account With Full Access to All Cloud APIs",
    "function_name": "compute_instance_no_default_service_account_full_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_130",
    "description": "Ensure “Block Project-Wide SSH Keys” Is Enabled for VM Instances",
    "function_name": "compute_instance_block_project_wide_ssh_keys_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_131",
    "description": "Ensure Oslogin Is Enabled for a Project",
    "function_name": "compute_project_oslogin_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.projects().get(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_132",
    "description": "Ensure ‘Enable Connecting to Serial Ports’ Is Not Enabled for VM Instance",
    "function_name": "compute_instance_serial_port_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_133",
    "description": "Ensure That IP Forwarding Is Not Enabled on Instances",
    "function_name": "compute_instance_ip_forwarding_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_134",
    "description": "Ensure VM Disks for Critical VMs Are Encrypted With Customer-Supplied Encryption Keys (CSEK)",
    "function_name": "compute_vm_disks_encrypted_with_csek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_135",
    "description": "Ensure Compute Instances Are Launched With Shielded VM Enabled",
    "function_name": "compute_instance_shielded_vm_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_136",
    "description": "Ensure That Compute Instances Do Not Have Public IP Addresses",
    "function_name": "compute_instance_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_137",
    "description": "Ensure That App Engine Applications Enforce HTTPS Connections",
    "function_name": "app_engine_application_https_enforced",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().get(appsId='app_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_138",
    "description": "Ensure That Compute Instances Have Confidential Computing Enabled",
    "function_name": "compute_instance_confidential_computing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_139",
    "description": "Ensure the Latest Operating System Updates Are Installed On Your Virtual Machines in All Projects",
    "function_name": "compute_vm_latest_os_updates_installed",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_140",
    "description": "Ensure That Cloud Storage Bucket Is Not Anonymously or Publicly Accessible",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_141",
    "description": "Ensure That Cloud Storage Buckets Have Uniform Bucket-Level Access Enabled",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_142",
    "description": "Ensure That the Cloud SQL Database Instance Requires All Incoming Connections To Use SSL",
    "function_name": "sql_instance_ssl_enforcement",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_143",
    "description": "Ensure That Cloud SQL Database Instances Do Not Implicitly Whitelist All Public IP Addresses",
    "function_name": "sql_database_no_public_ip_whitelist",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_144",
    "description": "Ensure That Cloud SQL Database Instances Do Not Have Public IPs",
    "function_name": "sql_database_no_public_ip",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_145",
    "description": "Ensure That Cloud SQL Database Instances Are Configured With Automated Backups",
    "function_name": "sql_database_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_146",
    "description": "Ensure That a MySQL Database Instance Does Not Allow Anyone To Connect With Administrative Privileges",
    "function_name": "sql_instance_admin_privileges_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_147",
    "description": "Ensure ‘Skip_show_database’ Database Flag for Cloud SQL MySQL Instance Is Set to ‘On’",
    "function_name": "sql_instance_skip_show_database_flag_on",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_148",
    "description": "Ensure That the ‘Local_infile’ Database Flag for a Cloud SQL MySQL Instance Is Set to ‘Off’",
    "function_name": "sql_instance_local_infile_flag_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_149",
    "description": "Ensure ‘Log_error_verbosity’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘DEFAULT’ or Stricter",
    "function_name": "sql_postgresql_log_error_verbosity_default_or_stricter",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_150",
    "description": "Ensure That the ‘Log_connections’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘On’",
    "function_name": "sql_postgresql_log_connections_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_151",
    "description": "Ensure That the ‘Log_disconnections’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘On’",
    "function_name": "sql_postgresql_log_disconnections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_152",
    "description": "Ensure ‘Log_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set Appropriately",
    "function_name": "sql_postgresql_log_statement_flag_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_153",
    "description": "Ensure that the ‘Log_min_messages’ Flag for a Cloud SQL PostgreSQL Instance is set at minimum to 'Warning'",
    "function_name": "sql_postgresql_log_min_messages_warning",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_154",
    "description": "Ensure ‘Log_min_error_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘Error’ or Stricter",
    "function_name": "sql_postgresql_log_min_error_statement_set_to_error",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_155",
    "description": "Ensure That the ‘Log_min_duration_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to '-1' (Disabled)",
    "function_name": "sql_postgresql_log_min_duration_statement_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_156",
    "description": "Ensure That 'cloudsql.enable_pgaudit' Database Flag for each Cloud Sql Postgresql Instance Is Set to 'on' For Centralized Logging",
    "function_name": "cloudsql_postgresql_enable_pgaudit_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_157",
    "description": "Ensure 'external scripts enabled' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_cloudsqlserver_external_scripts_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_158",
    "description": "Ensure that the 'cross db ownership chaining' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_cross_db_ownership_chaining_off",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_159",
    "description": "Ensure 'user Connections' Database Flag for Cloud Sql Sql Server Instance Is Set to a Non-limiting Value",
    "function_name": "sqlserver_instance_user_connections_limit_set",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_160",
    "description": "Ensure 'user options' database flag for Cloud SQL SQL Server instance is not configured",
    "function_name": "sql_instance_user_options_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_161",
    "description": "Ensure 'remote access' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_162",
    "description": "Ensure '3625 (trace flag)' database flag for all Cloud SQL Server instances is set to 'on'",
    "function_name": "sql_instances_trace_flag_3625_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_163",
    "description": "Ensure that the 'contained database authentication' database flag for Cloud SQL on the SQL Server instance is not set to 'on'",
    "function_name": "sql_cloudsql_instance_contained_database_authentication_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_164",
    "description": "Ensure That BigQuery Datasets Are Not Anonymously or Publicly Accessible",
    "function_name": "bigquery_datasets_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_165",
    "description": "Ensure That All BigQuery Tables Are Encrypted With Customer-Managed Encryption Key (CMEK)",
    "function_name": "bigquery_tables_encrypted_with_cmek",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_ref).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_166",
    "description": "Ensure That a Default Customer-Managed Encryption Key (CMEK) Is Specified for All BigQuery Data Sets",
    "function_name": "bigquery_datasets_default_cmek_specified",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_167",
    "description": "Ensure all data in BigQuery has been classified",
    "function_name": "bigquery_data_classification_ensured",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_table(table_ref).labels"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_168",
    "description": "Ensure that Dataproc Cluster is encrypted using Customer-Managed Encryption Key",
    "function_name": "dataproc_cluster_encrypted_with_cmek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_169",
    "description": "Use corporate login credentials instead of personal accounts, such as Gmail accounts.",
    "function_name": "iam_service_accounts_corporate_credentials",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_170",
    "description": "Setup multi-factor authentication for Google Cloud Platform accounts.",
    "function_name": "iam_account_multi_factor_authentication_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_171",
    "description": "Setup Security Key Enforcement for Google Cloud Platform admin accounts.",
    "function_name": "iam_admin_accounts_security_key_enforcement",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/admin@example.com')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_172",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. API keys are always at risk because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to restrict API keys to use (call) only APIs required by an application.",
    "function_name": "iam_api_key_restriction_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_173",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. If they are in use it is recommended to rotate API keys every 90 days.",
    "function_name": "iam_api_keys_rotation_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_174",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. Unused keys with their permissions in tact may still exist within a project. Keys are insecure because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to use standard authentication flow instead.",
    "function_name": "iam_api_keys_standard_authentication_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/proj/serviceAccounts/service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_175",
    "description": "It is recommended that Essential Contacts is configured to designate email addresses for Google Cloud services to notify of important technical or security information.",
    "function_name": "security_essential_contacts_configured",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getContact(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_176",
    "description": "Google Cloud Key Management Service stores cryptographic keys in a hierarchical structure designed for useful and elegant access control management.   The format for the rotation schedule depends on the client library that is used. For the gcloud command-line tool, the next rotation time must be in `ISO` or `RFC3339` format, and the rotation period must be in the form `INTEGERUNIT`, where units can be one of seconds (s), minutes (m), hours (h) or days (d).",
    "function_name": "kms_key_rotation_schedule_format",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/loc/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_177",
    "description": "It is recommended that the IAM policy on Cloud KMS `cryptokeys` should restrict anonymous and/or public access.",
    "function_name": "kms_cryptokeys_restrict_anonymous_public_access",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-key-ring/cryptoKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_178",
    "description": "When you use Dataproc, cluster and job data is stored on Persistent Disks (PDs) associated with the Compute Engine VMs in your cluster and in a Cloud Storage staging bucket. This PD and bucket data is encrypted using a Google-generated data encryption key (DEK) and key encryption key (KEK). The CMEK feature allows you to create, use, and revoke the key encryption key (KEK). Google still controls the data encryption key (DEK).",
    "function_name": "dataproc_cluster_cmek_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_179",
    "description": "It is recommended to assign the `Service Account User (iam.serviceAccountUser)` and `Service Account Token Creator (iam.serviceAccountTokenCreator)` roles to a user for a specific service account rather than assigning the role to a user at project level.",
    "function_name": "iam_service_account_role_assignment_specific",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_180",
    "description": "It is recommended that the principle of 'Separation of Duties' is enforced while assigning KMS related roles to users.",
    "function_name": "kms_roles_separation_of_duties_enforced",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().get(name='projects/proj/locations/global/keyRings/ring')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_181",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. In this case, unrestricted keys are insecure because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to restrict API key usage to trusted hosts, HTTP referrers and apps. It is recommended to use the more secure standard authentication flow instead.",
    "function_name": "iam_api_key_restriction_enforced",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_182",
    "description": "It is recommended that the principle of 'Separation of Duties' is enforced while assigning service-account related roles to users.",
    "function_name": "iam_service_account_role_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_183",
    "description": "A service account is a special Google account that belongs to an application or a VM, instead of to an individual end-user. The application uses the service account to call the service's Google API so that users aren't directly involved. It's recommended not to use admin access for ServiceAccount.",
    "function_name": "iam_service_account_no_admin_access",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_184",
    "description": "User managed service accounts should not have user-managed keys.",
    "function_name": "iam_service_accounts_no_user_managed_keys",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_185",
    "description": "Service Account keys consist of a key ID (Private_key_Id) and Private key, which are used to sign programmatic requests users make to Google cloud services accessible to that particular service account. It is recommended that all Service Account keys are regularly rotated.",
    "function_name": "iam_service_account_keys_rotated",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_186",
    "description": "Google Cloud Functions allow you to host serverless code that is executed when an event is triggered, without the requiring the management a host operating system. These functions can also store environment variables to be used by the code that may contain authentication or other information that needs to remain confidential.",
    "function_name": "functions_environment_variables_confidentiality",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_187",
    "description": "GCP Access Approval enables you to require your organizations' explicit approval whenever Google support try to access your projects. You can then select users within your organization who can approve these requests through giving them a security role in IAM. All access requests display which Google Employee requested them in an email or Pub/Sub message that you can choose to Approve. This adds an additional control and logging of who in your organization approved/denied these requests.",
    "function_name": "iam_access_approval_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getAccessApprovalSettings(name='projects/project-id').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_188",
    "description": "GCP Cloud Asset Inventory is services that provides a historical view of GCP resources and IAM policies through a time-series database. The information recorded includes metadata on Google Cloud resources, metadata on policies set on Google Cloud projects or resources, and runtime information gathered within a Google Cloud resource.",
    "function_name": "security_cloud_asset_inventory_historical_view_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789', contentType='RESOURCE')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_189",
    "description": "In order to prevent unnecessary project ownership assignments to users/service-accounts and further misuses of projects and resources, all `roles/Owner` assignments should be monitored.  Members (users/Service-Accounts) with a role assignment to primitive role `roles/Owner` are project owners.  The project owner has all the privileges on the project the role belongs to. These are summarized below: - All viewer permissions on all GCP Services within the project - Permissions for actions that modify the state of all GCP services within the project - Manage roles and permissions for a project and all resources within the project - Set up billing for a project  Granting the owner role to a member (user/Service-Account) will allow that member to modify the Identity and Access Management (IAM) policy. Therefore, grant the owner role only if the member has a legitimate purpose to manage the IAM policy. This is because the project IAM policy contains sensitive access control data. Having a minimal set of users allowed to manage IAM policy will simplify any auditing that may be necessary.",
    "function_name": "iam_project_owner_role_restriction",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_190",
    "description": "Logging enabled on a HTTPS Load Balancer will show all network traffic and its destination.",
    "function_name": "network_https_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_191",
    "description": "It is recommended that Cloud Audit Logging is configured to track all admin activities and read, write access to user data.",
    "function_name": "logging_audit_logs_configured_for_admin_and_data_access",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_192",
    "description": "Cloud DNS logging records the queries from the name servers within your VPC to Stackdriver. Logged queries can come from Compute Engine VMs, GKE containers, or other GCP resources provisioned within the VPC.",
    "function_name": "logging_dns_queries_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_193",
    "description": "Enabling retention policies on log buckets will protect logs stored in cloud storage buckets from being overwritten or accidentally deleted. It is recommended to set up retention policies and configure Bucket Lock on all storage buckets that are used as log sinks.",
    "function_name": "storage_bucket_retention_policy_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_194",
    "description": "It is recommended to create a sink that will export copies of all the log entries. This can help aggregate logs from multiple projects and export them to a Security Information and Event Management (SIEM).",
    "function_name": "logging_sink_export_all_logs",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().create(parent='projects/my-project', body={'name': 'my-sink', 'destination': 'bigquery.googleapis.com/projects/my-project/datasets/my_dataset'})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_195",
    "description": "Google Cloud Platform (GCP) services write audit log entries to the Admin Activity and Data Access logs to help answer the questions of, \"who did what, where, and when?\" within GCP projects.  Cloud audit logging records information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by GCP services. Cloud audit logging provides a history of GCP API calls for an account, including API calls made via the console, SDKs, command-line tools, and other GCP services.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_196",
    "description": "It is recommended that a metric filter and alarm be established for Cloud Storage Bucket IAM changes.",
    "function_name": "monitoring_storage_bucket_iam_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_197",
    "description": "It is recommended that a metric filter and alarm be established for changes to Identity and Access Management (IAM) role creation, deletion and updating activities.",
    "function_name": "logging_iam_role_change_alert",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.metricDescriptors().create(name='projects/my-project', body=metric_descriptor).execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_198",
    "description": "It is recommended that a metric filter and alarm be established for SQL instance configuration changes.",
    "function_name": "monitoring_sql_instance_config_change_alert",
    "service_category": "Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_199",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) network changes.",
    "function_name": "network_vpc_metric_filter_alarm",
    "service_category": "Network|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_200",
    "description": "GCP Access Transparency provides audit logs for all actions that Google personnel take in your Google Cloud resources.",
    "function_name": "logging_audit_logs_access_transparency_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_201",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) Network Firewall rule changes.",
    "function_name": "network_vpc_firewall_rule_change_alert",
    "service_category": "Network|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_202",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) network route changes.",
    "function_name": "network_vpc_route_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/proj', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_203",
    "description": "In order to prevent use of legacy networks, a project should not have a legacy network configured. As of now, Legacy Networks are gradually being phased out, and you can no longer create projects with them. This recommendation is to check older projects to ensure that they are not using Legacy Networks.",
    "function_name": "network_vpc_no_legacy_networks",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_204",
    "description": "Cloud Domain Name System (DNS) is a fast, reliable and cost-effective domain name system that powers millions of domains on the internet. Domain Name System Security Extensions (DNSSEC) in Cloud DNS enables domain owners to take easy steps to protect their domains against DNS hijacking and man-in-the-middle and other attacks.",
    "function_name": "network_dns_dnssec_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_205",
    "description": "GCP `Firewall Rules` are specific to a `VPC Network`. Each rule either `allows` or `denies` traffic when its conditions are met. Its conditions allow users to specify the type of traffic, such as ports and protocols, and the source or destination of the traffic, including IP addresses, subnets, and instances.  Firewall rules are defined at the VPC network level and are specific to the network in which they are defined. The rules themselves cannot be shared among networks. Firewall rules only support IPv4 traffic. When specifying a source for an ingress rule or a destination for an egress rule by address, an `IPv4` address or `IPv4 block in CIDR` notation can be used. Generic `(0.0.0.0/0)` incoming traffic from the Internet to a VPC or VM instance using `RDP` on `Port 3389` can be avoided.",
    "function_name": "network_firewall_rules_restrict_rdp_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_206",
    "description": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.  DNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.",
    "function_name": "network_dnssec_algorithm_recommendation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_207",
    "description": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.  DNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.",
    "function_name": "network_dnssec_algorithm_recommendation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_208",
    "description": "GCP `Firewall Rules` are specific to a `VPC Network`. Each rule either `allows` or `denies` traffic when its conditions are met. Its conditions allow the user to specify the type of traffic, such as ports and protocols, and the source or destination of the traffic, including IP addresses, subnets, and instances.  Firewall rules are defined at the VPC network level and are specific to the network in which they are defined. The rules themselves cannot be shared among networks. Firewall rules only support IPv4 traffic. When specifying a source for an ingress rule or a destination for an egress rule by address, only an `IPv4` address or `IPv4 block in CIDR` notation can be used. Generic `(0.0.0.0/0)` incoming traffic from the internet to VPC or VM instance using `SSH` on `Port 22` can be avoided.",
    "function_name": "network_firewall_rules_restrict_ssh_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_209",
    "description": "To prevent use of `default` network, a project should not have a `default` network.",
    "function_name": "network_project_no_default_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_210",
    "description": "Flow Logs is a feature that enables users to capture information about the IP traffic going to and from network interfaces in the organization's VPC Subnets. Once a flow log is created, the user can view and retrieve its data in Stackdriver Logging. It is recommended that Flow Logs be enabled for every business-critical VPC subnet.",
    "function_name": "network_vpc_subnet_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.subnetworks().get(project='proj', region='region', subnetwork='subnet')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_211",
    "description": "Secure Sockets Layer (SSL) policies determine what port Transport Layer Security (TLS) features clients are permitted to use when connecting to load balancers. To prevent usage of insecure features, SSL policies should use (a) at least TLS 1.2 with the MODERN profile; or (b) the RESTRICTED profile, because it effectively requires clients to use TLS 1.2 regardless of the chosen minimum TLS version; or (3) a CUSTOM profile that does not support any of the following features:  ``` TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_3DES_EDE_CBC_SHA ```",
    "function_name": "network_ssl_policy_enforce_tls_1_2_or_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_212",
    "description": "IAP authenticates the user requests to your apps via a Google single sign in. You can then manage these users with permissions to control access. It is recommended to use both IAP permissions and firewalls to restrict this access to your apps with sensitive information.",
    "function_name": "network_iap_user_access_restriction",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "iap_client.projects().iap_web().services().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_213",
    "description": "Interacting with a serial port is often referred to as the serial console, which is similar to using a terminal window, in that input and output is entirely in text mode and there is no graphical interface or mouse support.  If you enable the interactive serial console on an instance, clients can attempt to connect to that instance from any IP address. Therefore interactive serial console support should be disabled.",
    "function_name": "compute_instance_serial_console_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getSerialPortOutput(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_214",
    "description": "It is recommended to use Instance specific SSH key(s) instead of using common/shared project-wide SSH key(s) to access Instances.",
    "function_name": "compute_instance_specific_ssh_keys",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_215",
    "description": "To defend against advanced threats and ensure that the boot loader and firmware on your VMs are signed and untampered, it is recommended that Compute instances are launched with Shielded VM enabled.",
    "function_name": "compute_instance_shielded_vm_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getShieldedInstanceIntegrityPolicy(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_216",
    "description": "Enabling OS login binds SSH certificates to IAM users and facilitates effective SSH certificate management.",
    "function_name": "compute_instance_enable_os_login",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setIamPolicy(project='proj', zone='zone', resource='vm', body={'bindings': [{'role': 'roles/compute.osLogin', 'members': ['user:example@example.com']}]})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_217",
    "description": "Compute instances should not be configured to have external IP addresses.",
    "function_name": "compute_instance_no_external_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_218",
    "description": "Google Cloud encrypts data at-rest and in-transit, but customer data must be decrypted for processing. Confidential Computing is a breakthrough technology which encrypts data in-use—while it is being processed. Confidential Computing environments keep data encrypted in memory and elsewhere outside the central processing unit (CPU).   Confidential VMs leverage the Secure Encrypted Virtualization (SEV) feature of AMD EPYC™ CPUs. Customer data will stay encrypted while it is used, indexed, queried, or trained on. Encryption keys are generated in hardware, per VM, and not exportable. Thanks to built-in hardware optimizations of both performance and security, there is no significant performance penalty to Confidential Computing workloads.",
    "function_name": "compute_vm_confidential_computing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_219",
    "description": "It is recommended to configure your instance to not use the default Compute Engine service account because it has the Editor role on the project.",
    "function_name": "compute_instance_non_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_220",
    "description": "To support principle of least privileges and prevent potential privilege escalation it is recommended that instances are not assigned to default service account `Compute Engine default service account` with Scope `Allow full access to all Cloud APIs`.",
    "function_name": "compute_instance_no_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_221",
    "description": "Compute Engine instance cannot forward a packet unless the source IP address of the packet matches the IP address of the instance. Similarly, GCP won't deliver a packet whose destination IP address is different than the IP address of the instance receiving the packet. However, both capabilities are required if you want to use instances to help route packets.  Forwarding of data packets should be disabled to prevent data loss or information disclosure.",
    "function_name": "compute_instance_disable_ip_forwarding",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setMetadata(project='proj', zone='zone', instance='vm', body={'items': [{'key': 'canIpForward', 'value': 'false'}]})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_222",
    "description": "In order to maintain the highest level of security all connections to an application should be secure by default.",
    "function_name": "network_connections_secure_by_default",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_223",
    "description": "Customer-Supplied Encryption Keys (CSEK) are a feature in Google Cloud Storage and Google Compute Engine. If you supply your own encryption keys, Google uses your key to protect the Google-generated keys used to encrypt and decrypt your data. By default, Google Compute Engine encrypts all data at rest. Compute Engine handles and manages this encryption for you without any additional actions on your part. However, if you wanted to control and manage this encryption yourself, you can provide your own encryption keys.",
    "function_name": "compute_instance_csek_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_224",
    "description": "Google Cloud Virtual Machines have the ability via an OS Config agent API to periodically (about every 10 minutes) report OS inventory data. A patch compliance API periodically reads this data, and cross references metadata to determine if the latest updates are installed.  This is not the only Patch Management solution available to your organization and you should weigh your needs before committing to using this method.",
    "function_name": "compute_vm_os_inventory_reporting_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_225",
    "description": "It is recommended that IAM policy on Cloud Storage bucket does not allows anonymous or public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_226",
    "description": "It is recommended that uniform bucket-level access is enabled on Cloud Storage buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_227",
    "description": "It is recommended to have all SQL database instances set to enable automated backups.",
    "function_name": "sql_instances_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_228",
    "description": "It is recommended to configure Second Generation Sql instance to use private IPs instead of public IPs.",
    "function_name": "sql_instance_private_ip_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_229",
    "description": "Database Server should accept connections only from trusted Network(s)/IP(s) and restrict access from public IP addresses.",
    "function_name": "network_firewall_restrict_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_230",
    "description": "It is recommended to enforce all incoming connections to SQL database instance to use SSL.",
    "function_name": "sql_instance_enforce_ssl_connections",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin_client.instances().patch(project='proj', instance='instance', body={'settings': {'ipConfiguration': {'requireSsl': True}}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_231",
    "description": "It is recommended to set a password for the administrative user (`root` by default) to prevent unauthorized access to the SQL database instances.  This recommendation is applicable only for MySQL Instances. PostgreSQL does not offer any setting for No Password from the cloud console.",
    "function_name": "sql_mysql_instance_admin_password_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'userLabels': {'rootPassword': 'your_password'}}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_232",
    "description": "It is recommended to set `skip_show_database` database flag for Cloud SQL Mysql instance to `on`",
    "function_name": "sql_instance_skip_show_database_on",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'skip_show_database', 'value': 'on'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_233",
    "description": "It is recommended to set the `local_infile` database flag for a Cloud SQL MySQL instance to `off`.",
    "function_name": "sql_instance_local_infile_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'local_infile', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_234",
    "description": "The `log_error_verbosity` flag controls the verbosity/details of messages logged. Valid values are: - `TERSE` - `DEFAULT` - `VERBOSE`  `TERSE` excludes the logging of `DETAIL`, `HINT`, `QUERY`, and `CONTEXT` error information.  `VERBOSE` output includes the `SQLSTATE` error code, source code file name, function name, and line number that generated the error.  Ensure an appropriate value is set to 'DEFAULT' or stricter.",
    "function_name": "compute_instance_log_error_verbosity_default_or_stricter",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_235",
    "description": "The `log_min_error_statement` flag defines the minimum message severity level that are considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include `DEBUG5`, `DEBUG4`, `DEBUG3`, `DEBUG2`, `DEBUG1`, `INFO`, `NOTICE`, `WARNING`, `ERROR`, `LOG`, `FATAL`, and `PANIC`. Each severity level includes the subsequent levels mentioned above. Ensure a value of `ERROR` or stricter is set.",
    "function_name": "compute_instance_log_min_error_statement_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_236",
    "description": "The value of `log_statement` flag determined the SQL statements that are logged. Valid values are: - `none` - `ddl` - `mod` - `all`  The value `ddl` logs all data definition statements. The value `mod` logs all ddl statements, plus data-modifying statements.  The statements are logged after a basic parsing is done and statement type is determined, thus this does not logs statements with errors. When using extended query protocol, logging occurs after an Execute message is received and values of the Bind parameters are included.  A value of 'ddl' is recommended unless otherwise directed by your organization's logging policy.",
    "function_name": "dataproc_cluster_log_statement_ddl",
    "service_category": "Dataproc",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_237",
    "description": "Instance addresses can be public IP or private IP. Public IP means that the instance is accessible through the public internet. In contrast, instances using only private IP are not accessible through the public internet, but are accessible through a Virtual Private Cloud (VPC).  Limiting network access to your database will limit potential attacks.",
    "function_name": "compute_instance_private_ip_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_238",
    "description": "Ensure `cloudsql.enable_pgaudit` database flag for Cloud SQL PostgreSQL instance is set to `on` to allow for centralized logging.",
    "function_name": "cloudsql_postgresql_enable_pgaudit_flag",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_239",
    "description": "Enabling the `log_connections` setting causes each attempted connection to the server to be logged, along with successful completion of client authentication. This parameter cannot be changed after the session starts.",
    "function_name": "compute_instance_log_connections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_240",
    "description": "Enabling the `log_disconnections` setting logs the end of each session, including the session duration.",
    "function_name": "compute_instance_log_disconnections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_241",
    "description": "The `log_min_duration_statement` flag defines the minimum amount of execution time of a statement in milliseconds where the total duration of the statement is logged. Ensure that `log_min_duration_statement` is disabled, i.e., a value of `-1` is set.",
    "function_name": "dataproc_cluster_log_min_duration_statement_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_242",
    "description": "The `log_min_messages` flag defines the minimum message severity level that is considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include `DEBUG5`, `DEBUG4`, `DEBUG3`, `DEBUG2`, `DEBUG1`, `INFO`, `NOTICE`, `WARNING`, `ERROR`, `LOG`, `FATAL`, and `PANIC`. Each severity level includes the subsequent levels mentioned above. ERROR is considered the best practice setting. Changes should only be made in accordance with the organization's logging policy.",
    "function_name": "logging_log_min_messages_set_to_error",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_243",
    "description": "It is recommended to set `3625 (trace flag)` database flag for Cloud SQL SQL Server instance to `on`.",
    "function_name": "sql_instance_trace_flag_3625_on",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': '3625', 'value': 'on'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_244",
    "description": "It is recommended to set `external scripts enabled` database flag for Cloud SQL SQL Server instance to `off`",
    "function_name": "sql_instance_external_scripts_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'external scripts enabled', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_245",
    "description": "It is recommended to set `remote access` database flag for Cloud SQL SQL Server instance to `off`.",
    "function_name": "sql_cloud_sql_server_remote_access_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_246",
    "description": "It is recommended to check the `user connections` for a Cloud SQL SQL Server instance to ensure that it is not artificially limiting connections.",
    "function_name": "sql_instance_user_connections_unlimited",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_247",
    "description": "It is recommended that, `user options` database flag for Cloud SQL SQL Server instance should not be configured.",
    "function_name": "sql_instance_user_options_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_248",
    "description": "It is recommended to set `contained database authentication` database flag for Cloud SQL on the SQL Server instance to `off`.",
    "function_name": "sql_instance_contained_database_authentication_off",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'contained database authentication', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_249",
    "description": "It is recommended to set `cross db ownership chaining` database flag for Cloud SQL SQL Server instance to `off`.",
    "function_name": "sql_cloud_sql_instance_cross_db_ownership_chaining_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_250",
    "description": "BigQuery by default encrypts the data as rest by employing `Envelope Encryption` using Google managed cryptographic keys. The data is encrypted using the `data encryption keys` and data encryption keys themselves are further encrypted using `key encryption keys`. This is seamless and do not require any additional input from the user. However, if you want to have greater control, Customer-managed encryption keys (CMEK) can be used as encryption key management solution for BigQuery Data Sets.",
    "function_name": "bigquery_datasets_encryption_cmek_enabled",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.update_dataset(dataset_id, {'encryptionConfiguration': {'kmsKeyName': 'projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key'}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_251",
    "description": "BigQuery by default encrypts the data as rest by employing `Envelope Encryption` using Google managed cryptographic keys. The data is encrypted using the `data encryption keys` and data encryption keys themselves are further encrypted using `key encryption keys`. This is seamless and do not require any additional input from the user. However, if you want to have greater control, Customer-managed encryption keys (CMEK) can be used as encryption key management solution for BigQuery Data Sets. If CMEK is used, the CMEK is used to encrypt the data encryption keys instead of using google-managed encryption keys.",
    "function_name": "bigquery_datasets_use_cmek",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.update_dataset(dataset_ref, {'encryptionConfiguration': {'kmsKeyName': 'projects/my-project/locations/us/keyRings/my-keyring/cryptoKeys/my-key'}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_252",
    "description": "It is recommended that the IAM policy on BigQuery datasets does not allow anonymous and/or public access.",
    "function_name": "bigquery_datasets_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='your_dataset_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_253",
    "description": "Ensure that Corporate Login Credentials are Used",
    "function_name": "iam_service_accounts_corporate_login_required",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_254",
    "description": "Ensure that Multi-Factor Authentication is 'Enabled' for All Non-Service Accounts",
    "function_name": "iam_non_service_accounts_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_255",
    "description": "Ensure that Security Key Enforcement is Enabled for All Admin Accounts",
    "function_name": "iam_admin_accounts_security_key_enforcement_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/admin-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_256",
    "description": "Ensure That There Are Only GCP-Managed Service Account Keys for Each Service Account",
    "function_name": "iam_service_account_gcp_managed_keys_only",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_257",
    "description": "Ensure That Service Account Has No Admin Privileges",
    "function_name": "iam_service_account_no_admin_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_258",
    "description": "Ensure That IAM Users Are Not Assigned the Service Account User or Service Account Token Creator Roles at Project Level",
    "function_name": "iam_project_no_service_account_roles",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_259",
    "description": "Ensure User-Managed/External Keys for Service Accounts Are Rotated Every 90 Days or Fewer",
    "function_name": "iam_service_account_key_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_260",
    "description": "Ensure That Separation of Duties Is Enforced While Assigning Service Account Related Roles to Users",
    "function_name": "iam_service_account_role_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_261",
    "description": "Ensure That Cloud KMS Cryptokeys Are Not Anonymously or Publicly Accessible",
    "function_name": "kms_cryptokeys_no_public_access",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-keyring/cryptoKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_262",
    "description": "Ensure KMS Encryption Keys Are Rotated Within a Period of 90 Days",
    "function_name": "kms_keys_rotation_within_90_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_263",
    "description": "Ensure That Separation of Duties Is Enforced While Assigning KMS Related Roles to Users",
    "function_name": "kms_roles_separation_of_duties_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_264",
    "description": "Ensure API Keys Only Exist for Active Services",
    "function_name": "iam_api_keys_active_services_only",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_265",
    "description": "Ensure API Keys Are Restricted To Use by Only Specified Hosts and Apps",
    "function_name": "iam_api_keys_host_app_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().get(name='projects/-/serviceAccounts/sa@project.iam.gserviceaccount.com/keys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_266",
    "description": "Ensure API Keys Are Restricted to Only APIs That Application Needs Access",
    "function_name": "iam_api_keys_restricted_to_needed_apis",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().apiKeys().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_267",
    "description": "Ensure API Keys Are Rotated Every 90 Days",
    "function_name": "iam_api_keys_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_268",
    "description": "Ensure Essential Contacts is Configured for Organization",
    "function_name": "iam_organization_essential_contacts_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_269",
    "description": "Ensure Secrets are Not Stored in Cloud Functions Environment Variables by Using Secret Manager",
    "function_name": "cloudfunctions_environment_secrets_use_secret_manager",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_270",
    "description": "Ensure That Cloud Audit Logging Is Configured Properly",
    "function_name": "logging_audit_logs_configured_properly",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_271",
    "description": "Ensure That Sinks Are Configured for All Log Entries",
    "function_name": "logging_sinks_configured_for_all_entries",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_272",
    "description": "Ensure That Retention Policies on Cloud Storage Buckets Used for Exporting Logs Are Configured Using Bucket Lock",
    "function_name": "storage_bucket_retention_policy_configured_with_lock",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_273",
    "description": "Ensure Log Metric Filter and Alerts Exist for Project Ownership Assignments/Changes",
    "function_name": "logging_metric_filter_alerts_project_ownership_changes",
    "service_category": "Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.metricDescriptors().list(parent='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_274",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Audit Configuration Changes",
    "function_name": "logging_audit_config_changes_alerts_exist",
    "service_category": "Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_275",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Custom Role Changes",
    "function_name": "logging_metric_filter_alerts_for_custom_role_changes",
    "service_category": "Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_276",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Firewall Rule Changes",
    "function_name": "network_vpc_firewall_log_metric_filter_alerts_exist",
    "service_category": "Network|Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.metricDescriptors().list(name='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_277",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Route Changes",
    "function_name": "logging_vpc_route_change_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_278",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Changes",
    "function_name": "logging_vpc_log_metric_filter_and_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_279",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Cloud Storage IAM Permission Changes",
    "function_name": "logging_storage_iam_permission_change_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_280",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for SQL Instance Configuration Changes",
    "function_name": "logging_sql_instance_config_change_alerts_exist",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_281",
    "description": "Ensure That Cloud DNS Logging Is Enabled for All VPC Networks",
    "function_name": "network_vpc_dns_logging_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_282",
    "description": "Ensure Cloud Asset Inventory Is Enabled",
    "function_name": "security_command_center_asset_inventory_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/project-id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_283",
    "description": "Ensure 'Access Transparency' is 'Enabled'",
    "function_name": "security_access_transparency_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.access_transparency().get(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_284",
    "description": "Ensure 'Access Approval' is 'Enabled'",
    "function_name": "security_access_approval_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.accessApproval().getSettings(name='projects/project-id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_285",
    "description": "Ensure Logging is enabled for HTTP(S) Load Balancer",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_286",
    "description": "Ensure That the Default Network Does Not Exist in a Project",
    "function_name": "network_vpc_default_network_absent",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_287",
    "description": "Ensure Legacy Networks Do Not Exist for Older Projects",
    "function_name": "network_vpc_no_legacy_networks",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_288",
    "description": "Ensure That DNSSEC Is Enabled for Cloud DNS",
    "function_name": "network_dns_dnssec_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_289",
    "description": "Ensure That RSASHA1 Is Not Used for the Key-Signing Key in Cloud DNS DNSSEC",
    "function_name": "dns_dnssec_keysigningkey_no_rsasha1",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_290",
    "description": "Ensure That RSASHA1 Is Not Used for the Zone-Signing Key in Cloud DNS DNSSEC",
    "function_name": "dns_zone_dnssec_rsasha1_not_used",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_291",
    "description": "Ensure That SSH Access Is Restricted From the Internet",
    "function_name": "network_firewall_ssh_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_292",
    "description": "Ensure That RDP Access Is Restricted From the Internet",
    "function_name": "network_firewall_rdp_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_293",
    "description": "Ensure that VPC Flow Logs is Enabled for Every Subnet in a VPC Network",
    "function_name": "network_vpc_subnet_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.subnetworks().get(project='proj', region='region', subnetwork='subnet')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_294",
    "description": "Ensure No HTTPS or SSL Proxy Load Balancers Permit SSL Policies With Weak Cipher Suites",
    "function_name": "network_load_balancer_disallow_weak_ssl_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_295",
    "description": "Use Identity Aware Proxy (IAP) to Ensure Only Traffic From Google IP Addresses are 'Allowed'",
    "function_name": "network_iap_google_ip_only",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "iap_client.projects().iapWeb().services().getIamPolicy(resource='projects/project_id/iap_web/service_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_296",
    "description": "Ensure That Instances Are Not Configured To Use the Default Service Account",
    "function_name": "compute_instance_no_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_297",
    "description": "Ensure That Instances Are Not Configured To Use the Default Service Account With Full Access to All Cloud APIs",
    "function_name": "compute_instance_no_default_service_account_full_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_298",
    "description": "Ensure “Block Project-Wide SSH Keys” Is Enabled for VM Instances",
    "function_name": "compute_instance_block_project_wide_ssh_keys_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_299",
    "description": "Ensure Oslogin Is Enabled for a Project",
    "function_name": "compute_project_oslogin_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.projects().get(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_300",
    "description": "Ensure ‘Enable Connecting to Serial Ports’ Is Not Enabled for VM Instance",
    "function_name": "compute_instance_serial_port_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_301",
    "description": "Ensure That IP Forwarding Is Not Enabled on Instances",
    "function_name": "compute_instance_ip_forwarding_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_302",
    "description": "Ensure VM Disks for Critical VMs Are Encrypted With Customer-Supplied Encryption Keys (CSEK)",
    "function_name": "compute_vm_disks_encrypted_with_csek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_303",
    "description": "Ensure Compute Instances Are Launched With Shielded VM Enabled",
    "function_name": "compute_instance_shielded_vm_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_304",
    "description": "Ensure That Compute Instances Do Not Have Public IP Addresses",
    "function_name": "compute_instance_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_305",
    "description": "Ensure That App Engine Applications Enforce HTTPS Connections",
    "function_name": "app_engine_application_https_enforced",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().get(appsId='app_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_306",
    "description": "Ensure That Compute Instances Have Confidential Computing Enabled",
    "function_name": "compute_instance_confidential_computing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_307",
    "description": "Ensure the Latest Operating System Updates Are Installed On Your Virtual Machines in All Projects",
    "function_name": "compute_instance_os_updates_installed",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_308",
    "description": "Ensure That Cloud Storage Bucket Is Not Anonymously or Publicly Accessible",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_309",
    "description": "Ensure That Cloud Storage Buckets Have Uniform Bucket-Level Access Enabled",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_310",
    "description": "Ensure That the Cloud SQL Database Instance Requires All Incoming Connections To Use SSL",
    "function_name": "sql_database_instance_ssl_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_311",
    "description": "Ensure That Cloud SQL Database Instances Do Not Implicitly Whitelist All Public IP Addresses",
    "function_name": "sql_database_no_public_ip_whitelist",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_312",
    "description": "Ensure That Cloud SQL Database Instances Do Not Have Public IPs",
    "function_name": "sql_database_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_313",
    "description": "Ensure That Cloud SQL Database Instances Are Configured With Automated Backups",
    "function_name": "sql_database_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_314",
    "description": "Ensure That a MySQL Database Instance Does Not Allow Anyone To Connect With Administrative Privileges",
    "function_name": "sql_instance_no_admin_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_315",
    "description": "Ensure ‘Skip_show_database’ Database Flag for Cloud SQL MySQL Instance Is Set to ‘On’",
    "function_name": "sql_instance_skip_show_database_flag_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_316",
    "description": "Ensure That the ‘Local_infile’ Database Flag for a Cloud SQL MySQL Instance Is Set to ‘Off’",
    "function_name": "sql_instance_local_infile_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_317",
    "description": "Ensure ‘Log_error_verbosity’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘DEFAULT’ or Stricter",
    "function_name": "sql_postgresql_log_error_verbosity_default",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_318",
    "description": "Ensure That the ‘Log_connections’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘On’",
    "function_name": "sql_postgresql_log_connections_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_319",
    "description": "Ensure That the ‘Log_disconnections’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘On’",
    "function_name": "sql_postgresql_log_disconnections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_320",
    "description": "Ensure ‘Log_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set Appropriately",
    "function_name": "sql_postgresql_instance_log_statement_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_321",
    "description": "Ensure that the ‘Log_min_messages’ Flag for a Cloud SQL PostgreSQL Instance is set at minimum to 'Warning'",
    "function_name": "sql_postgresql_log_min_messages_warning",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_322",
    "description": "Ensure ‘Log_min_error_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘Error’ or Stricter",
    "function_name": "sql_postgresql_log_min_error_statement_set_to_error",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_323",
    "description": "Ensure That the ‘Log_min_duration_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to '-1' (Disabled)",
    "function_name": "sql_postgresql_log_min_duration_statement_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_324",
    "description": "Ensure That 'cloudsql.enable_pgaudit' Database Flag for each Cloud Sql Postgresql Instance Is Set to 'on' For Centralized Logging",
    "function_name": "cloudsql_postgresql_enable_pgaudit_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_325",
    "description": "Ensure 'external scripts enabled' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_external_scripts_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_326",
    "description": "Ensure that the 'cross db ownership chaining' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_cross_db_ownership_chaining_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_327",
    "description": "Ensure 'user Connections' Database Flag for Cloud Sql Sql Server Instance Is Set to a Non-limiting Value",
    "function_name": "sql_database_user_connections_non_limiting",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_328",
    "description": "Ensure 'user options' database flag for Cloud SQL SQL Server instance is not configured",
    "function_name": "sql_database_user_options_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_329",
    "description": "Ensure 'remote access' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_330",
    "description": "Ensure '3625 (trace flag)' database flag for all Cloud SQL Server instances is set to 'on'",
    "function_name": "sql_instances_trace_flag_3625_on",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_331",
    "description": "Ensure that the 'contained database authentication' database flag for Cloud SQL on the SQL Server instance is not set to 'on'",
    "function_name": "sql_cloudsql_instance_contained_database_authentication_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_332",
    "description": "Ensure That BigQuery Datasets Are Not Anonymously or Publicly Accessible",
    "function_name": "bigquery_datasets_no_public_access",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_333",
    "description": "Ensure That All BigQuery Tables Are Encrypted With Customer-Managed Encryption Key (CMEK)",
    "function_name": "bigquery_tables_encrypted_with_cmek",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_ref).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_334",
    "description": "Ensure That a Default Customer-Managed Encryption Key (CMEK) Is Specified for All BigQuery Data Sets",
    "function_name": "bigquery_datasets_default_cmek_specified",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_335",
    "description": "Ensure all data in BigQuery has been classified",
    "function_name": "bigquery_data_classification_ensured",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_table(table_id).labels"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_336",
    "description": "Ensure that Dataproc Cluster is encrypted using Customer-Managed Encryption Key",
    "function_name": "dataproc_cluster_encrypted_with_cmek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_337",
    "description": "Use corporate login credentials instead of personal accounts, such as Gmail accounts.",
    "function_name": "iam_user_corporate_credentials_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_338",
    "description": "Setup multi-factor authentication for Google Cloud Platform accounts.",
    "function_name": "iam_account_mfa_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_339",
    "description": "Setup Security Key Enforcement for Google Cloud Platform admin accounts.",
    "function_name": "iam_admin_security_key_enforcement",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/admin@example.com')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_340",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. API keys are always at risk because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to restrict API keys to use (call) only APIs required by an application.",
    "function_name": "iam_api_keys_restricted_usage",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_341",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. If they are in use it is recommended to rotate API keys every 90 days.",
    "function_name": "iam_api_keys_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_342",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. Unused keys with their permissions in tact may still exist within a project. Keys are insecure because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to use standard authentication flow instead.",
    "function_name": "iam_api_keys_standard_authentication_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_343",
    "description": "It is recommended that Essential Contacts is configured to designate email addresses for Google Cloud services to notify of important technical or security information.",
    "function_name": "security_essential_contacts_configured",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getContact(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_344",
    "description": "Google Cloud Key Management Service stores cryptographic keys in a hierarchical structure designed for useful and elegant access control management.   The format for the rotation schedule depends on the client library that is used. For the gcloud command-line tool, the next rotation time must be in `ISO` or `RFC3339` format, and the rotation period must be in the form `INTEGERUNIT`, where units can be one of seconds (s), minutes (m), hours (h) or days (d).",
    "function_name": "kms_key_rotation_schedule_format",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_345",
    "description": "It is recommended that the IAM policy on Cloud KMS `cryptokeys` should restrict anonymous and/or public access.",
    "function_name": "kms_cryptokeys_restrict_public_access",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-keyring/cryptoKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_346",
    "description": "When you use Dataproc, cluster and job data is stored on Persistent Disks (PDs) associated with the Compute Engine VMs in your cluster and in a Cloud Storage staging bucket. This PD and bucket data is encrypted using a Google-generated data encryption key (DEK) and key encryption key (KEK). The CMEK feature allows you to create, use, and revoke the key encryption key (KEK). Google still controls the data encryption key (DEK).",
    "function_name": "dataproc_cluster_cmek_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_347",
    "description": "It is recommended to assign the `Service Account User (iam.serviceAccountUser)` and `Service Account Token Creator (iam.serviceAccountTokenCreator)` roles to a user for a specific service account rather than assigning the role to a user at project level.",
    "function_name": "iam_service_account_role_assignment_specific",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_348",
    "description": "It is recommended that the principle of 'Separation of Duties' is enforced while assigning KMS related roles to users.",
    "function_name": "kms_roles_separation_of_duties_enforced",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-keyring')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_349",
    "description": "API Keys should only be used for services in cases where other authentication methods are unavailable. In this case, unrestricted keys are insecure because they can be viewed publicly, such as from within a browser, or they can be accessed on a device where the key resides. It is recommended to restrict API key usage to trusted hosts, HTTP referrers and apps. It is recommended to use the more secure standard authentication flow instead.",
    "function_name": "iam_api_key_restriction_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_350",
    "description": "It is recommended that the principle of 'Separation of Duties' is enforced while assigning service-account related roles to users.",
    "function_name": "iam_service_account_role_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_351",
    "description": "A service account is a special Google account that belongs to an application or a VM, instead of to an individual end-user. The application uses the service account to call the service's Google API so that users aren't directly involved. It's recommended not to use admin access for ServiceAccount.",
    "function_name": "iam_service_account_no_admin_access",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_352",
    "description": "User managed service accounts should not have user-managed keys.",
    "function_name": "iam_service_account_no_user_managed_keys",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_353",
    "description": "Service Account keys consist of a key ID (Private_key_Id) and Private key, which are used to sign programmatic requests users make to Google cloud services accessible to that particular service account. It is recommended that all Service Account keys are regularly rotated.",
    "function_name": "iam_service_account_keys_rotated",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_354",
    "description": "Google Cloud Functions allow you to host serverless code that is executed when an event is triggered, without the requiring the management a host operating system. These functions can also store environment variables to be used by the code that may contain authentication or other information that needs to remain confidential.",
    "function_name": "functions_environment_variables_confidentiality",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_355",
    "description": "GCP Access Approval enables you to require your organizations' explicit approval whenever Google support try to access your projects. You can then select users within your organization who can approve these requests through giving them a security role in IAM. All access requests display which Google Employee requested them in an email or Pub/Sub message that you can choose to Approve. This adds an additional control and logging of who in your organization approved/denied these requests.",
    "function_name": "iam_access_approval_enabled",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getAccessApprovalSettings(name='projects/project-id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_356",
    "description": "GCP Cloud Asset Inventory is services that provides a historical view of GCP resources and IAM policies through a time-series database. The information recorded includes metadata on Google Cloud resources, metadata on policies set on Google Cloud projects or resources, and runtime information gathered within a Google Cloud resource.",
    "function_name": "security_cloud_asset_inventory_historical_view_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='projects/proj', contentType='RESOURCE')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_357",
    "description": "In order to prevent unnecessary project ownership assignments to users/service-accounts and further misuses of projects and resources, all `roles/Owner` assignments should be monitored.  Members (users/Service-Accounts) with a role assignment to primitive role `roles/Owner` are project owners.  The project owner has all the privileges on the project the role belongs to. These are summarized below: - All viewer permissions on all GCP Services within the project - Permissions for actions that modify the state of all GCP services within the project - Manage roles and permissions for a project and all resources within the project - Set up billing for a project  Granting the owner role to a member (user/Service-Account) will allow that member to modify the Identity and Access Management (IAM) policy. Therefore, grant the owner role only if the member has a legitimate purpose to manage the IAM policy. This is because the project IAM policy contains sensitive access control data. Having a minimal set of users allowed to manage IAM policy will simplify any auditing that may be necessary.",
    "function_name": "iam_project_owner_role_restriction",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_358",
    "description": "Logging enabled on a HTTPS Load Balancer will show all network traffic and its destination.",
    "function_name": "network_https_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_359",
    "description": "It is recommended that Cloud Audit Logging is configured to track all admin activities and read, write access to user data.",
    "function_name": "logging_audit_logs_configured_for_admin_and_data_access",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_360",
    "description": "Cloud DNS logging records the queries from the name servers within your VPC to Stackdriver. Logged queries can come from Compute Engine VMs, GKE containers, or other GCP resources provisioned within the VPC.",
    "function_name": "logging_dns_query_logging_enabled",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().get(project='proj', sinkName='dns-queries')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_361",
    "description": "Enabling retention policies on log buckets will protect logs stored in cloud storage buckets from being overwritten or accidentally deleted. It is recommended to set up retention policies and configure Bucket Lock on all storage buckets that are used as log sinks.",
    "function_name": "storage_bucket_retention_policy_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_362",
    "description": "It is recommended to create a sink that will export copies of all the log entries. This can help aggregate logs from multiple projects and export them to a Security Information and Event Management (SIEM).",
    "function_name": "logging_sink_export_all_logs_to_siem",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().create(parent='projects/my-project', body={'name': 'my-sink', 'destination': 'bigquery.googleapis.com/projects/my-project/datasets/my_dataset'})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_363",
    "description": "Google Cloud Platform (GCP) services write audit log entries to the Admin Activity and Data Access logs to help answer the questions of, \"who did what, where, and when?\" within GCP projects.  Cloud audit logging records information includes the identity of the API caller, the time of the API call, the source IP address of the API caller, the request parameters, and the response elements returned by GCP services. Cloud audit logging provides a history of GCP API calls for an account, including API calls made via the console, SDKs, command-line tools, and other GCP services.",
    "function_name": "logging_audit_logs_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_364",
    "description": "It is recommended that a metric filter and alarm be established for Cloud Storage Bucket IAM changes.",
    "function_name": "storage_bucket_iam_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_365",
    "description": "It is recommended that a metric filter and alarm be established for changes to Identity and Access Management (IAM) role creation, deletion and updating activities.",
    "function_name": "logging_iam_role_change_alert",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().create(parent='projects/my-project', body=metric_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_366",
    "description": "It is recommended that a metric filter and alarm be established for SQL instance configuration changes.",
    "function_name": "monitoring_sql_instance_config_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_367",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) network changes.",
    "function_name": "network_vpc_metric_filter_alarm",
    "service_category": "Network|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy_body)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_368",
    "description": "GCP Access Transparency provides audit logs for all actions that Google personnel take in your Google Cloud resources.",
    "function_name": "logging_audit_logs_access_transparency_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_369",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) Network Firewall rule changes.",
    "function_name": "network_vpc_firewall_rule_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_370",
    "description": "It is recommended that a metric filter and alarm be established for Virtual Private Cloud (VPC) network route changes.",
    "function_name": "network_vpc_route_change_alert",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().create(name='projects/my-project', body=alert_policy)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_371",
    "description": "In order to prevent use of legacy networks, a project should not have a legacy network configured. As of now, Legacy Networks are gradually being phased out, and you can no longer create projects with them. This recommendation is to check older projects to ensure that they are not using Legacy Networks.",
    "function_name": "network_project_no_legacy_networks",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_372",
    "description": "Cloud Domain Name System (DNS) is a fast, reliable and cost-effective domain name system that powers millions of domains on the internet. Domain Name System Security Extensions (DNSSEC) in Cloud DNS enables domain owners to take easy steps to protect their domains against DNS hijacking and man-in-the-middle and other attacks.",
    "function_name": "network_dns_dnssec_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_373",
    "description": "GCP `Firewall Rules` are specific to a `VPC Network`. Each rule either `allows` or `denies` traffic when its conditions are met. Its conditions allow users to specify the type of traffic, such as ports and protocols, and the source or destination of the traffic, including IP addresses, subnets, and instances.  Firewall rules are defined at the VPC network level and are specific to the network in which they are defined. The rules themselves cannot be shared among networks. Firewall rules only support IPv4 traffic. When specifying a source for an ingress rule or a destination for an egress rule by address, an `IPv4` address or `IPv4 block in CIDR` notation can be used. Generic `(0.0.0.0/0)` incoming traffic from the Internet to a VPC or VM instance using `RDP` on `Port 3389` can be avoided.",
    "function_name": "network_firewall_rules_restrict_rdp_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj', filter='name=firewall-rule-name').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_374",
    "description": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.  DNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.",
    "function_name": "network_dnssec_algorithm_recommended",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_375",
    "description": "NOTE: Currently, the SHA1 algorithm has been removed from general use by Google, and, if being used, needs to be whitelisted on a project basis by Google and will also, therefore, require a Google Cloud support contract.  DNSSEC algorithm numbers in this registry may be used in CERT RRs. Zone signing (DNSSEC) and transaction security mechanisms (SIG(0) and TSIG) make use of particular subsets of these algorithms. The algorithm used for key signing should be a recommended one and it should be strong.",
    "function_name": "network_dnssec_algorithm_recommendation",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_376",
    "description": "GCP `Firewall Rules` are specific to a `VPC Network`. Each rule either `allows` or `denies` traffic when its conditions are met. Its conditions allow the user to specify the type of traffic, such as ports and protocols, and the source or destination of the traffic, including IP addresses, subnets, and instances.  Firewall rules are defined at the VPC network level and are specific to the network in which they are defined. The rules themselves cannot be shared among networks. Firewall rules only support IPv4 traffic. When specifying a source for an ingress rule or a destination for an egress rule by address, only an `IPv4` address or `IPv4 block in CIDR` notation can be used. Generic `(0.0.0.0/0)` incoming traffic from the internet to VPC or VM instance using `SSH` on `Port 22` can be avoided.",
    "function_name": "network_firewall_rules_restrict_ssh_ingress",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_377",
    "description": "To prevent use of `default` network, a project should not have a `default` network.",
    "function_name": "network_vpc_no_default_network",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_378",
    "description": "Flow Logs is a feature that enables users to capture information about the IP traffic going to and from network interfaces in the organization's VPC Subnets. Once a flow log is created, the user can view and retrieve its data in Stackdriver Logging. It is recommended that Flow Logs be enabled for every business-critical VPC subnet.",
    "function_name": "network_vpc_subnet_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "network_client.subnetworks().get(project='proj', region='region', subnetwork='subnet')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_379",
    "description": "Secure Sockets Layer (SSL) policies determine what port Transport Layer Security (TLS) features clients are permitted to use when connecting to load balancers. To prevent usage of insecure features, SSL policies should use (a) at least TLS 1.2 with the MODERN profile; or (b) the RESTRICTED profile, because it effectively requires clients to use TLS 1.2 regardless of the chosen minimum TLS version; or (3) a CUSTOM profile that does not support any of the following features:  ``` TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_128_CBC_SHA TLS_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_3DES_EDE_CBC_SHA ```",
    "function_name": "network_ssl_policy_enforce_secure_tls",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().get(project='proj', sslPolicy='policy')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_380",
    "description": "IAP authenticates the user requests to your apps via a Google single sign in. You can then manage these users with permissions to control access. It is recommended to use both IAP permissions and firewalls to restrict this access to your apps with sensitive information.",
    "function_name": "network_iap_firewall_restriction_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_381",
    "description": "Interacting with a serial port is often referred to as the serial console, which is similar to using a terminal window, in that input and output is entirely in text mode and there is no graphical interface or mouse support.  If you enable the interactive serial console on an instance, clients can attempt to connect to that instance from any IP address. Therefore interactive serial console support should be disabled.",
    "function_name": "compute_instance_disable_serial_console",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setSerialPortOutput(project='proj', zone='zone', instance='vm', enable=False)"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_382",
    "description": "It is recommended to use Instance specific SSH key(s) instead of using common/shared project-wide SSH key(s) to access Instances.",
    "function_name": "compute_instance_specific_ssh_keys",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_383",
    "description": "To defend against advanced threats and ensure that the boot loader and firmware on your VMs are signed and untampered, it is recommended that Compute instances are launched with Shielded VM enabled.",
    "function_name": "compute_instance_shielded_vm_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().getShieldedInstanceIntegrityPolicy(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_384",
    "description": "Enabling OS login binds SSH certificates to IAM users and facilitates effective SSH certificate management.",
    "function_name": "compute_instance_enable_os_login",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setIamPolicy(project='proj', zone='zone', resource='vm', body={'bindings': [{'role': 'roles/compute.osLogin', 'members': ['user:example@example.com']}]})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_385",
    "description": "Compute instances should not be configured to have external IP addresses.",
    "function_name": "compute_instance_no_external_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_386",
    "description": "Google Cloud encrypts data at-rest and in-transit, but customer data must be decrypted for processing. Confidential Computing is a breakthrough technology which encrypts data in-use—while it is being processed. Confidential Computing environments keep data encrypted in memory and elsewhere outside the central processing unit (CPU).   Confidential VMs leverage the Secure Encrypted Virtualization (SEV) feature of AMD EPYC™ CPUs. Customer data will stay encrypted while it is used, indexed, queried, or trained on. Encryption keys are generated in hardware, per VM, and not exportable. Thanks to built-in hardware optimizations of both performance and security, there is no significant performance penalty to Confidential Computing workloads.",
    "function_name": "compute_vm_confidential_computing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_387",
    "description": "It is recommended to configure your instance to not use the default Compute Engine service account because it has the Editor role on the project.",
    "function_name": "compute_instance_non_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_388",
    "description": "To support principle of least privileges and prevent potential privilege escalation it is recommended that instances are not assigned to default service account `Compute Engine default service account` with Scope `Allow full access to all Cloud APIs`.",
    "function_name": "compute_instance_no_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_389",
    "description": "Compute Engine instance cannot forward a packet unless the source IP address of the packet matches the IP address of the instance. Similarly, GCP won't deliver a packet whose destination IP address is different than the IP address of the instance receiving the packet. However, both capabilities are required if you want to use instances to help route packets.  Forwarding of data packets should be disabled to prevent data loss or information disclosure.",
    "function_name": "compute_instance_disable_ip_forwarding",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().setMetadata(project='proj', zone='zone', instance='vm', body={'items': [{'key': 'canIpForward', 'value': 'false'}]})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_390",
    "description": "In order to maintain the highest level of security all connections to an application should be secure by default.",
    "function_name": "network_load_balancer_secure_connections",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.targetHttpsProxies().get(project='proj', targetHttpsProxy='proxy')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_391",
    "description": "Customer-Supplied Encryption Keys (CSEK) are a feature in Google Cloud Storage and Google Compute Engine. If you supply your own encryption keys, Google uses your key to protect the Google-generated keys used to encrypt and decrypt your data. By default, Google Compute Engine encrypts all data at rest. Compute Engine handles and manages this encryption for you without any additional actions on your part. However, if you wanted to control and manage this encryption yourself, you can provide your own encryption keys.",
    "function_name": "compute_instance_csek_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_392",
    "description": "Google Cloud Virtual Machines have the ability via an OS Config agent API to periodically (about every 10 minutes) report OS inventory data. A patch compliance API periodically reads this data, and cross references metadata to determine if the latest updates are installed.  This is not the only Patch Management solution available to your organization and you should weigh your needs before committing to using this method.",
    "function_name": "compute_vm_os_inventory_reporting_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_393",
    "description": "It is recommended that IAM policy on Cloud Storage bucket does not allows anonymous or public access.",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_394",
    "description": "It is recommended that uniform bucket-level access is enabled on Cloud Storage buckets.",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_395",
    "description": "It is recommended to have all SQL database instances set to enable automated backups.",
    "function_name": "sql_instances_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_396",
    "description": "It is recommended to configure Second Generation Sql instance to use private IPs instead of public IPs.",
    "function_name": "sql_instance_private_ip_configuration",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_397",
    "description": "Database Server should accept connections only from trusted Network(s)/IP(s) and restrict access from public IP addresses.",
    "function_name": "network_firewall_restrict_public_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_398",
    "description": "It is recommended to enforce all incoming connections to SQL database instance to use SSL.",
    "function_name": "sql_instance_ssl_enforcement",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin_client.instances().patch(project='proj', instance='instance', body={'settings': {'ipConfiguration': {'requireSsl': True}}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_399",
    "description": "It is recommended to set a password for the administrative user (`root` by default) to prevent unauthorized access to the SQL database instances.  This recommendation is applicable only for MySQL Instances. PostgreSQL does not offer any setting for No Password from the cloud console.",
    "function_name": "sql_mysql_instance_admin_password_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'userLabels': {'password': 'your_password'}}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_400",
    "description": "It is recommended to set `skip_show_database` database flag for Cloud SQL Mysql instance to `on`",
    "function_name": "sql_instance_skip_show_database_flag_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_401",
    "description": "It is recommended to set the `local_infile` database flag for a Cloud SQL MySQL instance to `off`.",
    "function_name": "sql_instance_local_infile_flag_off",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'local_infile', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_402",
    "description": "The `log_error_verbosity` flag controls the verbosity/details of messages logged. Valid values are: - `TERSE` - `DEFAULT` - `VERBOSE`  `TERSE` excludes the logging of `DETAIL`, `HINT`, `QUERY`, and `CONTEXT` error information.  `VERBOSE` output includes the `SQLSTATE` error code, source code file name, function name, and line number that generated the error.  Ensure an appropriate value is set to 'DEFAULT' or stricter.",
    "function_name": "compute_instance_log_error_verbosity_default_or_stricter",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_403",
    "description": "The `log_min_error_statement` flag defines the minimum message severity level that are considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include `DEBUG5`, `DEBUG4`, `DEBUG3`, `DEBUG2`, `DEBUG1`, `INFO`, `NOTICE`, `WARNING`, `ERROR`, `LOG`, `FATAL`, and `PANIC`. Each severity level includes the subsequent levels mentioned above. Ensure a value of `ERROR` or stricter is set.",
    "function_name": "compute_instance_log_min_error_statement_set",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_404",
    "description": "The value of `log_statement` flag determined the SQL statements that are logged. Valid values are: - `none` - `ddl` - `mod` - `all`  The value `ddl` logs all data definition statements. The value `mod` logs all ddl statements, plus data-modifying statements.  The statements are logged after a basic parsing is done and statement type is determined, thus this does not logs statements with errors. When using extended query protocol, logging occurs after an Execute message is received and values of the Bind parameters are included.  A value of 'ddl' is recommended unless otherwise directed by your organization's logging policy.",
    "function_name": "logging_sql_log_statement_ddl_recommended",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_405",
    "description": "Instance addresses can be public IP or private IP. Public IP means that the instance is accessible through the public internet. In contrast, instances using only private IP are not accessible through the public internet, but are accessible through a Virtual Private Cloud (VPC).  Limiting network access to your database will limit potential attacks.",
    "function_name": "compute_instance_private_ip_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_406",
    "description": "Ensure `cloudsql.enable_pgaudit` database flag for Cloud SQL PostgreSQL instance is set to `on` to allow for centralized logging.",
    "function_name": "sql_postgresql_instance_enable_pgaudit",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_407",
    "description": "Enabling the `log_connections` setting causes each attempted connection to the server to be logged, along with successful completion of client authentication. This parameter cannot be changed after the session starts.",
    "function_name": "compute_instance_log_connections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_408",
    "description": "Enabling the `log_disconnections` setting logs the end of each session, including the session duration.",
    "function_name": "compute_instance_log_disconnections_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_409",
    "description": "The `log_min_duration_statement` flag defines the minimum amount of execution time of a statement in milliseconds where the total duration of the statement is logged. Ensure that `log_min_duration_statement` is disabled, i.e., a value of `-1` is set.",
    "function_name": "bigquery_log_min_duration_statement_disabled",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='my_dataset')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_410",
    "description": "The `log_min_messages` flag defines the minimum message severity level that is considered as an error statement. Messages for error statements are logged with the SQL statement. Valid values include `DEBUG5`, `DEBUG4`, `DEBUG3`, `DEBUG2`, `DEBUG1`, `INFO`, `NOTICE`, `WARNING`, `ERROR`, `LOG`, `FATAL`, and `PANIC`. Each severity level includes the subsequent levels mentioned above. ERROR is considered the best practice setting. Changes should only be made in accordance with the organization's logging policy.",
    "function_name": "logging_log_min_messages_set_to_error",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_411",
    "description": "It is recommended to set `3625 (trace flag)` database flag for Cloud SQL SQL Server instance to `on`.",
    "function_name": "sql_instance_trace_flag_3625_on",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': '3625', 'value': 'on'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_412",
    "description": "It is recommended to set `external scripts enabled` database flag for Cloud SQL SQL Server instance to `off`",
    "function_name": "sql_instance_external_scripts_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'external scripts enabled', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_413",
    "description": "It is recommended to set `remote access` database flag for Cloud SQL SQL Server instance to `off`.",
    "function_name": "sql_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_414",
    "description": "It is recommended to check the `user connections` for a Cloud SQL SQL Server instance to ensure that it is not artificially limiting connections.",
    "function_name": "sql_instance_user_connections_unlimited",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_415",
    "description": "It is recommended that, `user options` database flag for Cloud SQL SQL Server instance should not be configured.",
    "function_name": "sql_instance_user_options_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_416",
    "description": "It is recommended to set `contained database authentication` database flag for Cloud SQL on the SQL Server instance to `off`.",
    "function_name": "sql_cloudsql_contained_database_authentication_off",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'contained database authentication', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_417",
    "description": "It is recommended to set `cross db ownership chaining` database flag for Cloud SQL SQL Server instance to `off`.",
    "function_name": "sql_instance_cross_db_ownership_chaining_off",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().patch(project='proj', instance='instance', body={'settings': {'databaseFlags': [{'name': 'cross db ownership chaining', 'value': 'off'}]}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_418",
    "description": "BigQuery by default encrypts the data as rest by employing `Envelope Encryption` using Google managed cryptographic keys. The data is encrypted using the `data encryption keys` and data encryption keys themselves are further encrypted using `key encryption keys`. This is seamless and do not require any additional input from the user. However, if you want to have greater control, Customer-managed encryption keys (CMEK) can be used as encryption key management solution for BigQuery Data Sets.",
    "function_name": "bigquery_datasets_use_cmek",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.update_dataset(dataset_id, {'encryptionConfiguration': {'kmsKeyName': 'projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key'}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_419",
    "description": "BigQuery by default encrypts the data as rest by employing `Envelope Encryption` using Google managed cryptographic keys. The data is encrypted using the `data encryption keys` and data encryption keys themselves are further encrypted using `key encryption keys`. This is seamless and do not require any additional input from the user. However, if you want to have greater control, Customer-managed encryption keys (CMEK) can be used as encryption key management solution for BigQuery Data Sets. If CMEK is used, the CMEK is used to encrypt the data encryption keys instead of using google-managed encryption keys.",
    "function_name": "bigquery_datasets_use_cmek",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.update_dataset(dataset_ref, {'encryptionConfiguration': {'kmsKeyName': 'projects/project-id/locations/location/keyRings/keyring/cryptoKeys/key'}})"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_420",
    "description": "It is recommended that the IAM policy on BigQuery datasets does not allow anonymous and/or public access.",
    "function_name": "bigquery_datasets_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_421",
    "description": "Ensure that Corporate Login Credentials are Used",
    "function_name": "iam_service_accounts_corporate_login_credentials",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_422",
    "description": "Ensure that Multi-Factor Authentication is 'Enabled' for All Non-Service Accounts",
    "function_name": "iam_non_service_accounts_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_423",
    "description": "Ensure that Security Key Enforcement is Enabled for All Admin Accounts",
    "function_name": "iam_admin_accounts_security_key_enforcement_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/admin-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_424",
    "description": "Ensure That There Are Only GCP-Managed Service Account Keys for Each Service Account",
    "function_name": "iam_service_account_gcp_managed_keys_only",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_425",
    "description": "Ensure That Service Account Has No Admin Privileges",
    "function_name": "iam_service_account_no_admin_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_426",
    "description": "Ensure That IAM Users Are Not Assigned the Service Account User or Service Account Token Creator Roles at Project Level",
    "function_name": "iam_project_no_service_account_roles",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_427",
    "description": "Ensure User-Managed/External Keys for Service Accounts Are Rotated Every 90 Days or Fewer",
    "function_name": "iam_service_account_key_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_428",
    "description": "Ensure That Separation of Duties Is Enforced While Assigning Service Account Related Roles to Users",
    "function_name": "iam_service_account_role_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_429",
    "description": "Ensure That Cloud KMS Cryptokeys Are Not Anonymously or Publicly Accessible",
    "function_name": "kms_cryptokeys_no_public_access",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().getIamPolicy(resource='projects/my-project/locations/global/keyRings/my-keyring/cryptoKeys/my-key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_430",
    "description": "Ensure KMS Encryption Keys Are Rotated Within a Period of 90 Days",
    "function_name": "kms_keys_rotation_within_90_days",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/project/locations/location/keyRings/keyRing/cryptoKeys/key')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_431",
    "description": "Ensure That Separation of Duties Is Enforced While Assigning KMS Related Roles to Users",
    "function_name": "kms_roles_separation_of_duties_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_432",
    "description": "Ensure API Keys Only Exist for Active Services",
    "function_name": "iam_api_keys_active_services_only",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_433",
    "description": "Ensure API Keys Are Restricted To Use by Only Specified Hosts and Apps",
    "function_name": "iam_api_keys_host_app_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().get(name='projects/-/serviceAccounts/{account}/keys/{key}')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_434",
    "description": "Ensure API Keys Are Restricted to Only APIs That Application Needs Access",
    "function_name": "iam_api_keys_restricted_to_needed_apis",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/service-account-email')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_435",
    "description": "Ensure API Keys Are Rotated Every 90 Days",
    "function_name": "iam_api_keys_rotation_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().keys().list(name='projects/-/serviceAccounts/your-service-account')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_436",
    "description": "Ensure Essential Contacts is Configured for Organization",
    "function_name": "iam_organization_essential_contacts_configured",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.organizations().getIamPolicy(resource='organizations/123456789').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_437",
    "description": "Ensure Secrets are Not Stored in Cloud Functions Environment Variables by Using Secret Manager",
    "function_name": "functions_environment_secrets_use_secret_manager",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "functions_client.projects().locations().functions().get(name='projects/proj/locations/loc/functions/func')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_438",
    "description": "Ensure That Cloud Audit Logging Is Configured Properly",
    "function_name": "logging_audit_logging_configured_properly",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_439",
    "description": "Ensure That Sinks Are Configured for All Log Entries",
    "function_name": "logging_sinks_configured_for_all_entries",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.sinks().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_440",
    "description": "Ensure That Retention Policies on Cloud Storage Buckets Used for Exporting Logs Are Configured Using Bucket Lock",
    "function_name": "storage_bucket_retention_policy_configured_with_lock",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_441",
    "description": "Ensure Log Metric Filter and Alerts Exist for Project Ownership Assignments/Changes",
    "function_name": "logging_project_ownership_metric_filter_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_442",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Audit Configuration Changes",
    "function_name": "logging_audit_config_changes_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_443",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Custom Role Changes",
    "function_name": "logging_metric_filter_alerts_for_custom_role_changes",
    "service_category": "Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_444",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Firewall Rule Changes",
    "function_name": "network_vpc_firewall_log_metric_filter_alerts_exist",
    "service_category": "Network|Logging|Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.metricDescriptors().list(name='projects/proj').execute()"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_445",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Route Changes",
    "function_name": "logging_vpc_route_change_alerts_exist",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_446",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for VPC Network Changes",
    "function_name": "logging_vpc_network_log_metric_filter_alerts_exist",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_447",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for Cloud Storage IAM Permission Changes",
    "function_name": "logging_storage_iam_permission_change_alerts_exist",
    "service_category": "Logging",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/my-project')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_448",
    "description": "Ensure That the Log Metric Filter and Alerts Exist for SQL Instance Configuration Changes",
    "function_name": "logging_sql_instance_config_change_alerts_exist",
    "service_category": "Logging|Monitoring",
    "confidence": 9,
    "gcp_sdk_example": "logging_client.projects().metrics().list(parent='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_449",
    "description": "Ensure That Cloud DNS Logging Is Enabled for All VPC Networks",
    "function_name": "network_vpc_dns_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_450",
    "description": "Ensure Cloud Asset Inventory Is Enabled",
    "function_name": "security_command_center_asset_inventory_enabled",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_451",
    "description": "Ensure 'Access Transparency' is 'Enabled'",
    "function_name": "logging_access_transparency_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().getAccessTransparencySettings(name='projects/proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_452",
    "description": "Ensure 'Access Approval' is 'Enabled'",
    "function_name": "security_access_approval_enabled",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.accessApprovalSettings().get(name='projects/project-id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_453",
    "description": "Ensure Logging is enabled for HTTP(S) Load Balancer",
    "function_name": "network_load_balancer_logging_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.forwardingRules().get(project='proj', region='region', forwardingRule='rule')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_454",
    "description": "Ensure That the Default Network Does Not Exist in a Project",
    "function_name": "network_vpc_default_network_absent",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_455",
    "description": "Ensure Legacy Networks Do Not Exist for Older Projects",
    "function_name": "compute_networks_legacy_absent",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_456",
    "description": "Ensure That DNSSEC Is Enabled for Cloud DNS",
    "function_name": "network_dns_dnssec_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_457",
    "description": "Ensure That RSASHA1 Is Not Used for the Key-Signing Key in Cloud DNS DNSSEC",
    "function_name": "dns_dnssec_keysigningkey_no_rsasha1",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_458",
    "description": "Ensure That RSASHA1 Is Not Used for the Zone-Signing Key in Cloud DNS DNSSEC",
    "function_name": "dns_zone_dnssec_rsasha1_not_used",
    "service_category": "Network",
    "confidence": 9,
    "gcp_sdk_example": "dns_client.managedZones().get(project='proj', managedZone='zone')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_459",
    "description": "Ensure That SSH Access Is Restricted From the Internet",
    "function_name": "network_firewall_ssh_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_460",
    "description": "Ensure That RDP Access Is Restricted From the Internet",
    "function_name": "network_firewall_rdp_restricted",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_461",
    "description": "Ensure that VPC Flow Logs is Enabled for Every Subnet in a VPC Network",
    "function_name": "network_subnet_flow_logs_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.subnetworks().get(project='proj', region='region', subnetwork='subnet')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_462",
    "description": "Ensure No HTTPS or SSL Proxy Load Balancers Permit SSL Policies With Weak Cipher Suites",
    "function_name": "network_load_balancer_disallow_weak_ssl_policies",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.sslPolicies().list(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_463",
    "description": "Use Identity Aware Proxy (IAP) to Ensure Only Traffic From Google IP Addresses are 'Allowed'",
    "function_name": "network_iap_google_ip_restriction",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "iap_client.projects().iap_web().services().getIamPolicy(resource='resource_name')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_464",
    "description": "Ensure That Instances Are Not Configured To Use the Default Service Account",
    "function_name": "compute_instance_no_default_service_account",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_465",
    "description": "Ensure That Instances Are Not Configured To Use the Default Service Account With Full Access to All Cloud APIs",
    "function_name": "compute_instance_no_default_service_account_full_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_466",
    "description": "Ensure “Block Project-Wide SSH Keys” Is Enabled for VM Instances",
    "function_name": "compute_instance_block_project_wide_ssh_keys_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_467",
    "description": "Ensure Oslogin Is Enabled for a Project",
    "function_name": "compute_project_oslogin_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.projects().get(project='proj')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_468",
    "description": "Ensure ‘Enable Connecting to Serial Ports’ Is Not Enabled for VM Instance",
    "function_name": "compute_instance_serial_port_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_469",
    "description": "Ensure That IP Forwarding Is Not Enabled on Instances",
    "function_name": "compute_instance_ip_forwarding_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_470",
    "description": "Ensure VM Disks for Critical VMs Are Encrypted With Customer-Supplied Encryption Keys (CSEK)",
    "function_name": "compute_vm_disks_encrypted_with_csek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_471",
    "description": "Ensure Compute Instances Are Launched With Shielded VM Enabled",
    "function_name": "compute_instance_shielded_vm_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_472",
    "description": "Ensure That Compute Instances Do Not Have Public IP Addresses",
    "function_name": "compute_instance_no_public_ip",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_473",
    "description": "Ensure That App Engine Applications Enforce HTTPS Connections",
    "function_name": "app_engine_application_https_enforced",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "appengine_client.apps().get(appsId='app_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_474",
    "description": "Ensure That Compute Instances Have Confidential Computing Enabled",
    "function_name": "compute_instance_confidential_computing_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_475",
    "description": "Ensure the Latest Operating System Updates Are Installed On Your Virtual Machines in All Projects",
    "function_name": "compute_instance_os_updates_installed",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_476",
    "description": "Ensure That Cloud Storage Bucket Is Not Anonymously or Publicly Accessible",
    "function_name": "storage_bucket_no_public_access",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_477",
    "description": "Ensure That Cloud Storage Buckets Have Uniform Bucket-Level Access Enabled",
    "function_name": "storage_bucket_uniform_access_enabled",
    "service_category": "Storage",
    "confidence": 9,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access.enabled"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_478",
    "description": "Ensure That the Cloud SQL Database Instance Requires All Incoming Connections To Use SSL",
    "function_name": "sql_database_instance_ssl_enforced",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_479",
    "description": "Ensure That Cloud SQL Database Instances Do Not Implicitly Whitelist All Public IP Addresses",
    "function_name": "sql_database_no_public_ip_whitelist",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin_client.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_480",
    "description": "Ensure That Cloud SQL Database Instances Do Not Have Public IPs",
    "function_name": "sql_database_no_public_ip",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_481",
    "description": "Ensure That Cloud SQL Database Instances Are Configured With Automated Backups",
    "function_name": "sql_database_automated_backups_enabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_482",
    "description": "Ensure That a MySQL Database Instance Does Not Allow Anyone To Connect With Administrative Privileges",
    "function_name": "sql_instance_no_admin_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_483",
    "description": "Ensure ‘Skip_show_database’ Database Flag for Cloud SQL MySQL Instance Is Set to ‘On’",
    "function_name": "sql_instance_skip_show_database_flag_on",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_484",
    "description": "Ensure That the ‘Local_infile’ Database Flag for a Cloud SQL MySQL Instance Is Set to ‘Off’",
    "function_name": "sql_instance_local_infile_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_485",
    "description": "Ensure ‘Log_error_verbosity’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘DEFAULT’ or Stricter",
    "function_name": "sql_postgresql_log_error_verbosity_default",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_486",
    "description": "Ensure That the ‘Log_connections’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘On’",
    "function_name": "sql_postgresql_log_connections_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_487",
    "description": "Ensure That the ‘Log_disconnections’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘On’",
    "function_name": "sql_postgresql_log_disconnections_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_488",
    "description": "Ensure ‘Log_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set Appropriately",
    "function_name": "sql_postgresql_instance_log_statement_configured",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_489",
    "description": "Ensure that the ‘Log_min_messages’ Flag for a Cloud SQL PostgreSQL Instance is set at minimum to 'Warning'",
    "function_name": "sql_postgresql_log_min_messages_warning",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_490",
    "description": "Ensure ‘Log_min_error_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to ‘Error’ or Stricter",
    "function_name": "sql_postgresql_log_min_error_statement_set_to_error",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_491",
    "description": "Ensure That the ‘Log_min_duration_statement’ Database Flag for Cloud SQL PostgreSQL Instance Is Set to '-1' (Disabled)",
    "function_name": "sql_postgresql_log_min_duration_statement_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_492",
    "description": "Ensure That 'cloudsql.enable_pgaudit' Database Flag for each Cloud Sql Postgresql Instance Is Set to 'on' For Centralized Logging",
    "function_name": "sql_postgresql_instance_pgaudit_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_493",
    "description": "Ensure 'external scripts enabled' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_external_scripts_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_494",
    "description": "Ensure that the 'cross db ownership chaining' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_cross_db_ownership_chaining_off",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_495",
    "description": "Ensure 'user Connections' Database Flag for Cloud Sql Sql Server Instance Is Set to a Non-limiting Value",
    "function_name": "sql_database_user_connections_limit_set",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_496",
    "description": "Ensure 'user options' database flag for Cloud SQL SQL Server instance is not configured",
    "function_name": "sql_database_user_options_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_497",
    "description": "Ensure 'remote access' database flag for Cloud SQL SQL Server instance is set to 'off'",
    "function_name": "sql_instance_remote_access_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_498",
    "description": "Ensure '3625 (trace flag)' database flag for all Cloud SQL Server instances is set to 'on'",
    "function_name": "sql_instances_trace_flag_3625_enabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.projects().instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_499",
    "description": "Ensure that the 'contained database authentication' database flag for Cloud SQL on the SQL Server instance is not set to 'on'",
    "function_name": "sql_cloudsql_instance_contained_database_authentication_disabled",
    "service_category": "Compute",
    "confidence": 9,
    "gcp_sdk_example": "sqladmin.instances().get(project='proj', instance='instance')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_500",
    "description": "Ensure That BigQuery Datasets Are Not Anonymously or Publicly Accessible",
    "function_name": "bigquery_dataset_no_public_access",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id).access_entries"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_501",
    "description": "Ensure That All BigQuery Tables Are Encrypted With Customer-Managed Encryption Key (CMEK)",
    "function_name": "bigquery_tables_encrypted_with_cmek",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_id).encryption_configuration.kms_key_name"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_502",
    "description": "Ensure That a Default Customer-Managed Encryption Key (CMEK) Is Specified for All BigQuery Data Sets",
    "function_name": "bigquery_datasets_default_cmek_specified",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_503",
    "description": "Ensure all data in BigQuery has been classified",
    "function_name": "bigquery_data_classification_ensured",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(project='proj', dataset_id='dataset', table_id='table')"
  },
  {
    "sheet": "CIS",
    "rule_id": "CIS_504",
    "description": "Ensure that Dataproc Cluster is encrypted using Customer-Managed Encryption Key",
    "function_name": "dataproc_cluster_encrypted_with_cmek",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "dataproc_client.projects().regions().clusters().get(projectId='proj', region='region', clusterName='cluster')"
  },
  {
    "sheet": "gdpr_aws",
    "rule_id": "gdpr_aws_1",
    "description": "To obtain the latest version of the official guide, please visit https://gdpr-info.eu/art-25-gdpr/. Taking into account the state of the art, the cost of implementation and the nature, scope, context and purposes of processing as well as the risks of varying likelihood and severity for rights and freedoms of natural persons posed by the processing, the controller shall, both at the time of the determination of the means for processing and at the time of the processing itself, implement appropriate technical and organisational measures, such as pseudonymisation, which are designed to implement data-protection principles, such as data minimisation, in an effective manner and to integrate the necessary safeguards into the processing in order to meet the requirements of this Regulation and protect the rights of data subjects. The controller shall implement appropriate technical and organisational measures for ensuring that, by default, only personal data which are necessary for each specific purpose of the processing are processed. That obligation applies to the amount of personal data collected, the extent of their processing, the period of their storage and their accessibility. In particular, such measures shall ensure that by default personal data are not made accessible without the individual's intervention to an indefinite number of natural persons. An approved certification mechanism pursuant to Article 42 may be used as an element to demonstrate compliance with the requirements set out in paragraphs 1 and 2 of this Article.",
    "function_name": "storage_buckets_data_minimization_default_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).iam_configuration.uniform_bucket_level_access_enabled"
  },
  {
    "sheet": "gdpr_aws",
    "rule_id": "gdpr_aws_2",
    "description": " To obtain the latest version of the official guide, please visit https://www.privacy-regulation.eu/en/article-30-records-of-processing-activities-GDPR.htm. Each controller and, where applicable, the controller's representative, shall maintain a record of processing activities under its responsibility. That record shall contain all of the following information like the name and contact details of the controller and where applicable, the joint controller, the controller's representative and the data protection officer, the purposes of the processing etc. Each processor and where applicable, the processor's representative shall maintain a record of all categories of processing activities carried out on behalf of a controller, containing the name and contact details of the processor or processors and of each controller on behalf of which the processor is acting, and, where applicable of the controller's or the processor's representative, and the data protection officer, where applicable, transfers of personal data to a third country or an international organisation, including the identification of that third country or international organisation and, in the case of transfers referred to in the second subparagraph of Article 49(1), the documentation of suitable safeguards. The records referred to in paragraphs 1 and 2 shall be in writing, including in electronic form. The controller or the processor and, where applicable, the controller's or the processor's representative, shall make the record available to the supervisory authority on request. The obligations referred to in paragraphs 1 and 2 shall not apply to an enterprise or an organisation employing fewer than 250 persons unless the processing it carries out is likely to result in a risk to the rights and freedoms of data subjects, the processing is not occasional, or the processing includes special categories of data as referred to in Article 9(1) or personal data relating to criminal convictions and offences referred to in Article 10.",
    "function_name": "bigquery_datasets_maintain_processing_records",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "gdpr_aws",
    "rule_id": "gdpr_aws_3",
    "description": " To obtain the latest version of the official guide, please visit https://gdpr-info.eu/art-32-gdpr/. Taking into account the state of the art, the costs of implementation and the nature, scope, context and purposes of processing as well as the risk of varying likelihood and severity for the rights and freedoms of natural persons, the controller and the processor shall implement appropriate technical and organisational measures to ensure a level of security appropriate to the risk, including inter alia as appropriate. In assessing the appropriate level of security account shall be taken in particular of the risks that are presented by processing, in particular from accidental or unlawful destruction, loss, alteration, unauthorised disclosure of, or access to personal data transmitted, stored or otherwise processed. Adherence to an approved code of conduct as referred to in Article 40 or an approved certification mechanism as referred to in Article 42 may be used as an element by which to demonstrate compliance with the requirements set out in paragraph 1 of this Article. The controller and processor shall take steps to ensure that any natural person acting under the authority of the controller or the processor who has access to personal data does not process them except on instructions from the controller, unless he or she is required to do so by Union or Member State law.",
    "function_name": "iam_service_accounts_least_privilege",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_1",
    "description": "The CEO must establish and operate a reporting and decision-making system to ensure executive participation in the establishment and operation of the information protection and personal information protection management system.",
    "function_name": "iam_policy_executive_reporting_system",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_2",
    "description": "The CEO must appoint a Chief Information Security Officer (CISO) responsible for information protection and a Chief Privacy Officer (CPO) responsible for personal information protection, both at an executive level with authority to allocate resources such as budget and personnel.",
    "function_name": "iam_roles_executive_appointment",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='roles/owner')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_3",
    "description": "The CEO must establish and operate a working group to effectively implement information protection and personal information protection, a committee that can review and approve key matters related to information protection and personal information protection across the organization, and a consultative body consisting of department-level information protection and personal information protection officers for enterprise-wide protection activities.",
    "function_name": "iam_roles_information_protection_committee_established",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_4",
    "description": "The organization must set the scope of the management system by considering its core services and the current state of personal information processing, and document the related services, personal information processing tasks, organizations, assets, and physical locations.",
    "function_name": "iam_management_scope_documentation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_5",
    "description": "The organization must establish and document information protection and personal information protection policies and implementation documents, clearly stating the organization's information protection and personal information protection guidelines and direction. These policies and implementation documents must be approved by the executive management and communicated in an understandable form to employees and relevant parties.",
    "function_name": "iam_policies_documentation_approval",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_6",
    "description": "The CEO must allocate the necessary resources, including budget and personnel with expertise in the fields of information protection and personal information protection, for the effective implementation and continuous operation of the management system.",
    "function_name": "iam_roles_expertise_allocation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_7",
    "description": "Organizations must establish classification criteria for information assets according to the characteristics of their operations, identify and classify all information assets within the scope of the management system, assess their importance, and maintain an up-to-date list.",
    "function_name": "security_information_assets_classification_criteria",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.assets().list(parent='organizations/123456789')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_8",
    "description": "Organizations must analyze the status of information services and personal information processing across all areas of the management system, document the procedures and workflows, and review them regularly to maintain their accuracy.",
    "function_name": "iam_service_accounts_document_procedures",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_9",
    "description": "Organizations must collect threat information by analyzing internal and external environments, select a risk assessment method suitable for the organization, conduct a risk assessment at least once a year across all areas of the management system, and manage acceptable risks with the approval of the executives.",
    "function_name": "security_command_center_threat_information_collection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_10",
    "description": "Based on the results of the risk assessment, appropriate protective measures must be selected to address the identified risks, and an implementation plan including the priority, schedule, responsible department/personnel, and budget for the protective measures must be established and approved by management.",
    "function_name": "security_command_center_risk_assessment_plan_implementation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/proj/locations/global')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_11",
    "description": "The selected protective measures must be effectively implemented according to the implementation plan, and management must verify the accuracy and effectiveness of the implementation results.",
    "function_name": "security_command_center_protective_measures_implementation_effectiveness",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_12",
    "description": "The departments and personnel responsible for the actual operation or implementation of the protective measures must be identified, and the related information must be shared and provided through training to ensure continuous operation.",
    "function_name": "iam_roles_training_implementation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_13",
    "description": "According to the management system established by the organization, operational activities that must be performed continuously or periodically must be recorded and managed in a way that allows identification and tracking, and management must regularly review the effectiveness of operational activities and manage them accordingly.",
    "function_name": "logging_audit_logs_continuous_recording",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_14",
    "description": "The organization must regularly identify and reflect legal requirements related to information protection and personal information protection and continuously review whether compliance is being maintained.",
    "function_name": "iam_policies_legal_compliance_review",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_15",
    "description": "The organization must audit its management system at least once a year with a team of personnel who possess independence and expertise, to ensure the system is operating effectively in accordance with internal policies and legal requirements, and report any identified issues to management.",
    "function_name": "security_command_center_audit_management_system_annual",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_16",
    "description": "The root causes of the issues identified during legal compliance reviews and management system inspections must be analyzed, and preventive measures must be established and implemented. The management must confirm the accuracy and effectiveness of the improvement results.",
    "function_name": "security_command_center_preventive_measures_implementation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().patch(name='finding_name', body={'state': 'ACTIVE'})"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_17",
    "description": "Information protection and personal information protection policies and implementation documents must be periodically reviewed and, if necessary, revised in response to changes in laws and regulations, policies of higher organizations and related agencies, and changes in the internal and external environment. These changes must be documented and tracked.",
    "function_name": "iam_policies_documentation_review",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_18",
    "description": "Roles and responsibilities related to information protection and personal information protection must be assigned to all members of the organization, and systems must be established for evaluating these activities and for communication between members and departments.",
    "function_name": "iam_roles_responsibilities_assignment",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_19",
    "description": "The procedures and protection measures for handling information assets according to their purpose and importance must be established and implemented, and the responsibilities for each asset must be clearly defined and managed.",
    "function_name": "iam_asset_responsibility_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_20",
    "description": "Criteria and management plans for key duties, such as handling personal information and important information or accessing key systems, must be established, and the number of key personnel must be minimized and their list kept up-to-date.",
    "function_name": "iam_roles_minimize_key_personnel",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_21",
    "description": "Criteria for the separation of duties must be established and applied to prevent potential harm from the misuse or abuse of authority. If separation of duties is unavoidable, supplementary measures must be established and implemented.",
    "function_name": "iam_roles_separation_of_duties_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_22",
    "description": "Employees, temporary staff, or external personnel handling information assets or granted access must sign a security and confidentiality agreement in accordance with internal policies.",
    "function_name": "iam_personnel_security_agreement_signed",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_23",
    "description": "Organizations must establish and operate an annual awareness and training plan to ensure that employees and related external personnel understand the organization's management system and policies and acquire the necessary job-specific expertise. The effectiveness of this plan must be evaluated and reflected in future plans.",
    "function_name": "iam_policy_training_plan_established",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_24",
    "description": "Procedures must be established and managed for the return of assets, the revocation or adjustment of accounts and access rights, and confirmation of results when there is a resignation, job change, or leave of absence, involving departments such as HR, information protection, personal information protection, and IT.",
    "function_name": "iam_accounts_access_revocation_on_employee_exit",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().delete(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_25",
    "description": "In the event that employees or relevant external parties violate laws, regulations, or internal policies, the organization must establish and implement procedures to take appropriate actions.",
    "function_name": "iam_policy_violation_procedure_implementation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_26",
    "description": "When outsourcing part of the work (e.g., handling personal information, information protection, operating or developing information systems) or using external facilities or services (e.g., data centers, cloud services, application services), the organization must identify the current status, understand the legal requirements and risks arising from external organizations or services, and establish appropriate protective measures.",
    "function_name": "iam_service_accounts_external_risk_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_27",
    "description": "When using external services or outsourcing work to external parties, the organization must identify the information protection and personal information protection requirements and specify them in contracts or agreements.",
    "function_name": "iam_service_accounts_contractual_requirements",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_28",
    "description": "Security measures specified in contracts, agreements, and internal policies must be regularly inspected or audited to ensure external parties comply with information protection and personal information protection requirements.",
    "function_name": "iam_policies_external_party_compliance",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_29",
    "description": "When an external party contract expires, the task is completed, or there is a personnel change, security measures such as returning provided information assets, deleting information system access accounts, destroying sensitive information, and obtaining confidentiality agreements for acquired information must be implemented.",
    "function_name": "iam_service_accounts_revoke_on_contract_expiry",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().delete(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_30",
    "description": "To protect personal and sensitive information, documents, storage media, key facilities, and systems from physical and environmental threats, physical protection zones such as controlled areas, restricted areas, and reception areas must be designated, and protection measures for each zone must be established and implemented.",
    "function_name": "compute_instance_physical_protection_zones_designated",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_31",
    "description": "Access to protected areas must be restricted to authorized personnel only, and entry and access logs should be reviewed periodically to ensure accountability.",
    "function_name": "iam_access_restriction_authorized_personnel",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_32",
    "description": "Information systems should be arranged considering their importance and characteristics to reduce environmental threats, harmful factors, and unauthorized access, and communication and power cables should be protected from damage.",
    "function_name": "network_cables_protection_ensured",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_33",
    "description": "Based on the importance and characteristics of the information systems located in protected areas, protective facilities such as temperature and humidity control, fire detection, firefighting equipment, leak detection, UPS, emergency generators, and dual power lines should be established and operated according to operational procedures.",
    "function_name": "compute_instance_protective_facilities_established",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_34",
    "description": "Procedures to prevent unauthorized actions and abuse of privileges within secure zones must be established and implemented, and the records of operations should be periodically reviewed.",
    "function_name": "iam_roles_privilege_abuse_prevention",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_35",
    "description": "Procedures to control the inbound and outbound movement of information systems, mobile devices, storage media, etc., within secure zones must be established, implemented, and periodically reviewed.",
    "function_name": "network_vpc_secure_zone_data_control",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_36",
    "description": "Protection measures such as clean desk policies and regular inspections must be established and implemented to prevent unauthorized exposure or leakage of personal and sensitive information through shared office equipment (e.g., document storage, shared PCs, multifunction printers, file servers) and individual work environments (e.g., work PCs, desks).",
    "function_name": "compute_instance_secure_configuration",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_37",
    "description": "To control unauthorized access to information systems, personal information, and critical information, organizations must establish and implement procedures for user registration, termination, and granting, changing, or revoking access rights, ensuring that access rights are granted only to the minimum necessary for work purposes. Additionally, when registering or granting user rights, it must be made clear to users that they are responsible for the security of their accounts.",
    "function_name": "iam_user_access_minimal_privilege",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_38",
    "description": "User accounts must be assigned unique identifiers that distinguish each user individually, and the use of easily guessable identifiers must be restricted. If the same identifier is shared by multiple users, the reason and justification must be reviewed, supplementary measures such as approval from a responsible party must be established, and accountability must be ensured.",
    "function_name": "iam_user_unique_identifier_enforcement",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_39",
    "description": "User access to information systems, personal information, and critical information must be secured through safe authentication procedures and, if necessary, enhanced authentication methods. In addition, access control measures such as limiting login attempts and issuing warnings for illegal login attempts must be established and implemented.",
    "function_name": "iam_user_access_secure_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_40",
    "description": "Procedures for managing passwords used by users of information systems, as well as customers and members, must be established and implemented, taking into account legal requirements and external threats.",
    "function_name": "iam_user_password_management_procedures",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_41",
    "description": "Accounts and privileges used for special purposes, such as managing information systems, personal information, and important information, should be granted minimally, separately identified, and controlled.",
    "function_name": "iam_service_accounts_minimal_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_42",
    "description": "The registration, use, and deletion of user accounts accessing information systems, personal information, and important information, as well as the history of granting, changing, and deleting access rights, should be recorded and periodically reviewed to ensure their appropriateness.",
    "function_name": "iam_user_account_activity_logging",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_43",
    "description": "In order to control unauthorized access to the network, management procedures such as IP management and device authentication must be established and implemented. Network segmentation (DMZ, server farm, DB zone, development zone, etc.) and access controls must be applied according to the business purpose and importance.",
    "function_name": "network_vpc_access_controls_enforced",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_44",
    "description": "The users, access restriction methods, and secure access means for accessing information systems such as servers and network systems must be defined and controlled.",
    "function_name": "iam_users_access_control_defined",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_45",
    "description": "Access rights to applications must be restricted according to the user's tasks and the importance of the accessed information, and criteria should be established to minimize exposure of unnecessary or sensitive information.",
    "function_name": "iam_roles_access_restriction",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_46",
    "description": "Identify the information stored and managed in the database, such as the table list, and establish and implement access control policies according to the importance of the information and the type of applications and users.",
    "function_name": "bigquery_tables_access_control_policies",
    "service_category": "BigQuery",
    "confidence": 9,
    "gcp_sdk_example": "bigquery_client.get_table(table_id='project.dataset.table')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_47",
    "description": "When using a wireless network, wireless network protection measures such as user authentication, encryption of transmitted and received data, and AP control must be applied. In addition, protection measures must be established and implemented to prevent unauthorized wireless network access, such as AD Hoc connections and the use of unauthorized APs.",
    "function_name": "network_vpc_wireless_security_measures",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_48",
    "description": "Managing information systems and handling personal information outside of protected areas is, in principle, prohibited. However, if remote access is allowed for unavoidable reasons such as telecommuting, incident response, or remote collaboration, protective measures must be established and implemented, including approval from responsible personnel, designation of access devices, setting access scope and duration, enhanced authentication, encrypted communication, and securing access devices (e.g., antivirus, patches).",
    "function_name": "network_vpc_remote_access_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_49",
    "description": "To prevent information leaks, malware infections, and intrusions into the internal network through the internet, policies must be established and implemented to restrict internet access or services (e.g., P2P, web hard drives, messengers) on key information systems, devices handling sensitive duties, and terminals processing personal information.",
    "function_name": "network_vpc_restrict_internet_access",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_50",
    "description": "To protect personal and important information, encryption policies that reflect legal requirements, such as encryption targets, encryption strength, and encryption usage policies, must be established. Encryption must be applied during the storage, transmission, and transfer of personal and important information.",
    "function_name": "storage_buckets_encryption_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_51",
    "description": "Establish and implement management procedures for the secure generation, use, storage, distribution, and destruction of cryptographic keys, and prepare recovery methods if necessary.",
    "function_name": "kms_keys_secure_management_procedures",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_52",
    "description": "When introducing, developing, or modifying information systems, security requirements such as legal requirements related to information protection and personal information protection, the latest security vulnerabilities, and secure coding methods must be defined and applied.",
    "function_name": "compute_instance_security_requirements_defined",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_53",
    "description": "To verify that an information system has been introduced or implemented according to predefined security requirements, review standards and procedures must be established and implemented to check compliance with legal requirements, the latest security vulnerabilities, secure coding implementation, and personal information impact assessment, and corrective measures must be taken for any identified issues.",
    "function_name": "security_command_center_compliance_standards_implementation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_54",
    "description": "Development and test systems must, in principle, be separated from production systems to reduce the risk of unauthorized access and changes to the production system.",
    "function_name": "compute_vm_environment_separation",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_55",
    "description": "In order to prevent the leakage of operational data during system testing, procedures for the creation, use, management, disposal, and technical protection measures of test data must be established and implemented.",
    "function_name": "storage_buckets_test_data_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_56",
    "description": "Source programs must be managed so that only authorized users can access them, and it is a principle that they should not be stored in the operational environment.",
    "function_name": "storage_objects_restrict_operational_access",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name').get_blob('object_name')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_57",
    "description": "When transitioning newly introduced, developed, or modified systems to the operational environment, the process must be controlled, and the executable code must be run according to test and user acceptance procedures.",
    "function_name": "compute_instance_transition_controlled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_58",
    "description": "Procedures must be established and implemented to manage all changes to assets related to information systems, and the impact on system performance and security must be analyzed before changes are made.",
    "function_name": "compute_assets_change_management",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_59",
    "description": "To ensure the availability of information systems, performance and capacity requirements must be defined, and the status must be continuously monitored. Procedures for detecting, recording, analyzing, recovering, and reporting in response to faults must be established and managed effectively.",
    "function_name": "monitoring_systems_performance_capacity_requirements",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_60",
    "description": "To maintain the availability and data integrity of the information system, procedures must be established and implemented regarding the backup targets, frequency, methods, storage locations, retention periods, and disaster recovery. Additionally, management must ensure timely recovery in case of incidents.",
    "function_name": "storage_buckets_backup_procedures",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_61",
    "description": "The organization must define the types of logs, retention periods, and retention methods for user access records, system logs, and privilege grant records for information systems such as servers, applications, security systems, and network systems, and must securely retain and manage them to prevent tampering, theft, or loss.",
    "function_name": "logging_user_access_logs_retention_defined",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_62",
    "description": "To ensure normal use of the information system and prevent misuse (unauthorized access, excessive queries, etc.) by users, log review criteria for access and usage must be established and inspected periodically, and post-event actions must be taken promptly if issues arise.",
    "function_name": "logging_access_usage_log_review_criteria",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'], filter='resource.type=\"gce_instance\"')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_63",
    "description": "To ensure the accuracy of logs and access records and provide reliable log analysis, the system time must be synchronized with a standard time and regularly maintained.",
    "function_name": "compute_instance_time_synchronized",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_64",
    "description": "To prevent the recovery or regeneration of personal and critical information during the reuse and disposal process, secure reuse and disposal procedures for information assets must be established and implemented.",
    "function_name": "storage_buckets_secure_disposal_procedures",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').delete(force=True)"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_65",
    "description": "For each type of security system, an administrator must be designated, and operational procedures such as updating to the latest policies, modifying rule sets, and monitoring events must be established and implemented. The status of policy application for each security system must be managed.",
    "function_name": "security_command_center_system_policy_management",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.organizations().sources().findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_66",
    "description": "When using cloud services, protection measures must be established and implemented for administrator access and security settings to prevent unauthorized access and configuration errors that could lead to the leakage or exposure of critical information and personal data, depending on the service type (SaaS, PaaS, IaaS, etc.).",
    "function_name": "iam_administrator_access_protection_measures",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/proj/roles/role')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_67",
    "description": "For servers exposed to external networks, protective measures must be established and implemented, including separating them from internal networks, conducting vulnerability assessments, access control, authentication, and establishing procedures for information collection, storage, and disclosure.",
    "function_name": "network_vpc_external_server_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_68",
    "description": "When providing electronic transaction and FinTech services, protection measures such as authentication and encryption must be established to prevent data leakage, data tampering, or fraud. The security of external systems, such as payment systems, must be checked when integrated.",
    "function_name": "network_payment_systems_authentication_encryption",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_69",
    "description": "When transmitting personal or critical information to other organizations, a secure transmission policy must be established, and agreements must be made between organizations regarding management responsibilities, transmission methods, and technical protection measures for personal and critical information.",
    "function_name": "network_vpc_secure_transmission_policy",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_70",
    "description": "When connecting devices such as PCs and mobile devices to the network for business purposes, access control measures such as device authentication, approval, access scope, and security settings must be established and periodically checked.",
    "function_name": "network_device_access_control_measures",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_71",
    "description": "Procedures must be established and implemented to prevent the leakage of personal or important information or infection by malware through removable media. Removable media containing personal or important information must be stored in a secure location.",
    "function_name": "storage_bucket_secure_removable_media_storage",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_72",
    "description": "To prevent security incidents due to vulnerabilities in software, operating systems, or security systems, the latest patches must be applied. However, if the application of the latest patches is difficult due to service impact considerations, alternative measures must be implemented.",
    "function_name": "compute_instance_latest_patches_applied",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_73",
    "description": "To protect personal and important information, information systems, and business terminals from malware such as viruses, worms, Trojans, and ransomware, prevention, detection, and response measures must be established and implemented.",
    "function_name": "compute_instance_malware_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_74",
    "description": "To prevent incidents such as security breaches and personal information leaks, and to respond quickly and effectively in the event of an incident, the organization must establish procedures for detecting, responding to, analyzing, and sharing internal and external intrusion attempts. In addition, the organization must establish a cooperative system with relevant external institutions and experts.",
    "function_name": "security_command_center_intrusion_detection_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/project-id/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_75",
    "description": "Regular vulnerability inspections must be conducted to verify whether information systems have exposed vulnerabilities, and any identified vulnerabilities must be promptly addressed. In addition, the organization must continuously monitor for new security vulnerabilities, assess their impact on the information systems, and take necessary actions.",
    "function_name": "security_command_center_vulnerability_monitoring",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/org_id/sources/source_id')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_76",
    "description": "To quickly detect and respond to intrusion attempts, personal information leakage attempts, and fraudulent activities from internal or external sources, the organization must collect and analyze network and data flows. Post-monitoring and inspection actions must be timely.",
    "function_name": "logging_network_flow_analysis",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'resource.type=\"gce_instance\" AND logName=\"projects/my-project/logs/compute.googleapis.com%2Fvpc_flows\"'})"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_77",
    "description": "The organization must conduct at least one simulation training per year based on scenarios to ensure that employees and stakeholders are familiar with the procedures for responding to security incidents and personal information leakage incidents. The response system must be improved based on the training results.",
    "function_name": "security_incident_response_training_annual_simulation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.runSimulation(project='proj', scenario='incident_response')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_78",
    "description": "When signs of or actual incidents of security breaches or personal information leakage are detected, the organization must comply with legal notification and reporting obligations, respond and recover promptly according to established procedures, and analyze the incident to establish preventive measures to reflect in the response system.",
    "function_name": "security_command_center_incident_response_procedures",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_79",
    "description": "Identify types of disasters that could threaten the operational continuity of the organization's core services and systems, such as natural disasters, communication or power failures, and hacking. Analyze the expected scale of damage and impact for each type, define the recovery time objective (RTO) and recovery point objective (RPO), and establish a disaster recovery system including recovery strategies, emergency recovery teams, emergency contact networks, and recovery procedures.",
    "function_name": "compute_disaster_recovery_plan_establishment",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_80",
    "description": "Regularly test the adequacy of the disaster recovery strategies and plans, and supplement the recovery strategies and plans based on test results, changes in the information system environment, and legal requirements.",
    "function_name": "compute_disaster_recovery_strategy_adequacy",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_81",
    "description": "Personal information must be collected and used lawfully and fairly. When collecting personal information based on the consent of the data subject, such consent must be obtained through legal means. Additionally, when collecting personal information from children under the age of 14, consent must be obtained from their legal representative, and it must be verified that such consent was given by the legal representative.",
    "function_name": "iam_policy_personal_info_consent_verification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_82",
    "description": "When collecting personal information, only the minimum amount of personal information necessary for the intended purpose may be collected, and the data subject must not be denied the provision of goods or services for refusing to consent to optional matters.",
    "function_name": "bigquery_datasets_minimal_personal_info_collection",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_83",
    "description": "Resident registration numbers may not be collected, used, or processed unless there is a legal basis for doing so. Even when the processing of resident registration numbers is permitted, alternative methods must be provided, such as through an internet website.",
    "function_name": "bigquery_tables_resident_registration_number_restriction",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_ref)"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_84",
    "description": "In order to process sensitive information and unique identifying information (excluding resident registration numbers), separate consent from the data subject must be obtained unless the processing is specifically required or permitted by law.",
    "function_name": "bigquery_datasets_consent_management",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='my_dataset')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_85",
    "description": "When collecting personal information from sources other than the data subject or when receiving personal information from a third party, only the minimum amount of personal information necessary for the task should be collected or received. If there is a legal basis or at the request of the data subject, the source of the personal information, the purpose of processing, and the right to request a suspension of processing must be disclosed.",
    "function_name": "bigquery_tables_minimal_personal_info_collection",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_table(table_id='dataset.table')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_86",
    "description": "When installing and operating fixed video information processing devices in public places or operating mobile video information processing devices in public places for business purposes, legal requirements must be followed according to the purpose and location of the installation, and appropriate protection measures must be established and implemented.",
    "function_name": "compute_instance_video_device_compliance",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_87",
    "description": "When collecting and using personal information for marketing purposes, such as promoting goods or services, sales recommendations, or sending advertising information, the purpose must be clearly communicated to the data subject, and their consent must be obtained.",
    "function_name": "iam_policy_personal_info_consent_obtained",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_88",
    "description": "The items, volume, purpose and method of processing, and retention period of collected and retained personal information must be regularly managed. In the case of public institutions, such information must be registered with the head of the relevant agency as stipulated by law.",
    "function_name": "storage_buckets_personal_info_management",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_89",
    "description": "Collected personal information must be managed to ensure its accuracy, completeness, and up-to-dateness within the scope necessary for the processing purpose, and procedures must be provided to data subjects to manage their information.",
    "function_name": "bigquery_datasets_personal_info_accuracy_management",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset_id')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_90",
    "description": "When accessing information stored on the user's mobile device or functions installed on the mobile device, it is necessary to notify the user clearly and obtain their consent.",
    "function_name": "security_mobile_access_consent_notification",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.mobileAccess().notifyConsent(user_id='user', device_id='device')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_91",
    "description": "Personal information must only be used or provided within the scope notified and consented to by the data subject at the time of collection or as permitted by law. If personal information is to be used or provided beyond this scope, additional consent must be obtained from the data subject or the legality must be verified, and appropriate protective measures must be established and implemented.",
    "function_name": "iam_policy_personal_info_usage_scope",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_92",
    "description": "When processing pseudonymized information, legal requirements such as purpose limitation, combination restrictions, safety measures, and prohibition obligations must be met, and procedures must be established and implemented to ensure an appropriate level of pseudonymization.",
    "function_name": "bigquery_datasets_pseudonymization_procedures_implemented",
    "service_category": "BigQuery",
    "confidence": 8,
    "gcp_sdk_example": "bigquery_client.get_dataset(dataset_id='dataset')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_93",
    "description": "When providing personal information to third parties, there must be a legal basis or consent from the data subject, and protection measures must be established and implemented to securely protect personal information during the process of providing access to third parties.",
    "function_name": "iam_roles_personal_info_third_party_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_94",
    "description": "When outsourcing personal information processing tasks to third parties, the details of the outsourced tasks and the trustee must be disclosed. Additionally, if the task involves promoting or selling goods or services, the details of the outsourced task and the trustee must be notified to the data subject.",
    "function_name": "iam_service_account_disclosure_third_party_outsourcing",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_95",
    "description": "When transferring or receiving personal information due to business transfers or mergers, appropriate protection measures such as notifying the data subjects must be established and implemented.",
    "function_name": "iam_personal_information_protection_measures",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/proj/roles/role')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_96",
    "description": "When transferring personal information abroad, appropriate protective measures such as obtaining consent and disclosing relevant details about the transfer must be established and implemented.",
    "function_name": "iam_service_account_personal_info_protection",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_97",
    "description": "The organization must establish an internal policy regarding retention periods and destruction of personal information. When the retention period has expired or the purpose of processing has been achieved, personal information must be destroyed without delay using methods that ensure safety and completeness.",
    "function_name": "storage_objects_retention_policy_enforced",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_98",
    "description": "If personal information is retained beyond the retention period or after the purpose of processing has been achieved, as permitted by relevant laws, it must be limited to the minimum necessary items and stored separately from other personal information.",
    "function_name": "storage_objects_separate_personal_information",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.list_blobs(bucket_name, prefix='personal_info/')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_99",
    "description": "A privacy policy must be established to include all necessary information, such as the purpose of personal information processing, in a way that is easy for data subjects to understand. The policy must be disclosed through appropriate methods so that data subjects can easily access it at any time, and it must be continuously updated.",
    "function_name": "iam_policy_privacy_policy_established",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_100",
    "description": "Procedures must be established and implemented to ensure that data subjects can easily exercise their rights, such as requesting access, rectification, deletion, suspension of processing, objection, or withdrawal of consent, through simpler processes than those used for collecting their information. When a request is received, it must be processed without delay, and records must be kept. Measures such as deletion requests and temporary actions must be taken to prevent the distribution of information that infringes on the rights of others, such as invasion of privacy or defamation.",
    "function_name": "storage_objects_data_subject_rights_management",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.objects().get(bucket='bucket_name', object='object_name')"
  },
  {
    "sheet": "kisa_isms",
    "rule_id": "kisa_isms_101",
    "description": "The organization must identify matters that must be notified to data subjects, such as the use and provision of personal information, and periodically inform the data subjects of these matters.",
    "function_name": "iam_service_accounts_data_subject_notification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_1",
    "description": "Conduct an accurate and thorough assessment of the potential risks and vulnerabilities to the confidentiality, integrity, and availability of electronic protected health information held by the covered entity or business associate.",
    "function_name": "security_command_center_ephemeral_risk_assessment",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/my-project')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_2",
    "description": "Implement security measures sufficient to reduce risks and vulnerabilities to a reasonable and appropriate level to comply with 164.306(a): Ensure the confidentiality, integrity, and availability of all electronic protected health information the covered entity or business associate creates, receives, maintains, or transmits.",
    "function_name": "storage_bucket_ephemeral_encryption",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_3",
    "description": "Implement procedures to regularly review records of information system activity, such as audit logs, access reports, and security incident tracking reports.",
    "function_name": "logging_audit_logs_regular_review",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\"'})"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_4",
    "description": "Implement policies and procedures to ensure that all members of its workforce have appropriate access to electronic protected health information, as provided under paragraph (a)(4) of this section, and to prevent those workforce members who do not have access under paragraph (a)(4) of this section from obtaining access to electronic protected health information.",
    "function_name": "iam_roles_appropriate_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/project-id')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_5",
    "description": "Implement procedures for the authorization and/or supervision of workforce members who work with electronic protected health information or in locations where it might be accessed.",
    "function_name": "iam_service_accounts_authorization_procedures",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_6",
    "description": "Implement procedures to determine that the access of a workforce member to electronic protected health information is appropriate.",
    "function_name": "iam_service_account_access_appropriateness",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_7",
    "description": "Implement procedures for terminating access to electronic protected health information when the employment of, or other arrangement with, a workforce member ends or as required by determinations made as specified in paragraph (a)(3)(ii)(b).",
    "function_name": "iam_service_account_access_termination",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().delete(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_8",
    "description": "Implement policies and procedures for authorizing access to electronic protected health information that are consistent with the applicable requirements of subpart E of this part.",
    "function_name": "iam_policies_authorize_ephi_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_9",
    "description": "If a health care clearinghouse is part of a larger organization, the clearinghouse must implement policies and procedures that protect the electronic protected health information of the clearinghouse from unauthorized access by the larger organization.",
    "function_name": "iam_policies_protect_ephi_from_unauthorized_access",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_10",
    "description": "Implement policies and procedures for granting access to electronic protected health information, As one illustrative example, through access to a workstation, transaction, program, process, or other mechanism.",
    "function_name": "iam_service_account_access_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().getIamPolicy(resource='projects/my-project/serviceAccounts/my-service-account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_11",
    "description": "Implement policies and procedures that, based upon the covered entity's or the business associate's access authorization policies, establish, document, review, and modify a user's right of access to a workstation, transaction, program, or process.",
    "function_name": "iam_user_access_rights_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_12",
    "description": "Procedures for guarding against, detecting, and reporting malicious software.",
    "function_name": "compute_instance_malware_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_13",
    "description": "Procedures for monitoring log-in attempts and reporting discrepancies.",
    "function_name": "logging_login_attempts_monitoring",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\" AND protoPayload.methodName=\"google.cloud.audit.log.v1.Authentication\"'})"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_14",
    "description": "Procedures for creating, changing, and safeguarding passwords.",
    "function_name": "iam_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_15",
    "description": "Implement policies and procedures to address security incidents.",
    "function_name": "security_command_center_incident_response_policies",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().getSecurityHealthAnalyticsSettings(name='projects/project-id/securityHealthAnalyticsSettings')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_16",
    "description": "Identify and respond to suspected or known security incidents; mitigate, to the extent practicable, harmful effects of security incidents that are known to the covered entity or business associate; and document security incidents and their outcomes.",
    "function_name": "security_command_center_incidents_documentation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().sources().findings().list(parent='projects/project_id/sources/source_id')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_17",
    "description": "Establish (and implement as needed) policies and procedures for responding to an emergency or other occurrence (for example, fire, vandalism, system failure, and natural disaster) that damages systems that contain electronic protected health information.",
    "function_name": "compute_engine_vm_emergency_response_policies",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_18",
    "description": "Establish and implement procedures to create and maintain retrievable exact copies of electronic protected health information.",
    "function_name": "storage_buckets_maintain_retrievable_copies",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_blob('blob_name')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_19",
    "description": "Establish (and implement as needed) procedures to restore any loss of data.",
    "function_name": "storage_buckets_data_restoration_procedures",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_20",
    "description": "Establish (and implement as needed) procedures to enable continuation of critical business processes for protection of the security of electronic protected health information while operating in emergency mode.",
    "function_name": "compute_engine_vm_emergency_mode_protection",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_21",
    "description": "Perform a periodic technical and nontechnical evaluation, based initially upon the standards implemented under this rule and subsequently, in response to environmental or operational changes affecting the security of electronic protected health information, that establishes the extent to which an entity's security policies and procedures meet the requirements of this subpart.",
    "function_name": "security_command_center_ephemeral_evaluation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().assets().list(parent='projects/my-project/locations/global')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_22",
    "description": "Implement technical policies and procedures for electronic information systems that maintain electronic protected health information to allow access only to those persons or software programs that have been granted access rights as specified in 164.308(a)(4).",
    "function_name": "iam_service_accounts_access_control",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_23",
    "description": "Assign a unique name and/or number for identifying and tracking user identity.",
    "function_name": "iam_user_identity_unique_identifier",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_24",
    "description": "Establish (and implement as needed) procedures for obtaining necessary electronic protected health information during an emergency.",
    "function_name": "storage_bucket_ephemeral_access_procedure",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name)"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_25",
    "description": "Implement a mechanism to encrypt and decrypt electronic protected health information.",
    "function_name": "kms_keys_encrypt_decrypt_ephi",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().encrypt(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key', body={'plaintext': 'data'})"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_26",
    "description": "Implement hardware, software, and/or procedural mechanisms that record and examine activity in information systems that contain or use electronic protected health information.",
    "function_name": "logging_information_system_activity_recording",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_27",
    "description": "Implement policies and procedures to protect electronic protected health information from improper alteration or destruction.",
    "function_name": "storage_buckets_protect_ephi",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket('bucket_name')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_28",
    "description": "Implement electronic mechanisms to corroborate that electronic protected health information has not been altered or destroyed in an unauthorized manner.",
    "function_name": "storage_bucket_integrity_ensured",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).get_iam_policy()"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_29",
    "description": "Implement procedures to verify that a person or entity seeking access to electronic protected health information is the one claimed.",
    "function_name": "iam_entity_access_verification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_30",
    "description": "Implement technical security measures to guard against unauthorized access to electronic protected health information that is being transmitted over an electronic communications network.",
    "function_name": "network_vpc_encryption_enabled",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_31",
    "description": "Implement security measures to ensure that electronically transmitted electronic protected health information is not improperly modified without detection until disposed of.",
    "function_name": "storage_bucket_integrity_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "hipaa_aws",
    "rule_id": "hipaa_aws_32",
    "description": "Implement a mechanism to encrypt electronic protected health information whenever deemed appropriate.",
    "function_name": "kms_keys_encrypt_ephi",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().encrypt(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key', body={'plaintext': 'data'})"
  },
  {
    "sheet": "last",
    "rule_id": "last_1",
    "description": "UCBs should maintain an up-to-date business IT Asset Inventory Register containing the following fields, as a minimum: a) Details of the IT Asset (viz., hardware/software/network devices, key personnel, services, etc.), b. Details of systems where customer data are stored, c. Associated business applications, if any, d. Criticality of the IT asset (For example, High/Medium/Low).",
    "function_name": "compute_vm_maintain_it_asset_inventory",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "last",
    "rule_id": "last_2",
    "description": "Appropriately manage and provide protection within and outside UCB/network, keeping in mind how the data/information is stored, transmitted, processed, accessed and put to use within/outside the UCB’s network, and level of risk they are exposed to depending on the sensitivity of the data/information.",
    "function_name": "network_vpc_data_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "last",
    "rule_id": "last_3",
    "description": "The firewall configurations should be set to the highest security level and evaluation of critical device (such as firewall, network switches, security devices, etc.) configurations should be done periodically.",
    "function_name": "network_firewall_high_security_configuration",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().get(project='proj', firewall='firewall')"
  },
  {
    "sheet": "last",
    "rule_id": "last_4",
    "description": "Put in place systems and processes to identify, track, manage and monitor the status of patches to servers, operating system and application software running at the systems used by the UCB officials (end-users). Implement and update antivirus protection for all servers and applicable end points preferably through a centralised system.",
    "function_name": "compute_instances_patch_management_system",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_5",
    "description": "Disallow administrative rights on end-user workstations/PCs/laptops and provide access rights on a ‘need to know’ and ‘need to do’ basis.",
    "function_name": "iam_roles_least_privilege_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_6",
    "description": "Passwords should be set as complex and lengthy and users should not use same passwords for all the applications/systems/devices.",
    "function_name": "iam_user_password_complexity_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_7",
    "description": "Remote Desktop Protocol (RDP) which allows others to access the computer remotely over a network or over the internet should be always disabled and should be enabled only with the approval of the authorised officer of the UCB. Logs for such remote access shall be enabled and monitored for suspicious activities.",
    "function_name": "compute_instance_rdp_disabled",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_8",
    "description": "Implement appropriate (e.g. centralised) systems and controls to allow, manage, log and monitor privileged/super user/administrative access to critical systems (servers/databases, applications, network devices etc.)",
    "function_name": "iam_roles_privileged_access_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_9",
    "description": "Take periodic back up of the important data and store this data ‘off line’ (i.e., transferring important files to a storage device that can be detached from a computer/system after copying all the files).",
    "function_name": "storage_objects_offline_backup",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.copy_blob(source_blob, destination_bucket, destination_blob_name)"
  },
  {
    "sheet": "last",
    "rule_id": "last_10",
    "description": "The organization employs automated mechanisms to support the management of information system accounts.",
    "function_name": "iam_service_accounts_automated_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_11",
    "description": "The information system automatically audits account creation, modification, enabling, disabling, and removal actions, and notifies [Assignment: organization-defined personnel or roles].",
    "function_name": "iam_account_audit_notifications",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_12",
    "description": "The organization: a. Monitors information system accounts for [Assignment: organization-defined atypical use].",
    "function_name": "iam_accounts_monitor_atypical_use",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_13",
    "description": "The organization: f. Creates, enables, modifies, disables, and removes information system accounts in accordance with [Assignment: organization-defined procedures or conditions].",
    "function_name": "iam_service_accounts_procedural_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_14",
    "description": "The organization: g. Monitors the use of information system accounts.",
    "function_name": "iam_accounts_usage_monitoring",
    "service_category": "IAM",
    "confidence": 9,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_15",
    "description": "The organization: j. Reviews accounts for compliance with account management requirements [Assignment: organization-defined frequency].",
    "function_name": "iam_accounts_compliance_review",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_16",
    "description": "The information system automatically disables inactive accounts after 90 days for user accounts.",
    "function_name": "iam_user_accounts_disable_inactive_after_90_days",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_17",
    "description": "The information system enforces approved authorizations for logical access to information and system resources in accordance with applicable access control policies.",
    "function_name": "iam_service_accounts_enforce_access_policies",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_18",
    "description": "The information system enforces approved authorizations for controlling the flow of information within the system and between interconnected systems based on organization-defined information flow control policies.",
    "function_name": "network_vpc_enforce_information_flow_control",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='vpc')"
  },
  {
    "sheet": "last",
    "rule_id": "last_19",
    "description": "The organization: c. Defines information system access authorizations to support separation of duties.",
    "function_name": "iam_roles_define_separation_of_duties",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "last",
    "rule_id": "last_20",
    "description": "The information system prevents non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.",
    "function_name": "iam_roles_prevent_privileged_function_execution",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_21",
    "description": "The organization employs the principle of least privilege, allowing only authorized accesses for users (or processes acting on behalf of users) which are necessary to accomplish assigned tasks in accordance with organizational missions and business functions.",
    "function_name": "iam_user_least_privilege_enforced",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_22",
    "description": "The information system monitors and controls remote access methods.",
    "function_name": "network_vpc_remote_access_control",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_23",
    "description": "The information system implements cryptographic mechanisms to protect the confidentiality and integrity of remote access sessions.",
    "function_name": "compute_instance_cryptographic_protection_remote_access",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_24",
    "description": "The organization: b. Employs [Assignment: organization-defined automated mechanisms or manual processes] to assist users in making information sharing/collaboration decisions.",
    "function_name": "iam_policy_information_sharing_mechanisms",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "last",
    "rule_id": "last_25",
    "description": "The organization: a. Determines that the information system is capable of auditing the following events: Successful and unsuccessful account logon events, account management events, object access, policy change, privilege functions, process tracking, and system events. For Web applications: all administrator activity, authentication checks, authorization checks, data deletions, data access, data changes, and permission changes. d. Determines that the following events are to be audited within the information system: [organization-defined subset of the auditable events defined in AU-2 a to be audited continually for each identified event].",
    "function_name": "logging_audit_events_configuration",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_26",
    "description": "The information system generates audit records containing information that establishes what type of event occurred, when the event occurred, where the event occurred, the source of the event, the outcome of the event, and the identity of any individuals or subjects associated with the event.",
    "function_name": "logging_auditlogs_event_details",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\"'})"
  },
  {
    "sheet": "last",
    "rule_id": "last_27",
    "description": "(1) The organization employs automated mechanisms to integrate audit review, analysis, and reporting processes to support organizational processes for investigation and response to suspicious activities. (3) The organization analyzes and correlates audit records across different repositories to gain organization-wide situational awareness.",
    "function_name": "logging_audit_integration_organization_wide_awareness",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "last",
    "rule_id": "last_28",
    "description": "The information system provides the capability to process audit records for events of interest based on [Assignment: organization-defined audit fields within audit records].",
    "function_name": "logging_audit_records_processing_capability",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(body={'resourceNames': ['projects/my-project'], 'filter': 'logName=\"projects/my-project/logs/cloudaudit.googleapis.com%2Factivity\"'})"
  },
  {
    "sheet": "last",
    "rule_id": "last_29",
    "description": "The information system backs up audit records at least weekly onto a physically different system or system component than the system or component being audited.",
    "function_name": "logging_audit_records_weekly_backup",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "last",
    "rule_id": "last_30",
    "description": "The information system protects audit information and audit tools from unauthorized access, modification, and deletion.",
    "function_name": "logging_audit_protection_enforced",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "last",
    "rule_id": "last_31",
    "description": "The organization retains audit records for at least 90 days to provide support for after-the-fact investigations of security incidents and to meet regulatory and organizational information retention requirements.",
    "function_name": "logging_audit_logs_retention_90_days",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().sinks().get(projectName='proj', sinkName='sink')"
  },
  {
    "sheet": "last",
    "rule_id": "last_32",
    "description": "The information system: a. Provides audit record generation capability for the auditable events defined in AU-2 a. at all information system and network components where audit capability is deployed/available c. Generates audit records for the events defined in AU-2 d. with the content defined in AU-3.",
    "function_name": "logging_audit_log_generation_enabled",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_33",
    "description": "The organization develops a continuous monitoring strategy and implements a continuous monitoring program that includes: a. Establishment of [Assignment: organization-defined metrics] to be monitored; b. Establishment of [Assignment: organization-defined frequencies] for monitoring and [Assignment: organization-defined frequencies] for assessments supporting such monitoring.",
    "function_name": "monitoring_continuous_monitoring_strategy_implementation",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/my-project', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"', interval=interval)"
  },
  {
    "sheet": "last",
    "rule_id": "last_34",
    "description": "The organization develops, documents, and maintains under configuration control, a current baseline configuration of the information system.",
    "function_name": "compute_instance_baseline_configuration_maintained",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_35",
    "description": "The organization: a. Configures the information system to provide only essential capabilities.",
    "function_name": "compute_instance_minimal_capabilities",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_36",
    "description": "The organization updates the inventory of information system components as an integral part of component installations, removals, and information system updates.",
    "function_name": "compute_instance_inventory_update",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "last",
    "rule_id": "last_37",
    "description": "The organization: a. Employs automated mechanisms continuously, using automated mechanisms with a maximum five-minute delay in detection, to detect the presence of unauthorized hardware, software, and firmware components within the information system",
    "function_name": "security_command_center_unauthorized_component_detection",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/org_id/sources/source_id')"
  },
  {
    "sheet": "last",
    "rule_id": "last_38",
    "description": "The organization: b. Conducts backups of system-level information contained in the information system (daily incremental; weekly full).",
    "function_name": "compute_disks_backup_schedule",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.disks().createSnapshot(project='proj', zone='zone', disk='disk')"
  },
  {
    "sheet": "last",
    "rule_id": "last_39",
    "description": "The organization provides for the recovery and reconstitution of the information system to a known state after a disruption, compromise, or failure.",
    "function_name": "compute_instance_recovery_known_state",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_40",
    "description": "(1) The information system implements multifactor authentication for network access to privileged accounts. (2) The information system implements multifactor authentication for network access to non- privileged accounts.",
    "function_name": "iam_accounts_multifactor_authentication_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/-/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_41",
    "description": "The information system implements multi-factor authentication for network access to privileged accounts.",
    "function_name": "iam_privileged_accounts_mfa_enabled",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_42",
    "description": "The information system uniquely identifies and authenticates organizational users (or processes acting on behalf of organizational users).",
    "function_name": "iam_user_unique_identification_authentication",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_43",
    "description": "The information system, for password-based authentication: a. Enforces minimum password complexity of [Assignment: organization-defined requirements for case sensitivity, number of characters, mix of upper-case letters, lower-case letters, numbers, and special characters, including minimum requirements for each type]; d. Enforces password minimum and maximum lifetime restrictions of [Assignment: organization- defined numbers for lifetime minimum, lifetime maximum]; e. Prohibits password reuse for 24 generations",
    "function_name": "iam_password_policy_enforcement",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().getIamPolicy(resource='projects/my-project')"
  },
  {
    "sheet": "last",
    "rule_id": "last_44",
    "description": "The organization employs automated tools to determine if password authenticators are sufficiently strong to satisfy [Assignment: organization-defined requirements].",
    "function_name": "iam_password_authenticator_strength",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_45",
    "description": "The organization ensures that unencrypted static authenticators are not embedded in applications or access scripts or stored on function keys.",
    "function_name": "iam_service_accounts_no_unencrypted_authenticators",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_46",
    "description": "The organization employs automated mechanisms to support the incident handling process.",
    "function_name": "security_command_center_incident_handling_automation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "last",
    "rule_id": "last_47",
    "description": "The organization employs automated mechanisms to support the incident handling process.",
    "function_name": "security_command_center_incident_handling_automation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "last",
    "rule_id": "last_48",
    "description": "The organization employs automated mechanisms to assist in the reporting of security incidents.",
    "function_name": "security_command_center_incident_reporting_automation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.projects().locations().clusters().get(name='projects/proj/locations/global/clusters/cluster')"
  },
  {
    "sheet": "last",
    "rule_id": "last_49",
    "description": "The organization employs automated mechanisms to increase the availability of incident response-related information and support.",
    "function_name": "logging_incident_response_automation",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'])"
  },
  {
    "sheet": "last",
    "rule_id": "last_50",
    "description": "Scan for system vulnerabilities. Share vulnerability information and security controls that eliminate vulnerabilities.",
    "function_name": "security_command_center_vulnerabilities_shared",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.findings().list(parent='organizations/123/sources/456')"
  },
  {
    "sheet": "last",
    "rule_id": "last_51",
    "description": "The organization: a. Manages the information system using [Assignment: organization-defined system development life cycle] that incorporates information security considerations.",
    "function_name": "iam_system_development_lifecycle_security_incorporation",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().roles().list(parent='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_52",
    "description": "The organization requires the developer of the information system, system component, or information system service to: a. Perform configuration management during system, component, or service [Selection (one or more): design; development; implementation; operation]; b. Document, manage, and control the integrity of changes to [Assignment: organization-defined configuration items under configuration management]; c. Implement only organization-approved changes to the system, component, or service; d. Document approved changes to the system, component, or service and the potential security impacts of such changes; and e. Track security flaws and flaw resolution within the system, component, or service and report findings to [Assignment: organization-defined personnel].",
    "function_name": "compute_instance_configuration_management",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_53",
    "description": "The information system separates user functionality (including user interface services) from information system management functionality.",
    "function_name": "iam_roles_separate_user_management",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().list(parent='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_54",
    "description": "The information system prevents unauthorized and unintended information transfer via shared system resources.",
    "function_name": "compute_vm_prevent_unauthorized_info_transfer",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_55",
    "description": "The information system protects against or limits the effects of the following types of denial of service attacks: [Assignment: organization-defined types of denial of service attacks or references to sources for such information] by employing [Assignment: organization-defined security safeguards].",
    "function_name": "network_vpc_dos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_56",
    "description": "The organization limits the number of external network connections to the information system.",
    "function_name": "network_vpc_limit_external_connections",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_57",
    "description": "The information system: a. Monitors and controls communications at the external boundary of the system and at key internal boundaries within the system; b. Implements subnetworks for publicly accessible system components that are [Selection: physically; logically] separated from internal organizational networks; and c. Connects to external networks or information systems only through managed interfaces consisting of boundary protection devices arranged in accordance with an organizational security architecture.",
    "function_name": "network_vpc_boundary_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_58",
    "description": "The information system implements cryptographic mechanisms to [Selection (one or more): prevent unauthorized disclosure of information; detect changes to information] during transmission unless otherwise protected by [Assignment: organization-defined alternative physical safeguards].",
    "function_name": "network_transmission_encryption_ensure",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_59",
    "description": "The information system protects the confidentiality AND integrity of transmitted information.",
    "function_name": "network_vpc_transmission_confidentiality_integrity",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_60",
    "description": "The organization establishes and manages cryptographic keys for required cryptography employed within the information system in accordance with [Assignment: organization-defined requirements for key generation, distribution, storage, access, and destruction].",
    "function_name": "kms_keys_management_compliance",
    "service_category": "Security",
    "confidence": 9,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "last",
    "rule_id": "last_61",
    "description": "The information system implements FIPS-validated or NSA-approved cryptography in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.",
    "function_name": "kms_keys_fips_validated_cryptography",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "last",
    "rule_id": "last_62",
    "description": "The information system protects the authenticity of communications sessions.",
    "function_name": "network_vpc_session_authenticity_protected",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.networks().get(project='proj', network='network')"
  },
  {
    "sheet": "last",
    "rule_id": "last_63",
    "description": "The information system protects the confidentiality AND integrity of [Assignment: organization-defined information at rest].",
    "function_name": "storage_bucket_encryption_enabled",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.get_bucket(bucket_name).encryption"
  },
  {
    "sheet": "last",
    "rule_id": "last_64",
    "description": "The organization employs automated mechanisms at least monthly to determine the state of information system components with regard to flaw remediation.",
    "function_name": "compute_instances_flaw_remediation_state",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_65",
    "description": "The organization connects and configures individual intrusion detection tools into an information system-wide intrusion detection system.",
    "function_name": "network_intrusion_detection_system_configuration",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_66",
    "description": "The organization correlates information from monitoring tools employed throughout the information system.",
    "function_name": "monitoring_system_information_correlation",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/cpu/utilization\"')"
  },
  {
    "sheet": "last",
    "rule_id": "last_67",
    "description": "The organization employs automated tools to support near real-time analysis of events.",
    "function_name": "logging_events_real_time_analysis",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'], filter='resource.type=gae_app')"
  },
  {
    "sheet": "last",
    "rule_id": "last_68",
    "description": "The information system monitors inbound and outbound communications traffic continuously for unusual or unauthorized activities or conditions.",
    "function_name": "network_traffic_monitoring_unusual_activity",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"compute.googleapis.com/instance/network/received_bytes_count\"', interval={'startTime': '2023-10-01T00:00:00Z', 'endTime': '2023-10-02T00:00:00Z'})"
  },
  {
    "sheet": "last",
    "rule_id": "last_69",
    "description": "The information system alerts organization-defined personnel or roles when the following indications of compromise or potential compromise occur: [Assignment: organization-defined compromise indicators].",
    "function_name": "monitoring_alerts_compromise_indicators",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.alertPolicies().list(name='projects/proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_70",
    "description": "The organization: a. Monitors the information system to detect: 1. Attacks and indicators of potential attacks in accordance with [Assignment: organization- defined monitoring objectives]; and 2. Unauthorized local, network, and remote connections; b. Identifies unauthorized use of the information system through [Assignment: organization- defined techniques and methods]; c. Deploys monitoring devices: i. strategically within the information system to collect organization-determined essential information; and (ii) at ad hoc locations within the system to track specific types of transactions of interest to the organization.",
    "function_name": "monitoring_system_attack_detection",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().alertPolicies().list(name='projects/my-project')"
  },
  {
    "sheet": "last",
    "rule_id": "last_71",
    "description": "The information system performs an integrity check of security relevant events at least monthly.",
    "function_name": "logging_events_integrity_check_monthly",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['proj'], filter='resource.type=\"gce_instance\"')"
  },
  {
    "sheet": "last",
    "rule_id": "last_72",
    "description": "The organization employs integrity verification tools to detect unauthorized changes to [Assignment: organization-defined software, firmware, and information].",
    "function_name": "compute_instance_integrity_verification",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_73",
    "description": "The organization handles and retains information within the information system and information output from the system in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and operational requirements.",
    "function_name": "storage_objects_retention_compliance",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "last",
    "rule_id": "last_74",
    "description": "Manage system accounts, group memberships, privileges, workflow, notifications, deactivations, and authorizations.",
    "function_name": "iam_service_accounts_manage_privileges",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_75",
    "description": "The information system enforces approved authorizations for logical access to information and system resources in accordance with applicable access control policies.",
    "function_name": "iam_service_account_enforce_authorizations",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_76",
    "description": "Authorize remote access systems prior to connection. Enforce remote connection requirements to information systems.",
    "function_name": "compute_instance_remote_access_authorized",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_77",
    "description": "The organization: a. Determines that the information system is capable of auditing the following events: [Assignment: organization-defined auditable events]; b. Coordinates the security audit function with other organizational entities requiring audit- related information to enhance mutual support and to help guide the selection of auditable events; c. Provides a rationale for why the auditable events are deemed to be adequate support after- the-fact investigations of security incidents",
    "function_name": "logging_audit_events_configuration",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.list_log_entries(resource_names=['projects/my-project'])"
  },
  {
    "sheet": "last",
    "rule_id": "last_78",
    "description": "The information system protects audit information and audit tools from unauthorized access, modification, and deletion.",
    "function_name": "logging_audit_protection",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.entries().list(projects=['my-project'])"
  },
  {
    "sheet": "last",
    "rule_id": "last_79",
    "description": "The organization retains audit records for at least 90 days to provide support for after-the-fact investigations of security incidents and to meet regulatory and organizational information retention requirements.",
    "function_name": "logging_audit_logs_retention_90_days",
    "service_category": "Logging",
    "confidence": 8,
    "gcp_sdk_example": "logging_client.projects().logs().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_80",
    "description": "Continuously monitor configuration management processes. Determine security impact, environment and operational risks.",
    "function_name": "monitoring_configuration_management_continuous_monitoring",
    "service_category": "Monitoring",
    "confidence": 8,
    "gcp_sdk_example": "monitoring_client.projects().timeSeries().list(name='projects/proj', filter='metric.type=\"monitoring.googleapis.com/uptime_check/check_passed\"')"
  },
  {
    "sheet": "last",
    "rule_id": "last_81",
    "description": "The organization develops, documents, and maintains under configuration control, a current baseline configuration of the information system.",
    "function_name": "compute_instance_baseline_configuration_maintained",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().get(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_82",
    "description": "The organization develops and documents an inventory of information system components that accurately reflects the current information system, includes all components within the authorization boundary of the information system, is at the level of granularity deemed necessary for tracking and reporting and reviews and updates the information system component inventory.",
    "function_name": "compute_instance_inventory_documented",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().list(project='proj', zone='zone')"
  },
  {
    "sheet": "last",
    "rule_id": "last_83",
    "description": "The organization conducts backups of user-level information, system-level information and information system documentation including security-related documentation contained in the information system and protects the confidentiality, integrity, and availability of backup information at storage locations.",
    "function_name": "storage_buckets_backup_protection",
    "service_category": "Storage",
    "confidence": 8,
    "gcp_sdk_example": "storage_client.bucket('bucket_name').get_iam_policy()"
  },
  {
    "sheet": "last",
    "rule_id": "last_84",
    "description": "The organization provides for the recovery and reconstitution of the information system to a known state after a disruption, compromise, or failure.",
    "function_name": "compute_instance_recovery_to_known_state",
    "service_category": "Compute",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.instances().reset(project='proj', zone='zone', instance='vm')"
  },
  {
    "sheet": "last",
    "rule_id": "last_85",
    "description": "The information system uniquely identifies and authenticates organizational users (or processes acting on behalf of organizational users).",
    "function_name": "iam_user_unique_identification",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.projects().serviceAccounts().get(name='projects/proj/serviceAccounts/account')"
  },
  {
    "sheet": "last",
    "rule_id": "last_86",
    "description": "The organization implements an incident handling capability for security incidents that includes preparation, detection and analysis, containment, eradication, and recovery, coordinates incident handling activities with contingency planning activities and incorporates lessons learned from ongoing incident handling activities into incident response procedures, training, and testing, and implements the resulting changes accordingly.",
    "function_name": "security_incident_handling_capability_implementation",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "security_client.incidents().list(parent='organizations/123456')"
  },
  {
    "sheet": "last",
    "rule_id": "last_87",
    "description": "The organization manages the information system using organization-defined system development life cycle, defines and documents information security roles and responsibilities throughout the system development life cycle, identifies individuals having information security roles and responsibilities and integrates the organizational information security risk management process into system development life cycle activities.",
    "function_name": "iam_roles_define_security_responsibilities",
    "service_category": "IAM",
    "confidence": 8,
    "gcp_sdk_example": "iam_client.roles().get(name='projects/project-id/roles/role-id')"
  },
  {
    "sheet": "last",
    "rule_id": "last_88",
    "description": "The information system protects against or limits the effects of the following types of denial of service attacks: [Assignment: organization-defined types of denial of service attacks or references to sources for such information] by employing [Assignment: organization-defined security safeguards].",
    "function_name": "network_vpc_dos_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "compute_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_89",
    "description": "The information system: a. Monitors and controls communications at the external boundary of the system and at key internal boundaries within the system; b. Implements subnetworks for publicly accessible system components that are [Selection: physically; logically] separated from internal organizational networks; and c. Connects to external networks or information systems only through managed interfaces consisting of boundary protection devices arranged in accordance with an organizational security architecture.",
    "function_name": "network_vpc_boundary_protection",
    "service_category": "Network",
    "confidence": 8,
    "gcp_sdk_example": "network_client.firewalls().list(project='proj')"
  },
  {
    "sheet": "last",
    "rule_id": "last_90",
    "description": "The organization establishes and manages cryptographic keys for required cryptography employed within the information system in accordance with [Assignment: organization-defined requirements for key generation, distribution, storage, access, and destruction].",
    "function_name": "kms_keys_management_organization_defined",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "last",
    "rule_id": "last_91",
    "description": "The information system implements FIPS-validated or NSA-approved cryptography in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.",
    "function_name": "kms_keys_fips_validated_cryptography",
    "service_category": "Security",
    "confidence": 8,
    "gcp_sdk_example": "kms_client.projects().locations().keyRings().cryptoKeys().get(name='projects/proj/locations/global/keyRings/ring/cryptoKeys/key')"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_1",
    "description": "Checks if the cluster-admin role is only used where required in GKE clusters",
    "function_name": "gke_cluster_admin_role_restriction",
    "service_category": "Security",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters get-credentials --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_2",
    "description": "Checks if access to secrets is minimized by verifying least privilege access and secret rotation policies",
    "function_name": "secrets_access_minimized",
    "service_category": "Security",
    "confidence": 7,
    "gcp_sdk_example": "gcloud secrets versions access --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_3",
    "description": "Checks if IAM roles and ClusterRoles minimize the use of wildcards",
    "function_name": "iam_roles_minimize_wildcard_use",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam roles list --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_4",
    "description": "Checks if default service accounts are not actively used",
    "function_name": "iam_service_account_no_default_usage",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam service-accounts list --filter='email:PROJECT_ID@cloudservices.gserviceaccount.com' --format='value(email)' --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_5",
    "description": "Checks if Service Account Tokens are only mounted where necessary",
    "function_name": "iam_service_account_token_mount_restriction",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam service-accounts get-iam-policy --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_6",
    "description": "Checks if the system:masters group is being used in IAM",
    "function_name": "iam_group_system_masters_usage_avoided",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam groups list --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_7",
    "description": "Checks if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited",
    "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_8",
    "description": "Checks if IAM policies avoid bindings to system:anonymous",
    "function_name": "iam_policy_avoid_system_anonymous_bindings",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam policies describe --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_9",
    "description": "Checks if there are non-default bindings to system:unauthenticated in IAM policies",
    "function_name": "iam_policy_unauthenticated_bindings_check",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam policies describe --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_10",
    "description": "Checks if non-default bindings to system:authenticated exist",
    "function_name": "iam_bindings_system_authenticated_check",
    "service_category": "Identity",
    "confidence": 7,
    "gcp_sdk_example": "gcloud iam roles list --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_11",
    "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
    "function_name": "gke_cluster_pod_security_baseline_enforced",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_12",
    "description": "Checks if all GKE namespaces have network policies defined",
    "function_name": "gke_namespace_network_policy_defined",
    "service_category": "Network",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone ZONE --project PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_13",
    "description": "Checks if secrets are stored externally using Secret Manager",
    "function_name": "secret_manager_external_secret_storage",
    "service_category": "Security",
    "confidence": 7,
    "gcp_sdk_example": "gcloud secrets list --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_14",
    "description": "Checks if ImagePolicyWebhook admission controller is configured for image provenance",
    "function_name": "gke_image_provenance_configured",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(addonsConfig.imagePolicyConfig.enabled)'"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_15",
    "description": "Checks if administrative boundaries have been created between resources using namespaces",
    "function_name": "resource_namespace_boundaries_created",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_16",
    "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
    "function_name": "gke_pod_seccomp_profile_runtime_default",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(clusterIpv4Cidr)'"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_17",
    "description": "Checks if security context is applied to GKE pods and containers",
    "function_name": "gke_pod_security_context_applied",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_18",
    "description": "Checks if the default namespace is being used in Kubernetes",
    "function_name": "kubernetes_default_namespace_not_used",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters get-credentials cluster-name --zone zone-name --project project-id"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_19",
    "description": "Checks if Image Vulnerability Scanning is enabled for Container Registry",
    "function_name": "container_registry_image_vulnerability_scanning_enabled",
    "service_category": "Container Registry",
    "confidence": 7,
    "gcp_sdk_example": "gcloud artifacts docker images list-tags --project=PROJECT_ID --format=json"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_20",
    "description": "Checks if user access to Container Image repositories is minimized",
    "function_name": "container_image_repository_minimal_user_access",
    "service_category": "Container",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container images list-tags --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_21",
    "description": "Checks if the access to container image repositories is set to read-only",
    "function_name": "container_image_repository_read_only_access",
    "service_category": "Container",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container images list-tags --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_22",
    "description": "Checks if only trusted container images are used in Google Kubernetes Engine",
    "function_name": "gke_trusted_container_images_used",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container images list --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_23",
    "description": "Checks if GKE clusters are not running using the Compute Engine default service account",
    "function_name": "gke_cluster_no_default_service_account",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe CLUSTER_NAME --format='get(nodeConfig.serviceAccount)' --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_24",
    "description": "Checks if Intranode Visibility is enabled for all VPC networks",
    "function_name": "network_vpc_intranode_visibility_enabled",
    "service_category": "Network",
    "confidence": 7,
    "gcp_sdk_example": "gcloud compute networks list --format='table(name,description,IPv4Range,gatewayIPv4,subnetworks[],routingConfig.routingMode,autoCreateSubnetworks,x_gcloud_bgp_routing_mode,x_gcloud_add_subnet_routes)' --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_25",
    "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
    "function_name": "gke_control_plane_authorized_networks_enabled",
    "service_category": "Network",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_26",
    "description": "Checks if GKE clusters are created with Private Endpoint Enabled and Public Access Disabled",
    "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe --project=PROJECT_ID --region=REGION --format='get(privateClusterConfig.enablePrivateEndpoint, privateClusterConfig.enablePrivateNodes)'"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_27",
    "description": "Checks if GKE clusters are created with private nodes",
    "function_name": "gke_cluster_private_nodes_enabled",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_28",
    "description": "Checks if Kubernetes RBAC users are managed with Google Groups for GKE",
    "function_name": "gke_rbac_users_managed_with_google_groups",
    "service_category": "Compute",
    "confidence": 7,
    "gcp_sdk_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID"
  },
  {
    "sheet": "CIS_GKE_AUTOPILOT_V1_2_0",
    "rule_id": "CIS_GKE_AUTOPILOT_V1_2_0_29",
    "description": "Checks if the security posture is enabled",
    "function_name": "security_posture_enabled",
    "service_category": "Security",
    "confidence": 7,
    "gcp_sdk_example": "gcloud security posture get --project=PROJECT_ID"
  }
]