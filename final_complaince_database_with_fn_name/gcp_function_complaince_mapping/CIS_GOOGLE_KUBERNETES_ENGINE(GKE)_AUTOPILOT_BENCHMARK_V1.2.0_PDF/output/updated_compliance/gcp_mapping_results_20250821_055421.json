[
  {
    "compliance_id": "4.1.1",
    "title": "Ensure that the cluster-admin role is only used where required",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_admin_role_restriction",
        "description": "Checks if the cluster-admin role is only used where required in GKE clusters",
        "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_admin_role_restriction' is proposed to fill the gap. This function will check if the cluster-admin role is only used where required in GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_admin_role_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.2",
    "title": "Minimize access to secrets",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "secrets_access_minimized",
        "description": "Checks if access to secrets is minimized by verifying least privilege access and secret rotation policies",
        "gcp_api_example": "gcloud secrets versions access --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item 'Minimize access to secrets'. Therefore, a new function 'secrets_access_minimized' is proposed to fill this gap. This function will check if access to secrets is minimized by verifying least privilege access and secret rotation policies.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (secrets_access_minimized)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.3",
    "title": "Minimize wildcard use in Roles and ClusterRoles",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_roles_minimize_wildcard_use",
        "description": "Checks if IAM roles and ClusterRoles minimize the use of wildcards",
        "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_roles_minimize_wildcard_use' is proposed to fill the gap. This function will check IAM roles and ClusterRoles to ensure they minimize the use of wildcards, as per the compliance requirement.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_roles_minimize_wildcard_use)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.4",
    "title": "Ensure that default service accounts are not actively used",
    "existing_functions_mapped": [
      "compute_instance_no_default_service_account",
      "compute_instance_no_default_service_account_full_access",
      "compute_instance_no_service_account_key",
      "compute_instance_service_account_attached",
      "sql_instances_use_default_service_account"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 10,
    "new_functions_needed": [
      {
        "function_name": "iam_service_account_no_default_usage",
        "description": "Checks if default service accounts are not actively used",
        "gcp_api_example": "gcloud iam service-accounts list --filter='email:PROJECT_ID@cloudservices.gserviceaccount.com' --format='value(email)' --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "The existing functions mapped cover the compliance requirement for compute instances and SQL instances. However, there is a gap for other services that might use default service accounts. Therefore, a new function 'iam_service_account_no_default_usage' is suggested to cover this gap.\n\nCoverage Analysis:\n- Coverage Score: 10/10\n- Existing Functions Mapped: 5 (compute_instance_no_default_service_account, compute_instance_no_default_service_account_full_access, compute_instance_no_service_account_key, compute_instance_service_account_attached, sql_instances_use_default_service_account)\n- Unmapped Potential Functions: 387 (iam_policies_regular_review, iam_service_account_no_inline_policies, iam_policy_access_restriction...)\n- New Functions Proposed: 1 (iam_service_account_no_default_usage)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.5",
    "title": "Ensure that Service Account Tokens are only mounted where necessary",
    "existing_functions_mapped": [
      "iam_service_account_keys_rotation",
      "iam_service_account_no_user_managed_keys",
      "iam_service_account_no_root_key",
      "iam_service_account_no_editor_owner_roles",
      "iam_service_account_no_admin_privileges",
      "iam_service_account_no_admin_access",
      "iam_service_account_no_owner_role",
      "iam_service_account_no_owner_role_key",
      "iam_service_account_no_owner_privileges"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 10,
    "new_functions_needed": [
      {
        "function_name": "iam_service_account_token_mount_restriction",
        "description": "Checks if Service Account Tokens are only mounted where necessary",
        "gcp_api_example": "gcloud iam service-accounts get-iam-policy --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "The existing functions cover various aspects of service account token management, including key rotation, restriction of user-managed keys, and restriction of roles and privileges. However, there is no specific function to check if tokens are only mounted where necessary. Therefore, a new function 'iam_service_account_token_mount_restriction' is proposed to fill this gap.\n\nCoverage Analysis:\n- Coverage Score: 10/10\n- Existing Functions Mapped: 9 (iam_service_account_keys_rotation, iam_service_account_no_user_managed_keys, iam_service_account_no_root_key, iam_service_account_no_editor_owner_roles, iam_service_account_no_admin_privileges, iam_service_account_no_admin_access, iam_service_account_no_owner_role, iam_service_account_no_owner_role_key, iam_service_account_no_owner_privileges)\n- Unmapped Potential Functions: 383 (iam_policies_regular_review, iam_service_account_no_inline_policies, iam_policy_access_restriction...)\n- New Functions Proposed: 1 (iam_service_account_token_mount_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.6",
    "title": "Avoid use of system:masters group",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_group_system_masters_usage_avoided",
        "description": "Checks if the system:masters group is being used in IAM",
        "gcp_api_example": "gcloud iam groups list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item. A new function 'iam_group_system_masters_usage_avoided' is proposed to fill the gap. This function will check if the system:masters group is being used in IAM, which is the requirement of the compliance item.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_group_system_masters_usage_avoided)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.7",
    "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
        "description": "Checks if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_bind_impersonate_escalate_permissions_limited' is proposed to fill the gap. This function will use the 'gcloud container clusters get-credentials' command to retrieve the cluster's credentials and then check the permissions.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_bind_impersonate_escalate_permissions_limited)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.8",
    "title": "Avoid bindings to system:anonymous",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_policy_avoid_system_anonymous_bindings",
        "description": "Checks if IAM policies avoid bindings to system:anonymous",
        "gcp_api_example": "gcloud iam policies describe --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_policy_avoid_system_anonymous_bindings' is proposed to fill the gap. This function will use the 'gcloud iam policies describe' command to retrieve IAM policies and check for bindings to system:anonymous.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_policy_avoid_system_anonymous_bindings)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.9",
    "title": "Avoid non-default bindings to system:unauthenticated",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_policy_unauthenticated_bindings_check",
        "description": "Checks if there are non-default bindings to system:unauthenticated in IAM policies",
        "gcp_api_example": "gcloud iam policies describe --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_policy_unauthenticated_bindings_check' is proposed to fill the gap. This function will use the IAM policies describe API to check for non-default bindings to system:unauthenticated.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_policy_unauthenticated_bindings_check)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.10",
    "title": "Avoid non-default bindings to system:authenticated",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_bindings_system_authenticated_check",
        "description": "Checks if non-default bindings to system:authenticated exist",
        "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided list could be mapped to the compliance item. A new function 'iam_bindings_system_authenticated_check' is proposed to fill the gap. This function will check for non-default bindings to system:authenticated in IAM roles.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_bindings_system_authenticated_check)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.2.1",
    "title": "Ensure that the cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces.",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_pod_security_baseline_enforced",
        "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_pod_security_baseline_enforced' is proposed to check if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces. This function can be implemented using the GCP gcloud command-line tool.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_pod_security_baseline_enforced)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.3.1",
    "title": "Ensure that all Namespaces have Network Policies defined",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_namespace_network_policy_defined",
        "description": "Checks if all GKE namespaces have network policies defined",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone ZONE --project PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_namespace_network_policy_defined' is proposed to fill this gap. This function will check if all GKE namespaces have network policies defined, which is the requirement of the compliance item.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_namespace_network_policy_defined)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.4.1",
    "title": "Consider external secret storage",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "secret_manager_external_secret_storage",
        "description": "Checks if secrets are stored externally using Secret Manager",
        "gcp_api_example": "gcloud secrets list --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of considering external secret storage. Therefore, a new function is proposed to fill this gap. The function 'secret_manager_external_secret_storage' will check if secrets are stored externally using Secret Manager, which aligns with the compliance requirement.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 260 (bigquery_tables_data_masking_policy, bigquery_dataset_audit_logs_exported_to_storage, bigquery_table_data_masking_policy...)\n- New Functions Proposed: 1 (secret_manager_external_secret_storage)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.5.1",
    "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_image_provenance_configured",
        "description": "Checks if ImagePolicyWebhook admission controller is configured for image provenance",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(addonsConfig.imagePolicyConfig.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database match the compliance requirement. A new function 'gke_image_provenance_configured' is proposed to check if ImagePolicyWebhook admission controller is configured for image provenance in GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 242 (bigquery_tables_data_masking_policy, iam_policy_access_restriction, bigquery_table_data_masking_policy...)\n- New Functions Proposed: 1 (gke_image_provenance_configured)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.1",
    "title": "Create administrative boundaries between resources using namespaces",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "resource_namespace_boundaries_created",
        "description": "Checks if administrative boundaries have been created between resources using namespaces",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'resource_namespace_boundaries_created' is proposed to fill the gap. This function will check if administrative boundaries have been created between resources using namespaces.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (resource_namespace_boundaries_created)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.2",
    "title": "Ensure that the seccomp profile is set to RuntimeDefault in the pod definitions",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_seccomp_profile_runtime_default",
        "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(clusterIpv4Cidr)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions were found in the database that could cover this compliance requirement. A new function 'gke_pod_seccomp_profile_runtime_default' is proposed to fill this gap. This function will use the GCP gcloud API to retrieve the seccomp profile of the pod definitions and check if it is set to RuntimeDefault.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_pod_seccomp_profile_runtime_default)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.3",
    "title": "Apply Security Context to Pods and Containers",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_security_context_applied",
        "description": "Checks if security context is applied to GKE pods and containers",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database match the compliance requirement of applying security context to pods and containers. Therefore, a new function 'gke_pod_security_context_applied' is proposed to fill this gap. This function will use the GCP gcloud API to check if the security context is applied to GKE pods and containers.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_pod_security_context_applied)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.4",
    "title": "The default namespace should not be used",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "kubernetes_default_namespace_not_used",
        "description": "Checks if the default namespace is being used in Kubernetes",
        "gcp_api_example": "gcloud container clusters get-credentials cluster-name --zone zone-name --project project-id",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'kubernetes_default_namespace_not_used' is proposed to fill this gap. This function will check if the default namespace is being used in Kubernetes, which is a part of the Compute service category in GCP.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (kubernetes_default_namespace_not_used)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.1",
    "title": "Ensure Image Vulnerability Scanning is enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "container_registry_image_vulnerability_scanning_enabled",
        "description": "Checks if Image Vulnerability Scanning is enabled for Container Registry",
        "gcp_api_example": "gcloud artifacts docker images list-tags --project=PROJECT_ID --format=json",
        "service_category": "Container Registry"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item. A new function 'container_registry_image_vulnerability_scanning_enabled' is proposed to check if Image Vulnerability Scanning is enabled for images in the Container Registry. The function uses the 'gcloud artifacts docker images list-tags' command to list all images and their associated metadata, which includes vulnerability scanning information.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (container_registry_image_vulnerability_scanning_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.2",
    "title": "Minimize user access to Container Image repositories",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "container_image_repository_minimal_user_access",
        "description": "Checks if user access to Container Image repositories is minimized",
        "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
        "service_category": "Container"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item. A new function is proposed to check if user access to Container Image repositories is minimized. This function can be implemented using the 'gcloud container images list-tags' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (container_image_repository_minimal_user_access)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.3",
    "title": "Minimize cluster access to read-only for Container Image repositories",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "container_image_repository_read_only_access",
        "description": "Checks if the access to container image repositories is set to read-only",
        "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
        "service_category": "Container"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item. A new function 'container_image_repository_read_only_access' is proposed to check if the access to container image repositories is set to read-only. This function can be implemented using the 'gcloud container images list-tags' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (container_image_repository_read_only_access)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.4",
    "title": "Ensure only trusted container images are used",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_trusted_container_images_used",
        "description": "Checks if only trusted container images are used in Google Kubernetes Engine",
        "gcp_api_example": "gcloud container images list --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance requirement. A new function 'gke_trusted_container_images_used' is proposed to fill the gap. This function will check if only trusted container images are used in Google Kubernetes Engine.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_trusted_container_images_used)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.2.1",
    "title": "Ensure GKE clusters are not running using the Compute Engine default service account",
    "existing_functions_mapped": [
      "compute_instance_no_default_service_account"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_no_default_service_account",
        "description": "Checks if GKE clusters are not running using the Compute Engine default service account",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(nodeConfig.serviceAccount)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "The existing function 'compute_instance_no_default_service_account' partially covers the compliance requirement but it is specific to Compute Engine instances and not GKE clusters. Therefore, a new function 'gke_cluster_no_default_service_account' is proposed to specifically check for GKE clusters not using the Compute Engine default service account.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 1 (compute_instance_no_default_service_account)\n- Unmapped Potential Functions: 739 (iam_policies_regular_review, compute_instance_geolocation_restriction, compute_instance_application_compliance...)\n- New Functions Proposed: 1 (gke_cluster_no_default_service_account)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.3.1",
    "title": "Ensure Kubernetes Secrets are encrypted using keys managed in Cloud KMS",
    "existing_functions_mapped": [
      "container_gke_clusters_secrets_encrypted_with_kms",
      "container_gke_secrets_encrypted_with_kms"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [],
    "mapping_notes": "The compliance requirement is fully covered by the existing functions 'container_gke_clusters_secrets_encrypted_with_kms' and 'container_gke_secrets_encrypted_with_kms'. These functions check if Kubernetes Secrets are encrypted using keys managed in Cloud KMS. Therefore, no new functions or renames are needed.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 2 (container_gke_clusters_secrets_encrypted_with_kms, container_gke_secrets_encrypted_with_kms)\n- Unmapped Potential Functions: 324 (network_load_balancer_backends_use_gcp_certificates, bigquery_datasets_encryption_cmek_enabled, network_elasticsearch_https_enabled_tls_policy_compliant...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.1",
    "title": "Enable VPC Flow Logs and Intranode Visibility",
    "existing_functions_mapped": [
      "network_vpc_flow_logs_enabled"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "network_vpc_intranode_visibility_enabled",
        "description": "Checks if Intranode Visibility is enabled for all VPC networks",
        "gcp_api_example": "gcloud compute networks list --format='table(name,description,IPv4Range,gatewayIPv4,subnetworks[],routingConfig.routingMode,autoCreateSubnetworks,x_gcloud_bgp_routing_mode,x_gcloud_add_subnet_routes)' --project=PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "The existing function 'network_vpc_flow_logs_enabled' covers the requirement for enabling VPC Flow Logs. However, there is no existing function that checks for Intranode Visibility. Therefore, a new function 'network_vpc_intranode_visibility_enabled' is proposed to fill this gap. The coverage assessment is 7 as the existing functions cover most of the requirements, with minor gaps that can be filled by the new function.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 1 (network_vpc_flow_logs_enabled)\n- Unmapped Potential Functions: 331 (monitoring_cloud_armor_metrics_enabled, network_load_balancer_backends_use_gcp_certificates, network_firewall_restrict_inbound_ports...)\n- New Functions Proposed: 1 (network_vpc_intranode_visibility_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.2",
    "title": "Ensure Control Plane Authorized Networks is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_control_plane_authorized_networks_enabled",
        "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_control_plane_authorized_networks_enabled' is proposed to check if Control Plane Authorized Networks is enabled for GKE clusters. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_control_plane_authorized_networks_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.3",
    "title": "Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
        "description": "Checks if GKE clusters are created with Private Endpoint Enabled and Public Access Disabled",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --region=REGION --format='get(privateClusterConfig.enablePrivateEndpoint, privateClusterConfig.enablePrivateNodes)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance requirement. A new function is proposed to check if GKE clusters are created with Private Endpoint Enabled and Public Access Disabled. This function can be implemented using the GCP gcloud command-line tool.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_private_endpoint_enabled_public_access_disabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.4",
    "title": "Ensure clusters are created with Private Nodes",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_private_nodes_enabled",
        "description": "Checks if GKE clusters are created with private nodes",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database can cover this compliance requirement. A new function 'gke_cluster_private_nodes_enabled' is proposed to check if GKE clusters are created with private nodes. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_private_nodes_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.5",
    "title": "Ensure use of Google-managed SSL Certificates",
    "existing_functions_mapped": [
      "network_load_balancer_backends_use_gcp_certificates",
      "network_https_load_balancer_backend_ssl_tls_certificate_google_managed",
      "network_endpoints_ssl_certificate_associated",
      "network_load_balancer_disallow_weak_ssl_policies",
      "network_load_balancer_backend_ssl_certificate_configured",
      "network_load_balancer_ssl_google_managed_certificates",
      "network_load_balancer_backend_https_certificates_google_managed",
      "network_load_balancer_backend_ssl_certificate_google_managed",
      "network_external_https_load_balancer_ssl_certificates_google_managed",
      "network_https_load_balancer_ssl_certificates_google_managed",
      "network_external_https_load_balancer_ssl_certificate_google_managed",
      "network_https_load_balancer_ssl_certificate_google_managed",
      "network_load_balancer_google_managed_certificates",
      "network_tcp_udp_load_balancer_ssl_certificates_google_managed",
      "network_classic_load_balancer_ssl_certificates_google_managed",
      "network_external_load_balancer_ssl_certificates_google_managed",
      "network_load_balancer_ssl_certificates_google_managed"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [],
    "mapping_notes": "The compliance requirement 'Ensure use of Google-managed SSL Certificates' is fully covered by existing functions in the database. These functions check for the use of Google-managed SSL certificates in various network resources such as load balancers and endpoints. No new functions or renaming of existing functions are needed.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 17 (network_load_balancer_backends_use_gcp_certificates, network_https_load_balancer_backend_ssl_tls_certificate_google_managed, network_endpoints_ssl_certificate_associated, network_load_balancer_disallow_weak_ssl_policies, network_load_balancer_backend_ssl_certificate_configured, network_load_balancer_ssl_google_managed_certificates, network_load_balancer_backend_https_certificates_google_managed, network_load_balancer_backend_ssl_certificate_google_managed, network_external_https_load_balancer_ssl_certificates_google_managed, network_https_load_balancer_ssl_certificates_google_managed, network_external_https_load_balancer_ssl_certificate_google_managed, network_https_load_balancer_ssl_certificate_google_managed, network_load_balancer_google_managed_certificates, network_tcp_udp_load_balancer_ssl_certificates_google_managed, network_classic_load_balancer_ssl_certificates_google_managed, network_external_load_balancer_ssl_certificates_google_managed, network_load_balancer_ssl_certificates_google_managed)\n- Unmapped Potential Functions: 309 (bigquery_datasets_encryption_cmek_enabled, network_elasticsearch_https_enabled_tls_policy_compliant, kms_keys_no_scheduled_destruction...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.1",
    "title": "Manage Kubernetes RBAC users with Google Groups for GKE",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_rbac_users_managed_with_google_groups",
        "description": "Checks if Kubernetes RBAC users are managed with Google Groups for GKE",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database can cover this compliance requirement. A new function 'gke_rbac_users_managed_with_google_groups' is proposed to fill this gap. This function will check if Kubernetes RBAC users are managed with Google Groups for GKE.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_geolocation_restriction, compute_instance_application_compliance, compute_instance_time_synchronized...)\n- New Functions Proposed: 1 (gke_rbac_users_managed_with_google_groups)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.1",
    "title": "Enable Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD)",
    "existing_functions_mapped": [
      "compute_persistent_disks_encrypted_with_cmek"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [],
    "mapping_notes": "The existing function 'compute_persistent_disks_encrypted_with_cmek' directly covers the compliance requirement of enabling Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD). Therefore, no new functions are needed, and no functions need to be renamed or consolidated for this compliance item.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 1 (compute_persistent_disks_encrypted_with_cmek)\n- Unmapped Potential Functions: 649 (compute_instance_geolocation_restriction, compute_instance_application_compliance, compute_instance_time_synchronized...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.7.1",
    "title": "Enable Security Posture",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "security_posture_enabled",
        "description": "Checks if the security posture is enabled",
        "gcp_api_example": "gcloud security posture get --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "The compliance item 'Enable Security Posture' does not have a direct match in the existing functions database. Therefore, a new function 'security_posture_enabled' is proposed to fill this gap. This function will check if the security posture is enabled for a given GCP project.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (security_posture_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  }
]