[
  {
    "compliance_id": "4.1.1",
    "title": "Ensure that the cluster-admin role is only used where required",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_admin_role_restriction",
        "description": "Checks if the cluster-admin role is only used where and when needed in GKE clusters",
        "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database match the compliance requirement. A new function 'gke_cluster_admin_role_restriction' is proposed to fill the gap. This function will check the usage of the cluster-admin role in GKE clusters and ensure it is used only where and when needed.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_admin_role_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.2",
    "title": "Minimize access to secrets",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_secrets_access_minimized",
        "description": "Checks if access to secrets stored within the Kubernetes cluster is restricted",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(masterAuth.username)'",
        "service_category": "GKE"
      }
    ],
    "mapping_notes": "No existing functions in the database can cover this compliance requirement. A new function 'gke_secrets_access_minimized' is proposed to check if access to secrets stored within the Kubernetes cluster is restricted.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 392 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (gke_secrets_access_minimized)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.3",
    "title": "Minimize wildcard use in Roles and ClusterRoles",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_roles_clusterroles_minimize_wildcard_use",
        "description": "Checks if Kubernetes Roles and ClusterRoles minimize the use of wildcard '*'",
        "gcp_api_example": "kubectl get roles,clusterroles --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.rules[*].apiGroups}{\"\\n\"}{end}'",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database can cover this compliance requirement. A new function 'gke_roles_clusterroles_minimize_wildcard_use' is proposed to check if Kubernetes Roles and ClusterRoles minimize the use of wildcard '*'. This function can be implemented using the 'kubectl' command-line tool to fetch the rules for all Roles and ClusterRoles in all namespaces.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_roles_clusterroles_minimize_wildcard_use)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.4",
    "title": "Ensure that default service accounts are not actively used",
    "existing_functions_mapped": [
      "iam_service_account_no_admin_privileges",
      "iam_service_account_no_admin_access",
      "iam_service_account_no_owner_role",
      "iam_service_account_no_owner_privileges",
      "iam_service_account_no_owner_role_key",
      "iam_service_account_no_editor_owner_roles",
      "compute_instance_no_default_service_account",
      "compute_instance_no_default_service_account_full_access",
      "sql_instances_use_default_service_account"
    ],
    "functions_to_rename": [
      {
        "old_name": "sql_instances_use_default_service_account",
        "new_name": "sql_instance_no_default_service_account",
        "rationale": "The new name follows the naming convention of other similar functions and clearly states the desired secure state."
      }
    ],
    "functions_to_consolidate": [
      {
        "old_functions": [
          "iam_service_account_no_admin_privileges",
          "iam_service_account_no_admin_access",
          "iam_service_account_no_owner_role",
          "iam_service_account_no_owner_privileges",
          "iam_service_account_no_owner_role_key",
          "iam_service_account_no_editor_owner_roles",
          "compute_instance_no_default_service_account",
          "compute_instance_no_default_service_account_full_access",
          "sql_instance_no_default_service_account"
        ],
        "new_consolidated_function": "service_account_no_default_usage",
        "rationale": "Consolidating these functions into one generic function reduces duplication and covers the compliance requirement across all services."
      }
    ],
    "coverage_assessment": 8,
    "new_functions_needed": [],
    "mapping_notes": "The existing functions in the database already cover the compliance requirement to a large extent. However, they are specific to certain services (IAM, Compute, SQL). By consolidating these into a single, generic function (service_account_no_default_usage), we can ensure the compliance requirement is checked across all services. The coverage assessment is high as the consolidated function covers the requirement comprehensively.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 9 (iam_service_account_no_admin_privileges, iam_service_account_no_admin_access, iam_service_account_no_owner_role, iam_service_account_no_owner_privileges, iam_service_account_no_owner_role_key, iam_service_account_no_editor_owner_roles, compute_instance_no_default_service_account, compute_instance_no_default_service_account_full_access, sql_instances_use_default_service_account)\n- Unmapped Potential Functions: 383 (iam_users_access_control_defined, iam_access_keys_rotated_within_max_age, iam_users_passwords_keys_unused_days...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.5",
    "title": "Ensure that Service Account Tokens are only mounted where necessary",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_service_account_token_mount_restriction",
        "description": "Checks if Service Account Tokens are only mounted in GKE pods where necessary",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='json'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database cover this compliance requirement. A new function 'gke_pod_service_account_token_mount_restriction' is proposed to check if Service Account Tokens are only mounted in GKE pods where necessary. This function will use the GCP 'gcloud container clusters describe' command to retrieve the configuration of the GKE clusters and check the 'automountServiceAccountToken' field for each pod.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 392 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (gke_pod_service_account_token_mount_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.6",
    "title": "Avoid use of system:masters group",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_system_masters_group_restriction",
        "description": "Checks if the system:masters group is used to grant permissions to any user or service account in GKE clusters",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database can cover this compliance requirement. A new function 'gke_cluster_system_masters_group_restriction' is proposed to check if the system:masters group is used to grant permissions to any user or service account in GKE clusters. This function can be implemented using the 'gcloud container clusters get-credentials' command.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 392 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (gke_cluster_system_masters_group_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.7",
    "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
        "description": "Checks if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited",
        "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function is proposed to fill the gap. The function will check if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited as per the compliance requirement.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_bind_impersonate_escalate_permissions_limited)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.8",
    "title": "Avoid bindings to system:anonymous",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_role_bindings_system_anonymous_avoided",
        "description": "Checks if GKE ClusterRoleBindings and RoleBindings avoid binding to the user system:anonymous",
        "gcp_api_example": "gcloud container clusters get-credentials --zone=ZONE --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function is proposed to fill the gap. This function will check GKE ClusterRoleBindings and RoleBindings to ensure they do not bind to the user system:anonymous, as per the compliance requirement.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_role_bindings_system_anonymous_avoided)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.9",
    "title": "Avoid non-default bindings to system:unauthenticated",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_role_binding_system_unauthenticated_check",
        "description": "Checks for non-default ClusterRoleBindings and RoleBindings with the group system:unauthenticated, except the ClusterRoleBinding system:public-info-viewer",
        "gcp_api_example": "gcloud container clusters get-credentials --region=REGION --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance requirement. A new function is proposed to fill the gap. This function will check for non-default ClusterRoleBindings and RoleBindings with the group system:unauthenticated, except the ClusterRoleBinding system:public-info-viewer in GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_role_binding_system_unauthenticated_check)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.10",
    "title": "Avoid non-default bindings to system:authenticated",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_clusterrolebindings_system_authenticated_restrictions",
        "description": "Checks for non-default ClusterRoleBindings and RoleBindings with the group system:authenticated, except the ClusterRoleBindings system:basic-user, system:discovery, and system:public-info-viewer.",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "GKE"
      }
    ],
    "mapping_notes": "No existing functions in the database can cover this compliance requirement. A new function 'gke_clusterrolebindings_system_authenticated_restrictions' is proposed to check for non-default ClusterRoleBindings and RoleBindings with the group system:authenticated, except the ClusterRoleBindings system:basic-user, system:discovery, and system:public-info-viewer.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 740 (iam_users_access_control_defined, compute_instance_minimal_capabilities, iam_service_account_no_admin_privileges...)\n- New Functions Proposed: 1 (gke_clusterrolebindings_system_authenticated_restrictions)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.2.1",
    "title": "Ensure that the cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces.",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_pod_security_baseline_enforced",
        "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_pod_security_baseline_enforced' is proposed to check if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces. The coverage assessment is low (1) as the new function is needed to cover the compliance requirement.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_pod_security_baseline_enforced)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.3.1",
    "title": "Ensure that all Namespaces have Network Policies defined",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_namespace_network_policy_defined",
        "description": "Checks if all namespaces in a GKE cluster have network policies defined",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(networkPolicy.enabled)'",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the provided database match the compliance requirement. A new function 'gke_namespace_network_policy_defined' is proposed to check if all namespaces in a GKE cluster have network policies defined. This function can be implemented using the 'gcloud container clusters describe' command to check the 'networkPolicy.enabled' field for each namespace in a GKE cluster.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_namespace_network_policy_defined)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.4.1",
    "title": "Consider external secret storage",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_secrets_external_storage",
        "description": "Checks if GKE is using an external secrets storage and management system",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(databaseEncryption.state)'",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of considering external secret storage. Therefore, a new function 'gke_secrets_external_storage' is proposed to fill this gap. This function will check if Google Kubernetes Engine (GKE) is using an external secrets storage and management system, which is the main requirement of this compliance item.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 634 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (gke_secrets_external_storage)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.5.1",
    "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_image_provenance_configured",
        "description": "Checks if Image Provenance is configured using ImagePolicyWebhook admission controller in GKE",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(addonsConfig.imagePolicyConfig.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database match the compliance requirement. A new function 'gke_image_provenance_configured' is proposed to check if Image Provenance is configured using ImagePolicyWebhook admission controller in GKE.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 242 (storage_bucket_iam_policy_restrict_inter_account_permissions, network_ssl_policy_enforce_tls_1_2_or_restricted, compute_backup_policy_frequency_retention_compliance...)\n- New Functions Proposed: 1 (gke_image_provenance_configured)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.1",
    "title": "Create administrative boundaries between resources using namespaces",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_namespace_isolation_enabled",
        "description": "Checks if namespaces are used to isolate Kubernetes objects in GKE",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format='value(addonsConfig.networkPolicyConfig.disabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database can cover this compliance requirement. A new function 'gke_namespace_isolation_enabled' is proposed to check if namespaces are used to isolate Kubernetes objects in GKE. This function can be implemented using the GCP gcloud command-line tool.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_namespace_isolation_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.2",
    "title": "Ensure that the seccomp profile is set to RuntimeDefault in the pod definitions",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_seccomp_profile_runtime_default",
        "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterLegacyAbac.enabled)'",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_pod_seccomp_profile_runtime_default' is proposed to check if the seccomp profile is set to RuntimeDefault in the pod definitions. The coverage assessment is set to 7 as the new function should provide high coverage for this compliance item.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_pod_seccomp_profile_runtime_default)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.3",
    "title": "Apply Security Context to Pods and Containers",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_security_context_applied",
        "description": "Checks if Security Context is applied to GKE Pods and Containers",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(clusterAutoscaling.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database match the compliance requirement of applying Security Context to Pods and Containers. Therefore, a new function 'gke_pod_security_context_applied' is proposed to fill this gap. This function will check if the Security Context is applied to GKE Pods and Containers, which is crucial for defining the operating system security settings.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_pod_security_context_applied)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.4",
    "title": "The default namespace should not be used",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_namespace_default_usage_restricted",
        "description": "Checks if the default namespace is not used in GKE",
        "gcp_api_example": "kubectl get pods --all-namespaces --context=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_namespace_default_usage_restricted' is proposed to check if the default namespace is not used in GKE. This function can be implemented using the 'kubectl' command-line tool.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_namespace_default_usage_restricted)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.1",
    "title": "Ensure Image Vulnerability Scanning is enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "artifact_registry_image_vulnerability_scanning_enabled",
        "description": "Checks if vulnerability scanning is enabled for images stored in Artifact Registry",
        "gcp_api_example": "gcloud artifacts docker images list-tags --project=PROJECT_ID --location=LOCATION --repository=REPOSITORY --format=json",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped directly to this compliance item. A new function 'artifact_registry_image_vulnerability_scanning_enabled' is proposed to check if vulnerability scanning is enabled for images stored in Artifact Registry. This function can be implemented using the 'gcloud artifacts docker images list-tags' command.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_minimal_capabilities, compute_backup_policy_frequency_retention_compliance, sql_instance_snapshot_no_public_access...)\n- New Functions Proposed: 1 (artifact_registry_image_vulnerability_scanning_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.2",
    "title": "Minimize user access to Container Image repositories",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "container_registry_user_access_minimized",
        "description": "Checks if user access to Container Image repositories (GCR or AR) is restricted to authorized personnel and service accounts only",
        "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
        "service_category": "Container Registry"
      }
    ],
    "mapping_notes": "No existing functions in the provided database directly map to the compliance requirement of minimizing user access to Container Image repositories. Therefore, a new function 'container_registry_user_access_minimized' is proposed to fill this gap. This function will check if user access to Container Image repositories (GCR or AR) is restricted to authorized personnel and service accounts only.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 392 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (container_registry_user_access_minimized)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.3",
    "title": "Minimize cluster access to read-only for Container Image repositories",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_service_account_artifact_registry_viewer_role",
        "description": "Checks if the Cluster Service Account is configured with Artifact Registry Viewer Role to only allow read-only access to AR repositories",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value[separator=\" \"](nodeConfig.serviceAccount)'",
        "service_category": "GKE"
      }
    ],
    "mapping_notes": "The compliance item requires checking the permissions of the Cluster Service Account in GKE, specifically if it has read-only access to AR repositories. However, there are no existing functions in the database that directly address this requirement. Therefore, a new function 'gke_cluster_service_account_artifact_registry_viewer_role' is proposed to fill this gap. This function will use the 'gcloud container clusters describe' command to retrieve the service account associated with a GKE cluster and then check if it has the 'Artifact Registry Viewer' role.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 634 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (gke_cluster_service_account_artifact_registry_viewer_role)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.4",
    "title": "Ensure only trusted container images are used",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "container_registry_trusted_images_only",
        "description": "Checks if Binary Authorization is configured to allow only approved container registries",
        "gcp_api_example": "gcloud container binauthz policy describe --project=PROJECT_ID",
        "service_category": "Container"
      }
    ],
    "mapping_notes": "No existing functions in the provided list directly address the compliance requirement of ensuring only trusted container images are used. A new function, 'container_registry_trusted_images_only', is proposed to fill this gap. This function will use the Binary Authorization policy to ensure that only approved container registries are allowed. The coverage assessment is set to 7 as the new function should provide high coverage for this specific compliance item, but there may be other related checks not covered by this function.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 449 (iam_users_access_control_defined, iam_service_account_no_admin_privileges, iam_access_keys_rotated_within_max_age...)\n- New Functions Proposed: 1 (container_registry_trusted_images_only)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.2.1",
    "title": "Ensure GKE clusters are not running using the Compute Engine default service account",
    "existing_functions_mapped": [
      "compute_instance_no_default_service_account"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_no_default_service_account",
        "description": "Checks if GKE clusters are not using the Compute Engine default service account",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(nodeConfig.serviceAccount)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "The existing function 'compute_instance_no_default_service_account' partially covers the compliance requirement. However, it specifically checks for Compute Instances and not GKE clusters. Therefore, a new function 'gke_cluster_no_default_service_account' is proposed to specifically check for GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 1 (compute_instance_no_default_service_account)\n- Unmapped Potential Functions: 739 (iam_users_access_control_defined, compute_instance_minimal_capabilities, iam_service_account_no_admin_privileges...)\n- New Functions Proposed: 1 (gke_cluster_no_default_service_account)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.3.1",
    "title": "Ensure Kubernetes Secrets are encrypted using keys managed in Cloud KMS",
    "existing_functions_mapped": [
      "container_gke_clusters_secrets_encrypted_with_kms"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [],
    "mapping_notes": "The existing function 'container_gke_clusters_secrets_encrypted_with_kms' already covers the requirement of this compliance item. It checks if Kubernetes secrets in GKE clusters are encrypted using keys managed in Cloud KMS. Therefore, no new functions or renames are needed.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 1 (container_gke_clusters_secrets_encrypted_with_kms)\n- Unmapped Potential Functions: 325 (iam_access_keys_rotated_within_max_age, iam_users_passwords_keys_unused_days, network_load_balancer_backend_google_managed_ssl_required...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.1",
    "title": "Enable VPC Flow Logs and Intranode Visibility",
    "existing_functions_mapped": [
      "network_vpc_flow_logs_enabled"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "network_vpc_intranode_visibility_enabled",
        "description": "Checks if Intranode Visibility is enabled for VPC to see pod-level traffic within a worker node",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='get(networkConfig.intraNodeVisibilityConfig.enabled)'",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "The existing function 'network_vpc_flow_logs_enabled' covers the requirement for enabling VPC Flow Logs. However, there is no existing function for checking the Intranode Visibility. Therefore, a new function 'network_vpc_intranode_visibility_enabled' is proposed to fill this gap. The coverage assessment is set to 7 as the existing functions cover most of the requirements, with minor gaps filled by the new function.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 1 (network_vpc_flow_logs_enabled)\n- Unmapped Potential Functions: 331 (network_load_balancer_backend_google_managed_ssl_required, network_vpc_firewall_policy_fragmented_packets_user_defined_ruleset, network_cdn_associated_with_cloud_armor...)\n- New Functions Proposed: 1 (network_vpc_intranode_visibility_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.2",
    "title": "Ensure Control Plane Authorized Networks is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_control_plane_authorized_networks_enabled",
        "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the provided database can cover this compliance requirement. A new function 'gke_cluster_control_plane_authorized_networks_enabled' is proposed to check if Control Plane Authorized Networks is enabled for GKE clusters. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_control_plane_authorized_networks_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.3",
    "title": "Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
        "description": "Checks if GKE clusters are created with private endpoint enabled and public access disabled",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateEndpoint, privateClusterConfig.enablePrivateNodes)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database match the compliance requirement. A new function 'gke_cluster_private_endpoint_enabled_public_access_disabled' is proposed to check if GKE clusters are created with private endpoint enabled and public access disabled. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_private_endpoint_enabled_public_access_disabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.4",
    "title": "Ensure clusters are created with Private Nodes",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_private_nodes_enabled",
        "description": "Checks if GKE clusters are created with private nodes",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database match the compliance requirement of ensuring GKE clusters are created with private nodes. Therefore, a new function 'gke_cluster_private_nodes_enabled' is proposed. This function will use the 'gcloud container clusters describe' command to check the 'privateClusterConfig.enablePrivateNodes' field of the GKE cluster, which indicates whether the cluster is created with private nodes.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_private_nodes_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.5",
    "title": "Ensure use of Google-managed SSL Certificates",
    "existing_functions_mapped": [
      "network_load_balancer_backend_ssl_certificate_google_managed",
      "network_https_load_balancer_ssl_certificate_google_managed",
      "network_load_balancer_ssl_certificate_google_managed",
      "network_https_load_balancer_ssl_certificates_google_managed",
      "network_load_balancer_ssl_certificates_google_managed",
      "network_https_load_balancer_ssl_policy_predefined",
      "network_load_balancer_ssl_policy_predefined",
      "network_https_load_balancer_ssl_proxy_predefined_policy_enforced",
      "network_load_balancer_ssl_proxy_custom_policy",
      "network_https_load_balancer_ssl_policy_predefined",
      "network_load_balancer_ssl_policy_predefined",
      "network_https_load_balancer_ssl_proxy_predefined_policy_enforced",
      "network_load_balancer_ssl_proxy_custom_policy"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [],
    "mapping_notes": "The compliance requirement to ensure the use of Google-managed SSL Certificates for HTTPS load balancers is fully covered by existing functions in the database. These functions check for the use of Google-managed SSL certificates and predefined SSL policies on both network and HTTPS load balancers. Therefore, no new functions or renaming of existing functions are needed.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 13 (network_load_balancer_backend_ssl_certificate_google_managed, network_https_load_balancer_ssl_certificate_google_managed, network_load_balancer_ssl_certificate_google_managed, network_https_load_balancer_ssl_certificates_google_managed, network_load_balancer_ssl_certificates_google_managed, network_https_load_balancer_ssl_policy_predefined, network_load_balancer_ssl_policy_predefined, network_https_load_balancer_ssl_proxy_predefined_policy_enforced, network_load_balancer_ssl_proxy_custom_policy, network_https_load_balancer_ssl_policy_predefined, network_load_balancer_ssl_policy_predefined, network_https_load_balancer_ssl_proxy_predefined_policy_enforced, network_load_balancer_ssl_proxy_custom_policy)\n- Unmapped Potential Functions: 572 (iam_access_keys_rotated_within_max_age, iam_users_passwords_keys_unused_days, network_load_balancer_backend_google_managed_ssl_required...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.1",
    "title": "Manage Kubernetes RBAC users with Google Groups for GKE",
    "existing_functions_mapped": [
      "iam_group_user_assignment_required",
      "iam_group_has_user",
      "iam_groups_have_iam_user"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 10,
    "new_functions_needed": [
      {
        "function_name": "gke_rbac_users_managed_with_google_groups",
        "description": "Checks if GKE RBAC users are managed using Google Groups",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "GKE"
      }
    ],
    "mapping_notes": "The existing functions 'iam_group_user_assignment_required', 'iam_group_has_user', and 'iam_groups_have_iam_user' can be used to check if users are assigned to groups in IAM. However, there is no existing function to check if these groups are used for RBAC in GKE. Therefore, a new function 'gke_rbac_users_managed_with_google_groups' is suggested to fill this gap.\n\nCoverage Analysis:\n- Coverage Score: 10/10\n- Existing Functions Mapped: 3 (iam_group_user_assignment_required, iam_group_has_user, iam_groups_have_iam_user)\n- Unmapped Potential Functions: 737 (iam_users_access_control_defined, compute_instance_minimal_capabilities, iam_service_account_no_admin_privileges...)\n- New Functions Proposed: 1 (gke_rbac_users_managed_with_google_groups)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.1",
    "title": "Enable Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD)",
    "existing_functions_mapped": [
      "compute_persistent_disks_encrypted_with_cmek"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [],
    "mapping_notes": "The existing function 'compute_persistent_disks_encrypted_with_cmek' directly covers the compliance requirement of enabling Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD). Therefore, no new functions are needed, and no functions need to be renamed or consolidated for this compliance item.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 1 (compute_persistent_disks_encrypted_with_cmek)\n- Unmapped Potential Functions: 649 (compute_instance_minimal_capabilities, iam_access_keys_rotated_within_max_age, iam_users_passwords_keys_unused_days...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.7.1",
    "title": "Enable Security Posture",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "security_posture_dashboard_enabled",
        "description": "Checks if the security posture dashboard is enabled for the project",
        "gcp_api_example": "gcloud alpha scc settings services security-health-analytics get --organization=ORGANIZATION_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item. A new function 'security_posture_dashboard_enabled' is proposed to check if the security posture dashboard is enabled for the project. This function can be implemented using the 'gcloud alpha scc settings services security-health-analytics get' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (security_posture_dashboard_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  }
]