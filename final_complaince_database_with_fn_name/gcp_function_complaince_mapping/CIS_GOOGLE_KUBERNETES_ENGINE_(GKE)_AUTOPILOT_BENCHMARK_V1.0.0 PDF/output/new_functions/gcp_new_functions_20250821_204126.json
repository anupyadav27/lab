[
  {
    "function_name": "gke_cluster_admin_role_restriction",
    "description": "Checks if the cluster-admin role is only used where and when needed in GKE clusters",
    "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_secrets_access_minimized",
    "description": "Checks if access to secrets stored within the Kubernetes cluster is restricted",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(masterAuth.username)'",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_roles_clusterroles_minimize_wildcard_use",
    "description": "Checks if Kubernetes Roles and ClusterRoles minimize the use of wildcard '*'",
    "gcp_api_example": "kubectl get roles,clusterroles --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.rules[*].apiGroups}{\"\\n\"}{end}'",
    "service_category": "Security"
  },
  {
    "function_name": "gke_pod_service_account_token_mount_restriction",
    "description": "Checks if Service Account Tokens are only mounted in GKE pods where necessary",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='json'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_system_masters_group_restriction",
    "description": "Checks if the system:masters group is used to grant permissions to any user or service account in GKE clusters",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
    "description": "Checks if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited",
    "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_role_bindings_system_anonymous_avoided",
    "description": "Checks if GKE ClusterRoleBindings and RoleBindings avoid binding to the user system:anonymous",
    "gcp_api_example": "gcloud container clusters get-credentials --zone=ZONE --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_cluster_role_binding_system_unauthenticated_check",
    "description": "Checks for non-default ClusterRoleBindings and RoleBindings with the group system:unauthenticated, except the ClusterRoleBinding system:public-info-viewer",
    "gcp_api_example": "gcloud container clusters get-credentials --region=REGION --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "gke_clusterrolebindings_system_authenticated_restrictions",
    "description": "Checks for non-default ClusterRoleBindings and RoleBindings with the group system:authenticated, except the ClusterRoleBindings system:basic-user, system:discovery, and system:public-info-viewer.",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "GKE"
  },
  {
    "function_name": "gke_cluster_pod_security_baseline_enforced",
    "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_namespace_network_policy_defined",
    "description": "Checks if all namespaces in a GKE cluster have network policies defined",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(networkPolicy.enabled)'",
    "service_category": "Network"
  },
  {
    "function_name": "gke_secrets_external_storage",
    "description": "Checks if GKE is using an external secrets storage and management system",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(databaseEncryption.state)'",
    "service_category": "Security"
  },
  {
    "function_name": "gke_image_provenance_configured",
    "description": "Checks if Image Provenance is configured using ImagePolicyWebhook admission controller in GKE",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(addonsConfig.imagePolicyConfig.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_namespace_isolation_enabled",
    "description": "Checks if namespaces are used to isolate Kubernetes objects in GKE",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format='value(addonsConfig.networkPolicyConfig.disabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_pod_seccomp_profile_runtime_default",
    "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterLegacyAbac.enabled)'",
    "service_category": "Security"
  },
  {
    "function_name": "gke_pod_security_context_applied",
    "description": "Checks if Security Context is applied to GKE Pods and Containers",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(clusterAutoscaling.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_namespace_default_usage_restricted",
    "description": "Checks if the default namespace is not used in GKE",
    "gcp_api_example": "kubectl get pods --all-namespaces --context=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "artifact_registry_image_vulnerability_scanning_enabled",
    "description": "Checks if vulnerability scanning is enabled for images stored in Artifact Registry",
    "gcp_api_example": "gcloud artifacts docker images list-tags --project=PROJECT_ID --location=LOCATION --repository=REPOSITORY --format=json",
    "service_category": "Security"
  },
  {
    "function_name": "container_registry_user_access_minimized",
    "description": "Checks if user access to Container Image repositories (GCR or AR) is restricted to authorized personnel and service accounts only",
    "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
    "service_category": "Container Registry"
  },
  {
    "function_name": "gke_cluster_service_account_artifact_registry_viewer_role",
    "description": "Checks if the Cluster Service Account is configured with Artifact Registry Viewer Role to only allow read-only access to AR repositories",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value[separator=\" \"](nodeConfig.serviceAccount)'",
    "service_category": "GKE"
  },
  {
    "function_name": "container_registry_trusted_images_only",
    "description": "Checks if Binary Authorization is configured to allow only approved container registries",
    "gcp_api_example": "gcloud container binauthz policy describe --project=PROJECT_ID",
    "service_category": "Container"
  },
  {
    "function_name": "gke_cluster_no_default_service_account",
    "description": "Checks if GKE clusters are not using the Compute Engine default service account",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(nodeConfig.serviceAccount)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "network_vpc_intranode_visibility_enabled",
    "description": "Checks if Intranode Visibility is enabled for VPC to see pod-level traffic within a worker node",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='get(networkConfig.intraNodeVisibilityConfig.enabled)'",
    "service_category": "Network"
  },
  {
    "function_name": "gke_cluster_control_plane_authorized_networks_enabled",
    "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID",
    "service_category": "Network"
  },
  {
    "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
    "description": "Checks if GKE clusters are created with private endpoint enabled and public access disabled",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateEndpoint, privateClusterConfig.enablePrivateNodes)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_private_nodes_enabled",
    "description": "Checks if GKE clusters are created with private nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_rbac_users_managed_with_google_groups",
    "description": "Checks if GKE RBAC users are managed using Google Groups",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "GKE"
  },
  {
    "function_name": "security_posture_dashboard_enabled",
    "description": "Checks if the security posture dashboard is enabled for the project",
    "gcp_api_example": "gcloud alpha scc settings services security-health-analytics get --organization=ORGANIZATION_ID",
    "service_category": "Security"
  }
]