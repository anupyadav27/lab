[
  {
    "function_name": "gke_kubeconfig_file_permission_restrictive",
    "description": "Checks if the kubeconfig file permissions are set to 644 or more restrictive",
    "gcp_api_example": "gcloud container clusters describe --format='get(name, masterAuth.clusterCaCertificate)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_kubeconfig_file_ownership_check",
    "description": "Checks if the kubelet kubeconfig file ownership is set to root:root",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format='value(nodeConfig.kubeletConfig)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_config_file_permission_check",
    "description": "Checks if the kubelet configuration file has permissions set to 644",
    "gcp_api_example": "gcloud container clusters describe --format='get(nodeConfig.kubeletConfig)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_kubelet_config_file_root_ownership",
    "description": "Checks if the kubelet configuration file ownership is set to root:root",
    "gcp_api_example": "gcloud container clusters describe --format=json --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_admin_role_restriction",
    "description": "Checks if the cluster-admin role is only used where required in GKE clusters",
    "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "secrets_manager_secret_access_minimized",
    "description": "Checks if access to secrets in Secret Manager is minimized",
    "gcp_api_example": "gcloud secrets versions access --secret=SECRET_ID --version=VERSION_ID --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "iam_roles_minimize_wildcard_use",
    "description": "Checks if IAM roles and ClusterRoles minimize the use of wildcards",
    "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "iam_service_account_no_default_usage",
    "description": "Checks if default service accounts are not actively used",
    "gcp_api_example": "gcloud iam service-accounts list --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "iam_service_account_token_mount_restriction",
    "description": "Checks if Service Account Tokens are only mounted where necessary",
    "gcp_api_example": "gcloud iam service-accounts get-iam-policy --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "iam_group_system_masters_avoidance",
    "description": "Checks if the system:masters group is being used in IAM",
    "gcp_api_example": "gcloud iam groups list --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
    "description": "Checks if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited",
    "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "iam_bindings_avoid_system_anonymous",
    "description": "Checks if IAM bindings avoid system:anonymous",
    "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "iam_policy_no_unauthenticated_bindings",
    "description": "Checks if IAM policies avoid non-default bindings to system:unauthenticated",
    "gcp_api_example": "gcloud iam policies describe --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "iam_bindings_system_authenticated_check",
    "description": "Checks if non-default bindings to system:authenticated exist",
    "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
    "service_category": "Identity"
  },
  {
    "function_name": "gke_cluster_pod_security_baseline_enforced",
    "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_cni_network_policies_supported",
    "description": "Checks if the CNI in use for the GKE cluster supports Network Policies",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format='value(networkPolicy.enabled)'",
    "service_category": "Network"
  },
  {
    "function_name": "gke_namespace_network_policy_defined",
    "description": "Checks if all GKE namespaces have network policies defined",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "Network"
  },
  {
    "function_name": "secrets_as_files_preferred",
    "description": "Checks if secrets are stored as files instead of environment variables",
    "gcp_api_example": "gcloud secrets versions access --secret=SECRET_ID --version=VERSION_ID --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "external_secret_storage_considered",
    "description": "Checks if external secret storage is considered for sensitive data",
    "gcp_api_example": "gcloud secrets list --project=PROJECT_ID",
    "service_category": "Security"
  },
  {
    "function_name": "container_image_provenance_configured",
    "description": "Checks if ImagePolicyWebhook admission controller is configured for image provenance",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(addonsConfig.imagePolicyConfig.enabled)'",
    "service_category": "Container"
  },
  {
    "function_name": "resource_namespace_boundaries_created",
    "description": "Checks if administrative boundaries have been created between resources using namespaces",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_pod_seccomp_profile_runtime_default",
    "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterIpv4Cidr)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_pod_security_context_applied",
    "description": "Checks if security context is applied to GKE pods and containers",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.status)'",
    "service_category": "Compute"
  },
  {
    "function_name": "default_namespace_not_used",
    "description": "Checks if the default namespace is not being used",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "container_registry_image_vulnerability_scanning_enabled",
    "description": "Checks if Image Vulnerability Scanning is enabled for Container Registry",
    "gcp_api_example": "gcloud container images list-tags --show-occurrences --project=PROJECT_ID",
    "service_category": "Container Registry"
  },
  {
    "function_name": "container_image_repository_minimal_user_access",
    "description": "Checks if user access to Container Image repositories is minimized",
    "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
    "service_category": "Container"
  },
  {
    "function_name": "gke_cluster_container_image_repo_read_only",
    "description": "Checks if the GKE cluster has read-only access to the Container Image repositories",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(cluster.containerImageRepoReadOnly)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_trusted_container_images_used",
    "description": "Checks if only trusted container images are used in Google Kubernetes Engine",
    "gcp_api_example": "gcloud container images list --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_no_default_service_account",
    "description": "Checks if GKE clusters are not running using the Compute Engine default service account",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value[default](nodeConfig.serviceAccount)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_metadata_server_enabled",
    "description": "Checks if the GKE Metadata Server is enabled for a GKE cluster",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(workloadIdentityConfig.workloadPool)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_node_images_cos_containerd",
    "description": "Checks if GKE Node images are using Container-Optimized OS (cos_containerd)",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(nodeConfig.imageType)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_node_auto_repair_enabled",
    "description": "Checks if Node Auto-Repair is enabled for GKE Nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(nodePools.autorepair)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_shielded_nodes_enabled",
    "description": "Checks if shielded nodes are enabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(shieldedNodes.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_shielded_nodes_integrity_monitoring_enabled",
    "description": "Checks if Integrity Monitoring is enabled for Shielded GKE Nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(shieldedNodes.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_nodes_secure_boot_enabled",
    "description": "Checks if Secure Boot is enabled for Shielded GKE Nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(shieldedNodes.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "network_vpc_intranode_visibility_enabled",
    "description": "Checks if Intranode Visibility is enabled for all VPC networks",
    "gcp_api_example": "gcloud compute networks list --format='table(name, x_gcloud_subnet_mode)' --project=PROJECT_ID",
    "service_category": "Network"
  },
  {
    "function_name": "gke_cluster_vpc_native_enabled",
    "description": "Checks if GKE clusters are using VPC-native mode",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(ipAllocationPolicy.useIpAliases)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_control_plane_authorized_networks_enabled",
    "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID",
    "service_category": "Network"
  },
  {
    "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
    "description": "Checks if GKE clusters are created with Private Endpoint Enabled and Public Access Disabled",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --region=REGION --format='value(privateClusterConfig.enablePrivateEndpoint, privateClusterConfig.enablePrivateNodes)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_private_nodes_enabled",
    "description": "Checks if GKE clusters are created with private nodes",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_worker_nodes_firewall_configured",
    "description": "Checks if firewall rules are configured for GKE worker nodes",
    "gcp_api_example": "gcloud compute firewall-rules list --filter='name~gke-worker'",
    "service_category": "Network"
  },
  {
    "function_name": "compute_instance_auditd_logging_enabled",
    "description": "Checks if Linux auditd logging is enabled on Compute Engine instances",
    "gcp_api_example": "gcloud compute instances describe INSTANCE_ID --project=PROJECT_ID --zone=ZONE",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_rbac_users_managed_with_google_groups",
    "description": "Checks if Kubernetes RBAC users are managed with Google Groups for GKE",
    "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "iam_legacy_authorization_disabled",
    "description": "Checks if Legacy Authorization (ABAC) is disabled for all GCP services",
    "gcp_api_example": "gcloud projects get-iam-policy PROJECT_ID --flatten='bindings[].role' --format='table(bindings.role)'",
    "service_category": "Identity"
  },
  {
    "function_name": "gke_pd_cmek_enabled",
    "description": "Checks if Customer-Managed Encryption Keys (CMEK) are enabled for GKE Persistent Disks (PD)",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='get(databaseEncryption.keyName)'",
    "service_category": "Compute"
  },
  {
    "function_name": "compute_boot_disk_cmek_enabled",
    "description": "Checks if Customer-Managed Encryption Keys (CMEK) are enabled for boot disks",
    "gcp_api_example": "gcloud compute disks describe --project=PROJECT_ID",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_web_ui_disabled",
    "description": "Checks if the Kubernetes Web UI is disabled for GKE clusters",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(masterAuth.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_cluster_alpha_features_disabled",
    "description": "Checks if any alpha features are enabled in GKE clusters",
    "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format=json",
    "service_category": "Compute"
  },
  {
    "function_name": "gke_sandbox_enabled_for_untrusted_workloads",
    "description": "Checks if GKE Sandbox is enabled for running untrusted workloads",
    "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(cluster.sandboxConfig.enabled)'",
    "service_category": "Compute"
  },
  {
    "function_name": "security_posture_enabled",
    "description": "Checks if the security posture is enabled",
    "gcp_api_example": "gcloud security posture get --project=PROJECT_ID",
    "service_category": "Security"
  }
]