[
  {
    "compliance_id": "3.1.1",
    "title": "Ensure that the kubeconfig file permissions are set to 644 or more restrictive",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_kubeconfig_file_permission_restrictive",
        "description": "Checks if the kubeconfig file permissions are set to 644 or more restrictive",
        "gcp_api_example": "gcloud container clusters describe --format='get(name, masterAuth.clusterCaCertificate)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_kubeconfig_file_permission_restrictive' is proposed to fill the gap. This function will use the GCP gcloud command to retrieve the kubeconfig file and check its permissions.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_kubeconfig_file_permission_restrictive)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "3.1.2",
    "title": "Ensure that the kubelet kubeconfig file ownership is set to root:root",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_kubelet_kubeconfig_file_ownership_check",
        "description": "Checks if the kubelet kubeconfig file ownership is set to root:root",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format='value(nodeConfig.kubeletConfig)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_kubelet_kubeconfig_file_ownership_check' is proposed to fill the gap. This function will use the GCP gcloud command to retrieve the kubelet configuration of a GKE cluster and check if the kubeconfig file ownership is set to root:root.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_kubelet_kubeconfig_file_ownership_check)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "3.1.3",
    "title": "Ensure that the kubelet configuration file has permissions set to 644",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_kubelet_config_file_permission_check",
        "description": "Checks if the kubelet configuration file has permissions set to 644",
        "gcp_api_example": "gcloud container clusters describe --format='get(nodeConfig.kubeletConfig)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database match the compliance requirement. A new function 'gke_kubelet_config_file_permission_check' is proposed to fill the gap. This function will use the GCP gcloud command to retrieve the kubelet configuration of a GKE cluster and check if the file permissions are set to 644.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_kubelet_config_file_permission_check)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "3.1.4",
    "title": "Ensure that the kubelet configuration file ownership is set to root:root",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_kubelet_config_file_root_ownership",
        "description": "Checks if the kubelet configuration file ownership is set to root:root",
        "gcp_api_example": "gcloud container clusters describe --format=json --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_kubelet_config_file_root_ownership' is proposed to check if the kubelet configuration file ownership is set to root:root. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_kubelet_config_file_root_ownership)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.1",
    "title": "Ensure that the cluster-admin role is only used where required",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_admin_role_restriction",
        "description": "Checks if the cluster-admin role is only used where required in GKE clusters",
        "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_admin_role_restriction' is proposed to fill the gap. This function will check if the cluster-admin role is only used where required in GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_admin_role_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.2",
    "title": "Minimize access to secrets",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "secrets_manager_secret_access_minimized",
        "description": "Checks if access to secrets in Secret Manager is minimized",
        "gcp_api_example": "gcloud secrets versions access --secret=SECRET_ID --version=VERSION_ID --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item 'Minimize access to secrets'. Therefore, a new function 'secrets_manager_secret_access_minimized' is proposed to fill this gap. This function will check if access to secrets in Secret Manager is minimized, which aligns with the compliance requirement.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (secrets_manager_secret_access_minimized)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.3",
    "title": "Minimize wildcard use in Roles and ClusterRoles",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_roles_minimize_wildcard_use",
        "description": "Checks if IAM roles and ClusterRoles minimize the use of wildcards",
        "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_roles_minimize_wildcard_use' is proposed to fill this gap. This function will check IAM roles and ClusterRoles to ensure they minimize the use of wildcards, in line with the compliance item.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_roles_minimize_wildcard_use)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.4",
    "title": "Ensure that default service accounts are not actively used",
    "existing_functions_mapped": [
      "compute_instance_no_default_service_account",
      "compute_instance_no_default_service_account_full_access",
      "compute_instance_service_account_attached",
      "sql_instances_use_default_service_account"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 10,
    "new_functions_needed": [
      {
        "function_name": "iam_service_account_no_default_usage",
        "description": "Checks if default service accounts are not actively used",
        "gcp_api_example": "gcloud iam service-accounts list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "The existing functions cover the compliance requirement for compute instances and SQL instances. However, there is a gap for other services that use service accounts. Therefore, a new function 'iam_service_account_no_default_usage' is proposed to cover this gap.\n\nCoverage Analysis:\n- Coverage Score: 10/10\n- Existing Functions Mapped: 4 (compute_instance_no_default_service_account, compute_instance_no_default_service_account_full_access, compute_instance_service_account_attached, sql_instances_use_default_service_account)\n- Unmapped Potential Functions: 388 (iam_policy_violation_procedure_implementation, iam_user_unique_identification_authentication, iam_roles_access_restriction...)\n- New Functions Proposed: 1 (iam_service_account_no_default_usage)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.5",
    "title": "Ensure that Service Account Tokens are only mounted where necessary",
    "existing_functions_mapped": [
      "iam_service_account_no_root_key",
      "iam_service_account_key_absent_for_root_user",
      "iam_service_account_key_absent_for_root",
      "iam_service_account_no_owner_role_key",
      "compute_instance_no_service_account_key"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 10,
    "new_functions_needed": [
      {
        "function_name": "iam_service_account_token_mount_restriction",
        "description": "Checks if Service Account Tokens are only mounted where necessary",
        "gcp_api_example": "gcloud iam service-accounts get-iam-policy --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "The existing functions mapped cover the aspect of ensuring that service account keys (tokens) are not present for root users or owner roles, which is a part of the compliance requirement. However, to fully cover the requirement of ensuring that Service Account Tokens are only mounted where necessary, a new function 'iam_service_account_token_mount_restriction' is suggested.\n\nCoverage Analysis:\n- Coverage Score: 10/10\n- Existing Functions Mapped: 5 (iam_service_account_no_root_key, iam_service_account_key_absent_for_root_user, iam_service_account_key_absent_for_root, iam_service_account_no_owner_role_key, compute_instance_no_service_account_key)\n- Unmapped Potential Functions: 387 (iam_policy_violation_procedure_implementation, iam_user_unique_identification_authentication, iam_roles_access_restriction...)\n- New Functions Proposed: 1 (iam_service_account_token_mount_restriction)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.6",
    "title": "Avoid use of system:masters group",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_group_system_masters_avoidance",
        "description": "Checks if the system:masters group is being used in IAM",
        "gcp_api_example": "gcloud iam groups list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_group_system_masters_avoidance' is proposed to check if the system:masters group is being used in IAM. This function can be implemented using the 'gcloud iam groups list' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_group_system_masters_avoidance)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.7",
    "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_bind_impersonate_escalate_permissions_limited",
        "description": "Checks if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited",
        "gcp_api_example": "gcloud container clusters get-credentials --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function is proposed to fill the gap. The function will check if the Bind, Impersonate and Escalate permissions in the Kubernetes cluster are limited. This function is implementable with real GCP APIs.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_bind_impersonate_escalate_permissions_limited)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.8",
    "title": "Avoid bindings to system:anonymous",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_bindings_avoid_system_anonymous",
        "description": "Checks if IAM bindings avoid system:anonymous",
        "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_bindings_avoid_system_anonymous' is proposed to fill this gap. This function will check IAM bindings to ensure they do not include system:anonymous.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_bindings_avoid_system_anonymous)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.9",
    "title": "Avoid non-default bindings to system:unauthenticated",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_policy_no_unauthenticated_bindings",
        "description": "Checks if IAM policies avoid non-default bindings to system:unauthenticated",
        "gcp_api_example": "gcloud iam policies describe --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'iam_policy_no_unauthenticated_bindings' is proposed to fill the gap. This function will use the IAM policies describe API to check for non-default bindings to system:unauthenticated.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_policy_no_unauthenticated_bindings)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.1.10",
    "title": "Avoid non-default bindings to system:authenticated",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "iam_bindings_system_authenticated_check",
        "description": "Checks if non-default bindings to system:authenticated exist",
        "gcp_api_example": "gcloud iam roles list --project=PROJECT_ID",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the provided list could be mapped to the compliance requirement. A new function 'iam_bindings_system_authenticated_check' is proposed to fill the gap. This function will check for non-default bindings to system:authenticated in IAM roles.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (iam_bindings_system_authenticated_check)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.2.1",
    "title": "Ensure that the cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces.",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_pod_security_baseline_enforced",
        "description": "Checks if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.enableNodeAutoprovisioning)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_pod_security_baseline_enforced' is proposed to check if the GKE cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces. This function is implementable with the GCP gcloud command-line tool.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_pod_security_baseline_enforced)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.3.1",
    "title": "Ensure that the CNI in use supports Network Policies",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_cni_network_policies_supported",
        "description": "Checks if the CNI in use for the GKE cluster supports Network Policies",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format='value(networkPolicy.enabled)'",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_cni_network_policies_supported' is proposed to check if the CNI in use for the GKE cluster supports Network Policies. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_cni_network_policies_supported)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.3.2",
    "title": "Ensure that all Namespaces have Network Policies defined",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_namespace_network_policy_defined",
        "description": "Checks if all GKE namespaces have network policies defined",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions were found in the database that could cover this compliance requirement. Therefore, a new function 'gke_namespace_network_policy_defined' is proposed. This function will check if all GKE namespaces have network policies defined, which is the requirement of the compliance item. The function is implementable with real GCP APIs.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_namespace_network_policy_defined)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.4.1",
    "title": "Prefer using secrets as files over secrets as environment variables",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "secrets_as_files_preferred",
        "description": "Checks if secrets are stored as files instead of environment variables",
        "gcp_api_example": "gcloud secrets versions access --secret=SECRET_ID --version=VERSION_ID --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'secrets_as_files_preferred' is proposed to fill the gap. This function will check if secrets are stored as files instead of environment variables, which is the requirement of the compliance item.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (secrets_as_files_preferred)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.4.2",
    "title": "Consider external secret storage",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "external_secret_storage_considered",
        "description": "Checks if external secret storage is considered for sensitive data",
        "gcp_api_example": "gcloud secrets list --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of considering external secret storage. Therefore, a new function 'external_secret_storage_considered' is proposed to fill this gap. This function would check if external secret storage is being used for sensitive data in the GCP project.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 260 (storage_bucket_ephemeral_encryption, bigquery_datasets_use_cmek_encryption, storage_objects_confidentiality_protection...)\n- New Functions Proposed: 1 (external_secret_storage_considered)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.5.1",
    "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "container_image_provenance_configured",
        "description": "Checks if ImagePolicyWebhook admission controller is configured for image provenance",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(addonsConfig.imagePolicyConfig.enabled)'",
        "service_category": "Container"
      }
    ],
    "mapping_notes": "No existing functions in the database match the compliance requirement of configuring Image Provenance using ImagePolicyWebhook admission controller. A new function 'container_image_provenance_configured' is proposed to fill this gap. This function will use the GCP 'gcloud' command to check if the ImagePolicyWebhook admission controller is enabled for a given GKE cluster.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 242 (iam_policy_violation_procedure_implementation, iam_resource_policy_absence, iam_policy_disallowed_gcrn_attached...)\n- New Functions Proposed: 1 (container_image_provenance_configured)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.1",
    "title": "Create administrative boundaries between resources using namespaces",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "resource_namespace_boundaries_created",
        "description": "Checks if administrative boundaries have been created between resources using namespaces",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'resource_namespace_boundaries_created' is proposed to fill the gap. This function will check if administrative boundaries have been created between resources using namespaces.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (resource_namespace_boundaries_created)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.2",
    "title": "Ensure that the seccomp profile is set to RuntimeDefault in the pod definitions",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_seccomp_profile_runtime_default",
        "description": "Checks if the seccomp profile is set to RuntimeDefault in the pod definitions",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterIpv4Cidr)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions were found in the database that could cover this compliance requirement. Therefore, a new function 'gke_pod_seccomp_profile_runtime_default' is proposed. This function will check if the seccomp profile is set to RuntimeDefault in the pod definitions in GKE.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_pod_seccomp_profile_runtime_default)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.3",
    "title": "Apply Security Context to Pods and Containers",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_pod_security_context_applied",
        "description": "Checks if security context is applied to GKE pods and containers",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(clusterAutoscaling.status)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided list can cover this compliance requirement. A new function 'gke_pod_security_context_applied' is proposed to check if security context is applied to GKE pods and containers. This function can be implemented using the GCP gcloud command-line tool to describe the cluster and check the security context.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_pod_security_context_applied)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "4.6.4",
    "title": "The default namespace should not be used",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "default_namespace_not_used",
        "description": "Checks if the default namespace is not being used",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'default_namespace_not_used' is proposed to fill the gap. This function will check if the default namespace is not being used in the GCP project.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (default_namespace_not_used)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.1",
    "title": "Ensure Image Vulnerability Scanning is enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "container_registry_image_vulnerability_scanning_enabled",
        "description": "Checks if Image Vulnerability Scanning is enabled for Container Registry",
        "gcp_api_example": "gcloud container images list-tags --show-occurrences --project=PROJECT_ID",
        "service_category": "Container Registry"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance requirement. A new function 'container_registry_image_vulnerability_scanning_enabled' is proposed to check if Image Vulnerability Scanning is enabled for images in the Container Registry. The function uses the 'gcloud container images list-tags' command with the '--show-occurrences' flag to list the vulnerability scanning results for each image.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (container_registry_image_vulnerability_scanning_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.2",
    "title": "Minimize user access to Container Image repositories",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "container_image_repository_minimal_user_access",
        "description": "Checks if user access to Container Image repositories is minimized",
        "gcp_api_example": "gcloud container images list-tags --project=PROJECT_ID",
        "service_category": "Container"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'container_image_repository_minimal_user_access' is proposed to fill the gap. This function will check if user access to Container Image repositories is minimized, which aligns with the compliance item requirement.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (container_image_repository_minimal_user_access)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.3",
    "title": "Minimize cluster access to read-only for Container Image repositories",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_container_image_repo_read_only",
        "description": "Checks if the GKE cluster has read-only access to the Container Image repositories",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(cluster.containerImageRepoReadOnly)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_container_image_repo_read_only' is proposed to check if the GKE cluster has read-only access to the Container Image repositories. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_container_image_repo_read_only)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.1.4",
    "title": "Ensure only trusted container images are used",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_trusted_container_images_used",
        "description": "Checks if only trusted container images are used in Google Kubernetes Engine",
        "gcp_api_example": "gcloud container images list --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance item. A new function 'gke_trusted_container_images_used' is proposed to fill the gap. This function will check if only trusted container images are used in Google Kubernetes Engine.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_trusted_container_images_used)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.2.1",
    "title": "Ensure GKE clusters are not running using the Compute Engine default service account",
    "existing_functions_mapped": [
      "compute_instance_no_default_service_account"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_no_default_service_account",
        "description": "Checks if GKE clusters are not running using the Compute Engine default service account",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value[default](nodeConfig.serviceAccount)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "The existing function 'compute_instance_no_default_service_account' partially covers the compliance requirement but it is specific to Compute Engine instances and not GKE clusters. Therefore, a new function 'gke_cluster_no_default_service_account' is proposed to specifically check GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 1 (compute_instance_no_default_service_account)\n- Unmapped Potential Functions: 739 (compute_instance_data_protection, iam_policy_violation_procedure_implementation, iam_user_unique_identification_authentication...)\n- New Functions Proposed: 1 (gke_cluster_no_default_service_account)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.2.2",
    "title": "Prefer using dedicated GCP Service Accounts and Workload Identity",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 4,
    "new_functions_needed": [],
    "mapping_notes": "Failed to process due to API errors. Coverage score 4/10 calculated based on basic analysis."
  },
  {
    "compliance_id": "5.3.1",
    "title": "Ensure Kubernetes Secrets are encrypted using keys managed in Cloud KMS",
    "existing_functions_mapped": [
      "container_gke_clusters_secrets_encrypted_with_kms",
      "container_gke_secrets_encrypted_with_kms"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [],
    "mapping_notes": "The compliance requirement is fully covered by the existing functions 'container_gke_clusters_secrets_encrypted_with_kms' and 'container_gke_secrets_encrypted_with_kms'. These functions check if Kubernetes Secrets are encrypted using keys managed in Cloud KMS, which aligns with the compliance requirement. Therefore, no new functions are needed, and the coverage is assessed as complete.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 2 (container_gke_clusters_secrets_encrypted_with_kms, container_gke_secrets_encrypted_with_kms)\n- Unmapped Potential Functions: 324 (storage_bucket_ephemeral_encryption, network_load_balancer_backend_https_google_managed_ssl, kms_keys_iam_policy_no_blocked_actions...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.4.1",
    "title": "Ensure the GKE Metadata Server is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_metadata_server_enabled",
        "description": "Checks if the GKE Metadata Server is enabled for a GKE cluster",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(workloadIdentityConfig.workloadPool)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database can be mapped or renamed to cover this compliance item. A new function 'gke_cluster_metadata_server_enabled' is proposed to check if the GKE Metadata Server is enabled for a GKE cluster. The GCP API command 'gcloud container clusters describe' can be used to implement this function.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_cluster_metadata_server_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.1",
    "title": "Ensure Container-Optimized OS (cos_containerd) is used for GKE Node images",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_node_images_cos_containerd",
        "description": "Checks if GKE Node images are using Container-Optimized OS (cos_containerd)",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(nodeConfig.imageType)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database can cover this compliance requirement. A new function 'gke_node_images_cos_containerd' is proposed to check if GKE Node images are using Container-Optimized OS (cos_containerd). This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_node_images_cos_containerd)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.2",
    "title": "Ensure Node Auto-Repair is Enabled for GKE Nodes",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_node_auto_repair_enabled",
        "description": "Checks if Node Auto-Repair is enabled for GKE Nodes",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE_NAME --format='value(nodePools.autorepair)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing function in the database matches the compliance requirement. A new function 'gke_cluster_node_auto_repair_enabled' is proposed to check if Node Auto-Repair is enabled for GKE Nodes.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_cluster_node_auto_repair_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.3",
    "title": "Ensure Node Auto-Upgrade is Enabled for GKE Nodes",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 4,
    "new_functions_needed": [],
    "mapping_notes": "Failed to process due to API errors. Coverage score 4/10 calculated based on basic analysis."
  },
  {
    "compliance_id": "5.5.4",
    "title": "When creating New Clusters - Automate GKE version management using Release Channels",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 4,
    "new_functions_needed": [],
    "mapping_notes": "Failed to process due to API errors. Coverage score 4/10 calculated based on basic analysis."
  },
  {
    "compliance_id": "5.5.5",
    "title": "Ensure Shielded GKE Nodes are Enabled",
    "existing_functions_mapped": [
      "compute_instance_shielded_vm_enabled"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_shielded_nodes_enabled",
        "description": "Checks if shielded nodes are enabled for GKE clusters",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(shieldedNodes.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "The existing function 'compute_instance_shielded_vm_enabled' partially covers the compliance requirement but it is specific to Compute Engine instances and not GKE nodes. Therefore, a new function 'gke_cluster_shielded_nodes_enabled' is proposed to specifically check if shielded nodes are enabled for GKE clusters.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 1 (compute_instance_shielded_vm_enabled)\n- Unmapped Potential Functions: 359 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_cluster_shielded_nodes_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.6",
    "title": "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_shielded_nodes_integrity_monitoring_enabled",
        "description": "Checks if Integrity Monitoring is enabled for Shielded GKE Nodes",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(shieldedNodes.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing function in the database matches the compliance requirement. A new function 'gke_shielded_nodes_integrity_monitoring_enabled' is proposed to check if Integrity Monitoring is enabled for Shielded GKE Nodes.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 634 (logging_audit_records_processing_capability, compute_instance_data_protection, sql_instance_private_ip_configured...)\n- New Functions Proposed: 1 (gke_shielded_nodes_integrity_monitoring_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.5.7",
    "title": "Ensure Secure Boot for Shielded GKE Nodes is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_nodes_secure_boot_enabled",
        "description": "Checks if Secure Boot is enabled for Shielded GKE Nodes",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --zone=ZONE --format='value(shieldedNodes.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database could be mapped or renamed to fulfill this compliance requirement. A new function 'gke_nodes_secure_boot_enabled' is proposed to check if Secure Boot is enabled for Shielded GKE Nodes. The coverage assessment is set to 7 as the new function should provide high coverage for this specific compliance item.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_nodes_secure_boot_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.1",
    "title": "Enable VPC Flow Logs and Intranode Visibility",
    "existing_functions_mapped": [
      "network_vpc_flow_logs_enabled"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "network_vpc_intranode_visibility_enabled",
        "description": "Checks if Intranode Visibility is enabled for all VPC networks",
        "gcp_api_example": "gcloud compute networks list --format='table(name, x_gcloud_subnet_mode)' --project=PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "The existing function 'network_vpc_flow_logs_enabled' covers the first part of the compliance requirement. However, there is no existing function to check if Intranode Visibility is enabled for all VPC networks. Therefore, a new function 'network_vpc_intranode_visibility_enabled' is suggested to fill this gap.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 1 (network_vpc_flow_logs_enabled)\n- Unmapped Potential Functions: 331 (network_load_balancer_backend_https_google_managed_ssl, compute_cloud_armor_policy_has_rules, network_vpc_firewall_logging_enabled...)\n- New Functions Proposed: 1 (network_vpc_intranode_visibility_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.2",
    "title": "Ensure use of VPC-native clusters",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_vpc_native_enabled",
        "description": "Checks if GKE clusters are using VPC-native mode",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(ipAllocationPolicy.useIpAliases)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database can be used to ensure the use of VPC-native clusters. A new function 'gke_cluster_vpc_native_enabled' is proposed to fill this gap. This function will use the GCP 'gcloud' command-line tool to check the 'ipAllocationPolicy.useIpAliases' property of a GKE cluster, which indicates whether the cluster is using VPC-native mode.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 332 (network_load_balancer_backend_https_google_managed_ssl, compute_cloud_armor_policy_has_rules, network_vpc_firewall_logging_enabled...)\n- New Functions Proposed: 1 (gke_cluster_vpc_native_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.3",
    "title": "Ensure Control Plane Authorized Networks is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_control_plane_authorized_networks_enabled",
        "description": "Checks if Control Plane Authorized Networks is enabled for GKE clusters",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.masterAuthorizedNetworksConfig.enabled)' --project=PROJECT_ID",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_control_plane_authorized_networks_enabled' is proposed to check if Control Plane Authorized Networks is enabled for GKE clusters. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_control_plane_authorized_networks_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.4",
    "title": "Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_private_endpoint_enabled_public_access_disabled",
        "description": "Checks if GKE clusters are created with Private Endpoint Enabled and Public Access Disabled",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --region=REGION --format='value(privateClusterConfig.enablePrivateEndpoint, privateClusterConfig.enablePrivateNodes)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to the compliance requirement. A new function is proposed to check if GKE clusters are created with Private Endpoint Enabled and Public Access Disabled. This function can be implemented using the GCP gcloud command-line tool to describe the cluster and check the 'privateClusterConfig.enablePrivateEndpoint' and 'privateClusterConfig.enablePrivateNodes' fields.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_private_endpoint_enabled_public_access_disabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.5",
    "title": "Ensure clusters are created with Private Nodes",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_private_nodes_enabled",
        "description": "Checks if GKE clusters are created with private nodes",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='get(privateClusterConfig.enablePrivateNodes)' --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_private_nodes_enabled' is proposed to check if GKE clusters are created with private nodes. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_private_nodes_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.6",
    "title": "Consider firewalling GKE worker nodes",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_worker_nodes_firewall_configured",
        "description": "Checks if firewall rules are configured for GKE worker nodes",
        "gcp_api_example": "gcloud compute firewall-rules list --filter='name~gke-worker'",
        "service_category": "Network"
      }
    ],
    "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function 'gke_worker_nodes_firewall_configured' is proposed to check if firewall rules are configured for GKE worker nodes. This function can be implemented using the 'gcloud compute firewall-rules list' command with a filter to list only the firewall rules related to GKE worker nodes.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 680 (compute_instance_data_protection, sql_instance_private_ip_configured, network_load_balancer_backend_https_google_managed_ssl...)\n- New Functions Proposed: 1 (gke_worker_nodes_firewall_configured)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.6.7",
    "title": "Ensure use of Google-managed SSL Certificates",
    "existing_functions_mapped": [
      "network_load_balancer_backend_https_google_managed_ssl",
      "network_load_balancer_ssl_google_managed_certificates",
      "network_tcp_udp_load_balancer_ssl_certificates_google_managed",
      "network_load_balancer_ssl_certificates_google_managed",
      "network_load_balancer_backend_https_certificates_google_managed",
      "network_external_https_load_balancer_ssl_certificates_google_managed",
      "network_load_balancer_ssl_certificate_google_managed",
      "network_https_load_balancer_ssl_certificates_google_managed",
      "network_https_load_balancer_backend_ssl_tls_certificate_google_managed",
      "network_load_balancer_backend_ssl_certificate_google_managed",
      "network_external_load_balancer_ssl_certificates_google_managed",
      "network_https_load_balancer_ssl_certificate_google_managed",
      "network_global_load_balancer_ssl_certificates_google_managed",
      "network_classic_load_balancer_ssl_certificates_google_managed",
      "network_load_balancer_backend_ssl_google_managed",
      "network_load_balancer_backend_google_managed_ssl_required"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [],
    "mapping_notes": "The compliance requirement 'Ensure use of Google-managed SSL Certificates' is fully covered by the existing functions in the database. These functions check for the use of Google-managed SSL certificates in various network resources such as load balancers. Therefore, no new functions or renaming of existing functions are needed.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 16 (network_load_balancer_backend_https_google_managed_ssl, network_load_balancer_ssl_google_managed_certificates, network_tcp_udp_load_balancer_ssl_certificates_google_managed, network_load_balancer_ssl_certificates_google_managed, network_load_balancer_backend_https_certificates_google_managed, network_external_https_load_balancer_ssl_certificates_google_managed, network_load_balancer_ssl_certificate_google_managed, network_https_load_balancer_ssl_certificates_google_managed, network_https_load_balancer_backend_ssl_tls_certificate_google_managed, network_load_balancer_backend_ssl_certificate_google_managed, network_external_load_balancer_ssl_certificates_google_managed, network_https_load_balancer_ssl_certificate_google_managed, network_global_load_balancer_ssl_certificates_google_managed, network_classic_load_balancer_ssl_certificates_google_managed, network_load_balancer_backend_ssl_google_managed, network_load_balancer_backend_google_managed_ssl_required)\n- Unmapped Potential Functions: 310 (storage_bucket_ephemeral_encryption, kms_keys_iam_policy_no_blocked_actions, logging_cloudkms_encryption_configured...)\n- New Functions Proposed: 0 (None)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.7.1",
    "title": "Ensure Logging and Cloud Monitoring is Enabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 4,
    "new_functions_needed": [],
    "mapping_notes": "Failed to process due to API errors. Coverage score 4/10 calculated based on basic analysis."
  },
  {
    "compliance_id": "5.7.2",
    "title": "Enable Linux auditd logging",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "compute_instance_auditd_logging_enabled",
        "description": "Checks if Linux auditd logging is enabled on Compute Engine instances",
        "gcp_api_example": "gcloud compute instances describe INSTANCE_ID --project=PROJECT_ID --zone=ZONE",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database match the compliance requirement of enabling Linux auditd logging. A new function, compute_instance_auditd_logging_enabled, is proposed to fill this gap. This function will check if Linux auditd logging is enabled on Compute Engine instances.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 304 (logging_audit_records_processing_capability, pubsub_topic_audit_logging_enabled, appengine_environment_logging_enabled...)\n- New Functions Proposed: 1 (compute_instance_auditd_logging_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.8.1",
    "title": "Ensure authentication using Client Certificates is Disabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 4,
    "new_functions_needed": [],
    "mapping_notes": "Failed to process due to API errors. Coverage score 4/10 calculated based on basic analysis."
  },
  {
    "compliance_id": "5.8.2",
    "title": "Manage Kubernetes RBAC users with Google Groups for GKE",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_rbac_users_managed_with_google_groups",
        "description": "Checks if Kubernetes RBAC users are managed with Google Groups for GKE",
        "gcp_api_example": "gcloud container clusters get-credentials CLUSTER_NAME --zone=ZONE --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database match the compliance requirement of managing Kubernetes RBAC users with Google Groups for GKE. Therefore, a new function 'gke_rbac_users_managed_with_google_groups' is proposed to fill this gap. This function will use the 'gcloud container clusters get-credentials' command to fetch the cluster credentials and then check if the RBAC users are managed with Google Groups.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_rbac_users_managed_with_google_groups)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.8.3",
    "title": "Ensure Legacy Authorization (ABAC) is Disabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "iam_legacy_authorization_disabled",
        "description": "Checks if Legacy Authorization (ABAC) is disabled for all GCP services",
        "gcp_api_example": "gcloud projects get-iam-policy PROJECT_ID --flatten='bindings[].role' --format='table(bindings.role)'",
        "service_category": "Identity"
      }
    ],
    "mapping_notes": "No existing functions in the database can cover this compliance requirement. A new function 'iam_legacy_authorization_disabled' is proposed to check if Legacy Authorization (ABAC) is disabled for all GCP services.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 392 (iam_policy_violation_procedure_implementation, iam_user_unique_identification_authentication, iam_roles_access_restriction...)\n- New Functions Proposed: 1 (iam_legacy_authorization_disabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.9.1",
    "title": "Enable Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD)",
    "existing_functions_mapped": [
      "compute_persistent_disks_encrypted_with_cmek"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_pd_cmek_enabled",
        "description": "Checks if Customer-Managed Encryption Keys (CMEK) are enabled for GKE Persistent Disks (PD)",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_ID --format='get(databaseEncryption.keyName)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "The existing function 'compute_persistent_disks_encrypted_with_cmek' partially covers the compliance requirement as it checks for CMEK on Compute Engine persistent disks. However, it does not specifically check for GKE Persistent Disks (PD). Therefore, a new function 'gke_pd_cmek_enabled' is proposed to specifically check if CMEK is enabled for GKE PDs.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 1 (compute_persistent_disks_encrypted_with_cmek)\n- Unmapped Potential Functions: 649 (storage_bucket_ephemeral_encryption, compute_instance_data_protection, sql_instance_private_ip_configured...)\n- New Functions Proposed: 1 (gke_pd_cmek_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.9.2",
    "title": "Enable Customer-Managed Encryption Keys (CMEK) for Boot Disks",
    "existing_functions_mapped": [
      "compute_disk_encryption_enabled_by_default",
      "compute_persistent_disks_encrypted_with_cmek"
    ],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 8,
    "new_functions_needed": [
      {
        "function_name": "compute_boot_disk_cmek_enabled",
        "description": "Checks if Customer-Managed Encryption Keys (CMEK) are enabled for boot disks",
        "gcp_api_example": "gcloud compute disks describe --project=PROJECT_ID",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "The existing functions 'compute_disk_encryption_enabled_by_default' and 'compute_persistent_disks_encrypted_with_cmek' partially cover the compliance requirement. However, they do not specifically check for boot disks. Therefore, a new function 'compute_boot_disk_cmek_enabled' is proposed to fill this gap.\n\nCoverage Analysis:\n- Coverage Score: 8/10\n- Existing Functions Mapped: 2 (compute_disk_encryption_enabled_by_default, compute_persistent_disks_encrypted_with_cmek)\n- Unmapped Potential Functions: 324 (storage_bucket_ephemeral_encryption, network_load_balancer_backend_https_google_managed_ssl, kms_keys_iam_policy_no_blocked_actions...)\n- New Functions Proposed: 1 (compute_boot_disk_cmek_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.10.1",
    "title": "Ensure Kubernetes Web UI is Disabled",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_web_ui_disabled",
        "description": "Checks if the Kubernetes Web UI is disabled for GKE clusters",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --zone=ZONE --format='value(masterAuth.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database could be mapped to this compliance item. A new function 'gke_cluster_web_ui_disabled' is proposed to check if the Kubernetes Web UI is disabled for GKE clusters. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_web_ui_disabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.10.2",
    "title": "Ensure that Alpha clusters are not used for production workloads",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "gke_cluster_alpha_features_disabled",
        "description": "Checks if any alpha features are enabled in GKE clusters",
        "gcp_api_example": "gcloud container clusters describe --project=PROJECT_ID --zone=ZONE --format=json",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the provided database can cover this compliance requirement. A new function 'gke_cluster_alpha_features_disabled' is proposed to check if any alpha features are enabled in GKE clusters. This function can be implemented using the 'gcloud container clusters describe' command.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (gke_cluster_alpha_features_disabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.10.3",
    "title": "Consider GKE Sandbox for running untrusted workloads",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 6,
    "new_functions_needed": [
      {
        "function_name": "gke_sandbox_enabled_for_untrusted_workloads",
        "description": "Checks if GKE Sandbox is enabled for running untrusted workloads",
        "gcp_api_example": "gcloud container clusters describe CLUSTER_NAME --format='value(cluster.sandboxConfig.enabled)'",
        "service_category": "Compute"
      }
    ],
    "mapping_notes": "No existing functions in the database could be mapped to this compliance item. A new function 'gke_sandbox_enabled_for_untrusted_workloads' is proposed to check if GKE Sandbox is enabled for running untrusted workloads.\n\nCoverage Analysis:\n- Coverage Score: 6/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 360 (compute_instance_data_protection, sql_instance_private_ip_configured, compute_cloud_armor_policy_has_rules...)\n- New Functions Proposed: 1 (gke_sandbox_enabled_for_untrusted_workloads)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  },
  {
    "compliance_id": "5.10.4",
    "title": "Enable Security Posture",
    "existing_functions_mapped": [],
    "functions_to_rename": [],
    "functions_to_consolidate": [],
    "coverage_assessment": 2,
    "new_functions_needed": [
      {
        "function_name": "security_posture_enabled",
        "description": "Checks if the security posture is enabled",
        "gcp_api_example": "gcloud security posture get --project=PROJECT_ID",
        "service_category": "Security"
      }
    ],
    "mapping_notes": "No existing functions in the provided list can be mapped to the compliance item 'Enable Security Posture'. Therefore, a new function 'security_posture_enabled' is suggested to fill the gap. This function will check if the security posture is enabled in the GCP project.\n\nCoverage Analysis:\n- Coverage Score: 2/10\n- Existing Functions Mapped: 0 (None)\n- Unmapped Potential Functions: 0 (None)\n- New Functions Proposed: 1 (security_posture_enabled)\n\nTotal Coverage: The combination of mapped existing functions + unmapped potential functions + new proposed functions should provide comprehensive compliance coverage."
  }
]