[
  {
    "name": "gcp_iam_automated_account_management",
    "gcp_api": "gcp.iam.projects.serviceAccounts.create()",
    "service": "gcp_iam",
    "rationale": "Automated account management is needed to create, enable, modify, disable, and remove accounts programmatically."
  },
  {
    "name": "gcp_iam_account_usage_monitoring",
    "gcp_api": "gcp.logging.entries.list()",
    "service": "gcp_logging",
    "rationale": "Monitoring account usage is essential for compliance with account management requirements."
  },
  {
    "name": "gcp_network_access_enforcement",
    "gcp_api": "gcp.compute.firewalls.insert()",
    "service": "gcp_compute",
    "rationale": "To enforce access policies at the network level, ensuring only authorized access is permitted."
  },
  {
    "name": "gcp_network_information_flow_control",
    "gcp_api": "gcp.compute.routes.insert()",
    "service": "gcp_compute",
    "rationale": "To enforce information flow control policies within and between systems."
  },
  {
    "name": "gcp_iam_separation_of_duties_enforcement",
    "gcp_api": "gcp.iam.roles.create()",
    "service": "gcp_iam",
    "rationale": "To define and enforce separation of duties through role-based access controls."
  },
  {
    "name": "gcp_iam_privileged_account_restriction",
    "gcp_api": "gcp.iam.setPolicy()",
    "service": "gcp_iam",
    "rationale": "To restrict privileged accounts to organization-defined personnel or roles."
  },
  {
    "name": "gcp_logging_privileged_function_execution",
    "gcp_api": "gcp.logging.writeLogEntries()",
    "service": "gcp_logging",
    "rationale": "To log the execution of privileged functions."
  },
  {
    "name": "gcp_iam_invalid_logon_attempt_limit",
    "gcp_api": "gcp.iam.setPolicy()",
    "service": "gcp_iam",
    "rationale": "To enforce a limit on consecutive invalid logon attempts and take predefined actions."
  },
  {
    "name": "gcp_compute_display_login_banner",
    "gcp_api": "gcp.compute.instances.setMetadata()",
    "service": "gcp_compute",
    "rationale": "To display a system use notification message or banner before granting access."
  },
  {
    "name": "gcp_iam_notify_last_logon",
    "gcp_api": "gcp.iam.setPolicy()",
    "service": "gcp_iam",
    "rationale": "To notify users of the date and time of the last logon upon successful logon."
  },
  {
    "name": "gcp_iam_limit_concurrent_sessions",
    "gcp_api": "gcp.iam.setPolicy()",
    "service": "gcp_iam",
    "rationale": "To limit the number of concurrent sessions for each account or account type."
  },
  {
    "name": "gcp_compute_device_lock_inactivity_timeout",
    "gcp_api": "gcp.compute.instances.setMetadata()",
    "service": "gcp_compute",
    "rationale": "To programmatically enforce device lock after a period of inactivity, a function is needed to configure VM instances with an inactivity timeout that triggers a lock."
  },
  {
    "name": "gcp_iam_session_termination_on_inactivity",
    "gcp_api": "gcp.iam.sessions.delete()",
    "service": "gcp_iam",
    "rationale": "To automatically terminate user sessions after a period of inactivity, a function is needed to manage session lifetimes and enforce termination."
  },
  {
    "name": "gcp_iam_anonymous_access_audit",
    "gcp_api": "gcp.iam.policies.get()",
    "service": "gcp_iam",
    "rationale": "To identify actions that can be performed without authentication, a function is needed to audit IAM policies for anonymous access permissions."
  },
  {
    "name": "gcp_storage_attribute_association_management",
    "gcp_api": "gcp.storage.buckets.update()",
    "service": "gcp_storage",
    "rationale": "To manage security and privacy attributes, a function is needed to associate and audit attributes on storage objects."
  },
  {
    "name": "gcp_compute_dynamic_attribute_association",
    "gcp_api": "gcp.compute.instances.setMetadata()",
    "service": "gcp_compute",
    "rationale": "To dynamically associate attributes with compute resources, a function is needed to manage metadata attributes."
  },
  {
    "name": "gcp_storage_public_access_monitoring",
    "gcp_api": "gcp.storage.buckets.getIamPolicy()",
    "service": "gcp_storage",
    "rationale": "To monitor and alert on changes to public access settings for storage buckets."
  },
  {
    "name": "gcp_compute_public_ip_monitoring",
    "gcp_api": "gcp.compute.instances.list()",
    "service": "gcp_compute",
    "rationale": "To detect and alert on instances with public IPs that may expose nonpublic information."
  },
  {
    "name": "gcp_bigquery_data_mining_detection",
    "gcp_api": "gcp.bigquery.jobs.query()",
    "service": "gcp_bigquery",
    "rationale": "To detect patterns indicative of unauthorized data mining activities."
  },
  {
    "name": "gcp_iam_access_decision_logging",
    "gcp_api": "gcp.logging.entries.list()",
    "service": "gcp_logging",
    "rationale": "To log and review access control decisions for auditing and compliance."
  },
  {
    "name": "gcp_compute_reference_monitor_implementation",
    "gcp_api": "gcp.compute.firewalls.insert()",
    "service": "gcp_compute",
    "rationale": "To implement a reference monitor by configuring firewall rules that are tamper-proof and always invoked."
  },
  {
    "name": "gcp_logging_audit_record_content_verification",
    "gcp_api": "gcp.logging.entries.list()",
    "service": "gcp_logging",
    "rationale": "To ensure audit records contain all necessary information such as event type, timestamp, source, and outcome."
  },
  {
    "name": "gcp_logging_storage_capacity_allocation",
    "gcp_api": "gcp.logging.sinks.create()",
    "service": "gcp_logging",
    "rationale": "To allocate and manage audit log storage capacity according to organizational requirements."
  },
  {
    "name": "gcp_logging_failure_alerts",
    "gcp_api": "gcp.monitoring.alertPolicies.create()",
    "service": "gcp_monitoring",
    "rationale": "To alert designated personnel in case of audit logging process failures."
  },
  {
    "name": "gcp_monitoring_plan_of_action_automation",
    "gcp_api": "gcp.monitoring.create_plan_of_action()",
    "service": "gcp_monitoring",
    "rationale": "Automated mechanisms are needed to ensure the accuracy, currency, and availability of the plan of action and milestones."
  },
  {
    "name": "gcp_iam_authorization_management",
    "gcp_api": "gcp.iam.manage_authorizations()",
    "service": "gcp_iam",
    "rationale": "Programmatic management of authorizations is required to assign and update authorizing officials for systems and common controls."
  },
  {
    "name": "gcp_monitoring_continuous_monitoring_strategy",
    "gcp_api": "gcp.monitoring.create_continuous_monitoring_strategy()",
    "service": "gcp_monitoring",
    "rationale": "A comprehensive strategy for continuous monitoring at the system level is needed to align with organizational strategies."
  },
  {
    "name": "gcp_security_penetration_testing",
    "gcp_api": "gcp.security.perform_penetration_test()",
    "service": "gcp_security",
    "rationale": "Automated support for scheduling and conducting penetration tests is needed, as current GCP functions do not cover this."
  },
  {
    "name": "gcp_network_internal_connection_authorization",
    "gcp_api": "gcp.network.authorize_internal_connections()",
    "service": "gcp_network",
    "rationale": "Programmatic authorization and compliance checks for internal system connections are needed to ensure security and privacy compliance."
  },
  {
    "name": "gcp_compute_baseline_configuration_automation",
    "gcp_api": "gcp.compute.instances.get()",
    "service": "compute",
    "rationale": "To automate the maintenance of baseline configurations for compute instances."
  },
  {
    "name": "gcp_logging_configuration_change_tracking",
    "gcp_api": "gcp.logging.entries.list()",
    "service": "logging",
    "rationale": "To track and document configuration changes automatically."
  },
  {
    "name": "gcp_security_impact_analysis_tool",
    "gcp_api": "gcp.securitycenter.findings.list()",
    "service": "securitycenter",
    "rationale": "To analyze potential impacts of changes on security and privacy."
  },
  {
    "name": "gcp_iam_access_restriction_enforcement",
    "gcp_api": "gcp.iam.roles.list()",
    "service": "iam",
    "rationale": "To enforce and audit access restrictions programmatically."
  }
]