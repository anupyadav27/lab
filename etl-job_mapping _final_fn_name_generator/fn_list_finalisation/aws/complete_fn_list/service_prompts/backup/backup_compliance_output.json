{
  "scan_metadata": {
    "description": "backup - Compliance Functions Mapping - OPTIMIZED VERSION",
    "total_services": 1,
    "total_check_functions": 10,
    "total_unique_functions": 10,
    "total_duplicates_removed": 0,
    "generated_from": "backup compliance functions",
    "last_updated": "2025-08-24",
    "optimization_notes": "Intelligently categorized functions by cloud security expert analysis, grouped by service, simplified to 4 clear categories with execution types and remediation effort classification"
  },
  "services": {
    "backup": {
      "service_name": "backup",
      "service_category": "Storage & Database",
      "check_functions": [
        {
          "function_name": "backup_plans_exist",
          "category": "backup",
          "execution_type": "Code Executable - API call to check backup plan existence",
          "description": "Checks if backup plans exist",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_recovery_point_encrypted",
          "category": "backup",
          "execution_type": "Code Executable - API call to check recovery point encryption",
          "description": "Checks if recovery points are encrypted",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_reportplans_exist",
          "category": "backup",
          "execution_type": "Code Executable - API call to check report plan existence",
          "description": "Checks if backup report plans exist",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_vaults_encrypted",
          "category": "backup",
          "execution_type": "Code Executable - API call to check vault encryption",
          "description": "Checks if backup vaults are encrypted",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_vaults_exist",
          "category": "backup",
          "execution_type": "Code Executable - API call to check vault existence",
          "description": "Checks if backup vaults exist",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_window_configured",
          "category": "config",
          "execution_type": "Code Executable - API call to check backup window configuration",
          "description": "Checks if backup window is configured",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_plan_template_creation_check",
          "category": "config",
          "execution_type": "Code Executable - API call to check backup plan template creation",
          "description": "Checks if backup plan template is created",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_plan_name_specification_check",
          "category": "config",
          "execution_type": "Code Executable - API call to check backup plan name specification",
          "description": "Checks if backup plan name is specified",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "backup_rules_definition_check",
          "category": "config",
          "execution_type": "Code Executable - API call to check backup rules definition",
          "description": "Checks if backup rules are defined",
          "remediation_effort": "Programmable"
        },
        {
          "function_name": "efs_file_systems_backup_enabled",
          "category": "backup",
          "execution_type": "Code Executable - API call to check EFS backup settings",
          "description": "Checks if EFS file systems have backup enabled",
          "remediation_effort": "Programmable"
        }
      ],
      "check_count": 10,
      "duplicates_found": 0
    }
  },
  "category_summary": {
    "config": 4,
    "monitoring": 0,
    "backup": 6,
    "logging": 0
  },
  "execution_type_summary": {
    "code_executable": 10,
    "manual_effort": 0,
    "hybrid_approach": 0
  },
  "duplicate_analysis": {
    "total_duplicates_found": 0,
    "duplicate_categories": {
      "exact_name_duplicates": 0,
      "functional_duplicates": 0,
      "similar_purpose_duplicates": 0
    },
    "services_with_most_duplicates": []
  }
}
