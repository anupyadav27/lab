{
  "service_name": "keyvault",
  "display_name": "Azure Keyvault",
  "check_count": 17,
  "check_functions": [
    {"name": "defender_keyvault_enabled", "category": "security", "description": "Checks if Defender for Key Vault is enabled.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_private_endpoint_used", "category": "security", "description": "Checks if Key Vault private endpoint is used.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "azure_keyvault_rbac_enabled", "category": "security", "description": "Checks if Azure Key Vault RBAC is enabled.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_managed_ca_root_ca_disabled", "category": "security", "description": "Checks if managed CA root CA is disabled in Key Vault.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_key_rbac_blocked_actions", "category": "security", "description": "Checks if Key Vault key RBAC blocked actions are enforced.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_key_not_scheduled_for_deletion", "category": "security", "description": "Checks if Key Vault key is not scheduled for deletion.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_key_rbac_no_blocked_actions", "category": "security", "description": "Checks if Key Vault key RBAC has no blocked actions.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_key_ml_endpoint_configuration", "category": "security", "description": "Checks if Key Vault key ML endpoint configuration is set.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_ml_notebook_instance_keyvaultkeyid_specified", "category": "security", "description": "Checks if ML notebook instance Key Vault key ID is specified.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_key_rbac_blocked_actions_disallowed", "category": "security", "description": "Checks if Key Vault key RBAC blocked actions are disallowed.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_managed_ca_disabled_root_ca_status", "category": "security", "description": "Checks if managed CA disabled root CA status is set in Key Vault.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_secret_rotation_frequency", "category": "security", "description": "Checks if Key Vault secret rotation frequency is set.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_secret_unused_days", "category": "security", "description": "Checks if Key Vault secret unused days are tracked.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_key_ml_endpoint_configuration_exists", "category": "security", "description": "Checks if Key Vault key ML endpoint configuration exists.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_ml_notebook_keyvaultkeyid_specified", "category": "security", "description": "Checks if ML notebook Key Vault key ID is specified.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_personal_information_handling_minimized_key_personnel", "category": "security", "description": "Checks if personal information handling is minimized for key personnel in Key Vault.", "execution_type": "Code Executable", "remediation_effort": "Programmable"},
    {"name": "keyvault_ephi_encryption_enabled", "category": "security", "description": "Checks if ePHI encryption is enabled in Key Vault.", "execution_type": "Code Executable", "remediation_effort": "Programmable"}
  ],
  "original_categories": [
    "Identity",
    "Security"
  ],
  "categorization_methods": [
    "sdk_example"
  ],
  "original_name": "keyvault_alt"
}