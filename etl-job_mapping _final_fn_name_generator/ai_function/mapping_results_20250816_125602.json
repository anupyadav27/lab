{
  "metadata": {
    "generated_at": "2025-08-16T14:09:00.340507",
    "compliance_framework": "CIS AWS COMPUTE SERVICES BENCHMARK V1.1.0.json",
    "prowler_database_functions": 563,
    "processing_stats": {
      "total_items": 68,
      "processed": 68,
      "skipped_manual": 0,
      "mapped_complete": 21,
      "mapped_partial": 19,
      "mapped_none": 28,
      "new_functions_suggested": 51
    }
  },
  "mapping_results": [
    {
      "compliance_id": "2.1.1",
      "title": "Ensure Consistent Naming Convention is used for Organizational AMI",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_ami_naming_convention_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to check if the naming convention for AMIs is followed consistently across the organization."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'ec2_ami_naming_convention_check' is suggested which uses the 'ec2.describe_images()' boto3 API to fetch the details of all AMIs and checks if their names follow the documented naming convention."
    },
    {
      "compliance_id": "2.1.2",
      "title": "Ensure Amazon Machine Images (AMIs) are encrypted",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_snapshots_encrypted"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_ami_encryption_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to directly check if the AMIs are encrypted"
        }
      ],
      "mapping_notes": "The existing functions 'ec2_ebs_default_encryption' and 'ec2_ebs_snapshots_encrypted' partially cover the compliance requirement as they ensure EBS volumes and snapshots are encrypted. However, they do not directly check if the AMIs are encrypted. Hence, a new function 'ec2_ami_encryption_check' is suggested."
    },
    {
      "compliance_id": "2.1.3",
      "title": "Ensure Only Approved Amazon Machine Images (AMIs) are Used",
      "existing_functions_mapped": [
        "ec2_ami_public"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_ami_approved_check",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to check if the AMI used is approved by the organization"
        }
      ],
      "mapping_notes": "The existing function 'ec2_ami_public' can check if the AMI is public, but it does not ensure that the AMI is approved by the organization. Therefore, a new function 'ec2_ami_approved_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "2.1.4",
      "title": "Ensure Images (AMI) are not older than 90 days",
      "existing_functions_mapped": [
        "ec2_instance_older_than_specific_days"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_ami_older_than_90_days",
          "boto3_api": "ec2.describe_images()",
          "service": "ec2",
          "rationale": "This function is needed to specifically check if any AMIs are older than 90 days"
        }
      ],
      "mapping_notes": "The existing function 'ec2_instance_older_than_specific_days' partially covers the requirement as it checks for EC2 instances older than specific days. However, it does not specifically check for AMIs. Therefore, a new function 'ec2_ami_older_than_90_days' is suggested to fully cover the requirement."
    },
    {
      "compliance_id": "2.1.5",
      "title": "Ensure Images are not Publicly Available",
      "existing_functions_mapped": [
        "ec2_ami_public"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ec2_ami_public' checks if an Amazon Machine Image (AMI) is publicly accessible, which directly aligns with the compliance requirement to ensure images are not publicly available."
    },
    {
      "compliance_id": "2.2.1",
      "title": "Ensure EBS volume encryption is enabled",
      "existing_functions_mapped": [
        "ec2_ebs_default_encryption",
        "ec2_ebs_volume_encryption"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ec2_ebs_default_encryption' and 'ec2_ebs_volume_encryption' cover the requirement of ensuring EBS volume encryption is enabled."
    },
    {
      "compliance_id": "2.2.2",
      "title": "Ensure Public Access to EBS Snapshots is Disabled",
      "existing_functions_mapped": [
        "ec2_ebs_public_snapshot",
        "ec2_ebs_snapshot_account_block_public_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ec2_ebs_public_snapshot' and 'ec2_ebs_snapshot_account_block_public_access' adequately cover the compliance requirement of ensuring public access to EBS snapshots is disabled."
    },
    {
      "compliance_id": "2.2.3",
      "title": "Ensure EBS volume snapshots are encrypted",
      "existing_functions_mapped": [
        "ec2_ebs_snapshots_encrypted"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ec2_ebs_snapshots_encrypted' directly addresses the requirement of ensuring EBS volume snapshots are encrypted."
    },
    {
      "compliance_id": "2.2.4",
      "title": "Ensure unused EBS volumes are removed",
      "existing_functions_mapped": [
        "ec2_ebs_volume_encryption",
        "ec2_ebs_volume_protected_by_backup_plan",
        "ec2_ebs_volume_snapshots_exists"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_unused_ebs_volumes_check",
          "boto3_api": "ec2.describe_volumes()",
          "service": "ec2",
          "rationale": "This function is needed to identify and remove any unused EBS volumes in the AWS account"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage as they check for EBS volume encryption, backup protection, and existence of snapshots. However, there is no function to specifically check for unused EBS volumes, hence a new function is suggested."
    },
    {
      "compliance_id": "2.3",
      "title": "Ensure Tag Policies are Enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "organizations_tag_policies_enabled",
          "boto3_api": "organizations.list_policies(Filter='TAG_POLICY')",
          "service": "organizations",
          "rationale": "This function is needed to check if any tag policies are enabled in the organization."
        }
      ],
      "mapping_notes": "No existing functions in the provided list directly relate to checking if tag policies are enabled. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "2.4",
      "title": "Ensure an Organizational EC2 Tag Policy has been Created",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_organizational_tag_policy_created",
          "boto3_api": "organizations.list_policies()",
          "service": "ec2",
          "rationale": "This function is needed to check if an organizational EC2 tag policy has been created."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring an organizational EC2 tag policy has been created. A new function, ec2_organizational_tag_policy_created, is suggested to fill this gap."
    },
    {
      "compliance_id": "2.5",
      "title": "Ensure no AWS EC2 Instances are Older than 180 days",
      "existing_functions_mapped": [
        "ec2_instance_older_than_specific_days"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ec2_instance_older_than_specific_days' can be used to check if any EC2 instances are older than 180 days. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "2.6",
      "title": "Ensure detailed monitoring is enable for production EC2 Instances",
      "existing_functions_mapped": [
        "ec2_instance_detailed_monitoring_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ec2_instance_detailed_monitoring_enabled' directly addresses the requirement of ensuring detailed monitoring is enabled for EC2 instances."
    },
    {
      "compliance_id": "2.7",
      "title": "Ensure Default EC2 Security groups are not being used.",
      "existing_functions_mapped": [
        "ec2_securitygroup_default_restrict_traffic"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_custom_security_group_assigned",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "This function is needed to check if a custom security group is assigned to each EC2 instance at launch."
        }
      ],
      "mapping_notes": "The existing function 'ec2_securitygroup_default_restrict_traffic' can check if the default security group restricts traffic, but it does not ensure that a custom security group is assigned to each EC2 instance. Therefore, a new function 'ec2_instance_custom_security_group_assigned' is suggested."
    },
    {
      "compliance_id": "2.8",
      "title": "Ensure the Use of IMDSv2 is Enforced on All Existing Instances",
      "existing_functions_mapped": [
        "autoscaling_group_launch_configuration_requires_imdsv2",
        "ec2_instance_imdsv2_enabled",
        "ec2_launch_template_imdsv2_required",
        "ec2_instance_account_imdsv2_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions cover the requirement of enforcing the use of IMDSv2 on all existing instances. The functions check for IMDSv2 requirement in autoscaling groups, EC2 instances, and EC2 launch templates."
    },
    {
      "compliance_id": "2.9",
      "title": "Ensure use of AWS Systems Manager to manage EC2 instances",
      "existing_functions_mapped": [
        "ec2_instance_managed_by_ssm"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ec2_instance_managed_by_ssm' checks if an EC2 instance is managed by AWS Systems Manager, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "2.10",
      "title": "Ensure unused ENIs are removed",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_unused_enis_removed",
          "boto3_api": "ec2.describe_network_interfaces()",
          "service": "ec2",
          "rationale": "This function is needed to identify and delete any unused Amazon AWS Elastic Network Interfaces (ENIs) in order to adhere to best practices and to avoid reaching the service limit."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function 'ec2_unused_enis_removed' is suggested which uses the 'ec2.describe_network_interfaces()' boto3 API to identify and remove unused ENIs."
    },
    {
      "compliance_id": "2.11",
      "title": "Ensure instances stopped for over 90 days are removed",
      "existing_functions_mapped": [
        "ec2_instance_older_than_specific_days"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ec2_instance_stopped_for_over_90_days",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "This function is needed to specifically check if an instance has been stopped for over 90 days"
        },
        {
          "name": "ec2_instance_remove_if_stopped_for_over_90_days",
          "boto3_api": "ec2.terminate_instances()",
          "service": "ec2",
          "rationale": "This function is needed to remove instances that have been stopped for over 90 days"
        }
      ],
      "mapping_notes": "The existing function 'ec2_instance_older_than_specific_days' partially covers the compliance requirement as it can check if an instance is older than a specific number of days. However, it does not specifically check if an instance has been stopped for over 90 days, nor does it provide a function to remove such instances. Therefore, two new functions are suggested to fill these gaps."
    },
    {
      "compliance_id": "2.12",
      "title": "Ensure EBS volumes attached to an EC2 instance is marked for deletion upon instance termination",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ec2_ebs_volume_deletion_on_termination",
          "boto3_api": "ec2.describe_instances()",
          "service": "ec2",
          "rationale": "This function is needed to check if the EBS volumes attached to an EC2 instance are marked for deletion upon instance termination."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring EBS volumes attached to an EC2 instance are marked for deletion upon instance termination. A new function 'ec2_ebs_volume_deletion_on_termination' is suggested which uses the 'ec2.describe_instances()' boto3 API to retrieve the instance details and check the 'DeleteOnTermination' attribute for each attached EBS volume."
    },
    {
      "compliance_id": "2.13",
      "title": "Ensure Secrets and Sensitive Data are not stored directly in EC2 User Data",
      "existing_functions_mapped": [
        "ec2_instance_secrets_user_data",
        "ec2_launch_template_no_secrets"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ec2_instance_secrets_user_data' and 'ec2_launch_template_no_secrets' provide complete coverage for this compliance requirement as they check for secrets in EC2 user data and launch templates respectively."
    },
    {
      "compliance_id": "2.14",
      "title": "Ensure EC2 Auto Scaling Groups Propagate Tags to EC2 Instances that it launches",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "autoscaling_group_propagate_tags",
          "boto3_api": "autoscaling.describe_auto_scaling_groups()",
          "service": "autoscaling",
          "rationale": "This function is needed to check if the Auto Scaling groups are configured to propagate tags to the EC2 instances that they launch."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring that EC2 Auto Scaling Groups propagate tags to the EC2 instances that they launch. A new function, 'autoscaling_group_propagate_tags', is suggested to fill this gap."
    },
    {
      "compliance_id": "3.1",
      "title": "Ensure Amazon ECS task definitions using 'host' network mode do not allow privileged or root user access to the host",
      "existing_functions_mapped": [
        "ecs_task_definitions_host_networking_mode_users",
        "ecs_task_definitions_no_privileged_containers"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecs_task_definitions_no_root_user_access",
          "boto3_api": "ecs.describe_task_definition()",
          "service": "ecs",
          "rationale": "This function is needed to check if the task definition allows root user access, which is not covered by the existing functions."
        }
      ],
      "mapping_notes": "The existing functions 'ecs_task_definitions_host_networking_mode_users' and 'ecs_task_definitions_no_privileged_containers' partially cover the compliance requirement by checking for host networking mode and privileged containers. However, there is no existing function to check for root user access in the task definition, hence a new function 'ecs_task_definitions_no_root_user_access' is suggested."
    },
    {
      "compliance_id": "3.2",
      "title": "Ensure 'assignPublicIp' is set to 'DISABLED' for Amazon ECS services",
      "existing_functions_mapped": [
        "ecs_service_no_assign_public_ip",
        "ecs_task_set_no_assign_public_ip"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'ecs_service_no_assign_public_ip' and 'ecs_task_set_no_assign_public_ip' already ensure that the 'assignPublicIp' attribute is set to 'DISABLED' for Amazon ECS services and task sets respectively, providing complete coverage for this compliance requirement."
    },
    {
      "compliance_id": "3.3",
      "title": "Ensure Amazon ECS task definitions do not have 'pidMode' set to 'host'",
      "existing_functions_mapped": [
        "ecs_task_definitions_host_namespace_not_shared"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_host_namespace_not_shared' checks if the ECS task definitions are not sharing the host's namespace, which aligns with the compliance requirement of ensuring that 'pidMode' is not set to 'host'. Therefore, no new functions are needed."
    },
    {
      "compliance_id": "3.4",
      "title": "Ensure Amazon ECS task definitions do not have 'privileged' set to 'true'",
      "existing_functions_mapped": [
        "ecs_task_definitions_no_privileged_containers"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_no_privileged_containers' directly addresses the compliance requirement of ensuring that Amazon ECS task definitions do not grant privileged access to the host container instance."
    },
    {
      "compliance_id": "3.5",
      "title": "Ensure 'readonlyRootFilesystem' is set to 'true' for Amazon ECS task definitions",
      "existing_functions_mapped": [
        "ecs_task_definitions_containers_readonly_access"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_containers_readonly_access' checks if the 'readonlyRootFilesystem' is set to 'true' for Amazon ECS task definitions, which aligns with the compliance requirement."
    },
    {
      "compliance_id": "3.6",
      "title": "Ensure secrets are not passed as container environment variables in Amazon ECS task definitions",
      "existing_functions_mapped": [
        "ecs_task_definitions_no_environment_secrets"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_definitions_no_environment_secrets' appears to cover the requirements of this compliance item, as it checks for secrets in ECS task definition environment variables."
    },
    {
      "compliance_id": "3.7",
      "title": "Ensure logging is configured for Amazon ECS task definitions",
      "existing_functions_mapped": [
        "ecs_task_definitions_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecs_task_definitions_latest_revision_logging_enabled",
          "boto3_api": "ecs.describe_task_definition()",
          "service": "ecs",
          "rationale": "To ensure that the latest active revision of a task definition has logging configured"
        }
      ],
      "mapping_notes": "The existing function 'ecs_task_definitions_logging_enabled' checks if logging is enabled for ECS task definitions but does not specifically check for the latest active revision. Hence, a new function 'ecs_task_definitions_latest_revision_logging_enabled' is suggested to cover this requirement."
    },
    {
      "compliance_id": "3.8",
      "title": "Ensure Amazon ECS Fargate services are using the latest Fargate platform version",
      "existing_functions_mapped": [
        "ecs_service_fargate_latest_platform_version"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_service_fargate_latest_platform_version' directly addresses the compliance requirement of ensuring that Amazon ECS Fargate services use the latest Fargate platform version."
    },
    {
      "compliance_id": "3.9",
      "title": "Ensure monitoring is enabled for Amazon ECS clusters",
      "existing_functions_mapped": [
        "ecs_cluster_container_insights_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_cluster_container_insights_enabled' directly addresses the compliance requirement of enabling AWS CloudWatch Container Insights for Amazon ECS clusters."
    },
    {
      "compliance_id": "3.10",
      "title": "Ensure Amazon ECS services are tagged",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ecs_services_check_tags",
          "boto3_api": "ecs.list_tags_for_resource()",
          "service": "ecs",
          "rationale": "This function is needed to check if all Amazon ECS services have resource tags to facilitate asset management, tracking, and compliance."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to checking tags for Amazon ECS services. A new function 'ecs_services_check_tags' is suggested to fill this gap."
    },
    {
      "compliance_id": "3.11",
      "title": "Ensure Amazon ECS clusters are tagged",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ecs_cluster_resource_tags_check",
          "boto3_api": "ecs.list_tags_for_resource()",
          "service": "ecs",
          "rationale": "This function is needed to check if the ECS clusters have resource tags as per the compliance requirement"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to checking tags for ECS clusters. Hence, a new function is suggested."
    },
    {
      "compliance_id": "3.12",
      "title": "Ensure Amazon ECS task definitions are tagged",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ecs_task_definitions_tagged",
          "boto3_api": "ecs.list_task_definitions()",
          "service": "ecs",
          "rationale": "This function is needed to check if all ECS task definitions are tagged as per the compliance requirement."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring ECS task definitions are tagged. Hence, a new function 'ecs_task_definitions_tagged' is suggested which uses the 'ecs.list_task_definitions()' boto3 API to list all task definitions and check if they are tagged."
    },
    {
      "compliance_id": "3.13",
      "title": "Ensure only trusted images are used with Amazon ECS",
      "existing_functions_mapped": [
        "ecs_task_definitions_no_environment_secrets",
        "ecs_task_definitions_no_privileged_containers",
        "ecs_task_definitions_containers_readonly_access",
        "ecs_task_definitions_host_namespace_not_shared",
        "ecs_task_definitions_host_networking_mode_users",
        "ecs_task_definitions_logging_block_mode",
        "ecs_task_definitions_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "ecs_task_definitions_trusted_image_sources",
          "boto3_api": "ecs.describe_task_definition()",
          "service": "ecs",
          "rationale": "To ensure that only trusted container images from verified sources or private repositories are used with Amazon ECS"
        }
      ],
      "mapping_notes": "Existing functions provide some coverage for the security of ECS task definitions, but there is no specific function to check that only trusted images are used. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "3.14",
      "title": "Ensure 'assignPublicIp' is set to 'DISABLED' for Amazon ECS task sets",
      "existing_functions_mapped": [
        "ecs_task_set_no_assign_public_ip"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'ecs_task_set_no_assign_public_ip' directly addresses the compliance requirement of ensuring 'assignPublicIp' is set to 'DISABLED' for Amazon ECS task sets."
    },
    {
      "compliance_id": "5.1",
      "title": "Apply updates to any apps running in Lightsail",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_instance_check_for_updates",
          "boto3_api": "lightsail.get_instance()",
          "service": "lightsail",
          "rationale": "This function is needed to check if there are any updates available for the applications running on the Lightsail instance"
        },
        {
          "name": "lightsail_instance_apply_updates",
          "boto3_api": "lightsail.update_instance()",
          "service": "lightsail",
          "rationale": "This function is needed to apply updates to the applications running on the Lightsail instance"
        }
      ],
      "mapping_notes": "There are no existing functions that can be mapped to this compliance requirement. New functions are suggested to check for and apply updates to applications running on Lightsail instances."
    },
    {
      "compliance_id": "5.2",
      "title": "Change default Administrator login names and passwords for applications",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_instance_default_admin_credentials_changed",
          "boto3_api": "lightsail.get_instance_access_details()",
          "service": "lightsail",
          "rationale": "This function is needed to check if the default administrator login names and passwords have been changed for applications installed on Lightsail instances."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of changing default administrator login names and passwords for applications installed on Lightsail instances. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "5.3",
      "title": "Disable SSH and RDP ports for Lightsail instances when not needed.",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22",
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389"
      ],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_instance_ssh_rdp_ports_disabled",
          "boto3_api": "lightsail.get_instance_port_states()",
          "service": "lightsail",
          "rationale": "This function is needed to check if SSH and RDP ports are disabled for Lightsail instances when not in use."
        }
      ],
      "mapping_notes": "The existing functions only check for EC2 instances and not Lightsail instances. Therefore, a new function is needed to check the port states of Lightsail instances."
    },
    {
      "compliance_id": "5.4",
      "title": "Ensure SSH is restricted to only IP address that should have this access.",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "lightsail_instance_ssh_access_restricted",
          "boto3_api": "lightsail.get_instance_port_states()",
          "service": "lightsail",
          "rationale": "This function is needed to check if SSH access to Lightsail instances is restricted to specific IP addresses."
        }
      ],
      "mapping_notes": "The existing function 'ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_22' can check if SSH access is open to the internet on EC2 instances, but it does not cover Lightsail instances. A new function 'lightsail_instance_ssh_access_restricted' is suggested to cover this gap."
    },
    {
      "compliance_id": "5.5",
      "title": "Ensure RDP is restricted to only IP address that should have this access.",
      "existing_functions_mapped": [
        "ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_3389",
        "ec2_instance_port_rdp_exposed_to_internet"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "lightsail_instance_rdp_access_restricted",
          "boto3_api": "lightsail.get_instance_access_details()",
          "service": "lightsail",
          "rationale": "This function is needed to check if RDP access to Lightsail instances is restricted to specific IP addresses."
        }
      ],
      "mapping_notes": "The existing functions cover the RDP access restriction for EC2 instances but not for Lightsail instances. Hence, a new function is suggested to cover this gap."
    },
    {
      "compliance_id": "5.6",
      "title": "Disable IPv6 Networking if not in use within your organization.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_disable_ipv6_if_not_in_use",
          "boto3_api": "lightsail.get_instances()",
          "service": "lightsail",
          "rationale": "This function is needed to check if IPv6 is enabled on any Lightsail instances and disable it if not in use."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of disabling IPv6 networking on Lightsail instances if not in use. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "5.7",
      "title": "Ensure you are using an IAM policy to manage access to buckets in Lightsail.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_bucket_iam_policy_check",
          "boto3_api": "lightsail.get_bucket_access_control()",
          "service": "lightsail",
          "rationale": "This function is needed to check if an IAM policy is used to manage access to buckets in Lightsail."
        }
      ],
      "mapping_notes": "No existing functions in the database match the compliance requirement of managing access to buckets in Lightsail using IAM policies. A new function 'lightsail_bucket_iam_policy_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "5.8",
      "title": "Ensure Lightsail instances are attached to the buckets",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_instance_attached_to_bucket",
          "boto3_api": "lightsail.get_instance() and lightsail.get_bucket()",
          "service": "lightsail",
          "rationale": "To ensure that each Lightsail instance is attached to a Lightsail storage bucket"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring Lightsail instances are attached to the buckets. A new function 'lightsail_instance_attached_to_bucket' is suggested which will use the 'get_instance' and 'get_bucket' boto3 APIs to check the attachment of each Lightsail instance to a Lightsail storage bucket."
    },
    {
      "compliance_id": "5.9",
      "title": "Ensure that your Lightsail buckets are not publicly accessible",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_buckets_not_publicly_accessible",
          "boto3_api": "lightsail.get_bucket_access()",
          "service": "lightsail",
          "rationale": "This function is needed to check if Lightsail buckets are publicly accessible or not"
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the access permissions of Lightsail buckets."
    },
    {
      "compliance_id": "5.10",
      "title": "Enable storage bucket access logging",
      "existing_functions_mapped": [
        "cloudtrail_logs_s3_bucket_access_logging_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'cloudtrail_logs_s3_bucket_access_logging_enabled' directly addresses the requirement of enabling storage bucket access logging."
    },
    {
      "compliance_id": "5.11",
      "title": "Ensure your Windows Server based lightsail instances are updated with the latest security patches.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_windows_server_instances_security_patches_check",
          "boto3_api": "lightsail.get_instance()",
          "service": "lightsail",
          "rationale": "This function is needed to check if the Windows Server based Lightsail instances are updated with the latest security patches."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the security patches of Windows Server based Lightsail instances."
    },
    {
      "compliance_id": "5.12",
      "title": "Change the auto-generated password for Windows based instances.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lightsail_windows_instance_default_password_changed",
          "boto3_api": "lightsail.get_instance_access_details()",
          "service": "lightsail",
          "rationale": "This function is needed to check if the default password of a Windows Server-based instance in Lightsail has been changed."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of changing the auto-generated password for Windows based instances. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "6.1",
      "title": "Ensure you are using VPC Endpoints for source code access",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "apprunner_vpc_endpoints_for_source_code_access",
          "boto3_api": "ec2.describe_vpc_endpoints()",
          "service": "ec2",
          "rationale": "This function is needed to ensure that VPC endpoints are being used for source code access in App Runner."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of using VPC Endpoints for source code access in App Runner. Therefore, a new function is suggested."
    },
    {
      "compliance_id": "8.1",
      "title": "Ensure AWS Batch is configured with AWS Cloudwatch Logs.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "batch_jobs_cloudwatch_logs_configured",
          "boto3_api": "batch.describe_jobs()",
          "service": "batch",
          "rationale": "This function is needed to check if AWS Batch jobs are configured to send log information to CloudWatch Logs."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check if AWS Batch jobs are configured with AWS Cloudwatch Logs."
    },
    {
      "compliance_id": "8.2",
      "title": "Ensure Batch roles are configured for cross-service confused deputy prevention",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "batch_roles_cross_service_deputy_prevention",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "This function is needed to list all IAM roles and check if they are configured to prevent cross-service confused deputy problem. It should check if the roles have the necessary permissions and are not overly privileged."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring Batch roles are configured for cross-service confused deputy prevention. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "10.1",
      "title": "Ensure Managed Platform updates is configured",
      "existing_functions_mapped": [
        "elasticbeanstalk_environment_managed_updates_enabled"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'elasticbeanstalk_environment_managed_updates_enabled' checks if the Elastic Beanstalk environment has managed updates enabled, which aligns with the compliance requirement of ensuring that managed platform updates are configured."
    },
    {
      "compliance_id": "10.2",
      "title": "Ensure Persistent logs is setup and configured to S3",
      "existing_functions_mapped": [
        "elasticbeanstalk_environment_cloudwatch_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "elasticbeanstalk_environment_logs_to_s3",
          "boto3_api": "elasticbeanstalk.describe_environment_resources()",
          "service": "elasticbeanstalk",
          "rationale": "To check if the Elastic Beanstalk environment logs are configured to be stored in S3"
        }
      ],
      "mapping_notes": "The existing function 'elasticbeanstalk_environment_cloudwatch_logging_enabled' checks if CloudWatch logging is enabled for the Elastic Beanstalk environment, which partially covers the compliance requirement. However, there is no existing function to check if the logs are configured to be stored in S3, hence a new function 'elasticbeanstalk_environment_logs_to_s3' is suggested."
    },
    {
      "compliance_id": "10.3",
      "title": "Ensure access logs are enabled.",
      "existing_functions_mapped": [
        "elb_logging_enabled",
        "elbv2_logging_enabled"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "elasticbeanstalk_environment_access_logs_enabled",
          "boto3_api": "elasticbeanstalk.describe_environment_resources()",
          "service": "elasticbeanstalk",
          "rationale": "This function is needed to check if access logs are enabled for Elastic Beanstalk environments"
        }
      ],
      "mapping_notes": "The existing functions 'elb_logging_enabled' and 'elbv2_logging_enabled' cover the requirement for enabling access logs for Elastic Load Balancing. However, there is no existing function to check if access logs are enabled for Elastic Beanstalk environments, hence a new function 'elasticbeanstalk_environment_access_logs_enabled' is suggested."
    },
    {
      "compliance_id": "10.4",
      "title": "Ensure that HTTPS is enabled on load balancer",
      "existing_functions_mapped": [
        "elbv2_ssl_listeners",
        "elb_ssl_listeners"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing functions 'elbv2_ssl_listeners' and 'elb_ssl_listeners' check if SSL listeners are enabled on the load balancer, which is a requirement for HTTPS. Therefore, these functions provide complete coverage for this compliance item."
    },
    {
      "compliance_id": "11.1",
      "title": "Ensure customer-managed keys are used to encrypt AWS Fargate ephemeral storage data for Amazon ECS",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "ecs_fargate_ephemeral_storage_encryption_check",
          "boto3_api": "ecs.describe_task_definition()",
          "service": "ecs",
          "rationale": "This function is needed to check if the ephemeral storage data for AWS Fargate tasks on Amazon ECS is encrypted using customer-managed keys."
        }
      ],
      "mapping_notes": "No existing functions in the database could be mapped to this compliance requirement. A new function is suggested to check the encryption status of ephemeral storage data for AWS Fargate tasks on Amazon ECS."
    },
    {
      "compliance_id": "12.1",
      "title": "Ensure AWS Config is Enabled for Lambda and Serverless",
      "existing_functions_mapped": [
        "config_recorder_all_regions_enabled",
        "config_recorder_using_aws_service_role",
        "awslambda_function_inside_vpc",
        "awslambda_function_invoke_api_operations_cloudtrail_logging_enabled",
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables",
        "awslambda_function_not_publicly_accessible",
        "awslambda_function_using_supported_runtimes",
        "awslambda_function_vpc_multi_az"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "awsconfig_lambda_config_tracking_enabled",
          "boto3_api": "configservice.describe_configuration_recorders()",
          "service": "configservice",
          "rationale": "To ensure AWS Config is enabled for tracking changes to Lambda functions"
        },
        {
          "name": "awsconfig_serverless_config_tracking_enabled",
          "boto3_api": "configservice.describe_configuration_recorders()",
          "service": "configservice",
          "rationale": "To ensure AWS Config is enabled for tracking changes to Serverless resources"
        }
      ],
      "mapping_notes": "Existing functions provide partial coverage for this compliance item. They cover the aspects of ensuring AWS Config is enabled and Lambda functions are configured securely. However, there are no specific functions to check if AWS Config is enabled for tracking changes to Lambda and Serverless resources. Hence, two new functions are suggested."
    },
    {
      "compliance_id": "12.2",
      "title": "Ensure Cloudwatch Lambda insights is enabled",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "cloudwatch_lambda_insights_enabled",
          "boto3_api": "lambda.get_function()",
          "service": "lambda",
          "rationale": "This function is needed to check if CloudWatch Lambda Insights is enabled for each Lambda function"
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring CloudWatch Lambda Insights is enabled. A new function 'cloudwatch_lambda_insights_enabled' is suggested to fill this gap."
    },
    {
      "compliance_id": "12.3",
      "title": "Ensure AWS Secrets manager is configured and being used by Lambda for databases",
      "existing_functions_mapped": [
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "secretsmanager_secret_used_by_lambda",
          "boto3_api": "secretsmanager.list_secrets()",
          "service": "secretsmanager",
          "rationale": "To check if any secret in AWS Secrets Manager is being used by Lambda functions"
        },
        {
          "name": "lambda_function_uses_secretsmanager_for_db",
          "boto3_api": "lambda.get_function_configuration()",
          "service": "lambda",
          "rationale": "To check if a Lambda function is using Secrets Manager for database credentials"
        }
      ],
      "mapping_notes": "Existing functions only check if secrets are not hardcoded in Lambda function code or environment variables. New functions are needed to check if Secrets Manager is being used for database credentials in Lambda functions."
    },
    {
      "compliance_id": "12.4",
      "title": "Ensure least privilege is used with Lambda function access",
      "existing_functions_mapped": [
        "awslambda_function_no_secrets_in_code",
        "awslambda_function_no_secrets_in_variables",
        "awslambda_function_not_publicly_accessible"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "awslambda_function_least_privilege_policy",
          "boto3_api": "lambda.get_policy()",
          "service": "lambda",
          "rationale": "To ensure that each Lambda function is using least privilege access, we need to check the IAM policy associated with the function. This function will retrieve and analyze the policy to ensure it adheres to least privilege principles."
        }
      ],
      "mapping_notes": "Existing functions cover the aspect of ensuring no secrets are stored in code or variables and that the function is not publicly accessible. However, there is no existing function that checks the IAM policy of the Lambda function to ensure least privilege access. Hence, a new function 'awslambda_function_least_privilege_policy' is suggested."
    },
    {
      "compliance_id": "12.5",
      "title": "Ensure every Lambda function has its own IAM Role",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "awslambda_function_iam_role_unique",
          "boto3_api": "iam.list_roles()",
          "service": "iam",
          "rationale": "This function is needed to ensure that each Lambda function has a unique IAM role and that roles are not shared between functions."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the requirement of ensuring every Lambda function has its own IAM Role. A new function 'awslambda_function_iam_role_unique' is suggested which can use the 'iam.list_roles()' boto3 API to list all IAM roles and check if any role is associated with more than one Lambda function."
    },
    {
      "compliance_id": "12.6",
      "title": "Ensure Lambda functions are not exposed to everyone.",
      "existing_functions_mapped": [
        "awslambda_function_not_publicly_accessible"
      ],
      "coverage_assessment": "complete",
      "new_functions_needed": [],
      "mapping_notes": "The existing function 'awslambda_function_not_publicly_accessible' directly addresses the compliance requirement of ensuring that Lambda functions are not exposed to everyone."
    },
    {
      "compliance_id": "12.7",
      "title": "Ensure Lambda functions are referencing active execution roles.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lambda_function_active_execution_role_check",
          "boto3_api": "lambda.get_function()",
          "service": "lambda",
          "rationale": "This function is needed to check if the Lambda function is associated with an active execution role."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring Lambda functions are referencing active execution roles. A new function, lambda_function_active_execution_role_check, is suggested to fill this gap."
    },
    {
      "compliance_id": "12.8",
      "title": "Ensure that Code Signing is enabled for Lambda functions.",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "awslambda_function_code_signing_enabled",
          "boto3_api": "lambda.get_function()",
          "service": "lambda",
          "rationale": "This function is needed to check if the Code Signing feature is enabled for each Lambda function."
        }
      ],
      "mapping_notes": "No existing functions in the database directly relate to the compliance requirement of ensuring Code Signing is enabled for Lambda functions. A new function 'awslambda_function_code_signing_enabled' is suggested to fill this gap."
    },
    {
      "compliance_id": "12.9",
      "title": "Ensure there are no Lambda functions with admin privileges within your AWS account",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "awslambda_function_no_admin_privileges",
          "boto3_api": "lambda.list_functions()",
          "service": "lambda",
          "rationale": "This function is needed to list all Lambda functions and check if any of them have admin privileges."
        }
      ],
      "mapping_notes": "No existing functions in the database directly address the compliance requirement of ensuring no Lambda functions have admin privileges. A new function, awslambda_function_no_admin_privileges, is suggested to fill this gap."
    },
    {
      "compliance_id": "12.10",
      "title": "Ensure Lambda functions do not allow unknown cross account access via permission policies.",
      "existing_functions_mapped": [
        "awslambda_function_not_publicly_accessible"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "awslambda_function_cross_account_access_check",
          "boto3_api": "lambda.get_policy()",
          "service": "lambda",
          "rationale": "This function is needed to check if the Lambda function's resource-based policy allows cross-account access."
        }
      ],
      "mapping_notes": "The existing function 'awslambda_function_not_publicly_accessible' can partially cover the compliance requirement by ensuring that the Lambda function is not publicly accessible. However, it does not specifically check for cross-account access. Therefore, a new function 'awslambda_function_cross_account_access_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "12.11",
      "title": "Ensure that the runtime environment versions used for your Lambda functions do not have end of support dates.",
      "existing_functions_mapped": [
        "awslambda_function_using_supported_runtimes"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "awslambda_function_runtime_version_check",
          "boto3_api": "lambda.get_function_configuration()",
          "service": "lambda",
          "rationale": "This function is needed to check the runtime version of each Lambda function and ensure it is not using a version that has reached its end of support date."
        }
      ],
      "mapping_notes": "The existing function 'awslambda_function_using_supported_runtimes' partially covers the compliance requirement as it checks if the Lambda function is using a supported runtime. However, it does not check if the runtime version used has an end of support date. Therefore, a new function 'awslambda_function_runtime_version_check' is suggested to fill this gap."
    },
    {
      "compliance_id": "12.12",
      "title": "Ensure encryption in transit is enabled for Lambda environment variables",
      "existing_functions_mapped": [],
      "coverage_assessment": "none",
      "new_functions_needed": [
        {
          "name": "lambda_environment_variables_in_transit_encryption_enabled",
          "boto3_api": "lambda.get_function()",
          "service": "lambda",
          "rationale": "This function is needed to check if the encryption in transit is enabled for Lambda environment variables"
        }
      ],
      "mapping_notes": "No existing functions in the database could satisfy the compliance requirement of ensuring encryption in transit for Lambda environment variables. A new function is suggested to fill this gap."
    },
    {
      "compliance_id": "16.1",
      "title": "Ensure communications between your applications and clients is encrypted.",
      "existing_functions_mapped": [
        "cloudfront_distributions_https_enabled",
        "cloudfront_distributions_https_sni_enabled",
        "cloudfront_distributions_origin_traffic_encrypted",
        "dms_endpoint_ssl_enabled",
        "documentdb_cluster_storage_encrypted",
        "dynamodb_tables_kms_cmk_encryption_enabled",
        "ec2_ebs_default_encryption",
        "ec2_ebs_snapshots_encrypted",
        "ec2_ebs_volume_encryption",
        "efs_encryption_at_rest_enabled",
        "elasticache_redis_cluster_in_transit_encryption_enabled",
        "elasticache_redis_cluster_rest_encryption_enabled",
        "elbv2_ssl_listeners",
        "firehose_stream_encrypted_at_rest"
      ],
      "coverage_assessment": "partial",
      "new_functions_needed": [
        {
          "name": "app_communication_encryption_check",
          "boto3_api": "describe_applications()",
          "service": "elasticbeanstalk",
          "rationale": "To ensure that the communication between applications and clients is encrypted, we need to check the encryption settings of the applications."
        }
      ],
      "mapping_notes": "The existing functions mapped are those that check for encryption in various AWS services. However, none of them specifically checks for encryption in the communication between applications and clients. Therefore, a new function is suggested to fill this gap."
    }
  ],
  "new_functions_suggested": [
    {
      "name": "ec2_ami_naming_convention_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to check if the naming convention for AMIs is followed consistently across the organization."
    },
    {
      "name": "ec2_ami_encryption_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to directly check if the AMIs are encrypted"
    },
    {
      "name": "ec2_ami_approved_check",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to check if the AMI used is approved by the organization"
    },
    {
      "name": "ec2_ami_older_than_90_days",
      "boto3_api": "ec2.describe_images()",
      "service": "ec2",
      "rationale": "This function is needed to specifically check if any AMIs are older than 90 days"
    },
    {
      "name": "ec2_unused_ebs_volumes_check",
      "boto3_api": "ec2.describe_volumes()",
      "service": "ec2",
      "rationale": "This function is needed to identify and remove any unused EBS volumes in the AWS account"
    },
    {
      "name": "organizations_tag_policies_enabled",
      "boto3_api": "organizations.list_policies(Filter='TAG_POLICY')",
      "service": "organizations",
      "rationale": "This function is needed to check if any tag policies are enabled in the organization."
    },
    {
      "name": "ec2_organizational_tag_policy_created",
      "boto3_api": "organizations.list_policies()",
      "service": "ec2",
      "rationale": "This function is needed to check if an organizational EC2 tag policy has been created."
    },
    {
      "name": "ec2_instance_custom_security_group_assigned",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "This function is needed to check if a custom security group is assigned to each EC2 instance at launch."
    },
    {
      "name": "ec2_unused_enis_removed",
      "boto3_api": "ec2.describe_network_interfaces()",
      "service": "ec2",
      "rationale": "This function is needed to identify and delete any unused Amazon AWS Elastic Network Interfaces (ENIs) in order to adhere to best practices and to avoid reaching the service limit."
    },
    {
      "name": "ec2_instance_stopped_for_over_90_days",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "This function is needed to specifically check if an instance has been stopped for over 90 days"
    },
    {
      "name": "ec2_instance_remove_if_stopped_for_over_90_days",
      "boto3_api": "ec2.terminate_instances()",
      "service": "ec2",
      "rationale": "This function is needed to remove instances that have been stopped for over 90 days"
    },
    {
      "name": "ec2_ebs_volume_deletion_on_termination",
      "boto3_api": "ec2.describe_instances()",
      "service": "ec2",
      "rationale": "This function is needed to check if the EBS volumes attached to an EC2 instance are marked for deletion upon instance termination."
    },
    {
      "name": "autoscaling_group_propagate_tags",
      "boto3_api": "autoscaling.describe_auto_scaling_groups()",
      "service": "autoscaling",
      "rationale": "This function is needed to check if the Auto Scaling groups are configured to propagate tags to the EC2 instances that they launch."
    },
    {
      "name": "ecs_task_definitions_no_root_user_access",
      "boto3_api": "ecs.describe_task_definition()",
      "service": "ecs",
      "rationale": "This function is needed to check if the task definition allows root user access, which is not covered by the existing functions."
    },
    {
      "name": "ecs_task_definitions_latest_revision_logging_enabled",
      "boto3_api": "ecs.describe_task_definition()",
      "service": "ecs",
      "rationale": "To ensure that the latest active revision of a task definition has logging configured"
    },
    {
      "name": "ecs_services_check_tags",
      "boto3_api": "ecs.list_tags_for_resource()",
      "service": "ecs",
      "rationale": "This function is needed to check if all Amazon ECS services have resource tags to facilitate asset management, tracking, and compliance."
    },
    {
      "name": "ecs_cluster_resource_tags_check",
      "boto3_api": "ecs.list_tags_for_resource()",
      "service": "ecs",
      "rationale": "This function is needed to check if the ECS clusters have resource tags as per the compliance requirement"
    },
    {
      "name": "ecs_task_definitions_tagged",
      "boto3_api": "ecs.list_task_definitions()",
      "service": "ecs",
      "rationale": "This function is needed to check if all ECS task definitions are tagged as per the compliance requirement."
    },
    {
      "name": "ecs_task_definitions_trusted_image_sources",
      "boto3_api": "ecs.describe_task_definition()",
      "service": "ecs",
      "rationale": "To ensure that only trusted container images from verified sources or private repositories are used with Amazon ECS"
    },
    {
      "name": "lightsail_instance_check_for_updates",
      "boto3_api": "lightsail.get_instance()",
      "service": "lightsail",
      "rationale": "This function is needed to check if there are any updates available for the applications running on the Lightsail instance"
    },
    {
      "name": "lightsail_instance_apply_updates",
      "boto3_api": "lightsail.update_instance()",
      "service": "lightsail",
      "rationale": "This function is needed to apply updates to the applications running on the Lightsail instance"
    },
    {
      "name": "lightsail_instance_default_admin_credentials_changed",
      "boto3_api": "lightsail.get_instance_access_details()",
      "service": "lightsail",
      "rationale": "This function is needed to check if the default administrator login names and passwords have been changed for applications installed on Lightsail instances."
    },
    {
      "name": "lightsail_instance_ssh_rdp_ports_disabled",
      "boto3_api": "lightsail.get_instance_port_states()",
      "service": "lightsail",
      "rationale": "This function is needed to check if SSH and RDP ports are disabled for Lightsail instances when not in use."
    },
    {
      "name": "lightsail_instance_ssh_access_restricted",
      "boto3_api": "lightsail.get_instance_port_states()",
      "service": "lightsail",
      "rationale": "This function is needed to check if SSH access to Lightsail instances is restricted to specific IP addresses."
    },
    {
      "name": "lightsail_instance_rdp_access_restricted",
      "boto3_api": "lightsail.get_instance_access_details()",
      "service": "lightsail",
      "rationale": "This function is needed to check if RDP access to Lightsail instances is restricted to specific IP addresses."
    },
    {
      "name": "lightsail_disable_ipv6_if_not_in_use",
      "boto3_api": "lightsail.get_instances()",
      "service": "lightsail",
      "rationale": "This function is needed to check if IPv6 is enabled on any Lightsail instances and disable it if not in use."
    },
    {
      "name": "lightsail_bucket_iam_policy_check",
      "boto3_api": "lightsail.get_bucket_access_control()",
      "service": "lightsail",
      "rationale": "This function is needed to check if an IAM policy is used to manage access to buckets in Lightsail."
    },
    {
      "name": "lightsail_instance_attached_to_bucket",
      "boto3_api": "lightsail.get_instance() and lightsail.get_bucket()",
      "service": "lightsail",
      "rationale": "To ensure that each Lightsail instance is attached to a Lightsail storage bucket"
    },
    {
      "name": "lightsail_buckets_not_publicly_accessible",
      "boto3_api": "lightsail.get_bucket_access()",
      "service": "lightsail",
      "rationale": "This function is needed to check if Lightsail buckets are publicly accessible or not"
    },
    {
      "name": "lightsail_windows_server_instances_security_patches_check",
      "boto3_api": "lightsail.get_instance()",
      "service": "lightsail",
      "rationale": "This function is needed to check if the Windows Server based Lightsail instances are updated with the latest security patches."
    },
    {
      "name": "lightsail_windows_instance_default_password_changed",
      "boto3_api": "lightsail.get_instance_access_details()",
      "service": "lightsail",
      "rationale": "This function is needed to check if the default password of a Windows Server-based instance in Lightsail has been changed."
    },
    {
      "name": "apprunner_vpc_endpoints_for_source_code_access",
      "boto3_api": "ec2.describe_vpc_endpoints()",
      "service": "ec2",
      "rationale": "This function is needed to ensure that VPC endpoints are being used for source code access in App Runner."
    },
    {
      "name": "batch_jobs_cloudwatch_logs_configured",
      "boto3_api": "batch.describe_jobs()",
      "service": "batch",
      "rationale": "This function is needed to check if AWS Batch jobs are configured to send log information to CloudWatch Logs."
    },
    {
      "name": "batch_roles_cross_service_deputy_prevention",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "This function is needed to list all IAM roles and check if they are configured to prevent cross-service confused deputy problem. It should check if the roles have the necessary permissions and are not overly privileged."
    },
    {
      "name": "elasticbeanstalk_environment_logs_to_s3",
      "boto3_api": "elasticbeanstalk.describe_environment_resources()",
      "service": "elasticbeanstalk",
      "rationale": "To check if the Elastic Beanstalk environment logs are configured to be stored in S3"
    },
    {
      "name": "elasticbeanstalk_environment_access_logs_enabled",
      "boto3_api": "elasticbeanstalk.describe_environment_resources()",
      "service": "elasticbeanstalk",
      "rationale": "This function is needed to check if access logs are enabled for Elastic Beanstalk environments"
    },
    {
      "name": "ecs_fargate_ephemeral_storage_encryption_check",
      "boto3_api": "ecs.describe_task_definition()",
      "service": "ecs",
      "rationale": "This function is needed to check if the ephemeral storage data for AWS Fargate tasks on Amazon ECS is encrypted using customer-managed keys."
    },
    {
      "name": "awsconfig_lambda_config_tracking_enabled",
      "boto3_api": "configservice.describe_configuration_recorders()",
      "service": "configservice",
      "rationale": "To ensure AWS Config is enabled for tracking changes to Lambda functions"
    },
    {
      "name": "awsconfig_serverless_config_tracking_enabled",
      "boto3_api": "configservice.describe_configuration_recorders()",
      "service": "configservice",
      "rationale": "To ensure AWS Config is enabled for tracking changes to Serverless resources"
    },
    {
      "name": "cloudwatch_lambda_insights_enabled",
      "boto3_api": "lambda.get_function()",
      "service": "lambda",
      "rationale": "This function is needed to check if CloudWatch Lambda Insights is enabled for each Lambda function"
    },
    {
      "name": "secretsmanager_secret_used_by_lambda",
      "boto3_api": "secretsmanager.list_secrets()",
      "service": "secretsmanager",
      "rationale": "To check if any secret in AWS Secrets Manager is being used by Lambda functions"
    },
    {
      "name": "lambda_function_uses_secretsmanager_for_db",
      "boto3_api": "lambda.get_function_configuration()",
      "service": "lambda",
      "rationale": "To check if a Lambda function is using Secrets Manager for database credentials"
    },
    {
      "name": "awslambda_function_least_privilege_policy",
      "boto3_api": "lambda.get_policy()",
      "service": "lambda",
      "rationale": "To ensure that each Lambda function is using least privilege access, we need to check the IAM policy associated with the function. This function will retrieve and analyze the policy to ensure it adheres to least privilege principles."
    },
    {
      "name": "awslambda_function_iam_role_unique",
      "boto3_api": "iam.list_roles()",
      "service": "iam",
      "rationale": "This function is needed to ensure that each Lambda function has a unique IAM role and that roles are not shared between functions."
    },
    {
      "name": "lambda_function_active_execution_role_check",
      "boto3_api": "lambda.get_function()",
      "service": "lambda",
      "rationale": "This function is needed to check if the Lambda function is associated with an active execution role."
    },
    {
      "name": "awslambda_function_code_signing_enabled",
      "boto3_api": "lambda.get_function()",
      "service": "lambda",
      "rationale": "This function is needed to check if the Code Signing feature is enabled for each Lambda function."
    },
    {
      "name": "awslambda_function_no_admin_privileges",
      "boto3_api": "lambda.list_functions()",
      "service": "lambda",
      "rationale": "This function is needed to list all Lambda functions and check if any of them have admin privileges."
    },
    {
      "name": "awslambda_function_cross_account_access_check",
      "boto3_api": "lambda.get_policy()",
      "service": "lambda",
      "rationale": "This function is needed to check if the Lambda function's resource-based policy allows cross-account access."
    },
    {
      "name": "awslambda_function_runtime_version_check",
      "boto3_api": "lambda.get_function_configuration()",
      "service": "lambda",
      "rationale": "This function is needed to check the runtime version of each Lambda function and ensure it is not using a version that has reached its end of support date."
    },
    {
      "name": "lambda_environment_variables_in_transit_encryption_enabled",
      "boto3_api": "lambda.get_function()",
      "service": "lambda",
      "rationale": "This function is needed to check if the encryption in transit is enabled for Lambda environment variables"
    },
    {
      "name": "app_communication_encryption_check",
      "boto3_api": "describe_applications()",
      "service": "elasticbeanstalk",
      "rationale": "To ensure that the communication between applications and clients is encrypted, we need to check the encryption settings of the applications."
    }
  ]
}