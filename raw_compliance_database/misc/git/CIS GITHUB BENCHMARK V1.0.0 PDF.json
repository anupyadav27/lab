[
  {
    "id": "1.1.1",
    "title": "Ensure any changes to code are tracked in a version control platform",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_version_control_enabled",
      "code_repository_commit_history_tracked",
      "code_repository_branch_protection_enabled",
      "code_repository_change_tracking_enabled",
      "code_repository_audit_logging_enabled",
      "code_repository_immutable_history_enabled",
      "code_repository_approval_required",
      "code_repository_secrets_scanning_enabled"
    ]
  },
  {
    "id": "1.1.2",
    "title": "Ensure any change to code can be traced back to its associated task",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_commit_traceability_enabled",
      "code_repository_commit_task_linking_enabled",
      "code_repository_change_tracking_enabled",
      "code_repository_commit_metadata_required",
      "code_repository_task_reference_enforced",
      "code_repository_audit_logging_enabled",
      "code_repository_commit_history_retention_enabled",
      "code_repository_branch_protection_enabled"
    ]
  },
  {
    "id": "1.1.3",
    "title": "Ensure any change to code receives approval of two strongly authenticated users",
    "assessment": "Automated",
    "remediation": "For every code repository in use, perform the next steps to require two approvals from the specific code repository team in order to push new code to the code base: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you added the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Check Require a pull request before merging and Require approvals , and set Required number of approvals before merging to 2. 7. Click Create or Save changes . Default Value: 0 CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_approval_required",
      "code_repository_two_approvers_required",
      "code_repository_strong_auth_approvers_required",
      "code_repository_change_approval_required",
      "code_repository_strong_auth_two_approvers_required",
      "code_repository_change_two_strong_auth_approvers_required"
    ]
  },
  {
    "id": "1.1.4",
    "title": "Ensure previous approvals are dismissed when updates are introduced to a code change proposal",
    "assessment": "Manual",
    "remediation": "For each code repository in use, perform the next steps to enforce dismissal of given approvals to code change suggestions if those suggestions were updated: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you added the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Require pull request reviews before merging and then Dismiss stale pull request approvals when new commits are pushed . 7. Click Create or Save changes . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_change_proposal_approvals_dismissed_on_update",
      "code_repository_change_proposal_approvals_reset_on_update",
      "code_repository_change_proposal_approvals_invalidated_on_update",
      "code_repository_change_proposal_approvals_cleared_on_update",
      "code_repository_change_proposal_approvals_revoked_on_update"
    ]
  },
  {
    "id": "1.1.5",
    "title": "Ensure there are restrictions on who can dismiss code change reviews",
    "assessment": "Manual",
    "remediation": "For each code repository in use, perform the next steps to restrict dismissal of code changes reviews unless it is necessary: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you added the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Require pull request reviews before merging and Restrict who can dismiss pull request reviews . 7. Do not add any user or team unless it is obligatory. If it is obligatory, carefully select the users or teams whom you trust with the ability to dismiss code change reviews. 8. Click Create or Save changes . Default Value: By default, all users who have write access to the code repository are able to dismiss code change reviews. CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_branch_review_dismissal_restricted",
      "code_repository_branch_review_dismissal_limited",
      "code_repository_branch_review_dismissal_approved_roles_only",
      "code_repository_branch_review_dismissal_admin_restricted",
      "code_repository_branch_review_dismissal_whitelisted_roles",
      "code_repository_branch_review_dismissal_min_approvers",
      "code_repository_branch_review_dismissal_owner_restricted",
      "code_repository_branch_review_dismissal_custom_conditions",
      "code_repository_branch_review_dismissal_policy_enforced",
      "code_repository_branch_review_dismissal_secure_roles"
    ]
  },
  {
    "id": "1.1.6",
    "title": "Ensure code owners are set for extra sensitive code or configuration",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "repository_code_owner_defined",
      "repository_code_owner_extra_sensitive",
      "repository_code_owner_required",
      "repository_code_owner_configured",
      "repository_code_owner_enforced",
      "repository_code_owner_approval_required",
      "repository_code_owner_sensitive_files",
      "repository_code_owner_protected_files",
      "repository_code_owner_security_files",
      "repository_code_owner_compliance_check"
    ]
  },
  {
    "id": "1.1.7",
    "title": "Ensure code owner's review is required when a change affects owned code",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_code_owner_review_required",
      "code_repository_change_owner_approval_required",
      "code_repository_owned_code_change_review_enabled",
      "code_repository_owner_approval_for_code_changes",
      "code_repository_mandatory_owner_review_for_changes"
    ]
  },
  {
    "id": "1.1.8",
    "title": "Ensure inactive branches are periodically reviewed and removed",
    "assessment": "Manual",
    "remediation": "For each code repository in use, review existing Git branches and remove those which have not been active for a period of time by performing the following: 1. On GitHub.com, navigate to the main page of the repository. 2. Above the list of files, click Branches . 3. Use the navigation at the top of the page to view the Stale branches. The Stale view shows all branches that no one has committed to in the last three months, ordered by the branches with the oldest commits first. 4. For each branch listed, either delete it by clicking the trash bin icon, or find the valid reason it still exists. You can perform the next steps to prevent pull request branches from becoming stale branches: 1. On GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Settings. 3. Under \"Pull Requests\", select Automatically delete head branches . Default Value: By default, newly opened Git branches would never be removed, regardless of activity or inactivity. CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_branch_inactive_reviewed",
      "code_repository_branch_inactive_removed",
      "code_repository_branch_inactive_reviewed_over_90d",
      "code_repository_branch_inactive_removed_over_90d",
      "code_repository_branch_activity_monitored",
      "code_repository_branch_cleanup_policy_enabled",
      "code_repository_branch_stale_removed",
      "code_repository_branch_lifecycle_managed"
    ]
  },
  {
    "id": "1.1.9",
    "title": "Ensure all checks have passed before merging new code",
    "assessment": "Manual",
    "remediation": "For each code repository in use, require all status checks to pass before permitting a merge of new code by performing the following: 1. On GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", check if there is a rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Require status checks to pass before merging . 7. Click Create or Save changes . Default Value: By default, no checks are defined per project, and thus no enforcement of checks is made. CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_merge_checks_passed",
      "code_repository_pre_merge_validation_successful",
      "code_repository_merge_requirements_satisfied",
      "code_repository_merge_approvals_completed",
      "code_repository_merge_conditions_met",
      "code_repository_merge_prerequisites_fulfilled",
      "code_repository_merge_quality_gate_passed",
      "code_repository_merge_security_checks_passed",
      "code_repository_merge_compliance_verified",
      "code_repository_merge_approvals_required"
    ]
  },
  {
    "id": "1.1.10",
    "title": "Ensure open Git branches are up to date before they can be merged into code base",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "git_branch_up_to_date_before_merge",
      "git_branch_merge_requirement_freshness",
      "git_branch_pre_merge_validation",
      "git_branch_merge_compliance_check",
      "git_branch_merge_freshness_requirement",
      "git_branch_merge_up_to_date",
      "git_branch_merge_current_state",
      "git_branch_merge_latest_changes",
      "git_branch_merge_sync_requirement",
      "git_branch_merge_update_check"
    ]
  },
  {
    "id": "1.1.11",
    "title": "Ensure all open comments are resolved before allowing code change merging",
    "assessment": "Manual",
    "remediation": "For each code repository in use, require open comments to be resolved before the relevant code change can be merged by performing the following: 1. On GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Require conversation resolution before merging . 7. Click Create or Save changes . Default Value: By default, code changes with open comments on them are able to be merged into the code base.",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_pull_request_comments_resolved",
      "code_repository_merge_comments_closed",
      "code_repository_pr_comments_resolved_before_merge",
      "code_repository_change_comments_resolved",
      "code_repository_merge_comments_resolved",
      "code_repository_pr_comments_closed_before_merge",
      "code_repository_comments_resolved_before_merge",
      "code_repository_merge_comments_closed_before_approval"
    ]
  },
  {
    "id": "1.1.12",
    "title": "Ensure verification of signed commits for new changes before merging",
    "assessment": "Manual",
    "remediation": "For each repository in use, enforce the branch protection rule of requiring signed commits, and make sure only signed commits are capable of merging by performing the following: 1. On GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Require signed commits . 7. Click Create or Save changes . References: 1. https://docs.github.com/en/authentication/managing-commit-signature- verification/signing-commits",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "git_repository_signed_commits_required",
      "git_repository_commit_verification_enabled",
      "git_repository_merge_signed_commits_only",
      "git_repository_commit_signing_enforced",
      "git_repository_verified_commits_required"
    ]
  },
  {
    "id": "1.1.13",
    "title": "Ensure linear history is required",
    "assessment": "Manual",
    "remediation": "For every code repository in use, perform the following steps to require linear history and/or allow only rebase merge and squash merge: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Require linear history . 7. Click Create or Save changes .",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "git_repository_linear_history_required",
      "git_repository_no_merge_commits_allowed",
      "git_repository_rebase_required",
      "git_repository_commit_history_protected",
      "git_repository_no_force_push_allowed"
    ]
  },
  {
    "id": "1.1.14",
    "title": "Ensure branch protection rules are enforced for administrators",
    "assessment": "Manual",
    "remediation": "For every code repository in use, enforce branch protection rules on administrators as well, by performing the following: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Select Do not allow bypassing the above settings . 7. Click Create or Save changes . Default Value: Administrator accounts are not subject to branch protection rules by default. References: 1. https://docs.github.com/en/repositories/configuring-branches-and-merges-in- your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch- protection-rule",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "github_branch_admin_protection_enabled",
      "github_branch_admin_approval_required",
      "github_branch_admin_status_checks_enabled",
      "github_branch_admin_linear_history_required",
      "github_branch_admin_restrict_force_pushes",
      "github_branch_admin_require_signed_commits",
      "github_branch_admin_require_conversation_resolution",
      "github_branch_admin_require_code_owner_reviews",
      "github_branch_admin_require_up_to_date_branch",
      "github_branch_admin_require_deployments_success"
    ]
  },
  {
    "id": "1.1.15",
    "title": "Ensure pushing or merging of new code is restricted to specific individuals or teams",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_push_restricted_to_teams",
      "code_repository_merge_restricted_to_teams",
      "code_repository_push_restricted_to_individuals",
      "code_repository_merge_restricted_to_individuals",
      "code_repository_push_merge_restricted_to_teams",
      "code_repository_push_merge_restricted_to_individuals",
      "code_repository_branch_protection_restricted",
      "code_repository_branch_protection_restricted_to_teams",
      "code_repository_branch_protection_restricted_to_individuals",
      "code_repository_write_access_restricted_to_teams",
      "code_repository_write_access_restricted_to_individuals"
    ]
  },
  {
    "id": "1.1.16",
    "title": "Ensure force push code to branches is denied",
    "assessment": "Manual",
    "remediation": "For each repository in use, block the option to \"Force Push\" code by performing the following: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Uncheck Allow force pushes . 7. Click Create or Save changes . References: 1. https://docs.github.com/en/repositories/configuring-branches-and-merges-in- your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch- protection-rule CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "git_repository_force_push_denied",
      "git_branch_force_push_protected",
      "git_repository_branch_force_push_disabled",
      "git_repository_force_push_restricted",
      "git_branch_force_push_blocked"
    ],
    "references": "1. https://docs.github.com/en/repositories/configuring-branches-and-merges-in- your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch- protection-rule CIS Controls: Controls Version Control IG 1 IG 2 IG 3 v8 16.1 Establish and Maintain a Secure Application Development Process Establish and maintain a secure application development process. In the process, address such items as: secure application design standards, secure coding practices, developer training, vulnerability management, security of third-party code, and application security testing procedures. Review and update documentation annually, or when significant enterprise changes occur that could impact this Safeguard. \u25cf \u25cf"
  },
  {
    "id": "1.1.17",
    "title": "Ensure branch deletions are denied",
    "assessment": "Manual",
    "remediation": "For each repository that is being used, block the option to delete protected branches by performing the following: 1. On GitHub, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the \"Code and automation\" section of the sidebar, click Branches . 4. Next to \"Branch protection rules\", verify that there is at least one rule for your main branch. If there is, click Edit to its right. If there isn't, click Add rule . 5. If you add the rule, under \"Branch name pattern\", type the branch name or pattern you want to protect. 6. Uncheck Allow deletions . 7. Click Create or Save changes . References: 1. https://docs.github.com/en/repositories/configuring-branches-and-merges-in- your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch- protection-rule CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "codebuild_project_branch_deletion_denied",
      "codebuild_repository_branch_protection_enabled",
      "codebuild_branch_deletion_restricted",
      "codebuild_branch_deletion_policy_enforced",
      "codebuild_branch_deletion_blocked",
      "codebuild_branch_deletion_prevention_enabled",
      "codebuild_branch_deletion_deny_rule_active"
    ],
    "references": "1. https://docs.github.com/en/repositories/configuring-branches-and-merges-in- your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch- protection-rule CIS Controls: Controls Version Control IG 1 IG 2 IG 3 v8 3.4 Enforce Data Retention Retain data according to the enterprise\u2019s data management process. Data retention must include both minimum and maximum timelines. \u25cf \u25cf \u25cf v7 14.6 Protect Information through Access Control Lists Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities. \u25cf \u25cf \u25cf"
  },
  {
    "id": "1.1.18",
    "title": "Ensure any merging of code is automatically scanned for risks",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_merge_scan_enabled",
      "code_repository_merge_scan_automated",
      "code_repository_merge_risk_detection_enabled",
      "code_repository_merge_security_scan_required",
      "code_repository_merge_vulnerability_check_enabled",
      "code_repository_merge_compliance_scan_enabled",
      "code_repository_merge_static_analysis_enabled",
      "code_repository_merge_threat_detection_enabled"
    ]
  },
  {
    "id": "1.1.19",
    "title": "Ensure any changes to branch protection rules are audited",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "github_repository_branch_protection_audit_enabled",
      "github_repository_branch_protection_changes_logged",
      "github_repository_branch_protection_monitoring_enabled",
      "github_repository_branch_protection_events_tracked",
      "github_repository_branch_protection_audit_logging_enabled"
    ]
  },
  {
    "id": "1.1.20",
    "title": "Ensure branch protection is enforced on the default branch",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "github_repository_branch_protection_enabled",
      "github_repository_default_branch_protection_enabled",
      "github_repository_branch_require_approvals",
      "github_repository_branch_require_reviews",
      "github_repository_branch_require_status_checks",
      "github_repository_branch_restrict_force_pushes",
      "github_repository_branch_restrict_deletions",
      "github_repository_branch_require_linear_history",
      "github_repository_branch_require_signed_commits",
      "github_repository_branch_require_up_to_date"
    ]
  },
  {
    "id": "1.2.1",
    "title": "Ensure all public repositories contain a SECURITY.md file",
    "assessment": "Manual",
    "remediation": "Enforce that each public repository has a SECURITY.md file by performing the following: 1. On GitHub.com, navigate to the main page of the repository. 2. Under the repository name, click Security . 3. In the left sidebar, click Security policy . 4. Click Start setup . 5. In the new SECURITY.md file, add information about supported versions of your project and how to report a vulnerability. 6. At the bottom of the page, type a commit message. 7. Below the commit message fields, choose to create a new branch for your commit and then create a pull request. 8. Click Propose file change . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "github_repository_security_md_present",
      "gitlab_repository_security_md_present",
      "bitbucket_repository_security_md_present",
      "codecommit_repository_security_md_present",
      "azure_repos_repository_security_md_present"
    ]
  },
  {
    "id": "1.2.2",
    "title": "Ensure repository creation is limited to specific members",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "github_repository_creation_restricted_to_members",
      "github_repository_creation_limited_to_teams",
      "github_repository_creation_admin_only",
      "github_repository_creation_restricted_to_org_owners",
      "github_repository_creation_custom_role_required",
      "github_repository_creation_explicit_permissions",
      "github_repository_creation_no_public_access",
      "github_repository_creation_approved_members_only"
    ]
  },
  {
    "id": "1.2.3",
    "title": "Ensure repository deletion is limited to specific users",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_deletion_restricted_to_specific_users",
      "codebuild_project_deletion_restricted",
      "codebuild_project_deletion_permissions_limited",
      "codebuild_project_deletion_access_controlled",
      "codebuild_project_deletion_authorized_users_only"
    ]
  },
  {
    "id": "1.2.4",
    "title": "Ensure issue deletion is limited to specific users",
    "assessment": "Manual",
    "remediation": "Restrict issue deletion to a few trusted and responsible users only by performing either of the following steps: If Your organizations > Settings > Access > Member privileges > Allow members to delete issues for this organization is selected, allow only trusted members to have admin privileges: 1. In every repository, on GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Settings and then in the \"Access\" section of the sidebar, click Collaborators & teams . 3. Under \"Manage access\" use the dropdown Role menu to filter and search for admin members. Change their role by clicking the Role dropdown next to the username until there are only two trusted and qualified users with admin privileges. If it is not selected, allow only trusted users to become an organization owner: 1. In the top right corner of GitHub.com, click your profile photo, then click Your organizations. 2. Click the name of your organization and under your organization name, click People . 3. You will see a list of the people in your organization. Click Role and select Owners . Check every member you want to change permissions to. Above the list of members, use the drop-down menu and click Change role and choose Member > change role. Do that until there are only a few trusted and qualified users with organization owner privileges. In any case, only members with administrator or organization owner privileges can delete issues, regardless of your setting. Default Value: Only organization owners or members with admin privileges can delete issues. CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "github_repository_issue_deletion_restricted",
      "github_repository_issue_deletion_limited_to_roles",
      "github_repository_issue_deletion_admin_only",
      "github_repository_issue_deletion_permission_restricted",
      "github_repository_issue_deletion_user_scope_limited"
    ]
  },
  {
    "id": "1.2.5",
    "title": "Ensure all copies (forks) of code are tracked and accounted for",
    "assessment": "Manual",
    "remediation": "Track forks and examine them by performing the following on a regular basis: 1. On GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Insights . 3. In the left sidebar, click Forks . 4. Examine the forks listed there. CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "code_repository_fork_tracking_enabled",
      "code_repository_fork_inventory_maintained",
      "code_repository_fork_ownership_defined",
      "code_repository_fork_access_controlled",
      "code_repository_fork_audit_logging_enabled",
      "code_repository_fork_approval_required",
      "code_repository_fork_retention_policy_enforced",
      "code_repository_fork_security_scanning_enabled"
    ]
  },
  {
    "id": "1.2.6",
    "title": "Ensure all code projects are tracked for changes in visibility status",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_visibility_tracking_enabled",
      "code_project_visibility_monitoring_active",
      "code_repository_change_detection_enabled",
      "code_project_visibility_status_tracked",
      "code_repository_visibility_audit_enabled"
    ]
  },
  {
    "id": "1.2.7",
    "title": "Ensure inactive repositories are reviewed and archived periodically",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_inactive_reviewed_periodically",
      "code_repository_inactive_archived_periodically",
      "code_repository_inactive_reviewed_over_90d",
      "code_repository_inactive_archived_over_90d",
      "code_repository_inactive_reviewed_all_regions",
      "code_repository_inactive_archived_all_regions"
    ]
  },
  {
    "id": "1.3.1",
    "title": "Ensure inactive users are reviewed and removed periodically",
    "assessment": "Manual",
    "remediation": "If you have GitHub AE, perform the following to review inactive user accounts and remove them: 1. From an administrative account on GitHub AE, in the upper-right corner of any page, click the rocket icon. 2. If you're not already on the \"Site admin\" page, in the upper-left corner, click Site admin . 3. In the left sidebar, click Dormant users . 4. Find the users listed there under Your organizations > your organization > People and select them. 5. Click Remove from organization and Remove members . If you have GitHub Enterprise Cloud, perform the following: 1. In the top-right corner of GitHub.com, click your profile photo, then click Your enterprises . 2. In the list of enterprises, click the enterprise you want to view. 3. In the enterprise account sidebar, click Compliance . 4. To download your Dormant Users (beta) report as a CSV file, under \"Other\", click Download . 5. Find the users listed in the file under Your organizations > your organization > People and select them. 6. Click Remove from organization and Remove members . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "iam_user_inactive_reviewed_periodically",
      "iam_user_inactive_removed_periodically",
      "iam_user_inactive_reviewed_over_90d",
      "iam_user_inactive_removed_over_90d",
      "iam_user_inactive_reviewed_all_regions",
      "iam_user_inactive_removed_all_regions"
    ]
  },
  {
    "id": "1.3.2",
    "title": "Ensure team creation is limited to specific members",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_team_creation_restricted_to_members",
      "iam_team_creation_limited_to_roles",
      "iam_team_creation_restricted_to_admins",
      "iam_team_creation_limited_to_owners",
      "iam_team_creation_restricted_to_approved_users"
    ]
  },
  {
    "id": "1.3.3",
    "title": "Ensure minimum number of administrators are set for the organization",
    "assessment": "Manual",
    "remediation": "Set the minimum number of administrators in your organization by performing the following: 1. In the top right corner of GitHub, click your profile photo, then click Your profile . 2. On the left side of your profile page, under \"Organizations\", click the icon for your organization. 3. Under your organization name, click People . 4. In the Role drop-down, choose Owners . 5. Select the person or people you'd like to remove from owner role. 6. Above the list of members, use the drop-down menu and click Change role. 7. Select Member , then click Change role . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "iam_user_admin_privileges_minimized",
      "iam_role_admin_privileges_minimized",
      "iam_policy_admin_privileges_restricted",
      "organization_admin_accounts_minimized",
      "iam_admin_count_within_threshold",
      "iam_admin_privileges_audited_regularly",
      "iam_admin_privileges_justified",
      "organization_admin_privileges_reviewed_periodically"
    ]
  },
  {
    "id": "1.3.4",
    "title": "Ensure Multi-Factor Authentication (MFA) is required for contributors of new code",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_user_mfa_required_for_contributors",
      "iam_role_mfa_required_for_code_contributors",
      "iam_policy_mfa_enforced_for_contributors",
      "code_repository_contributor_mfa_required",
      "code_commit_contributor_mfa_enabled",
      "devops_contributor_mfa_enforced",
      "repository_access_mfa_required_for_contributors",
      "code_contributor_mfa_mandatory",
      "iam_contributor_mfa_required",
      "code_push_mfa_enforced_for_contributors"
    ]
  },
  {
    "id": "1.3.5",
    "title": "Ensure the organization is requiring members to use Multi- Factor Authentication (MFA)",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "organization_mfa_required",
      "organization_member_mfa_enabled",
      "organization_mfa_enforcement_active",
      "organization_mfa_policy_compliant",
      "organization_mfa_all_members_enabled"
    ]
  },
  {
    "id": "1.3.6",
    "title": "Ensure new members are required to be invited using company-approved email",
    "assessment": "Manual",
    "remediation": "For each organization, allow only users with company-approved email to be invited. If a user was invited without company-approved email, perform the following: 1. In the top right corner of GitHub.com, click your profile photo, then click Your organizations . 2. Click the name of your organization and under your organization name, click People . 3. On the People tab, click Invitations . Next to the username or email address of the person whose invitation you'd like to cancel, click Edit invitation . 4. To cancel the user's invitation to join your organization, click Cancel invitation . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "iam_member_invitation_company_email_required",
      "iam_member_invitation_restricted_to_approved_domains",
      "iam_member_invitation_email_validation_enabled",
      "iam_member_invitation_domain_whitelist_enabled",
      "iam_member_invitation_approved_email_only",
      "iam_member_invitation_external_email_blocked",
      "iam_member_invitation_domain_restriction_enforced",
      "iam_member_invitation_approved_sender_required"
    ]
  },
  {
    "id": "1.3.7",
    "title": "Ensure two administrators are set for each repository",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "github_repository_two_admins_required",
      "github_repository_admin_count_minimum",
      "repository_admin_dual_control_enabled",
      "github_repository_admin_redundancy_required",
      "repository_admin_count_compliance_check"
    ]
  },
  {
    "id": "1.3.8",
    "title": "Ensure strict base permissions are set for repositories",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_strict_base_permissions",
      "codebuild_repository_strict_base_permissions",
      "codebuild_repository_minimum_permissions",
      "codebuild_project_minimum_permissions",
      "codebuild_repository_restrictive_access",
      "codebuild_project_restrictive_access",
      "codebuild_repository_least_privilege",
      "codebuild_project_least_privilege"
    ]
  },
  {
    "id": "1.3.9",
    "title": "Ensure an organization\u2019s identity is confirmed with a \u201cVerified\u201d badge",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_organization_verified_badge",
      "iam_identity_verified_status",
      "iam_organization_identity_confirmed",
      "iam_account_verified_badge_enabled",
      "iam_identity_verification_required"
    ],
    "references": "1. https://docs.github.com/en/organizations/managing-organization- settings/verifying-or-approving-a-domain-for-your-organization CIS Controls: Controls Version Control IG 1 IG 2 IG 3 v8 16.1 Establish and Maintain a Secure Application Development Process Establish and maintain a secure application development process. In the process, address such items as: secure application design standards, secure coding practices, developer training, vulnerability management, security of third-party code, and application security testing procedures. Review and update documentation annually, or when significant enterprise changes occur that could impact this Safeguard. \u25cf \u25cf v8 16.11 Leverage Vetted Modules or Services for Application Security Components Leverage vetted modules or services for application security components, such as identity management, encryption, and auditing and logging. Using platform features in critical security functions will reduce developers\u2019 workload and minimize the likelihood of design or implementation errors. Modern operating systems provide effective mechanisms for identification, authentication, and authorization and make those mechanisms available to applications. Use only standardized, currently accepted, and extensively reviewed encryption algorithms. Operating systems also provide mechanisms to create and maintain secure audit logs. \u25cf \u25cf v7 18.1 Establish Secure Coding Practices Establish secure coding practices appropriate to the programming language and development environment being used. \u25cf \u25cf"
  },
  {
    "id": "1.3.10",
    "title": "Ensure Source Code Management (SCM) email notifications are restricted to verified domains",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "scm_repository_email_notifications_restricted_to_verified_domains",
      "scm_repository_email_notifications_domain_verified",
      "scm_repository_notification_email_domain_restricted",
      "scm_repository_notification_email_verified_domains_only",
      "scm_repository_email_notification_domain_validation_enabled"
    ]
  },
  {
    "id": "1.3.11",
    "title": "Ensure an organization provides SSH certificates",
    "assessment": "Manual",
    "remediation": "Only if you have an enterprise account, deploy an SSH Certificate Authority server and configure it to provide an SSH certificate with which to sign keys by performing the following: 1. In the top right corner of GitHub.com, click your profile photo, then click Your organizations . 2. Next to the organization, click Settings . 3. In the \"Security\" section of the sidebar, click Authentication security . 4. To the right of \"SSH Certificate Authorities\", click New CA . 5. Under \"Key,\" paste your public SSH key. 6. Click Add CA . 7. Click Save . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "compute_ssh_certificate_organization_provided",
      "compute_ssh_certificate_managed",
      "compute_ssh_certificate_centralized",
      "compute_ssh_certificate_trusted_ca",
      "compute_ssh_certificate_rotation_enabled",
      "compute_ssh_certificate_expiry_valid",
      "compute_ssh_certificate_revocation_enabled",
      "compute_ssh_certificate_min_tls_1_2"
    ]
  },
  {
    "id": "1.3.12",
    "title": "Ensure Git access is limited based on IP addresses",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "git_repository_ip_restricted_access",
      "git_repository_ip_whitelisted",
      "git_repository_ip_based_access_control",
      "git_repository_ip_restriction_enabled",
      "git_repository_ip_access_limited"
    ],
    "references": "1. https://docs.github.com/en/organizations/keeping-your-organization- secure/managing-allowed-ip-addresses-for-your-organization CIS Controls: Controls Version Control IG 1 IG 2 IG 3 v8 2.5 Allowlist Authorized Software Use technical controls, such as application allowlisting, to ensure that only authorized software can execute or be accessed. Reassess bi-annually, or more frequently. \u25cf \u25cf v8 2.6 Allowlist Authorized Libraries Use technical controls to ensure that only authorized software libraries, such as specific .dll, .ocx, .so, etc., files, are allowed to load into a system process. Block unauthorized libraries from loading into a system process. Reassess bi- annually, or more frequently. \u25cf \u25cf v7 2.7 Utilize Application Whitelisting Utilize application whitelisting technology on all assets to ensure that only authorized software executes and all unauthorized software is blocked from executing on assets. \u25cf v7 2.8 Implement Application Whitelisting of Libraries The organization's application whitelisting software must ensure that only authorized software libraries (such as *.dll, *.ocx, *.so, etc) are allowed to load into a system process. \u25cf"
  },
  {
    "id": "1.3.13",
    "title": "Ensure anomalous code behavior is tracked",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloudtrail_trail_anomalous_behavior_monitoring_enabled",
      "cloudtrail_trail_anomalous_code_detection_enabled",
      "cloudtrail_trail_behavior_baseline_established",
      "cloudtrail_trail_anomaly_alerting_configured",
      "cloudtrail_trail_anomalous_activity_logging_enabled",
      "cloudtrail_trail_anomaly_detection_thresholds_set",
      "cloudtrail_trail_anomalous_behavior_notification_enabled",
      "cloudtrail_trail_anomaly_monitoring_continuous",
      "cloudtrail_trail_anomalous_code_behavior_tracked",
      "cloudtrail_trail_anomaly_detection_automated"
    ]
  },
  {
    "id": "1.4.1",
    "title": "Ensure administrator approval is required for every installed application",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "device_management_application_admin_approval_required",
      "device_management_application_install_restricted",
      "device_management_application_admin_consent_enabled",
      "device_management_application_install_approval_mandatory",
      "device_management_application_admin_approval_enforced"
    ]
  },
  {
    "id": "1.4.2",
    "title": "Ensure stale applications are reviewed and inactive ones are removed",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_application_reviewed_over_90d",
      "compute_application_inactive_removed",
      "compute_application_activity_monitored",
      "compute_application_lifecycle_managed",
      "compute_application_usage_tracked",
      "compute_application_rotation_enabled",
      "compute_application_deployment_verified",
      "compute_application_dependency_checked"
    ]
  },
  {
    "id": "1.4.3",
    "title": "Ensure the access granted to each installed application is limited to the least privilege needed",
    "assessment": "Manual",
    "remediation": "Grant permissions to applications by the \"least privilege\" principle, meaning the lowest possible permission necessary: a. For GitHub Apps, perform the following: 1. In the top right corner of GitHub.com, click your profile photo, then click Your organizations . 2. Next to the organization, click Settings . 3. In the \"Integrations\" section of the sidebar, click GitHub Apps . 4. Next to every GitHub App, click Configure . 5. Review the GitHub App's permissions and repository access. Edit the permissions granted to the least possible. For example, restrict the number of repositories the App can access. 6. Click Save . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "iam_role_least_privilege",
      "iam_policy_least_privilege",
      "iam_user_least_privilege",
      "iam_group_least_privilege",
      "compute_instance_least_privilege",
      "compute_service_account_least_privilege",
      "cloudtrail_trail_least_privilege",
      "s3_bucket_least_privilege",
      "lambda_function_least_privilege",
      "cloud_cdn_distribution_least_privilege"
    ]
  },
  {
    "id": "1.4.4",
    "title": "Ensure only secured webhooks are used",
    "assessment": "Manual",
    "audit": "Perform the following to secure all webhooks used(over HTTPS): 1. Navigate to your organization or repository and select Settings . 2. Select Webhooks on the side menu. 3. Ensure all webhooks starts with 'https'.",
    "remediation": "Perform the following to secure all webhooks used(over HTTPS): 1. Navigate to your organization or repository and select Settings . 2. Select Webhooks on the side menu. 3. Find the webhooks that starts with 'http' and not 'https'. 4. Ensure the endpoint (URL) of the webhook listens to secured port (443) and uses certificate. 5. Click Edit . 6. Change the payload URL to https and ensure Enable SSL verification is checked. 7. Click Update webhook . CIS Controls:",
    "description": "",
    "rationale": "",
    "function_names": [
      "compute_webhook_https_enabled",
      "compute_webhook_tls_1_2_enabled",
      "compute_webhook_authentication_required",
      "compute_webhook_ip_restricted",
      "compute_webhook_token_auth_enabled",
      "compute_webhook_signature_verification_enabled",
      "compute_webhook_no_plaintext_allowed",
      "compute_webhook_secure_headers_enabled"
    ]
  },
  {
    "id": "1.5.1",
    "title": "Ensure scanners are in place to identify and prevent sensitive data in code",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_sensitive_data_scanning_enabled",
      "code_repository_scanner_active",
      "code_repository_sensitive_data_prevention_enabled",
      "code_repository_scanner_minimum_coverage",
      "code_repository_scanner_realtime_monitoring_enabled",
      "code_repository_scanner_regular_scans_enabled",
      "code_repository_scanner_block_sensitive_data",
      "code_repository_scanner_all_repos_covered"
    ]
  },
  {
    "id": "1.5.2",
    "title": "Ensure scanners are in place to secure Continuous Integration (CI) pipeline instructions",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "ci_pipeline_scanner_enabled",
      "ci_pipeline_instruction_security_scanned",
      "ci_pipeline_instruction_scanner_active",
      "ci_pipeline_instruction_scanner_configured",
      "ci_pipeline_instruction_scanner_compliance",
      "ci_pipeline_instruction_scanner_continuous",
      "ci_pipeline_instruction_scanner_secure",
      "ci_pipeline_instruction_scanner_present"
    ]
  },
  {
    "id": "1.5.3",
    "title": "Ensure scanners are in place to secure Infrastructure as Code (IaC) instructions",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iac_scanner_integrated",
      "iac_scanner_active",
      "iac_scanner_automated",
      "iac_scanner_coverage_all_repos",
      "iac_scanner_security_rules_enabled",
      "iac_scanner_vulnerability_detection_enabled",
      "iac_scanner_compliance_checks_enabled",
      "iac_scanner_continuous_monitoring_enabled",
      "iac_scanner_alerting_enabled",
      "iac_scanner_remediation_automated"
    ]
  },
  {
    "id": "1.5.4",
    "title": "Ensure scanners are in place for code vulnerabilities",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_vulnerability_scanning_enabled",
      "code_repository_scanner_active",
      "code_repository_scanner_min_coverage",
      "code_repository_scanner_recent_runs",
      "code_repository_scanner_integration_configured",
      "code_repository_scanner_automated_trigger",
      "code_repository_scanner_critical_severity_enabled",
      "code_repository_scanner_regular_updates",
      "code_repository_scanner_approved_tools",
      "code_repository_scanner_result_logging_enabled"
    ]
  },
  {
    "id": "1.5.5",
    "title": "Ensure scanners are in place for open-source vulnerabilities in used packages",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_instance_vulnerability_scanning_enabled",
      "container_image_vulnerability_scanning_enabled",
      "function_code_vulnerability_scanning_enabled",
      "repository_package_vulnerability_scanning_enabled",
      "artifact_registry_vulnerability_scanning_enabled",
      "dependency_manifest_vulnerability_scanning_enabled",
      "runtime_environment_vulnerability_scanning_enabled",
      "deployment_pipeline_vulnerability_scanning_enabled",
      "third_party_library_vulnerability_scanning_enabled",
      "build_artifact_vulnerability_scanning_enabled"
    ]
  },
  {
    "id": "1.5.6",
    "title": "Ensure scanners are in place for open-source license issues in used packages",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_license_scanner_enabled",
      "codebuild_project_license_scanner_active",
      "codebuild_project_license_scanner_configured",
      "codebuild_project_license_scanner_compliance",
      "codebuild_project_license_scanner_automated",
      "codebuild_project_license_scanner_integrated",
      "codebuild_project_license_scanner_continuous",
      "codebuild_project_license_scanner_enforced",
      "codebuild_project_license_scanner_approved",
      "codebuild_project_license_scanner_verified"
    ]
  },
  {
    "id": "2.1.1",
    "title": "Ensure each pipeline has a single responsibility",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_single_responsibility",
      "codebuild_pipeline_single_responsibility",
      "codepipeline_pipeline_single_responsibility",
      "devops_pipeline_single_responsibility",
      "ci_cd_pipeline_single_responsibility"
    ]
  },
  {
    "id": "2.1.2",
    "title": "Ensure all aspects of the pipeline infrastructure and configuration are immutable",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "pipeline_configuration_immutable",
      "pipeline_infrastructure_immutable",
      "pipeline_artifacts_immutable",
      "pipeline_environment_immutable",
      "pipeline_code_repository_immutable",
      "pipeline_build_spec_immutable",
      "pipeline_deployment_spec_immutable",
      "pipeline_iam_roles_immutable",
      "pipeline_storage_immutable",
      "pipeline_networking_immutable"
    ]
  },
  {
    "id": "2.1.3",
    "title": "Ensure the build environment is logged",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_build_logging_enabled",
      "cloud_build_logging_all_events",
      "cloud_build_logging_retention_over_90d",
      "cloud_build_logging_export_enabled",
      "cloud_build_logging_immutable_enabled",
      "cloud_build_logging_centralized_enabled",
      "cloud_build_logging_monitoring_enabled",
      "cloud_build_logging_alerting_enabled"
    ]
  },
  {
    "id": "2.1.4",
    "title": "Ensure the creation of the build environment is automated",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_environment_automated",
      "compute_build_environment_automated_creation",
      "compute_build_environment_automated_deployment",
      "compute_build_environment_automated_provisioning",
      "compute_build_environment_automated_configuration"
    ]
  },
  {
    "id": "2.1.5",
    "title": "Ensure access to build environments is limited",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_build_environment_access_restricted",
      "iam_build_environment_access_limited",
      "iam_build_environment_no_public_access",
      "iam_build_environment_minimal_permissions",
      "iam_build_environment_principal_restricted",
      "iam_build_environment_identity_based_restricted",
      "iam_build_environment_no_anonymous_access",
      "iam_build_environment_no_unauthenticated_access"
    ]
  },
  {
    "id": "2.1.6",
    "title": "Ensure users must authenticate to access the build environment",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_build_build_authentication_required",
      "cloud_build_build_no_anonymous_access",
      "cloud_build_build_user_authentication_enabled",
      "cloud_build_build_identity_authentication_enabled",
      "cloud_build_build_secure_access_enabled"
    ]
  },
  {
    "id": "2.1.7",
    "title": "Ensure build secrets are limited to the minimal necessary scope",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_build_secret_minimal_scope",
      "cloud_build_secret_scope_restricted",
      "cloud_build_secret_least_privilege",
      "cloud_build_secret_narrow_scope",
      "cloud_build_secret_scope_limited",
      "cloud_build_secret_no_excessive_access",
      "cloud_build_secret_scope_minimized"
    ]
  },
  {
    "id": "2.1.8",
    "title": "Ensure the build infrastructure is automatically scanned for vulnerabilities",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_infrastructure_vulnerability_scanning_enabled",
      "compute_build_infrastructure_auto_scan_enabled",
      "compute_build_pipeline_vulnerability_scanning_enabled",
      "compute_build_system_continuous_vulnerability_scanning",
      "compute_build_environment_auto_vulnerability_detection",
      "compute_build_infrastructure_security_scanning_enabled",
      "compute_build_pipeline_automated_vulnerability_checks",
      "compute_build_system_vulnerability_scanning_active"
    ]
  },
  {
    "id": "2.1.9",
    "title": "Ensure default passwords are not used",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_user_default_password_not_used",
      "compute_instance_default_password_not_used",
      "database_user_default_password_not_used",
      "cloud_cdn_default_password_not_used",
      "storage_bucket_default_password_not_used",
      "network_load_balancer_default_password_not_used",
      "container_registry_default_password_not_used",
      "cloudtrail_default_password_not_used",
      "kms_key_default_password_not_used",
      "cloud_function_default_password_not_used"
    ]
  },
  {
    "id": "2.1.10",
    "title": "Ensure webhooks of the build environment are secured",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "build_environment_webhook_https_enabled",
      "build_environment_webhook_authentication_required",
      "build_environment_webhook_ip_restricted",
      "build_environment_webhook_secret_configured",
      "build_environment_webhook_signature_validation_enabled",
      "build_environment_webhook_tls_min_version_1_2",
      "build_environment_webhook_token_rotation_enabled",
      "build_environment_webhook_rate_limiting_enabled"
    ]
  },
  {
    "id": "2.1.11",
    "title": "Ensure minimum number of administrators are set for the build environment",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_user_no_admin_privileges",
      "iam_role_no_admin_privileges",
      "iam_group_no_admin_privileges",
      "build_environment_admin_count_minimized",
      "build_environment_admin_access_restricted",
      "build_environment_admin_privileges_reviewed",
      "build_environment_admin_privileges_audited",
      "build_environment_admin_privileges_rotated",
      "build_environment_admin_privileges_temporary",
      "build_environment_admin_privileges_justified"
    ]
  },
  {
    "id": "2.2.1",
    "title": "Ensure build workers are single-used",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_build_worker_single_use",
      "cloud_build_worker_no_reuse",
      "cloud_build_worker_ephemeral",
      "cloud_build_worker_dedicated_use",
      "cloud_build_worker_no_shared_usage"
    ]
  },
  {
    "id": "2.2.2",
    "title": "Ensure build worker environments and commands are passed and not pulled",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_worker_environments_passed",
      "compute_build_worker_commands_passed",
      "compute_build_worker_no_environment_pull",
      "compute_build_worker_no_command_pull",
      "compute_build_worker_immutable_environments",
      "compute_build_worker_immutable_commands",
      "compute_build_worker_secure_environment_source",
      "compute_build_worker_secure_command_source"
    ]
  },
  {
    "id": "2.2.3",
    "title": "Ensure the duties of each build worker are segregated",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "build_worker_duties_segregated",
      "build_worker_role_separation",
      "build_worker_least_privilege",
      "build_worker_task_isolation",
      "build_worker_access_restricted",
      "build_worker_permission_segregation",
      "build_worker_function_separation",
      "build_worker_privilege_segregation"
    ]
  },
  {
    "id": "2.2.4",
    "title": "Ensure build workers have minimal network connectivity",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_worker_minimal_network_connectivity",
      "compute_build_worker_restricted_network_access",
      "compute_build_worker_network_isolation_enabled",
      "compute_build_worker_outbound_traffic_restricted",
      "compute_build_worker_inbound_traffic_restricted",
      "compute_build_worker_private_network_only",
      "compute_build_worker_no_public_ip_assigned",
      "compute_build_worker_security_group_restricted",
      "compute_build_worker_network_acl_restricted",
      "compute_build_worker_vpc_endpoint_only"
    ]
  },
  {
    "id": "2.2.5",
    "title": "Ensure run-time security is enforced for build workers",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_worker_runtime_security_enabled",
      "compute_build_worker_security_enforcement_active",
      "compute_worker_runtime_protection_enabled",
      "compute_build_worker_runtime_monitoring_enabled",
      "compute_worker_runtime_security_enforced"
    ]
  },
  {
    "id": "2.2.6",
    "title": "Ensure build workers are automatically scanned for vulnerabilities",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_worker_vulnerability_scan_enabled",
      "compute_build_worker_auto_scan_enabled",
      "compute_worker_vulnerability_scanning_active",
      "compute_build_worker_security_scan_enabled",
      "compute_worker_auto_vulnerability_scan_enabled"
    ]
  },
  {
    "id": "2.2.7",
    "title": "Ensure build workers' deployment configuration is stored in a version control platform",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_worker_deployment_config_version_controlled",
      "compute_worker_config_source_control_enabled",
      "build_worker_deployment_config_versioned",
      "compute_worker_deployment_config_repo_stored",
      "build_worker_config_source_control_required"
    ]
  },
  {
    "id": "2.2.8",
    "title": "Ensure resource consumption of build workers is monitored",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_build_worker_resource_monitoring_enabled",
      "compute_build_worker_cpu_usage_monitored",
      "compute_build_worker_memory_usage_monitored",
      "compute_build_worker_disk_usage_monitored",
      "compute_build_worker_network_usage_monitored",
      "compute_build_worker_resource_thresholds_configured",
      "compute_build_worker_monitoring_alerts_enabled",
      "compute_build_worker_metrics_collection_enabled"
    ]
  },
  {
    "id": "2.3.1",
    "title": "Ensure all build steps are defined as code",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloudbuild_build_step_code_defined",
      "cloudbuild_pipeline_code_defined",
      "cloudbuild_step_inline_disabled",
      "cloudbuild_step_script_disabled",
      "cloudbuild_step_artifact_defined",
      "cloudbuild_step_container_defined",
      "cloudbuild_step_source_defined",
      "cloudbuild_step_immutable_defined",
      "cloudbuild_step_version_controlled",
      "cloudbuild_step_no_inline_scripts"
    ]
  },
  {
    "id": "2.3.2",
    "title": "Ensure steps have clearly defined build stage input and output",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "build_pipeline_steps_input_output_defined",
      "build_stage_input_output_valid",
      "build_step_io_validation_enabled",
      "build_pipeline_stage_io_configured",
      "build_process_input_output_mapped",
      "build_stage_io_requirements_enforced",
      "build_pipeline_io_definition_complete",
      "build_step_io_specification_present"
    ]
  },
  {
    "id": "2.3.3",
    "title": "Ensure output is written to a separate, secured storage repository",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloudtrail_trail_logging_to_separate_bucket",
      "cloudtrail_trail_log_bucket_encryption_enabled",
      "cloudtrail_trail_log_bucket_access_restricted",
      "cloudtrail_trail_log_bucket_versioning_enabled",
      "cloudtrail_trail_log_bucket_public_access_blocked",
      "cloudtrail_trail_log_bucket_retention_policy_set",
      "cloudtrail_trail_log_bucket_monitoring_enabled",
      "cloudtrail_trail_log_bucket_immutable_storage_enabled"
    ]
  },
  {
    "id": "2.3.4",
    "title": "Ensure changes to pipeline files are tracked and reviewed",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_versioning_enabled",
      "codebuild_pipeline_change_tracking_enabled",
      "codebuild_pipeline_review_required",
      "codebuild_source_repository_commit_history_enabled",
      "codebuild_pipeline_change_approval_required",
      "codebuild_pipeline_audit_logging_enabled",
      "codebuild_pipeline_change_notification_enabled",
      "codebuild_pipeline_immutable_artifacts_enabled"
    ]
  },
  {
    "id": "2.3.5",
    "title": "Ensure access to build process triggering is minimized",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_build_trigger_access_minimized",
      "cloud_build_trigger_iam_restricted",
      "cloud_build_trigger_permissions_least_privilege",
      "cloud_build_trigger_public_access_disabled",
      "cloud_build_trigger_auth_required",
      "cloud_build_trigger_service_account_restricted",
      "cloud_build_trigger_principal_minimized",
      "cloud_build_trigger_identity_based_access_only"
    ]
  },
  {
    "id": "2.3.6",
    "title": "Ensure pipelines are automatically scanned for misconfigurations",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "devops_pipeline_scan_enabled",
      "devops_pipeline_misconfiguration_scan_enabled",
      "devops_pipeline_automated_scan_enabled",
      "devops_pipeline_security_scan_enabled",
      "devops_pipeline_compliance_scan_enabled",
      "devops_pipeline_cis_scan_enabled",
      "devops_pipeline_continuous_scan_enabled",
      "devops_pipeline_static_scan_enabled"
    ]
  },
  {
    "id": "2.3.7",
    "title": "Ensure pipelines are automatically scanned for vulnerabilities",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_vulnerability_scanning_enabled",
      "codepipeline_vulnerability_scanning_enabled",
      "codebuild_project_scan_on_push_enabled",
      "codepipeline_scan_on_push_enabled",
      "codebuild_project_scan_frequency_daily",
      "codepipeline_scan_frequency_daily",
      "codebuild_project_scan_tool_integrated",
      "codepipeline_scan_tool_integrated",
      "codebuild_project_scan_results_logged",
      "codepipeline_scan_results_logged"
    ]
  },
  {
    "id": "2.3.8",
    "title": "Ensure scanners are in place to identify and prevent sensitive data in pipeline files",
    "assessment": "Automated",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_pipeline_sensitive_data_scanning_enabled",
      "cloud_pipeline_scanner_active",
      "cloud_pipeline_sensitive_data_prevention_enabled",
      "cloud_pipeline_file_scanning_enabled",
      "cloud_pipeline_data_protection_scanner_active",
      "cloud_pipeline_sensitive_content_detection_enabled",
      "cloud_pipeline_secrets_scanning_enabled",
      "cloud_pipeline_compliance_scanner_active"
    ]
  },
  {
    "id": "2.4.1",
    "title": "Ensure all artifacts on all releases are signed",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "artifact_release_signature_required",
      "artifact_release_signing_enabled",
      "release_artifact_signature_enforced",
      "artifact_signature_validation_enabled",
      "release_artifact_integrity_verified",
      "artifact_signing_policy_enforced",
      "release_artifact_signature_required_all_versions",
      "artifact_signature_check_enabled_all_releases"
    ]
  },
  {
    "id": "2.4.2",
    "title": "Ensure all external dependencies used in the build process are locked",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "build_dependency_locked",
      "build_dependency_version_pinned",
      "build_external_dependency_locked",
      "build_dependency_immutable",
      "build_dependency_version_frozen",
      "build_external_dependency_version_pinned",
      "build_dependency_lockfile_present",
      "build_dependency_lockfile_valid",
      "build_external_dependency_lockfile_present",
      "build_dependency_lockfile_up_to_date"
    ]
  },
  {
    "id": "2.4.3",
    "title": "Ensure dependencies are validated before being used",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_image_dependency_validation_enabled",
      "compute_container_dependency_validation_enabled",
      "compute_function_dependency_validation_enabled",
      "compute_package_dependency_validation_enabled",
      "compute_dependency_integrity_check_enabled",
      "compute_dependency_signature_verification_enabled",
      "compute_dependency_source_trusted",
      "compute_dependency_version_pinned",
      "compute_dependency_auto_update_disabled",
      "compute_dependency_vulnerability_scan_enabled"
    ]
  },
  {
    "id": "2.4.4",
    "title": "Ensure the build pipeline creates reproducible artifacts",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "build_pipeline_artifact_reproducibility",
      "build_pipeline_reproducible_artifacts",
      "build_pipeline_immutable_artifacts",
      "build_pipeline_deterministic_builds",
      "build_pipeline_artifact_hash_verification",
      "build_pipeline_source_control_integration",
      "build_pipeline_dependency_locking",
      "build_pipeline_build_environment_isolation",
      "build_pipeline_artifact_signing",
      "build_pipeline_build_metadata_recording"
    ]
  },
  {
    "id": "2.4.5",
    "title": "Ensure pipeline steps produce a Software Bill of Materials (SBOM)",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_sbom_produced",
      "codepipeline_pipeline_sbom_required",
      "codebuild_build_sbom_generated",
      "codepipeline_step_sbom_enabled",
      "codebuild_artifact_sbom_included",
      "codepipeline_action_sbom_validated",
      "codebuild_phase_sbom_exported",
      "codepipeline_stage_sbom_enforced"
    ]
  },
  {
    "id": "2.4.6",
    "title": "Ensure pipeline steps sign the Software Bill of Materials (SBOM) produced",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "codebuild_project_sbom_signing_enabled",
      "codebuild_pipeline_step_sbom_signed",
      "codebuild_build_sbom_signature_required",
      "codebuild_artifact_sbom_signing_enforced",
      "codebuild_sbom_signing_validation_active",
      "codebuild_pipeline_sbom_signing_compliance",
      "codebuild_step_sbom_signature_verified"
    ]
  },
  {
    "id": "3.1.1",
    "title": "Ensure third-party artifacts and open-source libraries are verified",
    "assessment": "Manual",
    "remediation": "Verify every GitHub action (building block of a GitHub workflow) in use by performing the following: 1. In the top right corner of GitHub.com, click your profile photo, then click Your organizations . 2. Next to the organization, click Settings . 3. In the left sidebar, click Actions , then click General . 4. Under \"Policies\", check Allow OWNER, and select non-OWNER, actions and reusable workflows , and then Allow actions created by GitHub . 5. Click Save . Alternatively, perform the following for each repository where GitHub actions are used: 1. On GitHub.com, navigate to the main page of the repository. 2. Under your repository name, click Settings . 3. In the left sidebar, click Actions , then click General . 4. Under \"Actions permissions\", check Allow OWNER, and select non-OWNER, actions and reusable workflows , and then Allow actions created by GitHub . 5. Click Save . CIS Controls:",
    "description": "",
    "rationale": "",
    "audit": "",
    "function_names": [
      "artifact_library_verification_enabled",
      "third_party_artifact_signature_verified",
      "open_source_library_integrity_checked",
      "artifact_dependency_trust_verified",
      "third_party_software_source_authenticated",
      "library_artifact_cryptographic_verification_enabled",
      "open_source_dependency_signature_validated",
      "third_party_artifact_provenance_verified"
    ]
  },
  {
    "id": "3.1.2",
    "title": "Ensure Software Bill of Materials (SBOM) is required from all third-party suppliers",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "supply_chain_sbom_required",
      "third_party_supplier_sbom_required",
      "software_supply_chain_sbom_enforced",
      "supplier_software_sbom_required",
      "third_party_software_sbom_enforced"
    ]
  },
  {
    "id": "3.1.3",
    "title": "Ensure signed metadata of the build process is required and verified",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_image_build_metadata_signed_required",
      "compute_image_build_metadata_verification_enabled",
      "compute_image_build_metadata_integrity_verified",
      "compute_image_build_metadata_signature_required",
      "compute_image_build_metadata_trusted_source_enabled"
    ]
  },
  {
    "id": "3.1.4",
    "title": "Ensure dependencies are monitored between open-source components",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "dependency_management_dependencies_monitored",
      "dependency_management_vulnerability_scanning_enabled",
      "dependency_management_license_compliance_verified",
      "dependency_management_dependency_graph_enabled",
      "dependency_management_automated_updates_enabled",
      "dependency_management_sbom_generation_enabled",
      "dependency_management_dependency_alerts_enabled",
      "dependency_management_dependency_approval_required"
    ]
  },
  {
    "id": "3.1.5",
    "title": "Ensure trusted package managers and repositories are defined and prioritized",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_package_manager_trusted_repositories",
      "compute_package_manager_prioritized_sources",
      "compute_package_manager_approved_repositories",
      "compute_package_manager_secure_sources",
      "compute_package_manager_repository_validation",
      "compute_package_manager_source_priority",
      "compute_package_manager_trusted_sources",
      "compute_package_manager_repository_integrity"
    ]
  },
  {
    "id": "3.1.6",
    "title": "Ensure a signed Software Bill of Materials (SBOM) of the code is supplied",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_image_sbom_signed",
      "container_image_sbom_signed",
      "artifact_registry_sbom_signed",
      "code_repository_sbom_signed",
      "deployment_package_sbom_signed",
      "function_code_sbom_signed",
      "application_package_sbom_signed",
      "build_artifact_sbom_signed",
      "software_package_sbom_signed",
      "code_dependency_sbom_signed"
    ]
  },
  {
    "id": "3.1.7",
    "title": "Ensure dependencies are pinned to a specific, verified version",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_dependencies_version_pinned",
      "package_dependencies_version_verified",
      "package_dependencies_no_wildcard_versions",
      "package_dependencies_explicit_versions",
      "package_dependencies_locked_versions",
      "package_dependencies_no_floating_versions",
      "package_dependencies_stable_versions",
      "package_dependencies_no_latest_tag",
      "package_dependencies_version_constraints",
      "package_dependencies_no_unpinned_versions"
    ]
  },
  {
    "id": "3.1.8",
    "title": "Ensure all packages used are more than 60 days old",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_package_minimum_age_over_60d",
      "compute_package_version_recently_updated",
      "compute_package_installation_age_compliance",
      "compute_package_deployment_age_threshold",
      "compute_package_version_freshness_check",
      "compute_package_update_recency_validation",
      "compute_package_installation_age_limit",
      "compute_package_version_age_requirement",
      "compute_package_deployment_freshness",
      "compute_package_version_staleness_prevention"
    ]
  },
  {
    "id": "3.2.1",
    "title": "Ensure an organization-wide dependency usage policy is enforced",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "organization_dependency_policy_enforced",
      "organization_dependency_policy_all_projects",
      "organization_dependency_policy_restrictive",
      "organization_dependency_policy_approved_sources",
      "organization_dependency_policy_version_locked",
      "organization_dependency_policy_vulnerability_scanned",
      "organization_dependency_policy_automated_updates",
      "organization_dependency_policy_allowlist_only"
    ]
  },
  {
    "id": "3.2.2",
    "title": "Ensure packages are automatically scanned for known vulnerabilities",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_instance_vulnerability_scanning_enabled",
      "compute_image_vulnerability_scanning_enabled",
      "container_registry_vulnerability_scanning_enabled",
      "serverless_function_vulnerability_scanning_enabled",
      "artifact_repository_vulnerability_scanning_enabled",
      "package_manager_vulnerability_scanning_enabled",
      "virtual_machine_vulnerability_scanning_enabled",
      "cloud_function_vulnerability_scanning_enabled",
      "deployment_artifact_vulnerability_scanning_enabled",
      "runtime_environment_vulnerability_scanning_enabled"
    ]
  },
  {
    "id": "3.2.3",
    "title": "Ensure packages are automatically scanned for license implications",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_manager_license_scanning_enabled",
      "package_manager_automated_license_scan",
      "package_manager_license_compliance_check",
      "package_manager_license_scan_on_install",
      "package_manager_license_scan_on_update",
      "package_manager_license_scan_scheduled",
      "package_manager_license_scan_all_packages",
      "package_manager_license_scan_continuous"
    ]
  },
  {
    "id": "3.2.4",
    "title": "Ensure packages are automatically scanned for ownership change",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_manager_package_ownership_scan_enabled",
      "package_manager_package_ownership_monitoring_enabled",
      "package_manager_package_ownership_change_detection_enabled",
      "package_manager_package_ownership_integrity_check_enabled",
      "package_manager_package_ownership_automated_scan_enabled"
    ]
  },
  {
    "id": "4.1.1",
    "title": "Ensure all artifacts are signed by the build pipeline itself",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "artifact_build_pipeline_signed",
      "artifact_build_pipeline_signed_all",
      "artifact_build_pipeline_signed_verified",
      "build_pipeline_artifact_signing_enabled",
      "build_pipeline_artifact_signing_required",
      "build_pipeline_artifact_signature_valid",
      "build_pipeline_artifact_integrity_verified",
      "build_pipeline_artifact_trust_chain_valid",
      "build_pipeline_artifact_signing_enforced",
      "build_pipeline_artifact_signature_present"
    ]
  },
  {
    "id": "4.1.2",
    "title": "Ensure artifacts are encrypted before distribution",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloud_cdn_artifact_encryption_enabled",
      "cloud_cdn_distribution_encryption_required",
      "cloud_cdn_artifact_encryption_enforced",
      "cloud_cdn_content_encryption_before_distribution",
      "cloud_cdn_distribution_secure_encryption",
      "cloud_cdn_artifact_encryption_pre_distribution",
      "cloud_cdn_distribution_encryption_mandatory",
      "cloud_cdn_artifact_encryption_verified"
    ]
  },
  {
    "id": "4.1.3",
    "title": "Ensure only authorized platforms have decryption capabilities of artifacts",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "artifact_decryption_authorized_platforms",
      "artifact_decryption_platform_restricted",
      "artifact_decryption_platform_whitelisted",
      "artifact_decryption_platform_authorized_only",
      "artifact_decryption_platform_compliance",
      "artifact_decryption_platform_approved",
      "artifact_decryption_platform_secure",
      "artifact_decryption_platform_validated",
      "artifact_decryption_platform_allowed",
      "artifact_decryption_platform_enforced"
    ]
  },
  {
    "id": "4.2.1",
    "title": "Ensure the authority to certify artifacts is limited",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_role_artifact_certification_restricted",
      "iam_policy_artifact_certification_limited",
      "artifact_repository_certification_authority_restricted",
      "artifact_certification_authority_minimal_permissions",
      "artifact_signing_authority_least_privilege",
      "artifact_certification_authority_scope_limited",
      "artifact_certification_authority_no_admin_privileges",
      "artifact_certification_authority_conditional_access",
      "artifact_certification_authority_time_bound",
      "artifact_certification_authority_approval_required"
    ]
  },
  {
    "id": "4.2.2",
    "title": "Ensure number of permitted users who may upload new artifacts is minimized",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_user_artifact_upload_restricted",
      "iam_user_artifact_upload_minimized",
      "iam_user_artifact_upload_limited",
      "iam_role_artifact_upload_restricted",
      "iam_policy_artifact_upload_minimized",
      "iam_group_artifact_upload_limited",
      "artifact_repository_upload_permissions_restricted",
      "artifact_repository_upload_users_minimized"
    ]
  },
  {
    "id": "4.2.3",
    "title": "Ensure user access to the package registry utilizes Multi- Factor Authentication (MFA)",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_registry_user_mfa_enabled",
      "package_registry_access_mfa_required",
      "package_registry_user_auth_mfa_enforced",
      "package_registry_mfa_authentication_enabled",
      "package_registry_user_mfa_auth_required"
    ]
  },
  {
    "id": "4.2.4",
    "title": "Ensure user management of the package registry is not local",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_registry_user_management_not_local",
      "package_registry_user_management_centralized",
      "package_registry_user_management_external",
      "package_registry_user_management_remote",
      "package_registry_user_management_enterprise_managed"
    ]
  },
  {
    "id": "4.2.5",
    "title": "Ensure anonymous access to artifacts is revoked",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "artifact_registry_repository_anonymous_access_revoked",
      "artifact_registry_repository_public_access_disabled",
      "artifact_registry_repository_authentication_required",
      "artifact_registry_repository_iam_policy_restricted",
      "artifact_registry_repository_no_anonymous_iam_principal"
    ],
    "references": "1. https://docs.github.com/en/enterprise-server@3.3/repositories/managing-your- repositorys-settings-and-features/managing-repository-settings/setting- repository-visibility CIS Controls: Controls Version Control IG 1 IG 2 IG 3 v8 2.5 Allowlist Authorized Software Use technical controls, such as application allowlisting, to ensure that only authorized software can execute or be accessed. Reassess bi-annually, or more frequently. \u25cf \u25cf v8 2.6 Allowlist Authorized Libraries Use technical controls to ensure that only authorized software libraries, such as specific .dll, .ocx, .so, etc., files, are allowed to load into a system process. Block unauthorized libraries from loading into a system process. Reassess bi-annually, or more frequently. \u25cf \u25cf v7 14.6 Protect Information through Access Control Lists Protect all information stored on systems with file system, network share, claims, application, or database specific access control lists. These controls will enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities. \u25cf \u25cf \u25cf"
  },
  {
    "id": "4.2.6",
    "title": "Ensure minimum number of administrators are set for the package registry",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_registry_administrator_count_minimized",
      "package_registry_admin_privileges_restricted",
      "package_registry_admin_access_limited",
      "package_registry_admin_accounts_minimized",
      "package_registry_admin_roles_reduced"
    ]
  },
  {
    "id": "4.3.1",
    "title": "Ensure all signed artifacts are validated upon uploading the package registry",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "package_registry_artifact_validation_enabled",
      "package_registry_signed_artifact_validation_required",
      "package_registry_upload_validation_enabled",
      "package_registry_artifact_signature_validation_enabled",
      "package_registry_signed_package_validation_enabled"
    ]
  },
  {
    "id": "4.3.2",
    "title": "Ensure all versions of an existing artifact have their signatures validated",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "artifact_version_signature_validated",
      "artifact_version_signature_validated_all",
      "artifact_signature_validation_enabled",
      "artifact_signature_validation_required",
      "artifact_version_signature_verified",
      "artifact_signature_validation_enforced",
      "artifact_version_signature_check_enabled",
      "artifact_signature_validation_active"
    ]
  },
  {
    "id": "4.3.3",
    "title": "Ensure changes in package registry configuration are audited",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloudtrail_trail_package_registry_changes_audited",
      "cloudtrail_trail_package_registry_configuration_monitoring_enabled",
      "cloudtrail_trail_package_registry_event_logging_enabled",
      "cloudtrail_trail_package_registry_modifications_tracked",
      "cloudtrail_trail_package_registry_activity_audited_all_regions"
    ]
  },
  {
    "id": "4.3.4",
    "title": "Ensure webhooks of the repository are secured",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "github_repository_webhook_https_enabled",
      "github_repository_webhook_secret_configured",
      "github_repository_webhook_ip_whitelisted",
      "github_repository_webhook_signature_verified",
      "github_repository_webhook_events_restricted",
      "github_repository_webhook_ssl_validation_enabled",
      "github_repository_webhook_no_public_access",
      "github_repository_webhook_token_auth_required"
    ]
  },
  {
    "id": "4.4.1",
    "title": "Ensure artifacts contain information about their origin",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "artifact_container_origin_information_required",
      "artifact_container_source_metadata_enabled",
      "artifact_container_provenance_tracking_enabled",
      "artifact_container_build_details_included",
      "artifact_container_immutable_origin_tags_enabled",
      "artifact_container_signature_verification_enabled",
      "artifact_container_repository_origin_validation_enabled",
      "artifact_container_dependency_origin_tracking_enabled"
    ]
  },
  {
    "id": "5.1.1",
    "title": "Ensure deployment configuration files are separated from source code",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "deployment_config_files_separated_from_source_code",
      "source_code_no_deployment_configs",
      "deployment_configs_external_to_source",
      "source_repo_deployment_configs_excluded",
      "deployment_configs_stored_separately"
    ]
  },
  {
    "id": "5.1.2",
    "title": "Ensure changes in deployment configuration are audited",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "cloudtrail_trail_deployment_changes_audited",
      "cloudtrail_trail_config_changes_logged",
      "cloudtrail_trail_deployment_monitoring_enabled",
      "cloudtrail_trail_config_modifications_tracked",
      "cloudtrail_trail_deployment_audit_logging_enabled"
    ]
  },
  {
    "id": "5.1.3",
    "title": "Ensure scanners are in place to identify and prevent sensitive data in deployment configuration",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "code_repository_scanner_sensitive_data_detection",
      "deployment_config_scanner_sensitive_data_prevention",
      "ci_cd_pipeline_scanner_sensitive_data_blocking",
      "source_code_scanner_sensitive_data_identification",
      "build_artifact_scanner_sensitive_data_protection",
      "infrastructure_as_code_scanner_sensitive_data_restriction",
      "container_image_scanner_sensitive_data_detection",
      "deployment_template_scanner_sensitive_data_prevention",
      "configuration_file_scanner_sensitive_data_blocking",
      "deployment_manifest_scanner_sensitive_data_identification"
    ]
  },
  {
    "id": "5.1.4",
    "title": "Limit access to deployment configurations",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_instance_deployment_config_restricted",
      "compute_instance_config_access_limited",
      "compute_deployment_config_minimal_permissions",
      "compute_config_access_iam_restricted",
      "compute_deployment_config_no_public_access",
      "compute_instance_config_encryption_enabled",
      "compute_deployment_config_network_restricted",
      "compute_config_access_role_based",
      "compute_deployment_config_secure_storage",
      "compute_instance_config_audit_logging_enabled"
    ]
  },
  {
    "id": "5.1.5",
    "title": "Scan Infrastructure as Code (IaC)",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iac_template_security_scanning_enabled",
      "iac_template_static_code_analysis_enabled",
      "iac_template_compliance_checks_enabled",
      "iac_template_vulnerability_scanning_enabled",
      "iac_template_secrets_detection_enabled",
      "iac_template_policy_validation_enabled",
      "iac_template_automated_review_enabled",
      "iac_template_pre_deployment_checks_enabled",
      "iac_template_secure_baseline_compliance",
      "iac_template_continuous_monitoring_enabled"
    ]
  },
  {
    "id": "5.1.6",
    "title": "Ensure deployment configuration manifests are verified",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_deployment_manifest_verified",
      "compute_deployment_manifest_signature_valid",
      "compute_deployment_manifest_integrity_checked",
      "compute_deployment_manifest_source_trusted",
      "compute_deployment_manifest_version_controlled",
      "compute_deployment_manifest_immutable",
      "compute_deployment_manifest_approval_required",
      "compute_deployment_manifest_encrypted",
      "compute_deployment_manifest_access_restricted",
      "compute_deployment_manifest_audit_logged"
    ]
  },
  {
    "id": "5.1.7",
    "title": "Ensure deployment configuration manifests are pinned to a specific, verified version",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_deployment_manifest_version_pinned",
      "compute_deployment_manifest_version_verified",
      "compute_deployment_manifest_version_specific",
      "compute_deployment_manifest_version_locked",
      "compute_deployment_manifest_version_fixed"
    ]
  },
  {
    "id": "5.2.1",
    "title": "Ensure deployments are automated",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_instance_automated_deployment",
      "compute_autoscaling_automated_deployment",
      "compute_cluster_automated_deployment",
      "compute_function_automated_deployment",
      "container_service_automated_deployment",
      "container_pod_automated_deployment",
      "container_cluster_automated_deployment",
      "database_instance_automated_deployment",
      "database_cluster_automated_deployment",
      "storage_bucket_automated_deployment",
      "network_load_balancer_automated_deployment",
      "network_firewall_automated_deployment",
      "security_group_automated_deployment",
      "iam_policy_automated_deployment",
      "iam_role_automated_deployment",
      "cloudformation_stack_automated_deployment",
      "terraform_state_automated_deployment",
      "deployment_pipeline_automated_deployment",
      "deployment_template_automated_deployment",
      "deployment_artifact_automated_deployment"
    ]
  },
  {
    "id": "5.2.2",
    "title": "Ensure the deployment environment is reproducible",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "compute_instance_reproducible_deployment",
      "compute_environment_reproducible_configuration",
      "compute_deployment_immutable_infrastructure",
      "compute_instance_configuration_as_code",
      "compute_environment_version_controlled",
      "compute_deployment_template_defined",
      "compute_instance_launch_configuration_standardized",
      "compute_environment_infrastructure_as_code",
      "compute_deployment_automated_provisioning",
      "compute_instance_configuration_management_enabled"
    ]
  },
  {
    "id": "5.2.3",
    "title": "Ensure access to production environment is limited",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_user_production_access_restricted",
      "iam_role_production_access_restricted",
      "iam_policy_production_access_restricted",
      "compute_instance_production_access_restricted",
      "network_security_group_production_access_restricted",
      "cloudtrail_production_access_logging_enabled",
      "s3_bucket_production_access_restricted",
      "rds_instance_production_access_restricted",
      "kms_key_production_access_restricted",
      "vpc_production_access_restricted"
    ]
  },
  {
    "id": "5.2.4",
    "title": "Ensure default passwords are not used",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "",
    "remediation": null,
    "function_names": [
      "iam_user_default_password_not_used",
      "compute_instance_default_password_not_used",
      "database_instance_default_password_not_used",
      "cloudtrail_trail_default_password_not_used",
      "cloud_cdn_distribution_default_password_not_used",
      "load_balancer_default_password_not_used",
      "ssl_certificate_default_password_not_used",
      "storage_bucket_default_password_not_used",
      "container_registry_default_password_not_used",
      "network_firewall_default_password_not_used"
    ]
  }
]