[
  {
    "id": "1.1.1.1",
    "title": "Ensure mounting of cramfs filesystems is disabled",
    "assessment": "Automated",
    "description": "The cramfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A cramfs image can be used without having to first decompress the image.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit": "Run the following script to verify the cramfs module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"cramfs\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the cramfs module: If the module is available in the running kernel: • Create a file with install cramfs /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist cramfs in the /etc/modprobe.d/ directory • Unload cramfs from the kernel If available in ANY installed kernel: • Create a file with blacklist cramfs in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"cramfs\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "filesystem_cramfs_mounting_disabled",
      "filesystem_cramfs_disabled",
      "linux_cramfs_mounting_disabled",
      "linux_filesystem_cramfs_disabled",
      "os_cramfs_mounting_disabled"
    ]
  },
  {
    "id": "1.1.1.2",
    "title": "Ensure mounting of freevxfs filesystems is disabled",
    "assessment": "Automated",
    "description": "The freevxfs filesystem type is a free version of the Veritas type filesystem. This is the primary filesystem type for HP-UX operating systems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit": "Run the following script to verify the freevxfs module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"freevxfs\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the freevxfs module: If the module is available in the running kernel: • Create a file with install freevxfs /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist freevxfs in the /etc/modprobe.d/ directory • Unload freevxfs from the kernel If available in ANY installed kernel: • Create a file with blacklist freevxfs in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"freevxfs\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_filesystem_freevxfs_disabled",
      "compute_filesystem_mount_freevxfs_restricted",
      "compute_filesystem_type_freevxfs_blocked",
      "compute_filesystem_freevxfs_prohibited",
      "compute_filesystem_mount_option_freevxfs_disabled"
    ]
  },
  {
    "id": "1.1.1.3",
    "title": "Ensure mounting of jffs2 filesystems is disabled",
    "assessment": "Automated",
    "description": "The jffs2 (journaling flash filesystem 2) filesystem type is a log-structured filesystem used in flash memory devices.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit": "Run the following script to verify the jffs2 module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"jffs2\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the jffs2 module: If the module is available in the running kernel: • Create a file with install jffs2 /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist jffs2 in the /etc/modprobe.d/ directory • Unload jffs2 from the kernel If available in ANY installed kernel: • Create a file with blacklist jffs2 in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"jffs2\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "filesystem_jffs2_mounting_disabled",
      "filesystem_jffs2_mount_disabled",
      "filesystem_jffs2_disabled",
      "filesystem_jffs2_mount_restricted",
      "filesystem_jffs2_mount_prohibited"
    ]
  },
  {
    "id": "1.1.1.4",
    "title": "Ensure mounting of hfs filesystems is disabled",
    "assessment": "Automated",
    "description": "The hfs filesystem type is a hierarchical filesystem that allows you to mount Mac OS filesystems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit": "Run the following script to verify the hfs module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"hfs\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the hfs module: If the module is available in the running kernel: • Create a file with install hfs /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist hfs in the /etc/modprobe.d/ directory • Unload hfs from the kernel If available in ANY installed kernel: • Create a file with blacklist hfs in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"hfs\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_filesystem_hfs_mounting_disabled",
      "filesystem_hfs_mount_disabled",
      "compute_hfs_mount_disabled",
      "filesystem_hfs_disabled",
      "compute_hfs_filesystem_disabled"
    ]
  },
  {
    "id": "1.1.1.5",
    "title": "Ensure mounting of hfsplus filesystems is disabled",
    "assessment": "Automated",
    "description": "The hfsplus filesystem type is a hierarchical filesystem designed to replace hfs that allows you to mount Mac OS filesystems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit": "Run the following script to verify the hfsplus module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"hfsplus\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the hfsplus module: If the module is available in the running kernel: • Create a file with install hfsplus /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist hfsplus in the /etc/modprobe.d/ directory • Unload hfsplus from the kernel If available in ANY installed kernel: • Create a file with blacklist hfsplus in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"hfsplus\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_filesystem_hfsplus_disabled",
      "compute_filesystem_mount_hfsplus_restricted",
      "filesystem_hfsplus_mount_prohibited",
      "filesystem_mount_hfsplus_blocked",
      "compute_hfsplus_mount_disabled"
    ]
  },
  {
    "id": "1.1.1.6",
    "title": "Ensure mounting of squashfs filesystems is disabled",
    "assessment": "Automated",
    "description": "The squashfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A squashfs image can be used without having to first decompress the image.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it. Impact: As Snap packages utilizes squashfs as a compressed filesystem, disabling squashfs will cause Snap packages to fail. Snap application packages of software are self-contained and work across a range of Linux distributions. This is unlike traditional Linux package management approaches, like APT or RPM, which require specifically adapted packages per Linux distribution on an application update and delay therefore application deployment from developers to their software's end-user. Snaps themselves have no dependency on any external store (\"App store\"), can be obtained from any source and can be therefore used for upstream software deployment.",
    "audit": "Run the following script to verify the squashfs module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"squashfs\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }   Note: On operating systems where squashfs is pre-build into the kernel: • This is considered an acceptable \"passing\" state • The kernel should not be re-compiled to remove squashfs • This audit will return as passing state with \"module: \"squashfs\" doesn't exist in ...\"",
    "remediation": "Run the following script to disable the squashfs module: If the module is available in the running kernel: • Create a file with install squashfs /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist squashfs in the /etc/modprobe.d/ directory • Unload squashfs from the kernel If available in ANY installed kernel: • Create a file with blacklist squashfs in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"squashfs\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "As Snap packages utilizes squashfs as a compressed filesystem, disabling squashfs will cause Snap packages to fail. Snap application packages of software are self-contained and work across a range of Linux distributions. This is unlike traditional Linux package management approaches, like APT or RPM, which require specifically adapted packages per Linux distribution on an application update and delay therefore application deployment from developers to their software's end-user. Snaps themselves have no dependency on any external store (\"App store\"), can be obtained from any source and can be therefore used for upstream software deployment.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "filesystem_squashfs_mounting_disabled",
      "filesystem_squashfs_mount_restricted",
      "filesystem_squashfs_disabled",
      "filesystem_squashfs_blocked",
      "filesystem_squashfs_mount_prohibited"
    ]
  },
  {
    "id": "1.1.1.7",
    "title": "Ensure mounting of udf filesystems is disabled",
    "assessment": "Automated",
    "description": "The udf filesystem type is the universal disk format used to implement ISO/IEC 13346 and ECMA-167 specifications. This is an open vendor filesystem type for data storage on a broad range of media. This filesystem type is necessary to support writing DVDs and newer optical disc formats.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it. Impact: Microsoft Azure requires the usage of udf. udf should not be disabled on systems run on Microsoft Azure.",
    "audit": "Run the following script to verify the udf module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"udf\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the udf module: If the module is available in the running kernel: • Create a file with install udf /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist udf in the /etc/modprobe.d/ directory • Unload udf from the kernel If available in ANY installed kernel: • Create a file with blacklist udf in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"udf\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" }",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Microsoft Azure requires the usage of udf. udf should not be disabled on systems run on Microsoft Azure.",
    "function_names": [
      "compute_filesystem_udf_mounting_disabled",
      "compute_filesystem_udf_mount_restricted",
      "compute_filesystem_udf_blocked",
      "compute_filesystem_udf_prohibited",
      "compute_filesystem_udf_disabled_all_instances"
    ]
  },
  {
    "id": "1.1.2.1",
    "title": "Ensure /tmp is a separate partition",
    "assessment": "Automated",
    "description": "The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.",
    "rationale": "Making /tmp its own file system allows an administrator to set additional mount options such as the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system setuid program and wait for it to be updated. Once the program was updated, the hard link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw. This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp. Impact: Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition. Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a configuration where /tmp is not a separate file system it will essentially have the whole disk available, as the default installation only creates a single / partition. On the other hand, a RAM-based /tmp (as with tmpfs) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily. Another alternative is to create a dedicated partition for /tmp from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than tmpfs which is RAM-based. /tmp utilizing tmpfs can be resized using the size={size} parameter in the relevant entry in /etc/fstab.",
    "audit": "Run the following command and verify the output shows that /tmp is mounted. Particular requirements pertaining to mount options are covered in ensuing sections. # findmnt -nk /tmp Example output: /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec",
    "remediation": "For specific configuration requirements of the /tmp mount for your environment, modify /etc/fstab or tmp.mount unit file: Using /etc/fstab: Configure /etc/fstab as appropriate: Example: tmpfs /tmp tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0 -OR- Using a tmp.mount unit file: Run the following command to create the tmp.mount file is the correct location: # cp -v /usr/share/systemd/tmp.mount /etc/systemd/system/ Edit /etc/systemd/system/tmp.mount to configure the /tmp mount: Example:  #  SPDX-License-Identifier: LGPL-2.1+ # #  This file is part of systemd. # #  systemd is free software; you can redistribute it and/or modify it #  under the terms of the GNU Lesser General Public License as published by #  the Free Software Foundation; either version 2.1 of the License, or #  (at your option) any later version. [Unit] Description=Temporary Directory (/tmp) Documentation=https://systemd.io/TEMPORARY_DIRECTORIES Documentation=man:file-hierarchy(7) Documentation=https://www.freedesktop.org/wiki/Software/systemd/APIFileSystem s ConditionPathIsSymbolicLink=!/tmp DefaultDependencies=no Conflicts=umount.target Before=local-fs.target umount.target After=swap.target [Mount] What=tmpfs Where=/tmp Type=tmpfs Options=mode=1777,strictatime,nosuid,nodev,noexec [Install] WantedBy=local-fs.target Run the following command to reload the systemd daemon with the updated tmp.mount unit file: # systemctl daemon-reload Run the following command to enable and start tmp.mount # systemctl --now enable tmp.mount Note: A reboot may be required to transition to /tmp mounted to tmpfs References: 1. https://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ 2. https://www.freedesktop.org/software/systemd/man/systemd-fstab-generator.html 3. NIST SP 800-53 Rev. 5: CM-7   Additional Information: If an entry for /tmp exists in /etc/fstab it will take precedence over entries in systemd unit file. tmpfs can be resized using the size={size} parameter in /etc/fstab or on the Options line in the tmp.mount file. If we don't specify the size, it will be half the RAM Example resize entry: /etc/fstab: tmpfs   /tmp   tmpfs   rw,noexec,nodev,nosuid,size=2G 0  0 tmp.mount unit file: Options=mode=1777,strictatime,size=2G,noexec,nodev,nosuid",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to a separate partition. Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a configuration where /tmp is not a separate file system it will essentially have the whole disk available, as the default installation only creates a single / partition. On the other hand, a RAM-based /tmp (as with tmpfs) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily. Another alternative is to create a dedicated partition for /tmp from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than tmpfs which is RAM-based. /tmp utilizing tmpfs can be resized using the size={size} parameter in the relevant entry in /etc/fstab.",
    "references": "1. https://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ 2. https://www.freedesktop.org/software/systemd/man/systemd-fstab-generator.html 3. NIST SP 800-53 Rev. 5: CM-7   Additional Information: If an entry for /tmp exists in /etc/fstab it will take precedence over entries in systemd unit file. tmpfs can be resized using the size={size} parameter in /etc/fstab or on the Options line in the tmp.mount file. If we don't specify the size, it will be half the RAM Example resize entry: /etc/fstab: tmpfs   /tmp   tmpfs   rw,noexec,nodev,nosuid,size=2G 0  0 tmp.mount unit file: Options=mode=1777,strictatime,size=2G,noexec,nodev,nosuid",
    "function_names": [
      "compute_tmp_partition_separate",
      "compute_tmp_partition_mounted",
      "compute_tmp_partition_noexec_enabled",
      "compute_tmp_partition_nodev_enabled",
      "compute_tmp_partition_nosuid_enabled"
    ]
  },
  {
    "id": "1.1.2.2",
    "title": "Ensure nodev option set on /tmp partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /tmp filesystem is not intended to support devices, set this option to ensure that users cannot create block or character special devices in /tmp.",
    "audit": "Verify that the nodev option is set for the /tmp mount. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /tmp | grep nodev /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec,relatime,seclabel",
    "remediation": "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /tmp partition. Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /tmp with the configured options: # mount -o remount /tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_nodev_enabled",
      "compute_tmp_partition_nodev_enabled",
      "filesystem_tmp_nodev_mount_option_set",
      "linux_tmp_partition_nodev_enabled",
      "os_filesystem_nodev_option_set"
    ]
  },
  {
    "id": "1.1.2.3",
    "title": "Ensure noexec option set on /tmp partition",
    "assessment": "Automated",
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /tmp.",
    "audit": "Verify that the noexec option is set for the /tmp mount. Run the following command to verify that the noexec mount option is set. Example: # findmnt -kn /tmp | grep noexec /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec,relatime,seclabel",
    "remediation": "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /tmp partition. Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /tmp with the configured options: # mount -o remount /tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_noexec_enabled",
      "compute_tmp_partition_noexec_enabled",
      "filesystem_tmp_noexec_set",
      "compute_mount_noexec_enabled",
      "linux_partition_noexec_enabled"
    ]
  },
  {
    "id": "1.1.2.4",
    "title": "Ensure nosuid option set on /tmp partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /tmp.",
    "audit": "Verify that the nosuid option is set for the /tmp mount. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /tmp | grep nosuid /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec,relatime,seclabel",
    "remediation": "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /tmp partition. Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /tmp with the configured options: # mount -o remount /tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "filesystem_tmp_nosuid_enabled",
      "filesystem_tmp_mount_option_nosuid",
      "filesystem_tmp_partition_nosuid_set",
      "filesystem_tmp_nosuid_configured",
      "filesystem_tmp_mount_nosuid_restricted"
    ]
  },
  {
    "id": "1.1.3.1",
    "title": "Ensure separate partition exists for /var",
    "assessment": "Automated",
    "description": "The /var directory is used by daemons and other system services to temporarily store dynamic data. Some directories created by these processes may be world-writable.",
    "rationale": "The reasoning for mounting /var on a separate partition is as follow. Protection from resource exhaustion The default installation only creates a single / partition. Since the /var directory may contain world-writable files and directories, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. In addition, other operations on the system could fill up the disk unrelated to /var and cause unintended behavior across the system as the disk is full. See man auditd.conf for details. Fine grained control over the mount Configuring /var as its own file system allows an administrator to set additional mount options such as noexec/nosuid/nodev. These options limits an attackers ability to create exploits on the system. Other options allow for specific behaviour. See man mount for exact details regarding filesystem-independent and filesystem-specific options. Protection from exploitation An example of exploiting /var may be an attacker establishing a hard-link to a system setuid program and wait for it to be updated. Once the program was updated, the hard- link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw. Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "audit": "Run the following command and verify output shows /var is mounted. Example: # findmnt -kn /var /var  /dev/sdb  ext4   rw,relatime,seclabel,data=ordered",
    "remediation": "For new installations, during installation create a custom partition setup and specify a separate partition for /var. For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate. References: 1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 4: MP-2, AC-3 Additional Information: When modifying /var it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "references": "1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 4: MP-2, AC-3 Additional Information: When modifying /var it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "function_names": [
      "compute_volume_var_partition_exists",
      "compute_volume_var_separate_partition",
      "compute_volume_var_dedicated_partition",
      "compute_volume_var_isolated_partition",
      "compute_volume_var_secure_partition",
      "compute_volume_var_dynamic_data_partition",
      "compute_volume_var_system_partition_exists",
      "compute_volume_var_service_partition_exists"
    ]
  },
  {
    "id": "1.1.3.2",
    "title": "Ensure nodev option set on /var partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var filesystem is not intended to support devices, set this option to ensure that users cannot create block or character special devices in /var.",
    "audit": "Verify that the nodev option is set for the /var mount. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /var | grep -v 'nodev' Nothing should be returned",
    "remediation": "IF the /var partition exists, edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var partition. Example: <device> /var    <fstype>     defaults,rw,nosuid,nodev,relatime  0 0 Run the following command to remount /var with the configured options: # mount -o remount /var References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_nodev_enabled",
      "compute_var_partition_nodev_enabled",
      "filesystem_mount_nodev_enabled",
      "filesystem_var_nodev_enabled",
      "compute_mount_nodev_enabled",
      "filesystem_partition_nodev_enabled",
      "compute_var_nodev_enabled",
      "filesystem_nodev_option_enabled"
    ]
  },
  {
    "id": "1.1.3.3",
    "title": "Ensure nosuid option set on /var partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create setuid files in /var.",
    "audit": "Verify that the nosuid option is set for the /var mount. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /var | grep -v 'nosuid' Nothing should be returned",
    "remediation": "IF the /var partition exists, edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var partition. Example: <device> /var    <fstype>     defaults,rw,nosuid,nodev,relatime  0 0 Run the following command to remount /var with the configured options: # mount -o remount /var References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_nosuid_enabled",
      "compute_var_partition_nosuid_set",
      "filesystem_mount_nosuid_enabled",
      "filesystem_var_nosuid_restricted",
      "compute_partition_nosuid_enforced"
    ]
  },
  {
    "id": "1.1.4.1",
    "title": "Ensure separate partition exists for /var/tmp",
    "assessment": "Automated",
    "description": "The /var/tmp directory is a world-writable directory used for temporary storage by all users and some applications. Temporary files residing in /var/tmp are to be preserved between reboots.",
    "rationale": "The reasoning for mounting /var/tmp on a separate partition is as follows. Protection from resource exhaustion The default installation only creates a single / partition. Since the /var/tmp directory may contain world-writable files and directories, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. In addition, other operations on the system could fill up the disk unrelated to /var/tmp and cause the potential disruption to daemons as the disk is full. Fine grained control over the mount Configuring /var/tmp as its own file system allows an administrator to set additional mount options such as noexec/nosuid/nodev. These options limits an attackers ability to create exploits on the system. Other options allow for specific behavior. See man mount for exact details regarding filesystem-independent and filesystem-specific options. Protection from exploitation An example of exploiting /var/tmp may be an attacker establishing a hard-link to a system setuid program and wait for it to be updated. Once the program was updated, the hard-link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw. Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "audit": "Run the following command and verify output shows /var/tmp is mounted. Example: # findmnt -kn /var/tmp /var/tmp   /dev/sdb ext4   rw,relatime,seclabel,data=ordered",
    "remediation": "For new installations, during installation create a custom partition setup and specify a separate partition for /var/tmp. For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate. References: 1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: CM-6 Additional Information: When modifying /var/tmp it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "references": "1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: CM-6 Additional Information: When modifying /var/tmp it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "function_names": [
      "compute_volume_var_tmp_separate_partition",
      "compute_volume_var_tmp_mount_options",
      "compute_volume_var_tmp_filesystem_type",
      "compute_volume_var_tmp_permissions",
      "compute_volume_var_tmp_reboot_persistence",
      "compute_volume_var_tmp_storage_isolation",
      "compute_volume_var_tmp_noexec_enabled",
      "compute_volume_var_tmp_nodev_enabled",
      "compute_volume_var_tmp_nosuid_enabled"
    ]
  },
  {
    "id": "1.1.4.2",
    "title": "Ensure nodev option set on /var/tmp partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/tmp filesystem is not intended to support devices, set this option to ensure that users cannot create block or character special devices in /var/tmp.",
    "audit": "Verify that the nodev option is set for the /var/tmp mount. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /var/tmp | grep -v 'nodev' Nothing should be returned",
    "remediation": "IF the /var/tmp partition exists, edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/tmp partition. Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/tmp with the configured options: # mount -o remount /var/tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_nodev_enabled",
      "compute_var_tmp_nodev_enabled",
      "filesystem_partition_nodev_enabled",
      "filesystem_var_tmp_nodev_set",
      "compute_mount_option_nodev_enabled"
    ]
  },
  {
    "id": "1.1.4.3",
    "title": "Ensure noexec option set on /var/tmp partition",
    "assessment": "Automated",
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /var/tmp.",
    "audit": "Verify that the noexec option is set for the /var/tmp mount. Run the following command to verify that the noexec mount option is set. Example: # findmnt -kn /var/tmp | grep -v 'noexec' Nothing should be returned",
    "remediation": "IF the /var/tmp partition exists, edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/tmp partition. Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/tmp with the configured options: # mount -o remount /var/tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_noexec_option_set",
      "compute_var_tmp_partition_noexec_enabled",
      "filesystem_mount_noexec_var_tmp",
      "compute_partition_noexec_var_tmp",
      "filesystem_var_tmp_noexec_configured"
    ]
  },
  {
    "id": "1.1.4.4",
    "title": "Ensure nosuid option set on /var/tmp partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /var/tmp.",
    "audit": "Verify that the nosuid option is set for the /var/tmp mount. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /var/tmp | grep -v 'nosuid' Nothing should be returned",
    "remediation": "IF the /var/tmp partition exists, edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/tmp partition. Example: <device> /var/tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/tmp with the configured options: # mount -o remount /var/tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "filesystem_var_tmp_nosuid_enabled",
      "filesystem_var_tmp_suid_restricted",
      "filesystem_partition_nosuid_set",
      "filesystem_var_tmp_mount_option_nosuid",
      "filesystem_var_tmp_secure_mount_config"
    ]
  },
  {
    "id": "1.1.5.1",
    "title": "Ensure separate partition exists for /var/log",
    "assessment": "Automated",
    "description": "The /var/log directory is used by system services to store log data.",
    "rationale": "The reasoning for mounting /var/log on a separate partition is as follows. Protection from resource exhaustion The default installation only creates a single / partition. Since the /var/log directory contains log files which can grow quite large, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. Fine grained control over the mount Configuring /var/log as its own file system allows an administrator to set additional mount options such as noexec/nosuid/nodev. These options limits an attackers ability to create exploits on the system. Other options allow for specific behavior. See man mount for exact details regarding filesystem-independent and filesystem-specific options. Protection of log data As /var/log contains log files, care should be taken to ensure the security and integrity of the data and mount point. Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "audit": "Run the following command and verify output shows /var/log is mounted: # findmnt -kn /var/log Example output: /var/log /dev/sdb ext4   rw,relatime,seclabel,data=ordered",
    "remediation": "For new installations, during installation create a custom partition setup and specify a separate partition for /var/log . For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate. References: 1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: AU-8 Additional Information: When modifying /var/log it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multiuser mode.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "references": "1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: AU-8 Additional Information: When modifying /var/log it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multiuser mode.",
    "function_names": [
      "compute_volume_var_log_separate_partition",
      "compute_volume_var_log_dedicated_partition",
      "compute_volume_var_log_isolated_partition",
      "compute_volume_log_partition_exists",
      "compute_volume_log_partition_separate",
      "compute_volume_var_log_partitioned",
      "compute_volume_var_log_separate_mount",
      "compute_volume_var_log_dedicated_mount"
    ]
  },
  {
    "id": "1.1.5.2",
    "title": "Ensure nodev option set on /var/log partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/log filesystem is not intended to support devices, set this option to ensure that users cannot create block or character special devices in /var/log.",
    "audit": "Verify that the nodev option is set for the /var/log mount. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /var/log | grep -v 'nodev' Nothing should be returned",
    "remediation": "IF the /var/log partition exists, edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/log partition. Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/log with the configured options: # mount -o remount /var/log References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_nodev_enabled",
      "compute_log_partition_nodev_enabled",
      "filesystem_var_log_nodev_enabled",
      "filesystem_partition_nodev_enabled",
      "compute_var_log_nodev_mount_option",
      "filesystem_nodev_option_enabled",
      "compute_log_partition_nodev_set",
      "filesystem_var_log_nodev_set"
    ]
  },
  {
    "id": "1.1.5.3",
    "title": "Ensure noexec option set on /var/log partition",
    "assessment": "Automated",
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/log filesystem is only intended for log files, set this option to ensure that users cannot run executable binaries from /var/log.",
    "audit": "Verify that the noexec option is set for the /var/log mount. Run the following command to verify that the noexec mount option is set. Example: # findmnt -kn /var/log | grep -v 'noexec' Nothing should be returned",
    "remediation": "IF the /var/log partition exists, edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/log partition. Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/log with the configured options: # mount -o remount /var/log References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_volume_noexec_enabled",
      "compute_volume_noexec_var_log",
      "compute_partition_noexec_enabled",
      "compute_partition_noexec_var_log",
      "linux_volume_noexec_enabled",
      "linux_volume_noexec_var_log",
      "linux_partition_noexec_enabled",
      "linux_partition_noexec_var_log"
    ]
  },
  {
    "id": "1.1.5.4",
    "title": "Ensure nosuid option set on /var/log partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/log filesystem is only intended for log files, set this option to ensure that users cannot create setuid files in /var/log.",
    "audit": "Verify that the nosuid option is set for the /var/log mount. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /var/log | grep -v 'nosuid' Nothing should be returned",
    "remediation": "IF the /var/log partition exists, edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/log partition. Example: <device> /var/log    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/log with the configured options: # mount -o remount /var/log References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "filesystem_var_log_nosuid_enabled",
      "filesystem_var_log_mount_option_nosuid",
      "filesystem_partition_nosuid_set",
      "filesystem_var_log_security_option_nosuid",
      "filesystem_mount_nosuid_var_log"
    ]
  },
  {
    "id": "1.1.6.1",
    "title": "Ensure separate partition exists for /var/log/audit",
    "assessment": "Automated",
    "description": "The auditing daemon, auditd, stores log data in the /var/log/audit directory.",
    "rationale": "The reasoning for mounting /var/log/audit on a separate partition is as follows. Protection from resource exhaustion The default installation only creates a single / partition. Since the /var/log/audit directory contains the audit.log file which can grow quite large, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. In addition, other operations on the system could fill up the disk unrelated to /var/log/audit and cause auditd to trigger it's space_left_action as the disk is full. See man auditd.conf for details. Fine grained control over the mount Configuring /var/log/audit as its own file system allows an administrator to set additional mount options such as noexec/nosuid/nodev. These options limits an attackers ability to create exploits on the system. Other options allow for specific behavior. See man mount for exact details regarding filesystem-independent and filesystem-specific options. Protection of audit data As /var/log/audit contains audit logs, care should be taken to ensure the security and integrity of the data and mount point. Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "audit": "Run the following command and verify output shows /var/log/audit is mounted: # findmnt -kn /var/log/audit Example output: /var/log/audit /dev/sdb ext4   rw,relatime,seclabel,data=ordered",
    "remediation": "For new installations, during installation create a custom partition setup and specify a separate partition for /var/log/audit. For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate. References: 1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: AU-8 Additional Information: When modifying /var/log/audit it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "references": "1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: AU-8 Additional Information: When modifying /var/log/audit it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "function_names": [
      "compute_audit_log_partition_exists",
      "compute_audit_log_separate_partition",
      "compute_audit_log_dedicated_partition",
      "compute_audit_log_partition_configured",
      "compute_audit_log_partition_isolated"
    ]
  },
  {
    "id": "1.1.6.2",
    "title": "Ensure nodev option set on /var/log/audit partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/log/audit filesystem is not intended to support devices, set this option to ensure that users cannot create block or character special devices in /var/log/audit.",
    "audit": "Verify that the nodev option is set for the /var/log/audit mount. Run the following command to verify that the nodev mount option is set. # findmnt -kn /var/log/audit | grep -v 'nodev' Nothing should be returned",
    "remediation": "IF the /var/log/audit partition exists, edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/log/audit partition. Example: <device> /var/log/audit    <fstype> defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_filesystem_nodev_enabled",
      "compute_audit_log_partition_nodev_enabled",
      "compute_var_log_audit_nodev_mount_option",
      "filesystem_audit_log_nodev_set",
      "filesystem_var_log_audit_nodev_required"
    ]
  },
  {
    "id": "1.1.6.3",
    "title": "Ensure noexec option set on /var/log/audit partition",
    "assessment": "Automated",
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/log/audit filesystem is only intended for audit logs, set this option to ensure that users cannot run executable binaries from /var/log/audit.",
    "audit": "Verify that the noexec option is set for the /var/log/audit mount. Run the following command to verify that the noexec mount option is set. # findmnt -kn /var/log/audit | grep -v 'noexec' Nothing should be returned",
    "remediation": "IF the /var/log/audit partition exists, edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var partition. Example: <device> /var/log/audit    <fstype> defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: CM-11",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: CM-11",
    "function_names": [
      "compute_filesystem_noexec_option_enabled",
      "compute_filesystem_var_log_audit_noexec_enabled",
      "filesystem_partition_noexec_option_set",
      "filesystem_var_log_audit_noexec_enabled",
      "linux_filesystem_noexec_option_enabled",
      "linux_partition_noexec_option_set",
      "os_filesystem_noexec_option_enabled",
      "os_partition_noexec_option_set"
    ]
  },
  {
    "id": "1.1.6.4",
    "title": "Ensure nosuid option set on /var/log/audit partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/log/audit filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create setuid files in /var/log/audit.",
    "audit": "Verify that the nosuid option is set for the /var/log/audit mount. Run the following command to verify that the nosuid mount option is set. # findmnt -kn /var/log/audit | grep -v 'nosuid' Nothing should be returned",
    "remediation": "IF the /var/log/audit partition exists, edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/log/audit partition. Example: <device> /var/log/audit    <fstype> defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: CM-6",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: CM-6",
    "function_names": [
      "filesystem_var_log_audit_nosuid_enabled",
      "filesystem_audit_partition_nosuid_set",
      "filesystem_audit_log_nosuid_mount_option",
      "filesystem_log_partition_nosuid_enforced",
      "filesystem_var_log_audit_mount_nosuid_configured"
    ]
  },
  {
    "id": "1.1.7.1",
    "title": "Ensure separate partition exists for /home",
    "assessment": "Automated",
    "description": "The /home directory is used to support disk storage needs of local users.",
    "rationale": "The reasoning for mounting /home on a separate partition is as follows. Protection from resource exhaustion The default installation only creates a single / partition. Since the /home directory contains user generated data, there is a risk of resource exhaustion. It will essentially have the whole disk available to fill up and impact the system as a whole. In addition, other operations on the system could fill up the disk unrelated to /home and impact all local users. Fine grained control over the mount Configuring /home as its own file system allows an administrator to set additional mount options such as noexec/nosuid/nodev. These options limits an attackers ability to create exploits on the system. In the case of /home options such as usrquota/grpquota may be considered to limit the impact that users can have on each other with regards to disk resource exhaustion. Other options allow for specific behavior. See man mount for exact details regarding filesystem-independent and filesystem-specific options. Protection of user data As /home contains user data, care should be taken to ensure the security and integrity of the data and mount point. Impact: Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "audit": "Run the following command and verify output shows /home is mounted: # findmnt -kn /home Example output: /home  /dev/sdb ext4   rw,relatime,seclabel",
    "remediation": "For new installations, during installation create a custom partition setup and specify a separate partition for /home. For systems that were previously installed, create a new partition and configure /etc/fstab as appropriate. References: 1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: MP-2 Additional Information: When modifying /home it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Resizing filesystems is a common activity in cloud-hosted servers. Separate filesystem partitions may prevent successful resizing, or may require the installation of additional tools solely for the purpose of resizing operations. The use of these additional tools may introduce their own security considerations.",
    "references": "1. AJ Lewis, \"LVM HOWTO\", http://tldp.org/HOWTO/LVM-HOWTO/ 2. NIST SP 800-53 Rev. 5: MP-2 Additional Information: When modifying /home it is advisable to bring the system to emergency mode (so auditd is not running), rename the existing directory, mount the new file system, and migrate the data over before returning to multi-user mode.",
    "function_names": [
      "compute_home_partition_exists",
      "compute_home_separate_partition_enabled",
      "compute_home_partition_configured",
      "compute_home_directory_isolated",
      "compute_home_partition_verified"
    ]
  },
  {
    "id": "1.1.7.2",
    "title": "Ensure nodev option set on /home partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /home filesystem is not intended to support devices, set this option to ensure that users cannot create block or character special devices in /home.",
    "audit": "Verify that the nodev option is set for the /home mount. Run the following command to verify that the nodev mount option is set. # findmnt -kn /home | grep -v 'nodev' Nothing should be returned",
    "remediation": "IF the /home partition exists, edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /home partition. Example: <device> /home    <fstype>     defaults,rw,nosuid,nodev,relatime  0 0 Run the following command to remount /home with the configured options: # mount -o remount /home References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "filesystem_home_partition_nodev_enabled",
      "filesystem_home_partition_nodev_set",
      "filesystem_home_partition_nodev_configured",
      "filesystem_home_partition_nodev_required",
      "filesystem_home_partition_nodev_restricted"
    ]
  },
  {
    "id": "1.1.7.3",
    "title": "Ensure nosuid option set on /home partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /home filesystem is only intended for user file storage, set this option to ensure that users cannot create setuid files in /home.",
    "audit": "Verify that the nosuid option is set for the /home mount. Run the following command to verify that the nosuid mount option is set. # findmnt -kn /home | grep -v 'nosuid' Nothing should be returned",
    "remediation": "IF the /home partition exists, edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /home partition. Example: <device> /home    <fstype>     defaults,rw,nosuid,nodev,relatime  0 0 Run the following command to remount /home with the configured options: # mount -o remount /home References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "filesystem_home_nosuid_enabled",
      "filesystem_partition_nosuid_enabled",
      "filesystem_home_nosuid_set",
      "filesystem_partition_nosuid_set"
    ]
  },
  {
    "id": "1.1.8.1",
    "title": "Ensure nodev option set on /dev/shm partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /dev/shm filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create special devices in /dev/shm partitions.",
    "audit": "Verify that the nodev option is set for the /dev/shm mount. Run the following command to verify that the nodev mount option is set. # findmnt -kn /dev/shm | grep -v 'nodev' Nothing should be returned",
    "remediation": "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information. Example: tmpfs /dev/shm    tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /dev/shm with the configured options: # mount -o remount /dev/shm NOTE It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications. References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2  Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2  Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "function_names": [
      "compute_shm_partition_nodev_enabled",
      "compute_shm_partition_nodev_set",
      "compute_dev_shm_nodev_enabled",
      "compute_dev_shm_nodev_configured",
      "compute_shm_mount_nodev_enabled"
    ]
  },
  {
    "id": "1.1.8.2",
    "title": "Ensure noexec option set on /dev/shm partition",
    "assessment": "Automated",
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Setting this option on a file system prevents users from executing programs from shared memory. This deters users from introducing potentially malicious software on the system.",
    "audit": "Verify that the noexec option is set for the /dev/shm mount. Run the following command to verify that the noexec mount option is set. # findmnt -kn /dev/shm | grep -v 'noexec' Nothing should be returned",
    "remediation": "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /dev/shm partition. Example: tmpfs /dev/shm    tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /dev/shm with the configured options: # mount -o remount /dev/shm Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications. References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_partition_noexec_enabled",
      "compute_shm_partition_noexec_enabled",
      "compute_dev_shm_noexec_enabled",
      "compute_filesystem_noexec_enabled",
      "compute_mount_option_noexec_enabled"
    ]
  },
  {
    "id": "1.1.8.3",
    "title": "Ensure nosuid option set on /dev/shm partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Setting this option on a file system prevents users from introducing privileged programs onto the system and allowing non-root users to execute them.",
    "audit": "Verify that the nosuid option is set for the /dev/shm mount. Run the following command to verify that the nosuid mount option is set. # findmnt -kn /dev/shm | grep -v 'nosuid' Nothing should be returned",
    "remediation": "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information. Example: tmpfs /dev/shm    tmpfs     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /dev/shm with the configured options: # mount -o remount /dev/shm Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications. References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "function_names": [
      "filesystem_shm_nosuid_enabled",
      "filesystem_shm_nosuid_set",
      "filesystem_partition_nosuid_enabled",
      "filesystem_partition_nosuid_set",
      "mount_shm_nosuid_enabled",
      "mount_shm_nosuid_set",
      "mount_partition_nosuid_enabled",
      "mount_partition_nosuid_set"
    ]
  },
  {
    "id": "1.1.9",
    "title": "Disable Automounting",
    "assessment": "Automated",
    "description": "autofs allows automatic mounting of devices, typically including CD/DVDs and USB drives.",
    "rationale": "With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in the filesystem even if they lacked permissions to mount it themselves. Impact: The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations are considered adequate there is little value add in turning off automounting.",
    "audit": "As a preference autofs should not be installed unless other packages depend on it. Run the following command to verify autofs is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' autofs dpkg-query: no packages found matching autofs -OR- if there are dependencies on the autofs package: Run the following command to verify autofs is not enabled: # systemctl is-enabled autofs 2>/dev/null | grep 'enabled' Nothing should be returned",
    "remediation": "If there are no other packages that depends on autofs, remove the package with: # apt purge autofs -OR- if there are dependencies on the autofs package: Run the following commands to mask autofs: # systemctl stop autofs # systemctl mask autofs References: 1. NIST SP 800-53 Rev. 5: SI-3, MP-7 Additional Information: This control should align with the tolerance of the use of portable drives and optical media in the organization. On a server, requiring an admin to manually mount media can be part of defense-in-depth to reduce the risk of unapproved software or information being introduced or proprietary software or information being exfiltrated. If admins commonly use flash drives and Server access has sufficient physical controls, requiring manual mounting may not increase security.",
    "profile_applicability": "•  Level 1 - Server •  Level 2 - Workstation",
    "impact": "The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations are considered adequate there is little value add in turning off automounting.",
    "references": "1. NIST SP 800-53 Rev. 5: SI-3, MP-7 Additional Information: This control should align with the tolerance of the use of portable drives and optical media in the organization. On a server, requiring an admin to manually mount media can be part of defense-in-depth to reduce the risk of unapproved software or information being introduced or proprietary software or information being exfiltrated. If admins commonly use flash drives and Server access has sufficient physical controls, requiring manual mounting may not increase security.",
    "function_names": [
      "compute_instance_automount_disabled",
      "compute_volume_automount_disabled",
      "compute_device_automount_disabled",
      "compute_autofs_disabled",
      "compute_automount_service_disabled"
    ]
  },
  {
    "id": "1.1.10",
    "title": "Disable USB Storage",
    "assessment": "Automated",
    "description": "USB storage provides a means to transfer and store files insuring persistence and availability of the files independent of network connection status. Its popularity and utility has led to USB-based malware being a simple and common means for network infiltration and a first step to establishing a persistent threat within a networked environment.",
    "rationale": "Restricting USB access on the system will decrease the physical attack surface for a device and diminish the possible vectors to introduce malware. Impact: Disabling the usb-storage module will disable any usage of USB storage devices. If requirements and local site policy allow the use of such devices, other solutions should be configured accordingly instead. One example of a commonly used solution is USBGuard.",
    "audit": "Run the following script to verify the usb-storage module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"usb-storage\" # set module name l_mtype=\"drivers\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the cramfs module: If the module is available in the running kernel: • Create a file with install usb-storage /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist usb-storage in the /etc/modprobe.d/ directory • Unload usb-storage from the kernel If available in ANY installed kernel: • Create a file with blacklist usb-storage in the /etc/modprobe.d/ directory If the kernel module is not available on the system: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"usb-storage\" # set module name l_mtype=\"drivers\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: SI-3 Additional Information: An alternative solution to disabling the usb-storage module may be found in USBGuard. Use of USBGuard and construction of USB device policies should be done in alignment with site policy.",
    "profile_applicability": "•  Level 1 - Server •  Level 2 - Workstation",
    "impact": "Disabling the usb-storage module will disable any usage of USB storage devices. If requirements and local site policy allow the use of such devices, other solutions should be configured accordingly instead. One example of a commonly used solution is USBGuard.",
    "references": "1. NIST SP 800-53 Rev. 5: SI-3 Additional Information: An alternative solution to disabling the usb-storage module may be found in USBGuard. Use of USBGuard and construction of USB device policies should be done in alignment with site policy.",
    "function_names": [
      "compute_instance_usb_storage_disabled",
      "compute_vm_usb_storage_disabled",
      "compute_os_usb_storage_disabled",
      "compute_device_usb_storage_disabled",
      "compute_system_usb_storage_disabled",
      "compute_host_usb_storage_disabled",
      "compute_guest_usb_storage_disabled",
      "compute_environment_usb_storage_disabled"
    ]
  },
  {
    "id": "1.2.1",
    "title": "Ensure AIDE is installed",
    "assessment": "Automated",
    "description": "AIDE takes a snapshot of filesystem state including modification times, permissions, and file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the system.",
    "rationale": "By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.",
    "audit": "Run the following commands to verify AIDE is installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' aide aide-common aide    install ok installed    installed aide-common     install ok installed    installed",
    "remediation": "Install AIDE using the appropriate package manager or manual installation: # apt install aide aide-common Configure AIDE as appropriate for your environment. Consult the AIDE documentation for options. Run the following commands to initialize AIDE: # aideinit # mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db References: 1. NIST SP 800-53 Rev. 5: AU-2 Additional Information: The prelinking feature can interfere with AIDE because it alters binaries to speed up their start up times. Run prelink -ua to restore the binaries to their prelinked state, thus avoiding false positives from AIDE.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2 Additional Information: The prelinking feature can interfere with AIDE because it alters binaries to speed up their start up times. Run prelink -ua to restore the binaries to their prelinked state, thus avoiding false positives from AIDE.",
    "function_names": [
      "system_aide_installed",
      "system_aide_enabled",
      "system_aide_snapshot_configured",
      "system_aide_integrity_monitoring_enabled",
      "system_aide_database_initialized",
      "system_aide_periodic_checks_enabled",
      "system_aide_alerting_configured"
    ]
  },
  {
    "id": "1.2.2",
    "title": "Ensure filesystem integrity is regularly checked",
    "assessment": "Automated",
    "description": "Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.",
    "rationale": "Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.",
    "audit": "Run the following commands to verify a cron job scheduled to run the aide check. # grep -Prs '^([^#\\n\\r]+\\h+)?(\\/usr\\/s?bin\\/|^\\h*)aide(\\.wrapper)?\\h+(-- check|([^#\\n\\r]+\\h+)?\\$AIDEARGS)\\b' /etc/cron.* /etc/crontab /var/spool/cron/ Ensure a cron job in compliance with site policy is returned. OR Run the following commands to verify that aidecheck.service and aidecheck.timer are enabled and aidecheck.timer is running # systemctl is-enabled aidecheck.service # systemctl is-enabled aidecheck.timer # systemctl status aidecheck.timer",
    "remediation": "If cron will be used to schedule and run aide check: Run the following command: # crontab -u root -e Add the following line to the crontab: 0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --check OR If aidecheck.service and aidecheck.timer will be used to schedule and run aide check: Create or edit the file /etc/systemd/system/aidecheck.service and add the following lines: [Unit] Description=Aide Check [Service] Type=simple ExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --check [Install] WantedBy=multi-user.target Create or edit the file /etc/systemd/system/aidecheck.timer and add the following lines: [Unit] Description=Aide check every day at 5AM [Timer] OnCalendar=*-*-* 05:00:00 Unit=aidecheck.service [Install] WantedBy=multi-user.target Run the following commands: # chown root:root /etc/systemd/system/aidecheck.* # chmod 0644 /etc/systemd/system/aidecheck.* # systemctl daemon-reload # systemctl enable aidecheck.service # systemctl --now enable aidecheck.timer References: 1. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.service 2. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.timer 3. NIST SP 800-53 Rev. 5: AU-2  Additional Information: The checking in this recommendation occurs every day at 5am. Alter the frequency and time of the checks in compliance with site policy systemd timers, timer file aidecheck.timer and service file aidecheck.service, have been included as an optional alternative to using cron Ubuntu advises using /usr/bin/aide.wrapper rather than calling /usr/bin/aide directly in order to protect the database and prevent conflicts",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.service 2. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.timer 3. NIST SP 800-53 Rev. 5: AU-2  Additional Information: The checking in this recommendation occurs every day at 5am. Alter the frequency and time of the checks in compliance with site policy systemd timers, timer file aidecheck.timer and service file aidecheck.service, have been included as an optional alternative to using cron Ubuntu advises using /usr/bin/aide.wrapper rather than calling /usr/bin/aide directly in order to protect the database and prevent conflicts",
    "function_names": [
      "compute_instance_filesystem_integrity_checked",
      "compute_instance_filesystem_integrity_checked_over_90d",
      "compute_instance_filesystem_integrity_monitoring_enabled",
      "compute_instance_filesystem_integrity_regularly_checked",
      "compute_instance_filesystem_integrity_automated_checks_enabled"
    ]
  },
  {
    "id": "1.3.1",
    "title": "Ensure updates, patches, and additional security software are installed",
    "assessment": "Manual",
    "description": "Periodically patches are released for included software either due to security flaws or to include additional functionality.",
    "rationale": "Newer patches may contain security enhancements that would not be available through the latest full update. As a result, it is recommended that the latest software patches be used to take advantage of the latest functionality. As with any software installation, organizations need to determine if a given update meets their requirements and verify the compatibility and supportability of any additional software against the update revision that is selected.",
    "audit": "Verify there are no updates or patches to install: # apt -s upgrade",
    "remediation": "Run the following command to update all packages following local site policy guidance on applying updates and patches: # apt upgrade OR # apt dist-upgrade References: 1. NIST SP 800-53 Rev. 5: SI-2   Additional Information: Site policy may mandate a testing period before install onto production systems for available updates. • upgrade - is used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list. Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, or packages not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt knows that new versions of packages are available. • dist-upgrade - in addition to performing the function of upgrade, also intelligently handles changing dependencies with new versions of packages; apt has a \"smart\" conflict resolution system, and it will attempt to upgrade the most important packages at the expense of less important ones if necessary. So, dist- upgrade command may remove some packages. The /etc/apt/sources.list file contains a list of locations from which to retrieve desired package files. See also apt_preferences(5) for a mechanism for overriding the general settings for individual packages.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-2   Additional Information: Site policy may mandate a testing period before install onto production systems for available updates. • upgrade - is used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list. Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, or packages not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt knows that new versions of packages are available. • dist-upgrade - in addition to performing the function of upgrade, also intelligently handles changing dependencies with new versions of packages; apt has a \"smart\" conflict resolution system, and it will attempt to upgrade the most important packages at the expense of less important ones if necessary. So, dist- upgrade command may remove some packages. The /etc/apt/sources.list file contains a list of locations from which to retrieve desired package files. See also apt_preferences(5) for a mechanism for overriding the general settings for individual packages.",
    "function_names": [
      "compute_instance_auto_updates_enabled",
      "compute_instance_security_patches_installed",
      "compute_instance_additional_security_software_installed",
      "compute_instance_automatic_patching_enabled",
      "compute_instance_software_up_to_date",
      "compute_instance_security_updates_enabled",
      "compute_instance_patch_compliance_enabled",
      "compute_instance_security_software_installed",
      "compute_instance_os_patches_installed",
      "compute_instance_regular_updates_enabled"
    ]
  },
  {
    "id": "1.3.2",
    "title": "Ensure package manager repositories are configured",
    "assessment": "Manual",
    "description": "Systems need to have package manager repositories configured to ensure they receive the latest patches and updates.",
    "rationale": "If a system's package repositories are misconfigured important patches may not be identified or a rogue repository could introduce compromised software.",
    "audit": "Run the following command and verify package repositories are configured correctly: # apt-cache policy",
    "remediation": "Configure your package manager repositories according to site policy. References: 1. NIST SP 800-53 Rev. 5: SI-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-2",
    "function_names": [
      "compute_package_manager_repositories_configured",
      "compute_package_manager_repositories_enabled",
      "compute_package_manager_repositories_valid",
      "compute_package_manager_repositories_up_to_date",
      "compute_package_manager_repositories_secure",
      "compute_package_manager_repositories_signed",
      "compute_package_manager_repositories_trusted_sources",
      "compute_package_manager_repositories_no_unsupported_sources"
    ]
  },
  {
    "id": "1.3.3",
    "title": "Ensure GPG keys are configured",
    "assessment": "Manual",
    "description": "Most packages managers implement GPG key signing to verify package integrity during installation.",
    "rationale": "It is important to ensure that updates are obtained from a valid source to protect against spoofing that could lead to the inadvertent installation of malware on the system.",
    "audit": "Verify GPG keys are configured correctly for your package manager: # apt-key list",
    "remediation": "Update your package manager GPG keys in accordance with site policy. References: 1. NIST SP 800-53 Rev. 5: SI-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-2",
    "function_names": [
      "package_manager_gpg_key_configured",
      "package_manager_repository_gpg_key_configured",
      "package_manager_gpg_key_signing_enabled",
      "package_manager_gpg_key_valid",
      "package_manager_gpg_key_trusted",
      "package_manager_gpg_key_not_expired",
      "package_manager_gpg_key_revocation_checked",
      "package_manager_gpg_key_all_repositories"
    ]
  },
  {
    "id": "1.4.1",
    "title": "Ensure bootloader password is set",
    "assessment": "Automated",
    "description": "Setting the boot loader password will require that anyone rebooting the system must enter a password before being able to set command line boot parameters",
    "rationale": "Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off AppArmor at boot time). Impact: If password protection is enabled, only the designated superuser can edit a GRUB 2 menu item by pressing \"e\" or access the GRUB 2 command line by pressing \"c\" If GRUB 2 is set up to boot automatically to a password-protected menu entry the user has no option to back out of the password prompt to select another menu entry. Holding the SHIFT key will not display the menu in this case. The user must enter the correct username and password. If unable to do so, the configuration files will have to be edited via a LiveCD or other means to fix the problem You can add --unrestricted to the menu entries to allow the system to boot without entering a password. A password will still be required to edit menu items. More Information: https://help.ubuntu.com/community/Grub2/Passwords",
    "audit": "Run the following commands and verify output matches: # grep \"^set superusers\" /boot/grub/grub.cfg set superusers=\"<username>\" # grep \"^password\" /boot/grub/grub.cfg password_pbkdf2 <username> <encrypted-password>",
    "remediation": "Create an encrypted password with grub-mkpasswd-pbkdf2: # grub-mkpasswd-pbkdf2 Enter password: <password> Reenter password: <password> PBKDF2 hash of your password is <encrypted-password> Add the following into a custom /etc/grub.d configuration file: cat <<EOF set superusers=\"<username>\" password_pbkdf2 <username> <encrypted-password> EOF The superuser/user information and password should not be contained in the /etc/grub.d/00_header file as this file could be overwritten in a package update. If there is a requirement to be able to boot/reboot without entering the password, edit /etc/grub.d/10_linux and add --unrestricted to the line CLASS= Example: CLASS=\"--class gnu-linux --class gnu --class os --unrestricted\" Run the following command to update the grub2 configuration: # update-grub Default Value: This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings. Replace /boot/grub/grub.cfg with the appropriate grub configuration file for your environment. References: 1. NIST SP 800-53 Rev. 5: CM-6 Additional Information: Changes to /etc/grub.d/10_linux may be overwritten during updates to the grub- common package. You should review any changes to this file before rebooting otherwise the system may unexpectedly prompt for a password on the next boot.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "If password protection is enabled, only the designated superuser can edit a GRUB 2 menu item by pressing \"e\" or access the GRUB 2 command line by pressing \"c\" If GRUB 2 is set up to boot automatically to a password-protected menu entry the user has no option to back out of the password prompt to select another menu entry. Holding the SHIFT key will not display the menu in this case. The user must enter the correct username and password. If unable to do so, the configuration files will have to be edited via a LiveCD or other means to fix the problem You can add --unrestricted to the menu entries to allow the system to boot without entering a password. A password will still be required to edit menu items. More Information: https://help.ubuntu.com/community/Grub2/Passwords",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6 Additional Information: Changes to /etc/grub.d/10_linux may be overwritten during updates to the grub- common package. You should review any changes to this file before rebooting otherwise the system may unexpectedly prompt for a password on the next boot.",
    "function_names": [
      "compute_bootloader_password_set",
      "compute_bootloader_password_configured",
      "compute_bootloader_password_required",
      "compute_bootloader_password_protected",
      "compute_bootloader_password_enabled"
    ]
  },
  {
    "id": "1.4.2",
    "title": "Ensure permissions on bootloader config are configured",
    "assessment": "Automated",
    "description": "The grub configuration file contains information on boot settings and passwords for unlocking boot options.",
    "rationale": "Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access is 0600 or more restrictive. # stat /boot/grub/grub.cfg Access: (0600/-r--------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set permissions on your grub configuration: # chown root:root /boot/grub/grub.cfg # chmod u-x,go-rwx /boot/grub/grub.cfg References: 1. NIST SP 800-53 Rev. 5: CM-6 Additional Information: This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings. Replace /boot/grub/grub.cfg with the appropriate grub configuration file for your environment",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6 Additional Information: This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings. Replace /boot/grub/grub.cfg with the appropriate grub configuration file for your environment",
    "function_names": [
      "compute_bootloader_config_permissions_restricted",
      "compute_grub_config_file_secure_permissions",
      "compute_boot_config_ownership_correct",
      "compute_grub_file_read_write_restricted",
      "compute_bootloader_config_group_permissions_restricted"
    ]
  },
  {
    "id": "1.4.3",
    "title": "Ensure authentication required for single user mode",
    "assessment": "Automated",
    "description": "Single user mode is used for recovery when the system detects an issue during boot or by manual selection from the bootloader.",
    "rationale": "Requiring authentication in single user mode prevents an unauthorized user from rebooting the system into single user to gain root privileges without credentials.",
    "audit": "Perform the following to determine if a password is set for the root user: # grep -Eq '^root:\\$[0-9]' /etc/shadow || echo \"root is locked\" No results should be returned.",
    "remediation": "Run the following command and follow the prompts to set a password for the root user: # passwd root References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "compute_system_authentication_required_single_user_mode",
      "compute_system_single_user_mode_authentication_enabled",
      "compute_boot_single_user_mode_auth_required",
      "compute_recovery_mode_authentication_enabled",
      "compute_system_single_user_auth_enforced"
    ]
  },
  {
    "id": "1.5.1",
    "title": "Ensure address space layout randomization (ASLR) is enabled",
    "assessment": "Automated",
    "description": "Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.",
    "rationale": "Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • kernel.randomize_va_space is set to 2 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(kernel.randomize_va_space=2) l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • kernel.randomize_va_space = 2 Example: # printf \" kernel.randomize_va_space = 2 \" >> /etc/sysctl.d/60-kernel_sysctl.conf Run the following command to set the active kernel parameter: # sysctl -w kernel.randomize_va_space=2 Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: kernel.randomize_va_space = 2 References: 1. http://manpages.ubuntu.com/manpages/focal/man5/sysctl.d.5.html 2. CCI-000366: The organization implements the security configuration settings 3. NIST SP 800-53 Rev. 5: CM-6",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. http://manpages.ubuntu.com/manpages/focal/man5/sysctl.d.5.html 2. CCI-000366: The organization implements the security configuration settings 3. NIST SP 800-53 Rev. 5: CM-6",
    "function_names": [
      "compute_instance_aslr_enabled",
      "compute_vm_aslr_enabled",
      "compute_system_aslr_enabled",
      "compute_kernel_aslr_enabled",
      "compute_process_aslr_enabled",
      "compute_memory_aslr_enabled",
      "compute_security_aslr_enabled",
      "compute_os_aslr_enabled"
    ]
  },
  {
    "id": "1.5.2",
    "title": "Ensure ptrace_scope is restricted",
    "assessment": "Automated",
    "description": "The ptrace() system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers.",
    "rationale": "If one application is compromised, it would be possible for an attacker to attach to other running processes (e.g. Bash, Firefox, SSH sessions, GPG agent, etc) to extract additional credentials and continue to expand the scope of their attack. Enabling restricted mode will limit the ability of a compromised process to PTRACE_ATTACH on other processes running under the same user. With restricted mode, ptrace will continue to work with root user.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • kernel.yama.ptrace_scope is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"kernel.yama.ptrace_scope=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • kernel.yama.ptrace_scope = 1 Example: # printf \" kernel.yama.ptrace_scope = 1 \" >> /etc/sysctl.d/60-kernel_sysctl.conf Run the following command to set the active kernel parameter: # sysctl -w kernel.yama.ptrace_scope=1 Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: kernel.yama.ptrace_scope=1 References: 1. https://www.kernel.org/doc/Documentation/security/Yama.txt 2. https://github.com/raj3shp/termspy Additional Information: Ptrace is very rarely used by regular applications and is mostly used by debuggers such as gdb and strace.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://www.kernel.org/doc/Documentation/security/Yama.txt 2. https://github.com/raj3shp/termspy Additional Information: Ptrace is very rarely used by regular applications and is mostly used by debuggers such as gdb and strace.",
    "function_names": [
      "system_ptrace_scope_restricted",
      "system_ptrace_scope_restricted_to_admin",
      "system_ptrace_scope_disabled",
      "system_ptrace_scope_minimal_access",
      "system_ptrace_scope_secure_config"
    ]
  },
  {
    "id": "1.5.3",
    "title": "Ensure prelink is not installed",
    "assessment": "Automated",
    "description": "prelink is a program that modifies ELF shared libraries and ELF dynamically linked binaries in such a way that the time needed for the dynamic linker to perform relocations at startup significantly decreases.",
    "rationale": "The prelinking feature can interfere with the operation of AIDE, because it changes binaries. Prelinking can also increase the vulnerability of the system if a malicious user is able to compromise a common library such as libc.",
    "audit": "Verify prelink is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' prelink prelink     unknown ok not-installed        not-installed",
    "remediation": "Run the following command to restore binaries to normal: # prelink -ua Uninstall prelink using the appropriate package manager or manual installation: # apt purge prelink References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-1, CM-3",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-1, CM-3",
    "function_names": [
      "system_package_prelink_not_installed",
      "system_elf_binary_prelink_disabled",
      "system_library_prelink_removed",
      "system_security_prelink_absent",
      "system_compliance_prelink_uninstalled"
    ]
  },
  {
    "id": "1.5.4",
    "title": "Ensure Automatic Error Reporting is not enabled",
    "assessment": "Automated",
    "description": "The Apport Error Reporting Service automatically generates crash reports for debugging",
    "rationale": "Apport collects potentially sensitive data, such as core dumps, stack traces, and log files. They can contain passwords, credit card numbers, serial numbers, and other private material.",
    "audit": "Run the following command to verify that the Apport Error Reporting Service is not enabled: #  dpkg-query -s apport > /dev/null 2>&1 && grep -Psi -- '^\\h*enabled\\h*=\\h*[^0]\\b' /etc/default/apport Nothing should be returned Run the following command to verify that the apport service is not active: # systemctl is-active apport.service | grep '^active' Nothing should be returned",
    "remediation": "Edit /etc/default/apport and add or edit the enabled parameter to equal 0: enabled=0 Run the following commands to stop and disable the apport service # systemctl stop apport.service # systemctl --now disable apport.service -- OR -- Run the following command to remove the apport package: # apt purge apport Default Value: enabled=1",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "apport_service_error_reporting_disabled",
      "apport_service_automatic_reporting_disabled",
      "apport_service_crash_reporting_disabled",
      "apport_service_debug_reporting_disabled"
    ]
  },
  {
    "id": "1.5.5",
    "title": "Ensure core dumps are restricted",
    "assessment": "Automated",
    "description": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file. The system provides the ability to set a soft limit for core dumps, but this can be overridden by the user.",
    "rationale": "Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.",
    "audit": "Run the following command and verify output matches: # grep -Es '^(\\*|\\s).*hard.*core.*(\\s+#.*)?$' /etc/security/limits.conf /etc/security/limits.d/* * hard core 0 Run the following script to verify fs.suid_dumpable = 0: Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • fs.suid_dumpable is set to 0 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"fs.suid_dumpable=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi } Run the following command to check if systemd-coredump is installed:  # systemctl is-enabled coredump.service if enabled, masked, or disabled is returned systemd-coredump is installed",
    "remediation": "Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file: * hard core 0 Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • fs.suid_dumpable = 0 Example: # printf \" fs.suid_dumpable = 0 \" >> /etc/sysctl.d/60-fs_sysctl.conf Run the following command to set the active kernel parameter: # sysctl -w fs.suid_dumpable=0 Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten -IF- systemd-coredump is installed: edit /etc/systemd/coredump.conf and add/modify the following lines: Storage=none ProcessSizeMax=0 Run the command: systemctl daemon-reload MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1005, T1005.000 TA0007    1.6 Mandatory Access Control Mandatory Access Control (MAC) provides an additional layer of access restrictions to processes on top of the base Discretionary Access Controls. By restricting how processes can access files and resources on a system the potential impact from vulnerabilities in the processes can be reduced. Impact: Mandatory Access Control limits the capabilities of applications and daemons on a system, while this can prevent unauthorized access the configuration of MAC can be complex and difficult to implement correctly preventing legitimate access from occurring. Note: • Apparmor is the default MAC provided with Debian-based systems. • Additional Mandatory Access Control systems to include SELinux exist. If a different Mandatory Access Control systems is used, please follow it's vendors guidance for proper implementation in place of the guidance provided in this section  1.6.1 Configure AppArmor AppArmor provides a Mandatory Access Control (MAC) system that greatly augments the default Discretionary Access Control (DAC) model. Under AppArmor MAC rules are applied by file paths instead of by security contexts as in other MAC systems. As such it does not require support in the filesystem and can be applied to network mounted filesystems for example. AppArmor security policies define what system resources applications can access and what privileges they can do so with. This automatically limits the damage that the software can do to files accessible by the calling user. The user does not need to take any action to gain this benefit. For an action to occur, both the traditional DAC permissions must be satisfied as well as the AppArmor MAC rules. The action will not be allowed if either one of these models does not permit the action. In this way, AppArmor rules can only make a system's permissions more restrictive and secure. References: 1. AppArmor Documentation: http://wiki.apparmor.net/index.php/Documentation 2. Ubuntu AppArmor Documentation: https://help.ubuntu.com/community/AppArmor 3. SUSE AppArmor Documentation: https://www.suse.com/documentation/apparmor/",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Mandatory Access Control limits the capabilities of applications and daemons on a system, while this can prevent unauthorized access the configuration of MAC can be complex and difficult to implement correctly preventing legitimate access from occurring. Note: • Apparmor is the default MAC provided with Debian-based systems. • Additional Mandatory Access Control systems to include SELinux exist. If a different Mandatory Access Control systems is used, please follow it's vendors guidance for proper implementation in place of the guidance provided in this section  1.6.1 Configure AppArmor AppArmor provides a Mandatory Access Control (MAC) system that greatly augments the default Discretionary Access Control (DAC) model. Under AppArmor MAC rules are applied by file paths instead of by security contexts as in other MAC systems. As such it does not require support in the filesystem and can be applied to network mounted filesystems for example. AppArmor security policies define what system resources applications can access and what privileges they can do so with. This automatically limits the damage that the software can do to files accessible by the calling user. The user does not need to take any action to gain this benefit. For an action to occur, both the traditional DAC permissions must be satisfied as well as the AppArmor MAC rules. The action will not be allowed if either one of these models does not permit the action. In this way, AppArmor rules can only make a system's permissions more restrictive and secure.",
    "references": "1. AppArmor Documentation: http://wiki.apparmor.net/index.php/Documentation 2. Ubuntu AppArmor Documentation: https://help.ubuntu.com/community/AppArmor 3. SUSE AppArmor Documentation: https://www.suse.com/documentation/apparmor/",
    "function_names": [
      "system_core_dump_restricted",
      "system_core_dump_soft_limit_enforced",
      "system_core_dump_user_override_disabled",
      "system_core_dump_confidentiality_protected",
      "system_core_dump_size_limited"
    ]
  },
  {
    "id": "1.6.1.1",
    "title": "Ensure AppArmor is installed",
    "assessment": "Automated",
    "description": "AppArmor provides Mandatory Access Controls.",
    "rationale": "Without a Mandatory Access Control system installed only the default Discretionary Access Control system will be available.",
    "audit": "Verify that AppArmor is installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' apparmor apparmor-utils apparmor        install ok installed    installed apparmor-utils  install ok installed    installed",
    "remediation": "Install AppArmor. # apt install apparmor apparmor-utils",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "security_apparmor_installed",
      "security_apparmor_enabled",
      "security_apparmor_enforced",
      "security_apparmor_profiles_loaded",
      "security_apparmor_no_complain_mode"
    ]
  },
  {
    "id": "1.6.1.2",
    "title": "Ensure AppArmor is enabled in the bootloader configuration",
    "assessment": "Automated",
    "description": "Configure AppArmor to be enabled at boot time and verify that it has not been overwritten by the bootloader boot parameters. Note: This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings.",
    "rationale": "AppArmor must be enabled at boot time in your bootloader configuration to ensure that the controls it provides are not overridden.",
    "audit": "Run the following commands to verify that all linux lines have the apparmor=1 and security=apparmor parameters set: # grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"apparmor=1\" Nothing should be returned # grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"security=apparmor\" Nothing should be returned",
    "remediation": "Edit /etc/default/grub and add the apparmor=1 and security=apparmor parameters to the GRUB_CMDLINE_LINUX= line GRUB_CMDLINE_LINUX=\"apparmor=1 security=apparmor\" Run the following command to update the grub2 configuration: # update-grub References: 1. NIST SP 800-53 Rev. 5: AC-3",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3",
    "function_names": [
      "bootloader_config_app_armor_enabled",
      "bootloader_grub_app_armor_enabled",
      "bootloader_boot_params_app_armor_enabled",
      "bootloader_boot_params_app_armor_not_overwritten",
      "bootloader_grub_app_armor_not_overwritten"
    ]
  },
  {
    "id": "1.6.1.3",
    "title": "Ensure all AppArmor Profiles are in enforce or complain mode",
    "assessment": "Automated",
    "description": "AppArmor profiles define what resources applications are able to access.",
    "rationale": "Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.",
    "audit": "Run the following command and verify that profiles are loaded, and are in either enforce or complain mode: # apparmor_status | grep profiles Review output and ensure that profiles are loaded, and in either enforce or complain mode: 37 profiles are loaded. 35 profiles are in enforce mode. 2 profiles are in complain mode. 4 processes have profiles defined. Run the following command and verify no processes are unconfined # apparmor_status | grep processes Review the output and ensure no processes are unconfined: 4 processes have profiles defined. 4 processes are in enforce mode. 0 processes are in complain mode. 0 processes are unconfined but have a profile defined.",
    "remediation": "Run the following command to set all profiles to enforce mode: # aa-enforce /etc/apparmor.d/* OR Run the following command to set all profiles to complain mode: # aa-complain /etc/apparmor.d/* Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted References: 1. NIST SP 800-53 Rev. 5: AC-3",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3",
    "function_names": [
      "apparmor_profile_enforce_mode",
      "apparmor_profile_complain_mode",
      "apparmor_profile_no_unconfined_mode",
      "apparmor_profile_restrictive_mode_enabled"
    ]
  },
  {
    "id": "1.6.1.4",
    "title": "Ensure all AppArmor Profiles are enforcing",
    "assessment": "Automated",
    "description": "AppArmor profiles define what resources applications are able to access.",
    "rationale": "Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.",
    "audit": "Run the following commands and verify that profiles are loaded and are not in complain mode: # apparmor_status | grep profiles Review output and ensure that profiles are loaded, and in enforce mode: 34 profiles are loaded. 34 profiles are in enforce mode. 0 profiles are in complain mode. 2 processes have profiles defined. Run the following command and verify that no processes are unconfined: apparmor_status | grep processes Review the output and ensure no processes are unconfined: 2 processes have profiles defined. 2 processes are in enforce mode. 0 processes are in complain mode. 0 processes are unconfined but have a profile defined.",
    "remediation": "Run the following command to set all profiles to enforce mode: # aa-enforce /etc/apparmor.d/* Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted References: 1. NIST SP 800-53 Rev. 5: AC-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3",
    "function_names": [
      "apparmor_profile_enforcing",
      "apparmor_profile_compliance_enabled",
      "apparmor_profile_security_mode_enforcing",
      "apparmor_profile_restrictive_mode_enabled",
      "apparmor_profile_access_control_enforcing",
      "apparmor_profile_resource_restrictions_enabled",
      "apparmor_profile_security_policy_enforcing",
      "apparmor_profile_protection_mode_active",
      "apparmor_profile_enforcement_status_valid",
      "apparmor_profile_security_constraints_enabled"
    ]
  },
  {
    "id": "1.7.1",
    "title": "Ensure message of the day is configured properly",
    "assessment": "Automated",
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit": "Run the following command and verify no results are returned: # grep -Eis \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= -f2 | sed -e 's/\"//g'))\" /etc/motd",
    "remediation": "Edit the /etc/motd file with the appropriate contents according to your site policy, remove any instances of \\m , \\r , \\s , \\v or references to the OS platform. Add or update the message text to follow local site policy. Example Text: # echo \"Authorized use only. All activity may be monitored and reported.\" > /etc/issue.net -- OR -- If the motd is not used, this file can be removed. Run the following command to remove the motd file: # rm /etc/motd References: 1. NIST SP 800-53 Rev. 5: CM-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0007",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0007",
    "function_names": [
      "compute_motd_configured_properly",
      "compute_motd_no_os_info",
      "compute_motd_no_architecture_info",
      "compute_motd_no_release_info",
      "compute_motd_no_version_info",
      "compute_motd_custom_content_only",
      "compute_motd_no_sensitive_data",
      "compute_motd_static_content",
      "compute_motd_no_dynamic_vars",
      "compute_motd_standardized_format"
    ]
  },
  {
    "id": "1.7.2",
    "title": "Ensure local login warning banner is configured properly",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version - or the operating system's name",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit": "Run the following command and verify that the contents match site policy: # cat /etc/issue Run the following command and verify no results are returned: # grep -E -i \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= - f2 | sed -e 's/\"//g'))\" /etc/issue",
    "remediation": "Edit the /etc/issue file with the appropriate contents according to your site policy, remove any instances of \\m , \\r , \\s , \\v or references to the OS platform. Add or update the message text to follow local site policy. Example Text: # echo \"Authorized use only. All activity may be monitored and reported.\" > /etc/issue.net MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0007",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "compute_issue_banner_configured",
      "compute_issue_os_info_restricted",
      "compute_issue_login_warning_enabled",
      "compute_issue_sensitive_data_removed",
      "compute_issue_banner_content_valid",
      "compute_issue_mingetty_options_disabled",
      "compute_issue_os_details_masked",
      "compute_issue_banner_compliance_checked"
    ]
  },
  {
    "id": "1.7.3",
    "title": "Ensure remote login warning banner is configured properly",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit": "Run the following command and verify that the contents match site policy: # cat /etc/issue.net Run the following command and verify no results are returned: # grep -E -i \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= - f2 | sed -e 's/\"//g'))\" /etc/issue.net",
    "remediation": "Edit the /etc/issue.net file with the appropriate contents according to your site policy, remove any instances of \\m , \\r , \\s , \\v or references to the OS platform. Add or update the message text to follow local site policy. Example Text: # echo \"Authorized use only. All activity may be monitored and reported.\" > /etc/issue.net MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1018, T1018.000, T1082, T1082.000, T1592, T1592.004 TA0007",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "compute_remote_login_banner_configured",
      "compute_issue_net_banner_configured",
      "compute_os_info_disclosure_disabled",
      "compute_mingetty_options_restricted",
      "compute_pre_login_banner_configured",
      "compute_remote_access_warning_enabled",
      "compute_system_info_hiding_enabled",
      "compute_login_banner_content_valid"
    ]
  },
  {
    "id": "1.7.4",
    "title": "Ensure permissions on /etc/motd are configured",
    "assessment": "Automated",
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users.",
    "rationale": "If the /etc/motd file does not have the correct ownership it could be modified by unauthorized users with incorrect or misleading information.",
    "audit": "Run the following command and verify that if /etc/motd exists, Access is 644 or more restrictive, Uid and Gid are both 0/root: # [ -e /etc/motd ] && stat -Lc 'Access: (%#a/%A)  Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/motd Access: (0644/-rw-r--r--)  Uid: ( 0/ root) Gid: { 0/ root) -- OR -- Nothing is returned",
    "remediation": "Run the following commands to set permissions on /etc/motd : # chown root:root $(readlink -e /etc/motd) # chmod u-x,go-wx $(readlink -e /etc/motd) -- OR -- Run the following command to remove the /etc/motd file: # rm /etc/motd Default Value: File doesn't exist Additional Information: If Message of the day is not needed, this file can be removed.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "compute_motd_file_permissions_configured",
      "compute_motd_file_secure_ownership",
      "compute_motd_file_readonly_restricted",
      "compute_motd_file_no_world_writable",
      "compute_motd_file_group_ownership_correct",
      "compute_motd_file_permissions_644_or_stricter",
      "compute_motd_file_no_suid_sgid",
      "compute_motd_file_no_execute_permissions"
    ]
  },
  {
    "id": "1.7.5",
    "title": "Ensure permissions on /etc/issue are configured",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals.",
    "rationale": "If the /etc/issue file does not have the correct ownership it could be modified by unauthorized users with incorrect or misleading information.",
    "audit": "Run the following command and verify Access is 644 or more restrictive and Uid and Gid are both 0/root: # stat -Lc 'Access: (%#a/%A)  Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue Access: (0644/-rw-r--r--)  Uid: ( 0/ root) Gid: { 0/ root)",
    "remediation": "Run the following commands to set permissions on /etc/issue: # chown root:root $(readlink -e /etc/issue) # chmod u-x,go-wx $(readlink -e /etc/issue) Default Value: Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "system_file_issue_permissions_configured",
      "system_file_issue_secure_ownership",
      "system_file_issue_read_only",
      "system_file_issue_restricted_access",
      "system_file_issue_no_world_writable",
      "system_file_issue_no_group_writable",
      "system_file_issue_root_owned",
      "system_file_issue_strict_permissions"
    ]
  },
  {
    "id": "1.7.6",
    "title": "Ensure permissions on /etc/issue.net are configured",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.",
    "rationale": "If the /etc/issue.net file does not have the correct ownership it could be modified by unauthorized users with incorrect or misleading information.",
    "audit": "Run the following command and verify Access is 644 or more restrictive and Uid and Gid are both 0/root: # stat -Lc 'Access: (%#a/%A)  Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue.net Access: (0644/-rw-r--r--)  Uid: ( 0/ root)   Gid: ( 0/ root)",
    "remediation": "Run the following commands to set permissions on /etc/issue.net : # chown root:root $(readlink -e /etc/issue.net) # chmod u-x,go-wx $(readlink -e /etc/issue.net) Default Value: Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "linux_file_issue_net_permissions_configured",
      "linux_file_issue_net_secure_permissions",
      "linux_file_issue_net_restricted_access",
      "linux_file_issue_net_owner_root",
      "linux_file_issue_net_group_root",
      "linux_file_issue_net_mode_644",
      "linux_file_issue_net_no_world_writable",
      "linux_file_issue_net_no_group_writable",
      "linux_file_issue_net_no_other_writable"
    ]
  },
  {
    "id": "1.8.1",
    "title": "Ensure GNOME Display Manager is removed",
    "assessment": "Automated",
    "description": "The GNOME Display Manager (GDM) is a program that manages graphical display servers and handles graphical user logins.",
    "rationale": "If a Graphical User Interface (GUI) is not required, it should be removed to reduce the attack surface of the system. Impact: Removing the GNOME Display manager will remove the Graphical User Interface (GUI) from the system.",
    "audit": "Run the following command and verify gdm3 is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' gdm3 gdm3       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to uninstall gdm3: # apt purge gdm3 References: 1. NIST SP 800-53 Rev. 5: CM-11",
    "profile_applicability": "•  Level 2 - Server",
    "impact": "Removing the GNOME Display manager will remove the Graphical User Interface (GUI) from the system.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-11",
    "function_names": [
      "gnome_display_manager_removed",
      "display_manager_gnome_disabled",
      "graphical_login_gnome_disabled",
      "gdm_package_uninstalled",
      "display_manager_service_disabled",
      "graphical_display_manager_removed",
      "gdm_autostart_disabled",
      "display_manager_gnome_uninstalled"
    ]
  },
  {
    "id": "1.8.2",
    "title": "Ensure GDM login banner is configured",
    "assessment": "Automated",
    "description": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems.",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place.",
    "audit": "Run the following script to verify that the text banner on the login screen is enabled and set:  #!/usr/bin/env bash { l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done if [ -n \"$l_pkgoutput\" ]; then l_output=\"\" l_output2=\"\" echo -e \"$l_pkgoutput\" # Look for existing settings and set variables if they exist l_gdmfile=\"$(grep -Prils '^\\h*banner-message-enable\\b' /etc/dconf/db/*.d)\" if [ -n \"$l_gdmfile\" ]; then # Set profile name based on dconf db directory ({PROFILE_NAME}.d) l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\" # Check if banner message is enabled if grep -Pisq '^\\h*banner-message-enable=true\\b' \"$l_gdmfile\"; then l_output=\"$l_output\\n - The \\\"banner-message-enable\\\" option is enabled in \\\"$l_gdmfile\\\"\" else l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option is not enabled\" fi l_lsbt=\"$(grep -Pios '^\\h*banner-message-text=.*$' \"$l_gdmfile\")\" if [ -n \"$l_lsbt\" ]; then l_output=\"$l_output\\n - The \\\"banner-message-text\\\" option is set in \\\"$l_gdmfile\\\"\\n - banner-message-text is set to:\\n  - \\\"$l_lsbt\\\"\" else l_output2=\"$l_output2\\n - The \\\"banner-message-text\\\" option is not set\" fi if grep -Pq \"^\\h*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists\" else l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist\" fi if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\" else l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\" fi else l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option isn't configured\" fi else echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n- Audit result:\\n  *** PASS ***\\n\" fi # Report results. If no failures output in l_output2, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to verify that the banner message is enabled and set: #!/usr/bin/env bash { l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done if [ -n \"$l_pkgoutput\" ]; then l_gdmprofile=\"gdm\" # Set this to desired profile name IaW Local site policy l_bmessage=\"'Authorized uses only. All activity may be monitored and reported'\" # Set to desired banner message if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then echo \"Creating profile \\\"$l_gdmprofile\\\"\" echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfile- db:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile fi if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\" mkdir /etc/dconf/db/$l_gdmprofile.d/ fi if ! grep -Piq '^\\h*banner-message-enable\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then echo \"creating gdm keyfile for machine-wide settings\" if ! grep -Piq -- '^\\h*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*; then l_kfile=\"/etc/dconf/db/$l_gdmprofile.d/01-banner-message\" echo -e \"\\n[org/gnome/login-screen]\\nbanner-message-enable=true\" >> \"$l_kfile\" else l_kfile=\"$(grep -Pil -- '^\\h*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*)\" ! grep -Pq '^\\h*\\[org\\/gnome\\/login-screen\\]' \"$l_kfile\" && sed -ri '/^\\s*banner- message-enable/ i\\[org/gnome/login-screen]' \"$l_kfile\" ! grep -Pq '^\\h*banner-message-enable\\h*=\\h*true\\b' \"$l_kfile\" && sed -ri 's/^\\s*(banner-message-enable\\s*=\\s*)(\\S+)(\\s*.*$)/\\1true \\3//' \"$l_kfile\" #           sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\\\nbanner-message-enable=true' \"$l_kfile\" fi fi if ! grep -Piq \"^\\h*banner-message-text=[\\'\\\"]+\\S+\" \"$l_kfile\"; then sed -ri \"/^\\s*banner-message-enable/ a\\banner-message-text=$l_bmessage\" \"$l_kfile\" fi dconf update else echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n - No remediation required\\n\" fi } Note: • There is no character limit for the banner message. gnome-shell autodetects longer stretches of text and enters two column mode. • The banner message cannot be read from an external file. OR  Run the following command to remove the gdm3 package: # apt purge gdm3 Default Value: disabled References: 1. https://help.gnome.org/admin/system-admin-guide/stable/login-banner.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: Additional options and sections may appear in the /etc/dconf/db/gdm.d/01-banner- message file. If a different GUI login service is in use, consult your documentation and apply an equivalent banner. MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations TA0007",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://help.gnome.org/admin/system-admin-guide/stable/login-banner.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: Additional options and sections may appear in the /etc/dconf/db/gdm.d/01-banner- message file. If a different GUI login service is in use, consult your documentation and apply an equivalent banner. MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations TA0007",
    "function_names": [
      "gnome_gdm_banner_configured",
      "gnome_gdm_login_banner_enabled",
      "gnome_display_manager_banner_set",
      "gdm_login_banner_present",
      "gdm_banner_configuration_valid"
    ]
  },
  {
    "id": "1.8.3",
    "title": "Ensure GDM disable-user-list option is enabled",
    "assessment": "Automated",
    "description": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems. The disable-user-list option controls if a list of users is displayed on the login screen",
    "rationale": "Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on.",
    "audit": "Run the following script and to verify that the disable-user-list option is enabled or GNOME isn't installed:  #!/usr/bin/env bash { l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done if [ -n \"$l_pkgoutput\" ]; then output=\"\" output2=\"\" l_gdmfile=\"$(grep -Pril '^\\h*disable-user-list\\h*=\\h*true\\b' /etc/dconf/db)\" if [ -n \"$l_gdmfile\" ]; then output=\"$output\\n - The \\\"disable-user-list\\\" option is enabled in \\\"$l_gdmfile\\\"\" l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\" if grep -Pq \"^\\h*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then output=\"$output\\n - The \\\"$l_gdmprofile\\\" exists\" else output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" doesn't exist\" fi if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then output=\"$output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\" else output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\" fi else output2=\"$output2\\n - The \\\"disable-user-list\\\" option is not enabled\" fi if [ -z \"$output2\" ]; then echo -e \"$l_pkgoutput\\n- Audit result:\\n   *** PASS: ***\\n$output\\n\" else echo -e \"$l_pkgoutput\\n- Audit Result:\\n   *** FAIL: ***\\n$output2\\n\" [ -n \"$output\" ] && echo -e \"$output\\n\" fi else echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n- Audit result:\\n  *** PASS ***\\n\" fi }",
    "remediation": "Run the following script to enable the disable-user-list option: Note: the l_gdm_profile variable in the script can be changed if a different profile name is desired in accordance with local site policy. #!/usr/bin/env bash { l_gdmprofile=\"gdm\" if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then echo \"Creating profile \\\"$l_gdmprofile\\\"\" echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfile- db:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile fi if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\" mkdir /etc/dconf/db/$l_gdmprofile.d/ fi if ! grep -Piq '^\\h*disable-user-list\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then echo \"creating gdm keyfile for machine-wide settings\" if ! grep -Piq -- '^\\h*\\[org\\/gnome\\/login-screen\\]' /etc/dconf/db/$l_gdmprofile.d/*; then echo -e \"\\n[org/gnome/login-screen]\\n# Do not show the user list\\ndisable-user-list=true\" >> /etc/dconf/db/$l_gdmprofile.d/00-login- screen else sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\# Do not show the user list\\ndisable-user-list=true' $(grep -Pil -- '^\\h*\\[org\\/gnome\\/login- screen\\]' /etc/dconf/db/$l_gdmprofile.d/*) fi fi dconf update } Note: When the user profile is created or changed, the user will need to log out and log in again before the changes will be applied. OR Run the following command to remove the GNOME package: # apt purge gdm3 Default Value: false References: 1. https://help.gnome.org/admin/system-admin-guide/stable/login-userlist- disable.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5  Additional Information: If a different GUI login service is in use and required on the system, consult your documentation to disable displaying the user list MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.002, T1078.003, T1087, T1087.001, T1087.002 TA0007 M1028",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://help.gnome.org/admin/system-admin-guide/stable/login-userlist- disable.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5  Additional Information: If a different GUI login service is in use and required on the system, consult your documentation to disable displaying the user list MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.002, T1078.003, T1087, T1087.001, T1087.002 TA0007 M1028",
    "function_names": [
      "gnome_gdm_disable_user_list_enabled",
      "gnome_display_manager_user_list_disabled",
      "gdm_login_screen_user_list_hidden",
      "gnome_gdm_user_enum_protection_enabled",
      "gdm_disable_user_list_setting_enabled"
    ]
  },
  {
    "id": "1.8.4",
    "title": "Ensure GDM screen locks when the user is idle",
    "assessment": "Automated",
    "description": "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time. • idle-delay=uint32 {n} - Number of seconds of inactivity before the screen goes blank • lock-delay=uint32 {n} - Number of seconds after the screen is blank before locking the screen Example key file: # Specify the dconf path [org/gnome/desktop/session] # Number of seconds of inactivity before the screen goes blank # Set to 0 seconds if you want to deactivate the screensaver. idle-delay=uint32 900 # Specify the dconf path [org/gnome/desktop/screensaver] # Number of seconds after the screen is blank before locking the screen lock-delay=uint32 5",
    "rationale": "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.",
    "audit": "Run the following script to verify that the screen locks when the user is idle:  #!/usr/bin/env bash { # Check if GNMOE Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then l_output=\"\" l_output2=\"\" l_idmv=\"900\" # Set for max value for idle-delay in seconds l_ldmv=\"5\" # Set for max value for lock-delay in seconds # Look for idle-delay to determine profile in use, needed for remaining tests l_kfile=\"$(grep -Psril '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/)\" # Determine file containing idle-delay key if [ -n \"$l_kfile\" ]; then # set profile name (This is the name of a dconf database) l_profile=\"$(awk -F'/' '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" #Set the key profile name l_pdbdir=\"/etc/dconf/db/$l_profile.d\" # Set the key file dconf db directory # Confirm that idle-delay exists, includes unit32, and value is between 1 and max value for idle-delay l_idv=\"$(awk -F 'uint32' '/idle-delay/{print $2}' \"$l_kfile\" | xargs)\" if [ -n \"$l_idv\" ]; then [ \"$l_idv\" -gt \"0\" -a \"$l_idv\" -le \"$l_idmv\" ] && l_output=\"$l_output\\n - The \\\"idle-delay\\\" option is set to \\\"$l_idv\\\" seconds in \\\"$l_kfile\\\"\" [ \"$l_idv\" = \"0\" ] && l_output2=\"$l_output2\\n - The \\\"idle- delay\\\" option is set to \\\"$l_idv\\\" (disabled) in \\\"$l_kfile\\\"\" [ \"$l_idv\" -gt \"$l_idmv\" ] && l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option is set to \\\"$l_idv\\\" seconds (greater than $l_idmv) in \\\"$l_kfile\\\"\" else l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option is not set in \\\"$l_kfile\\\"\" fi # Confirm that lock-delay exists, includes unit32, and value is between 0 and max value for lock-delay l_ldv=\"$(awk -F 'uint32' '/lock-delay/{print $2}' \"$l_kfile\" | xargs)\" if [ -n \"$l_ldv\" ]; then [ \"$l_ldv\" -ge \"0\" -a \"$l_ldv\" -le \"$l_ldmv\" ] && l_output=\"$l_output\\n - The \\\"lock-delay\\\" option is set to \\\"$l_ldv\\\"  seconds in \\\"$l_kfile\\\"\" [ \"$l_ldv\" -gt \"$l_ldmv\" ] && l_output2=\"$l_output2\\n - The \\\"lock-delay\\\" option is set to \\\"$l_ldv\\\" seconds (greater than $l_ldmv) in \\\"$l_kfile\\\"\" else l_output2=\"$l_output2\\n - The \\\"lock-delay\\\" option is not set in \\\"$l_kfile\\\"\" fi # Confirm that dconf profile exists if grep -Psq \"^\\h*system-db:$l_profile\" /etc/dconf/profile/*; then l_output=\"$l_output\\n - The \\\"$l_profile\\\" profile exists\" else l_output2=\"$l_output2\\n - The \\\"$l_profile\\\" doesn't exist\" fi # Confirm that dconf profile database file exists if [ -f \"/etc/dconf/db/$l_profile\" ]; then l_output=\"$l_output\\n - The \\\"$l_profile\\\" profile exists in the dconf database\" else l_output2=\"$l_output2\\n - The \\\"$l_profile\\\" profile doesn't exist in the dconf database\" fi else l_output2=\"$l_output2\\n - The \\\"idle-delay\\\" option doesn't exist, remaining tests skipped\" fi else l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # Report results. If no failures output in l_output2, we pass [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi } Note: • idle-delay=uint32 Should be 900 seconds (15 minutes) or less, not 0 (disabled) and follow local site policy • lock-delay=uint32 should be 5 seconds or less and follow local site policy",
    "remediation": "Create or edit a file in the /etc/dconf/profile/ and verify it includes the following: user-db:user system-db:{NAME_OF_DCONF_DATABASE} Note: local is the name of a dconf database used in the examples. Example: # echo -e '\\nuser-db:user\\nsystem-db:local' >> /etc/dconf/profile/user Create the directory /etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/ if it doesn't already exist: Example: # mkdir /etc/dconf/db/local.d Create the key file `/etc/dconf/db/{NAME_OF_DCONF_DATABASE}.d/{FILE_NAME} to provide information for the {NAME_OF_DCONF_DATABASE} database: Example script: #!/usr/bin/env bash { l_key_file=\"/etc/dconf/db/local.d/00-screensaver\" l_idmv=\"900\" # Set max value for idle-delay in seconds (between 1 and 900) l_ldmv=\"5\" # Set max value for lock-delay in seconds (between 0 and 5) { echo '# Specify the dconf path' echo '[org/gnome/desktop/session]' echo '' echo '# Number of seconds of inactivity before the screen goes blank' echo '# Set to 0 seconds if you want to deactivate the screensaver.' echo \"idle-delay=uint32 $l_idmv\" echo '' echo '# Specify the dconf path' echo '[org/gnome/desktop/screensaver]' echo '' echo '# Number of seconds after the screen is blank before locking the screen' echo \"lock-delay=uint32 $l_ldmv\" } > \"$l_key_file\" } Note: You must include the uint32 along with the integer key values as shown. Run the following command to update the system databases: # dconf update Note: Users must log out and back in again before the system-wide settings take effect.   References: 1. https://help.gnome.org/admin/system-admin-guide/stable/desktop- lockscreen.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://help.gnome.org/admin/system-admin-guide/stable/desktop- lockscreen.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "gnome_session_idle_lock_enabled",
      "gnome_session_idle_delay_configured",
      "gnome_screensaver_lock_delay_configured",
      "gnome_session_idle_delay_within_limit",
      "gnome_screensaver_lock_delay_within_limit",
      "gnome_session_idle_lock_settings_valid",
      "gnome_screensaver_lock_settings_valid"
    ]
  },
  {
    "id": "1.8.5",
    "title": "Ensure GDM screen locks cannot be overridden",
    "assessment": "Automated",
    "description": "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time. By using the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory. Example Lock File: # Lock desktop screensaver settings /org/gnome/desktop/session/idle-delay /org/gnome/desktop/screensaver/lock-delay",
    "rationale": "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended. Without locking down the system settings, user settings take precedence over the system settings.",
    "audit": "Run the following script to verify that the screen lock can not be overridden: #!/usr/bin/env bash { # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then l_output=\"\" l_output2=\"\" # Look for idle-delay to determine profile in use, needed for remaining tests l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*lock-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Prilq '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\"; then l_output=\"$l_output\\n - \\\"idle-delay\\\" is locked in \\\"$(grep -Pril '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\")\\\"\" else l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not locked\" fi else l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not set so it can not be locked\" fi if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Prilq '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\"; then l_output=\"$l_output\\n - \\\"lock-delay\\\" is locked in \\\"$(grep -Pril '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\")\\\"\" else l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not locked\" fi else l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not set so it can not be locked\" fi else l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # Report results. If no failures output in l_output2, we pass [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to ensure screen locks can not be overridden:  #!/usr/bin/env bash { # Check if GNMOE Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"y\" && echo -e \"\\n - Package: \\\"$l_pn\\\" exists on the system\\n - remediating configuration if needed\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then # Look for idle-delay to determine profile in use, needed for remaining tests l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked # Look for lock-delay to determine profile in use, needed for remaining tests l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*lock-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Prilq '^\\h*\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\"; then echo \" - \\\"idle-delay\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' \"$l_kfd\")\\\"\" else echo \"creating entry to lock \\\"idle-delay\\\"\" [ ! -d \"$l_kfd\"/locks ] && echo \"creating directory $l_kfd/locks\" && mkdir \"$l_kfd\"/locks { echo -e '\\n# Lock desktop screensaver idle-delay setting' echo '/org/gnome/desktop/session/idle-delay' } >> \"$l_kfd\"/locks/00-screensaver fi else echo -e \" - \\\"idle-delay\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM screen locks when the user is idle\\\" and follow this Recommendation again\" fi if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Prilq '^\\h*\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\"; then echo \" - \\\"lock-delay\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' \"$l_kfd2\")\\\"\" else echo \"creating entry to lock \\\"lock-delay\\\"\" [ ! -d \"$l_kfd2\"/locks ] && echo \"creating directory $l_kfd2/locks\" && mkdir \"$l_kfd2\"/locks { echo -e '\\n# Lock desktop screensaver lock-delay setting' echo '/org/gnome/desktop/screensaver/lock-delay' } >> \"$l_kfd2\"/locks/00-screensaver fi else echo -e \" - \\\"lock-delay\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM screen locks when the user is idle\\\" and follow this Recommendation again\" fi else echo -e \" - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi } Run the following command to update the system databases:  # dconf update Note: Users must log out and back in again before the system-wide settings take effect. References: 1. https://help.gnome.org/admin/system-admin-guide/stable/desktop- lockscreen.html.en 2. https://help.gnome.org/admin/system-admin-guide/stable/dconf-lockdown.html.en 3. NIST SP 800-53 Rev. 5: CM-11",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://help.gnome.org/admin/system-admin-guide/stable/desktop- lockscreen.html.en 2. https://help.gnome.org/admin/system-admin-guide/stable/dconf-lockdown.html.en 3. NIST SP 800-53 Rev. 5: CM-11",
    "function_names": [
      "gnome_screen_lock_override_disabled",
      "gnome_gdm_lockdown_enabled",
      "gnome_idle_lock_settings_immutable",
      "gnome_screensaver_lock_delay_fixed",
      "gnome_dconf_lockdown_applied",
      "gnome_session_idle_delay_locked",
      "gnome_screensaver_settings_protected",
      "gnome_lockdown_mode_enabled"
    ]
  },
  {
    "id": "1.8.6",
    "title": "Ensure GDM automatic mounting of removable media is disabled",
    "assessment": "Automated",
    "description": "By default GNOME automatically mounts removable media when inserted as a convenience to the user.",
    "rationale": "With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves. Impact: The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting.",
    "audit": "Run the following script to verify automatic mounting is disabled:  #!/usr/bin/env bash { l_pkgoutput=\"\" l_output=\"\" l_output2=\"\" # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then echo -e \"$l_pkgoutput\" # Look for existing settings and set variables if they exist l_kfile=\"$(grep -Prils -- '^\\h*automount\\b' /etc/dconf/db/*.d)\" l_kfile2=\"$(grep -Prils -- '^\\h*automount-open\\b' /etc/dconf/db/*.d)\" # Set profile name based on dconf db directory ({PROFILE_NAME}.d) if [ -f \"$l_kfile\" ]; then l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" elif [ -f \"$l_kfile2\" ]; then l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile2\")\" fi # If the profile name exist, continue checks if [ -n \"$l_gpname\" ]; then l_gpdir=\"/etc/dconf/db/$l_gpname.d\" # Check if profile file exists if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then l_output=\"$l_output\\n - dconf database profile file \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\" exists\" else l_output2=\"$l_output2\\n - dconf database profile isn't set\" fi # Check if the dconf database file exists if [ -f \"/etc/dconf/db/$l_gpname\" ]; then l_output=\"$l_output\\n - The dconf database \\\"$l_gpname\\\" exists\" else l_output2=\"$l_output2\\n - The dconf database \\\"$l_gpname\\\" doesn't exist\" fi # check if the dconf database directory exists if [ -d \"$l_gpdir\" ]; then l_output=\"$l_output\\n - The dconf directory \\\"$l_gpdir\\\" exitst\" else l_output2=\"$l_output2\\n - The dconf directory \\\"$l_gpdir\\\" doesn't exist\" fi  # check automount setting if grep -Pqrs -- '^\\h*automount\\h*=\\h*false\\b' \"$l_kfile\"; then l_output=\"$l_output\\n - \\\"automount\\\" is set to false in: \\\"$l_kfile\\\"\" else l_output2=\"$l_output2\\n - \\\"automount\\\" is not set correctly\" fi # check automount-open setting if grep -Pqs -- '^\\h*automount-open\\h*=\\h*false\\b' \"$l_kfile2\"; then l_output=\"$l_output\\n - \\\"automount-open\\\" is set to false in: \\\"$l_kfile2\\\"\" else l_output2=\"$l_output2\\n - \\\"automount-open\\\" is not set correctly\" fi else # Setings don't exist. Nothing further to check l_output2=\"$l_output2\\n - neither \\\"automount\\\" or \\\"automount- open\\\" is set\" fi else l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # Report results. If no failures output in l_output2, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable automatic mounting of media for all GNOME users:  #!/usr/bin/env bash { l_pkgoutput=\"\" l_output=\"\" l_output2=\"\" l_gpname=\"local\" # Set to desired dconf profile name (defaule is local) # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done echo -e \"$l_packageout\" # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then echo -e \"$l_pkgoutput\" # Look for existing settings and set variables if they exist l_kfile=\"$(grep -Prils -- '^\\h*automount\\b' /etc/dconf/db/*.d)\" l_kfile2=\"$(grep -Prils -- '^\\h*automount-open\\b' /etc/dconf/db/*.d)\" # Set profile name based on dconf db directory ({PROFILE_NAME}.d) if [ -f \"$l_kfile\" ]; then l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" echo \" - updating dconf profile name to \\\"$l_gpname\\\"\" elif [ -f \"$l_kfile2\" ]; then l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile2\")\" echo \" - updating dconf profile name to \\\"$l_gpname\\\"\" fi # check for consistency (Clean up configuration if needed) if [ -f \"$l_kfile\" ] && [ \"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" != \"$l_gpname\" ]; then sed -ri \"/^\\s*automount\\s*=/s/^/# /\" \"$l_kfile\" l_kfile=\"/etc/dconf/db/$l_gpname.d/00-media-automount\" fi if [ -f \"$l_kfile2\" ] && [ \"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile2\")\" != \"$l_gpname\" ]; then sed -ri \"/^\\s*automount-open\\s*=/s/^/# /\" \"$l_kfile2\" fi [ -z \"$l_kfile\" ] && l_kfile=\"/etc/dconf/db/$l_gpname.d/00-media- automount\" # Check if profile file exists if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then echo -e \"\\n - dconf database profile exists in: \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\"\" else [ ! -f \"/etc/dconf/profile/user\" ] && l_gpfile=\"/etc/dconf/profile/user\" || l_gpfile=\"/etc/dconf/profile/user2\" echo -e \" - creating dconf database profile\" {  echo -e \"\\nuser-db:user\" echo \"system-db:$l_gpname\" } >> \"$l_gpfile\" fi # create dconf directory if it doesn't exists l_gpdir=\"/etc/dconf/db/$l_gpname.d\" if [ -d \"$l_gpdir\" ]; then echo \" - The dconf database directory \\\"$l_gpdir\\\" exists\" else echo \" - creating dconf database directory \\\"$l_gpdir\\\"\" mkdir \"$l_gpdir\" fi # check automount-open setting if grep -Pqs -- '^\\h*automount-open\\h*=\\h*false\\b' \"$l_kfile\"; then echo \" - \\\"automount-open\\\" is set to false in: \\\"$l_kfile\\\"\" else echo \" - creating \\\"automount-open\\\" entry in \\\"$l_kfile\\\"\" ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\" sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautomount-open=false' \"$l_kfile\" fi # check automount setting if grep -Pqs -- '^\\h*automount\\h*=\\h*false\\b' \"$l_kfile\"; then echo \" - \\\"automount\\\" is set to false in: \\\"$l_kfile\\\"\" else echo \" - creating \\\"automount\\\" entry in \\\"$l_kfile\\\"\" ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\" sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautomount=false' \"$l_kfile\" fi else echo -e \"\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # update dconf database dconf update } OR Run the following command to uninstall the GNOME desktop Manager package: # apt purge gdm3 References: 1. https://access.redhat.com/solutions/20107 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 2 - Workstation",
    "impact": "The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting.",
    "references": "1. https://access.redhat.com/solutions/20107 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "gnome_removable_media_auto_mount_disabled",
      "gnome_gdm_auto_mount_disabled",
      "gdm_removable_media_mount_disabled",
      "gnome_automount_removable_media_disabled",
      "gnome_media_automount_disabled"
    ]
  },
  {
    "id": "1.8.7",
    "title": "Ensure GDM disabling automatic mounting of removable media is not overridden",
    "assessment": "Automated",
    "description": "By default GNOME automatically mounts removable media when inserted as a convenience to the user By using the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory. Example Lock File: # Lock desktop screensaver settings /org/gnome/desktop/media-handling/automount /org/gnome/desktop/media-handling/automount-open",
    "rationale": "With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves. Impact: The use of portable hard drives is very common for workstation users",
    "audit": "Run the following script to verify disable automatic mounting is locked:  #!/usr/bin/env bash { # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then l_output=\"\" l_output2=\"\" # Look for idle-delay to determine profile in use, needed for remaining tests l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*automount\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*automount-open\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Piq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\"; then l_output=\"$l_output\\n - \\\"automount\\\" is locked in \\\"$(grep -Pil '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\")\\\"\" else l_output2=\"$l_output2\\n - \\\"automount\\\" is not locked\" fi else l_output2=\"$l_output2\\n - \\\"automount\\\" is not set so it can not be locked\" fi if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Piq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\"; then l_output=\"$l_output\\n - \\\"lautomount-open\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\")\\\"\" else l_output2=\"$l_output2\\n - \\\"automount-open\\\" is not locked\" fi else l_output2=\"$l_output2\\n - \\\"automount-open\\\" is not set so it can not be locked\" fi else l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # Report results. If no failures output in l_output2, we pass [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to lock disable automatic mounting of media for all GNOME users:  #!/usr/bin/env bash { # Check if GNMOE Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space seporated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"y\" && echo -e \"\\n - Package: \\\"$l_pn\\\" exists on the system\\n - remediating configuration if needed\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then # Look for automount to determine profile in use, needed for remaining tests l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*automount\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked # Look for automount-open to determine profile in use, needed for remaining tests l_kfd2=\"/etc/dconf/db/$(grep -Psril '^\\h*automount-open\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount\\b' \"$l_kfd\"; then echo \" - \\\"automount\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media- handling\\/automount\\b' \"$l_kfd\")\\\"\" else echo \" - creating entry to lock \\\"automount\\\"\" [ ! -d \"$l_kfd\"/locks ] && echo \"creating directory $l_kfd/locks\" && mkdir \"$l_kfd\"/locks { echo -e '\\n# Lock desktop media-handling automount setting' echo '/org/gnome/desktop/media-handling/automount' } >> \"$l_kfd\"/locks/00-media-automount fi else echo -e \" - \\\"automount\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM automatic mounting of removable media is disabled\\\" and follow this Recommendation again\" fi if [ -d \"$l_kfd2\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Priq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\"; then echo \" - \\\"automount-open\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/automount-open\\b' \"$l_kfd2\")\\\"\" else echo \" - creating entry to lock \\\"automount-open\\\"\" [ ! -d \"$l_kfd2\"/locks ] && echo \"creating directory $l_kfd2/locks\" && mkdir \"$l_kfd2\"/locks { echo -e '\\n# Lock desktop media-handling automount-open setting' echo '/org/gnome/desktop/media-handling/automount-open' } >> \"$l_kfd2\"/locks/00-media-automount fi else echo -e \" - \\\"automount-open\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM automatic mounting of removable media is disabled\\\" and follow this Recommendation again\" fi # update dconf database dconf update else echo -e \" - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi }  References: 1. https://help.gnome.org/admin/system-admin-guide/stable/dconf-lockdown.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1091, T1091.000 TA0001, TA0008 M1042",
    "profile_applicability": "•  Level 1 - Server •  Level 2 - Workstation",
    "impact": "The use of portable hard drives is very common for workstation users",
    "references": "1. https://help.gnome.org/admin/system-admin-guide/stable/dconf-lockdown.html.en 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1091, T1091.000 TA0001, TA0008 M1042",
    "function_names": [
      "gnome_media_handling_automount_disabled",
      "gnome_media_handling_automount_open_disabled",
      "gnome_dconf_lockdown_automount_enabled",
      "gnome_media_handling_removable_media_disabled",
      "gnome_dconf_automount_locked",
      "gnome_media_handling_automount_lockdown_enabled",
      "gnome_dconf_automount_open_locked",
      "gnome_media_handling_automount_override_disabled"
    ]
  },
  {
    "id": "1.8.8",
    "title": "Ensure GDM autorun-never is enabled",
    "assessment": "Automated",
    "description": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM.",
    "rationale": "Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.",
    "audit": "Run the following script to verify that autorun-never is set to true for GDM:  #!/usr/bin/env bash { l_pkgoutput=\"\" l_output=\"\" l_output2=\"\" # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space separated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" echo -e \"$l_pkgoutput\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then echo -e \"$l_pkgoutput\" # Look for existing settings and set variables if they exist l_kfile=\"$(grep -Prils -- '^\\h*autorun-never\\b' /etc/dconf/db/*.d)\" # Set profile name based on dconf db directory ({PROFILE_NAME}.d) if [ -f \"$l_kfile\" ]; then l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" fi # If the profile name exist, continue checks if [ -n \"$l_gpname\" ]; then l_gpdir=\"/etc/dconf/db/$l_gpname.d\" # Check if profile file exists if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then l_output=\"$l_output\\n - dconf database profile file \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\" exists\" else l_output2=\"$l_output2\\n - dconf database profile isn't set\" fi # Check if the dconf database file exists if [ -f \"/etc/dconf/db/$l_gpname\" ]; then l_output=\"$l_output\\n - The dconf database \\\"$l_gpname\\\" exists\" else l_output2=\"$l_output2\\n - The dconf database \\\"$l_gpname\\\" doesn't exist\" fi # check if the dconf database directory exists if [ -d \"$l_gpdir\" ]; then l_output=\"$l_output\\n - The dconf directory \\\"$l_gpdir\\\" exitst\" else l_output2=\"$l_output2\\n - The dconf directory \\\"$l_gpdir\\\" doesn't exist\" fi # check autorun-never setting if grep -Pqrs -- '^\\h*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then l_output=\"$l_output\\n - \\\"autorun-never\\\" is set to true in:  \\\"$l_kfile\\\"\" else l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set correctly\" fi else # Settings don't exist. Nothing further to check l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set\" fi else l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # Report results. If no failures output in l_output2, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to set autorun-never to true for GDM users:  #!/usr/bin/env bash { l_pkgoutput=\"\" l_output=\"\" l_output2=\"\" l_gpname=\"local\" # Set to desired dconf profile name (default is local) # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space separated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done echo -e \"$l_pkgoutput\" # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then echo -e \"$l_pkgoutput\" # Look for existing settings and set variables if they exist l_kfile=\"$(grep -Prils -- '^\\h*autorun-never\\b' /etc/dconf/db/*.d)\" # Set profile name based on dconf db directory ({PROFILE_NAME}.d) if [ -f \"$l_kfile\" ]; then l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_kfile\")\" echo \" - updating dconf profile name to \\\"$l_gpname\\\"\" fi [ ! -f \"$l_kfile\" ] && l_kfile=\"/etc/dconf/db/$l_gpname.d/00-media- autorun\" # Check if profile file exists if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then echo -e \"\\n - dconf database profile exists in: \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\"\" else [ ! -f \"/etc/dconf/profile/user\" ] && l_gpfile=\"/etc/dconf/profile/user\" || l_gpfile=\"/etc/dconf/profile/user2\" echo -e \" - creating dconf database profile\" { echo -e \"\\nuser-db:user\" echo \"system-db:$l_gpname\" } >> \"$l_gpfile\" fi # create dconf directory if it doesn't exists l_gpdir=\"/etc/dconf/db/$l_gpname.d\" if [ -d \"$l_gpdir\" ]; then echo \" - The dconf database directory \\\"$l_gpdir\\\" exists\" else echo \" - creating dconf database directory \\\"$l_gpdir\\\"\" mkdir \"$l_gpdir\" fi # check autorun-never setting if grep -Pqs -- '^\\h*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then echo \" - \\\"autorun-never\\\" is set to true in: \\\"$l_kfile\\\"\"  else echo \" - creating or updating \\\"autorun-never\\\" entry in \\\"$l_kfile\\\"\" if grep -Psq -- '^\\h*autorun-never' \"$l_kfile\"; then sed -ri 's/(^\\s*autorun-never\\s*=\\s*)(\\S+)(\\s*.*)$/\\1true \\3/' \"$l_kfile\" else ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\" sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\\\nautorun-never=true' \"$l_kfile\" fi fi else echo -e \"\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # update dconf database dconf update } Default Value: false References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "gnome_gdm_autorun_never_enabled",
      "gnome_display_manager_autorun_disabled",
      "gdm_autorun_never_setting_enabled",
      "desktop_gdm_autorun_protection_enabled",
      "gdm_autorun_security_setting_enabled"
    ]
  },
  {
    "id": "1.8.9",
    "title": "Ensure GDM autorun-never is not overridden",
    "assessment": "Automated",
    "description": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM. By using the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory. Example Lock File: # Lock desktop media-handling settings /org/gnome/desktop/media-handling/autorun-never",
    "rationale": "Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.",
    "audit": "Run the following script to verify that autorun-never=true cannot be overridden:  #!/usr/bin/env bash { # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space separated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then l_output=\"\" l_output2=\"\" # Look for idle-delay to determine profile in use, needed for remaining tests l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*autorun-never\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Prisq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun- never\\b' \"$l_kfd\"; then l_output=\"$l_output\\n - \\\"autorun-never\\\" is locked in \\\"$(grep - Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun-never\\b' \"$l_kfd\")\\\"\" else l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not locked\" fi else l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set so it can not be locked\" fi else l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi # Report results. If no failures output in l_output2, we pass [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to ensure that autorun-never=true cannot be overridden:  #!/usr/bin/env bash { # Check if GNOME Desktop Manager is installed.  If package isn't installed, recommendation is Not Applicable\\n # determine system's package manager l_pkgoutput=\"\" if command -v dpkg-query > /dev/null 2>&1; then l_pq=\"dpkg-query -W\" elif command -v rpm > /dev/null 2>&1; then l_pq=\"rpm -q\" fi # Check if GDM is installed l_pcl=\"gdm gdm3\" # Space separated list of packages to check for l_pn in $l_pcl; do $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"y\" && echo -e \"\\n - Package: \\\"$l_pn\\\" exists on the system\\n - remediating configuration if needed\" done # Check configuration (If applicable) if [ -n \"$l_pkgoutput\" ]; then # Look for autorun to determine profile in use, needed for remaining tests l_kfd=\"/etc/dconf/db/$(grep -Psril '^\\h*autorun-never\\b' /etc/dconf/db/*/ | awk -F'/' '{split($(NF-1),a,\".\");print a[1]}').d\" #set directory of key file to be locked if [ -d \"$l_kfd\" ]; then # If key file directory doesn't exist, options can't be locked if grep -Prisq '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun- never\\b' \"$l_kfd\"; then echo \" - \\\"autorun-never\\\" is locked in \\\"$(grep -Pril '^\\h*\\/org/gnome\\/desktop\\/media-handling\\/autorun-never\\b' \"$l_kfd\")\\\"\" else echo \" - creating entry to lock \\\"autorun-never\\\"\" [ ! -d \"$l_kfd\"/locks ] && echo \"creating directory $l_kfd/locks\" && mkdir \"$l_kfd\"/locks { echo -e '\\n# Lock desktop media-handling autorun-never setting' echo '/org/gnome/desktop/media-handling/autorun-never' } >> \"$l_kfd\"/locks/00-media-autorun fi else echo -e \" - \\\"autorun-never\\\" is not set so it can not be locked\\n - Please follow Recommendation \\\"Ensure GDM autorun-never is enabled\\\" and follow this Recommendation again\" fi # update dconf database dconf update else echo -e \" - GNOME Desktop Manager package is not installed on the system\\n  - Recommendation is not applicable\" fi }   References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "gnome_gdm_autorun_never_locked",
      "gnome_desktop_media_handling_autorun_disabled",
      "gnome_dconf_lockdown_autorun_restricted",
      "gnome_gdm_lockdown_autorun_never_enforced",
      "gnome_media_handling_autorun_never_locked"
    ]
  },
  {
    "id": "1.8.10",
    "title": "Ensure XDCMP is not enabled",
    "assessment": "Automated",
    "description": "X Display Manager Control Protocol (XDMCP) is designed to provide authenticated access to display management services for remote displays",
    "rationale": "XDMCP is inherently insecure. • XDMCP is not a ciphered protocol. This may allow an attacker to capture keystrokes entered by a user • XDMCP is vulnerable to man-in-the-middle attacks. This may allow an attacker to steal the credentials of legitimate users by impersonating the XDMCP server.",
    "audit": "Run the following command and verify the output: # grep -Eis '^\\s*Enable\\s*=\\s*true' /etc/gdm3/custom.conf Nothing should be returned",
    "remediation": "Edit the file /etc/gdm3/custom.conf and remove the line: Enable=true Default Value: false (This is denoted by no Enabled= entry in the file /etc/gdm3/custom.conf in the [xdmcp] section References: 1. NIST SP 800-53 Rev. 5: SI-4",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-4",
    "function_names": [
      "compute_instance_xdmcp_disabled",
      "compute_display_manager_xdmcp_disabled",
      "compute_xserver_xdmcp_disabled",
      "compute_x11_xdmcp_disabled",
      "compute_remote_display_xdmcp_disabled"
    ]
  },
  {
    "id": "2.1.1.1",
    "title": "Ensure a single time synchronization daemon is in use",
    "assessment": "Automated",
    "description": "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them. Note: • On virtual systems where host based time synchronization is available consult your virtualization software documentation and verify that host based synchronization is in use and follows local site policy. In this scenario, this section should be skipped • Only one time synchronization method should be in use on the system. Configuring multiple time synchronization methods could lead to unexpected or unreliable results",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and ensures log files have consistent time records across the enterprise, which aids in forensic investigations.",
    "audit": "On physical systems, and virtual systems where host based time synchronization is not available. One of the three time synchronization daemons should be available; chrony , systemd- timesyncd , or ntp Run the following script to verify that a single time synchronization daemon is available on the system: #!/usr/bin/env bash { output=\"\" l_tsd=\"\" l_sdtd=\"\" chrony=\"\" l_ntp=\"\" dpkg-query -W chrony > /dev/null 2>&1 && l_chrony=\"y\" dpkg-query -W ntp > /dev/null 2>&1 && l_ntp=\"y\" || l_ntp=\"\" systemctl list-units --all --type=service | grep -q 'systemd- timesyncd.service' && systemctl is-enabled systemd-timesyncd.service | grep - q 'enabled' && l_sdtd=\"y\" if [[ \"$l_chrony\" = \"y\" && \"$l_ntp\" != \"y\" && \"$l_sdtd\" != \"y\" ]]; then l_tsd=\"chrony\" output=\"$output\\n- chrony is in use on the system\" elif [[ \"$l_chrony\" != \"y\" && \"$l_ntp\" = \"y\" && \"$l_sdtd\" != \"y\" ]]; then l_tsd=\"ntp\" output=\"$output\\n- ntp is in use on the system\" elif [[ \"$l_chrony\" != \"y\" && \"$l_ntp\" != \"y\" ]]; then if systemctl list-units --all --type=service | grep -q 'systemd- timesyncd.service' && systemctl is-enabled systemd-timesyncd.service | grep - Eq '(enabled|disabled|masked)'; then l_tsd=\"sdtd\" output=\"$output\\n- systemd-timesyncd is in use on the system\" fi else [[ \"$l_chrony\" = \"y\" && \"$l_ntp\" = \"y\" ]] && output=\"$output\\n- both chrony and ntp are in use on the system\" [[ \"$l_chrony\" = \"y\" && \"$l_sdtd\" = \"y\" ]] && output=\"$output\\n- both chrony and systemd-timesyncd are in use on the system\" [[ \"$l_ntp\" = \"y\" && \"$l_sdtd\" = \"y\" ]] && output=\"$output\\n- both ntp and systemd-timesyncd are in use on the system\" fi if [ -n \"$l_tsd\" ]; then echo -e \"\\n- PASS:\\n$output\\n\" else echo -e \"\\n- FAIL:\\n$output\\n\" fi } NOTE: Follow the guidance in the subsection for the time synchronization daemon available on the system and skip the other two time synchronization daemon subsections.",
    "remediation": "On physical systems, and virtual systems where host based time synchronization is not available. Select one of the three time synchronization daemons; chrony (1) , systemd-timesyncd (2) , or ntp (3) , and following the remediation procedure for the selected daemon. Note: enabling more than one synchronization daemon could lead to unexpected or unreliable results: 1. chrony Run the following command to install chrony: # apt install chrony Run the following commands to stop and mask the systemd-timesyncd daemon: # systemctl stop systemd-timesyncd.service # systemctl --now mask systemd-timesyncd.service Run the following command to remove the ntp package: # apt purge ntp NOTE: • Subsection: Configure chrony should be followed • Subsections: Configure systemd-timesyncd and Configure ntp should be skipped 2. systemd-timesyncd Run the following command to remove the chrony package: # apt purge chrony Run the following command to remove the ntp package: # apt purge ntp NOTE: • Subsection: Configure systemd-timesyncd should be followed • Subsections: Configure chrony and Configure ntp should be skipped   3. ntp Run the following command to install ntp: # apt install ntp Run the following commands to stop and mask the systemd-timesyncd daemon: # systemctl stop systemd-timesyncd.service # systemctl --now mask systemd-timesyncd.service Run the following command to remove the chrony package: # apt purge chrony NOTE: • Subsection: Configure ntp should be followed • Subsections: Configure chrony and Configure systemd-timesyncd should be skipped References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12",
    "function_names": [
      "system_time_sync_single_daemon",
      "system_time_sync_authoritative_server",
      "system_time_sync_host_based_enabled",
      "system_time_sync_method_single",
      "system_time_sync_no_multiple_methods"
    ]
  },
  {
    "id": "2.1.2.1",
    "title": "Ensure chrony is configured with authorized timeserver",
    "assessment": "Manual",
    "description": "• server o The server directive specifies an NTP server which can be used as a time source. The client-server relationship is strictly hierarchical: a client might synchronize its system time to that of the server, but the server’s system time will never be influenced by that of a client. o This directive can be used multiple times to specify multiple servers. o The directive is immediately followed by either the name of the server, or its IP address. • pool o The syntax of this directive is similar to that for the server directive, except that it is used to specify a pool of NTP servers rather than a single NTP server. The pool name is expected to resolve to multiple addresses which might change over time. o This directive can be used multiple times to specify multiple pools. o All options valid in the server directive can be used in this directive too.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit": "IF chrony is in use on the system, run the following command to display the server and/or pool directive: # grep -Pr --include=*.{sources,conf} '^\\h*(server|pool)\\h+\\H+' /etc/chrony/ Verify that at least one pool line and/or at least three server lines are returned, and the timeserver on the returned lines follows local site policy Output examples: pool directive: pool time.nist.gov iburst maxsources 4 #The maxsources option is unique to the pool directive server directive: server time-a-g.nist.gov iburst server 132.163.97.3 iburst server time-d-b.nist.gov iburst",
    "remediation": "Edit /etc/chrony/chrony.conf or a file ending in .sources in /etc/chrony/sources.d/ and add or edit server or pool lines as appropriate according to local site policy: <[server|pool]> <[remote-server|remote-pool]> Examples: pool directive: pool time.nist.gov iburst maxsources 4 #The maxsources option is unique to the pool directive server directive: server time-a-g.nist.gov iburst server 132.163.97.3 iburst server time-d-b.nist.gov iburst Run one of the following commands to load the updated time sources into chronyd running config: # systemctl restart chronyd - OR if sources are in a .sources file - # chronyc reload sources OR If another time synchronization service is in use on the system, run the following command to remove chrony from the system: # apt purge chrony References: 1. chrony.conf(5) Manual Page 2. https://tf.nist.gov/tf-cgi/servers.cgi 3. NIST SP 800-53 Rev. 5: AU-3, AU-12 Additional Information: If pool and/or server directive(s) are set in a sources file in /etc/chrony/sources.d, the line: sourcedir /etc/chrony/sources.d must be present in /etc/chrony/chrony.conf",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. chrony.conf(5) Manual Page 2. https://tf.nist.gov/tf-cgi/servers.cgi 3. NIST SP 800-53 Rev. 5: AU-3, AU-12 Additional Information: If pool and/or server directive(s) are set in a sources file in /etc/chrony/sources.d, the line: sourcedir /etc/chrony/sources.d must be present in /etc/chrony/chrony.conf",
    "function_names": [
      "chrony_server_authorized_timeserver_configured",
      "chrony_pool_authorized_timeserver_configured",
      "chrony_server_ntp_hierarchical_configured",
      "chrony_pool_ntp_hierarchical_configured",
      "chrony_server_multiple_servers_configured",
      "chrony_pool_multiple_servers_configured",
      "chrony_server_valid_options_configured",
      "chrony_pool_valid_options_configured"
    ]
  },
  {
    "id": "2.1.2.2",
    "title": "Ensure chrony is running as user _chrony",
    "assessment": "Automated",
    "description": "The chrony package is installed with a dedicated user account _chrony. This account is granted the access required by the chronyd service",
    "rationale": "The chronyd service should run with only the required privlidges",
    "audit": "IF chrony is in use on the system, run the following command to verify the chronyd service is being run as the _chrony user: # ps -ef | awk '(/[c]hronyd/ && $1!=\"_chrony\") { print $1 }' Nothing should be returned",
    "remediation": "Add or edit the user line to /etc/chrony/chrony.conf or a file ending in .conf in /etc/chrony/conf.d/: user _chrony OR If another time synchronization service is in use on the system, run the following command to remove chrony from the system: # apt purge chrony Default Value: user _chrony References: 1. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "chrony_service_user_chrony",
      "chrony_service_user_chrony_running",
      "chrony_service_user_chrony_configured",
      "chrony_service_user_chrony_access",
      "chrony_service_user_chrony_privileges",
      "chrony_service_user_chrony_account",
      "chrony_service_user_chrony_ownership",
      "chrony_service_user_chrony_permissions"
    ]
  },
  {
    "id": "2.1.2.3",
    "title": "Ensure chrony is enabled and running",
    "assessment": "Automated",
    "description": "chrony is a daemon for synchronizing the system clock across the network",
    "rationale": "chrony needs to be enabled and running in order to synchronize the system to a timeserver. Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit": "IF chrony is in use on the system, run the following commands: Run the following command to verify that the chrony service is enabled: # systemctl is-enabled chrony.service enabled Run the following command to verify that the chrony service is active: # systemctl is-active chrony.service active",
    "remediation": "IF chrony is in use on the system, run the following commands: Run the following command to unmask chrony.service: # systemctl unmask chrony.service Run the following command to enable and start chrony.service: # systemctl --now enable chrony.service OR If another time synchronization service is in use on the system, run the following command to remove chrony: # apt purge chrony References: 1. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "compute_time_sync_chrony_enabled",
      "compute_time_sync_chrony_running",
      "compute_time_sync_chrony_configured",
      "compute_time_sync_chrony_service_active",
      "compute_time_sync_chrony_network_synced"
    ]
  },
  {
    "id": "2.1.3.1",
    "title": "Ensure systemd-timesyncd configured with authorized timeserver",
    "assessment": "Automated",
    "description": "NTP= • A space-separated list of NTP server host names or IP addresses. During runtime this list is combined with any per-interface NTP servers acquired from systemd-networkd.service(8). systemd-timesyncd will contact all configured system or per-interface servers in turn, until one responds. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. This setting defaults to an empty list. FallbackNTP= • A space-separated list of NTP server host names or IP addresses to be used as the fallback NTP servers. Any per-interface NTP servers obtained from systemd- networkd.service(8) take precedence over this setting, as do any servers set via NTP= above. This setting is hence only relevant if no other NTP server information is known. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. If this option is not given, a compiled-in list of NTP servers is used.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit": "IF systemd-timesyncd is in use on the system, run the following command: # grep -Ph '^\\h*(NTP|FallbackNTP)=\\H+' /etc/systemd/timesyncd.conf Verify that NTP=<space_separated_list_of_servers> and/or FallbackNTP=<space_separated_list_of_servers> is returned and that the time server(s) shown follows local site policy Example Output: /etc/systemd/timesyncd.conf:NTP=time.nist.gov /etc/systemd/timesyncd.conf:FallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov",
    "remediation": "Edit /etc/systemd/timesyncd.conf and add the NTP= and/or FallbackNTP= lines to the [Time] section: Example: [Time] NTP=time.nist.gov # Uses the generic name for NIST's time servers -AND/OR- FallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov # Space separated list of NIST time servers Note: Servers added to these line(s) should follow local site policy. NIST servers are for example. Example script: The following example script will add the example NIST time servers to /etc/systemd/timesyncd.conf #!/usr/bin/env bash { l_ntp_ts=\"time.nist.gov\" l_ntp_fb=\"time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov\" l_conf_file=\"/etc/systemd/timesyncd.conf\" if ! grep -Ph '^\\h*NTP=\\H+' \"$l_conf_file\"; then ! grep -Pqs '^\\h*\\[Time\\]' \"$l_conf_file\" && echo \"[Time]\" >> \"$l_conf_file\" echo \"NTP=$l_ntp_ts\" >> \"$l_conf_file\" fi if ! grep -Ph '^\\h*FallbackNTP=\\H+' \"$l_conf_file\"; then ! grep -Pqs '^\\h*\\[Time\\]' \"$l_conf_file\" && echo \"[Time]\" >> \"$l_conf_file\" echo \"FallbackNTP=$l_ntp_fb\" >> \"$l_conf_file\" fi } Run the following command to reload the systemd-timesyncd configuration:  # systemctl try-reload-or-restart systemd-timesyncd -OR- If another time synchronization service is in use on the system, run the following command to stop and mask systemd-timesyncd: # systemctl --now mask systemd-timesyncd Default Value: #NTP= #FallbackNTP= References: 1. https://www.freedesktop.org/software/systemd/man/timesyncd.conf.html 2. https://tf.nist.gov/tf-cgi/servers.cgi 3. NIST SP 800-53 Rev. 5: AU-7, AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://www.freedesktop.org/software/systemd/man/timesyncd.conf.html 2. https://tf.nist.gov/tf-cgi/servers.cgi 3. NIST SP 800-53 Rev. 5: AU-7, AU-8",
    "function_names": [
      "systemd_timesyncd_ntp_server_authorized",
      "systemd_timesyncd_fallback_ntp_server_authorized",
      "systemd_timesyncd_ntp_server_configured",
      "systemd_timesyncd_fallback_ntp_server_configured",
      "systemd_timesyncd_ntp_server_default_denied",
      "systemd_timesyncd_fallback_ntp_server_default_denied"
    ]
  },
  {
    "id": "2.1.3.2",
    "title": "Ensure systemd-timesyncd is enabled and running",
    "assessment": "Manual",
    "description": "systemd-timesyncd is a daemon that has been added for synchronizing the system clock across the network",
    "rationale": "systemd-timesyncd needs to be enabled and running in order to synchronize the system to a timeserver. Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit": "IF systemd-timesyncd is in use on the system, run the following commands: Run the following command to verify that the systemd-timesyncd service is enabled: # systemctl is-enabled systemd-timesyncd.service enabled Run the following command to verify that the systemd-timesyncd service is active: # systemctl is-active systemd-timesyncd.service active",
    "remediation": "IF systemd-timesyncd is in use on the system, run the following commands: Run the following command to unmask systemd-timesyncd.service: # systemctl unmask systemd-timesyncd.service Run the following command to enable and start systemd-timesyncd.service: # systemctl --now enable systemd-timesyncd.service OR If another time synchronization service is in use on the system, run the following command to stop and mask systemd-timesyncd: # systemctl --now mask systemd-timesyncd.service References: 1. NIST SP 800-53 Rev. 5: AU-7, AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-7, AU-8",
    "function_names": [
      "systemd_timesyncd_enabled",
      "systemd_timesyncd_running",
      "systemd_timesyncd_configured",
      "systemd_timesyncd_network_sync_enabled",
      "systemd_timesyncd_service_active"
    ]
  },
  {
    "id": "2.1.4.1",
    "title": "Ensure ntp access control is configured",
    "assessment": "Automated",
    "description": "ntp Access Control Commands: restrict address [mask mask] [ippeerlimit int] [flag ...] The address argument expressed in dotted-quad form is the address of a host or network. Alternatively, the address argument can be a valid host DNS name. The mask argument expressed in dotted-quad form defaults to 255.255.255.255, meaning that the address is treated as the address of an individual host. A default entry (address 0.0.0.0, mask 0.0.0.0) is always included and is always the first entry in the list. Note: the text string default, with no mask option, may be used to indicate the default entry. The ippeerlimit directive limits the number of peer requests for each IP to int, where a value of -1 means \"unlimited\", the current default. A value of 0 means \"none\". There would usually be at most 1 peering request per IP, but if the remote peering requests are behind a proxy there could well be more than 1 per IP. In the current implementation, flag always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two categories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server.   One or more of the following flags may be specified: • kod - If this flag is set when an access violation occurs, a kiss-o'-death (KoD) packet is sent. KoD packets are rate limited to no more than one per second. If another KoD packet occurs within one second after the last one, the packet is dropped. • limited - Deny service if the packet spacing violates the lower limits specified in the discard command. A history of clients is kept using the monitoring capability of ntpd. Thus, monitoring is always active as long as there is a restriction entry with the limited flag. • lowpriotrap - Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps. • noepeer - Deny ephemeral peer requests, even if they come from an authenticated source. Note that the ability to use a symmetric key for authentication may be restricted to one or more IPs or subnets via the third field of the ntp.keys file. This restriction is not enabled by default, to maintain backward compatibility. Expect noepeer to become the default in ntp-4.4. • nomodify - Deny ntpq and ntpdc queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted. • noquery - Deny ntpq and ntpdc queries. Time service is not affected. • nopeer - Deny unauthenticated packets which would result in mobilizing a new association. This includes broadcast and symmetric active packets when a configured association does not exist. It also includes pool associations, so if you want to use servers from a pool directive and also want to use nopeer by default, you'll want a restrict source ... line as well that does not include the nopeer directive. • noserve - Deny all packets except ntpq and ntpdc queries. • notrap - Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the ntpq control message protocol which is intended for use by remote event logging programs. • notrust - Deny service unless the packet is cryptographically authenticated. • ntpport - This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both ntpport and non- ntpport may be specified. The ntpport is considered more specific and is sorted later in the list.",
    "rationale": "If ntp is in use on the system, proper configuration is vital to ensuring time synchronization is accurate.",
    "audit": "IF ntp is in use on the system, run the following command to verify the restrict lines: # grep -P -- '^\\h*restrict\\h+((-4\\h+)?|- 6\\h+)default\\h+(?:[^#\\n\\r]+\\h+)*(?!(?:\\2|\\3|\\4|\\5))(\\h*\\bkod\\b\\h*|\\h*\\bnomodi fy\\b\\h*|\\h*\\bnotrap\\b\\h*|\\h*\\bnopeer\\b\\h*|\\h*\\bnoquery\\b\\h*)\\h+(?:[^#\\n\\r]+\\h +)*(?!(?:\\1|\\3|\\4|\\5))(\\h*\\bkod\\b\\h*|\\h*\\bnomodify\\b\\h*|\\h*\\bnotrap\\b\\h*|\\h*\\ bnopeer\\b\\h*|\\h*\\bnoquery\\b\\h*)\\h+(?:[^#\\n\\r]+\\h+)*(?!(?:\\1|\\2|\\4|\\5))(\\h*\\bk od\\b\\h*|\\h*\\bnomodify\\b\\h*|\\h*\\bnotrap\\b\\h*|\\h*\\bnopeer\\b\\h*|\\h*\\bnoquery\\b\\h *)\\h+(?:[^#\\n\\r]+\\h+)*(?!(?:\\1|\\2|\\3|\\5))(\\h*\\bkod\\b\\h*|\\h*\\bnomodify\\b\\h*|\\h *\\bnotrap\\b\\h*|\\h*\\bnopeer\\b\\h*|\\h*\\bnoquery\\b\\h*)\\h+(?:[^#\\n\\r]+\\h+)*(?!(?:\\ 1|\\2|\\3|\\4))(\\h*\\bkod\\b\\h*|\\h*\\bnomodify\\b\\h*|\\h*\\bnotrap\\b\\h*|\\h*\\bnopeer\\b\\ h*|\\h*\\bnoquery\\b\\h*)\\h*(?:\\h+\\H+\\h*)*(?:\\h+#.*)?$' /etc/ntp.conf Output should be similar to: restrict -4 default kod notrap nomodify nopeer noquery restrict -6 default kod notrap nomodify nopeer noquery Verify that the output includes two lines, and both lines include: default, kod, nomodify, notrap, nopeer and noquery. Note: The -4 in the first line is optional, options after default may appear in any order, and additional options may exist.",
    "remediation": "Add or edit restrict lines in /etc/ntp.conf to match the following: restrict -4 default kod nomodify notrap nopeer noquery restrict -6 default kod nomodify notrap nopeer noquery OR If another time synchronization service is in use on the system, run the following command to remove ntp from the system: # apt purge ntp Default Value: restrict -4 default kod notrap nomodify nopeer noquery limited restrict -6 default kod notrap nomodify nopeer noquery limited References: 1. http://www.ntp.org/ 2. ntp.conf(5) 3. ntpd(8) 4. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. http://www.ntp.org/ 2. ntp.conf(5) 3. ntpd(8) 4. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "ntp_access_control_restrict_address_configured",
      "ntp_access_control_ippeerlimit_set",
      "ntp_access_control_kod_flag_enabled",
      "ntp_access_control_limited_flag_enabled",
      "ntp_access_control_lowpriotrap_flag_enabled",
      "ntp_access_control_noepeer_flag_enabled",
      "ntp_access_control_nomodify_flag_enabled",
      "ntp_access_control_noquery_flag_enabled",
      "ntp_access_control_nopeer_flag_enabled",
      "ntp_access_control_noserve_flag_enabled",
      "ntp_access_control_notrap_flag_enabled",
      "ntp_access_control_notrust_flag_enabled",
      "ntp_access_control_ntpport_flag_enabled",
      "ntp_access_control_default_entry_configured",
      "ntp_access_control_restrict_mask_configured"
    ]
  },
  {
    "id": "2.1.4.2",
    "title": "Ensure ntp is configured with authorized timeserver",
    "assessment": "Manual",
    "description": "The various modes are determined by the command keyword and the type of the required IP address. Addresses are classed by type as (s) a remote server or peer (IPv4 class A, B and C), (b) the broadcast address of a local interface, (m) a multicast address (IPv4 class D), or (r) a reference clock address (127.127.x.x). Note: That only those options applicable to each command are listed below. Use of options not listed may not be caught as an error, but may result in some weird and even destructive behavior. If the Basic Socket Interface Extensions for IPv6 (RFC-2553) is detected, support for the IPv6 address family is generated in addition to the default support of the IPv4 address family. In a few cases, including the reslist billboard generated by ntpq or ntpdc, IPv6 addresses are automatically generated. IPv6 addresses can be identified by the presence of colons “:” in the address field. IPv6 addresses can be used almost everywhere where IPv4 addresses can be used, with the exception of reference clock addresses, which are always IPv4. Note: In contexts where a host name is expected, a -4 qualifier preceding the host name forces DNS resolution to the IPv4 namespace, while a -6 qualifier forces DNS resolution to the IPv6 namespace. See IPv6 references for the equivalent classes for that address family. • pool - For type s addresses, this command mobilizes a persistent client mode association with a number of remote servers. In this mode the local clock can synchronized to the remote server, but the remote server can never be synchronized to the local clock. • server - For type s and r addresses, this command mobilizes a persistent client mode association with the specified remote server or local radio clock. In this mode the local clock can synchronized to the remote server, but the remote server can never be synchronized to the local clock. This command should not be used for type b or m addresses.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit": "IF ntp is in use on the system, run the following command to display the server and/or pool mode: # grep -P -- '^\\h*(server|pool)\\h+\\H+' /etc/ntp.conf Verify that at least one pool line and/or at least three server lines are returned, and the timeserver on the returned lines follows local site policy Output examples: pool mode: pool time.nist.gov iburst maxsources 4 #The maxsources option is unique to the pool directive server mode: server time-a-g.nist.gov iburst server 132.163.97.3 iburst server time-d-b.nist.gov iburst",
    "remediation": "Edit /etc/ntp.conf and add or edit server or pool lines as appropriate according to local site policy: <[server|pool]> <[remote-server|remote-pool]> Examples: pool mode: pool time.nist.gov iburst server mode: server time-a-g.nist.gov iburst server 132.163.97.3 iburst server time-d-b.nist.gov iburst Run the following command to load the updated time sources into ntp running config: # systemctl restart ntp OR If another time synchronization service is in use on the system, run the following command to remove ntp from the system: # apt purge ntp   References: 1. http://www.ntp.org/ 2. https://tf.nist.gov/tf-cgi/servers.cgi 3. ntp.conf(5) 4. ntpd(8) 5. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. http://www.ntp.org/ 2. https://tf.nist.gov/tf-cgi/servers.cgi 3. ntp.conf(5) 4. ntpd(8) 5. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "ntp_server_authorized_timeserver_configured",
      "ntp_pool_authorized_timeserver_configured",
      "ntp_config_no_unauthorized_servers",
      "ntp_config_ipv4_authorized_only",
      "ntp_config_ipv6_authorized_only",
      "ntp_config_no_broadcast_addresses",
      "ntp_config_no_multicast_addresses",
      "ntp_config_no_reference_clock_misuse",
      "ntp_config_valid_command_keywords",
      "ntp_config_no_weird_options"
    ]
  },
  {
    "id": "2.1.4.3",
    "title": "Ensure ntp is running as user ntp",
    "assessment": "Automated",
    "description": "The ntp package is installed with a dedicated user account ntp. This account is granted the access required by the ntpd daemon Note: • If chrony or systemd-timesyncd are used, ntp should be removed and this section skipped • This recommendation only applies if ntp is in use on the system • Only one time synchronization method should be in use on the system",
    "rationale": "The ntpd daemon should run with only the required privilege",
    "audit": "IF ntp is in use on the system run the following command to verify the ntpd daemon is being run as the user ntp: # ps -ef | awk '(/[n]tpd/ && $1!=\"ntp\") { print $1 }' Nothing should be returned Run the following command to verify the RUNASUSER= is set to ntp in /usr/lib/ntp/ntp- systemd-wrapper: # grep -P -- '^\\h*RUNASUSER=' /usr/lib/ntp/ntp-systemd-wrapper RUNASUSER=ntp",
    "remediation": "Add or edit the following line in /usr/lib/ntp/ntp-systemd-wrapper: RUNASUSER=ntp Run the following command to restart ntp.servocee: # systemctl restart ntp.service OR If another time synchronization service is in use on the system, run the following command to remove ntp from the system: # apt purge ntp Default Value: user ntp References: 1. http://www.ntp.org/ 2. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. http://www.ntp.org/ 2. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "ntp_service_user_ntp",
      "ntp_package_user_ntp",
      "ntp_daemon_user_ntp",
      "time_sync_method_single",
      "ntp_installed_user_ntp",
      "chrony_installed_ntp_removed",
      "systemd_timesyncd_installed_ntp_removed"
    ]
  },
  {
    "id": "2.1.4.4",
    "title": "Ensure ntp is enabled and running",
    "assessment": "Automated",
    "description": "ntp is a daemon for synchronizing the system clock across the network",
    "rationale": "ntp needs to be enabled and running in order to synchronize the system to a timeserver. Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit": "IF ntp is in use on the system, run the following commands: Run the following command to verify that the ntp service is enabled: # systemctl is-enabled ntp.service enabled Run the following command to verify that the ntp service is active: # systemctl is-active ntp.service active",
    "remediation": "IF ntp is in use on the system, run the following commands: Run the following command to unmask ntp.service: # systemctl unmask ntp.service Run the following command to enable and start ntp.service: # systemctl --now enable ntp.service OR If another time synchronization service is in use on the system, run the following command to remove ntp: # apt purge ntp References: 1. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "compute_instance_ntp_enabled",
      "compute_instance_ntp_running",
      "compute_instance_ntp_configured",
      "compute_instance_ntp_synchronized",
      "compute_instance_ntp_service_active"
    ]
  },
  {
    "id": "2.2.1",
    "title": "Ensure X Window System is not installed",
    "assessment": "Automated",
    "description": "The X Window System provides a Graphical User Interface (GUI) where users can have multiple windows in which to run programs and various add on. The X Windows system is typically used on workstations where users login, but not on servers where users typically do not login.",
    "rationale": "Unless your organization specifically requires graphical login access via X Windows, remove it to reduce the potential attack surface. Impact: Many Linux systems run applications which require a Java runtime. Some Linux Java packages have a dependency on specific X Windows xorg-x11-fonts. One workaround to avoid this dependency is to use the \"headless\" Java packages for your specific Java runtime, if provided by your distribution.",
    "audit": "Verify X Windows System is not installed: dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' xserver-xorg* | grep -Pi '\\h+installed\\b' Nothing should be returned",
    "remediation": "Remove the X Windows System packages: apt purge xserver-xorg* References: 1. NIST SP 800-53 Rev. 5: CM-11",
    "profile_applicability": "•  Level 2 - Server",
    "impact": "Many Linux systems run applications which require a Java runtime. Some Linux Java packages have a dependency on specific X Windows xorg-x11-fonts. One workaround to avoid this dependency is to use the \"headless\" Java packages for your specific Java runtime, if provided by your distribution.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-11",
    "function_names": [
      "compute_instance_x_window_not_installed",
      "compute_server_x_window_removed",
      "compute_system_gui_disabled",
      "compute_instance_gui_components_absent",
      "compute_server_graphical_interface_not_installed"
    ]
  },
  {
    "id": "2.2.2",
    "title": "Ensure Avahi Server is not installed",
    "assessment": "Automated",
    "description": "Avahi is a free zeroconf implementation, including a system for multicast DNS/DNS-SD service discovery. Avahi allows programs to publish and discover services and hosts running on a local network with no specific configuration. For example, a user can plug a computer into a network and Avahi automatically finds printers to print to, files to look at and people to talk to, as well as network services running on the machine.",
    "rationale": "Automatic discovery of network services is not normally required for system functionality. It is recommended to remove this package to reduce the potential attack surface.",
    "audit": "Run the following command to verify avahi-daemon is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' avahi-daemon avahi-daemon     unknown ok not-installed        not-installed",
    "remediation": "Run the following commands to remove avahi-daemon: # systemctl stop avahi-daaemon.service # systemctl stop avahi-daemon.socket # apt purge avahi-daemon References: 1. NIST SP 800-53 Rev. 5: SI-4",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-4",
    "function_names": [
      "compute_avahi_server_not_installed",
      "compute_service_discovery_disabled",
      "network_multicast_dns_disabled",
      "system_zeroconf_implementation_removed",
      "system_avahi_package_uninstalled"
    ]
  },
  {
    "id": "2.2.3",
    "title": "Ensure CUPS is not installed",
    "assessment": "Automated",
    "description": "The Common Unix Print System (CUPS) provides the ability to print to both local and network printers. A system running CUPS can also accept print jobs from remote systems and print them to local printers. It also provides a web based remote administration capability.",
    "rationale": "If the system does not need to print jobs or accept print jobs from other systems, it is recommended that CUPS be removed to reduce the potential attack surface. Impact: Removing CUPS will prevent printing from the system, a common task for workstation systems.",
    "audit": "Run the following command to verify cups is not Installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' cups cups    unknown ok not-installed        not-installed",
    "remediation": "Run one of the following commands to remove cups : # apt purge cups References: 1. More detailed documentation on CUPS is available at the project homepage at http://www.cups.org. 2. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 2 - Workstation",
    "impact": "Removing CUPS will prevent printing from the system, a common task for workstation systems.",
    "references": "1. More detailed documentation on CUPS is available at the project homepage at http://www.cups.org. 2. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "system_package_cups_not_installed",
      "system_print_service_disabled",
      "system_unix_print_remote_admin_disabled",
      "system_network_printing_disabled",
      "system_local_printing_disabled"
    ]
  },
  {
    "id": "2.2.4",
    "title": "Ensure DHCP Server is not installed",
    "assessment": "Automated",
    "description": "The Dynamic Host Configuration Protocol (DHCP) is a service that allows machines to be dynamically assigned IP addresses.",
    "rationale": "Unless a system is specifically set up to act as a DHCP server, it is recommended that this package be removed to reduce the potential attack surface.",
    "audit": "Run the following commands to verify isc-dhcp-server is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' isc- dhcp-server isc-dhcp-server     unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove isc-dhcp-server: # apt purge isc-dhcp-server References: 1. More detailed documentation on DHCP is available at http://www.isc.org/software/dhcp. 2. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. More detailed documentation on DHCP is available at http://www.isc.org/software/dhcp. 2. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_dhcp_server_not_installed",
      "network_interface_dhcp_disabled",
      "virtual_machine_dhcp_service_removed",
      "operating_system_dhcp_package_uninstalled",
      "cloud_instance_dhcp_configuration_disabled"
    ]
  },
  {
    "id": "2.2.5",
    "title": "Ensure LDAP server is not installed",
    "assessment": "Automated",
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP server, it is recommended that the software be removed to reduce the potential attack surface.",
    "audit": "Run the following command to verify slapd is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' slapd slapd   unknown ok not-installed        not-installed",
    "remediation": "Run one of the following commands to remove slapd: # apt purge slapd References: 1. For more detailed documentation on OpenLDAP, go to the project homepage at http://www.openldap.org. 2. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. For more detailed documentation on OpenLDAP, go to the project homepage at http://www.openldap.org. 2. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_ldap_server_not_installed",
      "compute_server_ldap_service_disabled",
      "compute_system_ldap_package_uninstalled",
      "compute_os_ldap_software_removed",
      "compute_host_ldap_daemon_inactive"
    ]
  },
  {
    "id": "2.2.6",
    "title": "Ensure NFS is not installed",
    "assessment": "Automated",
    "description": "The Network File System (NFS) is one of the first and most widely distributed file systems in the UNIX environment. It provides the ability for systems to mount file systems of other servers through the network.",
    "rationale": "If the system does not export NFS shares, it is recommended that the nfs-kernel- server package be removed to reduce the remote attack surface.",
    "audit": "Run the following command to verify nfs is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' nfs- kernel-server nfs-kernel-server       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove nfs: # apt purge nfs-kernel-server References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_nfs_not_installed",
      "compute_server_nfs_disabled",
      "compute_system_nfs_removed",
      "compute_os_nfs_uninstalled",
      "compute_host_nfs_absent"
    ]
  },
  {
    "id": "2.2.7",
    "title": "Ensure DNS Server is not installed",
    "assessment": "Automated",
    "description": "The Domain Name System (DNS) is a hierarchical naming system that maps names to IP addresses for computers, services and other resources connected to a network.",
    "rationale": "Unless a system is specifically designated to act as a DNS server, it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit": "Run the following command to verify DNS server is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' bind9 bind9       unknown ok not-installed        not-installed",
    "remediation": "Run the following commands to disable DNS server: # apt purge bind9 References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_dns_server_not_installed",
      "compute_vm_dns_service_disabled",
      "compute_host_dns_uninstalled",
      "network_dns_server_removed",
      "system_dns_package_uninstalled"
    ]
  },
  {
    "id": "2.2.8",
    "title": "Ensure FTP Server is not installed",
    "assessment": "Automated",
    "description": "The File Transfer Protocol (FTP) provides networked computers with the ability to transfer files.",
    "rationale": "FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit": "Run the following command to verify vsftpd is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' vsftpd vsftpd      unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove vsftpd: # apt purge vsftpd References: 1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Additional FTP servers also exist and should be audited.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Additional FTP servers also exist and should be audited.",
    "function_names": [
      "compute_server_ftp_not_installed",
      "compute_instance_ftp_removed",
      "compute_vm_ftp_disabled",
      "compute_system_ftp_uninstalled",
      "compute_os_ftp_service_disabled"
    ]
  },
  {
    "id": "2.2.9",
    "title": "Ensure HTTP server is not installed",
    "assessment": "Automated",
    "description": "HTTP or web servers provide the ability to host web site content.",
    "rationale": "Unless there is a need to run the system as a web server, it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit": "Run the following command to verify apache2 is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' apache2 apache2       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove apache2: # apt purge apache2 References: 1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Several httpd servers exist and can use other service names. apache2 and nginx are example services that provide an HTTP server. These and other services should also be audited",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Several httpd servers exist and can use other service names. apache2 and nginx are example services that provide an HTTP server. These and other services should also be audited",
    "function_names": [
      "compute_instance_http_server_not_installed",
      "compute_vm_http_server_not_installed",
      "compute_server_http_service_disabled",
      "compute_host_http_daemon_removed",
      "compute_system_http_package_uninstalled",
      "compute_os_http_service_inactive",
      "compute_machine_http_software_absent"
    ]
  },
  {
    "id": "2.2.10",
    "title": "Ensure IMAP and POP3 server are not installed",
    "assessment": "Automated",
    "description": "dovecot-imapd and dovecot-pop3d are an open source IMAP and POP3 server for Linux based systems.",
    "rationale": "Unless POP3 and/or IMAP servers are to be provided by this system, it is recommended that the package be removed to reduce the potential attack surface.",
    "audit": "Run the following command to verify dovecot-imapd and dovecot-pop3d are not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' dovecot-imapd dovecot-pop3d dovecot-imapd       unknown ok not-installed        not-installed dovecot-pop3d        unknown ok not-installed        not-installed",
    "remediation": "Run one of the following commands to remove dovecot-imapd and dovecot-pop3d: # apt purge dovecot-imapd dovecot-pop3d References: 1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Several IMAP/POP3 servers exist and can use other service names. courier-imap and cyrus-imap are example services that provide a mail server. These and other services should also be audited.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Several IMAP/POP3 servers exist and can use other service names. courier-imap and cyrus-imap are example services that provide a mail server. These and other services should also be audited.",
    "function_names": [
      "compute_imap_server_not_installed",
      "compute_pop3_server_not_installed",
      "compute_dovecot_imapd_not_installed",
      "compute_dovecot_pop3d_not_installed",
      "compute_email_servers_not_installed"
    ]
  },
  {
    "id": "2.2.11",
    "title": "Ensure Samba is not installed",
    "assessment": "Automated",
    "description": "The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block (SMB) protocol. Windows desktop users will be able to mount these directories and file systems as letter drives on their systems.",
    "rationale": "If there is no need to mount directories and file systems to Windows systems, then this service should be deleted to reduce the potential attack surface.",
    "audit": "Run the following command to verify samba is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' samba samba       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove samba: # apt purge samba References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "function_names": [
      "compute_package_samba_not_installed",
      "compute_service_samba_disabled",
      "compute_software_samba_removed",
      "compute_system_samba_uninstalled",
      "compute_daemon_smb_not_running"
    ]
  },
  {
    "id": "2.2.12",
    "title": "Ensure HTTP Proxy Server is not installed",
    "assessment": "Automated",
    "description": "Squid is a standard proxy server used in many distributions and environments.",
    "rationale": "If there is no need for a proxy server, it is recommended that the squid proxy be deleted to reduce the potential attack surface.",
    "audit": "Run the following command to verify squid is not installed: #  dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' squid squid   unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove squid: # apt purge squid References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-7 Additional Information: Several HTTP proxy servers exist. These and other services should be checked",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-7 Additional Information: Several HTTP proxy servers exist. These and other services should be checked",
    "function_names": [
      "compute_instance_http_proxy_not_installed",
      "compute_server_squid_proxy_disabled",
      "compute_system_proxy_service_removed",
      "compute_os_http_proxy_uninstalled",
      "compute_package_squid_proxy_absent"
    ]
  },
  {
    "id": "2.2.13",
    "title": "Ensure SNMP Server is not installed",
    "assessment": "Automated",
    "description": "Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring the health and welfare of network equipment, computer equipment and devices like UPSs. Net-SNMP is a suite of applications used to implement SNMPv1 (RFC 1157), SNMPv2 (RFCs 1901-1908), and SNMPv3 (RFCs 3411-3418) using both IPv4 and IPv6. Support for SNMPv2 classic (a.k.a. \"SNMPv2 historic\" - RFCs 1441-1452) was dropped with the 4.0 release of the UCD-snmp package. The Simple Network Management Protocol (SNMP) server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the information and then send results back to the requesting system.",
    "rationale": "The SNMP server can communicate using SNMPv1, which transmits data in the clear and does not require authentication to execute commands. SNMPv3 replaces the simple/clear text password sharing used in SNMPv2 with more securely encoded parameters. If the the SNMP service is not required, the snmpd package should be removed to reduce the attack surface of the system. Note: If SNMP is required: • The server should be configured for SNMP v3 only. User Authentication and Message Encryption should be configured. • If SNMP v2 is absolutely necessary, modify the community strings' values.",
    "audit": "Run the following command to verify snmpd is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' snmpd snmpd    unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove snmpd: # apt purge snmpd References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_snmp_server_not_installed",
      "compute_snmp_server_removed",
      "compute_snmp_service_disabled",
      "compute_snmp_package_uninstalled",
      "compute_snmp_protocol_disabled"
    ]
  },
  {
    "id": "2.2.14",
    "title": "Ensure NIS Server is not installed",
    "assessment": "Automated",
    "description": "The Network Information Service (NIS) (formally known as Yellow Pages) is a client- server directory service protocol for distributing system configuration files. The NIS server is a collection of programs that allow for the distribution of configuration files.",
    "rationale": "The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed and other, more secure services be used",
    "audit": "Run the following command to verify nis is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' nis nis       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove nis: # apt purge nis References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "function_names": [
      "nis_server_not_installed",
      "nis_server_removed",
      "nis_service_disabled",
      "nis_package_uninstalled",
      "nis_daemon_inactive"
    ]
  },
  {
    "id": "2.2.15",
    "title": "Ensure dnsmasq is not installed",
    "assessment": "Automated",
    "description": "dnsmasq is a lightweight tool that provides DNS caching, DNS forwarding and DHCP (Dynamic Host Configuration Protocol) services.",
    "rationale": "Unless a system is specifically designated to act as a DNS caching, DNS forwarding and/or DHCP server, it is recommended that the package be removed to reduce the potential attack surface.",
    "audit": "Run one of the following commands to verify dnsmasq is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' dnsmasq dnsmasq       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove dnsmasq: # apt purge dnsmasq References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_dnsmasq_not_installed",
      "compute_system_dnsmasq_removed",
      "compute_service_dnsmasq_disabled",
      "compute_software_dnsmasq_uninstalled",
      "compute_package_dnsmasq_absent"
    ]
  },
  {
    "id": "2.2.16",
    "title": "Ensure mail transfer agent is configured for local-only mode",
    "assessment": "Automated",
    "description": "Mail Transfer Agents (MTA), such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the MTA be configured to only process local mail.",
    "rationale": "The software for all Mail Transfer Agents is complex and most have a long history of security issues. While it is important to ensure that the system can process local mail messages, it is not necessary to have the MTA's daemon listening on a port unless the server is intended to be a mail server that receives and processes mail from other systems. Note: • This recommendation is designed around the postfix mail server. • Depending on your environment you may have an alternative MTA installed such as exim4. If this is the case consult the documentation for your installed MTA to configure the recommended state.",
    "audit": "Run the following command to verify that the MTA is not listening on any non-loopback address (127.0.0.1 or::1). #  ss -lntu | grep -P ':25\\b' | grep -Pv '\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):25\\b' Nothing should be returned",
    "remediation": "Edit /etc/postfix/main.cf and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line below: inet_interfaces = loopback-only Run the following command to restart postfix: # systemctl restart postfix References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_mail_transfer_agent_local_only_mode",
      "compute_mta_local_only_mode",
      "compute_sendmail_local_only_mode",
      "compute_postfix_local_only_mode",
      "compute_mail_service_local_only_mode",
      "compute_mail_transfer_agent_no_remote_mode",
      "compute_mta_no_remote_mode",
      "compute_mail_service_no_remote_mode"
    ]
  },
  {
    "id": "2.2.17",
    "title": "Ensure rsync service is either not installed or is masked",
    "assessment": "Automated",
    "description": "The rsync service can be used to synchronize files between systems over network links.",
    "rationale": "The rsync service presents a security risk as the rsync protocol is unencrypted. The rsync package should be removed or if required for dependencies, the rsync service should be stopped and masked to reduce the attack area of the system.",
    "audit": "Run the following command to verify rsync is not installed: dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' rsync rsync       unknown ok not-installed        not-installed -- OR -- Run the following commands to verify that rsync is inactive and masked: # systemctl is-active rsync inactive # systemctl is-enabled rsync masked",
    "remediation": "Run the following command to remove rsync: # apt purge rsync -- OR -- Run the following commands to stop and mask rsync: # systemctl stop rsync # systemctl mask rsync References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "function_names": [
      "system_service_rsync_not_installed",
      "system_service_rsync_masked",
      "system_service_rsync_disabled",
      "system_package_rsync_removed",
      "system_service_rsync_inactive"
    ]
  },
  {
    "id": "2.3.1",
    "title": "Ensure NIS Client is not installed",
    "assessment": "Automated",
    "description": "The Network Information Service (NIS), formerly known as Yellow Pages, is a client- server directory service protocol used to distribute system configuration files. The NIS client was used to bind a machine to an NIS server and receive the distributed configuration files.",
    "rationale": "The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed. Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Verify nis is not installed. Use the following command to provide the needed information: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' nis nis       unknown ok not-installed        not-installed",
    "remediation": "Uninstall nis: # apt purge nis References: 1. NIST SP 800-53 Rev. 5: CM-7, CM-11",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7, CM-11",
    "function_names": [
      "compute_nis_client_not_installed",
      "compute_nis_client_disabled",
      "compute_nis_client_removed",
      "compute_nis_client_uninstalled",
      "compute_nis_client_absent"
    ]
  },
  {
    "id": "2.3.2",
    "title": "Ensure rsh client is not installed",
    "assessment": "Automated",
    "description": "The rsh-client package contains the client commands for the rsh services.",
    "rationale": "These legacy clients contain numerous security exposures and have been replaced with the more secure SSH package. Even if the server is removed, it is best to ensure the clients are also removed to prevent users from inadvertently attempting to use these commands and therefore exposing their credentials. Note that removing the rsh-client package removes the clients for rsh , rcp and rlogin . Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Verify rsh-client is not installed. Use the following command to provide the needed information: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' rsh- client rsh-client       unknown ok not-installed        not-installed",
    "remediation": "Uninstall rsh: # apt purge rsh-client References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_rsh_client_not_installed",
      "compute_rsh_client_removed",
      "compute_rsh_client_disabled",
      "compute_rsh_client_unavailable",
      "compute_rsh_client_prohibited"
    ]
  },
  {
    "id": "2.3.3",
    "title": "Ensure talk client is not installed",
    "assessment": "Automated",
    "description": "The talk software makes it possible for users to send and receive messages across systems through a terminal session. The talk client, which allows initialization of talk sessions, is installed by default.",
    "rationale": "The software presents a security risk as it uses unencrypted protocols for communication. Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Verify talk is not installed. The following command may provide the needed information: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' talk talk       unknown ok not-installed        not-installed",
    "remediation": "Uninstall talk: # apt purge talk References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_talk_client_not_installed",
      "os_package_talk_client_removed",
      "system_software_talk_client_disabled",
      "linux_package_talk_client_uninstalled",
      "server_software_talk_client_absent"
    ]
  },
  {
    "id": "2.3.4",
    "title": "Ensure telnet client is not installed",
    "assessment": "Automated",
    "description": "The telnet package contains the telnet client, which allows users to start connections to other systems via the telnet protocol.",
    "rationale": "The telnet protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow an unauthorized user to steal credentials. The ssh package provides an encrypted session and stronger security and is included in most Linux distributions. Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Verify telnet is not installed. Use the following command to provide the needed information: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' telnet telnet      unknown ok not-installed        not-installed",
    "remediation": "Uninstall telnet: # apt purge telnet References: 1. NIST SP 800-53 Rev. 5: CM-7, CM-11",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7, CM-11",
    "function_names": [
      "compute_instance_telnet_client_not_installed",
      "compute_system_telnet_package_removed",
      "compute_os_telnet_client_disabled",
      "compute_software_telnet_uninstalled",
      "compute_host_telnet_protocol_blocked"
    ]
  },
  {
    "id": "2.3.5",
    "title": "Ensure LDAP client is not installed",
    "assessment": "Automated",
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP client, it is recommended that the software be removed to reduce the potential attack surface. Impact: Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment.",
    "audit": "Verify that ldap-utils is not installed. Use the following command to provide the needed information: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' ldap-utils ldap-utils       unknown ok not-installed        not-installed",
    "remediation": "Uninstall ldap-utils: # apt purge ldap-utils References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_ldap_client_not_installed",
      "compute_vm_ldap_client_not_installed",
      "os_package_ldap_client_not_installed",
      "system_ldap_client_not_installed",
      "server_ldap_client_not_installed"
    ]
  },
  {
    "id": "2.3.6",
    "title": "Ensure RPC is not installed",
    "assessment": "Automated",
    "description": "Remote Procedure Call (RPC) is a method for creating low level client server applications across different system architectures. It requires an RPC compliant client listening on a network port. The supporting package is rpcbind.\"",
    "rationale": "If RPC is not required, it is recommended that this services be removed to reduce the remote attack surface.",
    "audit": "Run the following command to verify rpcbind is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' rpcbind rpcbind       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove rpcbind: # apt purge rpcbind References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_rpc_not_installed",
      "compute_vm_rpc_not_installed",
      "compute_server_rpc_not_installed",
      "compute_system_rpcbind_removed",
      "compute_package_rpcbind_not_installed",
      "compute_service_rpc_disabled",
      "compute_software_rpcbind_uninstalled",
      "compute_host_rpcbind_not_present"
    ]
  },
  {
    "id": "2.4",
    "title": "Ensure nonessential services are removed or masked",
    "assessment": "Manual",
    "description": "A network port is identified by its number, the associated IP address, and the type of the communication protocol such as TCP or UDP. A listening port is a network port on which an application or process listens on, acting as a communication endpoint. Each listening port can be open or closed (filtered) using a firewall. In general terms, an open port is a network port that accepts incoming packets from remote locations.",
    "rationale": "Services listening on the system pose a potential risk as an attack vector. These services should be reviewed, and if not required, the service should be stopped, and the package containing the service should be removed. If required packages have a dependency, the service should be stopped and masked to reduce the attack surface of the system.",
    "audit": "Run the following command: # ss -plntu Review the output to ensure that all services listed are required on the system. If a listed service is not required, remove the package containing the service. If the package containing the service is required, stop and mask the service",
    "remediation": "Run the following command to remove the package containing the service: # apt purge <package_name> OR If required packages have a dependency: Run the following commands to stop and mask the service: # systemctl stop <service_name>.socket # systemctl stop <service_name>.service # systemctl mask <service_name>.socket # systemctl mask <service_name>.service References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "systemd_service_nonessential_removed",
      "systemd_service_nonessential_masked",
      "network_port_nonessential_closed",
      "network_port_listening_filtered",
      "firewall_rule_nonessential_blocked",
      "process_listening_port_restricted",
      "system_service_unused_disabled",
      "system_socket_nonessential_closed"
    ]
  },
  {
    "id": "3.1.1",
    "title": "Ensure IPv6 status is identified",
    "assessment": "Manual",
    "description": "Internet Protocol Version 6 (IPv6) is the most recent version of Internet Protocol (IP). It's designed to supply IP addressing and additional security to support the predicted growth of connected devices. IPv6 is based on 128-bit addressing and can support 340 undecillion addresses, which is 340 followed by 36 zeroes. Features of IPv6 • Hierarchical addressing and routing infrastructure • Stateful and Stateless configuration • Support for quality of service (QoS) • An ideal protocol for neighboring node interaction",
    "rationale": "IETF RFC 4038 recommends that applications are built with an assumption of dual stack. It is recommended that IPv6 be enabled and configured in accordance with Benchmark recommendations. If dual stack and IPv6 are not used in your environment, IPv6 may be disabled to reduce the attack surface of the system, and recommendations pertaining to IPv6 can be skipped. Note: It is recommended that IPv6 be enabled and configured unless this is against local site policy Impact: IETF RFC 4038 recommends that applications are built with an assumption of dual stack. When enabled, IPv6 will require additional configuration to reduce risk to the system.",
    "audit": "Run the following to identify if IPv6 is enabled on the system: # grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && echo -e \"\\n - IPv6 is enabled\\n\" || echo -e \"\\n - IPv6 is not enabled\\n\"",
    "remediation": "Enable or disable IPv6 in accordance with system requirements and local site policy Default Value: IPv6 is enabled References: 1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Having more addresses has grown in importance with the expansion of smart devices and connectivity. IPv6 provides more than enough globally unique IP addresses for every networked device currently on the planet, helping ensure providers can keep pace with the expected proliferation of IP-based devices.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "IETF RFC 4038 recommends that applications are built with an assumption of dual stack. When enabled, IPv6 will require additional configuration to reduce risk to the system.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: Having more addresses has grown in importance with the expansion of smart devices and connectivity. IPv6 provides more than enough globally unique IP addresses for every networked device currently on the planet, helping ensure providers can keep pace with the expected proliferation of IP-based devices.",
    "function_names": [
      "network_interface_ipv6_status_identified",
      "vpc_ipv6_configuration_enabled",
      "subnet_ipv6_association_verified",
      "ec2_instance_ipv6_support_enabled",
      "network_acl_ipv6_rules_configured",
      "security_group_ipv6_traffic_allowed",
      "route_table_ipv6_routing_enabled",
      "internet_gateway_ipv6_support_enabled",
      "elastic_ip_ipv6_allocation_configured",
      "load_balancer_ipv6_listener_enabled"
    ]
  },
  {
    "id": "3.1.2",
    "title": "Ensure wireless interfaces are disabled",
    "assessment": "Automated",
    "description": "Wireless networking is used when wired networks are unavailable. Debian contains a wireless tool kit to allow system administrators to configure and use wireless networks.",
    "rationale": "If wireless is not to be used, wireless devices can be disabled to reduce the potential attack surface. Impact: Many if not all laptop workstations and some desktop workstations will connect via wireless requiring these interfaces be enabled.",
    "audit": "Run the following script to verify no wireless interfaces are active on the system:  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" module_chk() { # Check how module will be loaded l_loadable=\"$(modprobe -n -v \"$l_mname\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi # Check is the module currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi # Check if the module is deny listed if modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mname\\b\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pl -- \"^\\h*blacklist\\h+$l_mname\\b\" /etc/modprobe.d/*)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } if [ -n \"$(find /sys/class/net/*/ -type d -name wireless)\" ]; then l_dname=$(for driverdir in $(find /sys/class/net/*/ -type d -name wireless | xargs -0 dirname); do basename \"$(readlink -f \"$driverdir\"/device/driver/module)\";done | sort -u) for l_mname in $l_dname; do module_chk done fi # Report results. If no failures output in l_output2, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\" if [ -z \"$l_output\" ]; then echo -e \"\\n - System has no wireless NICs installed\" else echo -e \"\\n$l_output\\n\" fi else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable any wireless interfaces: #!/usr/bin/env bash { module_fix() { if ! modprobe -n -v \"$l_mname\" | grep -P -- '^\\h*install \\/bin\\/(true|false)'; then echo -e \" - setting module: \\\"$l_mname\\\" to be un-loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mname\".conf fi if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \" - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi if ! grep -Pq -- \"^\\h*blacklist\\h+$l_mname\\b\" /etc/modprobe.d/*; then echo -e \" - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mname\".conf fi } if [ -n \"$(find /sys/class/net/*/ -type d -name wireless)\" ]; then l_dname=$(for driverdir in $(find /sys/class/net/*/ -type d -name wireless | xargs -0 dirname); do basename \"$(readlink -f \"$driverdir\"/device/driver/module)\";done | sort -u) for l_mname in $l_dname; do module_fix done fi } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many if not all laptop workstations and some desktop workstations will connect via wireless requiring these interfaces be enabled.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "network_interface_wireless_disabled",
      "wireless_interface_disabled_all",
      "wireless_networking_disabled",
      "wireless_toolkit_disabled",
      "wireless_configuration_disabled"
    ]
  },
  {
    "id": "3.1.3",
    "title": "Ensure bluetooth is disabled",
    "assessment": "Automated",
    "description": "Bluetooth is a short-range wireless technology standard that is used for exchanging data between devices over short distances. It employs UHF radio waves in the ISM bands, from 2.402 GHz to 2.48 GHz. It is mainly used as an alternative to wire connections.",
    "rationale": "An attacker may be able to find a way to access or corrupt your data. One example of this type of activity is bluesnarfing, which refers to attackers using a Bluetooth connection to steal information off of your Bluetooth device. Also, viruses or other malicious code can take advantage of Bluetooth technology to infect other devices. If you are infected, your data may be corrupted, compromised, stolen, or lost. Impact: Many personal electronic devices (PEDs) use Bluetooth technology. For example, you may be able to operate your computer with a wireless keyboard. Disabling Bluetooth will prevent these devices from connecting to the system.",
    "audit": "Run the following commands to verify that the Bluetooth service is disabled: Run the following command to verify that the Bluetooth service is not enabled: # systemctl is-enabled bluetooth.service | grep '^enabled' Nothing should be returned Run the following command to verify that the Bluetooth service is not active: # systemctl is-active bluetooth.service | grep '^active' Nothing should be returned",
    "remediation": "Run the following commands to stop and mask the Bluetooth service # systemctl stop bluetooth.service # systemctl mask bluetooth.service Note: A reboot may be required  References: 1. https://www.cisa.gov/tips/st05-015 2. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many personal electronic devices (PEDs) use Bluetooth technology. For example, you may be able to operate your computer with a wireless keyboard. Disabling Bluetooth will prevent these devices from connecting to the system.",
    "references": "1. https://www.cisa.gov/tips/st05-015 2. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_bluetooth_disabled",
      "compute_device_bluetooth_disabled",
      "compute_system_bluetooth_disabled",
      "compute_vm_bluetooth_disabled",
      "compute_host_bluetooth_disabled",
      "compute_workload_bluetooth_disabled",
      "compute_os_bluetooth_disabled",
      "compute_fleet_bluetooth_disabled_all_instances"
    ]
  },
  {
    "id": "3.1.4",
    "title": "Ensure DCCP is disabled",
    "assessment": "Automated",
    "description": "The Datagram Congestion Control Protocol (DCCP) is a transport layer protocol that supports streaming media and telephony. DCCP provides a way to gain access to congestion control, without having to do it at the application layer, but does not provide in-sequence delivery.",
    "rationale": "If the protocol is not required, it is recommended that the drivers not be installed to reduce the potential attack surface.",
    "audit": "Run the following script to verify the dccp module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"dccp\" # set module name l_mtype=\"net\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the dccp module: If the module is available in the running kernel: • Create a file with install dccp /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist dccp in the /etc/modprobe.d/ directory • Unload dccp from the kernel If available in ANY installed kernel: • Create a file with blacklist dccp in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"dccp\" # set module name l_mtype=\"net\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: SI-4, CM-7",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-4, CM-7",
    "function_names": [
      "network_protocol_dccp_disabled",
      "transport_layer_dccp_protocol_disabled",
      "network_security_dccp_unused",
      "firewall_dccp_traffic_blocked",
      "network_interface_dccp_disabled",
      "os_network_dccp_disabled",
      "vpc_network_dccp_disabled",
      "security_group_dccp_restricted"
    ]
  },
  {
    "id": "3.1.5",
    "title": "Ensure SCTP is disabled",
    "assessment": "Automated",
    "description": "The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to support message oriented communication, with several streams of messages in one connection. It serves a similar function as TCP and UDP, incorporating features of both. It is message-oriented like UDP, and ensures reliable in-sequence transport of messages with congestion control like TCP.",
    "rationale": "If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface.",
    "audit": "Run the following script to verify the sctp module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"sctp\" # set module name l_mtype=\"net\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the sctp module: If the module is available in the running kernel: • Create a file with install sctp /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist sctp in the /etc/modprobe.d/ directory • Unload sctp from the kernel If available in ANY installed kernel: • Create a file with blacklist sctp in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"sctp\" # set module name l_mtype=\"net\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: SI-4, CM-7",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-4, CM-7",
    "function_names": [
      "compute_network_sctp_disabled",
      "network_interface_sctp_disabled",
      "security_group_sctp_disabled",
      "firewall_rule_sctp_disabled",
      "transport_protocol_sctp_disabled",
      "vpc_network_sctp_disabled",
      "instance_security_sctp_disabled",
      "os_network_sctp_disabled",
      "kernel_module_sctp_disabled",
      "system_config_sctp_disabled"
    ]
  },
  {
    "id": "3.1.6",
    "title": "Ensure RDS is disabled",
    "assessment": "Automated",
    "description": "The Reliable Datagram Sockets (RDS) protocol is a transport layer protocol designed to provide low-latency, high-bandwidth communications between cluster nodes. It was developed by the Oracle Corporation.",
    "rationale": "If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface.",
    "audit": "Run the following script to verify the rds module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"rds\" # set module name l_mtype=\"net\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the rds module: If the module is available in the running kernel: • Create a file with install rds /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist rds in the /etc/modprobe.d/ directory • Unload rds from the kernel If available in ANY installed kernel: • Create a file with blacklist rds in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"rds\" # set module name l_mtype=\"net\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" }",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "function_names": [
      "compute_instance_rds_disabled",
      "network_interface_rds_protocol_disabled",
      "cluster_node_rds_unused",
      "transport_layer_rds_deactivated",
      "oracle_rds_protocol_disabled"
    ]
  },
  {
    "id": "3.1.7",
    "title": "Ensure TIPC is disabled",
    "assessment": "Automated",
    "description": "The Transparent Inter-Process Communication (TIPC) protocol is designed to provide communication between cluster nodes.",
    "rationale": "If the protocol is not being used, it is recommended that kernel module not be loaded, disabling the service to reduce the potential attack surface.",
    "audit": "Run the following script to verify the tipc module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"tipc\" # set module name l_mtype=\"net\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the tipc module: If the module is available in the running kernel: • Create a file with install tipc /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist tipc in the /etc/modprobe.d/ directory • Unload tipc from the kernel If available in ANY installed kernel: • Create a file with blacklist tipc in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary  #!/usr/bin/env bash { l_mname=\"tipc\" # set module name l_mtype=\"net\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: SI-4, CM-7",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SI-4, CM-7",
    "function_names": [
      "compute_instance_tipc_disabled",
      "network_interface_tipc_disabled",
      "kernel_module_tipc_disabled",
      "system_config_tipc_disabled",
      "cluster_node_tipc_disabled"
    ]
  },
  {
    "id": "3.2.1",
    "title": "Ensure packet redirect sending is disabled",
    "assessment": "Automated",
    "description": "ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.",
    "rationale": "An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.send_redirects is set to 0 • net.ipv4.conf.default.send_redirects is set to 0 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.send_redirects=0\" \"net.ipv4.conf.default.send_redirects=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.send_redirects = 0 • net.ipv4.conf.default.send_redirects = 0 Example: # printf \" net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.send_redirects=0 sysctl -w net.ipv4.conf.default.send_redirects=0 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.all.send_redirects = 1 net.ipv4.conf.default.send_redirects = 1 References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "compute_instance_packet_redirect_disabled",
      "network_interface_packet_redirect_disabled",
      "virtual_machine_packet_redirect_disabled",
      "os_network_packet_redirect_disabled",
      "linux_kernel_packet_redirect_disabled",
      "windows_network_packet_redirect_disabled",
      "cloud_vm_packet_redirect_disabled",
      "host_network_packet_redirect_disabled"
    ]
  },
  {
    "id": "3.2.2",
    "title": "Ensure IP forwarding is disabled",
    "assessment": "Automated",
    "description": "The net.ipv4.ip_forward and net.ipv6.conf.all.forwarding flags are used to tell the system whether it can forward packets or not.",
    "rationale": "Setting net.ipv4.ip_forward and net.ipv6.conf.all.forwarding to 0 ensures that a system with multiple interfaces (for example, a hard proxy), will never be able to forward packets, and therefore, never serve as a router.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.ip_forward is set to 0 • net.ipv6.conf.all.forwarding is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.ip_forward=0\" \"net.ipv6.conf.all.forwarding=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.ip_forward = 0 Example: # printf \" net.ipv4.ip_forward = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.ip_forward=0 sysctl -w net.ipv4.route.flush=1 } -IF- IPv6 is enabled on the system: Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.forwarding = 0 Example: # printf \" net.ipv6.conf.all.forwarding = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.forwarding=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.ip_forward = 0 net.ipv6.conf.all.forwarding = 0 References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5   Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5   Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "compute_instance_ip_forwarding_disabled",
      "compute_network_ip_forwarding_disabled",
      "compute_vm_ip_forwarding_disabled",
      "network_interface_ip_forwarding_disabled",
      "network_instance_ip_forwarding_disabled",
      "network_vm_ip_forwarding_disabled",
      "network_ipv4_forwarding_disabled",
      "network_ipv6_forwarding_disabled"
    ]
  },
  {
    "id": "3.3.1",
    "title": "Ensure source routed packets are not accepted",
    "assessment": "Automated",
    "description": "In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.",
    "rationale": "Setting net.ipv4.conf.all.accept_source_route, net.ipv4.conf.default.accept_source_route, net.ipv6.conf.all.accept_source_route and net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.accept_source_route is set to 0 • net.ipv4.conf.default.accept_source_route is set to 0 • net.ipv6.conf.all.accept_source_route is set to 0 • net.ipv6.conf.default.accept_source_route is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.accept_source_route=0\" \"net.ipv4.conf.default.accept_source_route=0\" \"net.ipv6.conf.all.accept_source_route=0\" \"net.ipv6.conf.default.accept_source_route=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.accept_source_route = 0 • net.ipv4.conf.default.accept_source_route = 0 Example: # printf \" net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.accept_source_route=0 sysctl -w net.ipv4.conf.default.accept_source_route=0 sysctl -w net.ipv4.route.flush=1 } -IF- IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.accept_source_route = 0 • net.ipv6.conf.default.accept_source_route = 0 Example: # printf \" net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.accept_source_route=0 sysctl -w net.ipv6.conf.default.accept_source_route=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0  References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "network_interface_source_routing_disabled",
      "ec2_instance_source_routing_disabled",
      "vpc_network_source_routing_disabled",
      "subnet_source_routing_disabled",
      "network_acl_source_routing_disabled",
      "security_group_source_routing_disabled",
      "firewall_source_routing_disabled",
      "route_table_source_routing_disabled"
    ]
  },
  {
    "id": "3.3.2",
    "title": "Ensure ICMP redirects are not accepted",
    "assessment": "Automated",
    "description": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables.",
    "rationale": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects, net.ipv4.conf.default.accept_redirects, net.ipv6.conf.all.accept_redirects, and net.ipv6.conf.default.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.accept_redirects is set to 0 • net.ipv4.conf.default.accept_redirects is set to 0 • net.ipv6.conf.all.accept_redirects is set to 0 • net.ipv6.conf.default.accept_redirects is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.accept_redirects=0\" \"net.ipv4.conf.default.accept_redirects=0\" \"net.ipv6.conf.all.accept_redirects=0\" \"net.ipv6.conf.default.accept_redirects=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.accept_redirects = 0 • net.ipv4.conf.default.accept_redirects = 0 Example: # printf \" net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.accept_redirects=0 sysctl -w net.ipv4.conf.default.accept_redirects=0 sysctl -w net.ipv4.route.flush=1 } -IF- IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.accept_redirects = 0 • net.ipv6.conf.default.accept_redirects = 0 Example: # printf \" net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.accept_redirects=0 sysctl -w net.ipv6.conf.default.accept_redirects=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.all.accept_redirects = 1 net.ipv4.conf.default.accept_redirects = 1 net.ipv6.conf.all.accept_redirects = 1 net.ipv6.conf.default.accept_redirects = 1  References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "network_security_icmp_redirects_disabled",
      "network_interface_icmp_redirects_rejected",
      "firewall_icmp_redirects_blocked",
      "vpc_icmp_redirects_protected",
      "network_acl_icmp_redirects_denied",
      "security_group_icmp_redirects_restricted",
      "network_icmp_redirects_unaccepted",
      "compute_instance_icmp_redirects_disabled"
    ]
  },
  {
    "id": "3.3.3",
    "title": "Ensure secure ICMP redirects are not accepted",
    "assessment": "Automated",
    "description": "Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.",
    "rationale": "It is still possible for even known gateways to be compromised. Setting net.ipv4.conf.all.secure_redirects and net.ipv4.conf.default.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.secure_redirects is set to 0 • net.ipv4.conf.default.secure_redirects is set to 0 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.secure_redirects=0\" \"net.ipv4.conf.default.secure_redirects=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.secure_redirects = 0 • net.ipv4.conf.default.secure_redirects = 0 Example: # printf \" net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following commands to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.secure_redirects=0 sysctl -w net.ipv4.conf.default.secure_redirects=0 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.all.secure_redirects = 1 net.ipv4.conf.default.secure_redirects = 1 References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "network_interface_icmp_redirects_disabled",
      "network_interface_secure_icmp_redirects_disabled",
      "network_interface_icmp_redirects_denied",
      "network_interface_secure_icmp_redirects_denied",
      "network_interface_icmp_redirects_restricted",
      "network_interface_secure_icmp_redirects_restricted",
      "network_interface_icmp_redirects_blocked",
      "network_interface_secure_icmp_redirects_blocked"
    ]
  },
  {
    "id": "3.3.4",
    "title": "Ensure suspicious packets are logged",
    "assessment": "Automated",
    "description": "When enabled, this feature logs packets with un-routable source addresses to the kernel log.",
    "rationale": "Setting net.ipv4.conf.all.log_martians and net.ipv4.conf.default.log_martians to 1` enables this feature. Logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.log_martians is set to 1 • net.ipv4.conf.default.log_martians is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.log_martians=1\" \"net.ipv4.conf.default.log_martians=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.log_martians = 1 • net.ipv4.conf.default.log_martians = 1 Example: # printf \" net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.log_martians=1 sysctl -w net.ipv4.conf.default.log_martians=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.all.log_martians = 0 net.ipv4.conf.default.log_martians = 0 References: 1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "network_interface_suspicious_packets_logged",
      "vpc_flow_logs_suspicious_packets_logged",
      "network_acl_suspicious_packets_logged",
      "security_group_suspicious_packets_logged",
      "firewall_suspicious_packets_logged",
      "cloud_network_suspicious_packets_logged",
      "packet_filter_suspicious_packets_logged",
      "network_security_suspicious_packets_logged"
    ]
  },
  {
    "id": "3.3.5",
    "title": "Ensure broadcast ICMP requests are ignored",
    "assessment": "Automated",
    "description": "Setting net.ipv4.icmp_echo_ignore_broadcasts to 1 will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses.",
    "rationale": "Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for your network could be used to trick your host into starting (or participating) in a Smurf attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast messages with a spoofed source address. All hosts receiving this message and responding would send echo-reply messages back to the spoofed address, which is probably not routable. If many hosts respond to the packets, the amount of traffic on the network could be significantly multiplied.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.icmp_echo_ignore_broadcasts is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.icmp_echo_ignore_broadcasts=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.icmp_echo_ignore_broadcasts = 1 Example: # printf \" net.ipv4.icmp_echo_ignore_broadcasts = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.default.log_martians = 0 References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "network_interface_icmp_broadcast_ignored",
      "network_interface_icmp_echo_ignore_broadcasts_enabled",
      "network_interface_broadcast_requests_ignored",
      "network_interface_icmp_timestamp_ignore_broadcasts_enabled",
      "network_interface_icmp_ignore_broadcasts_enabled"
    ]
  },
  {
    "id": "3.3.6",
    "title": "Ensure bogus ICMP responses are ignored",
    "assessment": "Automated",
    "description": "Setting net.ipv4.icmp_ignore_bogus_error_responses to 1 prevents the kernel from logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping file systems from filling up with useless log messages.",
    "rationale": "Some routers (and some attackers) will send responses that violate RFC-1122 and attempt to fill up a log file system with many useless error messages.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.icmp_ignore_bogus_error_responses is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.icmp_ignore_bogus_error_responses=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.icmp_ignore_bogus_error_responses = 1 Example: # printf \" net.ipv4.icmp_ignore_bogus_error_responses = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.icmp_ignore_bogus_error_responses = 1 References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "linux_kernel_network_icmp_ignore_bogus_responses",
      "linux_kernel_network_icmp_ignore_bogus_error_responses",
      "linux_network_icmp_bogus_responses_ignored",
      "linux_network_icmp_error_responses_ignored",
      "linux_kernel_icmp_rfc1122_compliance_enabled"
    ]
  },
  {
    "id": "3.3.7",
    "title": "Ensure Reverse Path Filtering is enabled",
    "assessment": "Automated",
    "description": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).",
    "rationale": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing. Impact: If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.rp_filter is set to 1 • net.ipv4.conf.default.rp_filter is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.rp_filter=1\" \"net.ipv4.conf.default.rp_filter=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.rp_filter = 1 • net.ipv4.conf.default.rp_filter = 1 Example: # printf \" net.ipv4.conf.all.rp_filter = 1 net.ipv4.conf.default.rp_filter = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following commands to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.rp_filter=1 sysctl -w net.ipv4.conf.default.rp_filter=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.conf.all.rp_filter = 2 net.ipv4.conf.default.rp_filter = 1 References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "compute_network_rp_filter_enabled",
      "compute_network_rp_filter_all_enabled",
      "compute_network_rp_filter_default_enabled",
      "compute_network_rp_filter_log_martians_enabled",
      "compute_network_rp_filter_valid_packets_enabled"
    ]
  },
  {
    "id": "3.3.8",
    "title": "Ensure TCP SYN Cookies is enabled",
    "assessment": "Automated",
    "description": "When tcp_syncookies is set, the kernel will handle TCP SYN packets normally until the half-open connection queue is full, at which time, the SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply replies to the SYN with a SYN|ACK, but will include a specially crafted TCP sequence number that encodes the source and destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the queue.",
    "rationale": "Attackers use SYN flood attacks to perform a denial of service attacked on a system by sending many SYN packets without completing the three way handshake. This will quickly use up slots in the kernel's half-open connection queue and prevent legitimate connections from succeeding. Setting net.ipv4.tcp_syncookies to 1 enables SYN cookies, allowing the system to keep accepting valid connections, even if under a denial of service attack.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.tcp_syncookies is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.tcp_syncookies=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.tcp_syncookies = 1 Example: # printf \" net.ipv4.tcp_syncookies = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.tcp_syncookies=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv4.tcp_syncookies = 1 References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "compute_instance_tcp_syncookies_enabled",
      "compute_network_tcp_syncookies_enabled",
      "compute_kernel_tcp_syncookies_enabled",
      "compute_system_tcp_syncookies_enabled",
      "compute_security_tcp_syncookies_enabled"
    ]
  },
  {
    "id": "3.3.9",
    "title": "Ensure IPv6 router advertisements are not accepted",
    "assessment": "Automated",
    "description": "This setting disables the system's ability to accept IPv6 router advertisements.",
    "rationale": "It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes. Setting net.ipv6.conf.all.accept_ra and net.ipv6.conf.default.accept_ra to 0 disables the system's ability to accept IPv6 router advertisements.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv6.conf.all.accept_ra is set to 0 • net.ipv6.conf.default.accept_ra is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv6.conf.all.accept_ra=0\" \"net.ipv6.conf.default.accept_ra=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "-IF- IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.accept_ra = 0 • net.ipv6.conf.default.accept_ra = 0 Example: # printf \" net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.accept_ra=0 sysctl -w net.ipv6.conf.default.accept_ra=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: net.ipv6.conf.all.accept_ra = 1 net.ipv6.conf.default.accept_ra = 1 References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 Additional Information: On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf • The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf • This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "function_names": [
      "compute_instance_ipv6_router_advertisements_disabled",
      "network_interface_ipv6_router_advertisements_blocked",
      "vpc_ipv6_router_advertisements_rejected",
      "subnet_ipv6_router_advertisements_denied",
      "instance_networking_ipv6_router_advertisements_disabled"
    ]
  },
  {
    "id": "3.4.1.1",
    "title": "Ensure ufw is installed",
    "assessment": "Automated",
    "description": "The Uncomplicated Firewall (ufw) is a frontend for iptables and is particularly well-suited for host-based firewalls. ufw provides a framework for managing netfilter, as well as a command-line interface for manipulating the firewall",
    "rationale": "A firewall utility is required to configure the Linux kernel's netfilter framework via the iptables or nftables back-end. The Linux kernel's netfilter framework host-based firewall can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host. Note: Only one firewall utility should be installed and configured. UFW is dependent on the iptables package",
    "audit": "Run the following command to verify that Uncomplicated Firewall (UFW) is installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' ufw ufw     install ok installed    installed",
    "remediation": "Run the following command to install Uncomplicated Firewall (UFW): apt install ufw References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "firewall_ufw_installed",
      "firewall_ufw_enabled",
      "firewall_ufw_default_deny",
      "firewall_ufw_logging_enabled",
      "firewall_ufw_rules_configured",
      "firewall_ufw_ipv6_enabled",
      "firewall_ufw_application_profiles_configured",
      "firewall_ufw_inbound_restricted",
      "firewall_ufw_outbound_restricted",
      "firewall_ufw_rate_limiting_enabled"
    ]
  },
  {
    "id": "3.4.1.2",
    "title": "Ensure iptables-persistent is not installed with ufw",
    "assessment": "Automated",
    "description": "The iptables-persistent is a boot-time loader for netfilter rules, iptables plugin",
    "rationale": "Running both ufw and the services included in the iptables-persistent package may lead to conflict",
    "audit": "Run the following command to verify that the iptables-persistent package is not installed: dpkg-query -s iptables-persistent package 'iptables-persistent' is not installed and no information is available",
    "remediation": "Run the following command to remove the iptables-persistent package: # apt purge iptables-persistent References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "compute_firewall_no_persistent_iptables_with_ufw",
      "compute_firewall_ufw_exclusive_mode",
      "compute_firewall_iptables_persistent_disabled",
      "compute_firewall_ufw_no_iptables_conflict",
      "compute_firewall_persistent_rules_disabled_with_ufw"
    ]
  },
  {
    "id": "3.4.1.3",
    "title": "Ensure ufw service is enabled",
    "assessment": "Automated",
    "description": "UncomplicatedFirewall (ufw) is a frontend for iptables. ufw provides a framework for managing netfilter, as well as a command-line and available graphical user interface for manipulating the firewall. Note: • When running ufw enable or starting ufw via its initscript, ufw will flush its chains. This is required so ufw can maintain a consistent state, but it may drop existing connections (eg ssh). ufw does support adding rules before enabling the firewall. • Run the following command before running ufw enable. # ufw allow proto tcp from any to any port 22 • The rules will still be flushed, but the ssh port will be open after enabling the firewall. Please note that once ufw is 'enabled', ufw will not flush the chains when adding or removing rules (but will when modifying a rule or changing the default policy) • By default, ufw will prompt when enabling the firewall while running under ssh. This can be disabled by using ufw --force enable",
    "rationale": "The ufw service must be enabled and running in order for ufw to protect the system Impact: Changing firewall settings while connected over network can result in being locked out of the system.",
    "audit": "Run the following command to verify that the ufw daemon is enabled: # systemctl is-enabled ufw.service enabled Run the following command to verify that the ufw daemon is active: # systemctl is-active ufw active Run the following command to verify ufw is active # ufw status Status: active",
    "remediation": "Run the following command to unmask the ufw daemon: # systemctl unmask ufw.service Run the following command to enable and start the ufw daemon: # systemctl --now enable ufw.service active Run the following command to enable ufw: # ufw enable References: 1. http://manpages.ubuntu.com/manpages/precise/en/man8/ufw.8.html 2. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Changing firewall settings while connected over network can result in being locked out of the system.",
    "references": "1. http://manpages.ubuntu.com/manpages/precise/en/man8/ufw.8.html 2. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "firewall_ufw_enabled",
      "firewall_ufw_ssh_allowed",
      "firewall_ufw_default_policy_configured",
      "firewall_ufw_rules_flushed_on_enable",
      "firewall_ufw_force_enable_configured"
    ]
  },
  {
    "id": "3.4.1.4",
    "title": "Ensure ufw loopback traffic is configured",
    "assessment": "Automated",
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6).",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit": "Run the following commands and verify output includes the listed rules in order: # ufw status verbose To                         Action      From --                         ------      ---- Anywhere on lo             ALLOW IN    Anywhere Anywhere                   DENY IN     127.0.0.0/8 Anywhere (v6) on lo        ALLOW IN    Anywhere (v6) Anywhere (v6)              DENY IN     ::1 Anywhere                   ALLOW OUT   Anywhere on lo Anywhere (v6)              ALLOW OUT   Anywhere (v6) on lo",
    "remediation": "Run the following commands to implement the loopback rules: # ufw allow in on lo # ufw allow out on lo # ufw deny in from 127.0.0.0/8 # ufw deny in from ::1 References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "ufw_loopback_traffic_configured",
      "ufw_loopback_ipv4_deny_configured",
      "ufw_loopback_ipv6_deny_configured",
      "ufw_loopback_interface_accept_configured",
      "ufw_loopback_network_deny_configured"
    ]
  },
  {
    "id": "3.4.1.5",
    "title": "Ensure ufw outbound connections are configured",
    "assessment": "Manual",
    "description": "Configure the firewall rules for new outbound connections. Note: • Changing firewall settings while connected over network can result in being locked out of the system. • Unlike iptables, when a new outbound rule is added, ufw automatically takes care of associated established connections, so no rules for the latter kind are required.",
    "rationale": "If rules are not in place for new outbound connections all packets will be dropped by the default policy preventing network usage.",
    "audit": "Run the following command and verify all rules for new outbound connections match site policy: # ufw status numbered",
    "remediation": "Configure ufw in accordance with site policy. The following commands will implement a policy to allow all outbound connections on all interfaces: # ufw allow out on all References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "ufw_outbound_connections_configured",
      "ufw_outbound_rules_established",
      "ufw_firewall_outbound_restricted",
      "ufw_outbound_traffic_allowed",
      "ufw_outbound_policy_configured"
    ]
  },
  {
    "id": "3.4.1.6",
    "title": "Ensure ufw firewall rules exist for all open ports",
    "assessment": "Automated",
    "description": "Services and ports can be accepted or explicitly rejected. Note: • Changing firewall settings while connected over network can result in being locked out of the system • The remediation command opens up the port to traffic from all sources. Consult ufw documentation and set any restrictions in compliance with site policy",
    "rationale": "To reduce the attack surface of a system, all services and ports should be blocked unless required. • Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic. • Without a firewall rule configured for open ports, the default firewall policy will drop all packets to these ports. • Required ports should have a firewall rule created to allow approved connections in accordance with local site policy. • Unapproved ports should have an explicit deny rule created.",
    "audit": "Run the following script to verify a firewall rule exists for all open ports: #!/usr/bin/env bash { unset a_ufwout;unset a_openports while read -r l_ufwport; do [ -n \"$l_ufwport\" ] && a_ufwout+=(\"$l_ufwport\") done < <(ufw status verbose | grep -Po '^\\h*\\d+\\b' | sort -u) while read -r l_openport; do [ -n \"$l_openport\" ] && a_openports+=(\"$l_openport\") done < <(ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ && $5!~/\\[?::1\\]?:/) {split($5, a, \":\"); print a[2]}' | sort -u) a_diff=(\"$(printf '%s\\n' \"${a_openports[@]}\" \"${a_ufwout[@]}\" \"${a_ufwout[@]}\" | sort | uniq -u)\") if [[ -n \"${a_diff[*]}\" ]]; then echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n- The following port(s) don't have a rule in UFW: $(printf '%s\\n' \\\\n\"${a_diff[*]}\")\\n- End List\" else echo -e \"\\n - Audit Passed -\\n- All open ports have a rule in UFW\\n\" fi }",
    "remediation": "For each port identified in the audit which does not have a firewall rule, evaluate the service listening on the port and add a rule for accepting or denying inbound connections in accordance with local site policy: Examples: # ufw allow in <port>/<tcp or udp protocol> # ufw deny in <port>/<tcp or udp protocol> Note: Examples create rules for from any, to any. More specific rules should be concentered when allowing inbound traffic e.g only traffic from this network. Example to allow traffic on port 443 using the tcp protocol from the 192.168.1.0 network: ufw allow from 192.168.1.0/24 to any proto tcp port 443 References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "ufw_rules_open_ports_configured",
      "ufw_rules_all_ports_restricted",
      "ufw_rules_explicit_deny_enabled",
      "ufw_rules_default_deny_policy",
      "ufw_rules_inbound_traffic_restricted",
      "ufw_rules_outbound_traffic_restricted",
      "ufw_rules_port_specific_configured",
      "ufw_rules_service_specific_configured",
      "ufw_rules_lockout_prevention_configured",
      "ufw_rules_source_restrictions_applied"
    ]
  },
  {
    "id": "3.4.1.7",
    "title": "Ensure ufw default deny firewall policy",
    "assessment": "Automated",
    "description": "A default deny policy on connections ensures that any unconfigured network usage will be rejected. Note: Any port or protocol without a explicit allow before the default deny will be blocked",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage. Impact: Any port and protocol not explicitly allowed will be blocked. The following rules should be considered before applying the default deny. ufw allow git ufw allow in http ufw allow out http <- required for apt to connect to repository ufw allow in https ufw allow out https ufw allow out 53 ufw logging on",
    "audit": "Run the following command and verify that the default policy for incoming , outgoing , and routed directions is deny , reject , or disabled : # ufw status verbose | grep Default: Example output: Default: deny (incoming), deny (outgoing), disabled (routed)",
    "remediation": "Run the following commands to implement a default deny policy: # ufw default deny incoming # ufw default deny outgoing # ufw default deny routed References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Any port and protocol not explicitly allowed will be blocked. The following rules should be considered before applying the default deny. ufw allow git ufw allow in http ufw allow out http <- required for apt to connect to repository ufw allow in https ufw allow out https ufw allow out 53 ufw logging on",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "firewall_ufw_default_deny_policy",
      "firewall_ufw_default_deny_all",
      "firewall_ufw_deny_all_unconfigured",
      "firewall_ufw_deny_unconfigured_connections",
      "firewall_ufw_default_deny_inbound",
      "firewall_ufw_default_deny_outbound",
      "firewall_ufw_deny_all_unconfigured_ports",
      "firewall_ufw_deny_unconfigured_protocols"
    ]
  },
  {
    "id": "3.4.2.1",
    "title": "Ensure nftables is installed",
    "assessment": "Automated",
    "description": "nftables provides a new in-kernel packet classification framework that is based on a network-specific Virtual Machine (VM) and a new nft userspace command line tool. nftables reuses the existing Netfilter subsystems such as the existing hook infrastructure, the connection tracking system, NAT, userspace queuing and logging subsystem. Notes: • nftables is available in Linux kernel 3.13 and newer • Only one firewall utility should be installed and configured • Changing firewall settings while connected over the network can result in being locked out of the system",
    "rationale": "nftables is a subsystem of the Linux kernel that can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host.",
    "audit": "Run the following command to verify that nftables is installed: # dpkg-query -s nftables | grep 'Status: install ok installed' Status: install ok installed",
    "remediation": "Run the following command to install nftables: # apt install nftables References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "compute_firewall_nftables_installed",
      "compute_firewall_single_utility_installed",
      "compute_firewall_nftables_enabled",
      "compute_firewall_nftables_configured",
      "compute_firewall_nftables_kernel_compatible"
    ]
  },
  {
    "id": "3.4.2.2",
    "title": "Ensure ufw is uninstalled or disabled with nftables",
    "assessment": "Automated",
    "description": "Uncomplicated Firewall (UFW) is a program for managing a netfilter firewall designed to be easy to use.",
    "rationale": "Running both the nftables service and ufw may lead to conflict and unexpected results.",
    "audit": "Run the following commands to verify that ufw is either not installed or inactive. Only one of the following needs to pass. Run the following command to verify that ufw is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' ufw dpkg-query: no packages found matching ufw -OR- Run the following commands to verify ufw is disabled and ufw.service is not enabled: # ufw status Status: inactive # systemctl is-enabled ufw.service masked",
    "remediation": "Run one of the following to either remove ufw or disable ufw and mask ufw.service: Run the following command to remove ufw: # apt purge ufw -OR- Run the following commands to disable ufw and mask ufw.service: # ufw disable # systemctl stop ufw.service # systemctl mask ufw.service Note: ufw disable needs to be run before systemctl mask ufw.service in order to correctly disable UFW References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "firewall_ufw_uninstalled",
      "firewall_ufw_disabled",
      "firewall_nftables_enabled",
      "firewall_ufw_not_installed_with_nftables",
      "firewall_ufw_disabled_with_nftables_active"
    ]
  },
  {
    "id": "3.4.2.3",
    "title": "Ensure iptables are flushed with nftables",
    "assessment": "Manual",
    "description": "nftables is a replacement for iptables, ip6tables, ebtables and arptables",
    "rationale": "It is possible to mix iptables and nftables. However, this increases complexity and also the chance to introduce errors. For simplicity flush out all iptables rules, and ensure it is not loaded",
    "audit": "Run the following commands to ensure no iptables rules exist For iptables: # iptables -L No rules should be returned For ip6tables: # ip6tables -L No rules should be returned",
    "remediation": "Run the following commands to flush iptables: For iptables: # iptables -F For ip6tables: # ip6tables -F References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "compute_iptables_flushed_with_nftables",
      "compute_firewall_nftables_replacement",
      "compute_iptables_nftables_compatibility",
      "compute_network_nftables_primary",
      "compute_iptables_deprecated_nftables",
      "compute_firewall_nftables_enabled",
      "compute_iptables_legacy_flushed",
      "compute_network_nftables_active"
    ]
  },
  {
    "id": "3.4.2.4",
    "title": "Ensure a nftables table exists",
    "assessment": "Automated",
    "description": "Tables hold chains. Each table only has one address family and only applies to packets of this family. Tables can have one of five families.",
    "rationale": "nftables doesn't have any default tables. Without a table being build, nftables will not filter network traffic. Impact: Adding rules to a running nftables can cause loss of connectivity to the system",
    "audit": "Run the following command to verify that a nftables table exists: # nft list tables Return should include a list of nftables: Example: table inet filter",
    "remediation": "Run the following command to create a table in nftables # nft create table inet <table name> Example: # nft create table inet filter References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Adding rules to a running nftables can cause loss of connectivity to the system",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "nftables_table_exists",
      "nftables_table_address_family_valid",
      "nftables_table_chain_association_valid",
      "nftables_table_family_compliance",
      "nftables_table_packet_filtering_enabled"
    ]
  },
  {
    "id": "3.4.2.5",
    "title": "Ensure nftables base chains exist",
    "assessment": "Automated",
    "description": "Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.",
    "rationale": "If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables. Impact: If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity. Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop",
    "audit": "Run the following commands and verify that base chains exist for INPUT. # nft list ruleset | grep 'hook input' type filter hook input priority 0; Run the following commands and verify that base chains exist for FORWARD. # nft list ruleset | grep 'hook forward' type filter hook forward priority 0; Run the following commands and verify that base chains exist for OUTPUT. # nft list ruleset | grep 'hook output' type filter hook output priority 0;",
    "remediation": "Run the following command to create the base chains: # nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 \\; } Example: # nft create chain inet filter input { type filter hook input priority 0 \\; } # nft create chain inet filter forward { type filter hook forward priority 0 \\; } # nft create chain inet filter output { type filter hook output priority 0 \\; } References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity. Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "nftables_chain_base_exists",
      "nftables_chain_base_configured",
      "nftables_chain_base_entry_point_valid",
      "nftables_chain_base_packet_flow_verified",
      "nftables_chain_base_regular_chain_linked"
    ]
  },
  {
    "id": "3.4.2.6",
    "title": "Ensure nftables loopback traffic is configured",
    "assessment": "Automated",
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit": "Run the following commands to verify that the loopback interface is configured: Run the following command to verify the loopback interface is configured to accept network traffic: # nft list ruleset | awk '/hook input/,/}/' | grep 'iif \"lo\" accept' Example output: iif \"lo\" accept Run the following command to verify network traffic from an iPv4 loopback interface is configured to drop: # nft list ruleset | awk '/hook input/,/}/' | grep 'ip saddr' Example output: ip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop -IF- IPv6 is enabled on the system: Run the following command to verify network traffic from an iPv6 loopback interface is configured to drop: # nft list ruleset | awk '/hook input/,/}/' | grep 'ip6 saddr' Example output: ip6 saddr ::1 counter packets 0 bytes 0 drop",
    "remediation": "Run the following commands to implement the loopback rules: # nft add rule inet filter input iif lo accept # nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop -IF- IPv6 is enabled on the system: Run the following command to implement the IPv6 loopback rule: # nft add rule inet filter input ip6 saddr ::1 counter drop References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "nftables_loopback_traffic_configured",
      "nftables_loopback_interface_accept_enabled",
      "nftables_non_loopback_interface_deny_enabled",
      "nftables_loopback_network_protected",
      "nftables_loopback_traffic_restricted"
    ]
  },
  {
    "id": "3.4.2.7",
    "title": "Ensure nftables outbound and established connections are configured",
    "assessment": "Manual",
    "description": "Configure the firewall rules for new outbound, and established connections",
    "rationale": "If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.",
    "audit": "Run the following commands and verify all rules for established incoming connections match site policy: site policy: # nft list ruleset | awk '/hook input/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' Output should be similar to: ip protocol tcp ct state established accept ip protocol udp ct state established accept ip protocol icmp ct state established accept Run the folllowing command and verify all rules for new and established outbound connections match site policy # nft list ruleset | awk '/hook output/,/}/' | grep -E 'ip protocol (tcp|udp|icmp) ct state' Output should be similar to: ip protocol tcp ct state established,related,new accept ip protocol udp ct state established,related,new accept ip protocol icmp ct state established,related,new accept",
    "remediation": "Configure nftables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections: # nft add rule inet filter input ip protocol tcp ct state established accept # nft add rule inet filter input ip protocol udp ct state established accept # nft add rule inet filter input ip protocol icmp ct state established accept # nft add rule inet filter output ip protocol tcp ct state new,related,established accept # nft add rule inet filter output ip protocol udp ct state new,related,established accept # nft add rule inet filter output ip protocol icmp ct state new,related,established accept References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "firewall_nftables_outbound_configured",
      "firewall_nftables_established_connections_configured",
      "firewall_nftables_connections_configured",
      "firewall_nftables_rules_configured",
      "firewall_nftables_outbound_established_configured"
    ]
  },
  {
    "id": "3.4.2.8",
    "title": "Ensure nftables default deny firewall policy",
    "assessment": "Automated",
    "description": "Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.",
    "rationale": "There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack. It is easier to white list acceptable usage than to black list unacceptable usage. Note: Changing firewall settings while connected over network can result in being locked out of the system. Impact: If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity. Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop",
    "audit": "Run the following commands and verify that base chains contain a policy of DROP. # nft list ruleset | grep 'hook input' type filter hook input priority 0; policy drop; # nft list ruleset | grep 'hook forward' type filter hook forward priority 0; policy drop; # nft list ruleset | grep 'hook output' type filter hook output priority 0; policy drop;",
    "remediation": "Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy: # nft chain <table family> <table name> <chain name> { policy drop \\; } Example: # nft chain inet filter input { policy drop \\; } # nft chain inet filter forward { policy drop \\; } # nft chain inet filter output { policy drop \\; } Default Value: accept References: 1. Manual Page nft 2. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "If configuring nftables over ssh, creating a base chain with a policy of drop will cause loss of connectivity. Ensure that a rule allowing ssh has been added to the base chain prior to setting the base chain's policy to drop",
    "references": "1. Manual Page nft 2. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "nftables_chain_default_deny_policy",
      "nftables_chain_policy_deny_all",
      "nftables_base_chain_deny_configured",
      "nftables_chain_default_verdict_deny",
      "nftables_firewall_policy_default_deny"
    ]
  },
  {
    "id": "3.4.2.9",
    "title": "Ensure nftables service is enabled",
    "assessment": "Automated",
    "description": "The nftables service allows for the loading of nftables rulesets during boot, or starting on the nftables service",
    "rationale": "The nftables service restores the nftables rules from the rules files referenced in the /etc/nftables.conf file during boot or the starting of the nftables service",
    "audit": "Run the following command and verify that the nftables service is enabled: # systemctl is-enabled nftables enabled",
    "remediation": "Run the following command to enable the nftables service: # systemctl enable nftables References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "system_nftables_service_enabled",
      "system_nftables_ruleset_loaded",
      "system_nftables_boot_enabled",
      "system_nftables_service_running",
      "system_nftables_startup_configured"
    ]
  },
  {
    "id": "3.4.2.10",
    "title": "Ensure nftables rules are permanent",
    "assessment": "Automated",
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames. The nftables service reads the /etc/nftables.conf file for a nftables file or files to include in the nftables ruleset. A nftables ruleset containing the input, forward, and output base chains allow network traffic to be filtered.",
    "rationale": "Changes made to nftables ruleset only affect the live system, you will also need to configure the nftables ruleset to apply on boot",
    "audit": "Run the following commands to verify that input, forward, and output base chains are configured to be applied to a nftables ruleset on boot: Run the following command to verify the input base chain: # [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook input/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\"\\\"\",\"\",$2);print $2 }' /etc/nftables.conf) Output should be similar to: type filter hook input priority 0; policy drop; # Ensure loopback traffic is configured iif \"lo\" accept ip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop ip6 saddr ::1 counter packets 0 bytes 0 drop # Ensure established connections are configured ip protocol tcp ct state established accept ip protocol udp ct state established accept ip protocol icmp ct state established accept # Accept port 22(SSH) traffic from anywhere tcp dport ssh accept # Accept ICMP and IGMP from anywhere icmpv6 type { destination-unreachable, packet-too-big, time- exceeded, parameter-problem, mld-listener-query, mld-listener-report, mld- listener-done, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd- neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listener- report } accept Review the input base chain to ensure that it follows local site policy Run the following command to verify the forward base chain: # [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook forward/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\"\\\"\",\"\",$2);print $2 }' /etc/nftables.conf) Output should be similar to: # Base chain for hook forward named forward (Filters forwarded network packets) chain forward { type filter hook forward priority 0; policy drop; } Review the forward base chain to ensure that it follows local site policy. Run the following command to verify the forward base chain: # [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook output/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\"\\\"\",\"\",$2);print $2 }' /etc/nftables.conf) Output should be similar to:  # Base chain for hook output named output (Filters outbound network packets) chain output { type filter hook output priority 0; policy drop; # Ensure outbound and established connections are configured ip protocol tcp ct state established,related,new accept ip protocol tcp ct state established,related,new accept ip protocol udp ct state established,related,new accept ip protocol icmp ct state established,related,new accept } Review the output base chain to ensure that it follows local site policy.",
    "remediation": "Edit the /etc/nftables.conf file and un-comment or add a line with include <Absolute path to nftables rules file> for each nftables file you want included in the nftables ruleset on boot Example: # vi /etc/nftables.conf Add the line: include \"/etc/nftables.rules\" References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "nftables_ruleset_permanent",
      "nftables_config_persistent",
      "nftables_rules_file_immutable",
      "nftables_service_ruleset_loaded",
      "nftables_conf_file_exists",
      "nftables_ruleset_base_chains_configured",
      "nftables_ruleset_input_chain_enabled",
      "nftables_ruleset_forward_chain_enabled",
      "nftables_ruleset_output_chain_enabled",
      "nftables_ruleset_traffic_filtered"
    ]
  },
  {
    "id": "3.4.3.1.1",
    "title": "Ensure iptables packages are installed",
    "assessment": "Automated",
    "description": "iptables is a utility program that allows a system administrator to configure the tables provided by the Linux kernel firewall, implemented as different Netfilter modules, and the chains and rules it stores. Different kernel modules and programs are used for different protocols; iptables applies to IPv4, ip6tables to IPv6, arptables to ARP, and ebtables to Ethernet frames.",
    "rationale": "A method of configuring and maintaining firewall rules is necessary to configure a Host Based Firewall.",
    "audit": "Run the following command to verify that iptables and iptables-persistent are installed: # apt list iptables iptables-persistent | grep installed iptables-persistent/<version> [installed,automatic] iptables/<version> [installed,automatic]",
    "remediation": "Run the following command to install iptables and iptables-persistent # apt install iptables iptables-persistent References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "compute_firewall_iptables_installed",
      "compute_firewall_ip6tables_installed",
      "compute_firewall_arptables_installed",
      "compute_firewall_ebtables_installed",
      "compute_firewall_netfilter_modules_enabled",
      "compute_firewall_kernel_firewall_enabled"
    ]
  },
  {
    "id": "3.4.3.1.2",
    "title": "Ensure nftables is not installed with iptables",
    "assessment": "Automated",
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames and is the successor to iptables.",
    "rationale": "Running both iptables and nftables may lead to conflict.",
    "audit": "Run the following commend to verify that nftables is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' nftables nftables       unknown ok not-installed        not-installed",
    "remediation": "Run the following command to remove nftables: # apt purge nftables References: 1. NIST SP 800-53 Rev. 5: CA-9, CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, CM-7",
    "function_names": [
      "linux_nftables_not_installed_with_iptables",
      "linux_nftables_iptables_conflict_absent",
      "linux_nftables_iptables_exclusive",
      "linux_nftables_iptables_coexistence_disabled",
      "linux_nftables_iptables_installed_exclusively"
    ]
  },
  {
    "id": "3.4.3.1.3",
    "title": "Ensure ufw is uninstalled or disabled with iptables",
    "assessment": "Automated",
    "description": "Uncomplicated Firewall (UFW) is a program for managing a netfilter firewall designed to be easy to use. • Uses a command-line interface consisting of a small number of simple commands • Uses iptables for configuration",
    "rationale": "Running iptables.persistent with ufw enabled may lead to conflict and unexpected results.",
    "audit": "Run the following commands to verify that ufw is either not installed or disabled. Only one of the following needs to pass. Run the following command to verify that ufw is not installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' ufw ufw       unknown ok not-installed        not-installed Run the following command to verify ufw is disabled: # ufw status Status: inactive Run the following commands to verify that the ufw service is masked: # systemctl is-enabled ufw masked",
    "remediation": "Run one of the following commands to either remove ufw or stop and mask ufw Run the following command to remove ufw: # apt purge ufw -OR- Run the following commands to disable ufw: # ufw disable # systemctl stop ufw # systemctl mask ufw Note: ufw disable needs to be run before systemctl mask ufw in order to correctly disable UFW References: 1. NIST SP 800-53 Rev. 5: SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-7",
    "function_names": [
      "firewall_ufw_uninstalled",
      "firewall_ufw_disabled",
      "firewall_iptables_enabled",
      "firewall_ufw_not_installed",
      "firewall_iptables_active",
      "firewall_ufw_no_rules",
      "firewall_iptables_default_policy",
      "firewall_ufw_service_stopped",
      "firewall_iptables_running",
      "firewall_ufw_package_removed"
    ]
  },
  {
    "id": "3.4.3.2.1",
    "title": "Ensure iptables default deny firewall policy",
    "assessment": "Automated",
    "description": "A default deny all policy on connections ensures that any unconfigured network usage will be rejected. Notes: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit": "Run the following command and verify that the policy for the INPUT , OUTPUT , and FORWARD chains is DROP or REJECT : # iptables -L -n Chain INPUT (policy DROP) Chain FORWARD (policy DROP) Chain OUTPUT (policy DROP)",
    "remediation": "Run the following commands to implement a default DROP policy: # iptables -P INPUT DROP # iptables -P OUTPUT DROP # iptables -P FORWARD DROP References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "firewall_iptables_default_deny_policy",
      "firewall_iptables_deny_all_unconfigured",
      "firewall_iptables_boot_default_deny",
      "firewall_iptables_deny_all_policy_active",
      "firewall_iptables_deny_unconfigured_connections"
    ]
  },
  {
    "id": "3.4.3.2.2",
    "title": "Ensure iptables loopback traffic is configured",
    "assessment": "Automated",
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8). Notes: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit": "Run the following commands and verify output includes the listed rules in order (packet and byte counts may differ): # iptables -L INPUT -v -n Chain INPUT (policy DROP 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source destination 0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0 0     0 DROP       all  --  *      *       127.0.0.0/8          0.0.0.0/0 # iptables -L OUTPUT -v -n Chain OUTPUT (policy DROP 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source destination 0     0 ACCEPT     all  --  *      lo      0.0.0.0/0            0.0.0.0/0",
    "remediation": "Run the following commands to implement the loopback rules: # iptables -A INPUT -i lo -j ACCEPT # iptables -A OUTPUT -o lo -j ACCEPT # iptables -A INPUT -s 127.0.0.0/8 -j DROP References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "network_iptables_loopback_accept_enabled",
      "network_iptables_loopback_deny_other_interfaces",
      "network_iptables_loopback_traffic_restricted",
      "network_iptables_loopback_interface_configured",
      "network_iptables_loopback_network_protected"
    ]
  },
  {
    "id": "3.4.3.2.3",
    "title": "Ensure iptables outbound and established connections are configured",
    "assessment": "Manual",
    "description": "Configure the firewall rules for new outbound, and established connections. Notes: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.",
    "audit": "Run the following command and verify all rules for new outbound, and established connections match site policy: # iptables -L -v -n",
    "remediation": "Configure iptables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections: # iptables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A OUTPUT -p udp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT # iptables -A INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT # iptables -A INPUT -p udp -m state --state ESTABLISHED -j ACCEPT # iptables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "firewall_rules_outbound_established_configured",
      "firewall_connections_outbound_established_allowed",
      "iptables_outbound_established_rules_configured",
      "firewall_policy_outbound_established_enabled",
      "iptables_connections_outbound_established_configured"
    ]
  },
  {
    "id": "3.4.3.2.4",
    "title": "Ensure iptables firewall rules exist for all open ports",
    "assessment": "Automated",
    "description": "Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic. Note: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well • The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy",
    "rationale": "Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.",
    "audit": "Run the following command to determine open ports: # ss -4tuln Netid  State      Recv-Q Send-Q    Local Address:Port                   Peer Address:Port udp    UNCONN     0      0                     *:68 *:* udp    UNCONN     0      0                     *:123 *:* tcp    LISTEN     0      128                   *:22 *:* Run the following command to determine firewall rules: # iptables -L INPUT -v -n Chain INPUT (policy DROP 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source destination 0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0 0     0 DROP       all  --  *      *       127.0.0.0/8          0.0.0.0/0 0     0 ACCEPT     tcp  --  *      *       0.0.0.0/0            0.0.0.0/0 tcp dpt:22 state NEW Verify all open ports listening on non-localhost addresses have at least one firewall rule. The last line identified by the \"tcp dpt:22 state NEW\" identifies it as a firewall rule for new connections on tcp port 22.",
    "remediation": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections: # iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "compute_firewall_rules_exist_for_open_ports",
      "compute_firewall_rules_exist_for_all_open_ports",
      "compute_iptables_rules_exist_for_open_ports",
      "compute_iptables_rules_exist_for_all_open_ports",
      "compute_network_firewall_rules_exist_for_open_ports",
      "compute_network_iptables_rules_exist_for_open_ports",
      "compute_firewall_open_ports_restricted",
      "compute_iptables_open_ports_restricted",
      "compute_firewall_open_ports_governed",
      "compute_iptables_open_ports_governed"
    ]
  },
  {
    "id": "3.4.3.3.1",
    "title": "Ensure ip6tables default deny firewall policy",
    "assessment": "Automated",
    "description": "A default deny all policy on connections ensures that any unconfigured network usage will be rejected. Note: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit": "Run the following command and verify that the policy for the INPUT, OUTPUT, and FORWARD chains is DROP or REJECT: # ip6tables -L -n Chain INPUT (policy DROP) Chain FORWARD (policy DROP) Chain OUTPUT (policy DROP) -OR- Verify IPv6 is disabled: Run the following script. Output will confirm if IPv6 is enabled on the system. #!/usr/bin/bash { if grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable; then echo -e \" - IPv6 is enabled on the system\" else echo -e \" - IPv6 is not enabled on the system\" fi }",
    "remediation": "IF IPv6 is enabled on your system: Run the following commands to implement a default DROP policy: # ip6tables -P INPUT DROP # ip6tables -P OUTPUT DROP # ip6tables -P FORWARD DROP References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "firewall_ip6tables_default_deny_policy",
      "firewall_ip6tables_default_deny_all",
      "network_ip6tables_deny_all_policy",
      "network_ip6tables_default_deny_connections",
      "compute_ip6tables_deny_all_active",
      "compute_ip6tables_default_deny_configured",
      "system_ip6tables_deny_all_policy",
      "system_ip6tables_default_deny_active"
    ]
  },
  {
    "id": "3.4.3.3.2",
    "title": "Ensure ip6tables loopback traffic is configured",
    "assessment": "Automated",
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (::1). Note: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (::1) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit": "Run the following commands and verify output includes the listed rules in order (packet and byte counts may differ): # ip6tables -L INPUT -v -n Chain INPUT (policy DROP 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source destination 0     0 ACCEPT     all      lo     *       ::/0                 ::/0 0     0 DROP       all      *      *       ::1                  ::/0 # ip6tables -L OUTPUT -v -n Chain OUTPUT (policy DROP 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source destination 0     0 ACCEPT     all      *      lo      ::/0                 ::/0 -OR- Verify IPv6 is disabled: Run the following script. Output will confirm if IPv6 is enabled on the system. #!/usr/bin/bash { if grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable; then echo -e \" - IPv6 is enabled on the system\" else echo -e \" - IPv6 is not enabled on the system\" fi }",
    "remediation": "Run the following commands to implement the loopback rules: # ip6tables -A INPUT -i lo -j ACCEPT # ip6tables -A OUTPUT -o lo -j ACCEPT # ip6tables -A INPUT -s ::1 -j DROP References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "network_firewall_loopback_ipv6_configured",
      "network_firewall_loopback_ipv6_deny_other_interfaces",
      "network_firewall_loopback_ipv6_active_policy",
      "network_firewall_loopback_ipv6_default_policy_configured"
    ]
  },
  {
    "id": "3.4.3.3.3",
    "title": "Ensure ip6tables outbound and established connections are configured",
    "assessment": "Manual",
    "description": "Configure the firewall rules for new outbound, and established IPv6 connections. Note: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "If rules are not in place for new outbound, and established connections all packets will be dropped by the default policy preventing network usage.",
    "audit": "Run the following command and verify all rules for new outbound, and established connections match site policy: # ip6tables -L -v -n -OR- Verify IPv6 is disabled:_ Run the following script. Output will confirm if IPv6 is enabled on the system. #!/usr/bin/bash { if grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable; then echo -e \" - IPv6 is enabled on the system\" else echo -e \" - IPv6 is not enabled on the system\" fi }",
    "remediation": "Configure iptables in accordance with site policy. The following commands will implement a policy to allow all outbound connections and all established connections: # ip6tables -A OUTPUT -p tcp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A OUTPUT -p udp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A OUTPUT -p icmp -m state --state NEW,ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p tcp -m state --state ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p udp -m state --state ESTABLISHED -j ACCEPT # ip6tables -A INPUT -p icmp -m state --state ESTABLISHED -j ACCEPT References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "firewall_ipv6_outbound_configured",
      "firewall_ipv6_established_connections_configured",
      "firewall_ipv6_rules_configured",
      "firewall_ipv6_default_policy_configured",
      "firewall_ipv6_active_rules_configured"
    ]
  },
  {
    "id": "3.4.3.3.4",
    "title": "Ensure ip6tables firewall rules exist for all open ports",
    "assessment": "Automated",
    "description": "Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic. Note: • Changing firewall settings while connected over network can result in being locked out of the system • Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well • The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy",
    "rationale": "Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.",
    "audit": "Run the following command to determine open ports: # ss -6tuln Netid  State      Recv-Q Send-Q    Local Address:Port                   Peer Address:Port udp    UNCONN     0      0                   ::1:123 :::* udp    UNCONN     0      0                    :::123 :::* tcp    LISTEN     0      128                  :::22 :::* tcp    LISTEN     0      20                  ::1:25 :::* Run the following command to determine firewall rules: # ip6tables -L INPUT -v -n Chain INPUT (policy DROP 0 packets, 0 bytes) pkts bytes target     prot opt in     out     source destination 0     0 ACCEPT     all      lo     *       ::/0                 ::/0 0     0 DROP       all      *      *       ::1                  ::/0 0     0 ACCEPT     tcp      *      *       ::/0                 ::/0 tcp dpt:22 state NEW Verify all open ports listening on non-localhost addresses have at least one firewall rule. The last line identified by the \"tcp dpt:22 state NEW\" identifies it as a firewall rule for new connections on tcp port 22. -OR- Verify IPv6 is disabled: Run the following script. Output will confirm if IPv6 is enabled on the system: #!/usr/bin/bash { if grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable; then echo -e \" - IPv6 is enabled on the system\" else echo -e \" - IPv6 is not enabled on the system\" fi }",
    "remediation": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections: # ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT References: 1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CA-9, SC-7",
    "function_names": [
      "compute_instance_ip6tables_rules_exist",
      "compute_firewall_ip6tables_open_ports_configured",
      "compute_network_ip6tables_all_ports_restricted",
      "compute_instance_ip6tables_non_loopback_ports_protected",
      "compute_firewall_ip6tables_active_rules_applied",
      "compute_network_ip6tables_default_policy_configured",
      "compute_instance_ip6tables_remediation_verified",
      "compute_firewall_ip6tables_port_restrictions_compliant"
    ]
  },
  {
    "id": "4.1.1",
    "title": "Ensure cron daemon is enabled and active",
    "assessment": "Automated",
    "description": "The cron daemon is used to execute batch jobs on the system. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "While there may not be user jobs that need to be run on the system, the system does have maintenance jobs that may include security monitoring that have to run, and cron is used to execute them.",
    "audit": "Run the following command to verify cron is enabled: # systemctl is-enabled cron enabled Run the following command to verify that cron is active: # systemctl is-active cron active",
    "remediation": "Run the following command to enable and start cron: # systemctl unmask cron # systemctl --now enable cron References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1562, T1562.001 TA0005 M1018",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1562, T1562.001 TA0005 M1018",
    "function_names": [
      "cron_daemon_enabled",
      "cron_daemon_active",
      "cron_daemon_secure_config",
      "cron_daemon_removed_if_unused",
      "cron_daemon_alternative_secure"
    ]
  },
  {
    "id": "4.1.2",
    "title": "Ensure permissions on /etc/crontab are configured",
    "assessment": "Automated",
    "description": "The /etc/crontab file is used by cron to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that only the owner can access the file. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "This file contains information on what system jobs are run by cron. Write access to these files could provide unprivileged users with the ability to elevate their privileges. Read access to these files could provide users with the ability to gain insight on system jobs that run on the system and could provide them a way to gain unauthorized privileged access.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/crontab Access: (600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/crontab : # chown root:root /etc/crontab # chmod og-rwx /etc/crontab Default Value: Access: (644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "cron_file_owner_root",
      "cron_file_group_owner_root",
      "cron_file_permissions_restricted",
      "cron_file_no_world_writable",
      "cron_file_no_group_writable",
      "cron_file_no_other_readable",
      "cron_file_no_other_writable",
      "cron_file_no_other_executable",
      "cron_file_no_group_readable",
      "cron_file_no_group_executable"
    ]
  },
  {
    "id": "4.1.3",
    "title": "Ensure permissions on /etc/cron.hourly are configured",
    "assessment": "Automated",
    "description": "This directory contains system cron jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.hourly/ Access: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on the /etc/cron.hourly directory: # chown root:root /etc/cron.hourly/ # chmod og-rwx /etc/cron.hourly/ Default Value: Access: (755/drwxr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)  References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "cron_directory_permissions_configured",
      "cron_hourly_directory_restricted_access",
      "cron_hourly_directory_root_only_access",
      "cron_hourly_directory_no_world_writable",
      "cron_hourly_directory_no_group_writable",
      "cron_hourly_directory_no_other_writable",
      "cron_hourly_directory_secure_permissions",
      "cron_hourly_directory_no_user_modification",
      "cron_hourly_directory_admin_only_access",
      "cron_hourly_directory_no_public_access"
    ]
  },
  {
    "id": "4.1.4",
    "title": "Ensure permissions on /etc/cron.daily are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.daily directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.daily/ Access: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on the /etc/cron.daily directory: # chown root:root /etc/cron.daily/ # chmod og-rwx /etc/cron.daily/ Default Value: Access: (755/drwxr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)  References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "cron_directory_permissions_restricted",
      "cron_daily_directory_secure_permissions",
      "cron_daily_directory_root_ownership",
      "cron_daily_directory_read_write_restricted",
      "cron_daily_directory_group_ownership",
      "cron_daily_directory_user_ownership",
      "cron_daily_directory_access_controlled",
      "cron_daily_directory_permissions_configured",
      "cron_daily_directory_secure_access",
      "cron_daily_directory_non_root_access_denied"
    ]
  },
  {
    "id": "4.1.5",
    "title": "Ensure permissions on /etc/cron.weekly are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.weekly directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.weekly/ Access: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on the /etc/cron.weekly directory: # chown root:root /etc/cron.weekly/ # chmod og-rwx /etc/cron.weekly/ Default Value: Access: (755/drwxr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)  References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "cron_directory_permissions_restricted",
      "cron_weekly_directory_secure_permissions",
      "cron_weekly_directory_root_ownership",
      "cron_weekly_directory_read_write_restricted",
      "cron_directory_access_controlled",
      "cron_weekly_directory_group_ownership",
      "cron_weekly_directory_user_ownership",
      "cron_directory_permissions_no_world_writable",
      "cron_weekly_directory_permissions_no_other_access",
      "cron_directory_permissions_no_user_modification"
    ]
  },
  {
    "id": "4.1.6",
    "title": "Ensure permissions on /etc/cron.monthly are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.monthly directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.monthly/ Access: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on the /etc/cron.monthly directory: # chown root:root /etc/cron.monthly/ # chmod og-rwx /etc/cron.monthly/ Default Value: Access: (755/drwxr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)  References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "cron_directory_permissions_configured",
      "cron_monthly_directory_restricted_access",
      "cron_monthly_directory_root_ownership",
      "cron_monthly_directory_no_world_writable",
      "cron_monthly_directory_no_group_writable",
      "cron_monthly_directory_no_other_writable",
      "cron_monthly_directory_permissions_secure",
      "cron_monthly_directory_access_controlled",
      "cron_monthly_directory_no_user_modification",
      "cron_monthly_directory_restrictive_permissions"
    ]
  },
  {
    "id": "4.1.7",
    "title": "Ensure permissions on /etc/cron.d are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.d directory contains system cron jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from /etc/crontab, but require more granular control as to when they run. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.d/ Access: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on the /etc/cron.d directory: # chown root:root /etc/cron.d/ # chmod og-rwx /etc/cron.d/ Default Value: Access: (755/drwxr-xr-x) Uid: ( 0/ root) Gid: ( 0/ root)  References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "cron_directory_permissions_restricted",
      "cron_directory_root_ownership",
      "cron_directory_no_world_writable",
      "cron_directory_no_group_writable",
      "cron_directory_no_other_writable",
      "cron_directory_no_user_access",
      "cron_directory_no_group_access",
      "cron_directory_no_other_access",
      "cron_directory_permissions_configured",
      "cron_directory_secure_permissions"
    ]
  },
  {
    "id": "4.1.8",
    "title": "Ensure cron is restricted to authorized users",
    "assessment": "Automated",
    "description": "Configure /etc/cron.allow to allow specific users to use this service. If /etc/cron.allow does not exist, then /etc/cron.deny is checked. Any user not specifically defined in this file is allowed to use cron. By removing the file, only users in /etc/cron.allow are allowed to use cron. Note: • Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, cron should be removed, and the alternate method should be secured in accordance with local site policy • Even though a given user is not listed in cron.allow, cron jobs can still be run as that user • The cron.allow file only controls administrative access to the crontab command for scheduling and modifying cron jobs",
    "rationale": "On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit": "Run the following script to verify: • /etc/cron.deny does not exist • /etc/cron.allow does exist • /etc/cron.allow is mode 0640 or more restrictive • /etc/cron.allow is owned by the user root • /etc/cron.allow is group owned by the group crontab -OR- • cron is not installed on the system  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" if dpkg-query -W cron > /dev/null 2>&1; then l_file=\"/etc/cron.allow\" [ -e /etc/cron.deny ] && l_output2=\"$l_output2\\n  - cron.deny exists\" if [ ! -e /etc/cron.allow ]; then l_output2=\"$l_output2\\n  - cron.allow doesn't exist\" else l_mask='0137' l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" while read l_mode l_fown l_fgroup; do if [ $(( $l_mode & $l_mask )) -gt 0 ]; then l_output2=\"$l_output2\\n  - \\\"$l_file\\\" is mode: \\\"$l_mode\\\" (should be mode: \\\"$l_maxperm\\\" or more restrictive)\" else l_output=\"$l_output\\n  - \\\"$l_file\\\" is correctly set to mode: \\\"$l_mode\\\"\" fi if [ \"$l_fown\" != \"root\" ]; then l_output2=\"$l_output2\\n  - \\\"$l_file\\\" is owned by user \\\"$l_fown\\\" (should be owned by \\\"root\\\")\" else l_output=\"$l_output\\n  - \\\"$l_file\\\" is correctly owned by user: \\\"$l_fown\\\"\" fi if [  \"$l_fgroup\" != \"crontab\" ]; then l_output2=\"$l_output2\\n  - \\\"$l_file\\\" is owned by group: \\\"$l_fgroup\\\" (should be owned by group: \\\"crontab\\\")\" else l_output=\"$l_output\\n  - \\\"$l_file\\\" is correctly owned by group: \\\"$l_fgroup\\\"\" fi done < <(stat -Lc '%#a %U %G' \"$l_file\") fi else l_output=\"$l_output\\n  - cron is not installed on the system\" fi if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:$l_output2\\n\" fi }",
    "remediation": "Run the following script to: • Remove /etc/cron.deny if it exists • Create /etc/cron.allow if it doesn't exist • Change ownership of /etc/cron.allow to the root user • Change group ownership of /etc/cron.allow to the group crontab #!/usr/bin/env bash { if dpkg-query -W cron > /dev/null 2>&1; then l_file=\"/etc/cron.allow\" l_mask='0137' l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" if [ -e /etc/cron.deny ]; then echo -e \" - Removing \\\"/etc/cron.deny\\\"\" rm -f /etc/cron.deny fi if [ ! -e /etc/cron.allow ]; then echo -e \" - creating \\\"$l_file\\\"\" touch \"$l_file\" fi while read l_mode l_fown l_fgroup; do if [ $(( $l_mode & $l_mask )) -gt 0 ]; then echo -e \" - Removing excessive permissions from \\\"$l_file\\\"\" chmod u-x,g-wx,o-rwx \"$l_file\" fi if [ \"$l_fown\" != \"root\" ]; then echo -e \" - Changing owner on \\\"$l_file\\\" from: \\\"$l_fown\\\" to: \\\"root\\\"\" chown root \"$l_file\" fi if [ \"$l_fgroup\" != \"crontab\" ]; then echo -e \" - Changing group owner on \\\"$l_file\\\" from: \\\"$l_fgroup\\\" to: \\\"crontab\\\"\" chgrp crontab \"$l_file\" fi done < <(stat -Lc '%#a %U %G' \"$l_file\") else echo -e  \"- cron is not installed on the system, no remediation required\\n\" fi } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "cron_user_authorized_only",
      "cron_allow_file_exists",
      "cron_deny_file_removed",
      "cron_service_restricted_access",
      "cron_job_scheduling_secure",
      "cron_allow_file_configured",
      "cron_user_access_controlled",
      "cron_secure_configuration",
      "cron_alternative_scheduling_secure",
      "cron_admin_access_restricted"
    ]
  },
  {
    "id": "4.1.9",
    "title": "Ensure at is restricted to authorized users",
    "assessment": "Automated",
    "description": "Configure /etc/at.allow to allow specific users to use this service. If /etc/at.allow does not exist, then /etc/at.deny is checked. Any user not specifically defined in this file is allowed to use at. By removing the file, only users in /etc/at.allow are allowed to use at. Note: Other methods, such as systemd timers, exist for scheduling jobs. If another method is used, at should be removed, and the alternate method should be secured in accordance with local site policy",
    "rationale": "On many systems, only the system administrator is authorized to schedule at jobs. Using the at.allow file to control who can run at jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit": "Run the following script to verify: • /etc/at.deny does not exist • /etc/at.allow does exist • /etc/at.allow is mode 0640 or more restrictive • /etc/at.allow is owned by the user root • /etc/at.allow is group owned by the group root -OR- • at is not installed on the system  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" if dpkg-query -W at > /dev/null 2>&1; then l_file=\"/etc/at.allow\" [ -e /etc/at.deny ] && l_output2=\"$l_output2\\n  - at.deny exists\" if [ ! -e /etc/at.allow ]; then l_output2=\"$l_output2\\n  - at.allow doesn't exist\" else l_mask='0137' l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" while read l_mode l_fown l_fgroup; do if [ $(( $l_mode & $l_mask )) -gt 0 ]; then l_output2=\"$l_output2\\n  - \\\"$l_file\\\" is mode: \\\"$l_mode\\\" (should be mode: \\\"$l_maxperm\\\" or more restrictive)\" else l_output=\"$l_output\\n  - \\\"$l_file\\\" is correctly set to mode: \\\"$l_mode\\\"\" fi if [ \"$l_fown\" != \"root\" ]; then l_output2=\"$l_output2\\n  - \\\"$l_file\\\" is owned by user \\\"$l_fown\\\" (should be owned by \\\"root\\\")\" else l_output=\"$l_output\\n  - \\\"$l_file\\\" is correctly owned by user: \\\"$l_fown\\\"\" fi if [ \"$l_fgroup\" != \"root\" ]; then l_output2=\"$l_output2\\n  - \\\"$l_file\\\" is owned by group: \\\"$l_fgroup\\\" (should be owned by group: \\\"root\\\")\" else l_output=\"$l_output\\n  - \\\"$l_file\\\" is correctly owned by group: \\\"$l_fgroup\\\"\" fi done < <(stat -Lc '%#a %U %G' \"$l_file\") fi else l_output=\"$l_output\\n  - at is not installed on the system\" fi if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:$l_output2\\n\" fi }",
    "remediation": "Run the following script to: • Remove /etc/at.deny if it exists • Create /etc/at.allow if it doesn't exist • Change ownership of /etc/at.allow to the root user • Change group ownership of /etc/at.allow to the group root #!/usr/bin/env bash { if dpkg-query -W at > /dev/null 2>&1; then l_file=\"/etc/at.allow\" l_mask='0137' l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" if [ -e /etc/at.deny ]; then echo -e \" - Removing \\\"/etc/at.deny\\\"\" rm -f /etc/at.deny fi if [ ! -e /etc/at.allow ]; then echo -e \" - creating \\\"$l_file\\\"\" touch \"$l_file\" fi while read l_mode l_fown l_fgroup; do if [ $(( $l_mode & $l_mask )) -gt 0 ]; then echo -e \" - Removing excessive permissions from \\\"$l_file\\\"\" chmod u-x,g-wx,o-rwx \"$l_file\" fi if [ \"$l_fown\" != \"root\" ]; then echo -e \" - Changing owner on \\\"$l_file\\\" from: \\\"$l_fown\\\" to: \\\"root\\\"\" chown root \"$l_file\" fi if [ \"$l_fgroup\" != \"root\" ]; then echo -e \" - Changing group owner on \\\"$l_file\\\" from: \\\"$l_fgroup\\\" to: \\\"root\\\"\" chgrp root \"$l_file\" fi done < <(stat -Lc '%#a %U %G' \"$l_file\") else echo -e  \"- cron is not installed on the system, no remediation required\\n\" fi } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "system_at_restricted_to_authorized_users",
      "system_at_allow_configured",
      "system_at_deny_removed",
      "system_at_service_disabled",
      "system_at_alternative_scheduling_configured"
    ]
  },
  {
    "id": "4.2.1",
    "title": "Ensure permissions on /etc/ssh/sshd_config are configured",
    "assessment": "Automated",
    "description": "The file /etc/ssh/sshd_config, and files ending in .conf in the /etc/ssh/sshd_config.d directory, contain configuration specifications for sshd.",
    "rationale": "configuration specifications for sshd need to be protected from unauthorized changes by non-privileged users.",
    "audit": "Run the following command to verify /etc/ssh/sshd_config is: • Mode 0600 or more restrictive • Owned by the root user • Group owned by the group root. # stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/ssh/sshd_config Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/ssh/sshd_config: # chmod u-x,og-rwx /etc/ssh/sshd_config # chown root:root /etc/ssh/sshd_config Default Value: Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "ssh_config_file_permissions_configured",
      "ssh_config_file_owner_correct",
      "ssh_config_file_group_correct",
      "ssh_config_file_mode_restricted",
      "ssh_config_directory_permissions_configured",
      "ssh_config_directory_owner_correct",
      "ssh_config_directory_group_correct",
      "ssh_config_directory_mode_restricted",
      "ssh_config_file_world_writable_disabled",
      "ssh_config_file_world_readable_disabled"
    ]
  },
  {
    "id": "4.2.2",
    "title": "Ensure permissions on SSH private host key files are configured",
    "assessment": "Automated",
    "description": "An SSH private key is one of two files used in SSH public key authentication. In this authentication method, the possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.",
    "rationale": "If an unauthorized user obtains the private SSH host key file, the host could be impersonated",
    "audit": "Run the following script to verify SSH private host key files are mode 0600 or more restrictive, owned be the root user, and owned by the group root or group designated to own openSSH private keys:  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_skgn=\"ssh_keys\" # Group designated to own openSSH keys l_skgid=\"$(awk -F: '($1 == \"'\"$l_skgn\"'\"){print $3}' /etc/group)\" # Get gid of group [ -n \"$l_skgid\" ] && l_agroup=\"(root|$l_skgn)\" || l_agroup=\"root\" unset a_skarr && a_skarr=() # Clear and initialize array while IFS= read -r -d $'\\0' l_file; do # Loop to populate array if grep -Pq ':\\h+OpenSSH\\h+private\\h+key\\b' <<< \"$(file \"$l_file\")\"; then a_skarr+=(\"$(stat -Lc '%n^%#a^%U^%G^%g' \"$l_file\")\") fi done < <(find -L /etc/ssh -xdev -type f -print0) while IFS=\"^\" read -r l_file l_mode l_owner l_group l_gid; do echo \"File: \\\"$l_file\\\" Mode: \\\"$l_mode\\\" Owner: \\\"$l_owner\\\" Group: \\\"$l_group\\\" GID: \\\"$l_gid\\\"\" l_out2=\"\" [ \"$l_gid\" = \"$l_skgid\" ] && l_pmask=\"0137\" || l_pmask=\"0177\" l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then l_out2=\"$l_out2\\n  - Mode: \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\" fi if [ \"$l_owner\" != \"root\" ]; then l_out2=\"$l_out2\\n  - Owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_out2=\"$l_out2\\n  - Owned by group \\\"$l_group\\\" should be group owned by: \\\"${l_agroup//|/ or }\\\"\" fi if [ -n \"$l_out2\" ]; then l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\" else l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n  - Correct: mode ($l_mode), owner ($l_owner), and group owner ($l_group) configured\" fi done <<< \"$(printf '%s\\n' \"${a_skarr[@]}\")\" unset a_skarr if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to set mode, ownership, and group on the private SSH host key files:  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_skgn=\"ssh_keys\" # Group designated to own openSSH keys l_skgid=\"$(awk -F: '($1 == \"'\"$l_skgn\"'\"){print $3}' /etc/group)\" # Get gid of group if [ -n \"$l_skgid\" ]; then l_agroup=\"(root|$l_skgn)\" && l_sgroup=\"$l_skgn\" && l_mfix=\"u-x,g-wx,o- rwx\" else l_agroup=\"root\" && l_sgroup=\"root\" && l_mfix=\"u-x,go-rwx\" fi unset a_skarr && a_skarr=() # Clear and initialize array while IFS= read -r -d $'\\0' l_file; do # Loop to populate array if grep -Pq ':\\h+OpenSSH\\h+private\\h+key\\b' <<< \"$(file \"$l_file\")\"; then a_skarr+=(\"$(stat -Lc '%n^%#a^%U^%G^%g' \"$l_file\")\") fi done < <(find -L /etc/ssh -xdev -type f -print0) while IFS=\"^\" read -r l_file l_mode l_owner l_group l_gid; do l_out2=\"\" [ \"$l_gid\" = \"$l_skgid\" ] && l_pmask=\"0137\" || l_pmask=\"0177\" l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then l_out2=\"$l_out2\\n  - Mode: \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\\n   - Revoking excess permissions\" chmod \"$l_mfix\" \"$l_file\" fi if [ \"$l_owner\" != \"root\" ]; then l_out2=\"$l_out2\\n  - Owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\\n   - Changing ownership to \\\"root\\\"\" chown root \"$l_file\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_out2=\"$l_out2\\n  - Owned by group \\\"$l_group\\\" should be group owned by: \\\"${l_agroup//|/ or }\\\"\\n   - Changing group ownership to \\\"$l_sgroup\\\"\" chgrp \"$l_sgroup\" \"$l_file\" fi [ -n \"$l_out2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\" done <<< \"$(printf '%s\\n' \"${a_skarr[@]}\")\" unset a_skarr if [ -z \"$l_output2\" ]; then echo -e \"\\n- No access changes required\\n\" else echo -e \"\\n- Remediation results:\\n$l_output2\\n\" fi } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_ssh_key_permissions_restricted",
      "compute_private_key_file_secure_permissions",
      "ssh_host_key_file_permissions_configured",
      "compute_ssh_private_key_file_protected",
      "ssh_host_key_file_access_restricted"
    ]
  },
  {
    "id": "4.2.3",
    "title": "Ensure permissions on SSH public host key files are configured",
    "assessment": "Automated",
    "description": "An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key that corresponds to a private key will be able to authenticate successfully.",
    "rationale": "If a public host key file is modified by an unauthorized user, the SSH service may be compromised.",
    "audit": "Run the following command and verify Access does not grant write or execute permissions to group or other for all returned files: Run the following script to verify SSH public host key files are mode 0644 or more restrictive, owned be the root user, and owned be the root group: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_pmask=\"0133\" awk '{print}' <<< \"$(find -L /etc/ssh -xdev -type f -exec stat -Lc \"%n %#a %U %G\" {} +)\" | (while read -r  l_file l_mode l_owner l_group; do if file \"$l_file\" | grep -Pq ':\\h+OpenSSH\\h+(\\H+\\h+)?public\\h+key\\b'; then l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then l_output2=\"$l_output2\\n - Public key file: \\\"$l_file\\\" is mode \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\" else l_output=\"$l_output\\n - Public key file: \\\"$l_file\\\" is mode \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\" fi if [ \"$l_owner\" != \"root\" ]; then l_output2=\"$l_output2\\n - Public key file: \\\"$l_file\\\" is owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\" else l_output=\"$l_output\\n - Public key file: \\\"$l_file\\\" is owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\" fi if [ \"$l_group\" != \"root\" ]; then l_output2=\"$l_output2\\n - Public key file: \\\"$l_file\\\" is owned by group \\\"$l_group\\\" should belong to group \\\"root\\\"\\n\" else l_output=\"$l_output\\n - Public key file: \\\"$l_file\\\" is owned by group \\\"$l_group\\\" should belong to group \\\"root\\\"\\n\" fi fi done if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  *** PASS ***\\n$l_output\" else echo -e \"\\n- Audit Result:\\n  *** FAIL ***\\n$l_output2\\n\\n  - Correctly set:\\n$l_output\" fi ) }",
    "remediation": "Run the following script to set mode, ownership, and group on the public SSH host key files: #!/usr/bin/env bash { l_pmask=\"0133\" l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" awk '{print}' <<< \"$(find -L /etc/ssh -xdev -type f -exec stat -Lc \"%n %#a %U %G\" {} +)\" | (while read -r  l_file l_mode l_owner l_group; do if file \"$l_file\" | grep -Pq ':\\h+OpenSSH\\h+(\\H+\\h+)?public\\h+key\\b'; then echo -e \" - Checking private key file: \\\"$l_file\\\"\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then echo -e \" - File: \\\"$l_file\\\" is mode \\\"$l_mode\\\" changing to mode: \\\"$l_maxperm\\\"\" chmod u-x,go-wx \"$l_file\" fi if [ \"$l_owner\" != \"root\" ]; then echo -e \" - File: \\\"$l_file\\\" is owned by: \\\"$l_owner\\\" changing owner to \\\"root\\\"\" chown root \"$l_file\" fi if [ \"$l_group\" != \"root\" ]; then echo -e \" - File: \\\"$l_file\\\" is owned by group \\\"$l_group\\\" changing to group \\\"root\\\"\" chgrp \"root\" \"$l_file\" fi fi done ) } Default Value: 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_ssh_public_key_file_permissions_configured",
      "compute_ssh_public_key_file_permissions_restricted",
      "compute_ssh_public_key_file_permissions_secure",
      "compute_ssh_public_key_file_permissions_correct",
      "compute_ssh_public_key_file_permissions_compliant"
    ]
  },
  {
    "id": "4.2.4",
    "title": "Ensure SSH access is limited",
    "assessment": "Automated",
    "description": "There are several options available to limit which users and group can access the system via SSH. It is recommended that at least one of the following options be leveraged: • AllowUsers: o The AllowUsers variable gives the system administrator the option of allowing specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in from a particular host, the entry can be specified in the form of user@host. • AllowGroups: o The AllowGroups variable gives the system administrator the option of allowing specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable. • DenyUsers: o The DenyUsers variable gives the system administrator the option of denying specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by specifically denying a user's access from a particular host, the entry can be specified in the form of user@host. • DenyGroups: o The DenyGroups variable gives the system administrator the option of denying specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.",
    "rationale": "Restricting which users can remotely access the system via SSH will help ensure that only authorized users access the system.",
    "audit": "Run the following commands and verify the output: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -Pi '^\\h*(allow|deny)(users|groups)\\h+\\H+(\\h+.*)?$' # grep -Pis '^\\h*(allow|deny)(users|groups)\\h+\\H+(\\h+.*)?$' /etc/ssh/sshd_config Verify that the output of both commands matches at least one of the following lines: allowusers <userlist> allowgroups <grouplist> denyusers <userlist> denygroups <grouplist> Note: If Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set one or more of the parameters as follows: AllowUsers <userlist> OR AllowGroups <grouplist> OR DenyUsers <userlist> OR DenyGroups <grouplist> Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: None References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_ssh_allow_users_restricted",
      "compute_ssh_allow_groups_restricted",
      "compute_ssh_deny_users_restricted",
      "compute_ssh_deny_groups_restricted",
      "compute_ssh_access_limited",
      "compute_ssh_user_host_restricted",
      "compute_ssh_group_host_restricted"
    ]
  },
  {
    "id": "4.2.5",
    "title": "Ensure SSH LogLevel is appropriate",
    "assessment": "Automated",
    "description": "INFO level is the basic level that only records login activity of SSH users. In many situations, such as Incident Response, it is important to determine when a particular user was active on a system. The logout record can eliminate those users who disconnected, which helps narrow the field. VERBOSE level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be logged. This information is important for SSH key management, especially in legacy environments.",
    "rationale": "SSH provides several logging levels with varying amounts of verbosity. DEBUG is specifically not recommended other than strictly for debugging SSH communications since it provides so much data that it is difficult to identify important security information.",
    "audit": "Run the following command and verify that output matches loglevel VERBOSE or loglevel INFO: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep loglevel loglevel VERBOSE or loglevel INFO Run the following command and verify the output matches: # grep -Pis '^\\h*loglevel\\h+' /etc/ssh/sshd_config | grep -Pvi '(VERBOSE|INFO)' Nothing should be returned Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: LogLevel VERBOSE OR LogLevel INFO Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: LogLevel INFO References: 1. https://www.ssh.com/ssh/sshd_config/ 2. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://www.ssh.com/ssh/sshd_config/ 2. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "function_names": [
      "compute_ssh_loglevel_info_enabled",
      "compute_ssh_loglevel_verbose_enabled",
      "compute_ssh_loglevel_login_logout_logging",
      "compute_ssh_loglevel_key_fingerprint_logging",
      "compute_ssh_loglevel_incident_response_ready"
    ]
  },
  {
    "id": "4.2.6",
    "title": "Ensure SSH PAM is enabled",
    "assessment": "Automated",
    "description": "The UsePAM directive enables the Pluggable Authentication Module (PAM) interface. If set to yes this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication directives in addition to PAM account and session module processing for all authentication types.",
    "rationale": "When usePAM is set to yes, PAM runs through account and session types properly. This is important if you want to restrict access to services based off of IP, time or other factors of the account. Additionally, you can make sure users inherit certain environment variables on login or disallow access to the server",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i usepam Verify the output matches: usepam yes Run the following command: # grep -Pis '^\\h*UsePAM\\h+\"?no\"?\\b' /etc/ssh/sshd_config Nothing should be returned.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: UsePAM yes Default Value: UsePAM yes References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_pam_enabled",
      "compute_ssh_authentication_pam_enabled",
      "compute_ssh_challenge_response_pam_enabled",
      "compute_ssh_password_auth_pam_enabled",
      "compute_ssh_session_processing_pam_enabled"
    ]
  },
  {
    "id": "4.2.7",
    "title": "Ensure SSH root login is disabled",
    "assessment": "Automated",
    "description": "The PermitRootLogin parameter specifies if the root user can log in using SSH. The default is prohibit-password.",
    "rationale": "Disallowing root logins over SSH requires system admins to authenticate using their own individual account, then escalating to root. This limits opportunity for non- repudiation and provides a clear audit trail in the event of a security incident.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep permitrootlogin Verify the output matches: permitrootlogin no Run the following command: # grep -Pis '^\\h*PermitRootLogin\\h+\"?(yes|prohibit-password|forced-commands- only)\"?\\b' /etc/ssh/sshd_config /etc/ssh/ssh_config.d/*.conf Nothing should be returned. Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: PermitRootLogin no Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: PermitRootLogin without-password  References: 1. SSHD_CONFIG(5)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5)",
    "function_names": [
      "compute_instance_root_ssh_disabled",
      "compute_ssh_permit_root_login_prohibited",
      "compute_ssh_root_access_restricted",
      "compute_ssh_root_login_disabled",
      "compute_instance_ssh_root_blocked"
    ]
  },
  {
    "id": "4.2.8",
    "title": "Ensure SSH HostbasedAuthentication is disabled",
    "assessment": "Automated",
    "description": "The HostbasedAuthentication parameter specifies if authentication is allowed through trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with successful public key client host authentication.",
    "rationale": "Even though the .rhosts files are ineffective if support is disabled in /etc/pam.conf, disabling the ability to use .rhosts files in SSH provides an additional layer of protection.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep hostbasedauthentication Verify the output matches: hostbasedauthentication no Run the following command: # grep -Pis '^\\h*HostbasedAuthentication\\h+\"?yes\"?\\b' /etc/ssh/sshd_config Nothing should be returned.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: HostbasedAuthentication no Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: HostbasedAuthentication no References: 1. SSHD_CONFIG(5)  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0001 M1042",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5)  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0001 M1042",
    "function_names": [
      "compute_ssh_hostbased_authentication_disabled",
      "compute_instance_ssh_hostbased_authentication_disabled",
      "ssh_config_hostbased_authentication_disabled",
      "linux_ssh_hostbased_authentication_disabled",
      "os_ssh_hostbased_authentication_disabled"
    ]
  },
  {
    "id": "4.2.9",
    "title": "Ensure SSH PermitEmptyPasswords is disabled",
    "assessment": "Automated",
    "description": "The PermitEmptyPasswords parameter specifies if the SSH server allows login to accounts with empty password strings.",
    "rationale": "Disallowing remote shell access to accounts that have an empty password reduces the probability of unauthorized access to the system.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep permitemptypasswords Verify the output matches: permitemptypasswords no Run the following command and verify the output: # grep -Pis '^\\h*PermitEmptyPasswords\\h+\"?yes\\b' /etc/ssh/sshd_config Nothing should be returned. Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: PermitEmptyPasswords no Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: PermitEmptyPasswords no References: 1. SSHD_CONFIG(5)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5)",
    "function_names": [
      "compute_ssh_permit_empty_passwords_disabled",
      "ssh_config_permit_empty_passwords_disabled",
      "linux_ssh_permit_empty_passwords_disabled",
      "instance_ssh_permit_empty_passwords_disabled",
      "vm_ssh_permit_empty_passwords_disabled"
    ]
  },
  {
    "id": "4.2.10",
    "title": "Ensure SSH PermitUserEnvironment is disabled",
    "assessment": "Automated",
    "description": "The PermitUserEnvironment option allows users to present environment options to the SSH daemon.",
    "rationale": "Permitting users the ability to set environment variables through the SSH daemon could potentially allow users to bypass security controls (e.g. setting an execution path that has SSH executing trojan'd programs)",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep permituserenvironment Verify the output matches: permituserenvironment no Run the following command and verify the output: # grep -Pis '^\\h*PermitUserEnvironment\\h+\"?yes\"?\\b' /etc/ssh/sshd_config Nothing should be returned.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: PermitUserEnvironment no Default Value: PermitUserEnvironment no References: 1. SSHD_CONFIG(5)  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1021 TA0008 M1042",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5)  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1021 TA0008 M1042",
    "function_names": [
      "compute_ssh_permit_user_environment_disabled",
      "ssh_config_permit_user_environment_disabled",
      "linux_ssh_permit_user_environment_disabled",
      "instance_ssh_permit_user_environment_disabled",
      "vm_ssh_permit_user_environment_disabled"
    ]
  },
  {
    "id": "4.2.11",
    "title": "Ensure SSH IgnoreRhosts is enabled",
    "assessment": "Automated",
    "description": "The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.",
    "rationale": "Setting this parameter forces users to enter a password when authenticating with SSH.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep ignorerhosts Verify the output matches: ignorerhosts yes Run the following command: # grep -Pis '^\\h*ignorerhosts\\h+\"?no\"?\\b' /etc/ssh/sshd_config Nothing should be returned. Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: IgnoreRhosts yes Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: IgnoreRhosts yes References: 1. SSHD_CONFIG(5)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5)",
    "function_names": [
      "compute_ssh_ignorerhosts_enabled",
      "compute_ssh_rhosts_auth_disabled",
      "compute_ssh_hostbased_auth_disabled",
      "compute_ssh_rhosts_files_ignored",
      "compute_ssh_secure_rhosts_config"
    ]
  },
  {
    "id": "4.2.12",
    "title": "Ensure SSH X11 forwarding is disabled",
    "assessment": "Automated",
    "description": "The X11Forwarding parameter provides the ability to tunnel X11 traffic through the connection to enable remote graphic connections.",
    "rationale": "Disable X11 forwarding unless there is an operational requirement to use X11 applications directly. There is a small risk that the remote X11 servers of users who are logged in via SSH with X11 forwarding could be compromised by other users on the X11 server. Note that even if X11 forwarding is disabled, users can always install their own forwarders.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i x11forwarding Verify the output matches: x11forwarding no Run the following command: # grep -Pis '^\\h*x11forwarding\\h+\"?yes\"?\\b' /etc/ssh/sshd_config Nothing is returned. Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: X11Forwarding no Note: First occurrence of a option takes precedence, Match set statements withstanding.",
    "profile_applicability": "•  Level 1 - Workstation •  Level 2 - Server",
    "function_names": [
      "compute_instance_ssh_x11_forwarding_disabled",
      "compute_vm_ssh_x11_forwarding_disabled",
      "compute_ssh_x11_forwarding_disabled",
      "ssh_config_x11_forwarding_disabled",
      "ssh_x11_forwarding_disabled"
    ]
  },
  {
    "id": "4.2.13",
    "title": "Ensure only strong Ciphers are used",
    "assessment": "Automated",
    "description": "This variable limits the ciphers that SSH can use during communication. Note: • Some organizations may have stricter requirements for approved ciphers. • Ensure that ciphers used are in compliance with site policy. • The only \"strong\" ciphers currently FIPS 140-2 compliant are: o aes256-ctr o aes192-ctr o aes128-ctr",
    "rationale": "Weak ciphers that are used for authentication to the cryptographic module cannot be relied upon to provide confidentiality or integrity, and system data may be compromised. • The Triple DES ciphers, as used in SSH, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain clear text data via a birthday attack against a long-duration encrypted session, aka a \"Sweet32\" attack. • Error handling in the SSH protocol; Client and Server, when using a block cipher algorithm in Cipher Block Chaining (CBC) mode, makes it easier for remote attackers to recover certain plain text data from an arbitrary block of cipher text in an SSH session via unknown vectors.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep ciphers Verify that output does not contain any of the following weak ciphers: 3des-cbc aes128-cbc aes192-cbc aes256-cbc rijndael-cbc@lysator.liu.se",
    "remediation": "Edit the /etc/ssh/sshd_config file add/modify the Ciphers line to contain a comma separated list of the site approved ciphers: Example: Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128- gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr Note: First occurrence of a option takes precedence. Default Value: Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128- gcm@openssh.com,aes256-gcm@openssh.com References: 1. https://nvd.nist.gov/vuln/detail/CVE-2016-2183 2. https://www.openssh.com/txt/cbc.adv 3. https://nvd.nist.gov/vuln/detail/CVE-2008-5161 4. https://www.openssh.com/txt/cbc.adv 5. SSHD_CONFIG(5)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://nvd.nist.gov/vuln/detail/CVE-2016-2183 2. https://www.openssh.com/txt/cbc.adv 3. https://nvd.nist.gov/vuln/detail/CVE-2008-5161 4. https://www.openssh.com/txt/cbc.adv 5. SSHD_CONFIG(5)",
    "function_names": [
      "compute_ssh_strong_ciphers_enabled",
      "compute_ssh_ciphers_fips_compliant",
      "compute_ssh_ciphers_aes256_ctr_enabled",
      "compute_ssh_ciphers_aes192_ctr_enabled",
      "compute_ssh_ciphers_aes128_ctr_enabled",
      "compute_ssh_weak_ciphers_disabled",
      "compute_ssh_ciphers_restricted_to_approved_set"
    ]
  },
  {
    "id": "4.2.14",
    "title": "Ensure only strong MAC algorithms are used",
    "assessment": "Automated",
    "description": "This variable limits the types of MAC algorithms that SSH can use during communication. Notes: • Some organizations may have stricter requirements for approved MACs. • Ensure that MACs used are in compliance with site policy. • The only \"strong\" MACs currently FIPS 140-2 approved are: o hmac-sha2-256 o hmac-sha2-512",
    "rationale": "MD5 and 96-bit MAC algorithms are considered weak and have been shown to increase exploitability in SSH downgrade attacks. Weak algorithms continue to have a great deal of attention as a weak spot that can be exploited with expanded computing power. An attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the SSH tunnel and capture credentials and information.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i \"MACs\" Verify that output does not contain any of the listed weak MAC algorithms: hmac-md5 hmac-md5-96 hmac-ripemd160 hmac-sha1 hmac-sha1-96 umac-64@openssh.com hmac-md5-etm@openssh.com hmac-md5-96-etm@openssh.com hmac-ripemd160-etm@openssh.com hmac-sha1-etm@openssh.com hmac-sha1-96-etm@openssh.com umac-64-etm@openssh.com",
    "remediation": "Edit the /etc/ssh/sshd_config file and add/modify the MACs line to contain a comma separated list of the site approved MACs: Example: MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2- 512,hmac-sha2-256,umac-128-etm@openssh.com,umac-128@openssh.com Note: First occurrence of a option takes precedence. Default Value: MACs umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256- etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1- etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2- 256,hmac-sha2-512,hmac-sha1 References: 1. More information on SSH downgrade attacks can be found here: http://www.mitls.org/pages/attacks/SLOTH 2. SSHD_CONFIG(5) 3. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. More information on SSH downgrade attacks can be found here: http://www.mitls.org/pages/attacks/SLOTH 2. SSHD_CONFIG(5) 3. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_strong_mac_algorithms",
      "compute_ssh_fips_approved_mac_algorithms",
      "compute_ssh_mac_algorithms_restricted",
      "compute_ssh_mac_algorithms_compliant",
      "compute_ssh_mac_algorithms_approved_only"
    ]
  },
  {
    "id": "4.2.15",
    "title": "Ensure only strong Key Exchange algorithms are used",
    "assessment": "Automated",
    "description": "Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received Notes: • Kex algorithms have a higher preference the earlier they appear in the list • Some organizations may have stricter requirements for approved Key exchange algorithms • Ensure that Key exchange algorithms used are in compliance with site policy • The only Key Exchange Algorithms currently FIPS 140-2 approved are: o ecdh-sha2-nistp256 o ecdh-sha2-nistp384 o ecdh-sha2-nistp521 o diffie-hellman-group-exchange-sha256 o diffie-hellman-group16-sha512 o diffie-hellman-group18-sha512 o diffie-hellman-group14-sha256",
    "rationale": "Key exchange methods that are considered weak should be removed. A key exchange method may be weak because too few bits are used, or the hashing algorithm is considered too weak. Using weak algorithms could expose connections to man-in-the- middle attacks",
    "audit": "Run the following command and verify that output does not contain any of the listed weak Key Exchange algorithms: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep kexalgorithms Weak Key Exchange Algorithms: diffie-hellman-group1-sha1 diffie-hellman-group14-sha1 diffie-hellman-group-exchange-sha1 Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file add/modify the KexAlgorithms line to contain a comma separated list of the site approved key exchange algorithms: Example: KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman- group14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18- sha512,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie- hellman-group-exchange-sha256 Note: First occurrence of a option takes precedence. Default Value: KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2- nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange- sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman- group14-sha256 References: 1. NIST SP 800-53 Rev. 5: SC-8",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: SC-8",
    "function_names": [
      "ssh_key_exchange_strong_algorithms",
      "ssh_key_exchange_fips_approved",
      "ssh_key_exchange_algorithm_compliance",
      "ssh_key_exchange_no_weak_algorithms",
      "ssh_key_exchange_preferred_algorithms_ordered",
      "ssh_key_exchange_approved_algorithms_only",
      "ssh_key_exchange_algorithm_policy_compliance"
    ]
  },
  {
    "id": "4.2.16",
    "title": "Ensure SSH AllowTcpForwarding is disabled",
    "assessment": "Automated",
    "description": "SSH port forwarding is a mechanism in SSH for tunneling application ports from the client to the server, or servers to clients. It can be used for adding encryption to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening backdoors into the internal network from their home machines.",
    "rationale": "Leaving port forwarding enabled can expose the organization to security risks and backdoors. SSH connections are protected with strong encryption. This makes their contents invisible to most deployed network monitoring and traffic filtering solutions. This invisibility carries considerable risk potential if it is used for malicious purposes such as data exfiltration. Cybercriminals or malware could exploit SSH to hide their unauthorized communications, or to exfiltrate stolen data from the target network. Impact: SSH tunnels are widely used in many corporate environments. In some environments the applications themselves may have very limited native support for security. By utilizing tunneling, compliance with SOX, HIPAA, PCI-DSS, and other standards can be achieved without having to modify the applications.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i allowtcpforwarding Verify the output matches: allowtcpforwarding no Run the following command: # grep -Pis '^\\h*AllowTcpForwarding\\h+\"?yes\\b' /etc/ssh/sshd_config Nothing should be returned. Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: AllowTcpForwarding no Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: AllowTcpForwarding yes References: 1. https://www.ssh.com/ssh/tunneling/example 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1048, T1048.002, T1572, T1572.000 TA0008 M1042",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "SSH tunnels are widely used in many corporate environments. In some environments the applications themselves may have very limited native support for security. By utilizing tunneling, compliance with SOX, HIPAA, PCI-DSS, and other standards can be achieved without having to modify the applications.",
    "references": "1. https://www.ssh.com/ssh/tunneling/example 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1048, T1048.002, T1572, T1572.000 TA0008 M1042",
    "function_names": [
      "compute_instance_ssh_tcp_forwarding_disabled",
      "compute_ssh_allow_tcp_forwarding_disabled",
      "ssh_config_tcp_forwarding_disabled",
      "instance_ssh_tcp_forwarding_disabled",
      "ssh_allow_tcp_forwarding_disabled"
    ]
  },
  {
    "id": "4.2.17",
    "title": "Ensure SSH warning banner is configured",
    "assessment": "Automated",
    "description": "The Banner parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed.",
    "rationale": "Banners are used to warn connecting users of the particular site's policy regarding connection. Presenting a warning message prior to the normal user login may assist the prosecution of trespassers on the computer system.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep banner Verify the output matches: banner /etc/issue.net",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: Banner /etc/issue.net Note: First occurrence of a option takes precedence, Match set statements withstanding. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations TA0001, TA0007 M1035",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations TA0001, TA0007 M1035",
    "function_names": [
      "compute_instance_ssh_banner_configured",
      "compute_ssh_banner_file_present",
      "compute_ssh_banner_content_valid",
      "compute_instance_ssh_banner_enabled",
      "compute_ssh_banner_permissions_restricted"
    ]
  },
  {
    "id": "4.2.18",
    "title": "Ensure SSH MaxAuthTries is set to 4 or less",
    "assessment": "Automated",
    "description": "The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.",
    "rationale": "Setting the MaxAuthTries parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. While the recommended setting is 4, set the number based on site policy.",
    "audit": "Run the following command and verify that output MaxAuthTries is 4 or less: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep maxauthtries maxauthtries 4 Run the following command and verify that the output: # grep -Pis '^\\h*maxauthtries\\h+\"?([5-9]|[1-9][0-9]+)\\b' /etc/ssh/sshd_config Nothing is returned Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: MaxAuthTries 4 Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: MaxAuthTries 6   References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "compute_ssh_max_auth_tries_less_than_or_equal_4",
      "ssh_config_max_auth_tries_compliant",
      "instance_ssh_max_auth_tries_limited",
      "ssh_max_auth_tries_restricted",
      "compute_ssh_auth_attempts_limited"
    ]
  },
  {
    "id": "4.2.19",
    "title": "Ensure SSH MaxStartups is configured",
    "assessment": "Automated",
    "description": "The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.",
    "rationale": "To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i maxstartups Verify that output MaxStartups is 10:30:60 or more restrictive: maxstartups 10:30:60 Run the following command and verify the output: # grep -Pis '^\\h*maxstartups\\h+\"?(((1[1-9]|[1-9][0-9][0-9]+):([0-9]+):([0- 9]+))|(([0-9]+):(3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):([0-9]+))|(([0-9]+):([0- 9]+):(6[1-9]|[7-9][0-9]|[1-9][0-9][0-9]+)))\\b' /etc/ssh/sshd_config Nothing should be returned. Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: MaxStartups 10:30:60 Note: First occurrence of a option takes precedence. Default Value: MaxStartups 10:30:100   References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_maxstartups_configured",
      "compute_ssh_connection_limit_set",
      "compute_ssh_unauthenticated_limit_configured",
      "compute_ssh_concurrent_connections_restricted",
      "compute_ssh_maxstartups_value_set"
    ]
  },
  {
    "id": "4.2.20",
    "title": "Ensure SSH LoginGraceTime is set to one minute or less",
    "assessment": "Automated",
    "description": "The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.",
    "rationale": "Setting the LoginGraceTime parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy.",
    "audit": "Run the following command and verify that output LoginGraceTime is between 1 and 60 seconds or 1m: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep logingracetime logingracetime 60 Run the following command and verify the output: # grep -Pis '^\\h*LoginGraceTime\\h+\"?(0|6[1-9]|[7-9][0-9]|[1-9][0-9][0- 9]+|[^1]m)\\b' /etc/ssh/sshd_config Nothing should be returned Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: LoginGraceTime 60 Note: First occurrence of a option takes precedence, Match set statements withstanding.  Default Value: LoginGraceTime 120 References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-6 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1110, T1110.001, T1110.003, T1110.004 TA0006 M1036",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-6 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1110, T1110.001, T1110.003, T1110.004 TA0006 M1036",
    "function_names": [
      "compute_ssh_login_grace_time_one_minute_or_less",
      "compute_ssh_login_grace_time_within_limit",
      "compute_ssh_session_timeout_restricted",
      "compute_ssh_authentication_timeout_compliant",
      "compute_ssh_grace_period_configured_securely"
    ]
  },
  {
    "id": "4.2.21",
    "title": "Ensure SSH MaxSessions is set to 10 or less",
    "assessment": "Automated",
    "description": "The MaxSessions parameter specifies the maximum number of open sessions permitted from a given connection.",
    "rationale": "To protect a system from denial of service due to a large number of concurrent sessions, use the rate limiting function of MaxSessions to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit": "Run the following command and verify that output MaxSessions is 10 or less: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i maxsessions maxsessions 10 Run the following command and verify the output: grep -Pis '^\\h*MaxSessions\\h+\"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\\b' /etc/ssh/sshd_config Nothing should be returned Note: If Match set statements are used in your environment, they should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter as follows: MaxSessions 10 Note: First occurrence of a option takes precedence, Match set statements withstanding. Default Value: MaxSessions 10   References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1499, T1499.002 TA0040",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1499, T1499.002 TA0040",
    "function_names": [
      "compute_instance_ssh_max_sessions_limited",
      "compute_ssh_config_max_sessions_limited",
      "compute_ssh_max_sessions_threshold",
      "compute_ssh_max_sessions_compliant",
      "compute_instance_ssh_session_limit_enforced"
    ]
  },
  {
    "id": "4.2.22",
    "title": "Ensure SSH Idle Timeout Interval is configured",
    "assessment": "Automated",
    "description": "Note: To clarify, the two settings described below are only meant for idle connections from a protocol perspective and are not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never had, intentionally, the capability to drop idle users. In SSH versions before 8.2p1 there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users. This bug has been resolved in 8.2p1 and thus it can no longer be abused disconnect idle users. The two options ClientAliveInterval and ClientAliveCountMax control the timeout of SSH sessions. Taken directly from man 5 sshd_config: • ClientAliveInterval Sets a timeout interval in seconds after which if no data has been received from the client, sshd(8) will send a message through the encrypted channel to request a response from the client. The default is 0, indicating that these messages will not be sent to the client. • ClientAliveCountMax Sets the number of client alive messages which may be sent without sshd(8) receiving any messages back from the client. If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating the session. It is important to note that the use of client alive messages is very different from TCPKeepAlive. The client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option en‐abled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on knowing when a connection has become unresponsive. The default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax disables connection termination.",
    "rationale": "In order to prevent resource exhaustion, appropriate values should be set for both ClientAliveInterval and ClientAliveCountMax. Specifically, looking at the source code, ClientAliveCountMax must be greater than zero in order to utilize the ability of SSH to drop idle connections. If connections are allowed to stay open indefinately, this can potentially be used as a DDOS attack or simple resource exhaustion could occur over unreliable networks. The example set here is a 45 second timeout. Consult your site policy for network timeouts and apply as appropriate.",
    "audit": "Run the following commands and verify ClientAliveInterval is greater than zero: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep clientaliveinterval Example output: clientaliveinterval 15 Run the following command and verify ClientAliveCountMax is greater than zero: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep clientalivecountmax Example output: clientalivecountmax 3 Run the following command: # grep -Pis '^\\h*ClientAliveCountMax\\h+\"?0\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameters above any Include entries according to site policy. Example: ClientAliveInterval 15 ClientAliveCountMax 3 Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.  Default Value: ClientAliveInterval 0 ClientAliveCountMax 3 References: 1. https://man.openbsd.org/sshd_config 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: https://bugzilla.redhat.com/show_bug.cgi?id=1873547 https://github.com/openssh/openssh-portable/blob/V_8_9/serverloop.c#L137 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.002, T1078.003 TA0001 M1026  4.3 Configure privilege escalation There are various tools which allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. sudo sudo documentation The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy. sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. pkexec pkexec documentation pkexec allows an authorized user to execute PROGRAM as another user. If username is not specified, then the program will be executed as the administrative super user, root.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://man.openbsd.org/sshd_config 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: https://bugzilla.redhat.com/show_bug.cgi?id=1873547 https://github.com/openssh/openssh-portable/blob/V_8_9/serverloop.c#L137 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.002, T1078.003 TA0001 M1026  4.3 Configure privilege escalation There are various tools which allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. sudo sudo documentation The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy. sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. pkexec pkexec documentation pkexec allows an authorized user to execute PROGRAM as another user. If username is not specified, then the program will be executed as the administrative super user, root.",
    "function_names": [
      "compute_ssh_client_alive_interval_configured",
      "compute_ssh_client_alive_count_max_configured",
      "compute_ssh_idle_timeout_enabled",
      "compute_ssh_tcp_keepalive_disabled",
      "compute_ssh_session_termination_configured"
    ]
  },
  {
    "id": "4.3.1",
    "title": "Ensure sudo is installed",
    "assessment": "Automated",
    "description": "sudo allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy.",
    "rationale": "sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. The security policy determines what privileges, if any, a user has to run sudo. The policy may require that users authenticate themselves with a password or another authentication mechanism. If authentication is required, sudo will exit if the user's password is not entered within a configurable time limit. This limit is policy-specific.",
    "audit": "Run the following command to verify that either sudo or sudo-ldap is installed: # dpkg-query -W sudo sudo-ldap > /dev/null 2>&1 && dpkg-query -W - f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' sudo sudo-ldap | awk '($4==\"installed\" && $NF==\"installed\") {print \"\\n\"\"PASS:\"\"\\n\"\"Package \"\"\\\"\"$1\"\\\"\"\" is installed\"\"\\n\"}' || echo -e \"\\nFAIL:\\nneither \\\"sudo\\\" or \\\"sudo-ldap\\\" package is installed\\n\"",
    "remediation": "First determine is LDAP functionality is required. If so, then install sudo-ldap, else install sudo. Example: # apt install sudo References: 1. SUDO(8) 2. NIST SP 800-53 Rev. 5: AC-2, AC-6",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. SUDO(8) 2. NIST SP 800-53 Rev. 5: AC-2, AC-6",
    "function_names": [
      "compute_sudo_installed",
      "compute_sudo_package_present",
      "compute_sudo_binary_available",
      "compute_sudo_version_current",
      "compute_sudo_config_valid"
    ]
  },
  {
    "id": "4.3.2",
    "title": "Ensure sudo commands use pty",
    "assessment": "Automated",
    "description": "sudo can be configured to run only from a pseudo terminal (pseudo-pty).",
    "rationale": "Attackers can run a malicious program using sudo which would fork a background process that remains even when the main program has finished executing. Impact: WARNING: Editing the sudo configuration incorrectly can cause sudo to stop functioning. Always use visudo to modify sudo configuration files.",
    "audit": "Verify that sudo can only run other commands from a pseudo terminal. Run the following command: # grep -rPi '^\\h*Defaults\\h+([^#\\n\\r]+,)?use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$' /etc/sudoers* Verify the output matches: /etc/sudoers:Defaults use_pty",
    "remediation": "Edit the file /etc/sudoers with visudo or a file in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and add the following line: Defaults use_pty Note: • sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files. • Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second. • Be aware that because the sorting is lexical, not numeric, /etc/sudoers.d/1_whoops would be loaded after /etc/sudoers.d/10_second. • Using a consistent number of leading zeroes in the file names can be used to avoid such problems.  References: 1. SUDO(8) 2. VISUDO(8) 3. sudoers(5)",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "WARNING: Editing the sudo configuration incorrectly can cause sudo to stop functioning. Always use visudo to modify sudo configuration files.",
    "references": "1. SUDO(8) 2. VISUDO(8) 3. sudoers(5)",
    "function_names": [
      "sudo_config_pty_enabled",
      "sudo_commands_pty_required",
      "sudo_security_pty_enforced",
      "sudo_settings_pty_restricted",
      "sudo_privilege_pty_mandatory"
    ]
  },
  {
    "id": "4.3.3",
    "title": "Ensure sudo log file exists",
    "assessment": "Automated",
    "description": "sudo can use a custom log file",
    "rationale": "A sudo log file simplifies auditing of sudo commands Impact: WARNING: Editing the sudo configuration incorrectly can cause sudo to stop functioning. Always use visudo to modify sudo configuration files.",
    "audit": "Run the following command to verify that sudo has a custom log file configured: # grep -rPsi \"^\\h*Defaults\\h+([^#]+,\\h*)?logfile\\h*=\\h*(\\\"|\\')?\\H+(\\\"|\\')?(,\\h*\\H+\\h*)*\\h* (#.*)?$\" /etc/sudoers* Verify the output matches: Defaults logfile=\"/var/log/sudo.log\"",
    "remediation": "Edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo or visudo -f <PATH TO FILE> and add the following line: Example: Defaults logfile=\"/var/log/sudo.log\" Note: • sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files. • Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second. • Be aware that because the sorting is lexical, not numeric, /etc/sudoers.d/1_whoops would be loaded after /etc/sudoers.d/10_second. • Using a consistent number of leading zeroes in the file names can be used to avoid such problems.  References: 1. SUDO(8) 2. VISUDO(8) 3. sudoers(5) Additional Information: visudo edits the sudoers file in a safe fashion, analogous to vipw(8). visudo locks the sudoers file against multiple simultaneous edits, provides basic sanity checks, and checks for parse errors. If the sudoers file is currently being edited you will receive a message to try again later.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "WARNING: Editing the sudo configuration incorrectly can cause sudo to stop functioning. Always use visudo to modify sudo configuration files.",
    "references": "1. SUDO(8) 2. VISUDO(8) 3. sudoers(5) Additional Information: visudo edits the sudoers file in a safe fashion, analogous to vipw(8). visudo locks the sudoers file against multiple simultaneous edits, provides basic sanity checks, and checks for parse errors. If the sudoers file is currently being edited you will receive a message to try again later.",
    "function_names": [
      "sudo_log_file_exists",
      "sudo_log_file_configured",
      "sudo_log_file_valid_path",
      "sudo_log_file_writable",
      "sudo_log_file_rotated",
      "sudo_log_file_permissions_secure",
      "sudo_log_file_retention_configured",
      "sudo_log_file_audit_enabled"
    ]
  },
  {
    "id": "4.3.4",
    "title": "Ensure users must provide password for privilege escalation",
    "assessment": "Automated",
    "description": "The operating system must be configured so that users must provide a password for privilege escalation.",
    "rationale": "Without (re-)authentication, users may access resources or perform tasks for which they do not have authorization. When operating systems provide the capability to escalate a functional capability, it is critical the user (re-)authenticate. Impact: This will prevent automated processes from being able to elevate privileges.",
    "audit": "Note: If passwords are not being used for authentication, this is not applicable. Verify the operating system requires users to supply a password for privilege escalation. Check the configuration of the /etc/sudoers and /etc/sudoers.d/* files with the following command: # grep -r \"^[^#].*NOPASSWD\" /etc/sudoers* If any line is found refer to the remediation procedure below.",
    "remediation": "Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the relevant sudoers file. Remove any line with occurrences of NOPASSWD tags in the file. References: 1. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "This will prevent automated processes from being able to elevate privileges.",
    "references": "1. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "os_sudo_password_required",
      "os_privilege_escalation_password_required",
      "os_sudo_auth_required",
      "os_sudo_no_passwordless",
      "os_privilege_escalation_auth_required"
    ]
  },
  {
    "id": "4.3.5",
    "title": "Ensure re-authentication for privilege escalation is not disabled globally",
    "assessment": "Automated",
    "description": "The operating system must be configured so that users must re-authenticate for privilege escalation.",
    "rationale": "Without re-authentication, users may access resources or perform tasks for which they do not have authorization. When operating systems provide the capability to escalate a functional capability, it is critical the user re-authenticate.",
    "audit": "Verify the operating system requires users to re-authenticate for privilege escalation. Check the configuration of the /etc/sudoers and /etc/sudoers.d/* files with the following command: # grep -r \"^[^#].*\\!authenticate\" /etc/sudoers* If any line is found with a !authenticate tag, refer to the remediation procedure below.",
    "remediation": "Configure the operating system to require users to reauthenticate for privilege escalation. Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the relevant sudoers file. Remove any occurrences of !authenticate tags in the file(s). References: 1. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "os_privilege_escalation_reauthentication_enabled",
      "os_privilege_escalation_reauthentication_not_disabled",
      "os_sudo_reauthentication_required",
      "os_sudo_reauthentication_enabled",
      "os_privilege_escalation_reauthentication_global_enabled"
    ]
  },
  {
    "id": "4.3.6",
    "title": "Ensure sudo authentication timeout is configured correctly",
    "assessment": "Automated",
    "description": "sudo caches used credentials for a default of 15 minutes. This is for ease of use when there are multiple administrative tasks to perform. The timeout can be modified to suit local security policies. This default is distribution specific. See audit section for further information.",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized privileged access to another user.",
    "audit": "Ensure that the caching timeout is no more than 15 minutes. Example: # grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers* If there is no timestamp_timeout configured in /etc/sudoers* then the default is 15 minutes. This default can be checked with: # sudo -V | grep \"Authentication timestamp timeout:\" NOTE: A value of -1 means that the timeout is disabled. Depending on the configuration of the timestamp_type, this could mean for all terminals / processes of that user and not just that one single terminal session.",
    "remediation": "If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with visudo -f <PATH TO FILE> and modify the entry timestamp_timeout= to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on it's own, or on the same line as env_reset. See the following two examples: Defaults    env_reset, timestamp_timeout=15 Defaults    timestamp_timeout=15 Defaults    env_reset References: 1. https://www.sudo.ws/man/1.9.0/sudoers.man.html 2. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://www.sudo.ws/man/1.9.0/sudoers.man.html 2. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "sudo_auth_timeout_configured",
      "sudo_auth_timeout_configured_min_5m",
      "sudo_auth_timeout_configured_max_15m",
      "sudo_auth_timeout_disabled",
      "sudo_auth_timeout_custom_value",
      "sudo_auth_timeout_distribution_default",
      "sudo_auth_timeout_policy_compliant",
      "sudo_auth_timeout_session_limited"
    ]
  },
  {
    "id": "4.3.7",
    "title": "Ensure access to the su command is restricted",
    "assessment": "Automated",
    "description": "The su command allows a user to run a command or shell as another user. The program has been superseded by sudo, which allows for more granular control over privileged access. Normally, the su command can be executed by any user. By uncommenting the pam_wheel.so statement in /etc/pam.d/su, the su command will only allow users in a specific groups to execute su. This group should be empty to reinforce the use of sudo for privileged access.",
    "rationale": "Restricting the use of su , and using sudo in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via sudo , whereas su can only record that a user executed the su program.",
    "audit": "Run the following command: # grep -Pi '^\\h*auth\\h+(?:required|requisite)\\h+pam_wheel\\.so\\h+(?:[^#\\n\\r]+\\h+)?((?!\\2) (use_uid\\b|group=\\H+\\b))\\h+(?:[^#\\n\\r]+\\h+)?((?!\\1)(use_uid\\b|group=\\H+\\b))(\\ h+.*)?$' /etc/pam.d/su Verify the output matches: auth required pam_wheel.so use_uid group=<group_name> Run the following command and verify that the group specified in <group_name> contains no users: # grep <group_name> /etc/group Verify the output does not contain any users in the relevant group: <group_name>:x:<GID>:",
    "remediation": "Create an empty group that will be specified for use of the su command. The group should be named according to site policy. Example: # groupadd sugroup Add the following line to the /etc/pam.d/su file, specifying the empty group: auth required pam_wheel.so use_uid group=sugroup References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_su_command_restricted",
      "compute_su_command_wheel_group_empty",
      "compute_su_command_pam_wheel_enabled",
      "compute_su_command_sudo_enforced",
      "compute_su_command_privileged_access_restricted"
    ]
  },
  {
    "id": "4.4.1",
    "title": "Ensure password creation requirements are configured",
    "assessment": "Automated",
    "description": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following options are set in the /etc/security/pwquality.conf file: • Password Length: o minlen = 14 - password must be 14 characters or more • Password complexity: o minclass = 4 - The minimum number of required classes of characters for the new password (digits, uppercase, lowercase, others) OR o dcredit = -1 - provide at least one digit o ucredit = -1 - provide at least one uppercase character o ocredit = -1 - provide at least one special character o lcredit = -1 - provide at least one lowercase character",
    "rationale": "Strong passwords protect systems from being hacked through brute force methods.",
    "audit": "Verify password creation requirements conform to organization policy. Password length Run the following command: # grep '^\\s*minlen\\s*' /etc/security/pwquality.conf Verify the output matches: minlen = 14 Password complexity Option 1 Run the following command: # grep '^\\s*minclass\\s*' /etc/security/pwquality.conf Verify the output matches: minclass = 4 Option 2 Run the following command: # grep -E '^\\s*[duol]credit\\s*' /etc/security/pwquality.conf Verify the output matches: dcredit = -1 ucredit = -1 lcredit = -1 ocredit = -1 pam_pwquality.so enabled Run the following command to verify pam_pwquality.so is enabled grep -P '^\\h*password\\h+[^#\\n\\r]+\\h+pam_pwquality\\.so\\b' /etc/pam.d/common- password Example output: password        requisite                       pam_pwquality.so retry=3",
    "remediation": "The following setting is a recommend example policy. Alter these values to conform to your own organization's password policies. Run the following command to install the pam_pwquality module: # apt install libpam-pwquality Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy: minlen = 14 Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy: Option 1 minclass = 4 Option 2 dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1 Edit the /etc/pam.d/common-password file to include pam_pwquality.so and to conform to site policy: password requisite pam_pwquality.so retry=3 References: 1. NIST SP 800-53 Rev. 5: IA-5 Additional Information: Additional module options may be set, recommendation requirements only cover including try_first_pass and minlen set to 14 or more. NOTE: As of this writing it is not possible to customize the maximum number of retries for the creation of a password within recommended methods. The command pam-auth- update is used to manage certain PAM configurations via profiles, such as /etc/pam.d/common-password. Making a manual change to this file will cause pam-auth- update to overwrite it on the next run and is thus against recommendations. Alternatively, pam_pwquality (via /etc/security/pwquality.conf) fully supports the configuration of the maximum number of retries for a password change with the configuration entry retry = XXX. The issue is that the template /usr/share/pam- configs/pwquality contains retry=3 which will override any retry setting in /etc/security/pwquality.conf as PAM entries takes precedence. This template file should not be modified as any package update will overwrite the change. Thus it is not possible, in any recommended way, to modify password retries.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5 Additional Information: Additional module options may be set, recommendation requirements only cover including try_first_pass and minlen set to 14 or more. NOTE: As of this writing it is not possible to customize the maximum number of retries for the creation of a password within recommended methods. The command pam-auth- update is used to manage certain PAM configurations via profiles, such as /etc/pam.d/common-password. Making a manual change to this file will cause pam-auth- update to overwrite it on the next run and is thus against recommendations. Alternatively, pam_pwquality (via /etc/security/pwquality.conf) fully supports the configuration of the maximum number of retries for a password change with the configuration entry retry = XXX. The issue is that the template /usr/share/pam- configs/pwquality contains retry=3 which will override any retry setting in /etc/security/pwquality.conf as PAM entries takes precedence. This template file should not be modified as any package update will overwrite the change. Thus it is not possible, in any recommended way, to modify password retries.",
    "function_names": [
      "linux_pwquality_minlen_14",
      "linux_pwquality_minclass_4",
      "linux_pwquality_dcredit_minus_1",
      "linux_pwquality_ucredit_minus_1",
      "linux_pwquality_ocredit_minus_1",
      "linux_pwquality_lcredit_minus_1"
    ]
  },
  {
    "id": "4.4.2",
    "title": "Ensure lockout for failed password attempts is configured",
    "assessment": "Automated",
    "description": "Lock out users after n unsuccessful consecutive login attempts. The first sets of changes are made to the PAM configuration files. The second set of changes are applied to the program specific PAM configuration file. The second set of changes must be applied to each program that will lock out users. Check the documentation for each secondary program for instructions on how to configure them to work with PAM. • deny=n - n represents the number of failed attempts before the account is locked • unlock_time=n - n represents the number of seconds before the account is unlocked • audit - Will log the user name into the system log if the user is not found. • silent - Don't print informative messages. Set the lockout number and unlock time in accordance with local site policy.",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit": "Verify password lockouts are configured. These settings are commonly configured with the pam_tally2.so modules found in /etc/pam.d/common-auth: Run the following command to verify that pam_tally2.so includes deny= exists and is set to 5 or less in /etc/pam.d/common-auth: # grep 'pam_tally2' /etc/pam.d/common-auth Example output: auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900 Run the following command to verify the pam_deny.so module and pam_tally2.so modules are included in /etc/pam.d/common-account: # grep -E 'pam_(tally2|deny)\\.so' /etc/pam.d/common-account account requisite                       pam_deny.so account required                        pam_tally2.so",
    "remediation": "Edit the /etc/pam.d/common-auth file and add the auth line below: auth required pam_tally2.so onerr=fail audit silent deny=5 unlock_time=900 Edit the /etc/pam.d/common-account file and add the account lines bellow: account     requisite    pam_deny.so account     required     pam_tally2.so References: 1. NIST SP 800-53 Rev. 5: AC-1, AC-2 Additional Information: • Add pam_tally2 to the account section account required pam_tally2.so for the counter to reset to 0 when using sudo • Use of the \"audit\" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization. • If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_tally2.so module, the user can be unlocked by issuing the command /sbin/pam_tally2 -u <username> -- reset. This command sets the failed count to 0, effectively unlocking the user.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-1, AC-2 Additional Information: • Add pam_tally2 to the account section account required pam_tally2.so for the counter to reset to 0 when using sudo • Use of the \"audit\" keyword may log credentials in the case of user error during authentication. This risk should be evaluated in the context of the site policies of your organization. • If a user has been locked out because they have reached the maximum consecutive failure count defined by deny= in the pam_tally2.so module, the user can be unlocked by issuing the command /sbin/pam_tally2 -u <username> -- reset. This command sets the failed count to 0, effectively unlocking the user.",
    "function_names": [
      "pam_account_lockout_enabled",
      "pam_account_lockout_failed_attempts_configured",
      "pam_account_lockout_unlock_time_configured",
      "pam_account_lockout_audit_enabled",
      "pam_account_lockout_silent_mode_enabled",
      "pam_program_specific_lockout_configured",
      "pam_lockout_policy_compliant"
    ]
  },
  {
    "id": "4.4.3",
    "title": "Ensure password reuse is limited",
    "assessment": "Automated",
    "description": "The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords.",
    "rationale": "Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.",
    "audit": "Run the following command to verify the following in /etc/pam.d/common-password: • The pam_unix.so line includes use_authtok • The pam_pwhistory.so line includes remember= and a value no less than 5 • The pam_pwhistory.so line occurs before the pam_unix.so line # grep -P -- '^\\h*password\\h+([^#\\n\\r]+\\h+)?(pam_pwhistory\\.so|pam_unix\\.so)\\b' /etc/pam.d/common-password password     required                         pam_pwhistory.so   remember=5 password     [success=1 default=ignore]       pam_unix.so        obscure sha512  use_authtok",
    "remediation": "NOTE: Pay special attention to the configuration. Incorrect configuration can cause system lock outs or unexpected behavior. This is example configuration. You configuration may differ based on previous changes to the files. Edit the /etc/pam.d/common-password file to include: • password required pam_pwhistory.so remember=5 • use_authtok on the pam_unix.so line Example: password     required       pam_pwhistory.so   remember=5 password     [success=1 default=ignore]       pam_unix.so        obscure sha512  use_authtok References: 1. https://manpages.ubuntu.com/manpages/focal/man8/pam_pwhistory.8.html 2. https://bugs.launchpad.net/ubuntu/+source/pam/+bug/1989731 3. NIST SP 800-53 Rev. 5: AC-2, IA-5 Additional Information: Changes only apply to accounts configured on the local system.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://manpages.ubuntu.com/manpages/focal/man8/pam_pwhistory.8.html 2. https://bugs.launchpad.net/ubuntu/+source/pam/+bug/1989731 3. NIST SP 800-53 Rev. 5: AC-2, IA-5 Additional Information: Changes only apply to accounts configured on the local system.",
    "function_names": [
      "linux_password_reuse_limited",
      "linux_opasswd_file_exists",
      "linux_password_history_enabled",
      "linux_password_reuse_restricted",
      "linux_opasswd_file_configured",
      "linux_password_reuse_prevention_enabled",
      "linux_password_history_enforced",
      "linux_opasswd_file_protected"
    ]
  },
  {
    "id": "4.4.4",
    "title": "Ensure strong password hashing algorithm is configured",
    "assessment": "Automated",
    "description": "Hash functions behave as one-way functions by using mathematical operations that are extremely difficult and cumbersome to revert When a user is created, the password is run through a one-way hashing algorithm before being stored. When the user logs in, the password sent is run through the same one-way hashing algorithm and compared to the hash connected with the provided username. If the hashed password and the stored hash match, the login is valid.",
    "rationale": "The SHA512 hashing algorithm provides stronger hashing than previous available algorithms like MD5, thus providing additional protection to the system by increasing the level of effort for an attacker to successfully determine passwords.",
    "audit": "Run the following command to verify that pam_unix.so includes sha512 in /etc/pam.d/common-password: # grep -Pi -- '^\\h*password\\h+[^#\\n\\r]+\\h+pam_unix.so([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\b' /etc/pam.d/common-password Example Output password   [success=1 default=ignore]   pam_unix.so obscure sha512 use_authtok Run the following command to verify that ENCRYPT_METHOD is set to SHA512 in /etc/login.defs: # grep -Pi -- '^\\h*ENCRYPT_METHOD\\h+\"?(sha512|yescrypt)\\b' /etc/login.defs Verify the output matches: ENCRYPT_METHOD SHA512",
    "remediation": "Note: • Pay special attention to the configuration. Incorrect configuration can cause system lock outs. • This is an example configuration. Your configuration may differ based on previous changes to the files. • The encryption method on the password success line for pam_unix.so and the ENCRYPT_METHOD line in /etc/login.defs should match. Edit the /etc/pam.d/common-password file and ensure that sha512 is included and the pam_unix.so success line: Example: password   [success=1 default=ignore]   pam_unix.so obscure sha512 use_authtok Edit /etc/login.defs and ensure that ENCRYPT_METHOD is set to SHA512. ENCRYPT_METHOD SHA512 Default Value: sha512 References: 1. NIST SP 800-53 Rev. 5: IA-5, SC-28 Additional Information: Additional module options may be set, recommendation only covers those listed here. yescrypt has been included in the audit commands. This hashing algorithm is not currently supported, but it will be acceptable as an alternative to sha512 if future updates enable its support.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5, SC-28 Additional Information: Additional module options may be set, recommendation only covers those listed here. yescrypt has been included in the audit commands. This hashing algorithm is not currently supported, but it will be acceptable as an alternative to sha512 if future updates enable its support.",
    "function_names": [
      "iam_user_password_hashing_strong_algorithm",
      "iam_password_policy_hashing_strong_algorithm",
      "iam_password_hashing_secure_algorithm",
      "iam_user_password_hashing_minimum_strength",
      "iam_password_policy_hashing_compliant_algorithm"
    ]
  },
  {
    "id": "4.4.5",
    "title": "Ensure all current passwords uses the configured hashing algorithm",
    "assessment": "Manual",
    "description": "Currently used passwords with out of date hashing algorithms may pose a security risk to the system.",
    "rationale": "In use passwords should always match the configured hashing algorithm for the system. Impact: If the administrator forces a password change, this could cause a large spike in CPU usage if a large number of users change their password during the same time.",
    "audit": "Run the following script to get a list of users that are not using the currently configured hashing algorithm: #!/usr/bin/env bash { declare -A HASH_MAP=( [\"y\"]=\"yescrypt\" [\"1\"]=\"md5\" [\"2\"]=\"blowfish\" [\"5\"]=\"SHA256\" [\"6\"]=\"SHA512\" [\"g\"]=\"gost-yescrypt\" ) CONFIGURED_HASH=$(sed -n \"s/^\\s*ENCRYPT_METHOD\\s*\\(.*\\)\\s*$/\\1/p\" /etc/login.defs) for MY_USER in $(sed -n \"s/^\\(.*\\):\\\\$.*/\\1/p\" /etc/shadow) do CURRENT_HASH=$(sed -n \"s/${MY_USER}:\\\\$\\(.\\).*/\\1/p\" /etc/shadow) if [[ \"${HASH_MAP[\"${CURRENT_HASH}\"]^^}\" != \"${CONFIGURED_HASH^^}\" ]]; then echo \"The password for '${MY_USER}' is using '${HASH_MAP[\"${CURRENT_HASH}\"]}' instead of the configured '${CONFIGURED_HASH}'.\" fi done } Nothing should be returned Any system accounts that need to be expired should be carefully done separately by the system administrator to prevent any potential problems.",
    "remediation": "If the administrator wish to force an immediate change on all users as per the output of the audit, execute: #!/usr/bin/env bash { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) awk -F: -v UID_MIN=\"${UID_MIN}\" '( $3 >= UID_MIN && $1 != \"nfsnobody\" ) { print $1 }' /etc/passwd | xargs -n 1 chage -d 0 } NOTE: This could cause significant temporary CPU load on the system if a large number of users reset their passwords at the same time. References: 1. NIST SP 800-53 Rev. 5: IA-5, SC-28",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "If the administrator forces a password change, this could cause a large spike in CPU usage if a large number of users change their password during the same time.",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5, SC-28",
    "function_names": [
      "iam_user_password_hashing_algorithm_compliant",
      "iam_password_hashing_algorithm_current",
      "iam_user_password_hashing_algorithm_up_to_date",
      "iam_password_hashing_algorithm_valid",
      "iam_user_password_hashing_algorithm_secure"
    ]
  },
  {
    "id": "4.5.1.1",
    "title": "Ensure minimum days between password changes is configured",
    "assessment": "Automated",
    "description": "The PASS_MIN_DAYS parameter in /etc/login.defs allows an administrator to prevent users from changing their password until a minimum number of days have passed since the last time the user changed their password. It is recommended that PASS_MIN_DAYS parameter be set to 1 or more days.",
    "rationale": "By restricting the frequency of password changes, an administrator can prevent users from repeatedly changing their password in an attempt to circumvent password reuse controls.",
    "audit": "Run the following command and verify PASS_MIN_DAYS conforms to site policy (no less than 1 day): # grep PASS_MIN_DAYS /etc/login.defs PASS_MIN_DAYS 1 Run the following command and Review list of users and PAS_MIN_DAYS to Verify that all users' PAS_MIN_DAYS conforms to site policy (no less than 1 day): # awk -F : '(/^[^:]+:[^!*]/ && $4 < 1){print $1 \" \" $4}' /etc/shadow No <user>:<PASS_MIN_DAYS> should be returned",
    "remediation": "Set the PASS_MIN_DAYS parameter to 1 in /etc/login.defs: PASS_MIN_DAYS 1 Modify user parameters for all users with a password set to match: # chage --mindays 1 <user> Default Value: PASS_MIN_DAYS 0  References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "linux_password_min_days_configured",
      "linux_password_change_min_days_set",
      "linux_login_defs_pass_min_days_enabled",
      "linux_account_password_min_age_enforced",
      "linux_password_policy_min_days_compliant"
    ]
  },
  {
    "id": "4.5.1.2",
    "title": "Ensure password expiration is 365 days or less",
    "assessment": "Automated",
    "description": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age.",
    "rationale": "The window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity. It is recommended that the PASS_MAX_DAYS parameter does not exceed 365 days and is greater than the value of PASS_MIN_DAYS.",
    "audit": "Run the following command and verify PASS_MAX_DAYS conforms to site policy, does not exceed 365 days, and is greater than PASS_MIN_DAYS: # grep PASS_MAX_DAYS /etc/login.defs PASS_MAX_DAYS 365 Run the following command and Review list of users and PASS_MAX_DAYS to verify that all users' PASS_MAX_DAYS conforms to site policy, does not exceed 365 days, and is no less than PASS_MIN_DAYS # awk -F: '(/^[^:]+:[^!*]/ && ($5>365 || $5~/([0-1]|-1|\\s*)/)){print $1 \" \" $5}' /etc/shadow No <user>:<PASS_MAX_DAYS> should be returned",
    "remediation": "Set the PASS_MAX_DAYS parameter to conform to site policy in /etc/login.defs : PASS_MAX_DAYS 365 Modify user parameters for all users with a password set to match: # chage --maxdays 365 <user> Default Value: PASS_MAX_DAYS 99999  References: 1. https://www.cisecurity.org/white-papers/cis-password-policy-guide/ 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: A value of -1 will disable password expiration The password expiration must be greater than the minimum days between password changes or users will be unable to change their password",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. https://www.cisecurity.org/white-papers/cis-password-policy-guide/ 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: A value of -1 will disable password expiration The password expiration must be greater than the minimum days between password changes or users will be unable to change their password",
    "function_names": [
      "linux_login_defs_password_expiration_365d_or_less",
      "linux_password_policy_max_days_365_or_less",
      "linux_account_password_expiry_365d_limit",
      "linux_auth_password_max_age_365d_compliance",
      "linux_security_password_expiration_365d_enforced"
    ]
  },
  {
    "id": "4.5.1.3",
    "title": "Ensure password expiration warning days is 7 or more",
    "assessment": "Automated",
    "description": "The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify users that their password will expire in a defined number of days. It is recommended that the PASS_WARN_AGE parameter be set to 7 or more days.",
    "rationale": "Providing an advance warning that a password will be expiring gives users time to think of a secure password. Users caught unaware may choose a simple password or write it down where it may be discovered.",
    "audit": "Run the following command and verify PASS_WARN_AGE conforms to site policy (No less than 7 days): # grep PASS_WARN_AGE /etc/login.defs PASS_WARN_AGE 7 Verify all users with a password have their number of days of warning before password expires set to 7 or more: Run the following command and Review list of users and PASS_WARN_AGE to verify that all users' PASS_WARN_AGE conforms to site policy (No less than 7 days): # awk -F: '(/^[^:]+:[^!*]/ && $6<7){print $1 \" \" $6}' /etc/shadow No <user>:<PASS_WARN_AGE> should be returned",
    "remediation": "Set the PASS_WARN_AGE parameter to 7 in /etc/login.defs: PASS_WARN_AGE 7 Modify user parameters for all users with a password set to match: # chage --warndays 7 <user> Default Value: PASS_WARN_AGE 7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "linux_login_defs_password_warn_age_min_7d",
      "linux_password_policy_warn_age_7d_or_more",
      "linux_auth_password_expiration_warning_7d",
      "linux_security_password_warn_age_compliance",
      "linux_account_password_warn_age_minimum_7d"
    ]
  },
  {
    "id": "4.5.1.4",
    "title": "Ensure inactive password lock is 30 days or less",
    "assessment": "Automated",
    "description": "User accounts that have been inactive for over a given period of time can be automatically disabled. It is recommended that accounts that are inactive for 30 days after password expiration be disabled.",
    "rationale": "Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.",
    "audit": "Run the following command and verify INACTIVE conforms to site policy (no more than 30 days): # useradd -D | grep INACTIVE INACTIVE=30 Verify all users with a password have Password inactive no more than 30 days after password expires: Run the following command and Review list of users and INACTIVE to verify that all users' INACTIVE conforms to site policy (no more than 30 days): # awk -F: '(/^[^:]+:[^!*]/ && ($7~/(\\s*|-1)/ || $7>30)){print $1 \" \" $7}' /etc/shadow No <user>:<INACTIVE> should be returned",
    "remediation": "Run the following command to set the default password inactivity period to 30 days: # useradd -D -f 30 Modify user parameters for all users with a password set to match: # chage --inactive 30 <user> Default Value: INACTIVE=-1  Additional Information: A value of -1 would disable this setting",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "function_names": [
      "iam_user_inactive_password_lock_30d_or_less",
      "iam_user_password_lock_inactive_30d",
      "iam_account_inactive_password_lock_enabled",
      "iam_password_policy_inactive_lock_30d",
      "iam_user_password_expiry_lock_enabled"
    ]
  },
  {
    "id": "4.5.1.5",
    "title": "Ensure all users last password change date is in the past",
    "assessment": "Automated",
    "description": "All users should have a password change date in the past.",
    "rationale": "If a users recorded password change date is in the future then they could bypass any set password expiration.",
    "audit": "Run the following script to verify all users last password change was in the past: #!/usr/bin/env bash { l_output2=\"\" while read -r l_user; do l_change=\"$(chage --list $l_user | awk -F: '($1 ~ /^\\s*Last\\s+password\\s+change/ && $2 !~ /never/){print $2}' | xargs)\" if [[ \"$(date -d \"$l_change\" +%s)\" -gt \"$(date +%s)\" ]]; then l_output2=\"$l_output2\\n  - User: \\\"$l_user\\\" last password change is in the future \\\"$l_change\\\"\" fi done < <(awk -F: '($2 ~ /^[^*!xX\\n\\r][^\\n\\r]+/){print $1}' /etc/shadow) if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - All user password changes are in the past \\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\" fi }",
    "remediation": "Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate. References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "iam_user_password_change_date_valid",
      "iam_user_password_change_date_recent",
      "iam_user_password_change_date_not_future",
      "iam_user_password_change_date_compliant",
      "iam_user_password_change_date_enforced"
    ]
  },
  {
    "id": "4.5.1.6",
    "title": "Ensure the number of changed characters in a new password is configured",
    "assessment": "Automated",
    "description": "The pwquality difok option sets the number of characters in a password that must not be present in the old password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit": "Run the following command to verify that the difok option in /etc/security/pwquality.conf is set to 2 or more: # grep -P '^\\h*difok\\h*=\\h*([2-9]|[1-9][0-9]+)\\b' /etc/security/pwquality.conf difok = 2",
    "remediation": "Edit or add the following line in /etc/security/pwquality.conf to a value of 2 or more: difok = 2 Default Value: difok = 1 References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "iam_password_difok_configured",
      "iam_password_changed_chars_minimum",
      "iam_password_pwquality_difok_set",
      "iam_password_history_difok_enabled",
      "iam_password_change_difok_compliance"
    ]
  },
  {
    "id": "4.5.1.7",
    "title": "Ensure preventing the use of dictionary words for passwords is configured",
    "assessment": "Automated",
    "description": "The pwquality dictcheck option sets whether to check for the words from the cracklib dictionary.",
    "rationale": "If the operating system allows the user to select passwords based on dictionary words, this increases the chances of password compromise by increasing the opportunity for successful guesses, and brute-force attacks.",
    "audit": "Run the following command to verify that the dictcheck option in /etc/security/pwquality.conf is not set to 0: # grep -Pi '^\\h*dictcheck\\h*=\\h*[^0]' /etc/security/pwquality.conf dictcheck = 1",
    "remediation": "Edit or add the following line in /etc/security/pwquality.conf to a value of 1: dictcheck = 1 Default Value: dictcheck = 1 References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "iam_password_dictcheck_enabled",
      "iam_password_no_dictionary_words",
      "iam_pwquality_dictcheck_enabled",
      "iam_password_policy_dictcheck_enabled",
      "iam_password_complexity_dictcheck_enabled"
    ]
  },
  {
    "id": "4.5.2",
    "title": "Ensure system accounts are secured",
    "assessment": "Automated",
    "description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell.",
    "rationale": "It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.",
    "audit": "Run the following script to verify all local system accounts: • Do not have a valid login shell • Are locked #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" a_users=(); a_ulock=() # initialize arrays while read -r l_user; do # Populate array with system accounts that have a valid login shell a_users+=(\"$l_user\") done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|sync|shutdown|halt|^\\+)/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) while read -r l_ulock; do # Populate array with system accounts that aren't locked a_ulock+=(\"$l_ulock\") done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|^\\+)/ && $2!~/LK?/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) if ! (( ${#a_users[@]} > 0 )); then l_output=\"$l_output\\n  - local system accounts login is disabled\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_users[@]}\")\\\" system accounts with login enabled\\n   - List of accounts:\\n$(printf '%s\\n' \"${a_users[@]:0:$l_limit}\")\\n   - end of list\\n\" fi if ! (( ${#a_ulock[@]} > 0 )); then l_output=\"$l_output\\n  - local system accounts are locked\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_ulock[@]}\")\\\" system accounts that are not locked\\n   - List of accounts:\\n$(printf '%s\\n' \"${a_ulock[@]:0:$l_limit}\")\\n   - end of list\\n\" fi unset a_users; unset a_ulock # Remove arrays if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\" fi }   Note: • The root, sync, shutdown, and halt users are exempted from requiring a non- login shell • root is exempt from being locked",
    "remediation": "Set the shell for any accounts returned by the audit to nologin: # usermod -s $(which nologin) <user> Lock any non root accounts returned by the audit: # usermod -L <user> The following script will: • Set the shell for any accounts returned by the audit to nologin • Lock any non root system accounts returned by the audit: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" a_users=(); a_ulock=() # initialize arrays while read -r l_user; do # change system accounts that have a valid login shell to nolog shell echo -e \" - System account \\\"$l_user\\\" has a valid logon shell, changing shell to \\\"$(which nologin)\\\"\" usermod -s \"$(which nologin)\" \"$l_user\" done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|sync|shutdown|halt|^\\+)/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) while read -r l_ulock; do # Lock system accounts that aren't locked echo -e \" - System account \\\"$l_ulock\\\" is not locked, locking account\" usermod -L \"$l_ulock\" done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|^\\+)/ && $2!~/LK?/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) } References: 1. NIST SP 800-53 Rev. 5: AC-2. AC-3, AC-5, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-2. AC-3, AC-5, MP-2",
    "function_names": [
      "iam_user_no_interactive_shell",
      "iam_user_no_home_directory",
      "iam_user_password_locked",
      "iam_user_no_ssh_keys",
      "iam_user_system_account_restricted",
      "iam_user_no_login_shell",
      "iam_user_no_sudo_privileges",
      "iam_user_no_password_authentication",
      "iam_user_no_console_access",
      "iam_user_no_api_access_keys"
    ]
  },
  {
    "id": "4.5.3",
    "title": "Ensure default group for the root account is GID 0",
    "assessment": "Automated",
    "description": "The usermod command can be used to specify which group the root user belongs to. This affects permissions of files that are created by the root user.",
    "rationale": "Using GID 0 for the root account helps prevent root -owned files from accidentally becoming accessible to non-privileged users.",
    "audit": "Run the following command and verify the result is 0 : # grep \"^root:\" /etc/passwd | cut -f4 -d: 0",
    "remediation": "Run the following command to set the root user default group to GID 0 : # usermod -g 0 root References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "iam_root_group_gid_zero",
      "iam_root_group_default_gid_zero",
      "iam_account_root_group_gid_zero",
      "iam_root_user_group_gid_zero",
      "iam_root_default_group_gid_zero"
    ]
  },
  {
    "id": "4.5.4",
    "title": "Ensure default user umask is 027 or more restrictive",
    "assessment": "Automated",
    "description": "The user file-creation mode mask (umask) is use to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw- rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode. umask can be set with either octal or Symbolic values • Octal (Numeric) Value - Represented by either three or four digits. ie umask 0027 or umask 027. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively. • Symbolic Value - Represented by a comma separated list for User u, group g, and world/other o. The permissions listed are not masked by umask. ie a umask set by umask u=rwx,g=rx,o= is the Symbolic equivalent of the Octal umask 027. This umask would set a newly created directory with file mode drwxr-x--- and a newly created file with file mode rw-r-----. Setting the default umask: • pam_umask module: o will set the umask according to the system default in /etc/login.defs and user settings, solving the problem of different umask settings with different shells, display managers, remote sessions etc. o umask=<mask> value in the /etc/login.defs file is interpreted as Octal o Setting USERGROUPS_ENAB to yes in /etc/login.defs (default): ▪ will enable setting of the umask group bits to be the same as owner bits. (examples: 022 -> 002, 077 -> 007) for non-root users, if the uid is the same as gid, and username is the same as the primary group name ▪ userdel will remove the user's group if it contains no more members, and useradd will create by default a group with the name of the user   • System Wide Shell Configuration File: o /etc/profile - used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in the .profile, however this file is used to set an initial PATH or PS1 for all shell users of the system. is only executed for interactive login shells, or shells executed with the --login parameter o /etc/profile.d - /etc/profile will execute the scripts within /etc/profile.d/*.sh. It is recommended to place your configuration in a shell script within /etc/profile.d to set your own system wide environmental variables. o /etc/bash.bashrc - System wide version of .bashrc. etc/bashrc also invokes /etc/profile.d/*.sh if non-login shell, but redirects output to /dev/null if non-interactive. Is only executed for interactive shells or if BASH_ENV is set to /etc/bash.bashrc User Shell Configuration Files: • ~/.profile - Is executed to configure your shell before the initial command prompt. Is only read by login shells. • ~/.bashrc - Is executed for interactive shells. only read by a shell that's both interactive and non-login",
    "rationale": "Setting a very secure default value for umask ensures that users make a conscious choice about their file permissions. A default umask setting of 077 causes files and directories created by users to not be readable by any other user on the system. A umask of 027 would make files and directories readable by users in the same Unix group, while a umask of 022 would make files readable by every user on the system. Impact: Setting USERGROUPS_ENAB no in /etc/login.defs may change the expected behavior of useradd and userdel. Setting USERGROUPS_ENAB yes in /etc/login.defs • userdel will remove the user's group if it contains no more members • useradd will create by default a group with the name of the user.",
    "audit": "Run the following to verify: • A default user umask is set to enforce a newly created directories's permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive • No less restrictive System Wide umask is set Run the following script to verify that a default user umask is set enforcing a newly created directories's permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive: #!/bin/bash passing=\"\" grep -Eiq '^\\s*UMASK\\s+(0[0-7][2-7]7|[0-7][2-7]7)\\b' /etc/login.defs && grep -Eqi '^\\s*USERGROUPS_ENAB\\s*\"?no\"?\\b' /etc/login.defs && grep -Eq '^\\s*session\\s+(optional|requisite|required)\\s+pam_umask\\.so\\b' /etc/pam.d/common-session && passing=true grep -REiq '^\\s*UMASK\\s+\\s*(0[0-7][2-7]7|[0-7][2- 7]7|u=(r?|w?|x?)(r?|w?|x?)(r?|w?|x?),g=(r?x?|x?r?),o=)\\b' /etc/profile* /etc/bash.bashrc* && passing=true [ \"$passing\" = true ] && echo \"Default user umask is set\" Verify output is: \"Default user umask is set\" Run the following to verify that no less restrictive system wide umask is set: # grep -RPi '(^|^[^#]*)\\s*umask\\s+([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0- 6]\\b|[0-7][01][0-7]\\b|[0-7][0-7][0- 6]\\b|(u=[rwx]{0,3},)?(g=[rwx]{0,3},)?o=[rwx]+\\b|(u=[rwx]{1,3},)?g=[^rx]{1,3}( ,o=[rwx]{0,3})?\\b)' /etc/login.defs /etc/profile* /etc/bash.bashrc* No file should be returned",
    "remediation": "Run the following command and remove or modify the umask of any returned files: # grep -RPi '(^|^[^#]*)\\s*umask\\s+([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0- 6]\\b|[0-7][01][0-7]\\b|[0-7][0-7][0- 6]\\b|(u=[rwx]{0,3},)?(g=[rwx]{0,3},)?o=[rwx]+\\b|(u=[rwx]{1,3},)?g=[^rx]{1,3}( ,o=[rwx]{0,3})?\\b)' /etc/login.defs /etc/profile* /etc/bash.bashrc* Follow one of the following methods to set the default user umask: Edit /etc/login.defs and edit the UMASK and USERGROUPS_ENAB lines as follows: UMASK 027 USERGROUPS_ENAB no Edit /etc/pam.d/common-session and add or edit the following: session optional                        pam_umask.so OR Configure umask in one of the following files: • A file in the /etc/profile.d/ directory ending in .sh • /etc/profile • /etc/bash.bashrc Example: /etc/profile.d/set_umask.sh umask 027 Note: this method only applies to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked. Default Value: UMASK 022 References: 1. pam_umask(8) 2. NIST SP 800-53 Rev. 5: AC-3, MP-2   Additional Information: • Other methods of setting a default user umask exist • If other methods are in use in your environment they should be audited • The default user umask can be overridden with a user specific umask • The user creating the directories or files has the discretion of changing the permissions: o Using the chmod command o Setting a different default umask by adding the umask command into a User Shell Configuration File, (.bashrc), in their home directory o Manually changing the umask for the duration of a login session by running the umask command",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "Setting USERGROUPS_ENAB no in /etc/login.defs may change the expected behavior of useradd and userdel. Setting USERGROUPS_ENAB yes in /etc/login.defs • userdel will remove the user's group if it contains no more members • useradd will create by default a group with the name of the user.",
    "references": "1. pam_umask(8) 2. NIST SP 800-53 Rev. 5: AC-3, MP-2   Additional Information: • Other methods of setting a default user umask exist • If other methods are in use in your environment they should be audited • The default user umask can be overridden with a user specific umask • The user creating the directories or files has the discretion of changing the permissions: o Using the chmod command o Setting a different default umask by adding the umask command into a User Shell Configuration File, (.bashrc), in their home directory o Manually changing the umask for the duration of a login session by running the umask command",
    "function_names": [
      "linux_umask_default_restrictive",
      "linux_umask_min_027",
      "linux_pam_umask_configured",
      "linux_login_defs_umask_set",
      "linux_profile_umask_configured",
      "linux_bashrc_umask_configured",
      "linux_user_shell_umask_configured",
      "linux_system_umask_consistent",
      "linux_umask_symbolic_valid",
      "linux_umask_octal_valid"
    ]
  },
  {
    "id": "4.5.5",
    "title": "Ensure default user shell timeout is configured",
    "assessment": "Automated",
    "description": "TMOUT is an environmental setting that determines the timeout of a shell in seconds. • TMOUT= n - Sets the shell timeout to n seconds. A setting of TMOUT=0 disables timeout. • readonly TMOUT- Sets the TMOUT environmental variable as readonly, preventing unwanted modification during run-time. • export TMOUT - exports the TMOUT variable System Wide Shell Configuration Files: • /etc/profile - used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in the .bash_profile, however this file is used to set an initial PATH or PS1 for all shell users of the system. Is only executed for interactive login shells, or shells executed with the --login parameter. • /etc/profile.d - /etc/profile will execute the scripts within /etc/profile.d/*.sh. It is recommended to place your configuration in a shell script within /etc/profile.d to set your own system wide environmental variables. • /etc/bash.bashrc - System wide version of bash.bashrc. etc/bash.bashrc also invokes /etc/profile.d/*.sh if non-login shell, but redirects output to /dev/null if non-interactive. Is only executed for interactive shells or if BASH_ENV is set to /etc/bash.bashrc.",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized user access to another user's shell session that has been left unattended. It also ends the inactive session and releases the resources associated with that session.",
    "audit": "Run the following script to verify TMOUT is configured: • as multiple lines, or a single line • once, and only once • in one and only one of the following locations: o A file in the /etc/profile.d/ directory ending in .sh o /etc/profile o /etc/bash.bashrc • Follows local site policy: o Not to exceed 900 o Not equal to 0 • to be readonly • to be exported  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_tmv_max=\"900\" l_searchloc=\"/etc/bashrc /etc/bash.bashrc /etc/profile /etc/profile.d/*.sh\" a_tmofile=() while read -r l_file; do [ -e \"$l_file\" ] && a_tmofile+=(\"$(readlink -f $l_file)\") done < <(grep -PRils '^\\h*([^#\\n\\r]+\\h+)?TMOUT=\\d+\\b' $l_searchloc) if ! (( ${#a_tmofile[@]} > 0 )); then l_output2=\"$l_output2\\n - TMOUT is not set\" elif (( ${#a_tmofile[@]} > 1 )); then l_output2=\"$l_output2\\n - TMOUT is set in multiple locations.\\n  - List of files where TMOUT is set:\\n$(printf '%s\\n' \"${a_tmofile[@]}\")\\n  - end of list\\n\" else for l_file in ${a_tmofile[@]}; do if (( \"$(grep -Pci '^\\h*([^#\\n\\r]+\\h+)?TMOUT=\\d+' \"$l_file\")\" > 1 )); then l_output2=\"$l_output2\\n - TMOUT is set multiple times in \\\"$l_file\\\"\" else l_tmv=\"$(grep -Pi '^\\h*([^#\\n\\r]+\\h+)?TMOUT=\\d+' \"$l_file\" | grep -Po '\\d+')\" if (( \"$l_tmv\" > \"$l_tmv_max\" )); then l_output2=\"$l_output\\n - TMOUT is \\\"$l_tmv\\\" in \\\"$l_file\\\"\\n  - Should be \\\"$l_tmv_max\\\" or less and not \\\"0\\\"\" else l_output=\"$l_output\\n- TMOUT is correctly set to \\\"$l_tmv\\\" in \\\"$l_file\\\"\" if grep -Piq '^\\h*([^#\\n\\r]+\\h+)?readonly\\h+TMOUT\\b' \"$l_file\"; then l_output=\"$l_output\\n- TMOUT is correctly set to \\\"readonly\\\" in \\\"$l_file\\\"\" else l_output2=\"$l_output2\\n- TMOUT is not set to \\\"readonly\\\"\" fi if grep -Piq '^(\\h*|\\h*[^#\\n\\r]+\\h*;\\h*)export\\h+TMOUT\\b' \"$l_file\"; then l_output=\"$l_output\\n- TMOUT is correctly set to \\\"export\\\" in \\\"$l_file\\\"\" else l_output2=\"$l_output2\\n- TMOUT is not set to \\\"export\\\"\" fi fi fi done fi unset a_tmofile # Remove array if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\" fi }",
    "remediation": "Review /etc/bash.bashrc, /etc/profile, and all files ending in *.sh in the /etc/profile.d/ directory and remove or edit all TMOUT=_n_ entries to follow local site policy. TMOUT should: • Be configured once, as multiple lines, or a single line, in one and only one of the following locations: o A file in the /etc/profile.d/ directory ending in .sh o /etc/profile o /etc/bash.bashrc • Not exceed 900 • Not be equal to 0 Multiple line example: TMOUT=900 readonly TMOUT export TMOUT Single line example: readonly TMOUT=900 ; export TMOUT References: 1. NIST SP 800-53 Rev. 5: AC-11 Additional Information: The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system, it is recommended that their configuration files are also checked Other methods of setting a timeout exist not covered here",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-11 Additional Information: The audit and remediation in this recommendation apply to bash and shell. If other shells are supported on the system, it is recommended that their configuration files are also checked Other methods of setting a timeout exist not covered here",
    "function_names": [
      "shell_user_timeout_configured",
      "shell_user_tmout_readonly",
      "shell_user_tmout_exported",
      "shell_profile_tmout_configured",
      "shell_profile_tmout_readonly",
      "shell_profile_tmout_exported",
      "shell_profile_d_tmout_configured",
      "shell_profile_d_tmout_readonly",
      "shell_profile_d_tmout_exported",
      "shell_bashrc_tmout_configured",
      "shell_bashrc_tmout_readonly",
      "shell_bashrc_tmout_exported"
    ]
  },
  {
    "id": "4.5.6",
    "title": "Ensure nologin is not listed in /etc/shells",
    "assessment": "Automated",
    "description": "/etc/shells is a text file which contains the full pathnames of valid login shells. This file is consulted by chsh and available to be queried by other programs. Be aware that there are programs which consult this file to find out if a user is a normal user; for example, FTP daemons traditionally disallow access to users with shells not included in this file.",
    "rationale": "A user can use chsh to change their configured shell. If a user has a shell configured that isn't in in /etc/shells, then the system assumes that they're somehow restricted. In the case of chsh it means that the user cannot change that value. Other programs might query that list and apply similar restrictions. By putting nologin in /etc/shells, any user that has nologin as its shell is considered a full, unrestricted user. This is not the expected behavior for nologin.",
    "audit": "Run the following command to verify that nologin is not listed in the /etc/shells file: # grep '/nologin\\b' /etc/shells Nothing should be returned",
    "remediation": "Edit /etc/shells and remove any lines that include nologin References: 1. shells(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. shells(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "linux_shells_nologin_absent",
      "linux_shells_valid_shells_only",
      "linux_shells_secure_shells_configured",
      "linux_shells_unauthorized_shells_removed",
      "linux_shells_default_shells_compliant"
    ]
  },
  {
    "id": "4.5.7",
    "title": "Ensure maximum number of same consecutive characters in a password is configured",
    "assessment": "Automated",
    "description": "The pwquality maxrepeat option sets the maximum number of allowed same consecutive characters in a new password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit": "Run the following command to verify that the maxrepeat option in /etc/security/pwquality.conf is set to 3 or less, and not 0: # grep -Pi '^\\h*maxrepeat\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf maxrepeat = 3 Note: The check is disabled if the value is 0",
    "remediation": "Edit or add the following line in /etc/security/pwquality.conf to a value of 3 or less and not 0: maxrepeat = 3 Default Value: maxrepeat = 0 References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "iam_password_max_consecutive_chars_configured",
      "iam_password_max_repeat_limit_set",
      "iam_pwquality_maxrepeat_enabled",
      "iam_password_policy_max_repeat_configured"
    ]
  },
  {
    "id": "5.1.1.1.1",
    "title": "Ensure systemd-journal-remote is installed",
    "assessment": "Automated",
    "description": "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralised log management.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit": "Run the following command to verify systemd-journal-remote is installed. Run the following command: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' systemd-journal-remote systemd-journal-remote     install ok installed    installed",
    "remediation": "Run the following command to install systemd-journal-remote: # apt install systemd-journal-remote References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5",
    "function_names": [
      "systemd_journal_remote_installed",
      "systemd_journal_remote_enabled",
      "systemd_journal_remote_configured",
      "systemd_journal_remote_log_forwarding_enabled",
      "systemd_journal_remote_centralized_logging_enabled"
    ]
  },
  {
    "id": "5.1.1.1.2",
    "title": "Ensure systemd-journal-remote is configured",
    "assessment": "Manual",
    "description": "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralized log management.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit": "Verify systemd-journal-remote is configured. Run the following command: # grep -P \"^ *URL=|^ *ServerKeyFile=|^ *ServerCertificateFile=|^ *TrustedCertificateFile=\" /etc/systemd/journal-upload.conf Verify the output matches per your environments certificate locations and the URL of the log server. Example: URL=192.168.50.42 ServerKeyFile=/etc/ssl/private/journal-upload.pem ServerCertificateFile=/etc/ssl/certs/journal-upload.pem TrustedCertificateFile=/etc/ssl/ca/trusted.pem",
    "remediation": "Edit the /etc/systemd/journal-upload.conf file and ensure the following lines are set per your environment: URL=192.168.50.42 ServerKeyFile=/etc/ssl/private/journal-upload.pem ServerCertificateFile=/etc/ssl/certs/journal-upload.pem TrustedCertificateFile=/etc/ssl/ca/trusted.pem Restart the service: # systemctl restart systemd-journal-upload References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5",
    "function_names": [
      "systemd_journal_remote_log_forwarding_enabled",
      "systemd_journal_remote_centralized_logging_configured",
      "systemd_journal_remote_remote_host_configured",
      "systemd_journal_remote_network_logging_enabled",
      "systemd_journal_remote_secure_transfer_enabled"
    ]
  },
  {
    "id": "5.1.1.1.3",
    "title": "Ensure systemd-journal-remote is enabled",
    "assessment": "Manual",
    "description": "Journald (via systemd-journal-remote) supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralised log management.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit": "Verify systemd-journal-remote is enabled. Run the following command: # systemctl is-enabled systemd-journal-upload.service Verify the output matches: enabled",
    "remediation": "Run the following command to enable systemd-journal-remote: # systemctl --now enable systemd-journal-upload.service References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, CM-7, SI-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, CM-7, SI-5",
    "function_names": [
      "systemd_journal_remote_enabled",
      "systemd_journal_remote_configured",
      "systemd_journal_remote_logging_enabled",
      "systemd_journal_remote_centralized_logging_enabled",
      "systemd_journal_remote_service_active",
      "systemd_journal_remote_remote_host_configured"
    ]
  },
  {
    "id": "5.1.1.1.4",
    "title": "Ensure journald is not configured to receive logs from a remote client",
    "assessment": "Automated",
    "description": "Journald supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts. Note: • The same package, systemd-journal-remote, is used for both sending logs to remote hosts and receiving incoming logs. • With regards to receiving logs, there are two services; systemd-journal- remote.socket and systemd-journal-remote.service.",
    "rationale": "If a client is configured to also receive data, thus turning it into a server, the client system is acting outside it's operational boundary.",
    "audit": "Run the following command to verify systemd-journal-remote.socket is not enabled: # systemctl is-enabled systemd-journal-remote.socket Verify the output matches: disabled",
    "remediation": "Run the following command to disable systemd-journal-remote.socket: # systemctl --now disable systemd-journal-remote.socket References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, CM-6, CM-7",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, CM-6, CM-7",
    "function_names": [
      "journald_remote_client_disabled",
      "journald_remote_receive_disabled",
      "journald_remote_socket_disabled",
      "journald_remote_service_disabled",
      "journald_remote_logging_disabled",
      "journald_no_remote_hosts_allowed",
      "journald_remote_reception_blocked",
      "journald_remote_log_server_disabled"
    ]
  },
  {
    "id": "5.1.1.2",
    "title": "Ensure journald service is enabled",
    "assessment": "Automated",
    "description": "Ensure that the systemd-journald service is enabled to allow capturing of logging events.",
    "rationale": "If the systemd-journald service is not enabled to start on boot, the system will not capture logging events.",
    "audit": "Run the following command to verify systemd-journald is enabled: # systemctl is-enabled systemd-journald.service Verify the output matches: static",
    "remediation": "By default the systemd-journald service does not have an [Install] section and thus cannot be enabled / disabled. It is meant to be referenced as Requires or Wants by other unit files. As such, if the status of systemd-journald is not static, investigate why. References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-7 AU-12",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-7 AU-12",
    "function_names": [
      "systemd_journald_service_enabled",
      "systemd_journald_logging_enabled",
      "systemd_journald_capture_events_enabled"
    ]
  },
  {
    "id": "5.1.1.3",
    "title": "Ensure journald is configured to compress large log files",
    "assessment": "Automated",
    "description": "The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large.",
    "rationale": "Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.",
    "audit": "Run the following command to verify that large files will be compressed: # grep -Psi '^\\h*Compress\\h*=\\h*yes\\b' /etc/systemd/journald.conf /etc/systemd/journald.conf.d/* Verify the output matches: Compress=yes",
    "remediation": "Edit the /etc/systemd/journald.conf file or a file ending in .conf in /etc/systemd/journald.conf.d/ and add the following line: Compress=yes Restart the service: # systemctl restart systemd-journald References: 1. NIST SP 800-53 Rev. 5: AU-4   Additional Information: The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configs present, they override the main configuration parameters. It is possible to change the default threshold of 512 bytes per object before compression is used.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-4   Additional Information: The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configs present, they override the main configuration parameters. It is possible to change the default threshold of 512 bytes per object before compression is used.",
    "function_names": [
      "journald_log_compression_enabled",
      "journald_large_log_compression_enabled",
      "journald_log_size_compression_enabled",
      "journald_log_file_compression_enabled",
      "journald_log_rotation_compression_enabled"
    ]
  },
  {
    "id": "5.1.1.4",
    "title": "Ensure journald is configured to write logfiles to persistent disk",
    "assessment": "Automated",
    "description": "Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server they are protected from loss due to a reboot.",
    "rationale": "Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.",
    "audit": "Run the following command to verify that logs are persisted to disk: # grep -Psi '^\\h*Storage\\h*=\\h*persistent\\b' /etc/systemd/journald.conf /etc/systemd/journald.conf.d/* Verify the output matches: Storage=persistent",
    "remediation": "Edit the /etc/systemd/journald.conf file or a file ending in .conf in /etc/systemd/journald.conf.d/ and add the following line: Storage=persistent Restart the service: # systemctl restart systemd-journald References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12   Additional Information: The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configs present, they override the main configuration parameters. Note: a bug in systemd versions prior to v243 caused an error at the unmounting of /var/log (and thus, /var) if Storage=persistent is set in /etc/systemd/journald.conf.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12   Additional Information: The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configs present, they override the main configuration parameters. Note: a bug in systemd versions prior to v243 caused an error at the unmounting of /var/log (and thus, /var) if Storage=persistent is set in /etc/systemd/journald.conf.",
    "function_names": [
      "system_journald_persistent_logging_enabled",
      "system_journald_logs_to_disk_enabled",
      "system_journald_non_volatile_logging_enabled",
      "system_journald_storage_persistent",
      "system_journald_logfile_writes_enabled"
    ]
  },
  {
    "id": "5.1.1.5",
    "title": "Ensure journald is not configured to send logs to rsyslog",
    "assessment": "Manual",
    "description": "Data from journald should be kept in the confines of the service and not forwarded on to other services.",
    "rationale": "IF journald is the method for capturing logs, all logs of the system should be handled by journald and not forwarded to other logging mechanisms.",
    "audit": "IF journald is the method for capturing logs Run the following command to verify that logs are not forwarded to rsyslog: # grep -Psi  '^\\h*ForwardToSyslog\\h*=\\h*yes\\b` /etc/systemd/journald.conf /etc/systemd/journald.conf.d/* Verify that there is no output.",
    "remediation": "Edit the /etc/systemd/journald.conf file and files in /etc/systemd/journald.conf.d/ and ensure that ForwardToSyslog=yes is removed. Restart the service: # systemctl restart systemd-journald References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-6, AU-7, AU-12",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-6, AU-7, AU-12",
    "function_names": [
      "journald_log_forwarding_disabled",
      "journald_rsyslog_integration_disabled",
      "journald_log_transfer_restricted",
      "journald_external_logging_disabled",
      "journald_rsyslog_forwarding_blocked"
    ]
  },
  {
    "id": "5.1.1.6",
    "title": "Ensure journald log rotation is configured per site policy",
    "assessment": "Manual",
    "description": "Journald includes the capability of rotating log files regularly to avoid filling up the system with logs or making the logs unmanageably large. The file /etc/systemd/journald.conf is the configuration file used to specify how logs generated by Journald should be rotated.",
    "rationale": "By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files.",
    "audit": "Review /etc/systemd/journald.conf, and files in /etc/systemd/journald.conf.d/, and verify logs are rotated according to site policy. The specific parameters for log rotation are: SystemMaxUse= SystemKeepFree= RuntimeMaxUse= RuntimeKeepFree= MaxFileSec=",
    "remediation": "Review /etc/systemd/journald.conf and verify logs are rotated according to site policy. The settings should be carefully understood as there are specific edge cases and prioritization of parameters. The specific parameters for log rotation are: SystemMaxUse= SystemKeepFree= RuntimeMaxUse= RuntimeKeepFree= MaxFileSec= References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-7, AU-12  Additional Information: See man 5 journald.conf for detailed information regarding the parameters in use.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-7, AU-12  Additional Information: See man 5 journald.conf for detailed information regarding the parameters in use.",
    "function_names": [
      "journald_log_rotation_enabled",
      "journald_log_max_size_set",
      "journald_log_max_files_set",
      "journald_log_vacuum_size_set",
      "journald_log_vacuum_time_set",
      "journald_log_retention_policy_configured",
      "journald_log_compression_enabled",
      "journald_log_storage_persistent",
      "journald_log_rate_limiting_enabled",
      "journald_log_forwarding_configured"
    ]
  },
  {
    "id": "5.1.1.7",
    "title": "Ensure journald default file permissions configured",
    "assessment": "Manual",
    "description": "Journald will create logfiles that do not already exist on the system. This setting controls what permissions will be applied to these newly created files.",
    "rationale": "It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected.",
    "audit": "First see if there is an override file /etc/tmpfiles.d/systemd.conf. If so, this file will override all default settings as defined in /usr/lib/tmpfiles.d/systemd.conf and should be inspected. If there is no override file, inspect the default /usr/lib/tmpfiles.d/systemd.conf against the site specific requirements. Ensure that file permissions are 0640. Should a site policy dictate less restrictive permissions, ensure to follow said policy. NOTE: More restrictive permissions such as 0600 is implicitly sufficient.",
    "remediation": "If the default configuration is not appropriate for the site specific requirements, copy /usr/lib/tmpfiles.d/systemd.conf to /etc/tmpfiles.d/systemd.conf and modify as required. Requirements is either 0640 or site policy if that is less restrictive. References: 1. NIST SP 800-53 Rev. 5: AC-3, AU-2, AU-12, MP-2, SI-5 Additional Information: See man 5 tmpfiles.d for detailed information on the permission sets for the relevant log files. Further information with examples can be found at https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, AU-2, AU-12, MP-2, SI-5 Additional Information: See man 5 tmpfiles.d for detailed information on the permission sets for the relevant log files. Further information with examples can be found at https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html",
    "function_names": [
      "journald_logfile_permissions_configured",
      "journald_file_permissions_restricted",
      "journald_default_logfile_permissions_set",
      "journald_logfile_creation_permissions_secure",
      "journald_new_logfile_permissions_enforced"
    ]
  },
  {
    "id": "5.1.2.1",
    "title": "Ensure rsyslog is installed",
    "assessment": "Automated",
    "description": "The rsyslog software is recommended in environments where journald does not meet operation requirements.",
    "rationale": "The security enhancements of rsyslog such as connection-oriented (i.e. TCP) transmission of logs, the option to log to database formats, and the encryption of log data en route to a central logging server) justify installing and configuring the package.",
    "audit": "Run the following command to verify rsyslog is installed: # dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' rsyslog rsyslog     install ok installed    installed",
    "remediation": "Run the following command to install rsyslog: # apt install rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "function_names": [
      "logging_rsyslog_installed",
      "logging_rsyslog_configured",
      "logging_rsyslog_running",
      "logging_rsyslog_enabled",
      "logging_rsyslog_version_current"
    ]
  },
  {
    "id": "5.1.2.2",
    "title": "Ensure rsyslog service is enabled",
    "assessment": "Automated",
    "description": "Once the rsyslog package is installed, ensure that the service is enabled.",
    "rationale": "If the rsyslog service is not enabled to start on boot, the system will not capture logging events.",
    "audit": "Run the following command to verify rsyslog is enabled: # systemctl is-enabled rsyslog Verify the output matches: enabled",
    "remediation": "Run the following command to enable rsyslog: # systemctl --now enable rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12",
    "function_names": [
      "logging_rsyslog_service_enabled",
      "logging_rsyslog_service_running",
      "logging_rsyslog_service_configured",
      "logging_rsyslog_service_boot_enabled",
      "logging_rsyslog_service_active"
    ]
  },
  {
    "id": "5.1.2.3",
    "title": "Ensure journald is configured to send logs to rsyslog",
    "assessment": "Manual",
    "description": "Data from journald may be stored in volatile memory or persisted locally on the server. Utilities exist to accept remote export of journald logs, however, use of the RSyslog service provides a consistent means of log collection and export.",
    "rationale": "IF RSyslog is the preferred method for capturing logs, all logs of the system should be sent to it for further processing.",
    "audit": "IF RSyslog is the preferred method for capturing logs Review /etc/systemd/journald.conf and verify that logs are forwarded to rsyslog. # grep ^\\s*ForwardToSyslog /etc/systemd/journald.conf Verify the output matches: ForwardToSyslog=yes",
    "remediation": "Edit the /etc/systemd/journald.conf file and add the following line: ForwardToSyslog=yes Restart the service: # systemctl restart rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-9  Additional Information: As noted in the journald man pages, journald logs may be exported to rsyslog either through the process mentioned here, or through a facility like systemd- journald.service. There are trade-offs involved in each implementation, where ForwardToSyslog will immediately capture all events (and forward to an external log server, if properly configured), but may not capture all boot-up activities. Mechanisms such as systemd-journald.service, on the other hand, will record bootup events, but may delay sending the information to rsyslog, leading to the potential for log manipulation prior to export. Be aware of the limitations of all tools employed to secure a system. The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configurations present, they override the main configuration parameters",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-9  Additional Information: As noted in the journald man pages, journald logs may be exported to rsyslog either through the process mentioned here, or through a facility like systemd- journald.service. There are trade-offs involved in each implementation, where ForwardToSyslog will immediately capture all events (and forward to an external log server, if properly configured), but may not capture all boot-up activities. Mechanisms such as systemd-journald.service, on the other hand, will record bootup events, but may delay sending the information to rsyslog, leading to the potential for log manipulation prior to export. Be aware of the limitations of all tools employed to secure a system. The main configuration file /etc/systemd/journald.conf is read before any of the custom *.conf files. If there are custom configurations present, they override the main configuration parameters",
    "function_names": [
      "journald_rsyslog_forwarding_enabled",
      "journald_log_export_to_rsyslog",
      "rsyslog_journald_integration_active",
      "journald_remote_logging_configured",
      "journald_rsyslog_output_enabled"
    ]
  },
  {
    "id": "5.1.2.4",
    "title": "Ensure rsyslog default file permissions are configured",
    "assessment": "Automated",
    "description": "RSyslog will create logfiles that do not already exist on the system. This setting controls what permissions will be applied to these newly created files.",
    "rationale": "It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected. Impact: The systems global umask could override, but only making the file permissions stricter, what is configured in RSyslog with the FileCreateMode directive. RSyslog also has it's own $umask directive that can alter the intended file creation mode. In addition, consideration should be given to how FileCreateMode is used. Thus it is critical to ensure that the intended file creation mode is not overridden with less restrictive settings in /etc/rsyslog.conf, /etc/rsyslog.d/*conf files and that FileCreateMode is set before any file is created.",
    "audit": "Run the following command: # grep ^\\$FileCreateMode /etc/rsyslog.conf /etc/rsyslog.d/*.conf Verify the output matches: $FileCreateMode 0640 Should a site policy dictate less restrictive permissions, ensure to follow said policy. NOTE: More restrictive permissions such as 0600 is implicitly sufficient.",
    "remediation": "Edit either /etc/rsyslog.conf or a dedicated .conf file in /etc/rsyslog.d/ and set $FileCreateMode to 0640 or more restrictive: $FileCreateMode 0640 Restart the service: # systemctl restart rsyslog References: 1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, AC-6, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "impact": "The systems global umask could override, but only making the file permissions stricter, what is configured in RSyslog with the FileCreateMode directive. RSyslog also has it's own $umask directive that can alter the intended file creation mode. In addition, consideration should be given to how FileCreateMode is used. Thus it is critical to ensure that the intended file creation mode is not overridden with less restrictive settings in /etc/rsyslog.conf, /etc/rsyslog.d/*conf files and that FileCreateMode is set before any file is created.",
    "references": "1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, AC-6, MP-2",
    "function_names": [
      "rsyslog_file_permissions_configured",
      "rsyslog_default_file_permissions_secure",
      "rsyslog_logfile_permissions_restricted",
      "rsyslog_new_file_permissions_enforced",
      "rsyslog_file_creation_permissions_set"
    ]
  },
  {
    "id": "5.1.2.5",
    "title": "Ensure logging is configured",
    "assessment": "Manual",
    "description": "The /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files specifies rules for logging and which files are to be used to log certain classes of messages.",
    "rationale": "A great deal of important security-related information is sent via rsyslog (e.g., successful and failed su attempts, failed login attempts, root login attempts, etc.).",
    "audit": "Review the contents of /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files to ensure appropriate logging is set. In addition, run the following command and verify that the log files are logging information as expected: # ls -l /var/log/",
    "remediation": "Edit the following lines in the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files as appropriate for your environment. NOTE: The below configuration is shown for example purposes only. Due care should be given to how the organization wish to store log data. *.emerg                                  :omusrmsg:* auth,authpriv.*                          /var/log/secure mail.*                                  -/var/log/mail mail.info                               -/var/log/mail.info mail.warning                            -/var/log/mail.warn mail.err                                 /var/log/mail.err cron.*                                   /var/log/cron *.=warning;*.=err                       -/var/log/warn *.crit                                   /var/log/warn *.*;mail.none;news.none                 -/var/log/messages local0,local1.*                         -/var/log/localmessages local2,local3.*                         -/var/log/localmessages local4,local5.*                         -/var/log/localmessages local6,local7.*                         -/var/log/localmessages Run the following command to reload the rsyslogd configuration: # systemctl restart rsyslog References: 1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AU-2, AU-7, AU-12",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AU-2, AU-7, AU-12"
  },
  {
    "id": "5.1.2.6",
    "title": "Ensure rsyslog is configured to send logs to a remote log host",
    "assessment": "Manual",
    "description": "RSyslog supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralised log management.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit": "Review the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and verify that logs are sent to a central host (where loghost.example.com is the name of your central log host): Old format  # grep \"^*.*[^I][^I]*@\" /etc/rsyslog.conf /etc/rsyslog.d/*.conf Output should include @@<FQDN or IP of remote loghost>, for example *.* @@loghost.example.com New format  # grep -E '^\\s*([^#]+\\s+)?action\\(([^#]+\\s+)?\\btarget=\\\"?[^#\"]+\\\"?\\b' /etc/rsyslog.conf /etc/rsyslog.d/*.conf Output should include target=<FQDN or IP of remote loghost>, for example: *.* action(type=\"omfwd\" target=\"loghost.example.com\" port=\"514\" protocol=\"tcp\"",
    "remediation": "Edit the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and add the following line (where loghost.example.com is the name of your central log host). The target directive may either be a fully qualified domain name or an IP address. *.* action(type=\"omfwd\" target=\"192.168.2.100\" port=\"514\" protocol=\"tcp\" action.resumeRetryCount=\"100\" queue.type=\"LinkedList\" queue.size=\"1000\") Run the following command to reload the rsyslogd configuration: # systemctl restart rsyslog References: 1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AU-6 Additional Information: In addition, see the RSyslog documentation for implementation details of TLS.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AU-6 Additional Information: In addition, see the RSyslog documentation for implementation details of TLS.",
    "function_names": [
      "rsyslog_config_remote_log_host_enabled",
      "rsyslog_remote_logging_enabled",
      "rsyslog_centralized_logging_enabled",
      "rsyslog_remote_log_host_configured",
      "rsyslog_log_forwarding_enabled"
    ]
  },
  {
    "id": "5.1.2.7",
    "title": "Ensure rsyslog is not configured to receive logs from a remote client",
    "assessment": "Automated",
    "description": "RSyslog supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts.",
    "rationale": "If a client is configured to also receive data, thus turning it into a server, the client system is acting outside it's operational boundary.",
    "audit": "Review the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and verify that the system is not configured to accept incoming logs. Old format  # grep '$ModLoad imtcp' /etc/rsyslog.conf /etc/rsyslog.d/*.conf # grep '$InputTCPServerRun' /etc/rsyslog.conf /etc/rsyslog.d/*.conf No output expected. New format  # grep -P -- '^\\h*module\\(load=\"imtcp\"\\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf # grep -P -- '^\\h*input\\(type=\"imtcp\" port=\"514\"\\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf No output expected.",
    "remediation": "Should there be any active log server configuration found in the auditing section, modify those file and remove the specific lines highlighted by the audit. Ensure none of the following entries are present in any of /etc/rsyslog.conf or /etc/rsyslog.d/*.conf. Old format  $ModLoad imtcp $InputTCPServerRun New format  module(load=\"imtcp\") input(type=\"imtcp\" port=\"514\") Restart the service: # systemctl restart rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-6, AU-7, AU-12",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-6, AU-7, AU-12",
    "function_names": [
      "rsyslog_remote_client_receive_disabled",
      "rsyslog_remote_log_reception_disabled",
      "rsyslog_remote_host_logging_disabled",
      "rsyslog_client_receive_blocked",
      "rsyslog_remote_input_disabled"
    ]
  },
  {
    "id": "5.1.3",
    "title": "Ensure all logfiles have appropriate access configured",
    "assessment": "Automated",
    "description": "Log files stored in /var/log/ contain logged information from many services on the system and potentially from other logged hosts as well.",
    "rationale": "It is important that log files have the correct permissions to ensure that sensitive data is protected and that only the appropriate users / groups have access to them.",
    "audit": "Run the following script to verify that files in /var/log/ have appropriate permissions and ownership:  #!/usr/bin/env bash { l_op2=\"\" l_output2=\"\" l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\" file_test_chk() { l_op2=\"\" if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then l_op2=\"$l_op2\\n  - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\" fi if [[ ! \"$l_user\" =~ $l_auser ]]; then l_op2=\"$l_op2\\n  - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_op2=\"$l_op2\\n  - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\" fi [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\" } unset a_file && a_file=() # clear and initialize array # Loop to create array with stat of files that could possibly fail one of the audits while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\")\") done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! - group root \\) -print0) while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do l_bname=\"$(basename \"$l_fname\")\" case \"$l_bname\" in lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp- * | README) perm_mask='0113' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"root\" l_agroup=\"(root|utmp)\" file_test_chk ;; secure | auth.log | syslog | messages) perm_mask='0137' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\" file_test_chk ;; SSSD | sssd) perm_mask='0117' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"(root|SSSD)\" l_agroup=\"(root|SSSD)\" file_test_chk ;; gdm | gdm3)  perm_mask='0117' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"root\" l_agroup=\"(root|gdm|gdm3)\" file_test_chk ;; *.journal | *.journal~) perm_mask='0137' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"root\" l_agroup=\"(root|systemd-journal)\" file_test_chk ;; *) perm_mask='0137' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\" if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then if [[ ! \"$l_user\" =~ $l_auser ]]; then l_auser=\"(root|syslog|$l_user)\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_tst=\"\" while l_out3=\"\" read -r l_duid; do [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\" [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\" fi fi file_test_chk ;; esac done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\" unset a_file # Clear array # If all files passed, then we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Results:\\n ** Pass **\\n- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n\" else # print the reason why we are failing echo -e \"\\n- Audit Results:\\n ** Fail **\\n$l_output2\" fi }",
    "remediation": "Run the following script to update permissions and ownership on files in /var/log. Although the script is not destructive, ensure that the output is captured in the event that the remediation causes issues.  #!/usr/bin/env bash { l_op2=\"\" l_output2=\"\" l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\" file_test_fix() { l_op2=\"\" l_fuser=\"root\" l_fgroup=\"root\" if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then l_op2=\"$l_op2\\n  - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\\n   - Removing excess permissions\" chmod \"$l_rperms\" \"$l_fname\" fi if [[ ! \"$l_user\" =~ $l_auser ]]; then l_op2=\"$l_op2\\n  - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\\n   - Changing ownership to: \\\"$l_fuser\\\"\" chown \"$l_fuser\" \"$l_fname\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_op2=\"$l_op2\\n  - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\\n   - Changing group ownership to: \\\"$l_fgroup\\\"\" chgrp \"$l_fgroup\" \"$l_fname\" fi [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\" } unset a_file && a_file=() # clear and initialize array # Loop to create array with stat of files that could possibly fail one of the audits while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\")\") done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! -group root \\) -print0) while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do l_bname=\"$(basename \"$l_fname\")\" case \"$l_bname\" in lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README) perm_mask='0113' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_rperms=\"ug-x,o-wx\" l_auser=\"root\" l_agroup=\"(root|utmp)\" file_test_fix ;; secure | auth.log | syslog | messages) perm_mask='0137' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_rperms=\"u-x,g-wx,o-rwx\" l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\" file_test_fix ;; SSSD | sssd) perm_mask='0117' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_rperms=\"ug-x,o-rwx\" l_auser=\"(root|SSSD)\" l_agroup=\"(root|SSSD)\" file_test_fix ;; gdm | gdm3)  perm_mask='0117' l_rperms=\"ug-x,o-rwx\" maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_auser=\"root\" l_agroup=\"(root|gdm|gdm3)\" file_test_fix ;; *.journal | *.journal~) perm_mask='0137' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_rperms=\"u-x,g-wx,o-rwx\" l_auser=\"root\" l_agroup=\"(root|systemd-journal)\" file_test_fix ;; *) perm_mask='0137' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" l_rperms=\"u-x,g-wx,o-rwx\" l_auser=\"(root|syslog)\" l_agroup=\"(root|adm)\" if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then if [[ ! \"$l_user\" =~ $l_auser ]]; then l_auser=\"(root|syslog|$l_user)\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_tst=\"\" while l_out3=\"\" read -r l_duid; do [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\" [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\" fi fi file_test_fix ;; esac done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\" unset a_file # Clear array # If all files passed, then we report no changes if [ -z \"$l_output2\" ]; then echo -e \"- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n  - No changes required\\n\" else # print report of changes echo -e \"\\n$l_output2\" fi } Note: You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions. If there are services that log to other locations, ensure that those log files have the appropriate access configured. References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_logfile_access_restricted",
      "compute_logfile_permissions_secure",
      "compute_logfile_ownership_correct",
      "compute_logfile_group_access_limited",
      "compute_logfile_world_readable_disabled",
      "compute_logfile_world_writable_disabled",
      "compute_logfile_strict_mode_enabled",
      "compute_logfile_directory_permissions_secure",
      "compute_logfile_sensitive_data_protected",
      "compute_logfile_unauthorized_access_prevented"
    ]
  },
  {
    "id": "5.2.1.1",
    "title": "Ensure auditd is installed",
    "assessment": "Automated",
    "description": "auditd is the userspace component to the Linux Auditing System. It's responsible for writing audit records to the disk",
    "rationale": "The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring.",
    "audit": "Run the following command and verify auditd and audispd-plugins are installed: #  dpkg-query -W -f='${binary:Package}\\t${Status}\\t${db:Status-Status}\\n' auditd auditd  install ok installed    installed",
    "remediation": "Run the following command to Install auditd # apt install auditd References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-3, AU-12, SI-5",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-3, AU-12, SI-5",
    "function_names": [
      "linux_auditd_installed",
      "linux_auditd_service_enabled",
      "linux_auditd_config_immutable",
      "linux_auditd_logs_encrypted",
      "linux_auditd_logs_retention_over_90d",
      "linux_auditd_rules_loaded",
      "linux_auditd_logs_remote_backup_enabled",
      "linux_auditd_logs_permissions_restricted"
    ]
  },
  {
    "id": "5.2.1.2",
    "title": "Ensure auditd service is enabled and active",
    "assessment": "Automated",
    "description": "Turn on the auditd daemon to record system events.",
    "rationale": "The capturing of system events provides system administrators with information to allow them to determine if unauthorized access to their system is occurring.",
    "audit": "Run the following command to verify auditd is enabled: # systemctl is-enabled auditd enabled Verify result is \"enabled\". Run the following command to verify auditd is active: # systemctl is-active auditd active Verify result is active",
    "remediation": "Run the following command to enable and start auditd: # systemctl --now enable auditd References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5",
    "function_names": [
      "auditd_service_enabled",
      "auditd_service_active",
      "auditd_logging_enabled",
      "auditd_daemon_running",
      "auditd_system_events_recorded"
    ]
  },
  {
    "id": "5.2.1.3",
    "title": "Ensure auditing for processes that start prior to auditd is enabled",
    "assessment": "Automated",
    "description": "Configure grub2 so that processes that are capable of being audited can be audited even if they start up prior to auditd startup.",
    "rationale": "Audit events need to be captured on processes that start up prior to auditd , so that potential malicious activity cannot go undetected.",
    "audit": "Run the following command: # find -L /boot -type f -name 'grub.cfg' -exec grep -Ph -- '^\\h*linux\\b' {} + | grep -v 'audit=1' Nothing should be returned.",
    "remediation": "Edit /etc/default/grub and add audit=1 to GRUB_CMDLINE_LINUX: Example: GRUB_CMDLINE_LINUX=\"audit=1\" Run the following command to update the grub2 configuration: # update-grub Additional Information: This recommendation is designed around the grub2 bootloader, if another bootloader is in use in your environment enact equivalent settings.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "function_names": [
      "grub2_auditd_early_process_auditing_enabled",
      "grub2_auditd_preload_auditing_enabled",
      "grub2_auditd_boot_auditing_enabled",
      "grub2_auditd_kernel_auditing_enabled",
      "grub2_auditd_init_auditing_enabled"
    ]
  },
  {
    "id": "5.2.1.4",
    "title": "Ensure audit_backlog_limit is sufficient",
    "assessment": "Automated",
    "description": "In the kernel-level audit subsystem, a socket buffer queue is used to hold audit events. Whenever a new audit event is received, it is logged and prepared to be added to this queue. The kernel boot parameter audit_backlog_limit=N, with N representing the amount of messages, will ensure that a queue cannot grow beyond a certain size. If an audit event is logged which would grow the queue beyond this limit, then a failure occurs and is handled according to the system configuration",
    "rationale": "If an audit event is logged which would grow the queue beyond the audit_backlog_limit, then a failure occurs, auditd records will be lost, and potential malicious activity could go undetected.",
    "audit": "Run the following command and verify the audit_backlog_limit= parameter is set: # find -L /boot -type f -name 'grub.cfg' -exec grep -Ph -- '^\\h*linux\\b' {} + | grep -Pv 'audit_backlog_limit=\\d+\\b' Nothing should be returned.",
    "remediation": "Edit /etc/default/grub and add audit_backlog_limit=N to GRUB_CMDLINE_LINUX. The recommended size for N is 8192 or larger. Example: GRUB_CMDLINE_LINUX=\"audit_backlog_limit=8192\" Run the following command to update the grub2 configuration: # update-grub Default Value: if audit_backlog_limit is not set, the system defaults to audit_backlog_limit=64 References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-3, AU-12",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-3, AU-12",
    "function_names": [
      "kernel_audit_backlog_limit_sufficient",
      "kernel_audit_backlog_limit_configured",
      "audit_subsystem_backlog_limit_sufficient",
      "audit_subsystem_backlog_limit_configured",
      "audit_backlog_limit_minimum_size",
      "audit_backlog_limit_configured_properly"
    ]
  },
  {
    "id": "5.2.2.1",
    "title": "Ensure audit log storage size is configured",
    "assessment": "Automated",
    "description": "Configure the maximum size of the audit log file. Once the log reaches the maximum size, it will be rotated and a new log file will be started.",
    "rationale": "It is important that an appropriate size is determined for log files so that they do not impact the system and audit data is not lost.",
    "audit": "Run the following command and ensure output is in compliance with site policy: # grep -Po -- '^\\h*max_log_file\\h*=\\h*\\d+\\b' /etc/audit/auditd.conf max_log_file = <MB>",
    "remediation": "Set the following parameter in /etc/audit/auditd.conf in accordance with site policy: max_log_file = <MB> Default Value: max_log_file = 8 References: 1. NIST SP 800-53 Rev. 5: AU-8 Additional Information: The max_log_file parameter is measured in megabytes. Other methods of log rotation may be appropriate based on site policy. One example is time-based rotation strategies which don't have native support in auditd configurations. Manual audit of custom configurations should be evaluated for effectiveness and completeness.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-8 Additional Information: The max_log_file parameter is measured in megabytes. Other methods of log rotation may be appropriate based on site policy. One example is time-based rotation strategies which don't have native support in auditd configurations. Manual audit of custom configurations should be evaluated for effectiveness and completeness.",
    "function_names": [
      "cloud_audit_log_storage_size_configured",
      "cloud_audit_log_rotation_size_set",
      "audit_log_max_size_configured",
      "audit_log_rotation_size_configured",
      "cloud_audit_log_file_size_limited",
      "audit_log_storage_size_limited",
      "audit_log_rotation_size_limited",
      "cloud_audit_log_max_size_set"
    ]
  },
  {
    "id": "5.2.2.2",
    "title": "Ensure audit logs are not automatically deleted",
    "assessment": "Automated",
    "description": "The max_log_file_action setting determines how to handle the audit log file reaching the max file size. A value of keep_logs will rotate the logs but never delete old logs.",
    "rationale": "In high security contexts, the benefits of maintaining a long audit history exceed the cost of storing the audit history.",
    "audit": "Run the following command and verify output matches: # grep max_log_file_action /etc/audit/auditd.conf max_log_file_action = keep_logs",
    "remediation": "Set the following parameter in /etc/audit/auditd.conf: max_log_file_action = keep_logs References: 1. NIST SP 800-53 Rev. 5: AU-8",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-8",
    "function_names": [
      "audit_log_file_rotation_keep_logs",
      "audit_log_file_max_size_retain_logs",
      "audit_log_file_action_no_auto_delete",
      "audit_log_file_rotation_retain_all",
      "audit_log_file_max_size_keep_logs_enabled"
    ]
  },
  {
    "id": "5.2.2.3",
    "title": "Ensure system is disabled when audit logs are full",
    "assessment": "Automated",
    "description": "The auditd daemon can be configured to halt the system when the audit logs are full. The admin_space_left_action parameter tells the system what action to take when the system has detected that it is low on disk space. Valid values are ignore, syslog, suspend, single, and halt. • ignore, the audit daemon does nothing • Syslog, the audit daemon will issue a warning to syslog • Suspend, the audit daemon will stop writing records to the disk • single, the audit daemon will put the computer system in single user mode • halt, the audit daemon will shutdown the system",
    "rationale": "In high security contexts, the risk of detecting unauthorized access or nonrepudiation exceeds the benefit of the system's availability. Impact: If the admin_space_left_action parameter is set to halt the audit daemon will shutdown the system when the disk partition containing the audit logs becomes full.",
    "audit": "Run the following commands and verify output matches: # grep space_left_action /etc/audit/auditd.conf space_left_action = email # grep action_mail_acct /etc/audit/auditd.conf action_mail_acct = root Run the following command and verify the output is either halt or single: # grep -E 'admin_space_left_action\\s*=\\s*(halt|single)' /etc/audit/auditd.conf admin_space_left_action = <halt|single>",
    "remediation": "Set the following parameters in /etc/audit/auditd.conf: space_left_action = email action_mail_acct = root set admin_space_left_action to either halt or single in /etc/audit/auditd.conf. Example: admin_space_left_action = halt References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-8, AU-12, SI-5",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "If the admin_space_left_action parameter is set to halt the audit daemon will shutdown the system when the disk partition containing the audit logs becomes full.",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-8, AU-12, SI-5",
    "function_names": [
      "auditd_logs_full_system_halt_enabled",
      "auditd_logs_full_system_suspend_enabled",
      "auditd_logs_full_system_single_user_enabled",
      "auditd_logs_full_system_syslog_warning_enabled",
      "auditd_logs_full_system_action_configured",
      "auditd_logs_full_system_ignore_disabled",
      "auditd_logs_full_system_halt_or_suspend_enabled",
      "auditd_logs_full_system_critical_action_enabled"
    ]
  },
  {
    "id": "5.2.3.1",
    "title": "Ensure changes to system administration scope (sudoers) is collected",
    "assessment": "Automated",
    "description": "Monitor scope changes for system administrators. If the system has been properly configured to force system administrators to log in as themselves first and then use the sudo command to execute privileged commands, it is possible to monitor changes in scope. The file /etc/sudoers, or files in /etc/sudoers.d, will be written to when the file(s) or related attributes have changed. The audit records will be tagged with the identifier \"scope\".",
    "rationale": "Changes in the /etc/sudoers and /etc/sudoers.d files can indicate that an unauthorized change has been made to the scope of system administrator activity.",
    "audit": "On disk configuration Run the following command to check the on disk rules: # awk '/^ *-w/ \\ &&/\\/etc\\/sudoers/ \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -w /etc/sudoers -p wa -k scope -w /etc/sudoers.d -p wa -k scope Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-w/ \\ &&/\\/etc\\/sudoers/ \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output matches: -w /etc/sudoers -p wa -k scope -w /etc/sudoers.d -p wa -k scope",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor scope changes for system administrators. Example: # printf \" -w /etc/sudoers -p wa -k scope -w /etc/sudoers.d -p wa -k scope \" >> /etc/audit/rules.d/50-scope.rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_sudoers_changes_collected",
      "auditd_sudoers_file_monitoring_enabled",
      "auditd_sudoers_scope_tagging_enabled",
      "auditd_sudoers_d_changes_collected",
      "auditd_scope_changes_logging_enabled",
      "auditd_sudoers_file_writes_monitored",
      "auditd_sudoers_scope_audit_enabled",
      "auditd_sudoers_modifications_tracked"
    ]
  },
  {
    "id": "5.2.3.2",
    "title": "Ensure actions as another user are always logged",
    "assessment": "Automated",
    "description": "sudo provides users with temporary elevated privileges to perform operations, either as the superuser or another user.",
    "rationale": "Creating an audit log of users with temporary elevated privileges and the operation(s) they performed is essential to reporting. Administrators will want to correlate the events written to the audit trail with the records written to sudo's logfile to verify if unauthorized commands have been executed.",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&(/ -C *euid!=uid/||/ -C *uid!=euid/) \\ &&/ -S *execve/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation -a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&(/ -C *euid!=uid/||/ -C *uid!=euid/) \\ &&/ -S *execve/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output matches: -a always,exit -F arch=b64 -S execve -C uid!=euid -F auid!=-1 -F key=user_emulation -a always,exit -F arch=b32 -S execve -C uid!=euid -F auid!=-1 -F key=user_emulation 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor elevated privileges. 64 Bit systems Example: # printf \" -a always,exit -F arch=b64 -C euid!=uid -F auid!=unset -S execve -k user_emulation -a always,exit -F arch=b32 -C euid!=uid -F auid!=unset -S execve -k user_emulation \" >> /etc/audit/rules.d/50-user_emulation.rules Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "iam_role_sudo_logging_enabled",
      "iam_user_sudo_actions_logged",
      "iam_policy_sudo_requirement_logging",
      "cloudtrail_sudo_events_logging_enabled",
      "compute_instance_sudo_commands_logged",
      "audit_log_sudo_actions_captured",
      "security_sudo_activity_monitoring_enabled",
      "cloudtrail_sudo_usage_logging_enabled"
    ]
  },
  {
    "id": "5.2.3.3",
    "title": "Ensure events that modify the sudo log file are collected",
    "assessment": "Automated",
    "description": "Monitor the sudo log file. If the system has been properly configured to disable the use of the su command and force all administrators to have to log in first and then use sudo to execute privileged commands, then all administrator commands will be logged to /var/log/sudo.log . Any time a command is executed, an audit event will be triggered as the /var/log/sudo.log file will be opened for write and the executed administration command will be written to the log.",
    "rationale": "Changes in /var/log/sudo.log indicate that an administrator has executed a command or the log file itself has been tampered with. Administrators will want to correlate the events written to the audit trail with the records written to /var/log/sudo.log to verify if unauthorized commands have been executed.",
    "audit": "On disk configuration Run the following command to check the on disk rules: # { SUDO_LOG_FILE_ESCAPED=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/\"//g' -e 's|/|\\\\/|g') [ -n \"${SUDO_LOG_FILE_ESCAPED}\" ] && awk \"/^ *-w/ \\ &&/\"${SUDO_LOG_FILE_ESCAPED}\"/ \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'SUDO_LOG_FILE_ESCAPED' is unset.\\n\" } Verify output of matches: -w /var/log/sudo.log -p wa -k sudo_log_file Running configuration Run the following command to check loaded rules: # { SUDO_LOG_FILE_ESCAPED=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/\"//g' -e 's|/|\\\\/|g') [ -n \"${SUDO_LOG_FILE_ESCAPED}\" ] && auditctl -l | awk \"/^ *-w/ \\ &&/\"${SUDO_LOG_FILE_ESCAPED}\"/ \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'SUDO_LOG_FILE_ESCAPED' is unset.\\n\" } Verify output matches: -w /var/log/sudo.log -p wa -k sudo_log_file",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor events that modify the sudo log file. Example: # { SUDO_LOG_FILE=$(grep -r logfile /etc/sudoers* | sed -e 's/.*logfile=//;s/,? .*//' -e 's/\"//g') [ -n \"${SUDO_LOG_FILE}\" ] && printf \" -w ${SUDO_LOG_FILE} -p wa -k sudo_log_file \" >> /etc/audit/rules.d/50-sudo.rules || printf \"ERROR: Variable 'SUDO_LOG_FILE_ESCAPED' is unset.\\n\" } Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "audit_log_sudo_modification_events_collected",
      "sudo_log_file_write_events_monitored",
      "sudo_log_file_integrity_events_tracked",
      "privileged_command_logging_enabled",
      "sudo_log_file_access_events_audited",
      "admin_command_execution_events_captured",
      "sudo_log_file_changes_detected",
      "privileged_operation_logging_active"
    ]
  },
  {
    "id": "5.2.3.4",
    "title": "Ensure events that modify date and time information are collected",
    "assessment": "Automated",
    "description": "Capture events where the system date and/or time has been modified. The parameters in this section are set to determine if the; • adjtimex - tune kernel clock • settimeofday - set time using timeval and timezone structures • stime - using seconds since 1/1/1970 • clock_settime - allows for the setting of several internal clocks and timers system calls have been executed. Further, ensure to write an audit record to the configured audit log file upon exit, tagging the records with a unique identifier such as \"time-change\".",
    "rationale": "Unexpected changes in system date and/or time could be a sign of malicious activity on the system.",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&/ -S/ \\ &&(/adjtimex/ \\ ||/settimeofday/ \\ ||/clock_settime/ ) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules awk '/^ *-w/ \\ &&/\\/etc\\/localtime/ \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules } Verify output of matches: -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -k time- change -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -k time- change -w /etc/localtime -p wa -k time-change Running configuration Run the following command to check loaded rules: # { auditctl -l | awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&/ -S/ \\ &&(/adjtimex/ \\ ||/settimeofday/ \\ ||/clock_settime/ ) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' auditctl -l | awk '/^ *-w/ \\ &&/\\/etc\\/localtime/ \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' } Verify the output includes: -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -F key=time-change -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -F key=time-change -w /etc/localtime -p wa -k time-change 32 Bit systems  Follow the same procedures as for 64 bit systems and ignore any entries with b64. In addition, also audit for the stime system call rule. For example: -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime,stime -k time-change",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor events that modify date and time information. 64 Bit systems Example: # printf \" -a always,exit -F arch=b64 -S adjtimex,settimeofday,clock_settime -k time- change -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime -k time- change -w /etc/localtime -p wa -k time-change \" >> /etc/audit/rules.d/50-time-change.rules Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. In addition, add stime to the system call audit. Example: -a always,exit -F arch=b32 -S adjtimex,settimeofday,clock_settime,stime -k time-change References: 1. NIST SP 800-53 Rev. 5: AU-3, CM-6   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, CM-6   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_system_time_modification_logging_enabled",
      "auditd_time_change_events_captured",
      "auditd_adjtimex_call_monitoring_enabled",
      "auditd_settimeofday_call_monitoring_enabled",
      "auditd_stime_call_monitoring_enabled",
      "auditd_clock_settime_call_monitoring_enabled",
      "auditd_time_change_events_tagged",
      "auditd_time_modification_audit_records_enabled"
    ]
  },
  {
    "id": "5.2.3.5",
    "title": "Ensure events that modify the system's network environment are collected",
    "assessment": "Automated",
    "description": "Record changes to network environment files or system calls. The below parameters monitors the following system calls, and write an audit event on system call exit: • sethostname - set the systems host name • setdomainname - set the systems domain name The files being monitored are: • /etc/issue and /etc/issue.net - messages displayed pre-login • /etc/hosts - file containing host names and associated IP addresses • /etc/networks - symbolic names for networks • /etc/network/ - directory containing network interface scripts and configurations files",
    "rationale": "Monitoring sethostname and setdomainname will identify potential unauthorized changes to host and domainname of a system. The changing of these names could potentially break security parameters that are set based on those names. The /etc/hosts file is monitored for changes that can indicate an unauthorized intruder is trying to change machine associations with IP addresses and trick users and processes into connecting to unintended machines. Monitoring /etc/issue and /etc/issue.net is important, as intruders could put disinformation into those files and trick users into providing information to the intruder. Monitoring /etc/network is important as it can show if network interfaces or scripts are being modified in a way that can lead to the machine becoming unavailable or compromised. All audit records should have a relevant tag associated with them.",
    "audit": "64 Bit systems On disk configuration Run the following commands to check the on disk rules: # awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b(32|64)/ \\ &&/ -S/ \\ &&(/sethostname/ \\ ||/setdomainname/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules # awk '/^ *-w/ \\ &&(/\\/etc\\/issue/ \\ ||/\\/etc\\/issue.net/ \\ ||/\\/etc\\/hosts/ \\ ||/\\/etc\\/network/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale -a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale -w /etc/issue -p wa -k system-locale -w /etc/issue.net -p wa -k system-locale -w /etc/hosts -p wa -k system-locale -w /etc/networks -p wa -k system-locale -w /etc/network/ -p wa -k system-locale Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b(32|64)/ \\ &&/ -S/ \\ &&(/sethostname/ \\ ||/setdomainname/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' # auditctl -l | awk '/^ *-w/ \\ &&(/\\/etc\\/issue/ \\ ||/\\/etc\\/issue.net/ \\ ||/\\/etc\\/hosts/ \\ ||/\\/etc\\/network/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output includes:  -a always,exit -F arch=b64 -S sethostname,setdomainname -F key=system-locale -a always,exit -F arch=b32 -S sethostname,setdomainname -F key=system-locale -w /etc/issue -p wa -k system-locale -w /etc/issue.net -p wa -k system-locale -w /etc/hosts -p wa -k system-locale -w /etc/networks -p wa -k system-locale -w /etc/network/ -p wa -k system-locale 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor events that modify the system's network environment. 64 Bit systems Example: # printf \" -a always,exit -F arch=b64 -S sethostname,setdomainname -k system-locale -a always,exit -F arch=b32 -S sethostname,setdomainname -k system-locale -w /etc/issue -p wa -k system-locale -w /etc/issue.net -p wa -k system-locale -w /etc/hosts -p wa -k system-locale -w /etc/networks -p wa -k system-locale -w /etc/network/ -p wa -k system-locale \" >> /etc/audit/rules.d/50-system_locale.rules Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-3, CM-6  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, CM-6  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_system_call_monitored",
      "auditd_network_file_monitored",
      "auditd_sethostname_audit_enabled",
      "auditd_setdomainname_audit_enabled",
      "auditd_issue_file_monitored",
      "auditd_hosts_file_monitored",
      "auditd_networks_file_monitored",
      "auditd_network_config_dir_monitored"
    ]
  },
  {
    "id": "5.2.3.6",
    "title": "Ensure use of privileged commands are collected",
    "assessment": "Automated",
    "description": "Monitor privileged programs, those that have the setuid and/or setgid bit set on execution, to determine if unprivileged users are running these commands.",
    "rationale": "Execution of privileged commands by non-privileged users could be an indication of someone trying to gain unauthorized access to the system. Impact: Both the audit and remediation section of this recommendation will traverse all mounted file systems that is not mounted with either noexec or nosuid mount options. If there are large file systems without these mount options, such traversal will be significantly detrimental to the performance of the system. Before running either the audit or remediation section, inspect the output of the following command to determine exactly which file systems will be traversed: # findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" To exclude a particular file system due to adverse performance impacts, update the audit and remediation sections by adding a sufficiently unique string to the grep statement. The above command can be used to test the modified exclusions.",
    "audit": "On disk configuration Run the following command to check on disk rules: # for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do for PRIVILEGED in $(find \"${PARTITION}\" -xdev -perm /6000 -type f); do grep -qr \"${PRIVILEGED}\" /etc/audit/rules.d && printf \"OK: '${PRIVILEGED}' found in auditing rules.\\n\" || printf \"Warning: '${PRIVILEGED}' not found in on disk configuration.\\n\" done done Verify that all output is OK. Running configuration Run the following command to check loaded rules: # { RUNNING=$(auditctl -l) [ -n \"${RUNNING}\" ] && for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do for PRIVILEGED in $(find \"${PARTITION}\" -xdev -perm /6000 -type f); do printf -- \"${RUNNING}\" | grep -q \"${PRIVILEGED}\" && printf \"OK: '${PRIVILEGED}' found in auditing rules.\\n\" || printf \"Warning: '${PRIVILEGED}' not found in running configuration.\\n\" done done \\ || printf \"ERROR: Variable 'RUNNING' is unset.\\n\" } Verify that all output is OK. Special mount points If there are any special mount points that are not visible by default from findmnt as per the above audit, said file systems would have to be manually audited.",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor the use of privileged commands. Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) AUDIT_RULE_FILE=\"/etc/audit/rules.d/50-privileged.rules\" NEW_DATA=() for PARTITION in $(findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" | awk '{print $1}'); do readarray -t DATA < <(find \"${PARTITION}\" -xdev -perm /6000 -type f | awk -v UID_MIN=${UID_MIN} '{print \"-a always,exit -F path=\" $1 \" -F perm=x -F auid>=\"UID_MIN\" -F auid!=unset -k privileged\" }') for ENTRY in \"${DATA[@]}\"; do NEW_DATA+=(\"${ENTRY}\") done done readarray &> /dev/null -t OLD_DATA < \"${AUDIT_RULE_FILE}\" COMBINED_DATA=( \"${OLD_DATA[@]}\" \"${NEW_DATA[@]}\" ) printf '%s\\n' \"${COMBINED_DATA[@]}\" | sort -u > \"${AUDIT_RULE_FILE}\" } Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi Special mount points If there are any special mount points that are not visible by default from just scanning /, change the PARTITION variable to the appropriate partition and re-run the remediation. References: 1. NIST SP 800-53 Rev. 5: AU-3   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • AU-3 • AU-3(1)",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "impact": "Both the audit and remediation section of this recommendation will traverse all mounted file systems that is not mounted with either noexec or nosuid mount options. If there are large file systems without these mount options, such traversal will be significantly detrimental to the performance of the system. Before running either the audit or remediation section, inspect the output of the following command to determine exactly which file systems will be traversed: # findmnt -n -l -k -it $(awk '/nodev/ { print $2 }' /proc/filesystems | paste -sd,) | grep -Pv \"noexec|nosuid\" To exclude a particular file system due to adverse performance impacts, update the audit and remediation sections by adding a sufficiently unique string to the grep statement. The above command can be used to test the modified exclusions.",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • AU-3 • AU-3(1)",
    "function_names": [
      "compute_instance_privileged_commands_collected",
      "compute_instance_setuid_setgid_monitored",
      "compute_instance_privileged_program_logging_enabled",
      "compute_instance_suid_sgid_usage_tracked",
      "compute_instance_privileged_command_audit_enabled"
    ]
  },
  {
    "id": "5.2.3.7",
    "title": "Ensure unsuccessful file access attempts are collected",
    "assessment": "Automated",
    "description": "Monitor for unsuccessful attempts to access files. The following parameters are associated with system calls that control files: • creation - creat • opening - open , openat • truncation - truncate , ftruncate An audit log record will only be written if all of the following criteria is met for the user when trying to access a file: • a non-privileged user (auid>=UID_MIN) • is not a Daemon event (auid=4294967295/unset/-1) • if the system call returned EACCES (permission denied) or EPERM (some other permanent error associated with the specific system call)",
    "rationale": "Failed attempts to open, create or truncate files could be an indication that an individual or process is trying to gain unauthorized access to the system.",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&(/ -F *exit=-EACCES/||/ -F *exit=-EPERM/) \\ &&/ -S/ \\ &&/creat/ \\ &&/open/ \\ &&/truncate/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output includes: -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=- EACCES -F auid>=1000 -F auid!=unset -k access -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=- EPERM -F auid>=1000 -F auid!=unset -k access -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=- EACCES -F auid>=1000 -F auid!=unset -k access -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=- EPERM -F auid>=1000 -F auid!=unset -k access Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&(/ -F *exit=-EACCES/||/ -F *exit=-EPERM/) \\ &&/ -S/ \\ &&/creat/ \\ &&/open/ \\ &&/truncate/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output includes:  -a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat -F exit=- EACCES -F auid>=1000 -F auid!=-1 -F key=access -a always,exit -F arch=b64 -S open,truncate,ftruncate,creat,openat -F exit=- EPERM -F auid>=1000 -F auid!=-1 -F key=access -a always,exit -F arch=b32 -S open,truncate,ftruncate,creat,openat -F exit=- EACCES -F auid>=1000 -F auid!=-1 -F key=access -a always,exit -F arch=b32 -S open,truncate,ftruncate,creat,openat -F exit=- EPERM -F auid>=1000 -F auid!=-1 -F key=access 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor unsuccessful file access attempts. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=- EACCES -F auid>=${UID_MIN} -F auid!=unset -k access -a always,exit -F arch=b64 -S creat,open,openat,truncate,ftruncate -F exit=- EPERM -F auid>=${UID_MIN} -F auid!=unset -k access -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=- EACCES -F auid>=${UID_MIN} -F auid!=unset -k access -a always,exit -F arch=b32 -S creat,open,openat,truncate,ftruncate -F exit=- EPERM -F auid>=${UID_MIN} -F auid!=unset -k access \" >> /etc/audit/rules.d/50-access.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.  References: 1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_file_access_unsuccessful_attempts_collected",
      "auditd_file_creation_creat_monitored",
      "auditd_file_opening_open_monitored",
      "auditd_file_opening_openat_monitored",
      "auditd_file_truncation_truncate_monitored",
      "auditd_file_truncation_ftruncate_monitored",
      "auditd_file_access_non_privileged_users_only",
      "auditd_file_access_no_daemon_events",
      "auditd_file_access_eacces_permission_denied_logged",
      "auditd_file_access_eperm_permanent_error_logged"
    ]
  },
  {
    "id": "5.2.3.8",
    "title": "Ensure events that modify user/group information are collected",
    "assessment": "Automated",
    "description": "Record events affecting the modification of user or group information, including that of passwords and old passwords if in use. • /etc/group - system groups • /etc/passwd - system users • /etc/gshadow - encrypted password for each group • /etc/shadow - system user passwords • /etc/security/opasswd - storage of old passwords if the relevant PAM module is in use The parameters in this section will watch the files to see if they have been opened for write or have had attribute changes (e.g. permissions) and tag them with the identifier \"identity\" in the audit log file.",
    "rationale": "Unexpected changes to these files could be an indication that the system has been compromised and that an unauthorized user is attempting to hide their activities or compromise additional accounts.",
    "audit": "On disk configuration Run the following command to check the on disk rules: # awk '/^ *-w/ \\ &&(/\\/etc\\/group/ \\ ||/\\/etc\\/passwd/ \\ ||/\\/etc\\/gshadow/ \\ ||/\\/etc\\/shadow/ \\ ||/\\/etc\\/security\\/opasswd/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -w /etc/group -p wa -k identity -w /etc/passwd -p wa -k identity -w /etc/gshadow -p wa -k identity -w /etc/shadow -p wa -k identity -w /etc/security/opasswd -p wa -k identity Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-w/ \\ &&(/\\/etc\\/group/ \\ ||/\\/etc\\/passwd/ \\ ||/\\/etc\\/gshadow/ \\ ||/\\/etc\\/shadow/ \\ ||/\\/etc\\/security\\/opasswd/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output matches: -w /etc/group -p wa -k identity -w /etc/passwd -p wa -k identity -w /etc/gshadow -p wa -k identity -w /etc/shadow -p wa -k identity -w /etc/security/opasswd -p wa -k identity",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor events that modify user/group information. Example: # printf \" -w /etc/group -p wa -k identity -w /etc/passwd -p wa -k identity -w /etc/gshadow -p wa -k identity -w /etc/shadow -p wa -k identity -w /etc/security/opasswd -p wa -k identity \" >> /etc/audit/rules.d/50-identity.rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_user_group_modification_logging_enabled",
      "auditd_identity_file_write_monitoring_enabled",
      "auditd_passwd_file_change_tracking_enabled",
      "auditd_shadow_file_change_tracking_enabled",
      "auditd_group_file_change_tracking_enabled",
      "auditd_gshadow_file_change_tracking_enabled",
      "auditd_opasswd_file_change_tracking_enabled",
      "auditd_identity_event_tagging_enabled"
    ]
  },
  {
    "id": "5.2.3.9",
    "title": "Ensure discretionary access control permission modification events are collected",
    "assessment": "Automated",
    "description": "Monitor changes to file permissions, attributes, ownership and group. The parameters in this section track changes for system calls that affect file permissions and attributes. The following commands and system calls effect the permissions, ownership and various attributes of files. • chmod • fchmod • fchmodat • chown • fchown • fchownat • lchown • setxattr • lsetxattr • fsetxattr • removexattr • lremovexattr • fremovexattr In all cases, an audit record will only be written for non-system user ids and will ignore Daemon events. All audit records will be tagged with the identifier \"perm_mod.\"",
    "rationale": "Monitoring for changes in file attributes could alert a system administrator to activity that could indicate intruder activity or policy violation.",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -S/ \\ &&/ -F *auid>=${UID_MIN}/ \\ &&(/chmod/||/fchmod/||/fchmodat/ \\ ||/chown/||/fchown/||/fchownat/||/lchown/ \\ ||/setxattr/||/lsetxattr/||/fsetxattr/ \\ ||/removexattr/||/lremovexattr/||/fremovexattr/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=unset -F key=perm_mod -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=unset -F key=perm_mod -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=unset -F key=perm_mod Running configuration Run the following command to check loaded rules:  # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -S/ \\ &&/ -F *auid>=${UID_MIN}/ \\ &&(/chmod/||/fchmod/||/fchmodat/ \\ ||/chown/||/fchown/||/fchownat/||/lchown/ \\ ||/setxattr/||/lsetxattr/||/fsetxattr/ \\ ||/removexattr/||/lremovexattr/||/fremovexattr/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=-1 -F key=perm_mod -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=1000 -F auid!=-1 -F key=perm_mod -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=1000 -F auid!=-1 -F key=perm_mod -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=1000 -F auid!=-1 -F key=perm_mod -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=-1 -F key=perm_mod -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=1000 -F auid!=-1 -F key=perm_mod 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor discretionary access control permission modification events. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F arch=b64 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod -a always,exit -F arch=b64 -S chown,fchown,lchown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod -a always,exit -F arch=b32 -S chmod,fchmod,fchmodat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod -a always,exit -F arch=b32 -S lchown,fchown,chown,fchownat -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod -a always,exit -F arch=b64 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod -a always,exit -F arch=b32 -S setxattr,lsetxattr,fsetxattr,removexattr,lremovexattr,fremovexattr -F auid>=${UID_MIN} -F auid!=unset -F key=perm_mod \" >> /etc/audit/rules.d/50-perm_mod.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-3, CM-6  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, CM-6  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_file_permission_modification_events_collected",
      "auditd_file_attribute_change_logging_enabled",
      "auditd_file_ownership_change_tracking_enabled",
      "auditd_chmod_events_monitored",
      "auditd_chown_events_monitored",
      "auditd_setxattr_events_monitored",
      "auditd_removexattr_events_monitored",
      "auditd_non_system_user_perm_mod_events_tagged",
      "auditd_daemon_events_ignored_for_perm_mod",
      "auditd_perm_mod_events_audit_records_enabled"
    ]
  },
  {
    "id": "5.2.3.10",
    "title": "Ensure successful file system mounts are collected",
    "assessment": "Automated",
    "description": "Monitor the use of the mount system call. The mount (and umount ) system call controls the mounting and unmounting of file systems. The parameters below configure the system to create an audit record when the mount system call is used by a non- privileged user",
    "rationale": "It is highly unusual for a non privileged user to mount file systems to the system. While tracking mount commands gives the system administrator evidence that external media may have been mounted (based on a review of the source of the mount and confirming it's an external media type), it does not conclusively indicate that data was exported to the media. System administrators who wish to determine if data were exported, would also have to track successful open, creat and truncate system calls requiring write access to a file under the mount point of the external media file system. This could give a fair indication that a write occurred. The only way to truly prove it, would be to track successful writes to the external media. Tracking write system calls could quickly fill up the audit log and is not recommended. Recommendations on configuration options to track data export to media is beyond the scope of this document.",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -S/ \\ &&/mount/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=unset -k mounts -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=unset -k mounts Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -S/ \\ &&/mount/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=-1 -F key=mounts -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=-1 -F key=mounts 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor successful file system mounts. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F arch=b32 -S mount -F auid>=$UID_MIN -F auid!=unset -k mounts -a always,exit -F arch=b64 -S mount -F auid>=$UID_MIN -F auid!=unset -k mounts \" >> /etc/audit/rules.d/50-mounts.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: CM-6   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • CM-6",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • CM-6",
    "function_names": [
      "auditd_mount_system_call_logging_enabled",
      "auditd_mount_privileged_user_restricted",
      "auditd_mount_event_collection_enabled",
      "auditd_mount_system_call_monitoring_enabled",
      "auditd_mount_non_privileged_usage_tracked",
      "auditd_mount_umount_operations_audited",
      "auditd_mount_file_system_mounts_collected",
      "auditd_mount_system_call_audit_rules_configured"
    ]
  },
  {
    "id": "5.2.3.11",
    "title": "Ensure session initiation information is collected",
    "assessment": "Automated",
    "description": "Monitor session initiation events. The parameters in this section track changes to the files associated with session events. • /var/run/utmp - tracks all currently logged in users. • /var/log/wtmp - file tracks logins, logouts, shutdown, and reboot events. • /var/log/btmp - keeps track of failed login attempts and can be read by entering the command /usr/bin/last -f /var/log/btmp. All audit records will be tagged with the identifier \"session.\"",
    "rationale": "Monitoring these files for changes could alert a system administrator to logins occurring at unusual hours, which could indicate intruder activity (i.e. a user logging in at a time when they do not normally log in).",
    "audit": "On disk configuration Run the following command to check the on disk rules: # awk '/^ *-w/ \\ &&(/\\/var\\/run\\/utmp/ \\ ||/\\/var\\/log\\/wtmp/ \\ ||/\\/var\\/log\\/btmp/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -w /var/run/utmp -p wa -k session -w /var/log/wtmp -p wa -k session -w /var/log/btmp -p wa -k session Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-w/ \\ &&(/\\/var\\/run\\/utmp/ \\ ||/\\/var\\/log\\/wtmp/ \\ ||/\\/var\\/log\\/btmp/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output matches: -w /var/run/utmp -p wa -k session -w /var/log/wtmp -p wa -k session -w /var/log/btmp -p wa -k session",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor session initiation information. Example: # printf \" -w /var/run/utmp -p wa -k session -w /var/log/wtmp -p wa -k session -w /var/log/btmp -p wa -k session \" >> /etc/audit/rules.d/50-session.rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • AU-3 • AU-3(1)",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • AU-3 • AU-3(1)",
    "function_names": [
      "auditd_session_initiation_logging_enabled",
      "auditd_utmp_file_monitoring_enabled",
      "auditd_wtmp_file_monitoring_enabled",
      "auditd_btmp_file_monitoring_enabled",
      "auditd_session_events_tagging_enabled",
      "auditd_login_attempts_logging_enabled",
      "auditd_reboot_events_logging_enabled",
      "auditd_shutdown_events_logging_enabled"
    ]
  },
  {
    "id": "5.2.3.12",
    "title": "Ensure login and logout events are collected",
    "assessment": "Automated",
    "description": "Monitor login and logout events. The parameters below track changes to files associated with login/logout events. • /var/log/lastlog - maintain records of the last time a user successfully logged in. • /var/run/faillock - directory maintains records of login failures via the pam_faillock module.",
    "rationale": "Monitoring login/logout events could provide a system administrator with information associated with brute force attacks against user logins.",
    "audit": "On disk configuration Run the following command to check the on disk rules: # awk '/^ *-w/ \\ &&(/\\/var\\/log\\/lastlog/ \\ ||/\\/var\\/run\\/faillock/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -w /var/log/lastlog -p wa -k logins -w /var/run/faillock -p wa -k logins Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-w/ \\ &&(/\\/var\\/log\\/lastlog/ \\ ||/\\/var\\/run\\/faillock/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output matches: -w /var/log/lastlog -p wa -k logins -w /var/run/faillock -p wa -k logins",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor login and logout events. Example: # printf \" -w /var/log/lastlog -p wa -k logins -w /var/run/faillock -p wa -k logins \" >> /etc/audit/rules.d/50-login.rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • AU-3 • AU-3(1)",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page. NIST SP 800-53 Rev. 5: • AU-3 • AU-3(1)",
    "function_names": [
      "auditd_login_logout_events_collected",
      "auditd_lastlog_file_monitored",
      "auditd_faillock_dir_monitored",
      "auditd_auth_events_tracked",
      "auditd_session_events_recorded",
      "auditd_faillock_module_enabled",
      "auditd_login_failure_logging_enabled",
      "auditd_user_session_audited"
    ]
  },
  {
    "id": "5.2.3.13",
    "title": "Ensure file deletion events by users are collected",
    "assessment": "Automated",
    "description": "Monitor the use of system calls associated with the deletion or renaming of files and file attributes. This configuration statement sets up monitoring for: • unlink - remove a file • unlinkat - remove a file attribute • rename - rename a file • renameat rename a file attribute system calls and tags them with the identifier \"delete\".",
    "rationale": "Monitoring these calls from non-privileged users could provide a system administrator with evidence that inappropriate removal of files and file attributes associated with protected files is occurring. While this audit option will look at all events, system administrators will want to look for specific privileged files that are being deleted or altered.",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -S/ \\ &&(/unlink/||/rename/||/unlinkat/||/renameat/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S unlink,unlinkat,rename,renameat -F auid>=1000 - F auid!=unset -k delete -a always,exit -F arch=b32 -S unlink,unlinkat,rename,renameat -F auid>=1000 - F auid!=unset -k delete Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -S/ \\ &&(/unlink/||/rename/||/unlinkat/||/renameat/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=1000 - F auid!=-1 -F key=delete -a always,exit -F arch=b32 -S unlink,rename,unlinkat,renameat -F auid>=1000 - F auid!=-1 -F key=delete 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor file deletion events by users. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F arch=b64 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete -a always,exit -F arch=b32 -S rename,unlink,unlinkat,renameat -F auid>=${UID_MIN} -F auid!=unset -F key=delete \" >> /etc/audit/rules.d/50-delete.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-12, SC-7   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-12, SC-7   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_file_deletion_monitored",
      "auditd_unlink_events_collected",
      "auditd_unlinkat_events_collected",
      "auditd_rename_events_collected",
      "auditd_renameat_events_collected",
      "auditd_file_events_tagged_delete",
      "auditd_system_calls_monitored",
      "auditd_file_operations_logged"
    ]
  },
  {
    "id": "5.2.3.14",
    "title": "Ensure events that modify the system's Mandatory Access Controls are collected",
    "assessment": "Automated",
    "description": "Monitor AppArmor, an implementation of mandatory access controls. The parameters below monitor any write access (potential additional, deletion or modification of files in the directory) or attribute changes to the /etc/apparmor/ and /etc/apparmor.d/ directories. Note: If a different Mandatory Access Control method is used, changes to the corresponding directories should be audited.",
    "rationale": "Changes to files in the /etc/apparmor/ and /etc/apparmor.d/ directories could indicate that an unauthorized user is attempting to modify access controls and change security contexts, leading to a compromise of the system.",
    "audit": "On disk configuration Run the following command to check the on disk rules: # awk '/^ *-w/ \\ &&(/\\/etc\\/apparmor/ \\ ||/\\/etc\\/apparmor.d/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules Verify the output matches: -w /etc/apparmor/ -p wa -k MAC-policy -w /etc/apparmor.d/ -p wa -k MAC-policy Running configuration Run the following command to check loaded rules: # auditctl -l | awk '/^ *-w/ \\ &&(/\\/etc\\/apparmor/ \\ ||/\\/etc\\/apparmor.d/) \\ &&/ +-p *wa/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' Verify the output matches: -w /etc/apparmor/ -p wa -k MAC-policy -w /etc/apparmor.d/ -p wa -k MAC-policy",
    "remediation": "Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor events that modify the system's Mandatory Access Controls. Example: # printf \" -w /etc/apparmor/ -p wa -k MAC-policy -w /etc/apparmor.d/ -p wa -k MAC-policy \" >> /etc/audit/rules.d/50-MAC-policy.rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3, CM-6 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, CM-6 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_mandatory_access_control_events_collected",
      "auditd_apparmor_config_changes_monitored",
      "auditd_apparmor_directory_write_access_audited",
      "auditd_apparmor_attribute_changes_audited",
      "auditd_mac_policy_changes_monitored"
    ]
  },
  {
    "id": "5.2.3.15",
    "title": "Ensure successful and unsuccessful attempts to use the chcon command are recorded",
    "assessment": "Automated",
    "description": "The operating system must generate audit records for successful/unsuccessful uses of the chcon command.",
    "rationale": "The chcon command is used to change file security context. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/chcon/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=unset -k perm_chng Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/chcon/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -S all -F path=/usr/bin/chcon -F perm=x -F auid>=1000 -F auid!=-1 -F key=perm_chng 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor successful and unsuccessful attempts to use the chcon command. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F path=/usr/bin/chcon -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng \" >> /etc/audit/rules.d/50-perm_chng.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_chcon_audit_enabled",
      "auditd_chcon_success_logging_enabled",
      "auditd_chcon_failure_logging_enabled",
      "auditd_chcon_events_recorded",
      "auditd_chcon_usage_audited"
    ]
  },
  {
    "id": "5.2.3.16",
    "title": "Ensure successful and unsuccessful attempts to use the setfacl command are recorded",
    "assessment": "Automated",
    "description": "The operating system must generate audit records for successful/unsuccessful uses of the setfacl command",
    "rationale": "This utility sets Access Control Lists (ACLs) of files and directories. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/setfacl/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F auid!=unset -k perm_chng Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/setfacl/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -S all -F path=/usr/bin/setfacl -F perm=x -F auid>=1000 -F auid!=-1 -F key=perm_chng 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor successful and unsuccessful attempts to use the setfacl command. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F path=/usr/bin/setfacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng \" >> /etc/audit/rules.d/50-perm_chng.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_command_setfacl_logging_enabled",
      "auditd_command_setfacl_success_logging_enabled",
      "auditd_command_setfacl_failure_logging_enabled",
      "auditd_command_setfacl_events_recorded",
      "auditd_command_setfacl_audit_rules_configured"
    ]
  },
  {
    "id": "5.2.3.17",
    "title": "Ensure successful and unsuccessful attempts to use the chacl command are recorded",
    "assessment": "Automated",
    "description": "The operating system must generate audit records for successful/unsuccessful uses of the chacl command. chacl is an IRIX-compatibility command, and is maintained for those users who are familiar with its use from either XFS or IRIX.",
    "rationale": "chacl changes the ACL(s) for a file or directory. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/chacl/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F auid!=unset -k perm_chng Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/chacl/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -S all -F path=/usr/bin/chacl -F perm=x -F auid>=1000 -F auid!=-1 -F key=perm_chng 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor successful and unsuccessful attempts to use the chacl command. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F path=/usr/bin/chacl -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k perm_chng \" >> /etc/audit/rules.d/50-perm_chng.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_chacl_command_logging_enabled",
      "auditd_chacl_command_success_logging_enabled",
      "auditd_chacl_command_failure_logging_enabled",
      "auditd_chacl_command_audit_records_enabled",
      "auditd_chacl_command_usage_audited"
    ]
  },
  {
    "id": "5.2.3.18",
    "title": "Ensure successful and unsuccessful attempts to use the usermod command are recorded",
    "assessment": "Automated",
    "description": "The operating system must generate audit records for successful/unsuccessful uses of the usermod command.",
    "rationale": "The usermod command modifies the system account files to reflect the changes that are specified on the command line. Without generating audit records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. Audit records can be generated from various components within the information system (e.g., module or policy filter).",
    "audit": "64 Bit systems On disk configuration Run the following command to check the on disk rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/sbin\\/usermod/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=1000 -F auid!=unset -k usermod Running configuration Run the following command to check loaded rules: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/sbin\\/usermod/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -S all -F path=/usr/sbin/usermod -F perm=x -F auid>=1000 -F auid!=-1 -F key=usermod 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor successful and unsuccessful attempts to use the usermod command. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F path=/usr/sbin/usermod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k usermod \" >> /etc/audit/rules.d/50-usermod.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi 32 Bit systems Follow the same procedures as for 64 bit systems and ignore any entries with b64. References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-12, SI-5   Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_usermod_logging_enabled",
      "auditd_usermod_events_recorded",
      "auditd_usermod_attempts_tracked",
      "auditd_usermod_success_failure_logged",
      "auditd_usermod_command_audited"
    ]
  },
  {
    "id": "5.2.3.19",
    "title": "Ensure kernel module loading unloading and modification is collected",
    "assessment": "Automated",
    "description": "Monitor the loading and unloading of kernel modules. All the loading / listing / dependency checking of modules is done by kmod via symbolic links. The following system calls control loading and unloading of modules: • init_module - load a module • finit_module - load a module (used when the overhead of using cryptographically signed modules to determine the authenticity of a module can be avoided) • delete_module - delete a module • create_module - create a loadable module entry • query_module - query the kernel for various bits pertaining to modules Any execution of the loading and unloading module programs and system calls will trigger an audit record with an identifier of modules.",
    "rationale": "Monitoring the use of all the various ways to manipulate kernel modules could provide system administrators with evidence that an unauthorized change was made to a kernel module, possibly compromising the security of the system.",
    "audit": "64 Bit systems On disk configuration Run the following commands to check the on disk rules: # { awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F auid!=unset/||/ -F auid!=-1/||/ -F auid!=4294967295/) \\ &&/ -S/ \\ &&(/init_module/ \\ ||/finit_module/ \\ ||/delete_module/ \\ ||/create_module/ \\ ||/query_module/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' /etc/audit/rules.d/*.rules UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/kmod/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" /etc/audit/rules.d/*.rules \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output matches: -a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=1000 -F auid!=unset -k kernel_modules -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F auid!=unset - k kernel_modules Running configuration Run the following command to check loaded rules:  # { auditctl -l | awk '/^ *-a *always,exit/ \\ &&/ -F *arch=b[2346]{2}/ \\ &&(/ -F auid!=unset/||/ -F auid!=-1/||/ -F auid!=4294967295/) \\ &&/ -S/ \\ &&(/init_module/ \\ ||/finit_module/ \\ ||/delete_module/ \\ ||/create_module/ \\ ||/query_module/) \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)' UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && auditctl -l | awk \"/^ *-a *always,exit/ \\ &&(/ -F *auid!=unset/||/ -F *auid!=-1/||/ -F *auid!=4294967295/) \\ &&/ -F *auid>=${UID_MIN}/ \\ &&/ -F *perm=x/ \\ &&/ -F *path=\\/usr\\/bin\\/kmod/ \\ &&(/ key= *[!-~]* *$/||/ -k *[!-~]* *$/)\" \\ || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Verify the output includes: -a always,exit -F arch=b64 -S create_module,init_module,delete_module,query_module,finit_module -F auid>=1000 -F auid!=-1 -F key=kernel_modules -a always,exit -S all -F path=/usr/bin/kmod -F perm=x -F auid>=1000 -F auid!=-1 -F key=kernel_modules Symlink audit Audit if the symlinks that kmod accepts is indeed pointing at it: # S_LINKS=$(ls -l /usr/sbin/lsmod /usr/sbin/rmmod /usr/sbin/insmod /usr/sbin/modinfo /usr/sbin/modprobe /usr/sbin/depmod | grep -v \" -> ../bin/kmod\" || true) \\ && if [[ \"${S_LINKS}\" != \"\" ]]; then printf \"Issue with symlinks: ${S_LINKS}\\n\"; else printf \"OK\\n\"; fi Verify the output states OK. If there is a symlink pointing to a different location it should be investigated.",
    "remediation": "Create audit rules Edit or create a file in the /etc/audit/rules.d/ directory, ending in .rules extension, with the relevant rules to monitor kernel module modification. 64 Bit systems Example: # { UID_MIN=$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs) [ -n \"${UID_MIN}\" ] && printf \" -a always,exit -F arch=b64 -S init_module,finit_module,delete_module,create_module,query_module -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules -a always,exit -F path=/usr/bin/kmod -F perm=x -F auid>=${UID_MIN} -F auid!=unset -k kernel_modules \" >> /etc/audit/rules.d/50-kernel_modules.rules || printf \"ERROR: Variable 'UID_MIN' is unset.\\n\" } Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3, CM-6 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, CM-6 Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration. System call structure For performance (man 7 audit.rules) reasons it is preferable to have all the system calls on one line. However, your configuration may have them on one line each or some other combination. This is important to understand for both the auditing and remediation sections as the examples given are optimized for performance as per the man page.",
    "function_names": [
      "auditd_kernel_module_loading_monitored",
      "auditd_kernel_module_unloading_monitored",
      "auditd_kernel_module_modification_monitored",
      "auditd_init_module_audited",
      "auditd_finit_module_audited",
      "auditd_delete_module_audited",
      "auditd_create_module_audited",
      "auditd_query_module_audited",
      "auditd_kernel_module_events_logged",
      "auditd_kernel_module_system_calls_monitored"
    ]
  },
  {
    "id": "5.2.3.20",
    "title": "Ensure the audit configuration is immutable",
    "assessment": "Automated",
    "description": "Set system audit so that audit rules cannot be modified with auditctl . Setting the flag \"-e 2\" forces audit to be put in immutable mode. Audit changes can only be made on system reboot. Note: This setting will require the system to be rebooted to update the active auditd configuration settings.",
    "rationale": "In immutable mode, unauthorized users cannot execute changes to the audit system to potentially hide malicious activity and then put the audit rules back. Users would most likely notice a system reboot and that could alert administrators of an attempt to make unauthorized audit changes.",
    "audit": "Run the following command and verify output matches: # grep -Ph -- '^\\h*-e\\h+2\\b' /etc/audit/rules.d/*.rules | tail -1 -e 2",
    "remediation": "Edit or create the file /etc/audit/rules.d/99-finalize.rules and add the line -e 2 at the end of the file: Example: # printf -- \"-e 2 \" >> /etc/audit/rules.d/99-finalize.rules Load audit rules Merge and load the rules into active configuration: # augenrules --load Check if reboot is required. # if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then printf \"Reboot required to load rules\\n\"; fi References: 1. NIST SP 800-53 Rev. 5: AC-3, AU-3, AU-12, MP-2",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, AU-3, AU-12, MP-2",
    "function_names": [
      "audit_config_immutable",
      "audit_config_immutable_reboot_required",
      "audit_rules_unmodifiable",
      "audit_rules_immutable_mode_enabled",
      "auditd_immutable_flag_enabled",
      "auditd_config_locked",
      "auditd_immutable_mode_active",
      "audit_config_unchangeable",
      "auditd_immutable_setting_enabled",
      "audit_rules_protected"
    ]
  },
  {
    "id": "5.2.3.21",
    "title": "Ensure the running and on disk configuration is the same",
    "assessment": "Manual",
    "description": "The Audit system have both on disk and running configuration. It is possible for these configuration settings to differ. Note: Due to the limitations of augenrules and auditctl, it is not absolutely guaranteed that loading the rule sets via augenrules --load will result in all rules being loaded or even that the user will be informed if there was a problem loading the rules.",
    "rationale": "Configuration differences between what is currently running and what is on disk could cause unexpected problems or may give a false impression of compliance requirements.",
    "audit": "Merged rule sets Ensure that all rules in /etc/audit/rules.d have been merged into /etc/audit/audit.rules: # augenrules --check /usr/sbin/augenrules: No change Should there be any drift, run augenrules --load to merge and load all rules.",
    "remediation": "If the rules are not aligned across all three () areas, run the following command to merge and load all rules: # augenrules --load Check if reboot is required. if [[ $(auditctl -s | grep \"enabled\") =~ \"2\" ]]; then echo \"Reboot required to load rules\"; fi References: 1. NIST SP 800-53 Rev. 5: AU-3  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration.",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3  Additional Information: Potential reboot required If the auditing configuration is locked (-e 2), then augenrules will not warn in any way that rules could not be loaded into the running configuration. A system reboot will be required to load the rules into the running configuration.",
    "function_names": [
      "audit_config_on_disk_matches_running",
      "audit_rules_consistent_disk_running",
      "audit_system_config_synchronized",
      "audit_ruleset_disk_running_aligned",
      "audit_config_no_disk_running_divergence"
    ]
  },
  {
    "id": "5.2.4.1",
    "title": "Ensure audit log files are mode 0640 or less permissive",
    "assessment": "Automated",
    "description": "Audit log files contain information about the system and system activity.",
    "rationale": "Access to audit records can reveal system and configuration data to attackers, potentially compromising its confidentiality.",
    "audit": "Run the following command to verify audit log files have mode 0640 or less permissive: # [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f -perm /0137 -exec stat -Lc \"%n %#a\" {} + Nothing should be returned",
    "remediation": "Run the following command to remove more permissive mode than 0640 from audit log files: # [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f -perm /0137 -exec chmod u-x,g-wx,o-rwx {} + References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "audit_log_file_permissions_0640_or_less",
      "audit_log_file_mode_restrictive",
      "audit_log_file_permissions_secure",
      "audit_log_file_mode_compliant",
      "audit_log_file_access_restricted"
    ]
  },
  {
    "id": "5.2.4.2",
    "title": "Ensure only authorized users own audit log files",
    "assessment": "Automated",
    "description": "Audit log files contain information about the system and system activity.",
    "rationale": "Access to audit records can reveal system and configuration data to attackers, potentially compromising its confidentiality.",
    "audit": "Run the following command to verify audit log files are owned by the root user: # [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f ! -user root -exec stat -Lc \"%n %U\" {} + Nothing should be returned",
    "remediation": "Run the following command to configure the audit log files to be owned by the root user: # [ -f /etc/audit/auditd.conf ] && find \"$(dirname $(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs))\" -type f ! -user root -exec chown root {} + References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "audit_log_file_authorized_owners",
      "audit_log_file_owner_restricted",
      "audit_log_file_ownership_compliance",
      "audit_log_file_no_unauthorized_owners",
      "audit_log_file_secure_ownership"
    ]
  },
  {
    "id": "5.2.4.3",
    "title": "Ensure only authorized groups are assigned ownership of audit log files",
    "assessment": "Automated",
    "description": "Audit log files contain information about the system and system activity.",
    "rationale": "Access to audit records can reveal system and configuration data to attackers, potentially compromising its confidentiality.",
    "audit": "Run the following command to verify log_group parameter is set to either adm or root in /etc/audit/auditd.conf: #  grep -Piws -- '^\\h*log_group\\h*=\\h*\\H+\\b' /etc/audit/auditd.conf | grep - Pvi -- '(amd)' Nothing should be returned Using the path of the directory containing the audit logs, verify audit log files are owned by the \"root\" or \"adm\" group by running the following script: #!/usr/bin/env bash { if [ -e /etc/audit/auditd.conf ]; then l_fpath=\"$(dirname \"$(awk -F \"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs)\")\" find -L \"$l_fpath\" -not -path \"$l_fpath\"/lost+found -type f \\( ! -group root -a ! -group adm \\) -exec ls -l {} + fi } Nothing should be returned",
    "remediation": "Run the following command to configure the audit log files to be group owned by adm: # find $(dirname $(awk -F\"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf | xargs)) -type f \\( ! -group adm -a ! -group root \\) -exec chgrp adm {} + Run the following command to set the log_group parameter in the audit configuration file to log_group = adm: # sed -ri 's/^\\s*#?\\s*log_group\\s*=\\s*\\S+(\\s*#.*)?.*$/log_group = adm\\1/' /etc/audit/auditd.conf Run the following command to restart the audit daemon to reload the configuration file: # systemctl restart auditd References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "cloudtrail_trail_authorized_groups_ownership",
      "cloudtrail_log_file_authorized_ownership",
      "cloudtrail_audit_log_restricted_ownership",
      "cloudtrail_log_group_authorized_assignment",
      "cloudtrail_audit_file_ownership_restricted",
      "cloudtrail_log_ownership_authorized_groups",
      "cloudtrail_audit_log_ownership_controlled",
      "cloudtrail_log_file_ownership_authorized_only"
    ]
  },
  {
    "id": "5.2.4.4",
    "title": "Ensure the audit log directory is 0750 or more restrictive",
    "assessment": "Automated",
    "description": "The audit log directory contains audit log files.",
    "rationale": "Audit information includes all information including: audit records, audit settings and audit reports. This information is needed to successfully audit system activity. This information must be protected from unauthorized modification or deletion. If this information were to be compromised, forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.",
    "audit": "Run the following command to verify that the audit log directory has a mode of 0750 or less permissive: # stat -Lc \"%n %a\" \"$(dirname $( awk -F\"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf))\" | grep -Pv -- '^\\h*\\H+\\h+([0,5,7][0,5]0)' Nothing should be returned",
    "remediation": "Run the following command to configure the audit log directory to have a mode of \"0750\" or less permissive: # chmod g-w,o-rwx \"$(dirname $(awk -F\"=\" '/^\\s*log_file/ {print $2}' /etc/audit/auditd.conf))\" Default Value: 750 References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "audit_log_directory_permissions_restrictive",
      "audit_log_directory_permissions_0750_or_stricter",
      "audit_log_directory_permissions_secure",
      "audit_log_directory_permissions_compliant",
      "audit_log_directory_permissions_cis_benchmark"
    ]
  },
  {
    "id": "5.2.4.5",
    "title": "Ensure audit configuration files are 640 or more restrictive",
    "assessment": "Automated",
    "description": "Audit configuration files control auditd and what events are audited.",
    "rationale": "Access to the audit configuration files could allow unauthorized personnel to prevent the auditing of critical events. Misconfigured audit configuration files may prevent the auditing of critical events or impact the system's performance by overwhelming the audit log. Misconfiguration of the audit configuration files may also make it more difficult to establish and investigate events relating to an incident.",
    "audit": "Run the following command to verify that the audit configuration files have mode 640 or more restrictive and are owned by the root user and root group: # find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) -exec stat -Lc \"%n %a\" {} + | grep -Pv -- '^\\h*\\H+\\h*([0,2,4,6][0,4]0)\\h*$' Nothing should be returned",
    "remediation": "Run the following command to remove more permissive mode than 0640 from the audit configuration files: # find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) -exec chmod u-x,g-wx,o-rwx {} + References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "auditd_config_file_permissions_restrictive",
      "auditd_config_file_permissions_640_or_stricter",
      "auditd_config_file_permissions_secure",
      "auditd_config_file_permissions_compliant",
      "auditd_config_file_permissions_cis_benchmark"
    ]
  },
  {
    "id": "5.2.4.6",
    "title": "Ensure audit configuration files are owned by root",
    "assessment": "Automated",
    "description": "Audit configuration files control auditd and what events are audited.",
    "rationale": "Access to the audit configuration files could allow unauthorized personnel to prevent the auditing of critical events. Misconfigured audit configuration files may prevent the auditing of critical events or impact the system's performance by overwhelming the audit log. Misconfiguration of the audit configuration files may also make it more difficult to establish and investigate events relating to an incident.",
    "audit": "Run the following command to verify that the audit configuration files have mode 640 or more restrictive and are owned by the root user and root group: # find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user root Nothing should be returned",
    "remediation": "Run the following command to change ownership to root user: # find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -user root -exec chown root {} + References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "auditd_config_file_owned_by_root",
      "auditd_config_file_root_ownership",
      "audit_config_file_secure_ownership",
      "auditd_file_owner_root",
      "audit_config_file_root_owner"
    ]
  },
  {
    "id": "5.2.4.7",
    "title": "Ensure audit configuration files belong to group root",
    "assessment": "Automated",
    "description": "Audit configuration files control auditd and what events are audited.",
    "rationale": "Access to the audit configuration files could allow unauthorized personnel to prevent the auditing of critical events. Misconfigured audit configuration files may prevent the auditing of critical events or impact the system's performance by overwhelming the audit log. Misconfiguration of the audit configuration files may also make it more difficult to establish and investigate events relating to an incident.",
    "audit": "Run the following command to verify that the audit configuration files have mode 640 or more restrictive and are owned by the root user and root group: # find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group root Nothing should be returned",
    "remediation": "Run the following command to change group to root: # find /etc/audit/ -type f \\( -name '*.conf' -o -name '*.rules' \\) ! -group root -exec chgrp root {} + References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "auditd_config_group_root",
      "auditd_config_file_ownership",
      "auditd_config_secure_group",
      "auditd_file_group_root",
      "audit_config_group_ownership",
      "auditd_rule_group_root",
      "auditd_secure_group_ownership",
      "audit_config_file_group_root"
    ]
  },
  {
    "id": "5.2.4.8",
    "title": "Ensure audit tools are 755 or more restrictive",
    "assessment": "Automated",
    "description": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
    "rationale": "Protecting audit information includes identifying and protecting the tools used to view and manipulate log data. Protecting audit tools is necessary to prevent unauthorized operation on audit information.",
    "audit": "Run the following command to verify the audit tools have mode 755 or more restrictive, are owned by the root user and group root: # stat -c \"%n %a\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules | grep -Pv -- '^\\h*\\H+\\h+([0- 7][0,1,4,5][0,1,4,5])\\h*$' Nothing should be returned",
    "remediation": "Run the following command to remove more permissive mode from the audit tools: # chmod go-w /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "compute_audit_tool_permissions_restrictive",
      "compute_audit_tool_permissions_755_or_stricter",
      "compute_audit_tool_file_permissions_secure",
      "compute_audit_tool_executable_permissions_restricted",
      "compute_audit_tool_access_controlled"
    ]
  },
  {
    "id": "5.2.4.9",
    "title": "Ensure audit tools are owned by root",
    "assessment": "Automated",
    "description": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
    "rationale": "Protecting audit information includes identifying and protecting the tools used to view and manipulate log data. Protecting audit tools is necessary to prevent unauthorized operation on audit information.",
    "audit": "Run the following command to verify the audit tools have mode 755 or more restrictive, are owned by the root user and group root: # stat -c \"%n %U\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules | grep -Pv -- '^\\h*\\H+\\h+root\\h*$' Nothing should be returned",
    "remediation": "Run the following command to change the owner of the audit tools to the root user: # chown root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "audit_tool_root_ownership",
      "audit_tool_system_owned",
      "audit_tool_privileged_ownership",
      "audit_tool_admin_ownership",
      "audit_tool_secure_ownership",
      "audit_tool_protected_ownership",
      "audit_tool_restricted_ownership",
      "audit_tool_authorized_ownership"
    ]
  },
  {
    "id": "5.2.4.10",
    "title": "Ensure audit tools belong to group root",
    "assessment": "Automated",
    "description": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
    "rationale": "Protecting audit information includes identifying and protecting the tools used to view and manipulate log data. Protecting audit tools is necessary to prevent unauthorized operation on audit information.",
    "audit": "Run the following command to verify the audit tools have mode 755 or more restrictive, are owned by the root user and group root: # stat -c \"%n %a %U %G\" /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules | grep -Pv -- '^\\h*\\H+\\h+([0- 7][0,1,4,5][0,1,4,5])\\h+root\\h+root\\h*$' Nothing should be returned",
    "remediation": "Run the following command to remove more permissive mode from the audit tools: # chmod go-w /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules Run the following command to change owner and group of the audit tools to root user and group: # chown root:root /sbin/auditctl /sbin/aureport /sbin/ausearch /sbin/autrace /sbin/auditd /sbin/augenrules References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 2 - Server •  Level 2 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "audit_tool_group_root_membership",
      "audit_tool_root_group_ownership",
      "audit_tool_system_group_compliance",
      "audit_tool_privileged_group_assignment",
      "audit_tool_secure_group_configuration"
    ]
  },
  {
    "id": "5.2.4.11",
    "title": "Ensure cryptographic mechanisms are used to protect the integrity of audit tools",
    "assessment": "Automated",
    "description": "Audit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.",
    "rationale": "Protecting the integrity of the tools used for auditing purposes is a critical step toward ensuring the integrity of audit information. Audit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. Attackers may replace the audit tools or inject code into the existing tools with the purpose of providing the capability to hide or erase system activity from the audit logs. Audit tools should be cryptographically signed in order to provide the capability to identify when the audit tools have been modified, manipulated, or replaced. An example is a checksum hash of the file or files.",
    "audit": "Verify that Advanced Intrusion Detection Environment (AIDE) is properly configured . Run the following command to verify that AIDE is configured to use cryptographic mechanisms to protect the integrity of audit tools: # grep -Ps -- '(\\/sbin\\/(audit|au)\\H*\\b)' /etc/aide.conf /etc/aide/aide.conf /etc/aide.conf.d/*.conf /etc/aide/aide.conf.d/* Verify the output includes: /sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512",
    "remediation": "Add or update the following selection lines for to a file ending in .conf in the /etc/aide/aide.conf.d/ or to /etc/aide/aide.conf to protect the integrity of the audit tools: # Audit Tools /sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512 /sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512 References: 1. NIST SP 800-53 Rev. 5: AU-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1070, T1070.002, T1083, T1083.000 TA0007 M1047    6 System Maintenance Recommendations in this section are intended as maintenance and are intended to be checked on a frequent basis to ensure system stability. Many recommendations do not have quick remediations and require investigation into the cause and best fix available and may indicate an attempted breach of system security.  6.1 System File Permissions This section provides guidance on securing aspects of system files and directories.",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1070, T1070.002, T1083, T1083.000 TA0007 M1047    6 System Maintenance Recommendations in this section are intended as maintenance and are intended to be checked on a frequent basis to ensure system stability. Many recommendations do not have quick remediations and require investigation into the cause and best fix available and may indicate an attempted breach of system security.  6.1 System File Permissions This section provides guidance on securing aspects of system files and directories.",
    "function_names": [
      "audit_tool_integrity_protection_enabled",
      "audit_tool_cryptographic_verification_enabled",
      "audit_tool_signature_validation_enabled",
      "audit_tool_tamper_proofing_enabled",
      "audit_tool_secure_hashing_enabled",
      "audit_tool_digital_signature_required",
      "audit_tool_code_integrity_checked",
      "audit_tool_immutable_logs_enabled",
      "audit_tool_secure_checksum_required",
      "audit_tool_cryptographic_hashing_enabled"
    ]
  },
  {
    "id": "6.1.1",
    "title": "Ensure permissions on /etc/passwd are configured",
    "assessment": "Automated",
    "description": "The /etc/passwd file contains user account information that is used by many system utilities and therefore must be readable for these utilities to operate.",
    "rationale": "It is critical to ensure that the /etc/passwd file is protected from unauthorized write access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/passwd is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/passwd /etc/passwd 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd: # chmod u-x,go-wx /etc/passwd # chown root:root /etc/passwd Default Value: /etc/passwd 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_passwd_permissions_configured",
      "linux_file_passwd_readable",
      "linux_file_passwd_secure_permissions",
      "linux_file_passwd_owner_root",
      "linux_file_passwd_group_root",
      "linux_file_passwd_mode_644",
      "linux_file_passwd_no_world_writable",
      "linux_file_passwd_restricted_access"
    ]
  },
  {
    "id": "6.1.2",
    "title": "Ensure permissions on /etc/passwd- are configured",
    "assessment": "Automated",
    "description": "The /etc/passwd- file contains backup user account information.",
    "rationale": "It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/passwd- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/passwd- /etc/passwd- 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd-: # chmod u-x,go-wx /etc/passwd- # chown root:root /etc/passwd- Default Value: /etc/passwd- 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_passwd_backup_permissions_configured",
      "linux_file_passwd_backup_owner_root",
      "linux_file_passwd_backup_group_root",
      "linux_file_passwd_backup_mode_600",
      "linux_file_passwd_backup_no_world_writable",
      "linux_file_passwd_backup_no_world_readable",
      "linux_file_passwd_backup_no_group_writable",
      "linux_file_passwd_backup_no_group_readable"
    ]
  },
  {
    "id": "6.1.3",
    "title": "Ensure permissions on /etc/group are configured",
    "assessment": "Automated",
    "description": "The /etc/group file contains a list of all the valid groups defined in the system. The command below allows read/write access for root and read access for everyone else.",
    "rationale": "The /etc/group file needs to be protected from unauthorized changes by non-privileged users, but needs to be readable as this information is used with many non-privileged programs.",
    "audit": "Run the following command to verify /etc/group is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/group /etc/group 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group: # chmod u-x,go-wx /etc/group # chown root:root /etc/group Default Value: /etc/group 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_file_group_permissions_configured",
      "compute_file_group_read_only_non_root",
      "compute_file_group_root_write_access",
      "compute_file_group_secure_permissions",
      "compute_file_group_etc_permissions_configured"
    ]
  },
  {
    "id": "6.1.4",
    "title": "Ensure permissions on /etc/group- are configured",
    "assessment": "Automated",
    "description": "The /etc/group- file contains a backup list of all the valid groups defined in the system.",
    "rationale": "It is critical to ensure that the /etc/group- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/group- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/group- /etc/group- 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group-: # chmod u-x,go-wx /etc/group- # chown root:root /etc/group- Default Value: /etc/group- 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_group_backup_permissions_configured",
      "linux_file_group_backup_ownership_configured",
      "linux_file_group_backup_mode_restricted",
      "linux_file_group_backup_access_controlled",
      "linux_file_group_backup_integrity_verified"
    ]
  },
  {
    "id": "6.1.5",
    "title": "Ensure permissions on /etc/shadow are configured",
    "assessment": "Automated",
    "description": "The /etc/shadow file is used to store the information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert the user accounts.",
    "audit": "Run the following command to verify /etc/shadow is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/shadow Example: /etc/shadow 640 0/root 42/shadow",
    "remediation": "Run one of the following commands to set ownership of /etc/shadow to root and group to either root or shadow: # chown root:shadow /etc/shadow -OR- # chown root:root /etc/shadow Run the following command to remove excess permissions form /etc/shadow: # chmod u-x,g-wx,o-rwx /etc/shadow Default Value: /etc/shadow 640 0/root 42/shadow  References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_shadow_permissions_configured",
      "linux_file_shadow_owner_root",
      "linux_file_shadow_group_root",
      "linux_file_shadow_mode_640",
      "linux_file_shadow_no_world_writable",
      "linux_file_shadow_no_group_writable",
      "linux_file_shadow_no_other_readable",
      "linux_file_shadow_immutable_flag_set"
    ]
  },
  {
    "id": "6.1.6",
    "title": "Ensure permissions on /etc/shadow- are configured",
    "assessment": "Automated",
    "description": "The /etc/shadow- file is used to store backup information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/shadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/shadow- is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/shadow- Example: /etc/shadow 640 0/root 42/shadow-",
    "remediation": "Run one of the following commands to set ownership of /etc/shadow- to root and group to either root or shadow: # chown root:shadow /etc/shadow- -OR- # chown root:root /etc/shadow- Run the following command to remove excess permissions form /etc/shadow-: # chmod u-x,g-wx,o-rwx /etc/shadow- Default Value: /etc/shadow- 640 0/root 42/shadow References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_shadow_backup_permissions_configured",
      "linux_file_shadow_backup_owner_root",
      "linux_file_shadow_backup_group_root",
      "linux_file_shadow_backup_mode_0000",
      "linux_file_shadow_backup_no_world_readable",
      "linux_file_shadow_backup_no_world_writable",
      "linux_file_shadow_backup_no_group_writable",
      "linux_file_shadow_backup_no_other_permissions"
    ]
  },
  {
    "id": "6.1.7",
    "title": "Ensure permissions on /etc/gshadow are configured",
    "assessment": "Automated",
    "description": "The /etc/gshadow file is used to store the information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/gshadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/gshadow file (such as group administrators) could also be useful to subvert the group.",
    "audit": "Run the following command to verify /etc/gshadow is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/gshadow Example: /etc/gshadow 640 0/root 42/gshadow",
    "remediation": "Run one of the following commands to set ownership of /etc/gshadow to root and group to either root or shadow: # chown root:shadow /etc/gshadow -OR- # chown root:root /etc/gshadow Run the following command to remove excess permissions form /etc/gshadow: # chmod u-x,g-wx,o-rwx /etc/gshadow Default Value: /etc/gshadow 640 0/root 42/shadow  References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_gshadow_permissions_configured",
      "linux_file_gshadow_owner_root",
      "linux_file_gshadow_group_shadow",
      "linux_file_gshadow_mode_0000",
      "linux_file_gshadow_immutable_flag_set",
      "linux_file_gshadow_no_world_writable",
      "linux_file_gshadow_no_world_readable",
      "linux_file_gshadow_no_group_writable",
      "linux_file_gshadow_no_group_readable",
      "linux_file_gshadow_no_other_permissions"
    ]
  },
  {
    "id": "6.1.8",
    "title": "Ensure permissions on /etc/gshadow- are configured",
    "assessment": "Automated",
    "description": "The /etc/gshadow- file is used to store backup information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/gshadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/gshadow- is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/gshadow- Example: /etc/gshadow- 640 0/root 42/shadow",
    "remediation": "Run one of the following commands to set ownership of /etc/gshadow- to root and group to either root or shadow: # chown root:shadow /etc/gshadow- -OR- # chown root:root /etc/gshadow- Run the following command to remove excess permissions form /etc/gshadow-: # chmod u-x,g-wx,o-rwx /etc/gshadow- Default Value: /etc/gshadow- 640 0/root 42/shadow References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_gshadow_backup_permissions_configured",
      "linux_file_gshadow_backup_ownership_correct",
      "linux_file_gshadow_backup_mode_restricted",
      "linux_file_gshadow_backup_access_controlled",
      "linux_file_gshadow_backup_secure_permissions"
    ]
  },
  {
    "id": "6.1.9",
    "title": "Ensure permissions on /etc/shells are configured",
    "assessment": "Automated",
    "description": "/etc/shells is a text file which contains the full pathnames of valid login shells. This file is consulted by chsh and available to be queried by other programs.",
    "rationale": "It is critical to ensure that the /etc/shells file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/shells is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/shells /etc/shells 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/shells: # chmod u-x,go-wx /etc/shells # chown root:root /etc/shells References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: /etc/shells 644 0/root 0/root",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: /etc/shells 644 0/root 0/root",
    "function_names": [
      "file_shells_permissions_configured",
      "file_shells_owner_root",
      "file_shells_group_root",
      "file_shells_mode_644",
      "file_shells_no_world_writable",
      "file_shells_no_unauthorized_access",
      "file_shells_immutable_flag_set",
      "file_shells_no_unexpected_shells"
    ]
  },
  {
    "id": "6.1.10",
    "title": "Ensure permissions on /etc/opasswd are configured",
    "assessment": "Automated",
    "description": "/etc/security/opasswd and it's backup /etc/security/opasswd.old hold user's previous passwords if pam_unix or pam_pwhistory is in use on the system",
    "rationale": "It is critical to ensure that /etc/security/opasswd is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following commands to verify /etc/security/opasswd and /etc/security/opasswd.old are mode 600 or more restrictive, Uid is 0/root and Gid is 0/root if they exist: # [ -e \"/etc/security/opasswd\" ] && stat -Lc \"%n %a %u/%U %g/%G\" /etc/security/opasswd /etc/security/opasswd 600 0/root 0/root -OR- Nothing is returned # [ -e \"/etc/security/opasswd.old\" ] && stat -Lc \"%n %a %u/%U %g/%G\" /etc/security/opasswd.old /etc/security/opasswd.old 600 0/root 0/root -OR- Nothing is returned",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/security/opasswd and /etc/security/opasswd.old is they exist: # [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd # [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd # [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old # [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: /etc/security/opasswd 600 0/root 0/root",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: /etc/security/opasswd 600 0/root 0/root",
    "function_names": [
      "system_file_opasswd_permissions_configured",
      "system_file_opasswd_ownership_configured",
      "system_file_opasswd_old_permissions_configured",
      "system_file_opasswd_old_ownership_configured",
      "system_file_opasswd_access_restricted",
      "system_file_opasswd_old_access_restricted",
      "system_file_opasswd_group_configured",
      "system_file_opasswd_old_group_configured"
    ]
  },
  {
    "id": "6.1.11",
    "title": "Ensure world writable files and directories are secured",
    "assessment": "Automated",
    "description": "World writable files are the least secure. Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. See the chmod(2) man page for more information. Setting the sticky bit on world writable directories prevents users from deleting or renaming files in that directory that are not owned by them.",
    "rationale": "Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. This feature prevents the ability to delete or rename files in world writable directories (such as /tmp ) that are owned by another user.",
    "audit": "Run the following script to verify: • No world writable files exist • No world writable directories without the sticky bit exist  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_smask='01000' a_path=(); a_arr=(); a_file=(); a_dir=() # Initialize arrays a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"/sys/kernel/security/apparmor/*\" -a ! -path \"/snap/*\" -a ! -path \"/sys/fs/cgroup/memory/*\") while read -r l_bfs; do a_path+=( -a ! -path \"\"$l_bfs\"/*\") done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\\s*(nfs|proc|smb)/ {print $2}') # Populate array with files that will possibly fail one of the audits while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%#a' \"$l_file\")\") done < <(find / \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2>/dev/null) while IFS=\"^\" read -r l_fname l_mode; do # Test files in the array [ -f \"$l_fname\" ] && a_file+=(\"$l_fname\") # Add WR files if [ -d \"$l_fname\" ]; then # Add directories w/o sticky bit [ ! $(( $l_mode & $l_smask )) -gt 0 ] && a_dir+=(\"$l_fname\") fi done < <(printf '%s\\n' \"${a_arr[@]}\") if ! (( ${#a_file[@]} > 0 )); then l_output=\"$l_output\\n  - No world writable files exist on the local filesystem.\" else l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_file[@]}\")\\\" World writable files on the system.\\n   - The following is a list of World writable files:\\n$(printf '%s\\n' \"${a_file[@]}\")\\n   - end of list\\n\" fi if ! (( ${#a_dir[@]} > 0 )); then l_output=\"$l_output\\n  - Sticky bit is set on world writable directories on the local filesystem.\" else l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_dir[@]}\")\\\" World writable directories without the sticky bit on the system.\\n   - The following is a list of World writable directories without the sticky bit:\\n$(printf '%s\\n' \"${a_dir[@]}\")\\n   - end of list\\n\" fi unset a_path; unset a_arr; unset a_file; unset a_dir # Remove arrays # If l_output2 is empty, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\" fi } Note: On systems with a large number of files and/or directories, this audit may be a long running process",
    "remediation": "• World Writable Files: o It is recommended that write access is removed from other with the command ( chmod o-w <filename> ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file. • World Writable Directories: o Set the sticky bit on all world writable directories with the command ( chmod a+t <directory_name> ) Run the following script to: • Remove other write permission from any world writable files • Add the sticky bit to all world writable directories  #!/usr/bin/env bash { l_smask='01000' a_path=(); a_arr=() # Initialize array a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"/sys/kernel/security/apparmor/*\" -a ! -path \"/snap/*\" -a ! -path \"/sys/fs/cgroup/memory/*\") while read -r l_bfs; do a_path+=( -a ! -path \"\"$l_bfs\"/*\") done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\\s*(nfs|proc|smb)/ {print $2}') # Populate array with files while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%#a' \"$l_file\")\") done < <(find / \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2>/dev/null) while IFS=\"^\" read -r l_fname l_mode; do # Test files in the array if [ -f \"$l_fname\" ]; then # Remove excess permissions from WW files echo -e \" - File: \\\"$l_fname\\\" is mode: \\\"$l_mode\\\"\\n  - removing write permission on \\\"$l_fname\\\" from \\\"other\\\"\" chmod o-w \"$l_fname\" fi if [ -d \"$l_fname\" ]; then if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then # Add sticky bit echo -e \" - Directory: \\\"$l_fname\\\" is mode: \\\"$l_mode\\\" and doesn't have the sticky bit set\\n  - Adding the sticky bit\" chmod a+t \"$l_fname\" fi fi done < <(printf '%s\\n' \"${a_arr[@]}\") unset a_path; unset a_arr # Remove array } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "filesystem_file_world_writable_permissions_restricted",
      "filesystem_directory_world_writable_permissions_restricted",
      "filesystem_directory_sticky_bit_enabled",
      "filesystem_file_world_writable_ownership_validated",
      "filesystem_directory_world_writable_ownership_validated",
      "filesystem_world_writable_files_removed",
      "filesystem_world_writable_directories_removed",
      "filesystem_world_writable_permissions_audited"
    ]
  },
  {
    "id": "6.1.12",
    "title": "Ensure no unowned or ungrouped files or directories exist",
    "assessment": "Automated",
    "description": "Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by those users or groups.",
    "rationale": "A new user or group who is assigned a deleted user's user ID or group ID may then end up \"owning\" a deleted user or group's files, and thus have more access on the system than was intended.",
    "audit": "Run the following script to verify no unowned or ungrouped files or directories exist: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_path=(); a_arr=(); a_nouser=(); a_nogroup=() # Initialize arrays a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\") while read -r l_bfs; do a_path+=( -a ! -path \"\"$l_bfs\"/*\") done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\\s*(nfs|proc|smb)/ {print $2}') while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%U^%G' \"$l_file\")\") && echo \"Adding: $l_file\" done < <(find / \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) \\( -nouser - o -nogroup \\) -print0 2> /dev/null) while IFS=\"^\" read -r l_fname l_user l_group; do # Test files in the array [ \"$l_user\" = \"UNKNOWN\" ] && a_nouser+=(\"$l_fname\") [ \"$l_group\" = \"UNKNOWN\" ] && a_nogroup+=(\"$l_fname\") done <<< \"$(printf '%s\\n' \"${a_arr[@]}\")\" if ! (( ${#a_nouser[@]} > 0 )); then l_output=\"$l_output\\n  - No unowned files or directories exist on the local filesystem.\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_nouser[@]}\")\\\" unowned files or directories on the system.\\n   - The following is a list of unowned files and/or directories:\\n$(printf '%s\\n' \"${a_nouser[@]}\")\\n   - end of list\" fi if ! (( ${#a_nogroup[@]} > 0 )); then l_output=\"$l_output\\n  - No ungrouped files or directories exist on the local filesystem.\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_nogroup[@]}\")\\\" ungrouped files or directories on the system.\\n   - The following is a list of ungrouped files and/or directories:\\n$(printf '%s\\n' \"${a_nogroup[@]}\")\\n   - end of list\" fi unset a_path; unset a_arr ; unset a_nouser; unset a_nogroup # Remove arrays if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured * :\\n$l_output\\n\" fi } Note: On systems with a large number of files and/or directories, this audit may be a long running process",
    "remediation": "Remove or set ownership and group ownership of these files and/or directories to an active user on the system as appropriate. References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "filesystem_file_owned",
      "filesystem_directory_owned",
      "filesystem_file_grouped",
      "filesystem_directory_grouped",
      "filesystem_no_unowned_files",
      "filesystem_no_ungrouped_files",
      "filesystem_no_unowned_directories",
      "filesystem_no_ungrouped_directories"
    ]
  },
  {
    "id": "6.1.13",
    "title": "Ensure SUID and SGID files are reviewed",
    "assessment": "Manual",
    "description": "The owner of a file can set the file's permissions to run with the owner's or group's permissions, even if the user running the program is not the owner or a member of the group. The most common reason for a SUID or SGID program is to enable users to perform functions (such as changing their password) that require root privileges.",
    "rationale": "There are valid reasons for SUID and SGID programs, but it is important to identify and review such programs to ensure they are legitimate. Review the files returned by the action in the audit section and check to see if system binaries have a different checksum than what from the package. This is an indication that the binary may have been replaced.",
    "audit": "Run the following script to generate a list of SUID and SGID files: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_arr=(); a_suid=(); a_sgid=() # initialize arrays # Populate array with files that will possibly fail one of the audits while read -r l_mpname; do while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%#a' \"$l_file\")\") done < <(find \"$l_mpname\" -xdev -not -path \"/run/user/*\"  -type f \\( - perm -2000 -o -perm -4000 \\) -print0) done <<< \"$(findmnt -Derno target)\" # Test files in the array while IFS=\"^\" read -r l_fname l_mode; do if [ -f \"$l_fname\" ]; then l_suid_mask=\"04000\"; l_sgid_mask=\"02000\" [ $(( $l_mode & $l_suid_mask )) -gt 0 ] && a_suid+=(\"$l_fname\") [ $(( $l_mode & $l_sgid_mask )) -gt 0 ] && a_sgid+=(\"$l_fname\") fi done <<< \"$(printf '%s\\n' \"${a_arr[@]}\")\" if ! (( ${#a_suid[@]} > 0 )); then l_output=\"$l_output\\n - There are no SUID files exist on the system\" else l_output2=\"$l_output2\\n - List of \\\"$(printf '%s' \"${#a_suid[@]}\")\\\" SUID executable files:\\n$(printf '%s\\n' \"${a_suid[@]}\")\\n - end of list -\\n\" fi if ! (( ${#a_sgid[@]} > 0 )); then l_output=\"$l_output\\n - There are no SGID files exist on the system\" else l_output2=\"$l_output2\\n - List of \\\"$(printf '%s' \"${#a_sgid[@]}\")\\\" SGID executable files:\\n$(printf '%s\\n' \"${a_sgid[@]}\")\\n - end of list -\\n\" fi [ -n \"$l_output2\" ] && l_output2=\"$l_output2\\n- Review the preceding list(s) of SUID and/or SGID files to\\n- ensure that no rogue programs have been introduced onto the system.\\n\" unset a_arr; unset a_suid; unset a_sgid # Remove arrays # If l_output2 is empty, Nothing to report if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"$l_output\\n\" fi } Note: on systems with a large number of files, this may be a long running process",
    "remediation": "Ensure that no rogue SUID or SGID programs have been introduced into the system. Review the files returned by the action in the Audit section and confirm the integrity of these binaries.  References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5, AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Workstation •  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5, AC-3, MP-2",
    "function_names": [
      "compute_file_suid_reviewed",
      "compute_file_sgid_reviewed",
      "compute_file_suid_sgid_reviewed_all",
      "compute_file_suid_sgid_privileges_restricted",
      "compute_file_suid_sgid_ownership_validated",
      "compute_file_suid_sgid_permissions_audited",
      "compute_file_suid_sgid_privilege_escalation_prevented"
    ]
  },
  {
    "id": "6.2.1",
    "title": "Ensure accounts in /etc/passwd use shadowed passwords",
    "assessment": "Automated",
    "description": "Local accounts can uses shadowed passwords. With shadowed passwords, The passwords are saved in shadow password file, /etc/shadow, encrypted by a salted one- way hash. Accounts with a shadowed password have an x in the second field in /etc/passwd.",
    "rationale": "The /etc/passwd file also contains information like user ID's and group ID's that are used by many system programs. Therefore, the /etc/passwd file must remain world readable. In spite of encoding the password with a randomly-generated one-way hash function, an attacker could still break the system if they got access to the /etc/passwd file. This can be mitigated by using shadowed passwords, thus moving the passwords in the /etc/passwd file to /etc/shadow. The /etc/shadow file is set so only root will be able to read and write. This helps mitigate the risk of an attacker gaining access to the encoded passwords with which to perform a dictionary attack. Note: • All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user. • A user account with an empty second field in /etc/passwd allows the account to be logged into by providing only the username.",
    "audit": "Run the following command and verify that no output is returned: # awk -F: '($2 != \"x\" ) { print $1 \" is not set to shadowed passwords \"}' /etc/passwd",
    "remediation": "Run the following command to set accounts to use shadowed passwords: # sed -e 's/^\\([a-zA-Z0-9_]*\\):[^:]*:/\\1:x:/' -i /etc/passwd Investigate to determine if the account is logged in and what it is being used for, to determine if it needs to be forced off.  References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "linux_account_shadowed_passwords",
      "linux_passwd_shadow_enabled",
      "linux_user_shadow_passwords",
      "linux_auth_shadow_passwords_enabled",
      "linux_system_shadow_passwords_required"
    ]
  },
  {
    "id": "6.2.2",
    "title": "Ensure /etc/shadow password fields are not empty",
    "assessment": "Automated",
    "description": "An account with an empty password field means that anybody may log in as that user without providing a password.",
    "rationale": "All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user.",
    "audit": "Run the following command and verify that no output is returned: # awk -F: '($2 == \"\" ) { print $1 \" does not have a password \"}' /etc/shadow",
    "remediation": "If any accounts in the /etc/shadow file do not have a password, run the following command to lock the account until it can be determined why it does not have a password: # passwd -l <username> Also, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off. References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "linux_account_shadow_password_not_empty",
      "linux_user_password_field_populated",
      "linux_shadow_file_password_configured",
      "linux_account_password_required",
      "linux_shadow_password_field_valid"
    ]
  },
  {
    "id": "6.2.3",
    "title": "Ensure all groups in /etc/passwd exist in /etc/group",
    "assessment": "Automated",
    "description": "Over time, system administration errors and changes can lead to groups being defined in /etc/passwd but not in /etc/group .",
    "rationale": "Groups defined in the /etc/passwd file but not in the /etc/group file pose a threat to system security since group permissions are not properly managed.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do grep -q -P \"^.*?:[^:]*:$i:\" /etc/group if [ $? -ne 0 ]; then echo \"Group $i is referenced by /etc/passwd but does not exist in /etc/group\" fi done",
    "remediation": "Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1222, T1222.002 TA0003 M1027",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1222, T1222.002 TA0003 M1027",
    "function_names": [
      "linux_passwd_group_consistency",
      "linux_group_passwd_sync",
      "linux_passwd_group_existence",
      "linux_group_passwd_alignment",
      "linux_passwd_group_validation",
      "linux_group_passwd_consistency",
      "linux_passwd_group_sync",
      "linux_group_passwd_existence"
    ]
  },
  {
    "id": "6.2.4",
    "title": "Ensure shadow group is empty",
    "assessment": "Automated",
    "description": "The shadow group allows system programs which require access the ability to read the /etc/shadow file. No users should be assigned to the shadow group.",
    "rationale": "Any users assigned to the shadow group would be granted read access to the /etc/shadow file. If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed passwords to break them. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert additional user accounts.",
    "audit": "Run the following commands and verify no results are returned: # awk -F: '($1==\"shadow\") {print $NF}' /etc/group # awk -F: -v GID=\"$(awk -F: '($1==\"shadow\") {print $3}' /etc/group)\" '($4==GID) {print $1}' /etc/passwd",
    "remediation": "Run the following command to remove all users from the shadow group # sed -ri 's/(^shadow:[^:]*:[^:]*:)([^:]+$)/\\1/' /etc/group Change the primary group of any users with shadow as their primary group. # usermod -g <primary group> <user> References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "iam_group_shadow_empty",
      "iam_group_shadow_no_users",
      "linux_group_shadow_empty",
      "linux_group_shadow_no_members",
      "system_group_shadow_empty",
      "system_group_shadow_no_users"
    ]
  },
  {
    "id": "6.2.5",
    "title": "Ensure no duplicate UIDs exist",
    "assessment": "Automated",
    "description": "Although the useradd program will not let you create a duplicate User ID (UID), it is possible for an administrator to manually edit the /etc/passwd file and change the UID field.",
    "rationale": "Users must be assigned unique UIDs for accountability and to ensure appropriate access protections.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c | while read x ; do [ -z \"$x\" ] && break set - $x if [ $1 -gt 1 ]; then users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs) echo \"Duplicate UID ($2): $users\" fi done",
    "remediation": "Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0005 M1027",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0005 M1027",
    "function_names": [
      "linux_user_unique_uid",
      "linux_user_no_duplicate_uids",
      "linux_passwd_uid_uniqueness",
      "linux_account_unique_uid",
      "linux_etc_passwd_uid_validation"
    ]
  },
  {
    "id": "6.2.6",
    "title": "Ensure no duplicate GIDs exist",
    "assessment": "Automated",
    "description": "Although the groupadd program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the /etc/group file and change the GID field.",
    "rationale": "User groups must be assigned unique GIDs for accountability and to ensure appropriate access protections.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -d: -f3 /etc/group | sort | uniq -d | while read x ; do echo \"Duplicate GID ($x) in /etc/group\" done",
    "remediation": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also use the grpck command to check for other inconsistencies in the /etc/group file. MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0005 M1027",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also use the grpck command to check for other inconsistencies in the /etc/group file. MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0005 M1027",
    "function_names": [
      "linux_group_duplicate_gid",
      "linux_group_unique_gid_required",
      "linux_group_gid_conflict_free",
      "linux_group_gid_no_duplicates",
      "linux_group_gid_unique_enforced"
    ]
  },
  {
    "id": "6.2.7",
    "title": "Ensure no duplicate user names exist",
    "assessment": "Automated",
    "description": "Although the useradd program will not let you create a duplicate user name, it is possible for an administrator to manually edit the /etc/passwd file and change the user name.",
    "rationale": "If a user is assigned a duplicate user name, it will create and have access to files with the first UID for that username in /etc/passwd . For example, if \"test4\" has a UID of 1000 and a subsequent \"test4\" entry has a UID of 2000, logging in as \"test4\" will use UID 1000. Effectively, the UID is shared, which is a security problem.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -d: -f1 /etc/passwd | sort | uniq -d | while read -r x; do echo \"Duplicate login name $x in /etc/passwd\" done",
    "remediation": "Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0004 M1027",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0004 M1027",
    "function_names": [
      "compute_user_unique_names",
      "compute_user_no_duplicate_names",
      "compute_user_name_uniqueness",
      "compute_user_name_no_duplicates",
      "compute_user_name_distinct"
    ]
  },
  {
    "id": "6.2.8",
    "title": "Ensure no duplicate group names exist",
    "assessment": "Automated",
    "description": "Although the groupadd program will not let you create a duplicate group name, it is possible for an administrator to manually edit the /etc/group file and change the group name.",
    "rationale": "If a group is assigned a duplicate group name, it will create and have access to files with the first GID for that group in /etc/group . Effectively, the GID is shared, which is a security problem.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -d: -f1 /etc/group | sort | uniq -d | while read -r x; do echo \"Duplicate group name $x in /etc/group\" done",
    "remediation": "Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0004 M1027",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0004 M1027",
    "function_names": [
      "iam_group_unique_names",
      "linux_group_no_duplicate_names",
      "system_group_name_uniqueness",
      "etc_group_unique_names",
      "local_group_no_duplicates"
    ]
  },
  {
    "id": "6.2.9",
    "title": "Ensure root PATH Integrity",
    "assessment": "Automated",
    "description": "The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.",
    "rationale": "Including the current working directory (.) or other writable directory in root's executable path makes it likely that an attacker can gain superuser access by forcing an administrator operating as root to execute a Trojan horse program.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash RPCV=\"$(sudo -Hiu root env | grep '^PATH' | cut -d= -f2)\" echo \"$RPCV\" | grep -q \"::\" && echo \"root's path contains a empty directory (::)\" echo \"$RPCV\" | grep -q \":$\" && echo \"root's path contains a trailing (:)\" for x in $(echo \"$RPCV\" | tr \":\" \" \"); do if [ -d \"$x\" ]; then ls -ldH \"$x\" | awk '$9 == \".\" {print \"PATH contains current working directory (.)\"} $3 != \"root\" {print $9, \"is not owned by root\"} substr($1,6,1) != \"-\" {print $9, \"is group writable\"} substr($1,9,1) != \"-\" {print $9, \"is world writable\"}' else echo \"$x is not a directory\" fi done",
    "remediation": "Correct or justify any items discovered in the Audit step. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1204, T1204.002 TA0006 M1022",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5  MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1204, T1204.002 TA0006 M1022",
    "function_names": [
      "system_root_path_integrity",
      "system_root_path_no_world_writable",
      "system_root_path_no_unowned",
      "system_root_path_no_group_writable",
      "system_root_path_no_relative_paths",
      "system_root_path_no_empty_entries",
      "system_root_path_no_duplicate_entries",
      "system_root_path_no_untrusted_dirs",
      "system_root_path_secure_permissions",
      "system_root_path_owned_by_root"
    ]
  },
  {
    "id": "6.2.10",
    "title": "Ensure root is the only UID 0 account",
    "assessment": "Automated",
    "description": "Any account with UID 0 has superuser privileges on the system.",
    "rationale": "This access must be limited to only the default root account and only from the system console. Administrative access must be through an unprivileged account using an approved mechanism as noted in Item 5.6 Ensure access to the su command is restricted.",
    "audit": "Run the following command and verify that only \"root\" is returned: # awk -F: '($3 == 0) { print $1 }' /etc/passwd root",
    "remediation": "Remove any users other than root with UID 0 or assign them a new UID if appropriate. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1548, T1548.000 TA0001 M1026",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1548, T1548.000 TA0001 M1026",
    "function_names": [
      "compute_user_root_only_uid_0",
      "compute_account_no_non_root_uid_0",
      "compute_system_no_duplicate_uid_0",
      "compute_user_no_duplicate_root_privileges",
      "compute_account_uid_0_restricted_to_root"
    ]
  },
  {
    "id": "6.2.11",
    "title": "Ensure local interactive user home directories are configured",
    "assessment": "Automated",
    "description": "The user home directory is space defined for the particular user to set local environment variables and to store personal files. While the system administrator can establish secure permissions for users' home directories, the users can easily override these. Users can be defined in /etc/passwd without a home directory or with a home directory that does not actually exist.",
    "rationale": "Since the user is accountable for files stored in the user home directory, the user must be the owner of the directory. Group or world-writable user home directories may enable malicious users to steal or modify other users' data or to gain another user's system privileges. If the user's home directory does not exist or is unassigned, the user will be placed in \"/\" and will not be able to write any files or have local environment variables set.",
    "audit": "Run the following script to Ensure: • local interactive user home directories exist • Ensure local interactive users own their home directories • Ensure local interactive user home directories are mode 750 or more restrictive  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_heout2=\"\" l_hoout2=\"\" l_haout2=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" unset a_uarr && a_uarr=() # Clear and initialize array while read -r l_epu l_eph; do # Populate array with users and user home location a_uarr+=(\"$l_epu $l_eph\") done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\" l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n  ** INFO **\\n  - \\\"$l_asize\\\" Local interactive users found on the system\\n  - This may be a long running check\\n\" while read -r l_user l_home; do if [ -d \"$l_home\" ]; then l_mask='0027' l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" while read -r l_own l_mode; do [ \"$l_user\" != \"$l_own\" ] && l_hoout2=\"$l_hoout2\\n  - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\" if [ $(( $l_mode & $l_mask )) -gt 0 ]; then l_haout2=\"$l_haout2\\n  - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\" fi done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\" else l_heout2=\"$l_heout2\\n  - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\" fi done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\" [ -z \"$l_heout2\" ] && l_output=\"$l_output\\n   - home directories exist\" || l_output2=\"$l_output2$l_heout2\" [ -z \"$l_hoout2\" ] && l_output=\"$l_output\\n   - own their home directory\" || l_output2=\"$l_output2$l_hoout2\" [ -z \"$l_haout2\" ] && l_output=\"$l_output\\n   - home directories are mode: \\\"$l_max\\\" or more restrictive\" || l_output2=\"$l_output2$l_haout2\" [ -n \"$l_output\" ] && l_output=\"  - All local interactive users:$l_output\" if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured * :\\n$l_output\" fi }",
    "remediation": "If a local interactive users' home directory is undefined and/or doesn't exist, follow local site policy and perform one of the following: • Lock the user account • Remove the user from the system • create a directory for the user. If undefined, edit /etc/passwd and add the absolute path to the directory to the last field of the user. Run the following script to: • Remove excessive permissions from local interactive users home directories • Update the home directory's owner  #!/usr/bin/env bash { l_output2=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" unset a_uarr && a_uarr=() # Clear and initialize array while read -r l_epu l_eph; do # Populate array with users and user home location a_uarr+=(\"$l_epu $l_eph\") done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\" l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n  ** INFO **\\n  - \\\"$l_asize\\\" Local interactive users found on the system\\n  - This may be a long running process\\n\" while read -r l_user l_home; do if [ -d \"$l_home\" ]; then l_mask='0027' l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" while read -r l_own l_mode; do if [ \"$l_user\" != \"$l_own\" ]; then l_output2=\"$l_output2\\n  - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\\n  -  changing ownership to: \\\"$l_user\\\"\\n\" chown \"$l_user\" \"$l_home\" fi if [ $(( $l_mode & $l_mask )) -gt 0 ]; then l_output2=\"$l_output2\\n  - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\\n  - removing excess permissions\\n\" chmod g-w,o-rwx \"$l_home\" fi done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\" else l_output2=\"$l_output2\\n  - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\\n  -  Please create a home in accordance with local site policy\" fi done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\" if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \" - No modification needed to local interactive users home directories\" else echo -e \"\\n$l_output2\" fi } References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "os_user_home_directory_exists",
      "os_user_home_directory_secure_permissions",
      "os_user_home_directory_defined_in_passwd",
      "os_user_home_directory_valid_path",
      "os_user_home_directory_ownership_correct",
      "os_user_home_directory_no_world_writable",
      "os_user_home_directory_no_group_writable",
      "os_user_home_directory_no_other_writable"
    ]
  },
  {
    "id": "6.2.12",
    "title": "Ensure local interactive user dot files access is configured",
    "assessment": "Automated",
    "description": "While the system administrator can establish secure permissions for users' \"dot\" files, the users can easily override these. • .forward file specifies an email address to forward the user's mail to. • .rhost file provides the \"remote authentication\" database for the rcp, rlogin, and rsh commands and the rcmd() function. These files bypass the standard password-based user authentication mechanism. They specify remote hosts and users that are considered trusted (i.e. are allowed to access the local system without supplying a password) • .netrc file contains data for logging into a remote host or passing authentication to an API. • .bash_history file keeps track of the user’s last 500 commands.",
    "rationale": "User configuration files with excessive or incorrect access may enable malicious users to steal or modify other users' data or to gain another user's system privileges.",
    "audit": "Run the following script to verify local interactive user dot files: • Don't include .forward, .rhost, or .netrc files • Are mode 0644 or more restrictive • Are owned by the local interactive user • Are group owned by the user's primary group • .bash_history is mode 0600 or more restrictive Note: If a .netrc file is required, and follows local site policy, it should have permissions of 600 or more restrictive.  #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_output4=\"\" l_bf=\"\" l_df=\"\" l_nf=\"\" l_hf=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" unset a_uarr && a_uarr=() # Clear and initialize array while read -r l_epu l_eph; do # Populate array with users and user home location [[ -n \"$l_epu\" && -n \"$l_eph\" ]] && a_uarr+=(\"$l_epu $l_eph\") done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\" l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding l_maxsize=\"1000\" # Maximun number of local interactive users before warning (Default 1,000) [ \"$l_asize \" -gt \"$l_maxsize\" ] && echo -e \"\\n  ** INFO **\\n  - \\\"$l_asize\\\" Local interactive users found on the system\\n  - This may be a long running check\\n\" file_access_chk() { l_facout2=\"\" l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" if [ $(( $l_mode & $l_mask )) -gt 0 ]; then l_facout2=\"$l_facout2\\n  - File: \\\"$l_hdfile\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_max\\\" or more restrictive\" fi if [[ ! \"$l_owner\" =~ ($l_user) ]]; then l_facout2=\"$l_facout2\\n  - File: \\\"$l_hdfile\\\" owned by: \\\"$l_owner\\\" and should be owned by \\\"${l_user//|/ or }\\\"\" fi if [[ ! \"$l_gowner\" =~ ($l_group) ]]; then l_facout2=\"$l_facout2\\n  - File: \\\"$l_hdfile\\\" group owned by: \\\"$l_gowner\\\" and should be group owned by \\\"${l_group//|/ or }\\\"\" fi } while read -r l_user l_home; do l_fe=\"\" l_nout2=\"\" l_nout3=\"\" l_dfout2=\"\" l_hdout2=\"\" l_bhout2=\"\" if [ -d \"$l_home\" ]; then l_group=\"$(id -gn \"$l_user\" | xargs)\" l_group=\"${l_group// /|}\" while IFS= read -r -d $'\\0' l_hdfile; do while read -r l_mode l_owner l_gowner; do case \"$(basename \"$l_hdfile\")\" in .forward | .rhost ) l_fe=\"Y\" && l_bf=\"Y\" l_dfout2=\"$l_dfout2\\n  - File: \\\"$l_hdfile\\\" exists\" ;; .netrc ) l_mask='0177' file_access_chk if [ -n \"$l_facout2\" ]; then l_fe=\"Y\" && l_nf=\"Y\" l_nout2=\"$l_facout2\" else l_nout3=\"   - File: \\\"$l_hdfile\\\" exists\" fi ;;  .bash_history ) l_mask='0177' file_access_chk if [ -n \"$l_facout2\" ]; then l_fe=\"Y\" && l_hf=\"Y\" l_bhout2=\"$l_facout2\" fi ;; * ) l_mask='0133' file_access_chk if [ -n \"$l_facout2\" ]; then l_fe=\"Y\" && l_df=\"Y\" l_hdout2=\"$l_facout2\" fi ;; esac done <<< \"$(stat -Lc '%#a %U %G' \"$l_hdfile\")\" done < <(find \"$l_home\" -xdev -type f -name '.*' -print0) fi if [ \"$l_fe\" = \"Y\" ]; then l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\" [ -n \"$l_dfout2\" ] && l_output2=\"$l_output2$l_dfout2\" [ -n \"$l_nout2\" ] && l_output2=\"$l_output2$l_nout2\" [ -n \"$l_bhout2\" ] && l_output2=\"$l_output2$l_bhout2\" [ -n \"$l_hdout2\" ] && l_output2=\"$l_output2$l_hdout2\" fi [ -n \"$l_nout3\" ] && l_output3=\"$l_output3\\n  - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\\n$l_nout3\" done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\" unset a_uarr # Remove array [ -n \"$l_output3\" ] && l_output3=\" - ** Warning **\\n - \\\".netrc\\\" files should be removed unless deemed necessary\\n   and in accordance with local site policy:$l_output3\" [ -z \"$l_bf\" ] && l_output=\"$l_output\\n   - \\\".forward\\\" or \\\".rhost\\\" files\" [ -z \"$l_nf\" ] && l_output=\"$l_output\\n   - \\\".netrc\\\" files with incorrect access configured\" [ -z \"$l_hf\" ] && l_output=\"$l_output\\n   - \\\".bash_history\\\" files with incorrect access configured\" [ -z \"$l_df\" ] && l_output=\"$l_output\\n   - \\\"dot\\\" files with incorrect access configured\" [ -n \"$l_output\" ] && l_output=\"  - No local interactive users home directories contain:$l_output\" echo -e \"$l_output4\" if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" echo -e \"$l_output3\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\" echo -e \"$l_output3\\n\" [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\" fi }",
    "remediation": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy. The following script will: • remove excessive permissions on dot files within interactive users' home directories • change ownership of dot files within interactive users' home directories to the user • change group ownership of dot files within interactive users' home directories to the user's primary group • list .forward and .rhost files to be investigated and manually deleted  #!/usr/bin/env bash { l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" unset a_uarr && a_uarr=() # Clear and initialize array while read -r l_epu l_eph; do # Populate array with users and user home location [[ -n \"$l_epu\" && -n \"$l_eph\" ]] && a_uarr+=(\"$l_epu $l_eph\") done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\" l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding l_maxsize=\"1000\" # Maximum number of local interactive users before warning (Default 1,000) [ \"$l_asize \" -gt \"$l_maxsize\" ] && echo -e \"\\n  ** INFO **\\n  - \\\"$l_asize\\\" Local interactive users found on the system\\n  - This may be a long running check\\n\" file_access_fix() { l_facout2=\"\" l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\" if [ $(( $l_mode & $l_mask )) -gt 0 ]; then echo -e \"  - File: \\\"$l_hdfile\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_max\\\" or more restrictive\\n   - Changing to mode \\\"$l_max\\\"\" chmod \"$l_chp\" \"$l_hdfile\" fi if [[ ! \"$l_owner\" =~ ($l_user) ]]; then echo -e \"  - File: \\\"$l_hdfile\\\" owned by: \\\"$l_owner\\\" and should be owned by \\\"${l_user//|/ or }\\\"\\n   - Changing ownership to \\\"$l_user\\\"\" chown \"$l_user\" \"$l_hdfile\" fi if [[ ! \"$l_gowner\" =~ ($l_group) ]]; then echo -e \"  - File: \\\"$l_hdfile\\\" group owned by: \\\"$l_gowner\\\" and should be group owned by \\\"${l_group//|/ or }\\\"\\n   - Changing group ownership to \\\"$l_group\\\"\" chgrp \"$l_group\" \"$l_hdfile\" fi } while read -r l_user l_home; do if [ -d \"$l_home\" ]; then echo -e \"\\n - Checking user: \\\"$l_user\\\" home directory: \\\"$l_home\\\"\" l_group=\"$(id -gn \"$l_user\" | xargs)\" l_group=\"${l_group// /|}\" while IFS= read -r -d $'\\0' l_hdfile; do while read -r l_mode l_owner l_gowner; do case \"$(basename \"$l_hdfile\")\" in .forward | .rhost ) echo -e \"  - File: \\\"$l_hdfile\\\" exists\\n   - Please investigate and manually delete \\\"$l_hdfile\\\"\" ;; .netrc ) l_mask='0177' l_chp=\"u-x,go-rwx\" file_access_fix ;; .bash_history )  l_mask='0177' l_chp=\"u-x,go-rwx\" file_access_fix ;; * ) l_mask='0133' l_chp=\"u-x,go-wx\" file_access_fix ;; esac done <<< \"$(stat -Lc '%#a %U %G' \"$l_hdfile\")\" done < <(find \"$l_home\" -xdev -type f -name '.*' -print0) fi done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\" unset a_uarr # Remove array } References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server •  Level 1 - Workstation",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "linux_user_dot_files_restricted_access",
      "linux_user_forward_file_restricted_access",
      "linux_user_rhost_file_restricted_access",
      "linux_user_netrc_file_restricted_access",
      "linux_user_bash_history_restricted_access",
      "linux_user_dot_files_secure_permissions",
      "linux_user_forward_file_secure_permissions",
      "linux_user_rhost_file_secure_permissions",
      "linux_user_netrc_file_secure_permissions",
      "linux_user_bash_history_secure_permissions"
    ]
  }
]