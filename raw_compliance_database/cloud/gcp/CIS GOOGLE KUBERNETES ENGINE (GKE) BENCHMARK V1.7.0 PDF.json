[
  {
    "id": "3.1.1",
    "title": "Ensure that the proxy kubeconfig file permissions are set to 644 or more restrictive",
    "assessment": "Automated",
    "description": "If kube-proxy is running, and if it is configured by a kubeconfig file, ensure that the proxy kubeconfig file has permissions of 644 or more restrictive.",
    "rationale": "The kube-proxy kubeconfig file controls various parameters of the kube-proxy service on the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable only by the administrators on the system. Impact: Overly permissive file permissions increase security risk to the platform.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Click on the desired cluster to open the Details page, then click on the desired Node pool to open the Node pool Details page 3. Note the name of the desired node 4. Go to VM Instances by visiting https://console.cloud.google.com/compute/instances 5. Find the desired node and click on 'SSH' to open an SSH connection to the node. Using Command Line Method 1 SSH to the worker nodes To check to see if the Kubelet Service is running: sudo systemctl status kubelet The output should return Active: active (running) since.. Run the following command on each node to find the appropriate kubeconfig file: ps -ef | grep kubelet The output of the above command should return something similar to --kubeconfig /var/lib/kubelet/kubeconfig which is the location of the kubeconfig file. Run this command to obtain the kubeconfig file permissions: stat -c %a /var/lib/kubelet/kubeconfig The output of the above command gives you the kubeconfig file's permissions. Verify that if a file is specified and it exists, the permissions are 644 or more restrictive. Method 2 Create and Run a Privileged Pod. You will need to run a pod that is privileged enough to access the host's file system. This can be achieved by deploying a pod that uses the hostPath volume to mount the node's file system into the pod. Here's an example of a simple pod definition that mounts the root of the host to /host within the pod: apiVersion: v1 kind: Pod metadata: name: file-check spec: volumes: - name: host-root hostPath: path: / type: Directory containers: - name: nsenter image: busybox command: [\"sleep\", \"3600\"] volumeMounts: - name: host-root mountPath: /host securityContext: privileged: true Save this to a file (e.g., file-check-pod.yaml) and create the pod: kubectl apply -f file-check-pod.yaml Once the pod is running, you can exec into it to check file permissions on the node: kubectl exec -it file-check -- sh Now you are in a shell inside the pod, but you can access the node's file system through the /host directory and check the permission level of the file: ls -l /host/var/lib/kubelet/kubeconfig Verify that if a file is specified and it exists, the permissions are 644 or more restrictive.",
    "remediation": "Run the below command (based on the file location on your system) on the each worker node. For example, chmod 644 <proxy kubeconfig file> Default Value: The default permissions of the proxy kubeconfig file are 644. References: 1. https://kubernetes.io/docs/admin/kube-proxy/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks",
    "function_names": [
      "kubernetes_proxy_kubeconfig_file_permissions_restrictive",
      "kubernetes_proxy_kubeconfig_file_permissions_644_or_stricter",
      "kubernetes_proxy_kubeconfig_file_permissions_secure",
      "kubernetes_proxy_kubeconfig_file_permissions_compliant",
      "kubernetes_proxy_kubeconfig_file_permissions_cis_benchmark"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Overly permissive file permissions increase security risk to the platform.",
    "references": "1. https://kubernetes.io/docs/admin/kube-proxy/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks"
  },
  {
    "id": "3.1.2",
    "title": "Ensure that the proxy kubeconfig file ownership is set to root:root",
    "assessment": "Automated",
    "description": "If kube-proxy is running, ensure that the file ownership of its kubeconfig file is set to root:root.",
    "rationale": "The kubeconfig file for kube-proxy controls various parameters for the kube-proxy service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root. Impact: Overly permissive file access increases the security risk to the platform.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Click on the desired cluster to open the Details page, then click on the desired Node pool to open the Node pool Details page 3. Note the name of the desired node 4. Go to VM Instances by visiting https://console.cloud.google.com/compute/instances 5. Find the desired node and click on 'SSH' to open an SSH connection to the node. Using Command Line Method 1 SSH to the worker nodes To check to see if the Kubelet Service is running: sudo systemctl status kubelet The output should return Active: active (running) since.. Run the following command on each node to find the appropriate kubeconfig file: ps -ef | grep kubelet The output of the above command should return something similar to --kubeconfig /var/lib/kubelet/kubeconfig which is the location of the kubeconfig file. Run this command to obtain the kubeconfig file ownership: stat -c %U:%G /var/lib/kubelet/kubeconfig The output of the above command gives you the kubeconfig file's ownership. Verify that the ownership is set to root:root. Method 2 Create and Run a Privileged Pod. You will need to run a pod that is privileged enough to access the host's file system. This can be achieved by deploying a pod that uses the hostPath volume to mount the node's file system into the pod. Here's an example of a simple pod definition that mounts the root of the host to /host within the pod: apiVersion: v1 kind: Pod metadata: name: file-check spec: volumes: - name: host-root hostPath: path: / type: Directory containers: - name: nsenter image: busybox command: [\"sleep\", \"3600\"] volumeMounts: - name: host-root mountPath: /host securityContext: privileged: true Save this to a file (e.g., file-check-pod.yaml) and create the pod: kubectl apply -f file-check-pod.yaml Once the pod is running, you can exec into it to check file ownership on the node: kubectl exec -it file-check -- sh Now you are in a shell inside the pod, but you can access the node's file system through the /host directory and check the ownership of the file: ls -l /host/var/lib/kubelet/kubeconfig The output of the above command gives you the kubeconfig file's ownership. Verify that the ownership is set to root:root.",
    "remediation": "Run the below command (based on the file location on your system) on each worker node. For example, chown root:root <proxy kubeconfig file> Default Value: The default ownership of the proxy kubeconfig file is root:root. References: 1. https://kubernetes.io/docs/admin/kube-proxy/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks",
    "function_names": [
      "kubernetes_proxy_kubeconfig_root_ownership",
      "kubernetes_proxy_kubeconfig_file_root_owner",
      "kubernetes_kubeconfig_proxy_root_ownership",
      "kubernetes_proxy_config_root_ownership",
      "kubernetes_proxy_kubeconfig_secure_ownership"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Overly permissive file access increases the security risk to the platform.",
    "references": "1. https://kubernetes.io/docs/admin/kube-proxy/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks"
  },
  {
    "id": "3.1.3",
    "title": "Ensure that the kubelet configuration file has permissions set to 644",
    "assessment": "Automated",
    "description": "Ensure that if the kubelet configuration file exists, it has permissions of 644.",
    "rationale": "The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file exists, you should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system. Impact: Overly permissive file access increases the security risk to the platform.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Click on the desired cluster to open the Details page, then click on the desired Node pool to open the Node pool Details page 3. Note the name of the desired node 4. Go to VM Instances by visiting https://console.cloud.google.com/compute/instances 5. Find the desired node and click on 'SSH' to open an SSH connection to the node. Using Command Line Method 1 First, SSH to the relevant worker node: To check to see if the Kubelet Service is running: sudo systemctl status kubelet The output should return Active: active (running) since.. Run the following command on each node to find the appropriate Kubelet config file: ps -ef | grep kubelet The output of the above command should return something similar to --config /etc/kubernetes/kubelet-config.yaml which is the location of the Kubelet config file. Run the following command: stat -c %a /etc/kubernetes/kubelet-config.yaml The output of the above command is the Kubelet config file's permissions. Verify that the permissions are 644 or more restrictive. Method 2 Create and Run a Privileged Pod. You will need to run a pod that is privileged enough to access the host's file system. This can be achieved by deploying a pod that uses the hostPath volume to mount the node's file system into the pod. Here's an example of a simple pod definition that mounts the root of the host to /host within the pod: apiVersion: v1 kind: Pod metadata: name: file-check spec: volumes: - name: host-root hostPath: path: / type: Directory containers: - name: nsenter image: busybox command: [\"sleep\", \"3600\"] volumeMounts: - name: host-root mountPath: /host securityContext: privileged: true Save this to a file (e.g., file-check-pod.yaml) and create the pod: kubectl apply -f file-check-pod.yaml Once the pod is running, you can exec into it to check file permissions on the node: kubectl exec -it file-check -- sh Now you are in a shell inside the pod, but you can access the node's file system through the /host directory and check the permission level of the file: ls -l /host/etc/kubernetes/kubelet-config.yaml Verify that if a file is specified and it exists, the permissions are 644 or more restrictive.",
    "remediation": "Run the following command (using the kubelet config file location): chmod 644 <kubelet_config_file> Default Value: The default permissions for the kubelet configuration file are 600. References: 1. https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks",
    "function_names": [
      "kubernetes_kubelet_config_file_permissions_644",
      "kubernetes_kubelet_config_file_permissions_secure",
      "kubernetes_kubelet_config_file_permissions_restricted",
      "kubernetes_kubelet_config_file_permissions_cis_compliant",
      "kubernetes_kubelet_config_file_permissions_read_only_non_owner"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Overly permissive file access increases the security risk to the platform.",
    "references": "1. https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks"
  },
  {
    "id": "3.1.4",
    "title": "Ensure that the kubelet configuration file ownership is set to root:root",
    "assessment": "Automated",
    "description": "Ensure that if the kubelet configuration file exists, it is owned by root:root.",
    "rationale": "The kubelet reads various parameters, including security settings, from a config file specified by the --config argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be owned by root:root. Impact: Overly permissive file access increases the security risk to the platform.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Click on the desired cluster to open the Details page, then click on the desired Node pool to open the Node pool Details page 3. Note the name of the desired node 4. Go to VM Instances by visiting https://console.cloud.google.com/compute/instances 5. Find the desired node and click on 'SSH' to open an SSH connection to the node. Using Command Line Method 1 First, SSH to the relevant worker node: To check to see if the Kubelet Service is running: sudo systemctl status kubelet The output should return Active: active (running) since.. Run the following command on each node to find the appropriate Kubelet config file: ps -ef | grep kubelet The output of the above command should return something similar to --config /etc/kubernetes/kubelet/kubelet-config.yaml which is the location of the Kubelet config file. Run the following command: stat -c %U:%G /etc/kubernetes/kubelet/kubelet-config.yaml The output of the above command is the Kubelet config file's ownership. Verify that the ownership is set to root:root Method 2 Create and Run a Privileged Pod. You will need to run a pod that is privileged enough to access the host's file system. This can be achieved by deploying a pod that uses the hostPath volume to mount the node's file system into the pod. Here's an example of a simple pod definition that mounts the root of the host to /host within the pod: apiVersion: v1 kind: Pod metadata: name: file-check spec: volumes: - name: host-root hostPath: path: / type: Directory containers: - name: nsenter image: busybox command: [\"sleep\", \"3600\"] volumeMounts: - name: host-root mountPath: /host securityContext: privileged: true Save this to a file (e.g., file-check-pod.yaml) and create the pod: kubectl apply -f file-check-pod.yaml Once the pod is running, you can exec into it to check file ownership on the node: kubectl exec -it file-check -- sh Now you are in a shell inside the pod, but you can access the node's file system through the /host directory and check the ownership of the file: ls -l /etc/kubernetes/kubelet/kubelet-config.yaml The output of the above command gives you the file's ownership. Verify that the ownership is set to root:root.",
    "remediation": "Run the following command (using the config file location identified in the Audit step): chown root:root <kubelet_config_file> Default Value: The default file ownership is root:root. References: 1. https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks",
    "function_names": [
      "kubernetes_kubelet_config_file_ownership_root",
      "kubernetes_kubelet_config_file_owner_root",
      "kubernetes_kubelet_config_file_group_root",
      "kubernetes_kubelet_config_file_permissions_root",
      "kubernetes_kubelet_config_file_secure_ownership"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Overly permissive file access increases the security risk to the platform.",
    "references": "1. https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cis-benchmarks"
  },
  {
    "id": "3.2.1",
    "title": "Ensure that the Anonymous Auth is Not Enabled Draft",
    "assessment": "Automated",
    "description": "Disable anonymous requests to the Kubelet server.",
    "rationale": "When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests. Impact: Anonymous requests will be rejected.",
    "audit": "Audit Method 1: Kubelets can accept configuration via a configuration file and in some cases via command line arguments. It is important to note that parameters provided as command line arguments will override their counterpart parameters in the configuration file (see -- config details in the Kubelet CLI Reference for more info, where you can also find out which configuration parameters can be supplied as a command line argument). With this in mind, it is important to check for the existence of command line arguments as well as configuration file entries when auditing Kubelet configuration. Firstly, SSH to each node and execute the following command to find the Kubelet process: ps -ef | grep kubelet The output of the above command provides details of the active Kubelet process, from which we can see the command line arguments provided to the process. Also note the location of the configuration file, provided with the --config argument, as this will be needed to verify configuration. The file can be viewed with a command such as more or less, like so: sudo less /path/to/kubelet-config.json Verify that Anonymous Authentication is not enabled. This may be configured as a command line argument to the kubelet service with --anonymous-auth=false or in the kubelet configuration file via \"authentication\": { \"anonymous\": { \"enabled\": false }. Audit Method 2: It is also possible to review the running configuration of a Kubelet via the /configz endpoint of the Kubernetes API. This can be achieved using kubectl to proxy your requests to the API. Discover all nodes in your cluster by running the following command: kubectl get nodes Next, initiate a proxy with kubectl on a local port of your choice. In this example we will use 8080: kubectl proxy --port=8080 With this running, in a separate terminal run the following command for each node: export NODE_NAME=my-node-name curl http://localhost:8080/api/v1/nodes/${NODE_NAME}/proxy/configz The curl command will return the API response which will be a JSON formatted string representing the Kubelet configuration. Verify that Anonymous Authentication is not enabled checking that \"authentication\": { \"anonymous\": { \"enabled\": false } is in the API response.",
    "remediation": "Remediation Method 1: If configuring via the Kubelet config file, you first need to locate the file. To do this, SSH to each node and execute the following command to find the kubelet process: ps -ef | grep kubelet The output of the above command provides details of the active kubelet process, from which we can see the location of the configuration file provided to the kubelet service with the --config argument. The file can be viewed with a command such as more or less, like so: sudo less /path/to/kubelet-config.json Disable Anonymous Authentication by setting the following parameter: \"authentication\": { \"anonymous\": { \"enabled\": false } } Remediation Method 2: If using executable arguments, edit the kubelet service file on each worker node and ensure the below parameters are part of the KUBELET_ARGS variable string. For systems using systemd, such as the Amazon EKS Optimised Amazon Linux or Bottlerocket AMIs, then this file can be found at /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf. Otherwise, you may need to look up documentation for your chosen operating system to determine which service manager is configured: --anonymous-auth=false For Both Remediation Steps: Based on your system, restart the kubelet service and check the service status. The following example is for operating systems using systemd, such as the Amazon EKS Optimised Amazon Linux or Bottlerocket AMIs, and invokes the systemctl command. If systemctl is not available then you will need to look up documentation for your chosen operating system to determine which service manager is configured: systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ 2. https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn- authz/#kubelet-authentication 3. https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/",
    "function_names": [
      "kubernetes_kubelet_anonymous_auth_disabled",
      "kubernetes_kubelet_anonymous_requests_blocked",
      "kubernetes_kubelet_auth_enabled",
      "kubernetes_kubelet_unauthenticated_access_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Anonymous requests will be rejected.",
    "references": "1. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ 2. https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn- authz/#kubelet-authentication 3. https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/"
  },
  {
    "id": "3.2.2",
    "title": "Ensure that the --authorization-mode argument is not set to AlwaysAllow",
    "assessment": "Automated",
    "description": "Do not allow all requests. Enable explicit authorization.",
    "rationale": "Kubelets can be configured to allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests. Impact: Unauthorized requests will be denied.",
    "audit": "Audit Method 1: Kubelets can accept configuration via a configuration file and in some cases via command line arguments. It is important to note that parameters provided as command line arguments will override their counterpart parameters in the configuration file (see -- config details in the Kubelet CLI Reference for more info, where you can also find out which configuration parameters can be supplied as a command line argument). With this in mind, it is important to check for the existence of command line arguments as well as configuration file entries when auditing Kubelet configuration. Firstly, SSH to each node and execute the following command to find the Kubelet process: ps -ef | grep kubelet The output of the above command provides details of the active Kubelet process, from which we can see the command line arguments provided to the process. Also note the location of the configuration file, provided with the --config argument, as this will be needed to verify configuration. The file can be viewed with a command such as more or less, like so: sudo less /path/to/kubelet-config.json Verify that Webhook Authentication is enabled. This may be enabled as a command line argument to the kubelet service with --authentication-token-webhook or in the kubelet configuration file via \"authentication\": { \"webhook\": { \"enabled\": true } }. Verify that the Authorization Mode is set to WebHook. This may be set as a command line argument to the kubelet service with --authorization-mode=Webhook or in the configuration file via \"authorization\": { \"mode\": \"Webhook }. Audit Method 2: It is also possible to review the running configuration of a Kubelet via the /configz endpoint of the Kubernetes API. This can be achieved using kubectl to proxy your requests to the API. Discover all nodes in your cluster by running the following command: kubectl get nodes Next, initiate a proxy with kubectl on a local port of your choice. In this example we will use 8080: kubectl proxy --port=8080 With this running, in a separate terminal run the following command for each node: export NODE_NAME=my-node-name curl http://localhost:8080/api/v1/nodes/${NODE_NAME}/proxy/configz The curl command will return the API response which will be a JSON formatted string representing the Kubelet configuration. Verify that Webhook Authentication is enabled with \"authentication\": { \"webhook\": { \"enabled\": true } } in the API response. Verify that the Authorization Mode is set to WebHook with \"authorization\": { \"mode\": \"Webhook } in the API response.",
    "remediation": "Remediation Method 1: If configuring via the Kubelet config file, you first need to locate the file. To do this, SSH to each node and execute the following command to find the kubelet process: ps -ef | grep kubelet The output of the above command provides details of the active kubelet process, from which we can see the location of the configuration file provided to the kubelet service with the --config argument. The file can be viewed with a command such as more or less, like so: sudo less /path/to/kubelet-config.json Enable Webhook Authentication by setting the following parameter: \"authentication\": { \"webhook\": { \"enabled\": true } } Next, set the Authorization Mode to Webhook by setting the following parameter: \"authorization\": { \"mode\": \"Webhook } Finer detail of the authentication and authorization fields can be found in the Kubelet Configuration documentation. Remediation Method 2: If using executable arguments, edit the kubelet service file on each worker node and ensure the below parameters are part of the KUBELET_ARGS variable string. For systems using systemd, such as the Amazon EKS Optimised Amazon Linux or Bottlerocket AMIs, then this file can be found at /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf. Otherwise, you may need to look up documentation for your chosen operating system to determine which service manager is configured: --authentication-token-webhook --authorization-mode=Webhook For Both Remediation Steps: Based on your system, restart the kubelet service and check the service status. The following example is for operating systems using systemd, such as the Amazon EKS Optimised Amazon Linux or Bottlerocket AMIs, and invokes the systemctl command. If systemctl is not available then you will need to look up documentation for your chosen operating system to determine which service manager is configured: systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ 2. https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn- authz/#kubelet-authentication 3. https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/",
    "function_names": [
      "eks_cluster_authorization_mode_always_allow_disabled",
      "eks_cluster_authorization_mode_explicit_required",
      "eks_cluster_authorization_mode_restricted",
      "eks_cluster_authorization_mode_secure",
      "eks_cluster_authorization_mode_not_always_allow"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Unauthorized requests will be denied.",
    "references": "1. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ 2. https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn- authz/#kubelet-authentication 3. https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/"
  },
  {
    "id": "3.2.3",
    "title": "Ensure that a Client CA File is Configured",
    "assessment": "Automated",
    "description": "Enable Kubelet authentication using certificates.",
    "rationale": "The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet\u2019s port-forwarding functionality. These connections terminate at the kubelet\u2019s HTTPS endpoint. By default, the apiserver does not verify the kubelet\u2019s serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests. Impact: You require TLS to be configured on apiserver as well as kubelets.",
    "audit": "Audit Method 1: Kubelets can accept configuration via a configuration file and in some cases via command line arguments. It is important to note that parameters provided as command line arguments will override their counterpart parameters in the configuration file (see -- config details in the Kubelet CLI Reference for more info, where you can also find out which configuration parameters can be supplied as a command line argument). With this in mind, it is important to check for the existence of command line arguments as well as configuration file entries when auditing Kubelet configuration. Firstly, SSH to each node and execute the following command to find the Kubelet process: ps -ef | grep kubelet The output of the above command provides details of the active Kubelet process, from which we can see the command line arguments provided to the process. Also note the location of the configuration file, provided with the --config argument, as this will be needed to verify configuration. The file can be viewed with a command such as more or less, like so: sudo less /path/to/kubelet-config.json Verify that a client certificate authority file is configured. This may be configured using a command line argument to the kubelet service with --client-ca-file or in the kubelet configuration file via \"authentication\": { \"x509\": {\"clientCAFile\": <path/to/client-ca-file> } }\". Audit Method 2: It is also possible to review the running configuration of a Kubelet via the /configz endpoint of the Kubernetes API. This can be achieved using kubectl to proxy your requests to the API. Discover all nodes in your cluster by running the following command: kubectl get nodes Next, initiate a proxy with kubectl on a local port of your choice. In this example we will use 8080: kubectl proxy --port=8080 With this running, in a separate terminal run the following command for each node: export NODE_NAME=my-node-name curl http://localhost:8080/api/v1/nodes/${NODE_NAME}/proxy/configz The curl command will return the API response which will be a JSON formatted string representing the Kubelet configuration. Verify that a client certificate authority file is configured with \"authentication\": { \"x509\": {\"clientCAFile\": <path/to/client-ca-file> } }\" in the API response.",
    "remediation": "Remediation Method 1: If configuring via the Kubelet config file, you first need to locate the file. To do this, SSH to each node and execute the following command to find the kubelet process: ps -ef | grep kubelet The output of the above command provides details of the active kubelet process, from which we can see the location of the configuration file provided to the kubelet service with the --config argument. The file can be viewed with a command such as more or less, like so: sudo less /path/to/kubelet-config.json Configure the client certificate authority file by setting the following parameter appropriately: \"authentication\": { \"x509\": {\"clientCAFile\": <path/to/client-ca-file> } }\" Remediation Method 2: If using executable arguments, edit the kubelet service file on each worker node and ensure the below parameters are part of the KUBELET_ARGS variable string. For systems using systemd, such as the Amazon EKS Optimised Amazon Linux or Bottlerocket AMIs, then this file can be found at /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf. Otherwise, you may need to look up documentation for your chosen operating system to determine which service manager is configured: --client-ca-file=<path/to/client-ca-file> For Both Remediation Steps: Based on your system, restart the kubelet service and check the service status. The following example is for operating systems using systemd, such as the Amazon EKS Optimised Amazon Linux or Bottlerocket AMIs, and invokes the systemctl command. If systemctl is not available then you will need to look up documentation for your chosen operating system to determine which service manager is configured: systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ 2. https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn- authz/#kubelet-authentication 3. https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/",
    "function_names": [
      "kubernetes_kubelet_client_ca_file_configured",
      "kubernetes_kubelet_authentication_certificates_enabled",
      "kubernetes_kubelet_tls_client_ca_configured",
      "kubernetes_kubelet_certificate_auth_enabled",
      "kubernetes_kubelet_client_ca_auth_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You require TLS to be configured on apiserver as well as kubelets.",
    "references": "1. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/ 2. https://kubernetes.io/docs/reference/access-authn-authz/kubelet-authn- authz/#kubelet-authentication 3. https://kubernetes.io/docs/reference/config-api/kubelet-config.v1beta1/"
  },
  {
    "id": "3.2.4",
    "title": "Ensure that the --read-only-port is disabled",
    "assessment": "Automated",
    "description": "Disable the read-only port.",
    "rationale": "The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster. Impact: Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.",
    "audit": "If using a Kubelet configuration file, check that there is an entry for authentication: anonymous: enabled set to 0. First, SSH to the relevant node: Run the following command on each node to find the appropriate Kubelet config file: ps -ef | grep kubelet The output of the above command should return something similar to --config /etc/kubernetes/kubelet/kubelet-config.json which is the location of the Kubelet config file. Open the Kubelet config file: cat /etc/kubernetes/kubelet/kubelet-config.json Verify that the --read-only-port argument exists and is set to 0. If the --read-only-port argument is not present, check that there is a Kubelet config file specified by --config. Check that if there is a readOnlyPort entry in the file, it is set to 0.",
    "remediation": "If modifying the Kubelet config file, edit the kubelet-config.json file /etc/kubernetes/kubelet/kubelet-config.json and set the below parameter to 0 \"readOnlyPort\": 0 If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf on each worker node and add the below parameter at the end of the KUBELET_ARGS variable string. --read-only-port=0 For each remediation: Based on your system, restart the kubelet service and check status systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/admin/kubelet/",
    "function_names": [
      "redis_instance_read_only_port_disabled",
      "redis_configuration_read_only_port_disabled",
      "redis_cluster_read_only_port_disabled",
      "redis_server_read_only_port_disabled",
      "redis_deployment_read_only_port_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Removal of the read-only port will require that any service which made use of it will need to be re-configured to use the main Kubelet API.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/"
  },
  {
    "id": "3.2.5",
    "title": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0",
    "assessment": "Automated",
    "description": "Do not disable timeouts on streaming connections.",
    "rationale": "Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports. Note: By default, --streaming-connection-idle-timeout is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases. Impact: Long-lived connections could be interrupted.",
    "audit": "Audit Method 1: First, SSH to the relevant node: Run the following command on each node to find the running kubelet process: ps -ef | grep kubelet If the command line for the process includes the argument streaming-connection- idle-timeout verify that it is not set to 0. If the streaming-connection-idle-timeout argument is not present in the output of the above command, refer instead to the config argument that specifies the location of the Kubelet config file e.g. --config /etc/kubernetes/kubelet-config.yaml. Open the Kubelet config file: cat /etc/kubernetes/kubelet-config.yaml Verify that the streamingConnectionIdleTimeout argument is not set to 0. Audit Method 2: If using the api configz endpoint consider searching for the status of \"streamingConnectionIdleTimeout\":\"4h0m0s\" by extracting the live configuration from the nodes running kubelet. Set the local proxy port and the following variables and provide proxy port number and node name; HOSTNAME_PORT=\"localhost-and-port-number\" NODE_NAME=\"The-Name-Of-Node-To-Extract-Configuration\" from the output of \"kubectl get nodes\" kubectl proxy --port=8001 & export HOSTNAME_PORT=localhost:8001 (example host and port number) export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (example node name from \"kubectl get nodes\") curl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\"",
    "remediation": "Remediation Method 1: If modifying the Kubelet config file, edit the kubelet-config.json file /etc/kubernetes/kubelet-config.yaml and set the below parameter to a non-zero value in the format of #h#m#s \"streamingConnectionIdleTimeout\": \"4h0m0s\" You should ensure that the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf does not specify a --streaming-connection-idle-timeout argument because it would override the Kubelet config file. Remediation Method 2: If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf on each worker node and add the below parameter at the end of the KUBELET_ARGS variable string. --streaming-connection-idle-timeout=4h0m0s Remediation Method 3: If using the api configz endpoint consider searching for the status of \"streamingConnectionIdleTimeout\": by extracting the live configuration from the nodes running kubelet. **See detailed step-by-step configmap procedures in Reconfigure a Node's Kubelet in a Live Cluster, and then rerun the curl statement from audit process to check for kubelet configuration changes kubectl proxy --port=8001 & export HOSTNAME_PORT=localhost:8001 (example host and port number) export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (example node name from \"kubectl get nodes\") curl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\" For all three remediations: Based on your system, restart the kubelet service and check status systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/pull/18552",
    "function_names": [
      "kubernetes_api_server_streaming_connection_timeout_enabled",
      "kubernetes_api_server_streaming_connection_timeout_not_disabled",
      "kubernetes_api_server_streaming_connection_timeout_configured",
      "kubernetes_api_server_streaming_connection_timeout_non_zero",
      "kubernetes_api_server_streaming_connection_timeout_valid"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Long-lived connections could be interrupted.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/pull/18552"
  },
  {
    "id": "3.2.6",
    "title": "Ensure that the --make-iptables-util-chains argument is set to true",
    "assessment": "Automated",
    "description": "Allow Kubelet to manage iptables.",
    "rationale": "Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open. Impact: Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.",
    "audit": "Audit Method 1: First, SSH to each node: Run the following command on each node to find the Kubelet process: ps -ef | grep kubelet If the output of the above command includes the argument --make-iptables-util- chains then verify it is set to true. If the --make-iptables-util-chains argument does not exist, and there is a Kubelet config file specified by --config, verify that the file does not set makeIPTablesUtilChains to false. Audit Method 2: If using the api configz endpoint consider searching for the status of authentication... \"makeIPTablesUtilChains.:true by extracting the live configuration from the nodes running kubelet. Set the local proxy port and the following variables and provide proxy port number and node name; HOSTNAME_PORT=\"localhost-and-port-number\" NODE_NAME=\"The-Name-Of-Node-To-Extract-Configuration\" from the output of \"kubectl get nodes\" kubectl proxy --port=8001 & export HOSTNAME_PORT=localhost:8001 (example host and port number) export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (example node name from \"kubectl get nodes\") curl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\"",
    "remediation": "Remediation Method 1: If modifying the Kubelet config file, edit the kubelet-config.json file /etc/kubernetes/kubelet/kubelet-config.json and set the below parameter to true \"makeIPTablesUtilChains\": true Ensure that /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf does not set the --make-iptables-util-chains argument because that would override your Kubelet config file. Remediation Method 2: If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf on each worker node and add the below parameter at the end of the KUBELET_ARGS variable string. --make-iptables-util-chains:true Remediation Method 3: If using the api configz endpoint consider searching for the status of \"makeIPTablesUtilChains.: true by extracting the live configuration from the nodes running kubelet. **See detailed step-by-step configmap procedures in Reconfigure a Node's Kubelet in a Live Cluster, and then rerun the curl statement from audit process to check for kubelet configuration changes kubectl proxy --port=8001 & export HOSTNAME_PORT=localhost:8001 (example host and port number) export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (example node name from \"kubectl get nodes\") curl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\" For all three remediations: Based on your system, restart the kubelet service and check status systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/",
    "function_names": [
      "kubernetes_kubelet_iptables_util_chains_enabled",
      "kubernetes_kubelet_iptables_management_enabled",
      "kubernetes_kubelet_iptables_chains_configured",
      "kubernetes_kubelet_iptables_util_chains_set",
      "kubernetes_kubelet_iptables_util_chains_true"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/"
  },
  {
    "id": "3.2.7",
    "title": "Ensure that the --eventRecordQPS argument is set to 0 or a level which ensures appropriate event capture",
    "assessment": "Automated",
    "description": "Security relevant information should be captured. The eventRecordQPS on the Kubelet configuration can be used to limit the rate at which events are gathered and sets the maximum event creations per second. Setting this too low could result in relevant events not being logged, however the unlimited setting of 0 could result in a denial of service on the kubelet.",
    "rationale": "It is important to capture all events and not restrict event creation. Events are an important source of security information and analytics that ensure that your environment is consistently monitored using the event data. Impact: Setting this parameter to 0 could result in a denial of service condition due to excessive events being created. The cluster's event processing and storage systems should be scaled to handle expected event loads.",
    "audit": "Run the following command on each node: sudo grep \"eventRecordQPS\" /etc/systemd/system/kubelet.service.d/10- kubeadm.conf Review the value set for the argument and determine whether this has been set to an appropriate level for the cluster. If the argument does not exist, check that there is a Kubelet config file specified by -- config and review the value in this location.",
    "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level. If using command line arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubeadm.conf on each worker node and set the below parameter in KUBELET_SYSTEM_PODS_ARGS variable. Based on your system, restart the kubelet service. For example: systemctl daemon-reload systemctl restart kubelet.service Default Value: See the GKE documentation for the default value. References: 1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/apis/kubeletco nfig/v1beta1/types.go 3. https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/",
    "function_names": [
      "kubernetes_kubelet_event_record_qps_unlimited",
      "kubernetes_kubelet_event_record_qps_appropriate_level",
      "kubernetes_kubelet_event_capture_rate_limited",
      "kubernetes_kubelet_event_logging_rate_configured",
      "kubernetes_kubelet_event_record_qps_nonzero",
      "kubernetes_kubelet_event_record_qps_secure_threshold",
      "kubernetes_kubelet_event_capture_rate_optimized",
      "kubernetes_kubelet_event_logging_rate_protected"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Setting this parameter to 0 could result in a denial of service condition due to excessive events being created. The cluster's event processing and storage systems should be scaled to handle expected event loads.",
    "references": "1. https://kubernetes.io/docs/admin/kubelet/ 2. https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/apis/kubeletco nfig/v1beta1/types.go 3. https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/"
  },
  {
    "id": "3.2.8",
    "title": "Ensure that the --rotate-certificates argument is not present or is set to true",
    "assessment": "Automated",
    "description": "Enable kubelet client certificate rotation.",
    "rationale": "The --rotate-certificates setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire. This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA (Confidentiality, Integrity, and Availability) security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to implement rotation yourself. Note: This feature also requires the RotateKubeletClientCertificate feature gate to be enabled. Impact: None",
    "audit": "Audit Method 1: SSH to each node and run the following command to find the Kubelet process: ps -ef | grep kubelet If the output of the command above includes the --RotateCertificate executable argument, verify that it is set to true. If the output of the command above does not include the --RotateCertificate executable argument then check the Kubelet config file. The output of the above command should return something similar to --config /etc/kubernetes/kubelet/kubelet-config.json which is the location of the Kubelet config file. Open the Kubelet config file: cat /etc/kubernetes/kubelet-config.yaml Verify that the RotateCertificate argument is not present, or is set to true.",
    "remediation": "Remediation Method 1: If modifying the Kubelet config file, edit the kubelet-config.yaml file /etc/kubernetes/kubelet/kubelet-config.yaml and set the below parameter to true \"RotateCertificate\":true Additionally, ensure that the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf does not set the -- RotateCertificate executable argument to false because this would override the Kubelet config file. Remediation Method 2: If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf on each worker node and add the below parameter at the end of the KUBELET_ARGS variable string. --RotateCertificate=true Default Value: See the GKE documentation for the default value. References: 1. https://github.com/kubernetes/kubernetes/pull/41912 2. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls- bootstrapping/#kubelet-configuration 3. https://kubernetes.io/docs/imported/release/notes/ 4. https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/ 5. https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/",
    "function_names": [
      "kubernetes_kubelet_certificate_rotation_enabled",
      "kubernetes_kubelet_rotate_certificates_set_true",
      "kubernetes_kubelet_no_rotate_certificates_disabled",
      "kubernetes_kubelet_certificate_rotation_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None",
    "references": "1. https://github.com/kubernetes/kubernetes/pull/41912 2. https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls- bootstrapping/#kubelet-configuration 3. https://kubernetes.io/docs/imported/release/notes/ 4. https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/ 5. https://kubernetes.io/docs/tasks/administer-cluster/reconfigure-kubelet/"
  },
  {
    "id": "3.2.9",
    "title": "Ensure that the RotateKubeletServerCertificate argument is set to true",
    "assessment": "Automated",
    "description": "Enable kubelet server certificate rotation.",
    "rationale": "RotateKubeletServerCertificate causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA (Confidentiality, Integrity, and Availability) security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to implement rotation yourself. Impact: None",
    "audit": "Audit Method 1: First, SSH to each node: Run the following command on each node to find the Kubelet process: ps -ef | grep kubelet If the output of the command above includes the --rotate-kubelet-server- certificate executable argument verify that it is set to true. If the process does not have the --rotate-kubelet-server-certificate executable argument then check the Kubelet config file. The output of the above command should return something similar to --config /etc/kubernetes/kubelet-config.yaml which is the location of the Kubelet config file. Open the Kubelet config file: cat /etc/kubernetes/kubelet-config.yaml Verify that RotateKubeletServerCertificate argument exists in the featureGates section and is set to true. Audit Method 2: If using the api configz endpoint consider searching for the status of \"RotateKubeletServerCertificate\":true by extracting the live configuration from the nodes running kubelet. Set the local proxy port and the following variables and provide proxy port number and node name; HOSTNAME_PORT=\"localhost-and-port-number\" NODE_NAME=\"The-Name-Of-Node-To-Extract-Configuration\" from the output of \"kubectl get nodes\" kubectl proxy --port=8001 & export HOSTNAME_PORT=localhost:8001 (example host and port number) export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (example node name from \"kubectl get nodes\") curl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\"",
    "remediation": "Remediation Method 1: If modifying the Kubelet config file, edit the kubelet-config.json file /etc/kubernetes/kubelet-config.yaml and set the below parameter to true \"featureGates\": { \"RotateKubeletServerCertificate\":true }, Additionally, ensure that the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf does not set the --rotate-kubelet-server-certificate executable argument to false because this would override the Kubelet config file. Remediation Method 2: If using executable arguments, edit the kubelet service file /etc/systemd/system/kubelet.service.d/10-kubelet-args.conf on each worker node and add the below parameter at the end of the KUBELET_ARGS variable string. --rotate-kubelet-server-certificate=true Remediation Method 3: If using the api configz endpoint consider searching for the status of \"RotateKubeletServerCertificate\": by extracting the live configuration from the nodes running kubelet. **See detailed step-by-step configmap procedures in Reconfigure a Node's Kubelet in a Live Cluster, and then rerun the curl statement from audit process to check for kubelet configuration changes kubectl proxy --port=8001 & export HOSTNAME_PORT=localhost:8001 (example host and port number) export NODE_NAME=gke-cluster-1-pool1-5e572947-r2hg (example node name from \"kubectl get nodes\") curl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\" For all three remediation methods: Restart the kubelet service and check status. The example below is for when using systemctl to manage services: systemctl daemon-reload systemctl restart kubelet.service systemctl status kubelet -l Default Value: See the GKE documentation for the default value. References: 1. https://github.com/kubernetes/kubernetes/pull/45059 2. https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#kubelet-configuration",
    "function_names": [
      "kubernetes_kubelet_certificate_rotation_enabled",
      "kubernetes_kubelet_server_certificate_rotation_enabled",
      "kubernetes_kubelet_rotate_server_certificate_enabled",
      "kubernetes_kubelet_tls_certificate_rotation_enabled",
      "kubernetes_kubelet_auto_rotate_certificate_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None",
    "references": "1. https://github.com/kubernetes/kubernetes/pull/45059 2. https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#kubelet-configuration"
  },
  {
    "id": "4.1.1",
    "title": "Ensure that the cluster-admin role is only used where required",
    "assessment": "Automated",
    "description": "The RBAC role cluster-admin provides wide-ranging powers over the environment and should be used only where and when needed.",
    "rationale": "Kubernetes provides a set of default roles where RBAC is used. Some of these roles such as cluster-admin provide wide-ranging privileges which should only be applied where absolutely necessary. Roles such as cluster-admin allow super-user access to perform any action on any resource. When used in a ClusterRoleBinding, it gives full control over every resource in the cluster and in all namespaces. When used in a RoleBinding, it gives full control over every resource in the rolebinding's namespace, including the namespace itself. Impact: Care should be taken before removing any clusterrolebindings from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to clusterrolebindings with the system: prefix as they are required for the operation of system components.",
    "audit": "Obtain a list of the principals who have access to the cluster-admin role by reviewing the clusterrolebinding output for each role binding that has access to the cluster- admin role. kubectl get clusterrolebindings -o=custom- columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name Review each principal listed and ensure that cluster-admin privilege is required for it.",
    "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and if they need this role or if they could use a role with fewer privileges. Where possible, first bind users to a lower-privileged role and then remove the clusterrolebinding to the cluster-admin role : kubectl delete clusterrolebinding [name] Default Value: By default a single clusterrolebinding called cluster-admin is provided with the system:masters group as its principal. References: 1. https://kubernetes.io/docs/concepts/cluster-administration/ 2. https://kubernetes.io/docs/reference/access-authn-authz/rbac/",
    "function_names": [
      "kubernetes_role_no_cluster_admin",
      "kubernetes_role_cluster_admin_restricted",
      "kubernetes_role_cluster_admin_minimal_usage",
      "kubernetes_role_cluster_admin_least_privilege",
      "kubernetes_role_cluster_admin_required_only"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Care should be taken before removing any clusterrolebindings from the environment to ensure they were not required for operation of the cluster. Specifically, modifications should not be made to clusterrolebindings with the system: prefix as they are required for the operation of system components.",
    "references": "1. https://kubernetes.io/docs/concepts/cluster-administration/ 2. https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
  },
  {
    "id": "4.1.2",
    "title": "Minimize access to secrets",
    "assessment": "Automated",
    "description": "The Kubernetes API stores secrets, which may be service account tokens for the Kubernetes API or credentials used by workloads in the cluster. Access to these secrets should be restricted to the smallest possible group of users to reduce the risk of privilege escalation.",
    "rationale": "Inappropriate access to secrets stored within the Kubernetes cluster can allow for an attacker to gain additional access to the Kubernetes cluster or external resources whose credentials are stored as secrets. Impact: Care should be taken not to remove access to secrets to system components which require this for their operation",
    "audit": "Review the users who have get, list or watch access to secrets objects in the Kubernetes API.",
    "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster. Default Value: CLUSTERROLEBINDING                                    SUBJECT TYPE            SA-NAMESPACE cluster-admin                                         system:masters Group system:controller:clusterrole-aggregation-controller  clusterrole- aggregation-controller  ServiceAccount  kube-system system:controller:expand-controller                   expand-controller ServiceAccount  kube-system system:controller:generic-garbage-collector           generic-garbage- collector           ServiceAccount  kube-system system:controller:namespace-controller                namespace-controller ServiceAccount  kube-system system:controller:persistent-volume-binder            persistent-volume- binder            ServiceAccount  kube-system system:kube-controller-manager                        system:kube-controller- manager      User",
    "function_names": [
      "kubernetes_secret_access_restricted",
      "kubernetes_secret_minimal_user_access",
      "kubernetes_secret_no_public_access",
      "kubernetes_secret_no_anonymous_access",
      "kubernetes_secret_no_wildcard_permissions",
      "kubernetes_secret_no_default_service_account",
      "kubernetes_secret_no_broad_role_bindings",
      "kubernetes_secret_no_excessive_permissions",
      "kubernetes_secret_no_unrestricted_access",
      "kubernetes_secret_no_privilege_escalation"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Care should be taken not to remove access to secrets to system components which require this for their operation"
  },
  {
    "id": "4.1.3",
    "title": "Minimize wildcard use in Roles and ClusterRoles",
    "assessment": "Automated",
    "description": "Kubernetes Roles and ClusterRoles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these to be the wildcard \"*\", which matches all items. Use of wildcards is not optimal from a security perspective as it may allow for inadvertent access to be granted when new resources are added to the Kubernetes API either as CRDs or in later versions of the product.",
    "rationale": "The principle of least privilege recommends that users are provided only the access required for their role and nothing more. The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API.",
    "audit": "Retrieve the roles defined across each namespaces in the cluster and review for wildcards kubectl get roles --all-namespaces -o yaml Retrieve the cluster roles defined in the cluster and review for wildcards kubectl get clusterroles -o yaml",
    "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions. References: 1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/",
    "function_names": [
      "kubernetes_role_wildcard_restricted",
      "kubernetes_clusterrole_wildcard_restricted",
      "kubernetes_role_minimal_permissions",
      "kubernetes_clusterrole_minimal_permissions",
      "kubernetes_role_no_wildcard_resources",
      "kubernetes_clusterrole_no_wildcard_resources",
      "kubernetes_role_no_wildcard_actions",
      "kubernetes_clusterrole_no_wildcard_actions",
      "kubernetes_role_specific_permissions",
      "kubernetes_clusterrole_specific_permissions"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/"
  },
  {
    "id": "4.1.4",
    "title": "Ensure that default service accounts are not actively used",
    "assessment": "Automated",
    "description": "The default service account should not be used to ensure that rights granted to applications can be more easily audited and reviewed.",
    "rationale": "Kubernetes provides a default service account which is used by cluster workloads where no specific service account is assigned to the pod. Where access to the Kubernetes API from a pod is required, a specific service account should be created for that pod, and rights granted to that service account. The default service account should be configured such that it does not provide a service account token and does not have any explicit rights assignments. Impact: All workloads which require access to the Kubernetes API will require an explicit service account to be created.",
    "audit": "For each namespace in the cluster, review the rights assigned to the default service account and ensure that it has no roles or cluster roles bound to it apart from the defaults. Additionally ensure that the automountServiceAccountToken: false setting is in place for each default service account.",
    "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access to the Kubernetes API server. Modify the configuration of each default service account to include this value automountServiceAccountToken: false Default Value: By default the default service account allows for its service account token to be mounted in pods in its namespace. References: 1. https://kubernetes.io/docs/tasks/configure-pod-container/configure-service- account/",
    "function_names": [
      "iam_service_account_default_not_used",
      "iam_service_account_default_inactive",
      "compute_service_account_default_disabled",
      "compute_service_account_default_no_usage",
      "service_account_default_no_active_usage",
      "service_account_default_no_application_usage",
      "service_account_default_no_privileged_usage",
      "service_account_default_no_operation_usage"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "All workloads which require access to the Kubernetes API will require an explicit service account to be created.",
    "references": "1. https://kubernetes.io/docs/tasks/configure-pod-container/configure-service- account/"
  },
  {
    "id": "4.1.5",
    "title": "Ensure that Service Account Tokens are only mounted where necessary",
    "assessment": "Automated",
    "description": "Service accounts tokens should not be mounted in pods except where the workload running in the pod explicitly needs to communicate with the API server",
    "rationale": "Mounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue. Impact: Pods mounted without service account tokens will not be able to communicate with the API server, except where the resource is available to unauthenticated principals.",
    "audit": "Review pod and service account objects in the cluster and ensure that the option below is set, unless the resource explicitly requires this access. automountServiceAccountToken: false",
    "remediation": "Modify the definition of pods and service accounts which do not need to mount service account tokens to disable it. Default Value: By default, all pods get a service account token mounted in them. References: 1. https://kubernetes.io/docs/tasks/configure-pod-container/configure-service- account/",
    "function_names": [
      "kubernetes_pod_service_account_token_unmounted",
      "kubernetes_pod_service_account_token_restricted",
      "kubernetes_pod_service_account_token_disabled",
      "kubernetes_pod_service_account_token_minimal_access",
      "kubernetes_pod_service_account_token_necessary_only"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Pods mounted without service account tokens will not be able to communicate with the API server, except where the resource is available to unauthenticated principals.",
    "references": "1. https://kubernetes.io/docs/tasks/configure-pod-container/configure-service- account/"
  },
  {
    "id": "4.1.6",
    "title": "Avoid use of system:masters group",
    "assessment": "Automated",
    "description": "The special group system:masters should not be used to grant permissions to any user or service account, except where strictly necessary (e.g. bootstrapping access prior to RBAC being fully available)",
    "rationale": "The system:masters group has unrestricted access to the Kubernetes API hard-coded into the API server source code. An authenticated user who is a member of this group cannot have their access reduced, even if all bindings and cluster role bindings which mention it, are removed. When combined with client certificate authentication, use of this group can allow for irrevocable cluster-admin level credentials to exist for a cluster. GKE includes the CertificateSubjectRestriction admission controller which rejects requests for the system:masters group. CertificateSubjectRestriction \"This admission controller observes creation of CertificateSigningRequest resources that have a spec.signerName of kubernetes.io/kube-apiserver-client. It rejects any request that specifies a 'group' (or 'organization attribute') of system:masters.\" https://kubernetes.io/docs/reference/access- authn-authz/admission-controllers/#certificatesubjectrestriction Impact: Once the RBAC system is operational in a cluster system:masters should not be specifically required, as ordinary bindings from principals to the cluster-admin cluster role can be made where unrestricted access is required.",
    "audit": "Review a list of all credentials which have access to the cluster and ensure that the group system:masters is not used.",
    "remediation": "Remove the system:masters group from all users in the cluster. Default Value: By default some clusters will create a \"break glass\" client certificate which is a member of this group. Access to this client certificate should be carefully controlled and it should not be used for general cluster operations. References: 1. https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/rbac/escalatio n_check.go#L38",
    "function_names": [
      "iam_group_system_masters_restricted",
      "iam_group_system_masters_no_usage",
      "iam_group_system_masters_minimal_access",
      "iam_group_system_masters_bootstrap_only",
      "iam_group_system_masters_no_grants"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Once the RBAC system is operational in a cluster system:masters should not be specifically required, as ordinary bindings from principals to the cluster-admin cluster role can be made where unrestricted access is required.",
    "references": "1. https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/rbac/escalatio n_check.go#L38"
  },
  {
    "id": "4.1.7",
    "title": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
    "assessment": "Manual",
    "description": "Cluster roles and roles with the impersonate, bind or escalate permissions should not be granted unless strictly required. Each of these permissions allow a particular subject to escalate their privileges beyond those explicitly granted by cluster administrators",
    "rationale": "The impersonate privilege allows a subject to impersonate other users gaining their rights to the cluster. The bind privilege allows the subject to add a binding to a cluster role or role which escalates their effective permissions in the cluster. The escalate privilege allows a subject to modify cluster roles to which they are bound, increasing their rights to that level. Each of these permissions has the potential to allow for privilege escalation to cluster- admin level. Impact: There are some cases where these permissions are required for cluster service operation, and care should be taken before removing these permissions from system service accounts.",
    "audit": "Review the users who have access to cluster roles or roles which provide the impersonate, bind or escalate privileges.",
    "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects. Default Value: In a default kubeadm cluster, the system:masters group and clusterrole-aggregation- controller service account have access to the escalate privilege. The system:masters group also has access to bind and impersonate. References: 1. https://www.impidio.com/blog/kubernetes-rbac-security-pitfalls 2. https://raesene.github.io/blog/2020/12/12/Escalating_Away/ 3. https://raesene.github.io/blog/2021/01/16/Getting-Into-A-Bind-with-Kubernetes/",
    "function_names": [
      "kubernetes_role_no_impersonate_permission",
      "kubernetes_role_no_bind_permission",
      "kubernetes_role_no_escalate_permission",
      "kubernetes_cluster_role_no_impersonate_permission",
      "kubernetes_cluster_role_no_bind_permission",
      "kubernetes_cluster_role_no_escalate_permission",
      "kubernetes_role_no_privilege_escalation",
      "kubernetes_cluster_role_no_privilege_escalation"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "There are some cases where these permissions are required for cluster service operation, and care should be taken before removing these permissions from system service accounts.",
    "references": "1. https://www.impidio.com/blog/kubernetes-rbac-security-pitfalls 2. https://raesene.github.io/blog/2020/12/12/Escalating_Away/ 3. https://raesene.github.io/blog/2021/01/16/Getting-Into-A-Bind-with-Kubernetes/"
  },
  {
    "id": "4.1.8",
    "title": "Avoid bindings to system:anonymous",
    "assessment": "Automated",
    "description": "Avoid ClusterRoleBindings nor RoleBindings with the user system:anonymous.",
    "rationale": "Kubernetes assigns user system:anonymous to API server requests that have no authentication information provided. Binding a role to user system:anonymous gives any unauthenticated user the permissions granted by that role and is strongly discouraged. Impact: Unauthenticated users will have privileges and permissions associated with roles associated with the configured bindings. Care should be taken before removing any clusterrolebindings or rolebindings from the environment to ensure they were not required for operation of the cluster. Use a more specific and authenticated user for cluster operations.",
    "audit": "Both CusterRoleBindings and RoleBindings should be audited. Use the following command to confirm there are no ClusterRoleBindings to system:anonymous: $ kubectl get clusterrolebindings -o json   | jq -r '[\"Name\"], [\"-----\"], (.items[] | select((.subjects | length) > 0) | select(any(.subjects[]; .name == \"system:anonymous\")) | [.metadata.namespace, .metadata.name]) | @tsv' There should be no ClusterRoleBindings listed. If any bindings exist, review their permissions with the following command and reassess their privilege. $ kubectl get clusterrolebinding [CLUSTER_ROLE_BINDING_NAME] -o json \\ | jq ' .roleRef.name +\" \" + .roleRef.kind' \\ | sed -e 's/\"//g' \\ | xargs -l bash -c 'kubectl get $1 $0 -o yaml' Confirm that there are no RoleBindings including the system:anonymous user: $ kubectl get rolebindings -A -o json \\ | jq -r '[\"Namespace\", \"Name\"], [\"---------\", \"-----\"], (.items[] | select((.subjects | length) > 0) | select(any(.subjects[]; .name == \"system:anonymous\")) | [.metadata.namespace, .metadata.name]) | @tsv' There should be no RoleBindings listed. If any bindings exist, review their permissions with the following command and reassess their privilege. $ kubectl get rolebinding [ROLE_BINDING_NAME] --namespace [ROLE_BINDING_NAMESPACE] -o json \\ | jq ' .roleRef.name +\" \" + .roleRef.kind' \\ | sed -e 's/\"//g' \\ | xargs -l bash -c 'kubectl get $1 $0 -o yaml --namespace [ROLE_BINDING_NAMESPACE]'",
    "remediation": "Identify all clusterrolebindings and rolebindings to the user system:anonymous. Check if they are used and review the permissions associated with the binding using the commands in the Audit section above or refer to GKE documentation. Strongly consider replacing unsafe bindings with an authenticated, user-defined group. Where possible, bind to non-default, user-defined groups with least-privilege roles. If there are any unsafe bindings to the user system:anonymous, proceed to delete them after consideration for cluster operations with only necessary, safer bindings. kubectl delete clusterrolebinding [CLUSTER_ROLE_BINDING_NAME] kubectl delete rolebinding [ROLE_BINDING_NAME] --namespace [ROLE_BINDING_NAMESPACE] Default Value: No clusterrolebindings nor rolebindings with user system:anonymous. References: 1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles",
    "function_names": [
      "kubernetes_cluster_role_binding_no_anonymous_user",
      "kubernetes_role_binding_no_anonymous_user",
      "kubernetes_cluster_role_binding_no_system_anonymous",
      "kubernetes_role_binding_no_system_anonymous",
      "kubernetes_binding_no_anonymous_access",
      "kubernetes_binding_no_system_anonymous_access"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Unauthenticated users will have privileges and permissions associated with roles associated with the configured bindings. Care should be taken before removing any clusterrolebindings or rolebindings from the environment to ensure they were not required for operation of the cluster. Use a more specific and authenticated user for cluster operations.",
    "references": "1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles"
  },
  {
    "id": "4.1.9",
    "title": "Avoid non-default bindings to system:unauthenticated",
    "assessment": "Automated",
    "description": "Avoid non-default ClusterRoleBindings and RoleBindings with the group system:unauthenticated, except the ClusterRoleBinding system:public-info- viewer.",
    "rationale": "Kubernetes assigns the group system:unauthenticated to API server requests that have no authentication information provided. Binding a role to this group gives any unauthenticated user the permissions granted by that role and is strongly discouraged. Impact: Unauthenticated users will have privileges and permissions associated with roles associated with the configured bindings. Care should be taken before removing any non-default clusterrolebindings or rolebindings from the environment to ensure they were not required for operation of the cluster. Leverage a more specific and authenticated user for cluster operations.",
    "audit": "Both CusterRoleBindings and RoleBindings should be audited. Use the following command to confirm there are no non-default ClusterRoleBindings to group system:unauthenticated: $ kubectl get clusterrolebindings -o json   | jq -r '[\"Name\"], [\"-----\"], (.items[] | select((.subjects | length) > 0) | select(any(.subjects[]; .name == \"system:unauthenticated\")) | [.metadata.namespace, .metadata.name]) | @tsv' Only the following default ClusterRoleBinding should be displayed: Name ----- system:public-info-viewer If any non-default bindings exist, review their permissions with the following command and reassess their privilege. $ kubectl get clusterrolebinding [CLUSTER_ROLE_BINDING_NAME] -o json \\ | jq ' .roleRef.name +\" \" + .roleRef.kind' \\ | sed -e 's/\"//g' \\ | xargs -l bash -c 'kubectl get $1 $0 -o yaml' Confirm that there are no RoleBindings including the system:unauthenticated group: $ kubectl get rolebindings -A -o json \\ | jq -r '[\"Namespace\", \"Name\"], [\"---------\", \"-----\"], (.items[] | select((.subjects | length) > 0) | select(any(.subjects[]; .name == \"system:unauthenticated\")) | [.metadata.namespace, .metadata.name]) | @tsv' There should be no RoleBindings listed. If any bindings exist, review their permissions with the following command and reassess their privilege. $ kubectl get rolebinding [ROLE_BINDING_NAME] --namespace [ROLE_BINDING_NAMESPACE] -o json \\ | jq ' .roleRef.name +\" \" + .roleRef.kind' \\ | sed -e 's/\"//g' \\ | xargs -l bash -c 'kubectl get $1 $0 -o yaml --namespace [ROLE_BINDING_NAMESPACE]'",
    "remediation": "Identify all non-default clusterrolebindings and rolebindings to the group system:unauthenticated. Check if they are used and review the permissions associated with the binding using the commands in the Audit section above or refer to GKE documentation. Strongly consider replacing non-default, unsafe bindings with an authenticated, user- defined group. Where possible, bind to non-default, user-defined groups with least- privilege roles. If there are any non-default, unsafe bindings to the group system:unauthenticated, proceed to delete them after consideration for cluster operations with only necessary, safer bindings. kubectl delete clusterrolebinding [CLUSTER_ROLE_BINDING_NAME] kubectl delete rolebinding [ROLE_BINDING_NAME] -- namespace [ROLE_BINDING_NAMESPACE] Default Value: ClusterRoleBindings with group system:unauthenticated: \u2022 system:public-info-viewer No RoleBindings with the group system:unauthenticated. References: 1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles",
    "function_names": [
      "kubernetes_cluster_role_binding_no_unauthenticated_access",
      "kubernetes_role_binding_no_unauthenticated_access",
      "kubernetes_cluster_role_binding_default_only",
      "kubernetes_role_binding_default_only",
      "kubernetes_cluster_role_binding_public_info_viewer_allowed",
      "kubernetes_role_binding_public_info_viewer_allowed",
      "kubernetes_cluster_role_binding_unauthenticated_restricted",
      "kubernetes_role_binding_unauthenticated_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Unauthenticated users will have privileges and permissions associated with roles associated with the configured bindings. Care should be taken before removing any non-default clusterrolebindings or rolebindings from the environment to ensure they were not required for operation of the cluster. Leverage a more specific and authenticated user for cluster operations.",
    "references": "1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles"
  },
  {
    "id": "4.1.10",
    "title": "Avoid non-default bindings to system:authenticated",
    "assessment": "Automated",
    "description": "Avoid non-default ClusterRoleBindings and RoleBindings with the group system:authenticated, except the ClusterRoleBindings system:basic-user, system:discovery, and system:public-info-viewer. Google's approach to authentication is to make authenticating to Google Cloud and GKE as simple and secure as possible without adding complex configuration steps. The group system:authenticated includes all users with a Google account, which includes all Gmail accounts. Consider your authorization controls with this extended group scope when granting permissions. Thus, group system:authenticated is not recommended for non-default use.",
    "rationale": "GKE assigns the group system:authenticated to API server requests made by any user who is signed in with a Google Account, including all Gmail accounts. In practice, this isn't meaningfully different from system:unauthenticated because anyone can create a Google Account. Binding a role to the group system:authenticated gives any user with a Google Account, including all Gmail accounts, the permissions granted by that role and is strongly discouraged. Impact: Authenticated users in group system:authenticated should be treated similarly to users in system:unauthenticated, having privileges and permissions associated with roles associated with the configured bindings. Care should be taken before removing any non-default clusterrolebindings or rolebindings from the environment to ensure they were not required for operation of the cluster. Leverage a more specific and authenticated user for cluster operations.",
    "audit": "Use the following command to confirm there are no non-default ClusterRoleBindings to system:authenticated: $ kubectl get clusterrolebindings -o json   | jq -r '[\"Name\"], [\"-----\"], (.items[] | select((.subjects | length) > 0) | select(any(.subjects[]; .name == \"system:unauthenticated\")) | [.metadata.namespace, .metadata.name]) | @tsv' Only the following default ClusterRoleBindings should be displayed: Name ----- system:basic-user system:discovery system:public-info-viewer If any non-default bindings exist, review their permissions with the following command and reassess their privilege. $ kubectl get clusterrolebinding CLUSTER_ROLE_BINDING_NAME -o json \\ | jq ' .roleRef.name +\" \" + .roleRef.kind' \\ | sed -e 's/\"//g' \\ | xargs -l bash -c 'kubectl get $1 $0 -o yaml' Confirm that there are no RoleBindings including the system:authenticated group: $ kubectl get rolebindings -A -o json \\ | jq -r '[\"Namespace\", \"Name\"], [\"---------\", \"-----\"], (.items[] | select((.subjects | length) > 0) | select(any(.subjects[]; .name == \"system:unauthenticated\")) | [.metadata.namespace, .metadata.name]) | @tsv' There should be no RoleBindings listed. If any bindings exist, review their permissions with the following command and reassess their privilege. $ kubectl get rolebinding [ROLE_BINDING_NAME] --namespace [ROLE_BINDING_NAMESPACE] -o json \\ | jq ' .roleRef.name +\" \" + .roleRef.kind' \\ | sed -e 's/\"//g' \\ | xargs -l bash -c 'kubectl get $1 $0 -o yaml --namespace [ROLE_BINDING_NAMESPACE]'",
    "remediation": "Identify all non-default clusterrolebindings and rolebindings to the group system:authenticated. Check if they are used and review the permissions associated with the binding using the commands in the Audit section above or refer to GKE documentation. Strongly consider replacing non-default, unsafe bindings with an authenticated, user- defined group. Where possible, bind to non-default, user-defined groups with least- privilege roles. If there are any non-default, unsafe bindings to the group system:authenticated, proceed to delete them after consideration for cluster operations with only necessary, safer bindings. kubectl delete clusterrolebinding [CLUSTER_ROLE_BINDING_NAME] kubectl delete rolebinding [ROLE_BINDING_NAME] --namespace [ROLE_BINDING_NAMESPACE] Default Value: ClusterRoleBindings with group system:authenticated: \u2022 system:basic-user \u2022 system:discovery No RoleBindings with the group system:authenticated. References: 1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles",
    "function_names": [
      "kubernetes_cluster_role_binding_no_non_default_authenticated",
      "kubernetes_role_binding_no_non_default_authenticated",
      "kubernetes_cluster_role_binding_authenticated_whitelisted",
      "kubernetes_role_binding_authenticated_whitelisted",
      "kubernetes_authenticated_group_restricted_bindings",
      "kubernetes_system_authenticated_default_bindings_only",
      "kubernetes_cluster_role_binding_authenticated_default_only",
      "kubernetes_role_binding_authenticated_default_only"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Authenticated users in group system:authenticated should be treated similarly to users in system:unauthenticated, having privileges and permissions associated with roles associated with the configured bindings. Care should be taken before removing any non-default clusterrolebindings or rolebindings from the environment to ensure they were not required for operation of the cluster. Leverage a more specific and authenticated user for cluster operations.",
    "references": "1. https://kubernetes.io/docs/reference/access-authn-authz/rbac/#discovery-roles"
  },
  {
    "id": "4.2.1",
    "title": "Ensure that the cluster enforces Pod Security Standard Baseline profile or stricter for all namespaces.",
    "assessment": "Manual",
    "description": "The Pod Security Standard Baseline profile defines a baseline for container security. You can enforce this by using the built-in Pod Security Admission controller.",
    "rationale": "Without an active mechanism to enforce the Pod Security Standard Baseline profile, it is not possible to limit the use of containers with access to underlying cluster nodes, via mechanisms like privileged containers, or the use of hostPath volume mounts. Impact: Enforcing a baseline profile will limit the use of containers.",
    "audit": "diff <(kubectl get namespace -l pod-security.kubernetes.io/enforce=baseline -o jsonpath='{range .items[ ]}{.metadata.name}{\"\\n\"}') <(kubectl get namespace -o jsonpath='{range .items[ ]}{.metadata.name}{\"\\n\"}')",
    "remediation": "Ensure that Pod Security Admission is in place for every namespace which contains user workloads. Run the following command to enforce the Baseline profile in a namespace: kubectl label namespace pod-security.kubernetes.io/enforce=baseline Default Value: By default, Pod Security Admission is enabled but no policies are in place.",
    "function_names": [
      "kubernetes_namespace_pod_security_baseline_enforced",
      "kubernetes_namespace_pod_security_strict_enforced",
      "kubernetes_pod_security_admission_controller_enabled",
      "kubernetes_pod_security_baseline_profile_applied",
      "kubernetes_pod_security_profile_min_baseline",
      "kubernetes_namespace_pod_security_profile_compliant",
      "kubernetes_pod_security_admission_controller_active",
      "kubernetes_pod_security_profile_strict_or_baseline"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Enforcing a baseline profile will limit the use of containers."
  },
  {
    "id": "4.3.1",
    "title": "Ensure that the CNI in use supports Network Policies",
    "assessment": "Manual",
    "description": "There are a variety of CNI plugins available for Kubernetes. If the CNI in use does not support Network Policies it may not be possible to effectively restrict traffic in the cluster.",
    "rationale": "Kubernetes network policies are enforced by the CNI plugin in use. As such it is important to ensure that the CNI plugin supports both Ingress and Egress network policies. See also recommendation 5.6.7. Impact: None",
    "audit": "Review the documentation of CNI plugin in use by the cluster, and confirm that it supports Ingress and Egress network policies.",
    "remediation": "To use a CNI plugin with Network Policy, enable Network Policy in GKE, and the CNI plugin will be updated. See recommendation 5.6.7. Default Value: This will depend on the CNI plugin in use. References: 1. https://kubernetes.io/docs/concepts/services-networking/network-policies/ 2. https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage- net/network-plugins/ 3. https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview Additional Information: One example here is Flannel (https://github.com/flannel-io/flannel) which does not support Network policy unless Calico is also in use.",
    "function_names": [
      "kubernetes_cni_network_policy_support",
      "kubernetes_cni_network_policy_enabled",
      "kubernetes_network_policy_cni_compliance",
      "kubernetes_cni_network_policy_required",
      "kubernetes_network_policy_cni_validation"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None",
    "references": "1. https://kubernetes.io/docs/concepts/services-networking/network-policies/ 2. https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage- net/network-plugins/ 3. https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview Additional Information: One example here is Flannel (https://github.com/flannel-io/flannel) which does not support Network policy unless Calico is also in use."
  },
  {
    "id": "4.3.2",
    "title": "Ensure that all Namespaces have Network Policies defined",
    "assessment": "Automated",
    "description": "Use network policies to isolate traffic in the cluster network.",
    "rationale": "Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints. Network Policies are namespace scoped. When a network policy is introduced to a given namespace, all traffic not allowed by the policy is denied. However, if there are no network policies in a namespace all traffic will be allowed into and out of the pods in that namespace. Impact: Once network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.",
    "audit": "Run the below command and review the NetworkPolicy objects created in the cluster. kubectl get networkpolicy --all-namespaces ensure that each namespace defined in the cluster has at least one Network Policy.",
    "remediation": "Follow the documentation and create NetworkPolicy objects as needed. See: https://cloud.google.com/kubernetes-engine/docs/how-to/network- policy#creating_a_network_policy for more information. Default Value: By default, network policies are not created. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/network- policy#creating_a_network_policy 2. https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ 3. https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview",
    "function_names": [
      "kubernetes_namespace_network_policy_defined",
      "kubernetes_namespace_traffic_isolation_enabled",
      "kubernetes_network_policy_all_namespaces",
      "kubernetes_namespace_network_restrictions_configured",
      "kubernetes_network_policy_namespace_scope",
      "kubernetes_namespace_traffic_controls_enabled",
      "kubernetes_network_policy_isolation_required",
      "kubernetes_namespace_traffic_segmentation_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Once network policies are in use within a given namespace, traffic not explicitly allowed by a network policy will be denied. As such it is important to ensure that, when introducing network policies, legitimate traffic is not blocked.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/network- policy#creating_a_network_policy 2. https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/ 3. https://cloud.google.com/kubernetes-engine/docs/concepts/network-overview"
  },
  {
    "id": "4.4.1",
    "title": "Prefer using secrets as files over secrets as environment variables",
    "assessment": "Automated",
    "description": "Kubernetes supports mounting secrets as data volumes or as environment variables. Minimize the use of environment variable secrets.",
    "rationale": "It is reasonably common for application code to log out its environment (particularly in the event of an error). This will include any secret values passed in as environment variables, so secrets can easily be exposed to any user or entity who has access to the logs. Impact: Application code which expects to read secrets in the form of environment variables would need modification",
    "audit": "Run the following command to find references to objects which use environment variables defined from secrets. kubectl get all -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {\"\\n\"}{end}' -A",
    "remediation": "If possible, rewrite application code to read secrets from mounted secret files, rather than from environment variables. Default Value: By default, secrets are not defined References: 1. https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets Additional Information: Mounting secrets as volumes has the additional benefit that secret values can be updated without restarting the pod",
    "function_names": [
      "kubernetes_secret_files_preferred",
      "kubernetes_secret_no_environment_variables",
      "kubernetes_secret_volume_mounted",
      "kubernetes_secret_environment_avoided",
      "kubernetes_secret_file_based_usage"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Application code which expects to read secrets in the form of environment variables would need modification",
    "references": "1. https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets Additional Information: Mounting secrets as volumes has the additional benefit that secret values can be updated without restarting the pod"
  },
  {
    "id": "4.4.2",
    "title": "Consider external secret storage",
    "assessment": "Manual",
    "description": "Consider the use of an external secrets storage and management system instead of using Kubernetes Secrets directly, if more complex secret management is required. Ensure the solution requires authentication to access secrets, has auditing of access to and use of secrets, and encrypts secrets. Some solutions also make it easier to rotate secrets.",
    "rationale": "Kubernetes supports secrets as first-class objects, but care needs to be taken to ensure that access to secrets is carefully limited. Using an external secrets provider can ease the management of access to secrets, especially where secrests are used across both Kubernetes and non-Kubernetes environments. Impact: None",
    "audit": "Review your secrets management implementation.",
    "remediation": "Refer to the secrets management options offered by the cloud service provider or a third-party secrets management solution. Default Value: By default, no external secret management is configured. References: 1. https://kubernetes.io/docs/concepts/configuration/secret/ 2. https://cloud.google.com/secret-manager/docs/overview",
    "function_names": [
      "kubernetes_secrets_external_storage_required",
      "kubernetes_secrets_authentication_enabled",
      "kubernetes_secrets_audit_logging_enabled",
      "kubernetes_secrets_encryption_enabled",
      "kubernetes_secrets_rotation_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "None",
    "references": "1. https://kubernetes.io/docs/concepts/configuration/secret/ 2. https://cloud.google.com/secret-manager/docs/overview"
  },
  {
    "id": "4.5.1",
    "title": "Configure Image Provenance using ImagePolicyWebhook admission controller",
    "assessment": "Manual",
    "description": "Configure Image Provenance for the deployment.",
    "rationale": "Kubernetes supports plugging in provenance rules to accept or reject the images in deployments. Rules can be configured to ensure that only approved images are deployed in the cluster. Also see recommendation 5.10.4. Impact: Regular maintenance for the provenance configuration should be carried out, based on container image updates.",
    "audit": "Review the pod definitions in the cluster and verify that image provenance is configured as appropriate. Also see recommendation 5.10.4.",
    "remediation": "Follow the Kubernetes documentation and setup image provenance. Also see recommendation 5.10.4. Default Value: By default, image provenance is not set. References: 1. https://kubernetes.io/docs/concepts/containers/images/ 2. https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/",
    "function_names": [
      "kubernetes_image_provenance_enabled",
      "kubernetes_image_policy_webhook_enabled",
      "kubernetes_admission_controller_provenance_enabled",
      "kubernetes_image_provenance_webhook_configured",
      "kubernetes_image_policy_webhook_configured",
      "kubernetes_admission_controller_webhook_enabled",
      "kubernetes_image_provenance_validation_enabled",
      "kubernetes_image_policy_webhook_active"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Regular maintenance for the provenance configuration should be carried out, based on container image updates.",
    "references": "1. https://kubernetes.io/docs/concepts/containers/images/ 2. https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/"
  },
  {
    "id": "4.6.1",
    "title": "Create administrative boundaries between resources using namespaces",
    "assessment": "Manual",
    "description": "Use namespaces to isolate your Kubernetes objects.",
    "rationale": "Limiting the scope of user permissions can reduce the impact of mistakes or malicious activities. A Kubernetes namespace allows you to partition created resources into logically named groups. Resources created in one namespace can be hidden from other namespaces. By default, each resource created by a user in Kubernetes cluster runs in a default namespace, called default. You can create additional namespaces and attach resources and users to them. You can use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users. Impact: You need to switch between namespaces for administration.",
    "audit": "Run the below command and review the namespaces created in the cluster. kubectl get namespaces Ensure that these namespaces are the ones you need and are adequately administered as per your requirements.",
    "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need them. Default Value: By default, Kubernetes starts with two initial namespaces: 1. default - The default namespace for objects with no other namespace 2. kube-system - The namespace for objects created by the Kubernetes system 3. kube-node-lease - Namespace used for node heartbeats 4. kube-public - Namespace used for public information in a cluster References: 1. https://kubernetes.io/docs/concepts/overview/working-with- objects/namespaces/#viewing-namespaces 2. http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes- deployment.html 3. https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/589- efficient-node-heartbeats",
    "function_names": [
      "kubernetes_namespace_isolation_enabled",
      "kubernetes_namespace_admin_boundaries_enabled",
      "kubernetes_namespace_resource_isolation_enabled",
      "kubernetes_namespace_separation_enabled",
      "kubernetes_namespace_segmentation_enabled",
      "kubernetes_namespace_boundaries_enforced",
      "kubernetes_namespace_isolation_required",
      "kubernetes_namespace_admin_isolation_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You need to switch between namespaces for administration.",
    "references": "1. https://kubernetes.io/docs/concepts/overview/working-with- objects/namespaces/#viewing-namespaces 2. http://blog.kubernetes.io/2016/08/security-best-practices-kubernetes- deployment.html 3. https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/589- efficient-node-heartbeats"
  },
  {
    "id": "4.6.2",
    "title": "Ensure that the seccomp profile is set to RuntimeDefault in the pod definitions",
    "assessment": "Automated",
    "description": "Enable RuntimeDefault seccomp profile in the pod definitions.",
    "rationale": "Seccomp (secure computing mode) is used to restrict the set of system calls applications can make, allowing cluster administrators greater control over the security of workloads running in the cluster. Kubernetes disables seccomp profiles by default for historical reasons. It should be enabled to ensure that the workloads have restricted actions available within the container. Impact: If the RuntimeDefault seccomp profile is too restrictive for you, you would have to create/manage your own Localhost seccomp profiles.",
    "audit": "Review the pod definitions output for all namespaces in the cluster with the command below. kubectl get pods --all-namespaces -o json | jq -r '.items[] | select(.metadata.annotations.\"seccomp.security.alpha.kubernetes.io/pod\" == \"runtime/default\" or .spec.securityContext.seccompProfile.type == \"RuntimeDefault\") | {namespace: .metadata.namespace, name: .metadata.name, seccompProfile: .spec.securityContext.seccompProfile.type}'",
    "remediation": "Use security context to enable the RuntimeDefault seccomp profile in your pod definitions. An example is as below: { \"namespace\": \"kube-system\", \"name\": \"metrics-server-v0.7.0-dbcc8ddf6-gz7d4\", \"seccompProfile\": \"RuntimeDefault\" } Default Value: By default, seccomp profile is set to unconfined which means that no seccomp profiles are enabled. References: 1. https://kubernetes.io/docs/tutorials/security/seccomp/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/seccomp-in-gke",
    "function_names": [
      "kubernetes_pod_seccomp_profile_runtime_default",
      "kubernetes_pod_seccomp_profile_enabled",
      "kubernetes_pod_security_profile_runtime_default",
      "pod_security_seccomp_profile_runtime_default",
      "pod_definition_seccomp_profile_runtime_default"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "If the RuntimeDefault seccomp profile is too restrictive for you, you would have to create/manage your own Localhost seccomp profiles.",
    "references": "1. https://kubernetes.io/docs/tutorials/security/seccomp/ 2. https://cloud.google.com/kubernetes-engine/docs/concepts/seccomp-in-gke"
  },
  {
    "id": "4.6.3",
    "title": "Apply Security Context to Pods and Containers",
    "assessment": "Manual",
    "description": "Apply Security Context to Pods and Containers",
    "rationale": "A security context defines the operating system security settings (uid, gid, capabilities, SELinux role, etc..) applied to a container. When designing containers and pods, make sure that the security context is configured for pods, containers, and volumes. A security context is a property defined in the deployment yaml. It controls the security parameters that will be assigned to the pod/container/volume. There are two levels of security context: pod level security context, and container level security context. Impact: If you incorrectly apply security contexts, there may be issues running the pods.",
    "audit": "Review the pod definitions in the cluster and verify that the security contexts have been defined as appropriate.",
    "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a suggested list of security contexts, you may refer to the CIS Google Container- Optimized OS Benchmark. Default Value: By default, no security contexts are automatically applied to pods. References: 1. https://kubernetes.io/docs/concepts/workloads/pods/ 2. https://kubernetes.io/docs/concepts/containers/ 3. https://kubernetes.io/docs/tasks/configure-pod-container/security-context/ 4. https://learn.cisecurity.org/benchmarks",
    "function_names": [
      "kubernetes_pod_security_context_applied",
      "kubernetes_container_security_context_applied",
      "kubernetes_pod_privileged_mode_disabled",
      "kubernetes_container_privileged_mode_disabled",
      "kubernetes_pod_read_only_root_filesystem_enabled",
      "kubernetes_container_read_only_root_filesystem_enabled",
      "kubernetes_pod_run_as_non_root_enabled",
      "kubernetes_container_run_as_non_root_enabled",
      "kubernetes_pod_capabilities_dropped",
      "kubernetes_container_capabilities_dropped"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "If you incorrectly apply security contexts, there may be issues running the pods.",
    "references": "1. https://kubernetes.io/docs/concepts/workloads/pods/ 2. https://kubernetes.io/docs/concepts/containers/ 3. https://kubernetes.io/docs/tasks/configure-pod-container/security-context/ 4. https://learn.cisecurity.org/benchmarks"
  },
  {
    "id": "4.6.4",
    "title": "The default namespace should not be used",
    "assessment": "Automated",
    "description": "Kubernetes provides a default namespace, where objects are placed if no namespace is specified for them. Placing objects in this namespace makes application of RBAC and other controls more difficult.",
    "rationale": "Resources in a Kubernetes cluster should be segregated by namespace, to allow for security controls to be applied at that level and to make it easier to manage resources. Impact: None",
    "audit": "Run this command to list objects in default namespace kubectl get $(kubectl api-resources --verbs=list --namespaced=true -o name | paste -sd, -) --ignore-not-found -n default The only entries there should be system managed resources such as the kubernetes service OR kubectl get pods -n default Returning No resources found in default namespace.",
    "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes resources and that all new resources are created in a specific namespace. Default Value: Unless a namespace is specific on object creation, the default namespace will be used",
    "function_names": [
      "kubernetes_namespace_default_not_used",
      "kubernetes_namespace_default_avoided",
      "kubernetes_namespace_non_default_required",
      "kubernetes_namespace_default_prohibited",
      "kubernetes_namespace_custom_required"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "None"
  },
  {
    "id": "5.1.1",
    "title": "Ensure Image Vulnerability Scanning is enabled",
    "assessment": "Automated",
    "description": "Note: GCR is now deprecated, being superseded by Artifact Registry starting 15th May 2024. Runtime Vulnerability scanning is available via GKE Security Posture Scan images stored in Google Container Registry (GCR) or Artifact Registry (AR) for vulnerabilities.",
    "rationale": "Vulnerabilities in software packages can be exploited by malicious users to obtain unauthorized access to local cloud resources. GCR Container Analysis API or Artifact Registry Container Scanning API allow images stored in GCR or AR respectively to be scanned for known vulnerabilities. Impact: None.",
    "audit": "For Images Hosted in GCR: Using Google Cloud Console:  1. Go to GCR by visiting https://console.cloud.google.com/gcr 2. Select Settings and check if Vulnerability scanning is Enabled. Using Command Line:  gcloud services list --enabled Ensure that the Container Registry API and Container Analysis API are listed in the output. For Images Hosted in AR: Using Google Cloud Console:  1. Go to AR by visiting https://console.cloud.google.com/artifacts 2. Select Settings and check if Vulnerability scanning is Enabled. Using Command Line:  gcloud services list --enabled Ensure that Container Scanning API and Artifact Registry API are listed in the output.",
    "remediation": "For Images Hosted in GCR: Using Google Cloud Console  1. Go to GCR by visiting: https://console.cloud.google.com/gcr 2. Select Settings and, under the Vulnerability Scanning heading, click the TURN ON button. Using Command Line  gcloud services enable containeranalysis.googleapis.com For Images Hosted in AR: Using Google Cloud Console  1. Go to GCR by visiting: https://console.cloud.google.com/artifacts 2. Select Settings and, under the Vulnerability Scanning heading, click the ENABLE button. Using Command Line  gcloud services enable containerscanning.googleapis.com Default Value: By default, GCR Container Analysis and AR Container Scanning are disabled. References: 1. https://cloud.google.com/artifact-registry/docs/analysis 2. https://cloud.google.com/artifact-analysis/docs/os-overview 3. https://console.cloud.google.com/marketplace/product/google/containerregistry.g oogleapis.com 4. https://cloud.google.com/kubernetes-engine/docs/concepts/about-configuration- scanning 5. https://containersecurity.googleapis.com",
    "function_names": [
      "artifact_registry_repository_vulnerability_scanning_enabled",
      "container_registry_image_vulnerability_scanning_enabled",
      "artifact_registry_image_vulnerability_scanning_enabled",
      "gcr_repository_vulnerability_scanning_enabled",
      "artifact_registry_repository_vulnerability_scanning_active",
      "container_registry_image_vulnerability_scanning_active",
      "gke_security_posture_image_scanning_enabled",
      "artifact_registry_repository_scanning_on_push_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "None.",
    "references": "1. https://cloud.google.com/artifact-registry/docs/analysis 2. https://cloud.google.com/artifact-analysis/docs/os-overview 3. https://console.cloud.google.com/marketplace/product/google/containerregistry.g oogleapis.com 4. https://cloud.google.com/kubernetes-engine/docs/concepts/about-configuration- scanning 5. https://containersecurity.googleapis.com"
  },
  {
    "id": "5.1.2",
    "title": "Minimize user access to Container Image repositories",
    "assessment": "Manual",
    "description": "Note: GCR is now deprecated, see the references for more details. Restrict user access to GCR or AR, limiting interaction with build images to only authorized personnel and service accounts.",
    "rationale": "Weak access control to GCR or AR may allow malicious users to replace built images with vulnerable or back-doored containers. Impact: Care should be taken not to remove access to GCR or AR for accounts that require this for their operation. Any account granted the Storage Object Viewer role at the project level can view all objects stored in GCS for the project.",
    "audit": "For Images Hosted in AR: 1. Go to Artifacts Browser by visiting https://console.cloud.google.com/artifacts 2. From the list of artifacts select each repository with format Docker 3. Under the Permissions tab, review the roles for each member and ensure only authorized users have the Artifact Registry Administrator, Artifact Registry Reader, Artifact Registry Repository Administrator and Artifact Registry Writer roles. Users may have permissions to use Service Accounts and thus Users could inherit privileges on the AR repositories. To check the accounts that could do this: 1. Go to IAM by visiting https://console.cloud.google.com/iam-admin/iam 2. Apply the filter Role: Service Account User. Note that other privileged project level roles will have the ability to write and modify AR repositories. Consult the GCP CIS benchmark and IAM documentation for further reference. Using Command Line: gcloud artifacts repositories get-iam-policy <repository-name> --location <repository-location> The output of the command will return roles associated with the AR repository and which members have those roles. For Images Hosted in GCR: Using Google Cloud Console: GCR bucket permissions 1. Go to Storage Browser by visiting https://console.cloud.google.com/storage/browser 2. From the list of storage buckets, select artifacts.<project_id>.appspot.com for the GCR bucket 3. Under the Permissions tab, review the roles for each member and ensure only authorized users have the Storage Admin, Storage Object Admin, Storage Object Creator, Storage Legacy Bucket Owner, Storage Legacy Bucket Writer and Storage Legacy Object Owner roles. Users may have permissions to use Service Accounts and thus Users could inherit privileges on the GCR Bucket. To check the accounts that could do this: 1. Go to IAM by visiting https://console.cloud.google.com/iam-admin/iam 2. Apply the filter Role: Service Account User. Note that other privileged project level roles will have the ability to write and modify objects and the GCR bucket. Consult the GCP CIS benchmark and IAM documentation for further reference. Using Command Line: To check GCR bucket specific permissions gsutil iam get gs://artifacts.<project_id>.appspot.com The output of the command will return roles associated with the GCR bucket and which members have those roles. Additionally, run the following to identify users and service accounts that hold privileged roles at the project level, and thus inherit these privileges within the GCR bucket: gcloud projects get-iam-policy <project_id> \\ --flatten=\"bindings[].members\" \\ --format='table(bindings.members,bindings.role)' \\ --filter=\"bindings.role:roles/storage.admin OR bindings.role:roles/storage.objectAdmin OR bindings.role:roles/storage.objectCreator OR bindings.role:roles/storage.legacyBucketOwner OR bindings.role:roles/storage.legacyBucketWriter OR bindings.role:roles/storage.legacyObjectOwner\" The output from the command lists the service accounts that have create/modify permissions. Users may have permissions to use Service Accounts and thus Users could inherit privileges on the GCR Bucket. To check the accounts that could do this: gcloud projects get-iam-policy <project_id>  \\ --flatten=\"bindings[].members\" \\ --format='table(bindings.members)' \\ --filter=\"bindings.role:roles/iam.serviceAccountUser\" Note that other privileged project level roles will have the ability to write and modify objects and the GCR bucket. Consult the GCP CIS benchmark and IAM documentation for further reference.",
    "remediation": "For Images Hosted in AR: Using Google Cloud Console: 1. Go to Artifacts Browser by visiting https://console.cloud.google.com/artifacts 2. From the list of artifacts select each repository with format Docker 3. Under the Permissions tab, modify the roles for each member and ensure only authorized users have the Artifact Registry Administrator, Artifact Registry Reader, Artifact Registry Repository Administrator and Artifact Registry Writer roles. Using Command Line: gcloud artifacts repositories set-iam-policy <repository-name> <path-to- policy-file> --location <repository-location> To learn how to configure policy files see: https://cloud.google.com/artifact- registry/docs/access-control#grant For Images Hosted in GCR: Using Google Cloud Console: To modify roles granted at the GCR bucket level: 1. Go to Storage Browser by visiting: https://console.cloud.google.com/storage/browser. 2. From the list of storage buckets, select artifacts.<project_id>.appspot.com for the GCR bucket 3. Under the Permissions tab, modify permissions of the identified member via the drop-down role menu and change the Role to Storage Object Viewer for read- only access. For a User or Service account with Project level permissions inherited by the GCR bucket, or the Service Account User Role: 1. Go to IAM by visiting: https://console.cloud.google.com/iam-admin/iam 2. Find the User or Service account to be modified and click on the corresponding pencil icon. 3. Remove the create/modify role (Storage Admin / Storage Object Admin / Storage Object Creator / Service Account User) on the user or service account. 4. If required add the Storage Object Viewer role - note with caution that this permits the account to view all objects stored in GCS for the project. Using Command Line: To change roles at the GCR bucket level: Firstly, run the following if read permissions are required: gsutil iam ch <type>:<email_address>:objectViewer gs://artifacts.<project_id>.appspot.com Then remove the excessively privileged role (Storage Admin / Storage Object Admin / Storage Object Creator) using: gsutil iam ch -d <type>:<email_address>:<role> gs://artifacts.<project_id>.appspot.com where: \u2022 <type> can be one of the following: o user, if the <email_address> is a Google account. o serviceAccount, if <email_address> specifies a Service account. o <email_address> can be one of the following: \u25aa a Google account (for example, someone@example.com). \u25aa a Cloud IAM service account. To modify roles defined at the project level and subsequently inherited within the GCR bucket, or the Service Account User role, extract the IAM policy file, modify it accordingly and apply it using: gcloud projects set-iam-policy <project_id> <policy_file> Default Value: By default, GCR is disabled and access controls are set during initialisation. References: 1. https://cloud.google.com/container-registry/docs/ 2. https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts 3. https://cloud.google.com/kubernetes-engine/docs/how-to/iam 4. https://cloud.google.com/artifact-registry/docs/access-control#grant",
    "function_names": [
      "container_registry_image_repository_access_minimized",
      "container_registry_repository_user_access_restricted",
      "container_registry_repository_authorized_access_only",
      "container_registry_repository_service_account_access_restricted",
      "container_registry_repository_build_image_access_limited"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Care should be taken not to remove access to GCR or AR for accounts that require this for their operation. Any account granted the Storage Object Viewer role at the project level can view all objects stored in GCS for the project.",
    "references": "1. https://cloud.google.com/container-registry/docs/ 2. https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts 3. https://cloud.google.com/kubernetes-engine/docs/how-to/iam 4. https://cloud.google.com/artifact-registry/docs/access-control#grant"
  },
  {
    "id": "5.1.3",
    "title": "Minimize cluster access to read-only for Container Image repositories",
    "assessment": "Manual",
    "description": "Note: GCR is now deprecated, see the references for more details. Configure the Cluster Service Account with Artifact Registry Viewer Role to only allow read-only access to AR repositories. Configure the Cluster Service Account with Storage Object Viewer Role to only allow read-only access to GCR.",
    "rationale": "The Cluster Service Account does not require administrative access to GCR or AR, only requiring pull access to containers to deploy onto GKE. Restricting permissions follows the principles of least privilege and prevents credentials from being abused beyond the required role. Impact: A separate dedicated service account may be required for use by build servers and other robot users pushing or managing container images. Any account granted the Storage Object Viewer role at the project level can view all objects stored in GCS for the project.",
    "audit": "For Images Hosted in AR: Using Google Cloud Console 1. Go to Artifacts Browser by visiting https://console.cloud.google.com/artifacts 2. From the list of repositories, for each repository with Format Docker 3. Under the Permissions tab, review the role for GKE Service account and ensure that only the Artifact Registry Viewer role is set. Using Command Line: gcloud artifacts repositories get-iam-policy <repository-name> --location <repository-location> The output of the command will return roles associated with the AR repository. If listed, ensure the GKE Service account is set to \"role\": \"roles/artifactregistry.reader\". For Images Hosted in GCR: Using Google Cloud Console 1. Go to Storage Browser by visiting https://console.cloud.google.com/storage/browser 2. From the list of storage buckets, select artifacts.<project_id>.appspot.com for the GCR bucket 3. Under the Permissions tab, review the role for GKE Service account and ensure that only the Storage Object Viewer role is set. Using Command Line GCR bucket permissions gsutil iam get gs://artifacts.<project_id>.appspot.com The output of the command will return roles associated with the GCR bucket. If listed, ensure the GKE Service account is set to \"role\": \"roles/storage.objectViewer\". If the GKE Service Account has project level permissions that are inherited within the bucket, ensure that these are not privileged: gcloud projects get-iam-policy <project_id> \\ --flatten=\"bindings[].members\" \\ --format='table(bindings.members,bindings.role)' \\ --filter=\"bindings.role:roles/storage.admin OR bindings.role:roles/storage.objectAdmin OR bindings.role:roles/storage.objectCreator OR bindings.role:roles/storage.legacyBucketOwner OR bindings.role:roles/storage.legacyBucketWriter OR bindings.role:roles/storage.legacyObjectOwner\" Your GKE Service Account should not be output when this command is run.",
    "remediation": "For Images Hosted in AR: Using Google Cloud Console: 1. Go to Artifacts Browser by visiting https://console.cloud.google.com/artifacts 2. From the list of repositories, for each repository with Format Docker 3. Under the Permissions tab, modify the permissions for GKE Service account and ensure that only the Artifact Registry Viewer role is set. Using Command Line: Add artifactregistry.reader role gcloud artifacts repositories add-iam-policy-binding <repository> \\ --location=<repository-location> \\ --member='serviceAccount:<email-address>' \\ --role='roles/artifactregistry.reader' Remove any roles other than artifactregistry.reader gcloud artifacts repositories remove-iam-policy-binding <repository> \\ --location <repository-location> \\ --member='serviceAccount:<email-address>' \\ --role='<role-name>' For Images Hosted in GCR: Using Google Cloud Console: For an account explicitly granted access to the bucket: 1. Go to Storage Browser by visiting: https://console.cloud.google.com/storage/browser. 2. From the list of storage buckets, select artifacts.<project_id>.appspot.com for the GCR bucket. 3. Under the Permissions tab, modify permissions of the identified GKE Service Account via the drop-down role menu and change to the Role to Storage Object Viewer for read-only access. For an account that inherits access to the bucket through Project level permissions: 1. Go to IAM console by visiting: https://console.cloud.google.com/iam-admin. 2. From the list of accounts, identify the required service account and select the corresponding pencil icon. 3. Remove the Storage Admin / Storage Object Admin / Storage Object Creator roles. 4. Add the Storage Object Viewer role - note with caution that this permits the account to view all objects stored in GCS for the project. 5. Click SAVE. Using Command Line: For an account explicitly granted to the bucket: Firstly add read access to the Kubernetes Service Account: gsutil iam ch <type>:<email_address>:objectViewer gs://artifacts.<project_id>.appspot.com where: \u2022 <type> can be one of the following: o user, if the <email_address> is a Google account. o serviceAccount, if <email_address> specifies a Service account. o <email_address> can be one of the following: \u25aa a Google account (for example, someone@example.com). \u25aa a Cloud IAM service account. Then remove the excessively privileged role (Storage Admin / Storage Object Admin / Storage Object Creator) using: gsutil iam ch -d <type>:<email_address>:<role> gs://artifacts.<project_id>.appspot.com For an account that inherits access to the GCR Bucket through Project level permissions, modify the Projects IAM policy file accordingly, then upload it using: gcloud projects set-iam-policy <project_id> <policy_file> Default Value: The default permissions for the cluster Service account is dependent on the initial configuration and IAM policy. References: 1. https://cloud.google.com/container-registry/docs/ 2. https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts 3. https://cloud.google.com/kubernetes-engine/docs/how-to/iam",
    "function_names": [
      "compute_cluster_service_account_artifact_registry_read_only",
      "compute_cluster_service_account_storage_object_read_only",
      "compute_cluster_service_account_gcr_read_only",
      "compute_cluster_service_account_ar_read_only",
      "compute_cluster_service_account_image_repo_read_only"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "A separate dedicated service account may be required for use by build servers and other robot users pushing or managing container images. Any account granted the Storage Object Viewer role at the project level can view all objects stored in GCS for the project.",
    "references": "1. https://cloud.google.com/container-registry/docs/ 2. https://cloud.google.com/kubernetes-engine/docs/how-to/service-accounts 3. https://cloud.google.com/kubernetes-engine/docs/how-to/iam"
  },
  {
    "id": "5.1.4",
    "title": "Ensure only trusted container images are used",
    "assessment": "Manual",
    "description": "Use Binary Authorization to allowlist (whitelist) only approved container registries.",
    "rationale": "Allowing unrestricted access to external container registries provides the opportunity for malicious or unapproved containers to be deployed into the cluster. Ensuring only trusted container images are used reduces this risk. Also see recommendation 5.10.4. Impact: All container images to be deployed to the cluster must be hosted within an approved container image registry. If public registries are not on the allowlist, a process for bringing commonly used container images into an approved private registry and keeping them up to date will be required.",
    "audit": "Using Google Cloud Console: Check that Binary Authorization is enabled for the GKE cluster: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Click on the cluster and on the Details pane, ensure that Binary Authorization is set to 'Enabled'. Then assess the contents of the policy: 1. Go to Binary Authorization by visiting: https://console.cloud.google.com/security/binary-authorization 2. Ensure the project default rule is not set to 'Allow all images' under Policy deployment rules. 3. Review the list of 'Images exempt from policy' for unauthorized container registries. Using Command Line: Check that Binary Authorization is enabled for the GKE cluster: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq .binaryAuthorization This will return the following if Binary Authorization is enabled: { \"enabled\": true } Then assess the contents of the policy: gcloud container binauthz policy export > current-policy.yaml Ensure that the current policy is not configured to allow all images (evaluationMode: ALWAYS_ALLOW). Review the list of admissionWhitelistPatterns for unauthorized container registries. cat current-policy.yaml admissionWhitelistPatterns: ... defaultAdmissionRule: evaluationMode: ALWAYS_ALLOW",
    "remediation": "Using Google Cloud Console: 1. Go to Binary Authorization by visiting: https://console.cloud.google.com/security/binary-authorization 2. Enable Binary Authorization API (if disabled). 3. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 4. Select Kubernetes cluster for which Binary Authorization is disabled. 5. Within the Details pane, under the Security heading, click on the pencil icon called Edit binary authorization. 6. Ensure that Enable Binary Authorization is checked. 7. Click SAVE CHANGES. 8. Return to the Binary Authorization by visiting: https://console.cloud.google.com/security/binary-authorization. 9. Set an appropriate policy for the cluster and enter the approved container registries under Image paths. Using Command Line: Update the cluster to enable Binary Authorization: gcloud container cluster update <cluster_name> --enable-binauthz Create a Binary Authorization Policy using the Binary Authorization Policy Reference: https://cloud.google.com/binary-authorization/docs/policy-yaml-reference for guidance. Import the policy file into Binary Authorization: gcloud container binauthz policy import <yaml_policy> Default Value: By default, Binary Authorization is disabled along with container registry allowlisting. References: 1. https://cloud.google.com/binary-authorization/docs/policy-yaml-reference 2. https://cloud.google.com/binary-authorization/docs/setting-up",
    "function_names": [
      "container_registry_image_allowlist_enabled",
      "container_registry_image_trusted_sources_only",
      "container_registry_image_approved_registries_only",
      "container_registry_image_binary_authorization_enabled",
      "container_registry_image_whitelist_enforced",
      "container_registry_image_source_restricted",
      "container_registry_image_approved_origins_only"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "All container images to be deployed to the cluster must be hosted within an approved container image registry. If public registries are not on the allowlist, a process for bringing commonly used container images into an approved private registry and keeping them up to date will be required.",
    "references": "1. https://cloud.google.com/binary-authorization/docs/policy-yaml-reference 2. https://cloud.google.com/binary-authorization/docs/setting-up"
  },
  {
    "id": "5.2.1",
    "title": "Ensure GKE clusters are not running using the Compute Engine default service account",
    "assessment": "Automated",
    "description": "Create and use minimally privileged Service accounts to run GKE cluster nodes instead of using the Compute Engine default Service account. Unnecessary permissions could be abused in the case of a node compromise.",
    "rationale": "A GCP service account (as distinct from a Kubernetes ServiceAccount) is an identity that an instance or an application can be used to run GCP API requests. This identity is used to identify virtual machine instances to other Google Cloud Platform services. By default, Kubernetes Engine nodes use the Compute Engine default service account. This account has broad access by default, as defined by access scopes, making it useful to a wide variety of applications on the VM, but it has more permissions than are required to run your Kubernetes Engine cluster. A minimally privileged service account should be created and used to run the Kubernetes Engine cluster instead of using the Compute Engine default service account, and create separate service accounts for each Kubernetes Workload (See recommendation 5.2.2). Kubernetes Engine requires, at a minimum, the node service account to have the monitoring.viewer, monitoring.metricWriter, and logging.logWriter roles. Additional roles may need to be added for the nodes to pull images from GCR. Impact: Instances are automatically granted the https://www.googleapis.com/auth/cloud- platform scope to allow full access to all Google Cloud APIs. This is so that the IAM permissions of the instance are completely determined by the IAM roles of the Service account. Thus if Kubernetes workloads were using cluster access scopes to perform actions using Google APIs, they may no longer be able to, if not permitted by the permissions of the Service account. To remediate, follow recommendation 5.2.2. The Service account roles listed here are the minimum required to run the cluster. Additional roles may be required to pull from a private instance of Google Container Registry (GCR).",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Select the cluster under test and click on each Node pool to bring up the Node pool details page. Ensure that for each Node pool the Service account is not set to default under the Security heading. To check the permissions allocated to the service account are the minimum required for cluster operation: 1. Go to IAM by visiting https://console.cloud.google.com/iam-admin/iam 2. From the list of Service accounts, ensure each cluster Service account has only the following roles: \u2022 Logs Writer \u2022 Monitoring Metric Writer \u2022 Monitoring Viewer Using Command line: To check which Service account is set for an existing cluster, run the following command: gcloud container node-pools describe $NODE_POOL --cluster $CLUSTER_NAME -- zone $COMPUTE_ZONE --format json | jq '.config.serviceAccount' The output of the above command will return default if default Service account is used for Project access. To check that the permissions allocated to the service account are the minimum required for cluster operation: gcloud projects get-iam-policy <project_id> \\ --flatten=\"bindings[].members\" \\ --format='table(bindings.role)' \\ --filter=\"bindings.members:<service_account>\" Review the output to ensure that the service account only has the roles required to run the cluster: \u2022 roles/logging.logWriter \u2022 roles/monitoring.metricWriter \u2022 roles/monitoring.viewer",
    "remediation": "Using Google Cloud Console: To create a minimally privileged service account: 1. Go to Service Accounts by visiting: https://console.cloud.google.com/iam- admin/serviceaccounts. 2. Click on CREATE SERVICE ACCOUNT. 3. Enter Service Account Details. 4. Click CREATE AND CONTINUE. 5. Within Service Account permissions add the following roles: o Logs Writer. o Monitoring Metric Writer. o `Monitoring Viewer. 6. Click CONTINUE. 7. Grant users access to this service account and create keys as required. 8. Click DONE. To create a Node pool to use the Service account: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Click on the cluster name within which the Node pool will be launched. 3. Click on ADD NODE POOL. 4. Within the Node Pool details, select the Security subheading, and under `Identity defaults, select the minimally privileged service account from the Service Account drop-down. 5. Click `CREATE to launch the Node pool. Note: The workloads will need to be migrated to the new Node pool, and the old node pools that use the default service account should be deleted to complete the remediation. Using Command Line: To create a minimally privileged service account: gcloud iam service-accounts create <node_sa_name> --display-name \"GKE Node Service Account\" export NODE_SA_EMAIL=gcloud iam service-accounts list --format='value(email)' --filter='displayName:GKE Node Service Account' Grant the following roles to the service account: export PROJECT_ID=gcloud config get-value project gcloud projects add-iam-policy-binding <project_id> --member serviceAccount:<node_sa_email> --role roles/monitoring.metricWriter gcloud projects add-iam-policy-binding <project_id> --member serviceAccount:<node_sa_email> --role roles/monitoring.viewer gcloud projects add-iam-policy-binding <project_id> --member serviceAccount:<node_sa_email> --role roles/logging.logWriter To create a new Node pool using the Service account, run the following command: gcloud container node-pools create <node_pool> --service- account=<sa_name>@<project_id>.iam.gserviceaccount.com-- cluster=<cluster_name> --zone <compute_zone> Note: The workloads will need to be migrated to the new Node pool, and the old node pools that use the default service account should be deleted to complete the remediation. Default Value: By default, nodes use the Compute Engine default service account when you create a new cluster. References: 1. https://cloud.google.com/compute/docs/access/service- accounts#compute_engine_default_service_account",
    "function_names": [
      "gke_cluster_default_service_account_disabled",
      "gke_cluster_custom_service_account_used",
      "gke_cluster_node_minimal_privileges_enforced",
      "compute_engine_default_service_account_restricted",
      "gke_cluster_service_account_iam_roles_minimized"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Instances are automatically granted the https://www.googleapis.com/auth/cloud- platform scope to allow full access to all Google Cloud APIs. This is so that the IAM permissions of the instance are completely determined by the IAM roles of the Service account. Thus if Kubernetes workloads were using cluster access scopes to perform actions using Google APIs, they may no longer be able to, if not permitted by the permissions of the Service account. To remediate, follow recommendation 5.2.2. The Service account roles listed here are the minimum required to run the cluster. Additional roles may be required to pull from a private instance of Google Container Registry (GCR).",
    "references": "1. https://cloud.google.com/compute/docs/access/service- accounts#compute_engine_default_service_account"
  },
  {
    "id": "5.2.2",
    "title": "Prefer using dedicated GCP Service Accounts and Workload Identity",
    "assessment": "Manual",
    "description": "Kubernetes workloads should not use cluster node service accounts to authenticate to Google Cloud APIs. Each Kubernetes Workload that needs to authenticate to other Google services using Cloud IAM should be provisioned a dedicated Service account. Enabling Workload Identity manages the distribution and rotation of Service account keys for the workloads to use.",
    "rationale": "Manual approaches for authenticating Kubernetes workloads running on GKE against Google Cloud APIs are: storing service account keys as a Kubernetes secret (which introduces manual key rotation and potential for key compromise); or use of the underlying nodes' IAM Service account, which violates the principle of least privilege on a multitenanted node, when one pod needs to have access to a service, but every other pod on the node that uses the Service account does not. Once a relationship between a Kubernetes Service account and a GCP Service account has been configured, any workload running as the Kubernetes Service account automatically authenticates as the mapped GCP Service account when accessing Google Cloud APIs on a cluster with Workload Identity enabled. Impact: Workload Identity replaces the need to use Metadata Concealment and as such, the two approaches are incompatible. The sensitive metadata protected by Metadata Concealment is also protected by Workload Identity. When Workload Identity is enabled, the Compute Engine default Service account can not be used. Correspondingly, Workload Identity can't be used with Pods running in the host network. Workloads may also need to be modified in order for them to use Workload Identity, as described within: https://cloud.google.com/kubernetes- engine/docs/how-to/workload-identity GKE infrastructure pods such as Stackdriver will continue to use the Node's Service account.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on each cluster to bring up the Details pane, make sure for each cluster Workload Identity is set to 'Enabled' under the 'Cluster' section and ensure that the Workload Identity Namespace is set to the namespace of the GCP project containing the cluster, for example: <project_id>.svc.id.goog 3. Additionally, click on each Node pool within each cluster to observe the Node pool Details pane, and ensure that the GKE Metadata Server is 'Enabled'. Using Command Line: gcloud container clusters describe <cluster_name> --zone <cluster_zone> If Workload Identity is enabled, the following fields should be present, and the <project_id> should be set to the namespace of the GCP project containing the cluster: workloadIdentityConfig: identityNamespace:<project_id>.svc.id.goog For each Node pool, ensure the following is set. workloadMetadataConfig: nodeMetadata: GKE_METADATA_SERVER Each Kubernetes workload requiring Google Cloud API access will need to be manually audited to ensure that Workload Identity is being used and not some other method.",
    "remediation": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. From the list of clusters, select the cluster for which Workload Identity is disabled. 3. Within the Details pane, under the Security section, click on the pencil icon named Edit workload identity. 4. Enable Workload Identity and set the workload pool to the namespace of the Cloud project containing the cluster, for example: <project_id>.svc.id.goog. 5. Click SAVE CHANGES and wait for the cluster to update. 6. Once the cluster has updated, select each Node pool within the cluster Details page. 7. For each Node pool, select EDIT within the Node pool Details page 8. Within the Edit node pool pane, check the 'Enable GKE Metadata Server' checkbox and click SAVE. Using Command Line: gcloud container clusters update <cluster_name> --zone <cluster_zone> -- workload-pool <project_id>.svc.id.goog Note that existing Node pools are unaffected. New Node pools default to --workload- metadata-from-node=GKE_METADATA_SERVER. Then, modify existing Node pools to enable GKE_METADATA_SERVER: gcloud container node-pools update <node_pool_name> --cluster <cluster_name> --zone <cluster_zone> --workload-metadata=GKE_METADATA Workloads may need to be modified in order for them to use Workload Identity as described within: https://cloud.google.com/kubernetes-engine/docs/how-to/workload- identity. Also consider the effects on the availability of hosted workloads as Node pools are updated. It may be more appropriate to create new Node Pools. Default Value: By default, Workload Identity is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture 3. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity",
    "function_names": [
      "compute_cluster_node_no_default_service_account",
      "compute_workload_dedicated_service_account",
      "iam_workload_identity_enabled",
      "compute_workload_service_account_key_rotation",
      "iam_service_account_no_node_sharing",
      "compute_workload_service_account_provisioned",
      "iam_workload_identity_credentials_managed"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Workload Identity replaces the need to use Metadata Concealment and as such, the two approaches are incompatible. The sensitive metadata protected by Metadata Concealment is also protected by Workload Identity. When Workload Identity is enabled, the Compute Engine default Service account can not be used. Correspondingly, Workload Identity can't be used with Pods running in the host network. Workloads may also need to be modified in order for them to use Workload Identity, as described within: https://cloud.google.com/kubernetes- engine/docs/how-to/workload-identity GKE infrastructure pods such as Stackdriver will continue to use the Node's Service account.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity 2. https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture 3. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity"
  },
  {
    "id": "5.3.1",
    "title": "Ensure Kubernetes Secrets are encrypted using keys managed in Cloud KMS",
    "assessment": "Automated",
    "description": "Encrypt Kubernetes secrets, stored in etcd, at the application-layer using a customer- managed key in Cloud KMS.",
    "rationale": "By default, GKE encrypts customer content stored at rest, including Secrets. GKE handles and manages this default encryption for you without any additional action on your part. Application-layer Secrets Encryption provides an additional layer of security for sensitive data, such as user defined Secrets and Secrets required for the operation of the cluster, such as service account keys, which are all stored in etcd. Using this functionality, you can use a key, that you manage in Cloud KMS, to encrypt data at the application layer. This protects against attackers in the event that they manage to gain access to etcd. Impact: To use the Cloud KMS CryptoKey to protect etcd in the cluster, the 'Kubernetes Engine Service Agent' Service account must hold the 'Cloud KMS CryptoKey Encrypter/Decrypter' role.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on each cluster to bring up the Details pane, and ensure Application-layer Secrets Encryption is set to 'Enabled'. Using Command Line: gcloud container clusters describe $CLUSTER_NAME --zone $COMPUTE_ZONE -- format json | jq '.databaseEncryption' If configured correctly, the output from the command returns a response containing the following detail: keyName=projects/<key_project_id>/locations/<location>/keyRings/<ring_name>/c ryptoKeys/<key_name>] state=ENCRYPTED { \"currentState\": \"CURRENT_STATE_ENCRYPTED\", \"keyName\": \"projects/<key_project_id>/locations/us- central1/keyRings/<ring_name>/cryptoKeys/<key_name>\", \"state\": \"ENCRYPTED\" }",
    "remediation": "To enable Application-layer Secrets Encryption, several configuration items are required. These include: \u2022 A key ring \u2022 A key \u2022 A GKE service account with Cloud KMS CryptoKey Encrypter/Decrypter role Once these are created, Application-layer Secrets Encryption can be enabled on an existing or new cluster. Using Google Cloud Console: To create a key 1. Go to Cloud KMS by visiting https://console.cloud.google.com/security/kms. 2. Select CREATE KEY RING. 3. Enter a Key ring name and the region where the keys will be stored. 4. Click CREATE. 5. Enter a Key name and appropriate rotation period within the Create key pane. 6. Click CREATE. To enable on a new cluster 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Click CREATE CLUSTER, and choose the required cluster mode. 3. Within the Security heading, under CLUSTER, check Encrypt secrets at the application layer checkbox. 4. Select the kms key as the customer-managed key and, if prompted, grant permissions to the GKE Service account. 5. Click CREATE. To enable on an existing cluster 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the cluster to be updated. 3. Under the Details pane, within the Security heading, click on the pencil named Application-layer secrets encryption. 4. Enable Encrypt secrets at the application layer and choose a kms key. 5. Click SAVE CHANGES. Using Command Line: To create a key: Create a key ring: gcloud kms keyrings create <ring_name> --location <location> --project <key_project_id> Create a key: gcloud kms keys create <key_name> --location <location> --keyring <ring_name> --purpose encryption --project <key_project_id> Grant the Kubernetes Engine Service Agent service account the Cloud KMS CryptoKey Encrypter/Decrypter role: gcloud kms keys add-iam-policy-binding <key_name> --location <location> -- keyring <ring_name> --member serviceAccount:<service_account_name> --role roles/cloudkms.cryptoKeyEncrypterDecrypter --project <key_project_id> To create a new cluster with Application-layer Secrets Encryption: gcloud container clusters create <cluster_name> --cluster-version=latest -- zone <zone> --database-encryption-key projects/<key_project_id>/locations/<location>/keyRings/<ring_name>/cryptoKey s/<key_name> --project <cluster_project_id> To enable on an existing cluster: gcloud container clusters update <cluster_name> --zone <zone> --database- encryption-key projects/<key_project_id>/locations/<location>/keyRings/<ring_name>/cryptoKey s/<key_name> --project <cluster_project_id> Default Value: By default, Application-layer Secrets Encryption is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/encrypting-secrets",
    "function_names": [
      "kubernetes_secret_encryption_enabled",
      "kubernetes_secret_kms_key_managed",
      "kubernetes_secret_etcd_encryption_enabled",
      "kubernetes_secret_customer_managed_key",
      "kubernetes_secret_application_layer_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "To use the Cloud KMS CryptoKey to protect etcd in the cluster, the 'Kubernetes Engine Service Agent' Service account must hold the 'Cloud KMS CryptoKey Encrypter/Decrypter' role.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/encrypting-secrets"
  },
  {
    "id": "5.4.1",
    "title": "Ensure the GKE Metadata Server is Enabled",
    "assessment": "Automated",
    "description": "Running the GKE Metadata Server prevents workloads from accessing sensitive instance metadata and facilitates Workload Identity.",
    "rationale": "Every node stores its metadata on a metadata server. Some of this metadata, such as kubelet credentials and the VM instance identity token, is sensitive and should not be exposed to a Kubernetes workload. Enabling the GKE Metadata server prevents pods (that are not running on the host network) from accessing this metadata and facilitates Workload Identity. When unspecified, the default setting allows running pods to have full access to the node's underlying metadata server. Impact: The GKE Metadata Server must be run when using Workload Identity. Because Workload Identity replaces the need to use Metadata Concealment, the two approaches are incompatible. When the GKE Metadata Server and Workload Identity are enabled, unless the Pod is running on the host network, Pods cannot use the the Compute Engine default service account. Workloads may need modification in order for them to use Workload Identity as described within: https://cloud.google.com/kubernetes-engine/docs/how-to/workload- identity.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the name of the cluster of interest and for each Node pool within the cluster, open the Details pane, and ensure that the GKE Metadata Server is set to Enabled. Using Command Line To check whether the GKE Metadata Server is enabled for each Node pool within a cluster, run the following command: gcloud container clusters describe <cluster_name> --zone <cluster_zone> -- format json | jq .nodePools[].config.workloadMetadataConfig This should return the following for each Node pool: { \"mode\": \"GKE_METADATA\" } Null ({ }) is returned if the GKE Metadata Server is not enabled.",
    "remediation": "The GKE Metadata Server requires Workload Identity to be enabled on a cluster. Modify the cluster to enable Workload Identity and enable the GKE Metadata Server. Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, select the cluster for which Workload Identity is disabled. 3. Under the DETAILS pane, navigate down to the Security subsection. 4. Click on the pencil icon named Edit Workload Identity, click on Enable Workload Identity in the pop-up window, and select a workload pool from the drop-down box. By default, it will be the namespace of the Cloud project containing the cluster, for example: <project_id>.svc.id.goog. 5. Click SAVE CHANGES and wait for the cluster to update. 6. Once the cluster has updated, select each Node pool within the cluster Details page. 7. For each Node pool, select EDIT within the Node pool details page. 8. Within the Edit node pool pane, check the Enable GKE Metadata Server checkbox. 9. Click SAVE. Using Command Line gcloud container clusters update <cluster_name> --identity- namespace=<project_id>.svc.id.goog Note that existing Node pools are unaffected. New Node pools default to --workload- metadata-from-node=GKE_METADATA_SERVER. To modify an existing Node pool to enable GKE Metadata Server: gcloud container node-pools update <node_pool_name> --cluster=<cluster_name> --workload-metadata-from-node=GKE_METADATA_SERVER Workloads may need modification in order for them to use Workload Identity as described within: https://cloud.google.com/kubernetes-engine/docs/how-to/workload- identity. Default Value: By default, running pods to have full access to the node's underlying metadata server. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/protecting-cluster- metadata#concealment 2. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity 3. https://cloud.google.com/kubernetes-engine/docs/concepts/workload-identity",
    "function_names": [
      "gke_cluster_metadata_server_enabled",
      "gke_node_metadata_server_enabled",
      "gke_workload_metadata_server_enabled",
      "gke_metadata_server_workload_identity_enabled",
      "gke_metadata_server_sensitive_access_blocked"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "The GKE Metadata Server must be run when using Workload Identity. Because Workload Identity replaces the need to use Metadata Concealment, the two approaches are incompatible. When the GKE Metadata Server and Workload Identity are enabled, unless the Pod is running on the host network, Pods cannot use the the Compute Engine default service account. Workloads may need modification in order for them to use Workload Identity as described within: https://cloud.google.com/kubernetes-engine/docs/how-to/workload- identity.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/protecting-cluster- metadata#concealment 2. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity 3. https://cloud.google.com/kubernetes-engine/docs/concepts/workload-identity"
  },
  {
    "id": "5.5.1",
    "title": "Ensure Container-Optimized OS (cos_containerd) is used for GKE node images",
    "assessment": "Automated",
    "description": "Use Container-Optimized OS (cos_containerd) as a managed, optimized and hardened base OS that limits the host's attack surface.",
    "rationale": "COS is an operating system image for Compute Engine VMs optimized for running containers. With COS, the containers can be brought up on Google Cloud Platform quickly, efficiently, and securely. Using COS as the node image provides the following benefits: \u2022 Run containers out of the box: COS instances come pre-installed with the container runtime and cloud-init. With a COS instance, the container can be brought up at the same time as the VM is created, with no on-host setup required. \u2022 Smaller attack surface: COS has a smaller footprint, reducing the instance's potential attack surface. \u2022 Locked-down by default: COS instances include a locked-down firewall and other security settings by default. Impact: If modifying an existing cluster's Node pool to run COS, the upgrade operation used is long-running and will block other operations on the cluster (including delete) until it has run to completion. COS nodes also provide an option with containerd as the main container runtime directly integrated with Kubernetes instead of docker. Thus, on these nodes, Docker cannot view or access containers or images managed by Kubernetes. Applications should not interact with Docker directly. For general troubleshooting or debugging, use crictl instead.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. From the list of clusters, select the cluster under test. 3. Under the 'Node pools' section, make sure that for each of the Node pools, 'Container-Optimized OS (cos_containerd)' is listed in the 'Image type' column. Using Command line: To check Node image type for an existing cluster's Node pool: gcloud container node-pools describe <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --format json | jq '.config.imageType' The output of the above command returns COS_CONTAINERD, if COS_CONTAINERD is used for Node images.",
    "remediation": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the Kubernetes cluster which does not use COS. 3. Under the Node pools heading, select the Node Pool that requires alteration. 4. Click EDIT. 5. Under the Image Type heading click CHANGE. 6. From the pop-up menu select Container-optimised OS with containerd (cos_containerd) (default) and click CHANGE 7. Repeat for all non-compliant Node pools. Using Command Line: To set the node image to cos for an existing cluster's Node pool: gcloud container clusters upgrade <cluster_name> --image-type cos_containerd --zone <compute_zone> --node-pool <node_pool_name> Default Value: Container-optimised OS with containerd (cos_containerd) (default) is the default option for a cluster node image. References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/using-containerd 2. https://cloud.google.com/kubernetes-engine/docs/concepts/node-images",
    "function_names": [
      "gke_node_image_optimized_os_used",
      "gke_node_image_cos_containerd_required",
      "gke_node_image_secure_base_os_enabled",
      "gke_node_image_hardened_os_used",
      "gke_node_image_attack_surface_minimized"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "If modifying an existing cluster's Node pool to run COS, the upgrade operation used is long-running and will block other operations on the cluster (including delete) until it has run to completion. COS nodes also provide an option with containerd as the main container runtime directly integrated with Kubernetes instead of docker. Thus, on these nodes, Docker cannot view or access containers or images managed by Kubernetes. Applications should not interact with Docker directly. For general troubleshooting or debugging, use crictl instead.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/using-containerd 2. https://cloud.google.com/kubernetes-engine/docs/concepts/node-images"
  },
  {
    "id": "5.5.2",
    "title": "Ensure Node Auto-Repair is enabled for GKE nodes",
    "assessment": "Automated",
    "description": "Nodes in a degraded state are an unknown quantity and so may pose a security risk.",
    "rationale": "Kubernetes Engine's node auto-repair feature helps you keep the nodes in the cluster in a healthy, running state. When enabled, Kubernetes Engine makes periodic checks on the health state of each node in the cluster. If a node fails consecutive health checks over an extended time period, Kubernetes Engine initiates a repair process for that node. Impact: If multiple nodes require repair, Kubernetes Engine might repair them in parallel. Kubernetes Engine limits number of repairs depending on the size of the cluster (bigger clusters have a higher limit) and the number of broken nodes in the cluster (limit decreases if many nodes are broken). Node auto-repair is not available on Alpha Clusters.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, select the desired cluster. For each Node pool, view the Node pool Details pane and ensure that under the 'Management' heading, 'Auto- repair' is set to 'Enabled'. Using Command Line: To check the existence of node auto-repair for an existing cluster's node pool, run: gcloud container node-pools describe <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --format json | jq '.management' Ensure the output of the above command has JSON key attribute autoRepair set to true: { \"autoRepair\": true }",
    "remediation": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Select the Kubernetes cluster containing the node pool for which auto-repair is disabled. 3. Select the Node pool by clicking on the name of the pool. 4. Navigate to the Node pool details pane and click EDIT. 5. Under the Management heading, check the Enable auto-repair box. 6. Click SAVE. 7. Repeat steps 2-6 for every cluster and node pool with auto-upgrade disabled. Using Command Line To enable node auto-repair for an existing cluster's Node pool: gcloud container node-pools update <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --enable-autorepair Default Value: Node auto-repair is enabled by default. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-repair",
    "function_names": [
      "gke_node_auto_repair_enabled",
      "gke_node_auto_repair_enabled_all_clusters",
      "gke_node_auto_repair_enabled_per_cluster",
      "gke_node_auto_repair_enabled_default_pool",
      "gke_node_auto_repair_enabled_custom_pool"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "If multiple nodes require repair, Kubernetes Engine might repair them in parallel. Kubernetes Engine limits number of repairs depending on the size of the cluster (bigger clusters have a higher limit) and the number of broken nodes in the cluster (limit decreases if many nodes are broken). Node auto-repair is not available on Alpha Clusters.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-repair"
  },
  {
    "id": "5.5.3",
    "title": "Ensure Node Auto-Upgrade is enabled for GKE nodes",
    "assessment": "Automated",
    "description": "Node auto-upgrade keeps nodes at the current Kubernetes and OS security patch level to mitigate known vulnerabilities.",
    "rationale": "Node auto-upgrade helps you keep the nodes in the cluster or node pool up to date with the latest stable patch version of Kubernetes as well as the underlying node operating system. Node auto-upgrade uses the same update mechanism as manual node upgrades. Node pools with node auto-upgrade enabled are automatically scheduled for upgrades when a new stable Kubernetes version becomes available. When the upgrade is performed, the Node pool is upgraded to match the current cluster master version. From a security perspective, this has the benefit of applying security updates automatically to the Kubernetes Engine when security fixes are released. Impact: Enabling node auto-upgrade does not cause the nodes to upgrade immediately. Automatic upgrades occur at regular intervals at the discretion of the Kubernetes Engine team. To prevent upgrades occurring during a peak period for the cluster, a maintenance window should be defined. A maintenance window is a four-hour timeframe that can be chosen, during which automatic upgrades should occur. Upgrades can occur on any day of the week, and at any time within the timeframe. To prevent upgrades from occurring during certain dates, a maintenance exclusion should be defined. A maintenance exclusion can span multiple days.",
    "audit": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, select the desired cluster. For each Node pool, view the Node pool Details pane and ensure that under the 'Management' heading, 'Auto- upgrade' is set to 'Enabled'. Using Command Line To check the existence of node auto-upgrade for an existing cluster's Node pool, run: gcloud container node-pools describe <node_pool_name> --cluster <cluster_name> --zone <cluster_zone> --format json | jq '.management' Ensure the output of the above command has JSON key attribute autoUpgrade set to true: { \"autoUpgrade\": true } If node auto-upgrade is disabled, the output of the above command output will not contain the autoUpgrade entry.",
    "remediation": "Using Google Cloud Console 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the Kubernetes cluster containing the node pool for which auto-upgrade disabled. 3. Select the Node pool by clicking on the name of the pool. 4. Navigate to the Node pool details pane and click EDIT. 5. Under the Management heading, check the Enable auto-repair box. 6. Click SAVE. 7. Repeat steps 2-6 for every cluster and node pool with auto-upgrade disabled. Using Command Line To enable node auto-upgrade for an existing cluster's Node pool, run the following command: gcloud container node-pools update <node_pool_name> --cluster <cluster_name> --zone <cluster_zone> --enable-autoupgrade Default Value: Node auto-upgrade is enabled by default. Even if a cluster has been created with node auto-repair enabled, this only applies to the default Node pool. Subsequent node pools do not have node auto-upgrade enabled by default. References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades 2. https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows- and-exclusions Additional Information: Node auto-upgrades is not available for Alpha Clusters.",
    "function_names": [
      "gke_node_auto_upgrade_enabled",
      "gke_node_auto_upgrade_enabled_all_clusters",
      "gke_node_auto_upgrade_enabled_min_version",
      "gke_node_auto_upgrade_enabled_security_patch_level",
      "gke_node_auto_upgrade_enabled_all_node_pools"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Enabling node auto-upgrade does not cause the nodes to upgrade immediately. Automatic upgrades occur at regular intervals at the discretion of the Kubernetes Engine team. To prevent upgrades occurring during a peak period for the cluster, a maintenance window should be defined. A maintenance window is a four-hour timeframe that can be chosen, during which automatic upgrades should occur. Upgrades can occur on any day of the week, and at any time within the timeframe. To prevent upgrades from occurring during certain dates, a maintenance exclusion should be defined. A maintenance exclusion can span multiple days.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades 2. https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows- and-exclusions Additional Information: Node auto-upgrades is not available for Alpha Clusters."
  },
  {
    "id": "5.5.4",
    "title": "When creating New Clusters - Automate GKE version management using Release Channels",
    "assessment": "Automated",
    "description": "Subscribe to the Regular or Stable Release Channel to automate version upgrades to the GKE cluster and to reduce version management complexity to the number of features and level of stability required.",
    "rationale": "Release Channels signal a graduating level of stability and production-readiness. These are based on observed performance of GKE clusters running that version and represent experience and confidence in the cluster version. The Regular release channel upgrades every few weeks and is for production users who need features not yet offered in the Stable channel. These versions have passed internal validation, but don't have enough historical data to guarantee their stability. Known issues generally have known workarounds. The Stable release channel upgrades every few months and is for production users who need stability above all else, and for whom frequent upgrades are too risky. These versions have passed internal validation and have been shown to be stable and reliable in production, based on the observed performance of those clusters. Critical security patches are delivered to all release channels. Impact: Once release channels are enabled on a cluster, they cannot be disabled. To stop using release channels, the cluster must be recreated without the --release-channel flag. Node auto-upgrade is enabled (and cannot be disabled), so the cluster is updated automatically from releases available in the chosen release channel.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. From the list of clusters, select the desired cluster. 3. Within the Details pane, if using a release channel, the release channel should be set to the Regular or Stable channel. Using Command Line: Run the following command: gcloud container clusters describe $CLUSTER_NAME --zone $COMPUTE_ZONE -- format json | jq .releaseChannel.channel Returned Value: \"REGULAR\" The output of the above command will return regular or stable if these release channels are being used to manage automatic upgrades for the cluster.",
    "remediation": "Currently, cluster Release Channels are only configurable at cluster provisioning time. Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Click CREATE, and choose CONFIGURE for the required cluster mode. 3. Under the Control plane version heading, click the Release Channels button. 4. Select the Regular or Stable channels from the Release Channel drop-down menu. 5. Configure the rest of the cluster settings as required. 6. Click CREATE. Using Command Line: Create a new cluster by running the following command: gcloud container clusters create <cluster_name> --zone <cluster_zone> -- release-channel <release_channel> where <release_channel> is stable or regular, according to requirements. Default Value: Currently, release channels are not enabled by default. References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels 2. https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-upgrades 3. https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows- and-exclusions",
    "function_names": [
      "gke_cluster_release_channel_subscribed",
      "gke_cluster_automated_version_management",
      "gke_cluster_regular_channel_enabled",
      "gke_cluster_stable_channel_enabled",
      "gke_cluster_version_upgrades_automated",
      "gke_cluster_release_channel_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Once release channels are enabled on a cluster, they cannot be disabled. To stop using release channels, the cluster must be recreated without the --release-channel flag. Node auto-upgrade is enabled (and cannot be disabled), so the cluster is updated automatically from releases available in the chosen release channel.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels 2. https://cloud.google.com/kubernetes-engine/docs/how-to/node-auto-upgrades 3. https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows- and-exclusions"
  },
  {
    "id": "5.5.5",
    "title": "Ensure Shielded GKE Nodes are Enabled",
    "assessment": "Automated",
    "description": "Shielded GKE Nodes provides verifiable integrity via secure boot, virtual trusted platform module (vTPM)-enabled measured boot, and integrity monitoring.",
    "rationale": "Shielded GKE nodes protects clusters against boot- or kernel-level malware or rootkits which persist beyond infected OS. Shielded GKE nodes run firmware which is signed and verified using Google's Certificate Authority, ensuring that the nodes' firmware is unmodified and establishing the root of trust for Secure Boot. GKE node identity is strongly protected via virtual Trusted Platform Module (vTPM) and verified remotely by the master node before the node joins the cluster. Lastly, GKE node integrity (i.e., boot sequence and kernel) is measured and can be monitored and verified remotely. Impact: After Shielded GKE Nodes is enabled in a cluster, any nodes created in a Node pool without Shielded GKE Nodes enabled, or created outside of any Node pool, aren't able to join the cluster. Shielded GKE Nodes can only be used with Container-Optimized OS (COS), COS with containerd, and Ubuntu node images.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Select the cluster under test from the list of clusters, and ensure that Shielded GKE Nodes are 'Enabled' under the Details pane. Using Command Line: Run the following command: gcloud container clusters describe <cluster_name> --format json | jq '.shieldedNodes' This will return the following if Shielded GKE Nodes are enabled: { \"enabled\": true }",
    "remediation": "Note: From version 1.18, clusters will have Shielded GKE nodes enabled by default. Using Google Cloud Console: To update an existing cluster to use Shielded GKE nodes: 1. Navigate to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the cluster which for which Shielded GKE Nodes is to be enabled. 3. With in the Details pane, under the Security heading, click on the pencil icon named Edit Shields GKE nodes. 4. Check the box named Enable Shield GKE nodes. 5. Click SAVE CHANGES. Using Command Line: To migrate an existing cluster, the flag --enable-shielded-nodes needs to be specified in the cluster update command: gcloud container clusters update <cluster_name> --zone <cluster_zone> -- enable-shielded-nodes Default Value: Clusters will have Shielded GKE nodes enabled by default, as of version v1.18 References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke-nodes",
    "function_names": [
      "gke_node_shielded_enabled",
      "gke_node_secure_boot_enabled",
      "gke_node_vtpm_enabled",
      "gke_node_integrity_monitoring_enabled",
      "gke_node_shielded_all_regions"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "After Shielded GKE Nodes is enabled in a cluster, any nodes created in a Node pool without Shielded GKE Nodes enabled, or created outside of any Node pool, aren't able to join the cluster. Shielded GKE Nodes can only be used with Container-Optimized OS (COS), COS with containerd, and Ubuntu node images.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke-nodes"
  },
  {
    "id": "5.5.6",
    "title": "Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled",
    "assessment": "Automated",
    "description": "Enable Integrity Monitoring for Shielded GKE Nodes to be notified of inconsistencies during the node boot sequence.",
    "rationale": "Integrity Monitoring provides active alerting for Shielded GKE nodes which allows administrators to respond to integrity failures and prevent compromised nodes from being deployed into the cluster. Impact: None.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the name of the cluster under test. 3. Open the Details pane for each Node pool within the cluster, and ensure that 'Integrity monitoring' is set to 'Enabled' under the Security heading. Using Command Line: To check if Integrity Monitoring is enabled for the Node pools in the cluster, run the following command for each Node pool: gcloud container node-pools describe <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --format json | jq .config.shieldedInstanceConfig This will return the following, if Integrity Monitoring is enabled: { \"enableIntegrityMonitoring\": true }",
    "remediation": "Once a Node pool is provisioned, it cannot be updated to enable Integrity Monitoring. New Node pools must be created within the cluster with Integrity Monitoring enabled. Using Google Cloud Console 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the cluster requiring the update and click ADD NODE POOL. 3. Ensure that the 'Integrity monitoring' checkbox is checked under the 'Shielded options' Heading. 4. Click SAVE. Workloads from existing non-conforming Node pools will need to be migrated to the newly created Node pool, then delete non-conforming Node pools to complete the remediation Using Command Line To create a Node pool within the cluster with Integrity Monitoring enabled, run the following command: gcloud container node-pools create <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --shielded-integrity-monitoring Workloads from existing non-conforming Node pools will need to be migrated to the newly created Node pool, then delete non-conforming Node pools to complete the remediation Default Value: Integrity Monitoring is disabled by default on GKE clusters. Integrity Monitoring is enabled by default for Shielded GKE Nodes; however, if Secure Boot is enabled at creation time, Integrity Monitoring is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke-nodes 2. https://cloud.google.com/compute/shielded-vm/docs/integrity-monitoring",
    "function_names": [
      "gke_node_integrity_monitoring_enabled",
      "gke_node_shielded_integrity_monitoring_enabled",
      "gke_shielded_node_boot_sequence_monitoring_enabled",
      "gke_node_boot_integrity_monitoring_enabled",
      "gke_shielded_node_integrity_monitoring_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "None.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke-nodes 2. https://cloud.google.com/compute/shielded-vm/docs/integrity-monitoring"
  },
  {
    "id": "5.5.7",
    "title": "Ensure Secure Boot for Shielded GKE Nodes is Enabled",
    "assessment": "Automated",
    "description": "Enable Secure Boot for Shielded GKE Nodes to verify the digital signature of node boot components.",
    "rationale": "An attacker may seek to alter boot components to persist malware or root kits during system initialisation. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Impact: Secure Boot will not permit the use of third-party unsigned kernel modules.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. From the list of clusters, click on the name of the cluster under test. 3. Open the Details pane for each Node pool within the cluster, and ensure that Secure boot is set to Enabled under the Security heading. Using Command Line: To check if Secure Boot is enabled for the Node pools in the cluster, run the following command for each Node pool: gcloud container node-pools describe <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --format json | jq .config.shieldedInstanceConfig This will return the value below, if Secure Boot is enabled: { \"enableSecureBoot\": true }",
    "remediation": "Once a Node pool is provisioned, it cannot be updated to enable Secure Boot. New Node pools must be created within the cluster with Secure Boot enabled. Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the cluster requiring the update and click ADD NODE POOL. 3. Ensure that the Secure boot checkbox is checked under the Shielded options Heading. 4. Click SAVE. Workloads will need to be migrated from existing non-conforming Node pools to the newly created Node pool, then delete the non-conforming pools. Using Command Line: To create a Node pool within the cluster with Secure Boot enabled, run the following command: gcloud container node-pools create <node_pool_name> --cluster <cluster_name> --zone <compute_zone> --shielded-secure-boot Workloads will need to be migrated from existing non-conforming Node pools to the newly created Node pool, then delete the non-conforming pools. Default Value: By default, Secure Boot is disabled in GKE clusters. By default, Secure Boot is disabled when Shielded GKE Nodes is enabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke- nodes#secure_boot 2. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster",
    "function_names": [
      "gke_node_secure_boot_enabled",
      "gke_shielded_node_secure_boot_enabled",
      "compute_shielded_node_secure_boot_enabled",
      "gke_node_boot_integrity_verified",
      "gke_shielded_node_boot_signature_verified"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Secure Boot will not permit the use of third-party unsigned kernel modules.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke- nodes#secure_boot 2. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster"
  },
  {
    "id": "5.6.1",
    "title": "Enable VPC Flow Logs and Intranode Visibility",
    "assessment": "Automated",
    "description": "Enable VPC Flow Logs and Intranode Visibility to see pod-level traffic, even for traffic within a worker node.",
    "rationale": "Enabling Intranode Visibility makes intranode pod to pod traffic visible to the networking fabric. With this feature, VPC Flow Logs or other VPC features can be used for intranode traffic. Impact: Enabling it on existing cluster causes the cluster master and the cluster nodes to restart, which might cause disruption.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Select the desired cluster, and under the Cluster section, make sure that Intranode visibility is set to Enabled. Using Command Line: Run this command: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.networkConfig.enableIntraNodeVisibility' The result should return true if Intranode Visibility is Enabled.",
    "remediation": "Enable Intranode Visibility: Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select Kubernetes clusters for which intranode visibility is disabled. 3. Within the Details pane, under the Network section, click on the pencil icon named Edit intranode visibility. 4. Check the box next to Enable Intranode visibility. 5. Click SAVE CHANGES. Using Command Line: To enable intranode visibility on an existing cluster, run the following command: gcloud container clusters update <cluster_name> --enable-intra-node- visibility Enable VPC Flow Logs: Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select Kubernetes clusters for which VPC Flow Logs are disabled. 3. Select Nodes tab. 4. Select Node Pool without VPC Flow Logs enabled. 5. Select an Instance Group within the node pool. 6. Select an Instance Group Member. 7. Select the Subnetwork under Network Interfaces. 8. Click on EDIT. 9. Set Flow logs to On. 10. Click SAVE. Using Command Line: 1. Find the subnetwork name associated with the cluster. gcloud container clusters describe <cluster_name> --region <cluster_region> - -format json | jq '.subnetwork'  2. Update the subnetwork to enable VPC Flow Logs. gcloud compute networks subnets update <subnet_name> --enable-flow-logs Default Value: By default, Intranode Visibility is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/intranode-visibility 2. https://cloud.google.com/vpc/docs/using-flow-logs",
    "function_names": [
      "vpc_flow_logs_enabled",
      "vpc_flow_logs_intranode_visibility_enabled",
      "vpc_flow_logs_pod_level_traffic_enabled",
      "vpc_flow_logs_worker_node_traffic_enabled",
      "vpc_flow_logs_all_regions_enabled",
      "vpc_flow_logs_retention_period_set",
      "vpc_flow_logs_destination_configured",
      "vpc_flow_logs_encryption_enabled",
      "vpc_flow_logs_log_group_exists",
      "vpc_flow_logs_iam_role_configured"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Enabling it on existing cluster causes the cluster master and the cluster nodes to restart, which might cause disruption.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/intranode-visibility 2. https://cloud.google.com/vpc/docs/using-flow-logs"
  },
  {
    "id": "5.6.2",
    "title": "Ensure use of VPC-native clusters",
    "assessment": "Automated",
    "description": "Create Alias IPs for the node network CIDR range in order to subsequently configure IP-based policies and firewalling for pods. A cluster that uses Alias IPs is called a VPC- native cluster.",
    "rationale": "Using Alias IPs has several benefits: \u2022 Pod IPs are reserved within the network ahead of time, which prevents conflict with other compute resources. \u2022 The networking layer can perform anti-spoofing checks to ensure that egress traffic is not sent with arbitrary source IPs. \u2022 Firewall controls for Pods can be applied separately from their nodes. \u2022 Alias IPs allow Pods to directly access hosted services without using a NAT gateway. Impact: You cannot currently migrate an existing cluster that uses routes for Pod routing to a cluster that uses Alias IPs. Cluster IPs for internal services remain only available from within the cluster. If you want to access a Kubernetes Service from within the VPC, but from outside of the cluster, use an internal load balancer.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. From the list of clusters, click on the desired cluster to open the Details page. Under the 'Networking' section, make sure 'VPC-native traffic routing' is set to 'Enabled'. Using Command Line: To check Alias IP is enabled for an existing cluster, run the following command: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.ipAllocationPolicy.useIpAliases' The output of the above command should return true, if VPC-native (using alias IP) is enabled. If VPC-native (using alias IP) is disabled, the above command will return null ({ }).",
    "remediation": "Alias IPs cannot be enabled on an existing cluster. To create a new cluster using Alias IPs, follow the instructions below. Using Google Cloud Console: If using Standard configuration mode: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Click CREATE CLUSTER, and select Standard configuration mode. 3. Configure your cluster as desired , then, click Networking under CLUSTER in the navigation pane. 4. In the 'VPC-native' section, leave 'Enable VPC-native (using alias IP)' selected 5. Click CREATE. If using Autopilot configuration mode: Note that this is VPC-native only and cannot be disable: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Click CREATE CLUSTER, and select Autopilot configuration mode. 3. Configure your cluster as required 4. Click CREATE. Using Command Line To enable Alias IP on a new cluster, run the following command: gcloud container clusters create <cluster_name> --zone <compute_zone> -- enable-ip-alias If using Autopilot configuration mode: gcloud container clusters create-auto <cluster_name> --zone <compute_zone> Default Value: By default, VPC-native (using alias IP) is enabled when you create a new cluster in the Google Cloud Console, however this is disabled when creating a new cluster using the gcloud CLI, unless the --enable-ip-alias argument is specified. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips 2. https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips",
    "function_names": [
      "compute_cluster_vpc_native_enabled",
      "compute_cluster_alias_ips_configured",
      "compute_cluster_pod_ip_based_policies_enabled",
      "compute_cluster_firewalling_for_pods_enabled",
      "compute_cluster_node_network_cidr_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "You cannot currently migrate an existing cluster that uses routes for Pod routing to a cluster that uses Alias IPs. Cluster IPs for internal services remain only available from within the cluster. If you want to access a Kubernetes Service from within the VPC, but from outside of the cluster, use an internal load balancer.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips 2. https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips"
  },
  {
    "id": "5.6.3",
    "title": "Ensure Control Plane Authorized Networks is Enabled",
    "assessment": "Automated",
    "description": "Enable Control Plane Authorized Networks to restrict access to the cluster's control plane to only an allowlist of authorized IPs.",
    "rationale": "Authorized networks are a way of specifying a restricted range of IP addresses that are permitted to access your cluster's control plane. Kubernetes Engine uses both Transport Layer Security (TLS) and authentication to provide secure access to your cluster's control plane from the public internet. This provides you the flexibility to administer your cluster from anywhere; however, you might want to further restrict access to a set of IP addresses that you control. You can set this restriction by specifying an authorized network. Control Plane Authorized Networks blocks untrusted IP addresses. Google Cloud Platform IPs (such as traffic from Compute Engine VMs) can reach your master through HTTPS provided that they have the necessary Kubernetes credentials. Restricting access to an authorized network can provide additional security benefits for your container cluster, including: \u2022 Better protection from outsider attacks: Authorized networks provide an additional layer of security by limiting external, non-GCP access to a specific set of addresses you designate, such as those that originate from your premises. This helps protect access to your cluster in the case of a vulnerability in the cluster's authentication or authorization mechanism. \u2022 Better protection from insider attacks: Authorized networks help protect your cluster from accidental leaks of master certificates from your company's premises. Leaked certificates used from outside GCP and outside the authorized IP ranges (for example, from addresses outside your company) are still denied access. Impact: When implementing Control Plane Authorized Networks, be careful to ensure all desired networks are on the allowlist to prevent inadvertently blocking external access to your cluster's control plane.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the cluster to open the Details page and make sure 'Master authorized networks' is set to 'Enabled'. Using Command Line: To check Master Authorized Networks status for an existing cluster, run the following command; gcloud container clusters update $CLUSTER_NAME --zone $COMPUTE_ZONE --enable- master-authorized-networks The output should return { \"enabled\": true } if Control Plane Authorized Networks is enabled. If Master Authorized Networks is disabled, the above command will return null ({ }).",
    "remediation": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Select Kubernetes clusters for which Control Plane Authorized Networks is disabled 3. Within the Details pane, under the Networking heading, click on the pencil icon named Edit control plane authorised networks. 4. Check the box next to Enable control plane authorised networks. 5. Click SAVE CHANGES. Using Command Line: To enable Control Plane Authorized Networks for an existing cluster, run the following command: gcloud container clusters update <cluster_name> --zone <compute_zone> -- enable-master-authorized-networks Along with this, you can list authorized networks using the --master-authorized- networks flag which contains a list of up to 20 external networks that are allowed to connect to your cluster's control plane through HTTPS. You provide these networks as a comma-separated list of addresses in CIDR notation (such as 90.90.100.0/24). Default Value: By default, Control Plane Authorized Networks is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/authorized-networks",
    "function_names": [
      "kubernetes_cluster_control_plane_authorized_networks_enabled",
      "kubernetes_cluster_control_plane_ip_allowlist_enabled",
      "kubernetes_cluster_control_plane_restricted_access_enabled",
      "kubernetes_cluster_control_plane_network_policy_enabled",
      "kubernetes_cluster_control_plane_ip_whitelist_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "When implementing Control Plane Authorized Networks, be careful to ensure all desired networks are on the allowlist to prevent inadvertently blocking external access to your cluster's control plane.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/authorized-networks"
  },
  {
    "id": "5.6.4",
    "title": "Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled",
    "assessment": "Automated",
    "description": "Disable access to the Kubernetes API from outside the node network if it is not required.",
    "rationale": "In a private cluster, the master node has two endpoints, a private and public endpoint. The private endpoint is the internal IP address of the master, behind an internal load balancer in the master's VPC network. Nodes communicate with the master using the private endpoint. The public endpoint enables the Kubernetes API to be accessed from outside the master's VPC network. Although Kubernetes API requires an authorized token to perform sensitive actions, a vulnerability could potentially expose the Kubernetes publically with unrestricted access. Additionally, an attacker may be able to identify the current cluster and Kubernetes API version and determine whether it is vulnerable to an attack. Unless required, disabling public endpoint will help prevent such threats, and require the attacker to be on the master's VPC network to perform any attack on the Kubernetes API. Impact: To enable a Private Endpoint, the cluster has to also be configured with private nodes, a private master IP range and IP aliasing enabled. If the Private Endpoint flag --enable-private-endpoint is passed to the gcloud CLI, or the external IP address undefined in the Google Cloud Console during cluster creation, then all access from a public IP address is prohibited.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Select the required cluster, and within the Details pane, make sure the 'Endpoint' does not have a public IP address. Using Command Line: Run this command: gcloud container clusters describe <cluster_name> --format json | jq '.privateClusterConfig.enablePrivateEndpoint' The output of the above command returns true if a Private Endpoint is enabled with Public Access disabled. For an additional check, the endpoint parameter can be queried with the following command: gcloud container clusters describe <cluster_name> --format json | jq '.endpoint' The output of the above command returns a private IP address if Private Endpoint is enabled with Public Access disabled.",
    "remediation": "Once a cluster is created without enabling Private Endpoint only, it cannot be remediated. Rather, the cluster must be recreated. Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Click CREATE CLUSTER, and choose CONFIGURE for the Standard mode cluster. 3. Configure the cluster as required then click Networking under CLUSTER in the navigation pane. 4. Under IPv4 network access, click the Private cluster radio button. 5. Uncheck the Access control plane using its external IP address checkbox. 6. In the Control plane IP range textbox, provide an IP range for the control plane. 7. Configure the other settings as required, and click CREATE. Using Command Line: Create a cluster with a Private Endpoint enabled and Public Access disabled by including the --enable-private-endpoint flag within the cluster create command: gcloud container clusters create <cluster_name> --enable-private-endpoint Setting this flag also requires the setting of --enable-private-nodes, --enable-ip- alias and --master-ipv4-cidr=<master_cidr_range>. Default Value: By default, the Private Endpoint is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters",
    "function_names": [
      "kubernetes_cluster_private_endpoint_enabled",
      "kubernetes_cluster_public_access_disabled",
      "kubernetes_cluster_network_access_restricted",
      "kubernetes_api_external_access_disabled",
      "kubernetes_cluster_endpoint_private_only",
      "kubernetes_api_public_access_blocked",
      "kubernetes_cluster_network_isolation_enabled",
      "kubernetes_api_internal_only_access"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "To enable a Private Endpoint, the cluster has to also be configured with private nodes, a private master IP range and IP aliasing enabled. If the Private Endpoint flag --enable-private-endpoint is passed to the gcloud CLI, or the external IP address undefined in the Google Cloud Console during cluster creation, then all access from a public IP address is prohibited.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters"
  },
  {
    "id": "5.6.5",
    "title": "Ensure clusters are created with Private Nodes",
    "assessment": "Automated",
    "description": "Private Nodes are nodes with no public IP addresses. Disable public IP addresses for cluster nodes, so that they only have private IP addresses.",
    "rationale": "Disabling public IP addresses on cluster nodes restricts access to only internal networks, forcing attackers to obtain local network access before attempting to compromise the underlying Kubernetes hosts. Impact: To enable Private Nodes, the cluster has to also be configured with a private master IP range and IP Aliasing enabled. Private Nodes do not have outbound access to the public internet. If you want to provide outbound Internet access for your private nodes, you can use Cloud NAT or you can manage your own NAT gateway. To access Google Cloud APIs and services from private nodes, Private Google Access needs to be set on Kubernetes Engine Cluster Subnets.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the desired cluster, and within the Details pane, make sure Private Clusters is set to Enabled. Using Command Line: Run this command: gcloud container clusters describe <cluster_name> --format json | jq '.privateClusterConfig.enablePrivateNodes' The output of the above command returns true if Private Nodes is enabled.",
    "remediation": "Once a cluster is created without enabling Private Nodes, it cannot be remediated. Rather the cluster must be recreated. Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Click CREATE CLUSTER. 3. Configure the cluster as required then click Networking under CLUSTER in the navigation pane. 4. Under IPv4 network access, click the Private cluster radio button. 5. Configure the other settings as required, and click CREATE. Using Command Line: To create a cluster with Private Nodes enabled, include the --enable-private-nodes flag within the cluster create command: gcloud container clusters create <cluster_name> --enable-private-nodes Setting this flag also requires the setting of --enable-ip-alias and --master-ipv4- cidr=<master_cidr_range>. Default Value: By default, Private Nodes are disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters",
    "function_names": [
      "compute_cluster_private_nodes_enabled",
      "compute_cluster_no_public_ips",
      "compute_node_private_ip_only",
      "compute_cluster_private_networking_enabled",
      "compute_node_public_ip_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "To enable Private Nodes, the cluster has to also be configured with a private master IP range and IP Aliasing enabled. Private Nodes do not have outbound access to the public internet. If you want to provide outbound Internet access for your private nodes, you can use Cloud NAT or you can manage your own NAT gateway. To access Google Cloud APIs and services from private nodes, Private Google Access needs to be set on Kubernetes Engine Cluster Subnets.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters"
  },
  {
    "id": "5.6.6",
    "title": "Consider firewalling GKE worker nodes",
    "assessment": "Manual",
    "description": "Reduce the network attack surface of GKE nodes by using Firewalls to restrict ingress and egress traffic.",
    "rationale": "Utilizing stringent ingress and egress firewall rules minimizes the ports and services exposed to an network-based attacker, whilst also restricting egress routes within or out of the cluster in the event that a compromised component attempts to form an outbound connection. Impact: All instances targeted by a firewall rule, either using a tag or a service account will be affected. Ensure there are no adverse effects on other instances using the target tag or service account before implementing the firewall rule.",
    "audit": "Using Google Cloud Console: 1. Go to Compute Engine by visiting: https://console.cloud.google.com/compute/instances. 2. For each instance within your cluster, use the 'more actions' menu (3 vertical dots) and select to 'View network details'. 3. If there are multiple network interfaces attached to the instance, select the network interface to view in the 'Network interface' details section and see all the rules that apply to the network interface, within the 'Firewall rules' tab. Make sure the firewall rules are appropriate for your environment. Using Command Line: For the instance being evaluated, obtain its Service account and tags: gcloud compute instances describe <instance_name> --zone <compute_zone> -- format json | jq '{tags: .tags.items[], serviceaccount:.serviceAccounts[].email, network: .networkInterfaces[].network}' This will return: { \"tags\": \"<tag>\", \"serviceaccount\": \"<service_account>\" \"network\": \"https://www.googleapis.com/compute/v1/projects/<project_id>/global/networks/ <network>\" } Then, observe the firewall rules applied to the instance by using the following command, replacing <tag> and <service_account> as appropriate: gcloud compute firewall-rules list \\ --format=\"table( name, network, direction, priority, sourceRanges.list():label=SRC_RANGES, destinationRanges.list():label=DEST_RANGES, allowed[].map().firewall_rule().list():label=ALLOW, denied[].map().firewall_rule().list():label=DENY, sourceTags.list():label=SRC_TAGS, sourceServiceAccounts.list():label=SRC_SVC_ACCT, targetTags.list():label=TARGET_TAGS, targetServiceAccounts.list():label=TARGET_SVC_ACCT, disabled )\" \\ --filter=\"targetTags.list():<tag> OR targetServiceAccounts.list():<service_account>\" Firewall rules may also be applied to a network without specifically targeting Tags or Service Accounts. These can be observed using the following, replacing <network> as appropriate: gcloud compute firewall-rules list \\ --format=\"table( name, network, direction, priority, sourceRanges.list():label=SRC_RANGES, destinationRanges.list():label=DEST_RANGES, allowed[].map().firewall_rule().list():label=ALLOW, denied[].map().firewall_rule().list():label=DENY, sourceTags.list():label=SRC_TAGS, sourceServiceAccounts.list():label=SRC_SVC_ACCT, targetTags.list():label=TARGET_TAGS, targetServiceAccounts.list():label=TARGET_SVC_ACCT, disabled )\" \\ --filter=\"network.list():<network> AND -targetTags.list():* AND - targetServiceAccounts.list():*\"",
    "remediation": "Using Google Cloud Console: 1. Go to Firewall Rules by visiting: https://console.cloud.google.com/networking/firewalls/list 2. Click CREATE FIREWALL RULE. 3. Configure the firewall rule as required. Ensure the firewall targets the nodes correctly, either selecting the nodes using tags (under Targets, select Specified target tags, and set Target tags to <tag>), or using the Service account associated with node (under Targets, select Specified service account, set Service account scope as appropriate, and Target service account to <service_account>). 4. Click CREATE. Using Command Line: Use the following command to generate firewall rules, setting the variables as appropriate: gcloud compute firewall-rules create <firewall_rule_name> --network <network> --priority <priority> --direction <direction> --action <action> --target-tags <tag> --target-service-accounts <service_account> --source-ranges <source_cidr_range> --source-tags <source_tags> --source-service-accounts <source_service_account> --destination-ranges <destination_cidr_range> -- rules <rules> Default Value: Every VPC network has two implied firewall rules. These rules exist, but are not shown in the Cloud Console: \u2022 The implied allow egress rule: An egress rule whose action is allow, destination is 0.0.0.0/0, and priority is the lowest possible (65535) lets any instance send traffic to any destination, except for traffic blocked by GCP. Outbound access may be restricted by a higher priority firewall rule. Internet access is allowed if no other firewall rules deny outbound traffic and if the instance has an external IP address or uses a NAT instance. \u2022 The implied deny ingress rule: An ingress rule whose action is deny, source is 0.0.0.0/0, and priority is the lowest possible (65535) protects all instances by blocking incoming traffic to them. Incoming access may be allowed by a higher priority rule. Note that the default network includes some additional rules that override this one, allowing certain types of incoming traffic. The implied rules cannot be removed, but they have the lowest possible priorities. References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture 2. https://cloud.google.com/vpc/docs/using-firewalls",
    "function_names": [
      "gke_node_firewall_restricted_ingress",
      "gke_node_firewall_restricted_egress",
      "gke_node_firewall_minimal_rules",
      "gke_node_firewall_default_deny",
      "gke_node_firewall_secure_ports_only",
      "gke_node_firewall_no_public_ingress",
      "gke_node_firewall_whitelisted_ips_only",
      "gke_node_firewall_logging_enabled",
      "gke_node_firewall_rule_review_required",
      "gke_node_firewall_secure_protocols_only"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "All instances targeted by a firewall rule, either using a tag or a service account will be affected. Ensure there are no adverse effects on other instances using the target tag or service account before implementing the firewall rule.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture 2. https://cloud.google.com/vpc/docs/using-firewalls"
  },
  {
    "id": "5.6.7",
    "title": "Ensure use of Google-managed SSL Certificates",
    "assessment": "Automated",
    "description": "Encrypt traffic to HTTPS load balancers using Google-managed SSL certificates.",
    "rationale": "Encrypting traffic between users and the Kubernetes workload is fundamental to protecting data sent over the web. Google-managed SSL Certificates are provisioned, renewed, and managed for domain names. This is only available for HTTPS load balancers created using Ingress Resources, and not TCP/UDP load balancers created using Service of type:LoadBalancer. Impact: Google-managed SSL Certificates are less flexible than certificates that are self obtained and managed. Managed certificates support a single, non-wildcard domain. Self-managed certificates can support wildcards and multiple subject alternative names (SANs).",
    "audit": "Using Command Line: Identify if there are any workloads exposed publicly using Services of type:LoadBalancer: kubectl get svc -A -o json | jq '.items[] | select(.spec.type==\"LoadBalancer\")' Consider using ingresses instead of these services in order to use Google managed SSL certificates. For the ingresses within the cluster, run the following command: kubectl get ingress -A -o json | jq .items[] | jq '{name: .metadata.name, annotations: .metadata.annotations, namespace: .metadata.namespace, status: .status}' The above command should return the name of the ingress, namespace, annotations and status. Check that the following annotation is present to ensure managed certificates are referenced. \"annotations\": { ... \"networking.gke.io/managed-certificates\": \"<example_certificate>\" }, For completeness, run the following command to ensure that the managed certificate resource exists: kubectl get managedcertificates -A The above command returns a list of managed certificates for which <example_certificate> should exist within the same namespace as the ingress.",
    "remediation": "If services of type:LoadBalancer are discovered, consider replacing the Service with an Ingress. To configure the Ingress and use Google-managed SSL certificates, follow the instructions as listed at: https://cloud.google.com/kubernetes-engine/docs/how- to/managed-certs. Default Value: By default, Google-managed SSL Certificates are not created when an Ingress resource is defined. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs 2. https://cloud.google.com/kubernetes-engine/docs/concepts/ingress",
    "function_names": [
      "cloud_cdn_load_balancer_google_managed_ssl_certificates",
      "cloud_cdn_load_balancer_ssl_certificate_google_managed",
      "compute_load_balancer_google_managed_ssl_certificates",
      "compute_load_balancer_ssl_certificate_google_managed",
      "cloud_cdn_ssl_certificate_google_managed",
      "compute_ssl_certificate_google_managed"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Google-managed SSL Certificates are less flexible than certificates that are self obtained and managed. Managed certificates support a single, non-wildcard domain. Self-managed certificates can support wildcards and multiple subject alternative names (SANs).",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/managed-certs 2. https://cloud.google.com/kubernetes-engine/docs/concepts/ingress"
  },
  {
    "id": "5.7.1",
    "title": "Ensure Logging and Cloud Monitoring is Enabled",
    "assessment": "Automated",
    "description": "Send logs and metrics to a remote aggregator to mitigate the risk of local tampering in the event of a breach.",
    "rationale": "Exporting logs and metrics to a dedicated, persistent datastore such as Cloud Operations for GKE ensures availability of audit data following a cluster security event, and provides a central location for analysis of log and metric data collated from multiple sources.",
    "audit": "Using Google Cloud Console: LOGGING AND CLOUD MONITORING SUPPORT (PREFERRED): 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the cluster of interest. 3. Under the details pane, within the Features section, ensure that Logging is Enabled. 4. Also ensure that Cloud Monitoring is Enabled LEGACY STACKDRIVER SUPPORT: This option cannot be check in the GCP console. Using Command Line: LOGGING AND CLOUD MONITORING SUPPORT (PREFERRED): Run the following commands: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.loggingService' gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.monitoringService' The output of the above commands should return logging.googleapis.com/kubernetes and monitoring.googleapis.com/kubernetes respectively if Logging and Cloud Monitoring is Enabled. LEGACY STACKDRIVER SUPPORT: Note: This functionality was decommissioned on 31st March 2021, kept here for posterity (see: https://cloud.google.com/stackdriver/docs/deprecations/legacy for more information) Both Logging and Monitoring support must be enabled. For Logging, run the following command: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.loggingService' The output should return logging.googleapis.com if Legacy Stackdriver Logging is Enabled. For Monitoring, run the following command: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.monitoringService' The output should return monitoring.googleapis.com if Legacy Stackdriver Monitoring is Enabled.",
    "remediation": "Using Google Cloud Console: To enable Logging: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the cluster for which Logging is disabled. 3. Under the details pane, within the Features section, click on the pencil icon named Edit logging. 4. Check the box next to Enable Logging. 5. In the drop-down Components box, select the components to be logged. 6. Click SAVE CHANGES, and wait for the cluster to update. To enable Cloud Monitoring: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select the cluster for which Logging is disabled. 3. Under the details pane, within the Features section, click on the pencil icon named Edit Cloud Monitoring. 4. Check the box next to Enable Cloud Monitoring. 5. In the drop-down Components box, select the components to be logged. 6. Click SAVE CHANGES, and wait for the cluster to update. Using Command Line: To enable Logging for an existing cluster, run the following command: gcloud container clusters update <cluster_name> --zone <compute_zone> -- logging=<components_to_be_logged> See https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#--logging for a list of available components for logging. To enable Cloud Monitoring for an existing cluster, run the following command: gcloud container clusters update <cluster_name> --zone <compute_zone> -- monitoring=<components_to_be_logged> See https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- monitoring for a list of available components for Cloud Monitoring. Default Value: Logging and Cloud Monitoring is enabled by default starting in GKE version 1.14; Legacy Logging and Monitoring support is enabled by default for earlier versions. References: 1. https://cloud.google.com/stackdriver/docs/solutions/gke/observing 2. https://cloud.google.com/stackdriver/docs/solutions/gke/managing-logs 3. https://cloud.google.com/stackdriver/docs/solutions/gke/installing 4. https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- logging 5. https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- monitoring",
    "function_names": [
      "cloudtrail_trail_logging_enabled",
      "cloudtrail_trail_multi_region_enabled",
      "cloudtrail_trail_log_file_validation_enabled",
      "cloudtrail_trail_logging_to_cloud_monitoring",
      "cloudtrail_trail_logging_all_regions",
      "cloudtrail_trail_logging_immutable_storage",
      "cloudtrail_trail_logging_centralized_account",
      "cloudtrail_trail_logging_retention_over_90d",
      "cloudtrail_trail_logging_encryption_enabled",
      "cloudtrail_trail_logging_monitoring_alerts_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://cloud.google.com/stackdriver/docs/solutions/gke/observing 2. https://cloud.google.com/stackdriver/docs/solutions/gke/managing-logs 3. https://cloud.google.com/stackdriver/docs/solutions/gke/installing 4. https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- logging 5. https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- monitoring"
  },
  {
    "id": "5.7.2",
    "title": "Enable Linux auditd logging",
    "assessment": "Manual",
    "description": "Run the auditd logging daemon to obtain verbose operating system logs from GKE nodes running Container-Optimized OS (COS).",
    "rationale": "Auditd logs provide valuable information about the state of the cluster and workloads, such as error messages, login attempts, and binary executions. This information can be used to debug issues or to investigate security incidents. Impact: Increased logging activity on a node increases resource usage on that node, which may affect the performance of the workload and may incur additional resource costs. Audit logs sent to Stackdriver consume log quota from the project. The log quota may require increasing and storage to accommodate the additional logs. Note that the provided logging daemonset only works on nodes running Container- Optimized OS (COS).",
    "audit": "Using Google Cloud Console 1. Navigate to the Kubernetes Engine workloads by visiting: https://console.cloud.google.com/kubernetes/workload 2. Observe the workloads and ensure that all filters are removed. 3. If the unmodified example auditd logging daemonset: https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-node- tools/master/os-audit/cos-auditd-logging.yaml is being used, ensure that the cos- auditd-logging daemonset is being run in the cos-auditd namespace with the number of running pods reporting as expected. Using Command Line: If using the unmodified example auditd logging daemonset, run: kubectl get daemonsets -n cos-audit and observe that the cos-auditd-logging daemonset is running as expected. If the name or namespace of the daemonset has been modified and is unknown, search for the container being used by the daemonset: kubectl get daemonsets -A -o json | jq '.items[] | select (.spec.template.spec.containers[].image | contains (\"gcr.io/stackdriver- agents/stackdriver-logging-agent\"))'| jq '{name: .metadata.name, annotations: .metadata.annotations.\"kubernetes.io/description\", namespace: .metadata.namespace, status: .status}' The above command returns the name, namespace and status of the daemonsets that use the Stackdriver logging agent. The example auditd logging daemonset has a description within the annotation as output by the command above: { \"name\": \"cos-auditd-logging\", \"annotations\": \"DaemonSet that enables Linux auditd logging on COS nodes.\", \"namespace\": \"cos-auditd\", \"status\": {... } } Ensure that the status fields return that the daemonset is running as expected.",
    "remediation": "Using Command Line: Download the example manifests: curl https://raw.githubusercontent.com/GoogleCloudPlatform/k8s-node- tools/master/os-audit/cos-auditd-logging.yaml > cos-auditd-logging.yaml Edit the example manifests if needed. Then, deploy them: kubectl apply -f cos-auditd-logging.yaml Verify that the logging Pods have started. If a different Namespace was defined in the manifests, replace cos-auditd with the name of the namespace being used: kubectl get pods --namespace=cos-auditd Default Value: By default, the auditd logging daemonset is not launched when a GKE cluster is created. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/linux-auditd-logging 2. https://cloud.google.com/container-optimized-os/docs",
    "function_names": [
      "compute_instance_auditd_logging_enabled",
      "compute_node_auditd_logging_enabled",
      "gke_node_auditd_logging_enabled",
      "linux_auditd_logging_enabled",
      "os_auditd_logging_enabled",
      "compute_instance_auditd_verbose_logging_enabled",
      "gke_node_auditd_verbose_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Increased logging activity on a node increases resource usage on that node, which may affect the performance of the workload and may incur additional resource costs. Audit logs sent to Stackdriver consume log quota from the project. The log quota may require increasing and storage to accommodate the additional logs. Note that the provided logging daemonset only works on nodes running Container- Optimized OS (COS).",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/linux-auditd-logging 2. https://cloud.google.com/container-optimized-os/docs"
  },
  {
    "id": "5.8.1",
    "title": "Ensure authentication using Client Certificates is Disabled",
    "assessment": "Automated",
    "description": "Disable Client Certificates, which require certificate rotation, for authentication. Instead, use another authentication method like OpenID Connect.",
    "rationale": "With Client Certificate authentication, a client presents a certificate that the API server verifies with the specified Certificate Authority. In GKE, Client Certificates are signed by the cluster root Certificate Authority. When retrieved, the Client Certificate is only base64 encoded and not encrypted. GKE manages authentication via gcloud for you using the OpenID Connect token method, setting up the Kubernetes configuration, getting an access token, and keeping it up to date. This means Basic Authentication using static passwords and Client Certificate authentication, which both require additional management overhead of key management and rotation, are not necessary and should be disabled. When Client Certificate authentication is disabled, you will still be able to authenticate to the cluster with other authentication methods, such as OpenID Connect tokens. See also Recommendation 6.8.1 to disable authentication using static passwords, known as Basic Authentication. Impact: Users will no longer be able to authenticate with the pre-provisioned x509 certificate. You will have to configure and use alternate authentication mechanisms, such as OpenID Connect tokens.",
    "audit": "The audit script for this recommendation utilizes 3 variables: $CLUSTER_NAME $COMPUTE_ZONE Please set these parameters on the system where you will be executing your gcloud audit script or command. Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. From the list of clusters, click on the desired cluster. On the Details pane, make sure 'Client certificate' is set to 'Disabled'. Using Command line To check that the client certificate has not been issued, run the following command: gcloud container clusters describe $CLUSTER_NAME \\ --zone $COMPUTE_ZONE \\ --format json | jq '.masterAuth.clientKey' The output of the above command returns null ({ }) if the client certificate has not been issued for the cluster (Client Certificate authentication is disabled). Note. Depreciated as of v1.19. For Basic Authentication, Legacy authorization can be edited for standard clusters but cannot be edited in Autopilot clusters.",
    "remediation": "Currently, there is no way to remove a client certificate from an existing cluster. Thus a new cluster must be created. Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. Click CREATE CLUSTER 3. Configure as required and the click on 'Availability, networking, security, and additional features' section 4. Ensure that the 'Issue a client certificate' checkbox is not ticked 5. Click CREATE. Using Command Line Create a new cluster without a Client Certificate: gcloud container clusters create [CLUSTER_NAME] \\ --no-issue-client-certificate Default Value: Google Kubernetes Engine (GKE), both Basic Authentication and Client Certificate issuance are disabled by default for new clusters. This change was implemented starting with GKE version 1.12 to enhance security by reducing the attack surface associated with these authentication methods. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#restrict_authn_methods",
    "function_names": [
      "compute_instance_client_certificates_disabled",
      "compute_load_balancer_client_certificates_disabled",
      "cloud_cdn_client_certificates_disabled",
      "api_gateway_client_certificates_disabled",
      "network_client_certificates_disabled",
      "app_gateway_client_certificates_disabled",
      "kubernetes_client_certificates_disabled",
      "container_client_certificates_disabled",
      "database_client_certificates_disabled",
      "storage_client_certificates_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Users will no longer be able to authenticate with the pre-provisioned x509 certificate. You will have to configure and use alternate authentication mechanisms, such as OpenID Connect tokens.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#restrict_authn_methods"
  },
  {
    "id": "5.8.2",
    "title": "Manage Kubernetes RBAC users with Google Groups for GKE",
    "assessment": "Manual",
    "description": "Cluster Administrators should leverage G Suite Groups and Cloud IAM to assign Kubernetes user roles to a collection of users, instead of to individual emails using only Cloud IAM.",
    "rationale": "On- and off-boarding users is often difficult to automate and prone to error. Using a single source of truth for user permissions via G Suite Groups reduces the number of locations that an individual must be off-boarded from, and prevents users gaining unique permissions sets that increase the cost of audit. Impact: When migrating to using security groups, an audit of RoleBindings and ClusterRoleBindings is required to ensure all users of the cluster are managed using the new groups and not individually. When managing RoleBindings and ClusterRoleBindings, be wary of inadvertently removing bindings required by service accounts.",
    "audit": "Using G Suite Admin Console and Google Cloud Console 1. Navigate to manage G Suite Groups in the Google Admin console at: https://admin.google.com/dashboard 2. Ensure there is a group named gke-security-groups@[yourdomain.com]. The group must be named exactly gke-security-groups. 3. Ensure only further groups (not individual users) are included in the gke- security-groups group as members. 4. Go to the Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 5. From the list of clusters, click on the desired cluster. In the Details pane, make sure Google Groups for RBAC is set to Enabled.",
    "remediation": "Follow the G Suite Groups instructions at: https://cloud.google.com/kubernetes- engine/docs/how-to/role-based-access-control#google-groups-for-gke. Then, create a cluster with: gcloud container clusters create <cluster_name> --security-group <security_group_name> Finally create Roles, ClusterRoles, RoleBindings, and ClusterRoleBindings that reference the G Suite Groups. Default Value: Google Groups for GKE is disabled by default. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/google-groups-rbac 2. https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access- control",
    "function_names": [
      "gke_cluster_google_groups_rbac_enabled",
      "gke_cluster_iam_user_roles_restricted",
      "gke_cluster_rbac_no_individual_emails",
      "gke_cluster_google_groups_managed",
      "gke_cluster_rbac_iam_integration_required"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "When migrating to using security groups, an audit of RoleBindings and ClusterRoleBindings is required to ensure all users of the cluster are managed using the new groups and not individually. When managing RoleBindings and ClusterRoleBindings, be wary of inadvertently removing bindings required by service accounts.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/google-groups-rbac 2. https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access- control"
  },
  {
    "id": "5.8.3",
    "title": "Ensure Legacy Authorization (ABAC) is Disabled",
    "assessment": "Automated",
    "description": "Legacy Authorization, also known as Attribute-Based Access Control (ABAC) has been superseded by Role-Based Access Control (RBAC) and is not under active development. RBAC is the recommended way to manage permissions in Kubernetes.",
    "rationale": "In Kubernetes, RBAC is used to grant permissions to resources at the cluster and namespace level. RBAC allows the definition of roles with rules containing a set of permissions, whilst the legacy authorizer (ABAC) in Kubernetes Engine grants broad, statically defined permissions. As RBAC provides significant security advantages over ABAC, it is recommended option for access control. Where possible, legacy authorization must be disabled for GKE clusters. Impact: Once the cluster has the legacy authorizer disabled, the user must be granted the ability to create authorization roles using RBAC to ensure that the role-based access control permissions take effect.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. From the list of clusters, click on each cluster to open the Details pane, and make sure 'Legacy Authorization' is set to 'Disabled'. Using Command Line: To check Legacy Authorization status for an existing cluster, run the following command: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.legacyAbac' The output should return null ({}) if Legacy Authorization is Disabled. If Legacy Authorization is Enabled, the above command will return true value.",
    "remediation": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Select Kubernetes clusters for which Legacy Authorization is enabled. 3. Click EDIT. 4. Set 'Legacy Authorization' to 'Disabled'. 5. Click SAVE. Using Command Line: To disable Legacy Authorization for an existing cluster, run the following command: gcloud container clusters update <cluster_name> --zone <compute_zone> --no- enable-legacy-authorization Default Value: Kubernetes Engine clusters running GKE version 1.8 and later disable the legacy authorization system by default, and thus role-based access control permissions take effect with no special action required. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access- control 2. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#leave_abac_disabled_default_for_110 Additional Information: On clusters running GKE 1.6 or 1.7, Kubernetes Service accounts have full permissions on the Kubernetes API by default. To ensure that the role-based access control permissions take effect for a Kubernetes service account, the cluster must be created or updated with the option --no-enable-legacy-authorization. This requirement is removed for clusters running GKE version 1.8 or higher.",
    "function_names": [
      "kubernetes_cluster_legacy_authorization_disabled",
      "kubernetes_cluster_abac_disabled",
      "kubernetes_cluster_rbac_enabled",
      "kubernetes_cluster_legacy_auth_disabled",
      "kubernetes_cluster_attribute_based_access_control_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Once the cluster has the legacy authorizer disabled, the user must be granted the ability to create authorization roles using RBAC to ensure that the role-based access control permissions take effect.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access- control 2. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#leave_abac_disabled_default_for_110 Additional Information: On clusters running GKE 1.6 or 1.7, Kubernetes Service accounts have full permissions on the Kubernetes API by default. To ensure that the role-based access control permissions take effect for a Kubernetes service account, the cluster must be created or updated with the option --no-enable-legacy-authorization. This requirement is removed for clusters running GKE version 1.8 or higher."
  },
  {
    "id": "5.9.1",
    "title": "Enable Customer-Managed Encryption Keys (CMEK) for GKE Persistent Disks (PD)",
    "assessment": "Manual",
    "description": "Use Customer-Managed Encryption Keys (CMEK) to encrypt dynamically-provisioned attached Google Compute Engine Persistent Disks (PDs) using keys managed within Cloud Key Management Service (Cloud KMS).",
    "rationale": "GCE persistent disks are encrypted at rest by default using envelope encryption with keys managed by Google. For additional protection, users can manage the Key Encryption Keys using Cloud KMS. Impact: Encryption of dynamically-provisioned attached disks requires the use of the self- provisioned Compute Engine Persistent Disk CSI Driver v0.5.1 or higher. If CMEK is being configured with a regional cluster, the cluster must run GKE 1.14 or higher.",
    "audit": "Using Google Cloud Console: 1. Go to Compute Engine Disks by visiting: https://console.cloud.google.com/compute/disks 2. Select each disk used by the cluster, and ensure the Encryption Type is listed as Customer Managed. Using Command Line: Identify the Persistent Volumes Used by the cluster: kubectl get pv -o json | jq '.items[].metadata.name' For each volume used, check that it is encrypted using a customer managed key by running the following command: gcloud compute disks describe <pv_name> --zone <compute_zone> --format json | jq '.diskEncryptionKey.kmsKeyName' This returns null ({ }) if a customer-managed encryption key is not used to encrypt the disk.",
    "remediation": "This cannot be remediated by updating an existing cluster. The node pool must either be recreated or a new cluster created. Using Google Cloud Console: This is not possible using Google Cloud Console. Using Command Line: Follow the instructions detailed at: https://cloud.google.com/kubernetes- engine/docs/how-to/using-cmek. Default Value: Persistent disks are encrypted at rest by default, but are not encrypted using Customer- Managed Encryption Keys by default. By default, the Compute Engine Persistent Disk CSI Driver is not provisioned within the cluster. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek 2. https://cloud.google.com/compute/docs/disks/customer-managed-encryption 3. https://cloud.google.com/security/encryption-at-rest/default-encryption/ 4. https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes 5. https://cloud.google.com/sdk/gcloud/reference/container/node-pools/create",
    "function_names": [
      "gke_persistent_disk_cmek_enabled",
      "gke_persistent_disk_customer_managed_key_used",
      "compute_persistent_disk_encryption_cmek_required",
      "kms_key_gke_persistent_disk_encryption_enabled",
      "gke_volume_encryption_customer_key_enforced",
      "compute_disk_cmek_encryption_active",
      "gke_storage_persistent_disk_cmek_compliant"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Encryption of dynamically-provisioned attached disks requires the use of the self- provisioned Compute Engine Persistent Disk CSI Driver v0.5.1 or higher. If CMEK is being configured with a regional cluster, the cluster must run GKE 1.14 or higher.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek 2. https://cloud.google.com/compute/docs/disks/customer-managed-encryption 3. https://cloud.google.com/security/encryption-at-rest/default-encryption/ 4. https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes 5. https://cloud.google.com/sdk/gcloud/reference/container/node-pools/create"
  },
  {
    "id": "5.9.2",
    "title": "Enable Customer-Managed Encryption Keys (CMEK) for Boot Disks",
    "assessment": "Automated",
    "description": "Use Customer-Managed Encryption Keys (CMEK) to encrypt node boot disks using keys managed within Cloud Key Management Service (Cloud KMS).",
    "rationale": "GCE persistent disks are encrypted at rest by default using envelope encryption with keys managed by Google. For additional protection, users can manage the Key Encryption Keys using Cloud KMS. Impact: Encryption of dynamically-provisioned attached disks requires the use of the self- provisioned Compute Engine Persistent Disk CSI Driver v0.5.1 or higher. If CMEK is being configured with a regional cluster, the cluster must run GKE 1.14 or higher.",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Click on each cluster, and click on any Node pools 3. On the Node pool Details page, under the Security heading, check that Boot disk encryption type is set to Customer managed with the desired key. Using Command Line: Run this command: gcloud container node-pools describe $NODE_POOL --cluster $CLUSTER_NAME -- zone $COMPUTE_ZONE Verify that the output of the above command includes a diskType of either pd- standard, pd-balanced or pd-ssd, and the bootDiskKmsKey is specified as the desired key.",
    "remediation": "This cannot be remediated by updating an existing cluster. The node pool must either be recreated or a new cluster created. Using Google Cloud Console: To create a new node pool: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Select Kubernetes clusters for which node boot disk CMEK is disabled. 3. Click ADD NODE POOL. 4. In the Nodes section, under machine configuration, ensure Boot disk type is Standard persistent disk or SSD persistent disk. 5. Select Enable customer-managed encryption for Boot Disk and select the Cloud KMS encryption key to be used. 6. Click CREATE. To create a new cluster: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Click CREATE and click `CONFIGURE for the required cluster mode. 3. Under NODE POOLS, expand the default-pool list and click Nodes. 4. In the Configure node settings pane, select Standard persistent disk or SSD Persistent Disk as the Boot disk type. 5. Select Enable customer-managed encryption for Boot Disk check box and choose the Cloud KMS encryption key to be used. 6. Configure the rest of the cluster settings as required. 7. Click CREATE. Using Command Line: Create a new node pool using customer-managed encryption keys for the node boot disk, of <disk_type> either pd-standard or pd-ssd: gcloud container node-pools create <cluster_name> --disk-type <disk_type> -- boot-disk-kms-key projects/<key_project_id>/locations/<location>/keyRings/<ring_name>/cryptoKey s/<key_name> Create a cluster using customer-managed encryption keys for the node boot disk, of <disk_type> either pd-standard or pd-ssd: gcloud container clusters create <cluster_name> --disk-type <disk_type> -- boot-disk-kms-key projects/<key_project_id>/locations/<location>/keyRings/<ring_name>/cryptoKey s/<key_name> Default Value: Persistent disks are encrypted at rest by default, but are not encrypted using Customer- Managed Encryption Keys by default. By default, the Compute Engine Persistent Disk CSI Driver is not provisioned within the cluster. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek 2. https://cloud.google.com/compute/docs/disks/customer-managed-encryption 3. https://cloud.google.com/security/encryption-at-rest/default-encryption/ 4. https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes 5. https://cloud.google.com/sdk/gcloud/reference/container/node-pools/create",
    "function_names": [
      "compute_disk_cmek_enabled",
      "compute_boot_disk_customer_key_encrypted",
      "compute_disk_kms_encryption_enabled",
      "compute_boot_disk_cmek_required",
      "compute_disk_encryption_customer_managed"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Encryption of dynamically-provisioned attached disks requires the use of the self- provisioned Compute Engine Persistent Disk CSI Driver v0.5.1 or higher. If CMEK is being configured with a regional cluster, the cluster must run GKE 1.14 or higher.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek 2. https://cloud.google.com/compute/docs/disks/customer-managed-encryption 3. https://cloud.google.com/security/encryption-at-rest/default-encryption/ 4. https://cloud.google.com/kubernetes-engine/docs/concepts/persistent-volumes 5. https://cloud.google.com/sdk/gcloud/reference/container/node-pools/create"
  },
  {
    "id": "5.10.1",
    "title": "Ensure Kubernetes Web UI is Disabled",
    "assessment": "Automated",
    "description": "Note: The Kubernetes web UI (Dashboard) does not have admin access by default in GKE 1.7 and higher. The Kubernetes web UI is disabled by default in GKE 1.10 and higher. In GKE 1.15 and higher, the Kubernetes web UI add-on KubernetesDashboard is no longer supported as a managed add-on. The Kubernetes Web UI (Dashboard) has been a historical source of vulnerability and should only be deployed when necessary.",
    "rationale": "You should disable the Kubernetes Web UI (Dashboard) when running on Kubernetes Engine. The Kubernetes Web UI is backed by a highly privileged Kubernetes Service Account. The Google Cloud Console provides all the required functionality of the Kubernetes Web UI and leverages Cloud IAM to restrict user access to sensitive cluster controls and settings. Impact: Users will be required to manage cluster resources using the Google Cloud Console or the command line. These require appropriate permissions. To use the command line, this requires the installation of the command line client, kubectl, on the user's device (this is already included in Cloud Shell) and knowledge of command line operations.",
    "audit": "Using Google Cloud Console: Currently not possible, due to the add-on having been removed. Must use the command line. Using Command Line: Run the following command: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq '.addonsConfig.kubernetesDashboard' Ensure the output of the above command has JSON key attribute disabled set to true: { \"disabled\": true }",
    "remediation": "Using Google Cloud Console: Currently not possible, due to the add-on having been removed. Must use the command line. Using Command Line: To disable the Kubernetes Dashboard on an existing cluster, run the following command: gcloud container clusters update <cluster_name> --zone <zone> --update- addons=KubernetesDashboard=DISABLED Default Value: The Kubernetes web UI (Dashboard) does not have admin access by default in GKE 1.7 and higher. The Kubernetes web UI is disabled by default in GKE 1.10 and higher. In GKE 1.15 and higher, the Kubernetes web UI add-on KubernetesDashboard is no longer supported as a managed add-on. References: 1. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#disable_kubernetes_dashboard",
    "function_names": [
      "kubernetes_dashboard_disabled",
      "kubernetes_web_ui_disabled",
      "kubernetes_dashboard_addon_disabled",
      "kubernetes_web_ui_no_admin_access",
      "kubernetes_dashboard_unsupported_addon",
      "kubernetes_web_ui_deprecated_disabled",
      "kubernetes_dashboard_legacy_disabled",
      "kubernetes_web_ui_secure_config",
      "kubernetes_dashboard_vulnerability_mitigated",
      "kubernetes_web_ui_minimal_deployment"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Users will be required to manage cluster resources using the Google Cloud Console or the command line. These require appropriate permissions. To use the command line, this requires the installation of the command line client, kubectl, on the user's device (this is already included in Cloud Shell) and knowledge of command line operations.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#disable_kubernetes_dashboard"
  },
  {
    "id": "5.10.2",
    "title": "Ensure that Alpha clusters are not used for production workloads",
    "assessment": "Automated",
    "description": "Alpha clusters are not covered by an SLA and are not production-ready.",
    "rationale": "Alpha clusters are designed for early adopters to experiment with workloads that take advantage of new features before those features are production-ready. They have all Kubernetes API features enabled, but are not covered by the GKE SLA, do not receive security updates, have node auto-upgrade and node auto-repair disabled, and cannot be upgraded. They are also automatically deleted after 30 days. Impact: Users and workloads will not be able to take advantage of features included within Alpha clusters.",
    "audit": "The audit script for this recommendation utilizes 3 variables: $CLUSTER_NAME $COMPUTE_ZONE Please set these parameters on the system where you will be executing your gcloud audit script or command. Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/list 2. If a cluster appears under the 'Kubernetes alpha clusters' heading, it is an Alpha cluster. Using Command Line Run the command: gcloud container clusters describe $CLUSTER_NAME \\ --zone $COMPUTE-ZONE \\ --format json | jq '.enableKubernetesAlpha' The output of the above command will return true if it is an Alpha cluster.",
    "remediation": "Alpha features cannot be disabled. To remediate, a new cluster must be created. Using Google Cloud Console 1. Go to Kubernetes Engine by visiting https://console.cloud.google.com/kubernetes/ 2. Click CREATE CLUSTER, and choose \"SWITCH TO STANDARD CLUSTER\" in the upper right corner of the screen. 3. Under Features in the the CLUSTER section, \"Enable Kubernetes alpha features in this cluster\" will not be available by default and to use Kubernetes alpha features in this cluster, first disable release channels. Note: It will only be available if the cluster is created with a Static version for the Control plane version, along with both Automatically upgrade nodes to the next available version and Enable auto-repair being checked under the Node pool details for each node. 4. Configure the other settings as required and click CREATE. Using Command Line: Upon creating a new cluster gcloud container clusters create [CLUSTER_NAME] \\ --zone [COMPUTE_ZONE] Do not use the --enable-kubernetes-alpha argument. Default Value: By default, Kubernetes Alpha features are disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/alpha-clusters",
    "function_names": [
      "compute_cluster_no_alpha_production",
      "compute_cluster_production_ready_sla",
      "compute_cluster_alpha_restricted",
      "compute_cluster_production_workloads_sla_compliant",
      "compute_cluster_alpha_usage_disallowed"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Users and workloads will not be able to take advantage of features included within Alpha clusters.",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/alpha-clusters"
  },
  {
    "id": "5.10.3",
    "title": "Consider GKE Sandbox for running untrusted workloads",
    "assessment": "Automated",
    "description": "Use GKE Sandbox to restrict untrusted workloads as an additional layer of protection when running in a multi-tenant environment.",
    "rationale": "GKE Sandbox provides an extra layer of security to prevent untrusted code from affecting the host kernel on your cluster nodes. When you enable GKE Sandbox on a Node pool, a sandbox is created for each Pod running on a node in that Node pool. In addition, nodes running sandboxed Pods are prevented from accessing other GCP services or cluster metadata. Each sandbox uses its own userspace kernel. Multi-tenant clusters and clusters whose containers run untrusted workloads are more exposed to security vulnerabilities than other clusters. Examples include SaaS providers, web-hosting providers, or other organizations that allow their users to upload and run code. A flaw in the container runtime or in the host kernel could allow a process running within a container to 'escape' the container and affect the node's kernel, potentially bringing down the node. The potential also exists for a malicious tenant to gain access to and exfiltrate another tenant's data in memory or on disk, by exploiting such a defect. Impact: Using GKE Sandbox requires the node image to be set to Container-Optimized OS with containerd (cos_containerd). It is not currently possible to use GKE Sandbox along with the following Kubernetes features: \u2022 Accelerators such as GPUs or TPUs \u2022 Istio \u2022 Monitoring statistics at the level of the Pod or container \u2022 Hostpath storage \u2022 Per-container PID namespace \u2022 CPU and memory limits are only applied for Guaranteed Pods and Burstable Pods, and only when CPU and memory limits are specified for all containers running in the Pod \u2022 Pods using PodSecurityPolicies that specify host namespaces, such as hostNetwork, hostPID, or hostIPC \u2022 Pods using PodSecurityPolicy settings such as privileged mode \u2022 VolumeDevices \u2022 Portforward \u2022 Linux kernel security modules such as Seccomp, Apparmor, or Selinux Sysctl, NoNewPrivileges, bidirectional MountPropagation, FSGroup, or ProcMount",
    "audit": "Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 2. Click on each cluster, and click on any Node pools that are not provisioned by default. 3. On the Node pool Details page, under the Security heading on the Node pool details page, check that Sandbox with gVisor is set to 'Enabled'. The default node pool cannot use GKE Sandbox. Using Command Line: Run this command: gcloud container node-pools describe $NODE_POOL --cluster $CLUSTER_NAME -- zone $COMPUTE_ZONE --format json | jq '.config.sandboxConfig' The output of the above command will return the following if the Node pool is running a sandbox: { \"sandboxType\":\"gvisor\" } If there is no sandbox, the above command output will be null ({ }). The default node pool cannot use GKE Sandbox.",
    "remediation": "Once a node pool is created, GKE Sandbox cannot be enabled, rather a new node pool is required. The default node pool (the first node pool in your cluster, created when the cluster is created) cannot use GKE Sandbox. Using Google Cloud Console: 1. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/. 2. Select a cluster and click ADD NODE POOL. 3. Configure the Node pool with following settings: o For the node version, select v1.12.6-gke.8 or higher. o For the node image, select Container-Optimized OS with Containerd (cos_containerd) (default). o Under Security, select Enable sandbox with gVisor. 4. Configure other Node pool settings as required. 5. Click SAVE. Using Command Line: To enable GKE Sandbox on an existing cluster, a new Node pool must be created, which can be done using: gcloud container node-pools create <node_pool_name> --zone <compute-zone> - -cluster <cluster_name> --image-type=cos_containerd --sandbox=\"type=gvisor\" Default Value: By default, GKE Sandbox is disabled. References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/sandbox-pods 2. https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools 3. https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods Additional Information: The default node pool (the first node pool in your cluster, created when the cluster is created) cannot use GKE Sandbox. When using GKE Sandbox, your cluster must have at least two node pools. You must always have at least one node pool where GKE Sandbox is disabled. This node pool must contain at least one node, even if all your workloads are sandboxed. It is optional but recommended that you enable Stackdriver Logging and Stackdriver Monitoring, by adding the flag --enable-stackdriver-kubernetes. gVisor messages are logged.",
    "function_names": [
      "gke_workload_sandbox_enabled",
      "gke_workload_untrusted_isolated",
      "gke_workload_multi_tenant_protected",
      "gke_sandbox_policy_enforced",
      "gke_workload_security_layer_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Using GKE Sandbox requires the node image to be set to Container-Optimized OS with containerd (cos_containerd). It is not currently possible to use GKE Sandbox along with the following Kubernetes features: \u2022 Accelerators such as GPUs or TPUs \u2022 Istio \u2022 Monitoring statistics at the level of the Pod or container \u2022 Hostpath storage \u2022 Per-container PID namespace \u2022 CPU and memory limits are only applied for Guaranteed Pods and Burstable Pods, and only when CPU and memory limits are specified for all containers running in the Pod \u2022 Pods using PodSecurityPolicies that specify host namespaces, such as hostNetwork, hostPID, or hostIPC \u2022 Pods using PodSecurityPolicy settings such as privileged mode \u2022 VolumeDevices \u2022 Portforward \u2022 Linux kernel security modules such as Seccomp, Apparmor, or Selinux Sysctl, NoNewPrivileges, bidirectional MountPropagation, FSGroup, or ProcMount",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/sandbox-pods 2. https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools 3. https://cloud.google.com/kubernetes-engine/docs/how-to/sandbox-pods Additional Information: The default node pool (the first node pool in your cluster, created when the cluster is created) cannot use GKE Sandbox. When using GKE Sandbox, your cluster must have at least two node pools. You must always have at least one node pool where GKE Sandbox is disabled. This node pool must contain at least one node, even if all your workloads are sandboxed. It is optional but recommended that you enable Stackdriver Logging and Stackdriver Monitoring, by adding the flag --enable-stackdriver-kubernetes. gVisor messages are logged."
  },
  {
    "id": "5.10.4",
    "title": "Ensure use of Binary Authorization",
    "assessment": "Automated",
    "description": "Binary Authorization helps to protect supply-chain security by only allowing images with verifiable cryptographically signed metadata into the cluster.",
    "rationale": "Binary Authorization provides software supply-chain security for images that are deployed to GKE from Google Container Registry (GCR) or another container image registry. Binary Authorization requires images to be signed by trusted authorities during the development process. These signatures are then validated at deployment time. By enforcing validation, tighter control over the container environment can be gained by ensuring only verified images are integrated into the build-and-release process. Impact: Care must be taken when defining policy in order to prevent inadvertent denial of container image deployments. Depending on policy, attestations for existing container images running within the cluster may need to be created before those images are redeployed or pulled as part of the pod churn. To prevent key system images from being denied deployment, consider the use of global policy evaluation mode, which uses a global policy provided by Google and exempts a list of Google-provided system images from further policy evaluation.",
    "audit": "Using Google Cloud Console: To check that Binary Authorization is enabled for the GKE cluster: 1. Go to the Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list 2. Select the cluster for which Binary Authorization is disabled. 3. Under the details pane, within the Security section, ensure that 'Binary Authorization' is set to 'Enabled'. Then, assess the contents of the policy: 4. Go to Binary Authorization by visiting: https://console.cloud.google.com/security/binary-authorization 5. Ensure a policy is defined and the project default rule is not configured to 'Allow all images'. Using Command Line: To check that Binary Authorization is enabled for the GKE cluster: gcloud container clusters describe <cluster_name> --zone <compute_zone> -- format json | jq .binaryAuthorization The above command output will be the following if Binary Authorization is enabled: { \"enabled\": true } Then, assess the contents of the policy: gcloud container binauthz policy export > current-policy.yaml Ensure that the current policy is not configured to allow all images (evaluationMode: ALWAYS_ALLOW): cat current-policy.yaml ... defaultAdmissionRule: evaluationMode: ALWAYS_ALLOW",
    "remediation": "Using Google Cloud Console 1. Go to Binary Authorization by visiting: https://console.cloud.google.com/security/binary-authorization. 2. Enable the Binary Authorization API (if disabled). 3. Create an appropriate policy for use with the cluster. See https://cloud.google.com/binary-authorization/docs/policy-yaml-reference for guidance. 4. Go to Kubernetes Engine by visiting: https://console.cloud.google.com/kubernetes/list. 5. Select the cluster for which Binary Authorization is disabled. 6. Under the details pane, within the Security section, click on the pencil icon named Edit Binary Authorization. 7. Check the box next to Enable Binary Authorization. 8. Choose Enforce policy and provide a directory for the policy to be used. 9. Click SAVE CHANGES. Using Command Line: Update the cluster to enable Binary Authorization: gcloud container cluster update <cluster_name> --zone <compute_zone> -- binauthz-evaluation-mode=<evaluation_mode> Example: gcloud container clusters update $CLUSTER_NAME --zone $COMPUTE_ZONE -- binauthz-evaluation-mode=PROJECT_SINGLETON_POLICY_ENFORCE See: https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- binauthz-evaluation-mode for more details around the evaluation modes available. Create a Binary Authorization Policy using the Binary Authorization Policy Reference: https://cloud.google.com/binary-authorization/docs/policy-yaml-reference for guidance. Import the policy file into Binary Authorization: gcloud container binauthz policy import <yaml_policy> Default Value: By default, Binary Authorization is disabled. References: 1. https://cloud.google.com/binary-authorization/docs/setting-up 2. https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- binauthz-evaluation-mode",
    "function_names": [
      "compute_image_binary_auth_enabled",
      "compute_image_binary_auth_required",
      "compute_image_binary_auth_enforced",
      "compute_image_binary_auth_attestation_required",
      "compute_image_binary_auth_policy_active",
      "compute_image_binary_auth_signature_verified",
      "compute_image_binary_auth_breakglass_disabled",
      "compute_image_binary_auth_default_deny",
      "compute_image_binary_auth_continuous_validation",
      "compute_image_binary_auth_immutable_policy"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Care must be taken when defining policy in order to prevent inadvertent denial of container image deployments. Depending on policy, attestations for existing container images running within the cluster may need to be created before those images are redeployed or pulled as part of the pod churn. To prevent key system images from being denied deployment, consider the use of global policy evaluation mode, which uses a global policy provided by Google and exempts a list of Google-provided system images from further policy evaluation.",
    "references": "1. https://cloud.google.com/binary-authorization/docs/setting-up 2. https://cloud.google.com/sdk/gcloud/reference/container/clusters/update#-- binauthz-evaluation-mode"
  },
  {
    "id": "5.10.5",
    "title": "Enable Security Posture",
    "assessment": "Manual",
    "description": "",
    "rationale": "The security posture dashboard provides insights about your workload security posture at the runtime phase of the software delivery life-cycle. Impact: GKE security posture configuration auditing checks your workloads against a set of defined best practices. Each configuration check has its own impact or risk. Learn more about the checks: https://cloud.google.com/kubernetes-engine/docs/concepts/about- configuration-scanning Example: The host namespace check identifies pods that share host namespaces. Pods that share host namespaces allow Pod processes to communicate with host processes and gather host information, which could lead to a container escape",
    "audit": "Check the SecurityPostureConfig on your cluster: gcloud container clusters --location describe securityPostureConfig: mode: BASIC",
    "remediation": "Enable security posture via the UI, gCloud or API. https://cloud.google.com/kubernetes-engine/docs/how-to/protect-workload-configuration Default Value: GKE security posture has multiple features. Not all are on by default. Configuration auditing is enabled by default for new standard and autopilot clusters. securityPostureConfig: mode: BASIC References: 1. https://cloud.google.com/kubernetes-engine/docs/concepts/about-security- posture-dashboard",
    "function_names": [
      "cloudtrail_trail_logging_enabled",
      "cloudtrail_trail_multi_region_enabled",
      "cloudtrail_trail_file_validation_enabled",
      "cloudtrail_trail_encryption_enabled",
      "cloudtrail_trail_log_retention_over_90d",
      "cloudtrail_trail_all_regions_enabled",
      "cloudtrail_trail_management_events_enabled",
      "cloudtrail_trail_data_events_enabled",
      "cloudtrail_trail_log_integrity_monitoring_enabled",
      "cloudtrail_trail_immutable_logs_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "GKE security posture configuration auditing checks your workloads against a set of defined best practices. Each configuration check has its own impact or risk. Learn more about the checks: https://cloud.google.com/kubernetes-engine/docs/concepts/about- configuration-scanning Example: The host namespace check identifies pods that share host namespaces. Pods that share host namespaces allow Pod processes to communicate with host processes and gather host information, which could lead to a container escape",
    "references": "1. https://cloud.google.com/kubernetes-engine/docs/concepts/about-security- posture-dashboard"
  }
]