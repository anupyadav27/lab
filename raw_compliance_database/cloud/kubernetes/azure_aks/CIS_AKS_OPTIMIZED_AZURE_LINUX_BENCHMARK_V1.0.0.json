[
  {
    "id": "1.1.1.1",
    "title": "Ensure mounting of cramfs filesystems is disabled",
    "assessment": "Automated",
    "description": "The cramfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A cramfs image can be used without having to first decompress the image.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit": "Run the following script to verify the cramfs module is disabled: If the module is available in the running kernel: • An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory • The module is deny listed in a file within the /etc/modprobe.d/ directory • The module is not loaded in the kernel If available in ANY installed kernel: • The module is deny listed in a file within the /etc/modprobe.d/ directory If the kernel module is not available on the system, or pre-compiled into the kernel: • No additional configuration is necessary #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables l_mname=\"cramfs\" # set module name l_mtype=\"fs\" # set module type l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\" l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_chk() { # Check if the module is currently loadable l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\" fi } module_loaded_chk() { # Check if the module is currently loaded if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\" fi } module_deny_chk() { # Check if the module is deny listed l_dl=\"y\" if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -- \"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\" else l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\" fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then l_output3=\"$l_output3\\n  - \\\"$l_mdir\\\"\" [ \"$l_dl\" != \"y\" ] && module_deny_chk if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_chk module_loaded_chk fi else l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\" fi done # Report results. If no failures output in l_output2, we pass [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to disable the cramfs module: If the module is available in the running kernel: • Create a file with install cramfs /bin/false in the /etc/modprobe.d/ directory • Create a file with blacklist cramfs in the /etc/modprobe.d/ directory • Unload cramfs from the kernel If available in ANY installed kernel: • Create a file with blacklist cramfs in the /etc/modprobe.d/ directory If the kernel module is not available on the system or pre-compiled into the kernel: • No remediation is necessary #!/usr/bin/env bash { l_mname=\"cramfs\" # set module name l_mtype=\"fs\" # set module type l_mpath=\"/lib/modules/**/kernel/$l_mtype\" l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\" l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\" module_loadable_fix() { # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\" l_loadable=\"$(modprobe -n -v \"$l_mname\")\" [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -- \"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\" if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\" echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } module_loaded_fix() { # If the module is currently loaded, unload the module if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then echo -e \"\\n - unloading module \\\"$l_mname\\\"\" modprobe -r \"$l_mname\" fi } module_deny_fix() { # If the module isn't deny listed, denylist the module if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then echo -e \"\\n - deny listing \\\"$l_mname\\\"\" echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf fi } # Check if the module exists on the system for l_mdir in $l_mpath; do if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\" module_deny_fix if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then module_loadable_fix module_loaded_fix fi else echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\" fi done echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\" } References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "filesystem_cramfs_mounting_disabled",
      "filesystem_cramfs_mount_prohibited",
      "filesystem_cramfs_usage_blocked",
      "filesystem_cramfs_load_restricted",
      "filesystem_cramfs_access_disabled"
    ]
  },
  {
    "id": "1.1.2.1",
    "title": "Ensure /tmp is a separate partition",
    "assessment": "Automated",
    "description": "The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.",
    "rationale": "Making /tmp its own file system allows an administrator to set additional mount options such as the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system setuid program and wait for it to be updated. Once the program was updated, the hard link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw. This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp. Impact: By design files saved to /tmp should have no expectation of surviving a reboot of the system. tmpfs is ram based and all files stored to tmpfs will be lost when the system is rebooted. If files need to be persistent through a reboot, they should be saved to /var/tmp not /tmp. Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to tmpfs or a separate partition. Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a configuration where /tmp is not a separate file system it will essentially have the whole disk available, as the default installation only creates a single / partition. On the other hand, a RAM- based /tmp (as with tmpfs) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily. Another alternative is to create a dedicated partition for /tmp from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than tmpfs which is RAM-based.",
    "audit": "Run the following command and verify the output shows that /tmp is mounted. Particular requirements pertaining to mount options are covered in ensuing sections. # findmnt -nk /tmp Example output: /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec Ensure that systemd will mount the /tmp partition at boot time. # systemctl is-enabled tmp.mount Example output: generated Verify output is not masked or disabled. Note: By default systemd will output generated if there is an entry in /etc/fstab for /tmp. This just means systemd will use the entry in /etc/fstab instead of its default unit file configuration for /tmp.",
    "remediation": "First ensure that systemd is correctly configured to ensure that /tmp will be mounted at boot time. # systemctl unmask tmp.mount For specific configuration requirements of the /tmp mount for your environment, modify /etc/fstab. Example of using tmpfs with specific mount options: tmpfs /tmp tmpfs     defaults,rw,nosuid,nodev,noexec,relatime,size=2G  0 0 Example of using a volume or disk with specific mount options. The source location of the volume or disk will vary depending on your environment. <device> /tmp    <fstype>    defaults,nodev,nosuid,noexec   0 0 References: 1. https://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ 2. https://www.freedesktop.org/software/systemd/man/systemd-fstab-generator.html 3. NIST SP 800-53 Rev. 5: CM-7  Additional Information: If an entry for /tmp exists in /etc/fstab it will take precedence over entries in systemd default unit file located at /usr/lib/systemd/system/tmp.mount. /tmp utilizing tmpfs can be resized using the size={size} parameter in the relevant entry in /etc/fstab. Note: In an environment where the main system is diskless and connected to iSCSI, entries in /etc/fstab may not take precedence.",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "By design files saved to /tmp should have no expectation of surviving a reboot of the system. tmpfs is ram based and all files stored to tmpfs will be lost when the system is rebooted. If files need to be persistent through a reboot, they should be saved to /var/tmp not /tmp. Since the /tmp directory is intended to be world-writable, there is a risk of resource exhaustion if it is not bound to tmpfs or a separate partition. Running out of /tmp space is a problem regardless of what kind of filesystem lies under it, but in a configuration where /tmp is not a separate file system it will essentially have the whole disk available, as the default installation only creates a single / partition. On the other hand, a RAM- based /tmp (as with tmpfs) will almost certainly be much smaller, which can lead to applications filling up the filesystem much more easily. Another alternative is to create a dedicated partition for /tmp from a separate volume or disk. One of the downsides of a disk-based dedicated partition is that it will be slower than tmpfs which is RAM-based.",
    "references": "1. https://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/ 2. https://www.freedesktop.org/software/systemd/man/systemd-fstab-generator.html 3. NIST SP 800-53 Rev. 5: CM-7  Additional Information: If an entry for /tmp exists in /etc/fstab it will take precedence over entries in systemd default unit file located at /usr/lib/systemd/system/tmp.mount. /tmp utilizing tmpfs can be resized using the size={size} parameter in the relevant entry in /etc/fstab. Note: In an environment where the main system is diskless and connected to iSCSI, entries in /etc/fstab may not take precedence.",
    "function_names": [
      "compute_filesystem_tmp_separate_partition",
      "compute_filesystem_tmp_mounted_separately",
      "compute_filesystem_tmp_dedicated_partition",
      "compute_filesystem_tmp_noexec_enabled",
      "compute_filesystem_tmp_nodev_enabled",
      "compute_filesystem_tmp_nosuid_enabled",
      "compute_filesystem_tmp_restricted_permissions",
      "compute_filesystem_tmp_world_writable_disabled"
    ]
  },
  {
    "id": "1.1.2.2",
    "title": "Ensure nodev option set on /tmp partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /tmp filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /tmp.",
    "audit": "Verify that the nodev option is set for the /tmp mount. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /tmp | grep nodev /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec,relatime,seclabel",
    "remediation": "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /tmp partition. Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /tmp with the configured options: # mount -o remount /tmp References: 1. See the fstab(5) manual page for more information.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. See the fstab(5) manual page for more information.",
    "function_names": [
      "compute_filesystem_nodev_enabled",
      "compute_tmp_partition_nodev_enabled",
      "filesystem_tmp_nodev_set",
      "filesystem_partition_nodev_enabled",
      "compute_mount_nodev_required"
    ]
  },
  {
    "id": "1.1.2.3",
    "title": "Ensure nosuid option set on /tmp partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /tmp.",
    "audit": "Verify that the nosuid option is set for the /tmp mount. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /tmp | grep nosuid /tmp   tmpfs  tmpfs  rw,nosuid,nodev,noexec,relatime,seclabel",
    "remediation": "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /tmp partition. Example: <device> /tmp    <fstype>     defaults,rw,nosuid,nodev,noexec,relatime  0 0 Run the following command to remount /tmp with the configured options: # mount -o remount /tmp References: 1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. See the fstab(5) manual page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "filesystem_tmp_nosuid_enabled",
      "filesystem_tmp_partition_nosuid_set",
      "filesystem_tmp_mount_option_nosuid",
      "filesystem_tmp_nosuid_configured",
      "filesystem_tmp_nosuid_restriction_enabled"
    ]
  },
  {
    "id": "1.1.3.1",
    "title": "Ensure nodev option set on /dev/shm partition",
    "assessment": "Automated",
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /dev/shm filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create special devices in /dev/shm partitions.",
    "audit": "Verify that the nodev option is set if a /dev/shm partition exists. Run the following command and verify that nothing is returned: # mount | grep -E '\\s/dev/shm\\s' | grep -v nodev",
    "remediation": "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information. Run the following command to remount /dev/shm using the updated options from /etc/fstab: # mount -o remount /dev/shm References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "function_names": [
      "compute_shm_partition_nodev_enabled",
      "compute_shm_partition_nodev_set",
      "compute_dev_shm_nodev_enabled",
      "compute_dev_shm_nodev_set",
      "system_shm_partition_nodev_enabled",
      "system_dev_shm_nodev_enabled"
    ]
  },
  {
    "id": "1.1.3.2",
    "title": "Ensure nosuid option set on /dev/shm partition",
    "assessment": "Automated",
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Setting this option on a file system prevents users from introducing privileged programs onto the system and allowing non-root users to execute them.",
    "audit": "Verify that the nosuid option is set if a /dev/shm partition exists. Run the following command and verify that nothing is returned: # mount | grep -E '\\s/dev/shm\\s' | grep -v nosuid",
    "remediation": "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information. Run the following command to remount /dev/shm using the updated options from /etc/fstab: # mount -o remount /dev/shm References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: Some distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "function_names": [
      "compute_shm_nosuid_enabled",
      "compute_shm_nosuid_set",
      "compute_partition_nosuid_enabled",
      "compute_partition_nosuid_set",
      "compute_dev_shm_nosuid_enabled",
      "compute_dev_shm_nosuid_set",
      "linux_shm_nosuid_enabled",
      "linux_shm_nosuid_set",
      "linux_partition_nosuid_enabled",
      "linux_partition_nosuid_set"
    ]
  },
  {
    "id": "1.1.4",
    "title": "Disable Automounting",
    "assessment": "Automated",
    "description": "autofs allows automatic mounting of devices, typically including CD/DVDs and USB drives.",
    "rationale": "With automounting enabled anyone with physical access could attach a USB drive or disc and have its contents available in system even if they lacked permissions to mount it themselves. Impact: The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting.",
    "audit": "As a preference autofs should not be installed unless other packages depend on it. Run the following command to verify autofs is not installed: # systemctl is-enabled autofs Failed to get unit file state for autofs.service: No such file or directory Run the following command to verify autofs is not enabled if installed: # systemctl is-enabled autofs disabled Verify result is not \"enabled\".",
    "remediation": "If there are no other packages that depends on autofs, remove the package with: # dnf remove autofs Run the following command to disable autofs if it is required: # systemctl --now disable autofs References: 1. NIST SP 800-53 Rev. 5: SC-18 Additional Information: This control should align with the tolerance of the use of portable drives and optical media in the organization. On a server requiring an admin to manually mount media can be part of defense-in-depth to reduce the risk of unapproved software or information being introduced or proprietary software or information being exfiltrated. If admins commonly use flash drives and Server access has sufficient physical controls, requiring manual mounting may not increase security.",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "The use of portable hard drives is very common for workstation users. If your organization allows the use of portable storage or media on workstations and physical access controls to workstations is considered adequate there is little value add in turning off automounting.",
    "references": "1. NIST SP 800-53 Rev. 5: SC-18 Additional Information: This control should align with the tolerance of the use of portable drives and optical media in the organization. On a server requiring an admin to manually mount media can be part of defense-in-depth to reduce the risk of unapproved software or information being introduced or proprietary software or information being exfiltrated. If admins commonly use flash drives and Server access has sufficient physical controls, requiring manual mounting may not increase security.",
    "function_names": [
      "compute_instance_automount_disabled",
      "compute_volume_automount_disabled",
      "compute_device_automount_disabled",
      "compute_system_automount_disabled",
      "compute_autofs_disabled",
      "compute_automount_service_disabled",
      "compute_autofs_service_disabled",
      "compute_automount_config_disabled"
    ]
  },
  {
    "id": "1.2.1",
    "title": "Ensure DNF gpgcheck is globally activated",
    "assessment": "Automated",
    "description": "The gpgcheck option, found in the main section of the /etc/dnf/dnf.conf and individual /etc/yum.repos.d/* files, determines if an RPM package's signature is checked prior to its installation.",
    "rationale": "It is important to ensure that an RPM's package signature is always checked prior to installation to ensure that the software is obtained from a trusted source.",
    "audit": "Global configuration. Run the following command and verify that gpgcheck is set to 1: # grep ^gpgcheck /etc/dnf/dnf.conf gpgcheck=1 Configuration in /etc/yum.repos.d/ takes precedence over the global configuration. Run the following command and verify that there are no instances of entries starting with gpgcheck returned set to 0. Nor should there be any invalid (non-boolean) values. When dnf encounters such invalid entries they are ignored and the global configuration is applied. # grep -P \"^gpgcheck\\h*=\\h*[^1].*\\h*$\" /etc/yum.repos.d/*",
    "remediation": "Edit /etc/dnf/dnf.conf and set gpgcheck=1 in the [main] section. Example: # sed -i 's/^gpgcheck\\s*=\\s*.*/gpgcheck=1/' /etc/dnf/dnf.conf Edit any failing files in /etc/yum.repos.d/* and set all instances starting with gpgcheck to 1. Example: # find /etc/yum.repos.d/ -name \"*.repo\" -exec echo \"Checking:\" {} \\; -exec sed -i 's/^gpgcheck\\s*=\\s*.*/gpgcheck=1/' {} \\; References: 1. NIST SP 800-53 Rev. 5: SI-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: SI-2",
    "function_names": [
      "dnf_config_gpgcheck_enabled",
      "dnf_repo_gpgcheck_enabled_all",
      "dnf_package_signature_validation_enabled",
      "dnf_global_gpgcheck_activated",
      "dnf_repo_files_gpgcheck_enabled"
    ]
  },
  {
    "id": "1.2.2",
    "title": "Ensure TDNF gpgcheck is globally activated",
    "assessment": "Automated",
    "description": "The gpgcheck option, found in the main section of the /etc/tdnf/tdnf.conf and individual /etc/yum.repos.d/* files, determines if an RPM package's signature is checked prior to its installation.",
    "rationale": "It is important to ensure that an RPM's package signature is always checked prior to installation to ensure that the software is obtained from a trusted source.",
    "audit": "Global configuration. Run the following command and verify that gpgcheck is set to 1: # grep ^gpgcheck /etc/tdnf/tdnf.conf gpgcheck=1 Configuration in /etc/yum.repos.d/ takes precedence over the global configuration. Run the following command and verify that there are no instances of entries starting with gpgcheck returned set to 0. Nor should there be any invalid (non-boolean) values. When dnf encounters such invalid entries they are ignored and the global configuration is applied. # grep -P \"^gpgcheck\\h*=\\h*[^1\\n\\r]\\b\" /etc/yum.repos.d/*",
    "remediation": "Edit /etc/dnf/dnf.conf and set gpgcheck=1 in the [main] section. Example: # sed -i 's/^gpgcheck\\s*=\\s*.*/gpgcheck=1/' /etc/tdnf/tdnf.conf Edit any failing files in /etc/yum.repos.d/* and set all instances starting with gpgcheck to 1. Example: # find /etc/yum.repos.d/ -name \"*.repo\" -exec echo \"Checking:\" {} \\; -exec sed -i 's/^gpgcheck\\s*=\\s*.*/gpgcheck=1/' {} \\; References: 1. NIST SP 800-53 Rev. 5: - SI-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: - SI-2",
    "function_names": [
      "package_manager_tdnf_gpgcheck_enabled",
      "package_manager_repo_gpgcheck_enabled",
      "package_manager_tdnf_conf_gpgcheck_activated",
      "package_manager_repo_files_gpgcheck_activated",
      "package_manager_tdnf_signature_verification_enabled",
      "package_manager_repo_signature_verification_enabled"
    ]
  },
  {
    "id": "1.3.1",
    "title": "Ensure core dump storage is disabled",
    "assessment": "Automated",
    "description": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file.",
    "rationale": "A core dump includes a memory image taken at the time the operating system terminates an application. The memory image could contain sensitive data and is generally useful only for developers trying to debug problems.",
    "audit": "Run the following command to verify Storage is set to none in /etc/systemd/coredump.conf: # grep -i '^\\s*storage\\s*=\\s*none' /etc/systemd/coredump.conf Storage=none",
    "remediation": "Edit /etc/systemd/coredump.conf and edit or add the following line: Storage=none References: 1. https://www.freedesktop.org/software/systemd/man/coredump.conf.html 2. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://www.freedesktop.org/software/systemd/man/coredump.conf.html 2. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_core_dump_disabled",
      "compute_vm_core_dump_disabled",
      "compute_system_core_dump_disabled",
      "compute_kernel_core_dump_disabled",
      "compute_process_core_dump_disabled",
      "compute_security_core_dump_disabled",
      "compute_memory_core_dump_disabled",
      "compute_os_core_dump_disabled"
    ]
  },
  {
    "id": "1.3.2",
    "title": "Ensure core dump backtraces are disabled",
    "assessment": "Automated",
    "description": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file.",
    "rationale": "A core dump includes a memory image taken at the time the operating system terminates an application. The memory image could contain sensitive data and is generally useful only for developers trying to debug problems, increasing the risk to the system.",
    "audit": "Run the following command to verify ProcessSizeMax is set to 0 in /etc/systemd/coredump.conf: # grep -i '^\\s*ProcessSizeMax\\s*=\\s*0' /etc/systemd/coredump.conf ProcessSizeMax=0",
    "remediation": "Edit or add the following line in /etc/systemd/coredump.conf: ProcessSizeMax=0 Default Value: ProcessSizeMax=2G References: 1. https://www.freedesktop.org/software/systemd/man/coredump.conf.html 2. NIST SP 800-53 Rev. 5: CM-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://www.freedesktop.org/software/systemd/man/coredump.conf.html 2. NIST SP 800-53 Rev. 5: CM-6",
    "function_names": [
      "compute_instance_core_dump_disabled",
      "compute_vm_core_dump_disabled",
      "compute_system_core_dump_disabled",
      "compute_process_core_dump_disabled",
      "compute_kernel_core_dump_disabled",
      "compute_security_core_dump_disabled",
      "compute_os_core_dump_disabled",
      "compute_memory_core_dump_disabled"
    ]
  },
  {
    "id": "1.3.3",
    "title": "Ensure address space layout randomization (ASLR) is enabled",
    "assessment": "Automated",
    "description": "Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.",
    "rationale": "Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • kernel.randomize_va_space is set to 2 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"kernel.randomize_va_space=2\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • kernel.randomize_va_space = 2 Example: # printf \" kernel.randomize_va_space = 2 \" >> /etc/sysctl.d/60-kernel_sysctl.conf Run the following command to set the active kernel parameter: # sysctl -w kernel.randomize_va_space=2 Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten Default Value: kernel.randomize_va_space = 2 References: 1. CCI-000366: The organization implements the security configuration settings 2. NIST SP 800-53 Rev. 5: CM-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. CCI-000366: The organization implements the security configuration settings 2. NIST SP 800-53 Rev. 5: CM-6",
    "function_names": [
      "compute_instance_aslr_enabled",
      "compute_vm_aslr_enabled",
      "compute_system_aslr_enabled",
      "compute_kernel_aslr_enabled",
      "compute_process_aslr_enabled",
      "compute_memory_aslr_enabled",
      "compute_security_aslr_enabled",
      "compute_os_aslr_enabled"
    ]
  },
  {
    "id": "1.4.1",
    "title": "Ensure local login warning banner is configured properly",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version - or the operating system's name",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit": "Run the following command and verify that the contents match site policy: # cat /etc/issue Run the following command and verify no results are returned: # grep -E -i \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= - f2 | sed -e 's/\"//g'))\" /etc/issue",
    "remediation": "Edit the /etc/issue file with the appropriate contents according to your site policy, remove any instances of \\m , \\r , \\s , \\v or references to the OS platform # echo \"Authorized uses only. All activity may be monitored and reported.\" > /etc/issue References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-1, CM-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0007",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-1, CM-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0007",
    "function_names": [
      "os_login_banner_configured",
      "os_issue_file_warning_enabled",
      "os_local_login_banner_valid",
      "os_issue_file_content_secure",
      "os_login_banner_no_sensitive_info",
      "os_issue_file_standardized",
      "os_login_banner_compliance_approved",
      "os_issue_file_no_os_details"
    ]
  },
  {
    "id": "1.4.2",
    "title": "Ensure remote login warning banner is configured properly",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit": "Run the following command and verify that the contents match site policy: # cat /etc/issue.net Run the following command and verify no results are returned: # grep -E -i \"(\\\\\\v|\\\\\\r|\\\\\\m|\\\\\\s|$(grep '^ID=' /etc/os-release | cut -d= - f2 | sed -e 's/\"//g'))\" /etc/issue.net",
    "remediation": "Edit the /etc/issue.net file with the appropriate contents according to your site policy, remove any instances of \\m , \\r , \\s , \\v or references to the OS platform # echo \"Authorized uses only. All activity may be monitored and reported.\" > /etc/issue.net References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-1, CM-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1018, T1018.000, T1082, T1082.000, T1592, T1592.004 TA0007",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-1, CM-3 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1018, T1018.000, T1082, T1082.000, T1592, T1592.004 TA0007",
    "function_names": [
      "compute_instance_login_banner_configured",
      "compute_instance_remote_warning_banner_enabled",
      "compute_instance_issue_net_banner_configured",
      "compute_instance_os_info_disclosure_disabled",
      "compute_instance_pre_login_banner_configured",
      "compute_instance_remote_access_warning_enabled",
      "compute_instance_secure_login_banner_set",
      "compute_instance_system_info_hiding_enabled"
    ]
  },
  {
    "id": "1.4.3",
    "title": "Ensure permissions on /etc/motd are configured",
    "assessment": "Automated",
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users.",
    "rationale": "If the /etc/motd file does not have the correct ownership it could be modified by unauthorized users with incorrect or misleading information.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access is 644 : # stat /etc/motd Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set permissions on /etc/motd : # chown root:root /etc/motd # chmod u-x,go-wx /etc/motd References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_motd_permissions_configured",
      "linux_file_motd_owner_root",
      "linux_file_motd_group_root",
      "linux_file_motd_mode_644",
      "linux_file_motd_no_world_writable",
      "linux_file_motd_no_group_writable",
      "linux_file_motd_no_other_writable",
      "linux_file_motd_immutable_flag_set"
    ]
  },
  {
    "id": "1.4.4",
    "title": "Ensure permissions on /etc/issue are configured",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals.",
    "rationale": "If the /etc/issue file does not have the correct ownership it could be modified by unauthorized users with incorrect or misleading information.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access is 644 : # stat /etc/issue Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set permissions on /etc/issue : # chown root:root /etc/issue # chmod u-x,go-wx /etc/issue References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_issue_permissions_restricted",
      "linux_file_issue_owner_root",
      "linux_file_issue_group_root",
      "linux_file_issue_mode_644_or_stricter"
    ]
  },
  {
    "id": "1.4.5",
    "title": "Ensure permissions on /etc/issue.net are configured",
    "assessment": "Automated",
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.",
    "rationale": "If the /etc/issue.net file does not have the correct ownership it could be modified by unauthorized users with incorrect or misleading information.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access is 644 : # stat /etc/issue.net Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set permissions on /etc/issue.net : # chown root:root /etc/issue.net # chmod u-x,go-wx /etc/issue.net References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_issue_net_permissions_configured",
      "linux_file_issue_net_owner_root",
      "linux_file_issue_net_group_root",
      "linux_file_issue_net_mode_644",
      "linux_file_issue_net_no_world_writable",
      "linux_file_issue_net_no_group_writable",
      "linux_file_issue_net_no_suid",
      "linux_file_issue_net_no_sgid",
      "linux_file_issue_net_no_sticky_bit"
    ]
  },
  {
    "id": "2.1.1",
    "title": "Ensure time synchronization is in use",
    "assessment": "Automated",
    "description": "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them. Note: If another method for time synchronization is being used, this section may be skipped.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms like Kerberos and also ensures log files have consistent time records across the enterprise, which aids in forensic investigations.",
    "audit": "Run the following commands to verify that chrony is installed: # rpm -q chrony chrony-<version>",
    "remediation": "Run the following command to install chrony: # dnf install chrony References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12 Additional Information: On systems where host based time synchronization is not available, verify that chrony is installed. On systems where host based time synchronization is available consult your documentation and verify that host based synchronization is in use.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12 Additional Information: On systems where host based time synchronization is not available, verify that chrony is installed. On systems where host based time synchronization is available consult your documentation and verify that host based synchronization is in use.",
    "function_names": [
      "compute_instance_time_synchronized",
      "compute_vm_time_synchronized",
      "compute_ntp_enabled",
      "compute_chrony_enabled",
      "compute_time_service_enabled",
      "compute_time_sync_configured",
      "compute_system_clock_synchronized",
      "compute_ntp_server_configured",
      "compute_time_sync_source_valid",
      "compute_time_sync_service_running"
    ]
  },
  {
    "id": "2.1.2",
    "title": "Ensure chrony is configured",
    "assessment": "Automated",
    "description": "chrony is a daemon which implements the Network Time Protocol (NTP) and is designed to synchronize system clocks across a variety of systems and use a source that is highly accurate. More information on chrony can be found at http://chrony.tuxfamily.org/. chrony can be configured to be a client and/or a server.",
    "rationale": "If chrony is in use on the system proper configuration is vital to ensuring time synchronization is working properly.",
    "audit": "Run the following command and verify remote server is configured properly: # grep -E \"^(server|pool|refclock)\" /etc/chrony.conf server <remote-server> Multiple servers may be configured. Run the following command and verify OPTIONS includes '-u chrony': # grep ^OPTIONS /etc/sysconfig/chronyd OPTIONS=\"-u chrony\" Additional options may be present.",
    "remediation": "Add or edit server or pool lines to /etc/chrony.conf as appropriate: server <remote-server> Add or edit the OPTIONS in /etc/sysconfig/chronyd to include '-u chrony': OPTIONS=\"-u chrony\" References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12  Additional Information: On systems where host based time synchronization is not available, verify that chrony is installed. On systems where host based time synchronization is available consult your documentation and verify that host based synchronization is in use.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12  Additional Information: On systems where host based time synchronization is not available, verify that chrony is installed. On systems where host based time synchronization is available consult your documentation and verify that host based synchronization is in use.",
    "function_names": [
      "compute_chrony_configured",
      "compute_chrony_ntp_synchronized",
      "compute_chrony_server_configured",
      "compute_chrony_client_configured",
      "compute_chrony_high_accuracy_source",
      "compute_chrony_daemon_enabled",
      "compute_chrony_time_sync_enabled",
      "compute_chrony_secure_ntp_sources"
    ]
  },
  {
    "id": "2.2.1",
    "title": "Ensure xinetd is not installed",
    "assessment": "Automated",
    "description": "The eXtended InterNET Daemon ( xinetd ) is an open source super daemon that replaced the original inetd daemon. The xinetd daemon listens for well known services and dispatches the appropriate daemon to properly respond to service requests.",
    "rationale": "If there are no xinetd services required, it is recommended that the package be removed to reduce the attack surface are of the system. Note: If an xinetd service or services are required, ensure that any xinetd service not required is stopped and disabled",
    "audit": "Run the following command to verify xinetd is not installed: # rpm -q xinetd package xinetd is not installed",
    "remediation": "Run the following command to remove xinetd: # dnf remove xinetd References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "system_package_xinetd_not_installed",
      "system_service_xinetd_disabled",
      "system_daemon_xinetd_removed",
      "system_software_xinetd_uninstalled",
      "system_process_xinetd_absent"
    ]
  },
  {
    "id": "2.2.2",
    "title": "Ensure xorg-x11-server-common is not installed",
    "assessment": "Automated",
    "description": "The X Window System provides a Graphical User Interface (GUI) where users can have multiple windows in which to run programs and various add on. The X Windows system is typically used on workstations where users login, but not on servers where users typically do not login.",
    "rationale": "Unless your organization specifically requires graphical login access via X Windows, remove it to reduce the potential attack surface. Impact: Many Linux systems run applications which require a Java runtime. Some Linux Java packages have a dependency on specific X Windows xorg-x11-fonts. One workaround to avoid this dependency is to use the \"headless\" Java packages for your specific Java runtime.",
    "audit": "Run the following command to Verify X Windows Server is not installed. # rpm -q xorg-x11-server-common package xorg-x11-server-common is not installed",
    "remediation": "Run the following command to remove the X Windows Server packages: # dnf remove xorg-x11-server-common References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many Linux systems run applications which require a Java runtime. Some Linux Java packages have a dependency on specific X Windows xorg-x11-fonts. One workaround to avoid this dependency is to use the \"headless\" Java packages for your specific Java runtime.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "package_xorg_x11_server_common_not_installed",
      "system_gui_package_removed",
      "server_x11_package_uninstalled",
      "linux_xorg_server_common_disabled",
      "os_gui_component_not_present"
    ]
  },
  {
    "id": "2.2.3",
    "title": "Ensure avahi is not installed",
    "assessment": "Automated",
    "description": "Avahi is a free zeroconf implementation, including a system for multicast DNS/DNS-SD service discovery. Avahi allows programs to publish and discover services and hosts running on a local network with no specific configuration. For example, a user can plug a computer into a network and Avahi automatically finds printers to print to, files to look at and people to talk to, as well as network services running on the machine.",
    "rationale": "Automatic discovery of network services is not normally required for system functionality. It is recommended to remove this package to reduce the potential attack surface.",
    "audit": "Run one of the following command to verify avahi is not installed: # rpm -q avahi package avahi is not installed",
    "remediation": "Run the following commands to stop, and remove avahi: # systemctl stop avahi-daemon.socket avahi-daemon.service # dnf remove avahi References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "system_package_avahi_not_installed",
      "network_service_zeroconf_disabled",
      "system_service_avahi_removed",
      "system_software_unnecessary_services_uninstalled"
    ]
  },
  {
    "id": "2.2.4",
    "title": "Ensure a print server is not installed",
    "assessment": "Automated",
    "description": "The Common Unix Print System (CUPS) provides the ability to print to both local and network printers. A system running CUPS can also accept print jobs from remote systems and print them to local printers. It also provides a web based remote administration capability.",
    "rationale": "If the system does not need to print jobs or accept print jobs from other systems, it is recommended that CUPS be removed to reduce the potential attack surface. Note: Removing CUPS will prevent printing from the system Impact: Disabling CUPS will prevent printing from the system, a common task for workstation systems.",
    "audit": "Run the following command to verify cups is not installed: # rpm -q cups package cups is not installed",
    "remediation": "Run the following command to remove cups: # dnf remove cups References: 1. More detailed documentation on CUPS is available at the project homepage at http://www.cups.org. 2. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Disabling CUPS will prevent printing from the system, a common task for workstation systems.",
    "references": "1. More detailed documentation on CUPS is available at the project homepage at http://www.cups.org. 2. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_print_server_not_installed",
      "compute_cups_service_disabled",
      "compute_print_service_removed",
      "compute_remote_printing_disabled",
      "compute_cups_web_interface_disabled"
    ]
  },
  {
    "id": "2.2.5",
    "title": "Ensure a dhcp server is not installed",
    "assessment": "Automated",
    "description": "The Dynamic Host Configuration Protocol (DHCP) is a service that allows machines to be dynamically assigned IP addresses.",
    "rationale": "Unless a system is specifically set up to act as a DHCP server, it is recommended that the dhcp-server package be removed to reduce the potential attack surface.",
    "audit": "Run the following command to verify dhcp-server is not installed: # rpm -q dhcp-server package dhcp-server is not installed",
    "remediation": "Run the following command to remove dhcp: # dnf remove dhcp-server References: 1. dhcpd(8) Additional Information: NIST SP 800-53 Rev. 5: • CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. dhcpd(8) Additional Information: NIST SP 800-53 Rev. 5: • CM-7",
    "function_names": [
      "compute_instance_dhcp_server_not_installed",
      "network_interface_dhcp_disabled",
      "virtual_machine_dhcp_service_removed",
      "operating_system_dhcp_package_uninstalled",
      "cloud_instance_dhcp_configuration_disabled"
    ]
  },
  {
    "id": "2.2.6",
    "title": "Ensure a dns server is not installed",
    "assessment": "Automated",
    "description": "The Domain Name System (DNS) is a hierarchical naming system that maps names to IP addresses for computers, services and other resources connected to a network.",
    "rationale": "Unless a system is specifically designated to act as a DNS server, it is recommended that the package be removed to reduce the potential attack surface.",
    "audit": "Run one of the following commands to verify bind is not installed: # rpm -q bind package bind is not installed",
    "remediation": "Run the following command to remove bind: # dnf remove bind References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_dns_server_not_installed",
      "compute_vm_dns_server_not_installed",
      "compute_host_dns_server_not_installed",
      "network_dns_server_not_installed",
      "os_dns_server_not_installed"
    ]
  },
  {
    "id": "2.2.7",
    "title": "Ensure FTP client is not installed",
    "assessment": "Automated",
    "description": "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network, especially where no authentication is necessary (permits anonymous users to connect to a server).",
    "rationale": "FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be removed to reduce the potential attack surface.",
    "audit": "Run the following command to verify ftp is not installed: # rpm -q ftp package ftp is not installed",
    "remediation": "Run the following command to remove ftp: # dnf remove ftp References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_ftp_client_not_installed",
      "compute_image_ftp_client_not_installed",
      "compute_package_ftp_client_not_installed",
      "compute_system_ftp_client_not_installed",
      "compute_software_ftp_client_not_installed",
      "compute_vm_ftp_client_not_installed",
      "compute_host_ftp_client_not_installed",
      "compute_os_ftp_client_not_installed"
    ]
  },
  {
    "id": "2.2.8",
    "title": "Ensure an ftp server is not installed",
    "assessment": "Automated",
    "description": "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network, especially where no authentication is necessary (permits anonymous users to connect to a server).",
    "rationale": "Unless there is a need to run the system as a FTP server, it is recommended that the package be removed to reduce the potential attack surface.",
    "audit": "Run the following command to verify vsftpd is not installed: # rpm -q vsftpd package vsftpd is not installed",
    "remediation": "Run the following command to remove vsftpd: # dnf remove vsftpd References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_server_ftp_not_installed",
      "compute_instance_ftp_removed",
      "compute_vm_ftp_service_disabled",
      "compute_system_ftp_package_uninstalled",
      "compute_host_ftp_daemon_absent"
    ]
  },
  {
    "id": "2.2.9",
    "title": "Ensure a tftp server is not installed",
    "assessment": "Automated",
    "description": "Trivial File Transfer Protocol (TFTP) is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers allow connections from a TFTP Client for sending and receiving files.",
    "rationale": "Unless there is a need to run the system as a TFTP server, it is recommended that the package be removed to reduce the potential attack surface. TFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to exploit TFTP to gain access to files Impact: TFTP is often used to provide files for network booting such as for PXE based installation of servers.",
    "audit": "Run the following command to verify tftp-server is not installed: # rpm -q tftp-server package tftp-server is not installed",
    "remediation": "Run the following command to remove tftp-server: # dnf remove tftp-server References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "TFTP is often used to provide files for network booting such as for PXE based installation of servers.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_tftp_server_not_installed",
      "compute_tftp_service_disabled",
      "network_tftp_protocol_blocked",
      "system_tftp_package_removed",
      "os_tftp_daemon_not_running"
    ]
  },
  {
    "id": "2.2.10",
    "title": "Ensure a web server is not installed",
    "assessment": "Automated",
    "description": "Web servers provide the ability to host web site content.",
    "rationale": "Unless there is a need to run the system as a web server, it is recommended that the packages be removed to reduce the potential attack surface. Note: Several http servers exist. They should also be audited, and removed, if not required.",
    "audit": "Run the following command to verify httpd and nginx are not installed: # rpm -q httpd nginx package httpd is not installed package nginx is not installed",
    "remediation": "Run the following command to remove httpd and nginx: # dnf remove httpd nginx References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_web_server_not_installed",
      "compute_vm_web_server_not_installed",
      "compute_server_web_server_not_installed",
      "compute_host_web_server_not_installed",
      "compute_system_web_server_not_installed",
      "compute_os_web_server_not_installed",
      "compute_software_web_server_not_installed",
      "compute_package_web_server_not_installed",
      "compute_service_web_server_not_installed",
      "compute_process_web_server_not_installed"
    ]
  },
  {
    "id": "2.2.11",
    "title": "Ensure IMAP and POP3 server is not installed",
    "assessment": "Automated",
    "description": "dovecot is an open source IMAP and POP3 server for Linux based systems.",
    "rationale": "Unless POP3 and/or IMAP servers are to be provided by this system, it is recommended that the package be removed to reduce the potential attack surface. Note: Several IMAP/POP3 servers exist and can use other service names. These should also be audited and the packages removed if not required.",
    "audit": "Run the following command to verify dovecot and cyrus-imapd are not installed: # rpm -q dovecot cyrus-imapd package dovecot is not installed package cyrus-imapd is not installed",
    "remediation": "Run the following command to remove dovecot and cyrus-imapd: # dnf remove dovecot cyrus-imapd References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_imap_pop3_not_installed",
      "compute_server_dovecot_not_installed",
      "compute_system_imap_pop3_disabled",
      "compute_package_dovecot_removed",
      "compute_service_imap_pop3_uninstalled"
    ]
  },
  {
    "id": "2.2.12",
    "title": "Ensure Samba is not installed",
    "assessment": "Automated",
    "description": "The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block (SMB) protocol. Windows desktop users will be able to mount these directories and file systems as letter drives on their systems.",
    "rationale": "If there is no need to mount directories and file systems to Windows systems, then this package can be removed to reduce the potential attack surface.",
    "audit": "Run the following command to verify samba is not installed: # rpm -q samba package samba is not installed",
    "remediation": "Run the following command to remove samba: # dnf remove samba References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_samba_not_installed",
      "compute_system_samba_removed",
      "compute_package_samba_uninstalled",
      "compute_software_samba_disabled",
      "compute_service_samba_not_present"
    ]
  },
  {
    "id": "2.2.13",
    "title": "Ensure HTTP Proxy Server is not installed",
    "assessment": "Automated",
    "description": "Squid is a standard proxy server used in many distributions and environments.",
    "rationale": "Unless a system is specifically set up to act as a proxy server, it is recommended that the squid package be removed to reduce the potential attack surface. Note: Several HTTP proxy servers exist. These should be checked and removed unless required.",
    "audit": "Run the following command to verify squid is not installed: # rpm -q squid package squid is not installed",
    "remediation": "Run the following command to remove the squid package: # dnf remove squid References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_squid_proxy_not_installed",
      "compute_server_proxy_not_installed",
      "compute_system_squid_package_removed",
      "compute_os_proxy_service_disabled",
      "compute_host_squid_uninstalled",
      "compute_vm_proxy_software_absent",
      "compute_instance_proxy_software_not_installed"
    ]
  },
  {
    "id": "2.2.14",
    "title": "Ensure net-snmp is not installed or the snmpd service is not enabled",
    "assessment": "Automated",
    "description": "Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring the health and welfare of network equipment, computer equipment and devices like UPSs. Net-SNMP is a suite of applications used to implement SNMPv1 (RFC 1157), SNMPv2 (RFCs 1901-1908), and SNMPv3 (RFCs 3411-3418) using both IPv4 and IPv6. Support for SNMPv2 classic (a.k.a. \"SNMPv2 historic\" - RFCs 1441-1452) was dropped with the 4.0 release of the UCD-snmp package. The Simple Network Management Protocol (SNMP) server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the information and then send results back to the requesting system.",
    "rationale": "The SNMP server can communicate using SNMPv1, which transmits data in the clear and does not require authentication to execute commands. SNMPv3 replaces the simple/clear text password sharing used in SNMPv2 with more securely encoded parameters. If the the SNMP service is not required, the net-snmp package should be removed to reduce the attack surface of the system. Note: If a required dependency exists for the net-snmp package, but the snmpd service is not required, the service should be masked. Note: If SNMP is required: • The server should be configured for SNMP v3 only. User Authentication and Message Encryption should be configured. • If SNMP v2 is absolutely necessary, modify the community strings' values. Impact: There are packages that are dependent on the net-snmp package. If the net-snmp package is removed, these packages will be removed as well. Before removing the net-snmp package, review any dependent packages to determine if they are required on the system. If a dependent package is required, mask the snmpd service and leave the net-snmp package installed.",
    "audit": "Run the following command to verify net-snmp is not installed: # rpm -q net-snmp package net-snmp is not installed -OR- Run the following command to verify the snmpd service is not enabled: # systemctl is-enabled snmpd masked Verify output is not enabled",
    "remediation": "Run the following command to remove net-snmpd: # dnf remove net-snmp -OR- Run the following commands to stop and mask the snmpd service: # systemctl stop snmpd # systemctl mask snmpd References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "There are packages that are dependent on the net-snmp package. If the net-snmp package is removed, these packages will be removed as well. Before removing the net-snmp package, review any dependent packages to determine if they are required on the system. If a dependent package is required, mask the snmpd service and leave the net-snmp package installed.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "snmp_package_not_installed",
      "snmpd_service_disabled",
      "snmp_protocol_restricted",
      "snmp_service_removed",
      "snmpd_process_inactive",
      "snmp_software_uninstalled",
      "snmpd_daemon_stopped",
      "snmp_service_unavailable"
    ]
  },
  {
    "id": "2.2.15",
    "title": "Ensure NIS server is not installed",
    "assessment": "Automated",
    "description": "The ypserv package provides the Network Information Service (NIS). This service, formally known as Yellow Pages, is a client-server directory service protocol for distributing system configuration files. The NIS server is a collection of programs that allow for the distribution of configuration files.",
    "rationale": "The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the ypserv package be removed, and if required a more secure services be used.",
    "audit": "Run the following command to verify ypserv is not installed: # rpm -q ypserv package ypserv is not installed",
    "remediation": "Run the following command to remove ypserv: # dnf remove ypserv References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_nis_server_not_installed",
      "compute_ypserv_package_removed",
      "compute_nis_service_disabled",
      "compute_yellow_pages_uninstalled"
    ]
  },
  {
    "id": "2.2.16",
    "title": "Ensure telnet-server is not installed",
    "assessment": "Automated",
    "description": "The telnet-server package contains the telnet daemon, which accepts connections from users from other systems via the telnet protocol.",
    "rationale": "The telnet protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow a user with access to sniff network traffic the ability to steal credentials. The ssh package provides an encrypted session and stronger security.",
    "audit": "Run the following command to verify the telnet-server package is not installed: rpm -q telnet-server package telnet-server is not installed",
    "remediation": "Run the following command to remove the telnet-server package: # dnf remove telnet-server References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_telnet_server_not_installed",
      "compute_telnet_daemon_disabled",
      "compute_telnet_package_removed",
      "compute_telnet_service_inactive",
      "compute_telnet_protocol_blocked"
    ]
  },
  {
    "id": "2.2.17",
    "title": "Ensure mail transfer agent is configured for local-only mode",
    "assessment": "Automated",
    "description": "Mail Transfer Agents (MTA), such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the MTA be configured to only process local mail.",
    "rationale": "The software for all Mail Transfer Agents is complex and most have a long history of security issues. While it is important to ensure that the system can process local mail messages, it is not necessary to have the MTA's daemon listening on a port unless the server is intended to be a mail server that receives and processes mail from other systems. Note: • This recommendation is designed around the postfix mail server. • Depending on your environment you may have an alternative MTA installed such as sendmail. If this is the case consult the documentation for your installed MTA to configure the recommended state.",
    "audit": "Run the following command to verify that the MTA is not listening on any non-loopback address ( 127.0.0.1 or ::1 ) Nothing should be returned #  ss -lntu | grep -P ':25\\b' | grep -Pv '\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):25\\b'",
    "remediation": "Edit /etc/postfix/main.cf and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line below: inet_interfaces = loopback-only Run the following command to restart postfix: # systemctl restart postfix References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_mail_transfer_agent_local_only_mode",
      "compute_mta_local_only_mode",
      "compute_sendmail_local_only_mode",
      "compute_postfix_local_only_mode",
      "compute_mail_service_local_only_mode",
      "compute_mail_agent_local_only_mode",
      "compute_mail_transfer_agent_restricted_to_local",
      "compute_mta_restricted_to_local",
      "compute_mail_service_restricted_to_local",
      "compute_mail_agent_restricted_to_local"
    ]
  },
  {
    "id": "2.2.18",
    "title": "Ensure nfs-utils is not installed or the nfs-server service is masked",
    "assessment": "Automated",
    "description": "The Network File System (NFS) is one of the first and most widely distributed file systems in the UNIX environment. It provides the ability for systems to mount file systems of other servers through the network.",
    "rationale": "If the system does not require network shares, it is recommended that the nfs-utils package be removed to reduce the attack surface of the system. Impact: Many of the libvirt packages used by Enterprise Linux virtualization are dependent on the nfs-utils package. If the nfs-package is required as a dependency, the nfs-server should be disabled and masked to reduce the attack surface of the system.",
    "audit": "Run the following command to verify nfs-utils is not installed: # rpm -q nfs-utils package nfs-utils is not installed OR If the nfs-package is required as a dependency, run the following command to verify that the nfs-server service is masked: # systemctl is-enabled nfs-server masked",
    "remediation": "Run the following command to remove nfs-utils: # dnf remove nfs-utils OR If the nfs-package is required as a dependency, run the following command to stop and mask the nfs-server service: # systemctl --now mask nfs-server References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-7 Additional Information: Many of the libvirt packages used by Enterprise Linux virtualization are dependent on the nfs-utils package. If the nfs-package is required as a dependency, the nfs-server should be disabled and masked to reduce the attack surface of the system.",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many of the libvirt packages used by Enterprise Linux virtualization are dependent on the nfs-utils package. If the nfs-package is required as a dependency, the nfs-server should be disabled and masked to reduce the attack surface of the system.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-7 Additional Information: Many of the libvirt packages used by Enterprise Linux virtualization are dependent on the nfs-utils package. If the nfs-package is required as a dependency, the nfs-server should be disabled and masked to reduce the attack surface of the system.",
    "function_names": [
      "compute_nfs_utils_not_installed",
      "compute_nfs_server_service_masked",
      "compute_nfs_utils_removed",
      "compute_nfs_server_disabled",
      "compute_nfs_service_inactive"
    ]
  },
  {
    "id": "2.2.19",
    "title": "Ensure rsync-daemon is not installed or the rsyncd service is masked",
    "assessment": "Automated",
    "description": "The rsyncd service can be used to synchronize files between systems over network links.",
    "rationale": "Unless required, the rsync-daemon package should be removed to reduce the attack surface area of the system. The rsyncd service presents a security risk as it uses unencrypted protocols for communication. Note: If a required dependency exists for the rsync-daemon package, but the rsyncd service is not required, the service should be masked._ Impact: There are packages that are dependent on the rsync package. If the rsync package is removed, these packages will be removed as well. Before removing the rsync package, review any dependent packages to determine if they are required on the system. If a dependent package is required, mask the rsyncd service and leave the rsync package installed.",
    "audit": "Run the following command to verify that rsync is not installed: # rpm -q rsync-daemon package rsync is not installed OR Run the following command to verify the rsyncd service is masked: # systemctl is-enabled rsyncd masked",
    "remediation": "Run the following command to remove the rsync package: # dnf remove rsync-daemon OR Run the following command to mask the rsyncd service: # systemctl --now mask rsyncd References: 1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "There are packages that are dependent on the rsync package. If the rsync package is removed, these packages will be removed as well. Before removing the rsync package, review any dependent packages to determine if they are required on the system. If a dependent package is required, mask the rsyncd service and leave the rsync package installed.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-6, CM-7",
    "function_names": [
      "package_rsync_daemon_not_installed",
      "service_rsyncd_masked",
      "service_rsyncd_disabled",
      "package_rsync_daemon_removed",
      "service_rsyncd_not_running"
    ]
  },
  {
    "id": "2.3.1",
    "title": "Ensure NIS Client is not installed",
    "assessment": "Automated",
    "description": "The Network Information Service (NIS), formerly known as Yellow Pages, is a client- server directory service protocol used to distribute system configuration files. The NIS client ( ypbind ) was used to bind a machine to an NIS server and receive the distributed configuration files.",
    "rationale": "The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed. Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Run the following command to verify that the ypbind package is not installed: # rpm -q ypbind package ypbind is not installed",
    "remediation": "Run the following command to remove the ypbind package: # dnf remove ypbind References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "system_nis_client_not_installed",
      "system_nis_client_removed",
      "system_ypbind_service_disabled",
      "system_nis_package_uninstalled",
      "system_nis_client_absent"
    ]
  },
  {
    "id": "2.3.2",
    "title": "Ensure rsh client is not installed",
    "assessment": "Automated",
    "description": "The rsh package contains the client commands for the rsh services.",
    "rationale": "These legacy clients contain numerous security exposures and have been replaced with the more secure SSH package. Even if the server is removed, it is best to ensure the clients are also removed to prevent users from inadvertently attempting to use these commands and therefore exposing their credentials. Note that removing the rsh package removes the clients for rsh , rcp and rlogin . Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Run the following command to verify that the rsh package is not installed: # rpm -q rsh package rsh is not installed",
    "remediation": "Run the following command to remove the rsh package: # dnf remove rsh References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_rsh_client_not_installed",
      "compute_rsh_client_removed",
      "compute_rsh_client_disabled",
      "compute_rsh_client_uninstalled",
      "compute_rsh_client_absent"
    ]
  },
  {
    "id": "2.3.3",
    "title": "Ensure talk client is not installed",
    "assessment": "Automated",
    "description": "The talk software makes it possible for users to send and receive messages across systems through a terminal session. The talk client, which allows initialization of talk sessions, is installed by default.",
    "rationale": "The software presents a security risk as it uses unencrypted protocols for communication. Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Run the following command to verify that the talk package is not installed: # rpm -q talk package talk is not installed",
    "remediation": "Run the following command to remove the talk package: # dnf remove talk References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_package_talk_client_not_installed",
      "system_software_talk_client_removed",
      "os_package_talk_client_disabled",
      "linux_package_talk_client_uninstalled",
      "unix_software_talk_client_absent"
    ]
  },
  {
    "id": "2.3.4",
    "title": "Ensure telnet client is not installed",
    "assessment": "Automated",
    "description": "The telnet package contains the telnet client, which allows users to start connections to other systems via the telnet protocol.",
    "rationale": "The telnet protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow an unauthorized user to steal credentials. The ssh package provides an encrypted session and stronger security and is included in most Linux distributions. Impact: Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "audit": "Run the following command to verify that the telnet package is not installed: # rpm -q telnet package telnet is not installed",
    "remediation": "Run the following command to remove the telnet package: # dnf remove telnet References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Many insecure service clients are used as troubleshooting tools and in testing environments. Uninstalling them can inhibit capability to test and troubleshoot. If they are required it is advisable to remove the clients after use to prevent accidental or intentional misuse.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_telnet_client_not_installed",
      "compute_system_telnet_package_removed",
      "compute_os_telnet_client_disabled",
      "compute_software_telnet_protocol_blocked",
      "compute_host_telnet_service_unavailable"
    ]
  },
  {
    "id": "2.3.5",
    "title": "Ensure LDAP client is not installed",
    "assessment": "Automated",
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP client, it is recommended that the software be removed to reduce the potential attack surface. Impact: Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment.",
    "audit": "Run the following command to verify that the openldap-clients package is not installed: # rpm -q openldap-clients package openldap-clients is not installed",
    "remediation": "Run the following command to remove the openldap-clients package: # dnf remove openldap-clients References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "Removing the LDAP client will prevent or inhibit using LDAP for authentication in your environment.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_instance_ldap_client_not_installed",
      "compute_image_ldap_client_not_installed",
      "compute_fleet_ldap_client_not_installed",
      "compute_autoscaling_ldap_client_not_installed",
      "compute_template_ldap_client_not_installed"
    ]
  },
  {
    "id": "2.3.6",
    "title": "Ensure TFTP client is not installed",
    "assessment": "Automated",
    "description": "Trivial File Transfer Protocol (TFTP) is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers allow connections from a TFTP Client for sending and receiving files.",
    "rationale": "TFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to exploit TFTP to gain access to files",
    "audit": "Run the following command to verify tftp is not installed: # rpm -q tftp package tftp is not installed",
    "remediation": "Run the following command to remove tftp: # dnf remove tftp References: 1. NIST SP 800-53 Rev. 5: CM-7",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7",
    "function_names": [
      "compute_tftp_client_not_installed",
      "network_tftp_client_not_installed",
      "os_tftp_client_not_installed",
      "system_tftp_client_not_installed",
      "package_tftp_client_not_installed"
    ]
  },
  {
    "id": "3.1.1",
    "title": "Ensure IPv6 is enabled",
    "assessment": "Automated",
    "description": "Internet Protocol Version 6 (IPv6) is the most recent version of Internet Protocol (IP). It's designed to supply IP addressing and additional security to support the predicted growth of connected devices. IPv6 is based on 128-bit addressing and can support 340 undecillion addresses, which is 340 followed by 36 zeroes. Features of IPv6 • Hierarchical addressing and routing infrastructure • Stateful and Stateless configuration • Support for quality of service (QoS) • An ideal protocol for neighboring node interaction",
    "rationale": "IETF RFC 4038 recommends that applications are built with an assumption of dual stack. It is recommended that IPv6 be enabled and configured in accordance with Benchmark recommendations. Impact: When enabled, IPv6 will require additional configuration to reduce risk to the system.",
    "audit": "Run the following command to verify IPv6 is enabled on the system: # grep -Ps '^\\h*0\\b' /sys/module/ipv6/parameters/disable 0",
    "remediation": "Run the following script to comment out any occurrences of the following parameters in a kernel configuration file: • net.ipv6.conf.all.disable_ipv6=1 • net.ipv6.conf.default.disable_ipv6=1 #!/usr/bin/env bash { a_kpar=(\"net.ipv6.conf.all.disable_ipv6=1\" \"net.ipv6.conf.default.disable_ipv6=1\") l_searchloc=\"/run/sysctl.d/*.conf /etc/sysctl.d/*.conf /usr/local/lib/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /lib/sysctl.d/*.conf /etc/sysctl.conf $([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" for l_kpar in \"${a_kpar[@]}\"; do while IFS='=' read -r l_kpn l_kpv; do l_kpn=\"${l_kpn// /}\"; l_kpv=\"${l_kpv// /}\" while read -r l_file; do echo -e \" - \\\"$l_kpn\\\" is set to \\\"$l_kpv\\\" in \\\"$l_file\\\"\\n  - Commenting out \\\"${l_kpn}=${l_kpv}\\\" in \\\"$l_file\\\"\" sed -ri 's/^\\s*'\"$l_kpn\"'/# &/' \"$l_file\" done < <(grep -Psl -- '^\\h*'\"$l_kpn\"'\\h*=\\h*'\"$l_kpv\"'\\b' $l_searchloc) done <<< \"$l_kpar\" done unset a_kpar } Run the following command to reboot the system: # shutdown -r now Default Value: IPv6 enabled References: 1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: IPv4 is based on 32-bit addressing, limiting it to a total of 4.3 billion addresses. IPv6 is based on 128-bit addressing and can support 340 undecillion, which is 340 trillion3 addresses. Having more addresses has grown in importance with the expansion of smart devices and connectivity. IPv6 provides more than enough globally unique IP addresses for every networked device currently on the planet, helping ensure providers can keep pace with the expected proliferation of IP-based devices.",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "When enabled, IPv6 will require additional configuration to reduce risk to the system.",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7 Additional Information: IPv4 is based on 32-bit addressing, limiting it to a total of 4.3 billion addresses. IPv6 is based on 128-bit addressing and can support 340 undecillion, which is 340 trillion3 addresses. Having more addresses has grown in importance with the expansion of smart devices and connectivity. IPv6 provides more than enough globally unique IP addresses for every networked device currently on the planet, helping ensure providers can keep pace with the expected proliferation of IP-based devices.",
    "function_names": [
      "network_vpc_ipv6_enabled",
      "network_subnet_ipv6_enabled",
      "network_interface_ipv6_enabled",
      "compute_instance_ipv6_enabled",
      "load_balancer_ipv6_enabled",
      "cloud_cdn_ipv6_enabled",
      "network_security_group_ipv6_enabled",
      "network_route_table_ipv6_enabled"
    ]
  },
  {
    "id": "3.2.1",
    "title": "Ensure packet redirect sending is disabled",
    "assessment": "Automated",
    "description": "ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.",
    "rationale": "An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.send_redirects is set to 0 • net.ipv4.conf.default.send_redirects is set to 0 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.send_redirects=0\" \"net.ipv4.conf.default.send_redirects=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.send_redirects = 0 • net.ipv4.conf.default.send_redirects = 0 Example: # printf \" net.ipv4.conf.all.send_redirects = 0 net.ipv4.conf.default.send_redirects = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.send_redirects=0 sysctl -w net.ipv4.conf.default.send_redirects=0 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_instance_packet_redirect_disabled",
      "network_interface_packet_redirect_disabled",
      "os_network_packet_redirect_disabled",
      "vm_network_packet_redirect_disabled",
      "host_network_packet_redirect_disabled"
    ]
  },
  {
    "id": "3.3.1",
    "title": "Ensure source routed packets are not accepted",
    "assessment": "Automated",
    "description": "In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.",
    "rationale": "Setting net.ipv4.conf.all.accept_source_route, net.ipv4.conf.default.accept_source_route, net.ipv6.conf.all.accept_source_route and net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.accept_source_route is set to 0 • net.ipv4.conf.default.accept_source_route is set to 0 • net.ipv6.conf.all.accept_source_route is set to 0 • net.ipv6.conf.default.accept_source_route is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.accept_source_route=0\" \"net.ipv4.conf.default.accept_source_route=0\" \"net.ipv6.conf.all.accept_source_route=0\" \"net.ipv6.conf.default.accept_source_route=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.accept_source_route = 0 • net.ipv4.conf.default.accept_source_route = 0 Example: # printf \" net.ipv4.conf.all.accept_source_route = 0 net.ipv4.conf.default.accept_source_route = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.accept_source_route=0 sysctl -w net.ipv4.conf.default.accept_source_route=0 sysctl -w net.ipv4.route.flush=1 } -IF- IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.accept_source_route = 0 • net.ipv6.conf.default.accept_source_route = 0 Example: # printf \" net.ipv6.conf.all.accept_source_route = 0 net.ipv6.conf.default.accept_source_route = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.accept_source_route=0 sysctl -w net.ipv6.conf.default.accept_source_route=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "ec2_network_source_routing_disabled",
      "vpc_network_source_routing_disabled",
      "network_interface_source_routing_disabled",
      "subnet_source_routing_disabled",
      "security_group_source_routing_disabled",
      "network_acl_source_routing_disabled",
      "instance_source_routing_disabled",
      "transit_gateway_source_routing_disabled",
      "vpn_connection_source_routing_disabled",
      "direct_connect_source_routing_disabled"
    ]
  },
  {
    "id": "3.3.2",
    "title": "Ensure ICMP redirects are not accepted",
    "assessment": "Automated",
    "description": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects, net.ipv4.conf.default.accept_redirects, net.ipv6.conf.all.accept_redirects, and net.ipv6.conf.default.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.",
    "rationale": "Attackers could use bogus ICMP redirect messages to maliciously alter the system routing tables and get them to send packets to incorrect networks and allow your system packets to be captured.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.accept_redirects is set to 0 • net.ipv4.conf.default.accept_redirects is set to 0 • net.ipv6.conf.all.accept_redirects is set to 0 • net.ipv6.conf.default.accept_redirects is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.accept_redirects=0\" \"net.ipv4.conf.default.accept_redirects=0\" \"net.ipv6.conf.all.accept_redirects=0\" \"net.ipv6.conf.default.accept_redirects=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.accept_redirects = 0 • net.ipv4.conf.default.accept_redirects = 0 Example: # printf \" net.ipv4.conf.all.accept_redirects = 0 net.ipv4.conf.default.accept_redirects = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.accept_redirects=0 sysctl -w net.ipv4.conf.default.accept_redirects=0 sysctl -w net.ipv4.route.flush=1 } -IF- IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.accept_redirects = 0 • net.ipv6.conf.default.accept_redirects = 0 Example: # printf \" net.ipv6.conf.all.accept_redirects = 0 net.ipv6.conf.default.accept_redirects = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.accept_redirects=0 sysctl -w net.ipv6.conf.default.accept_redirects=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_network_icmp_redirects_disabled",
      "compute_network_ipv4_redirects_disabled",
      "compute_network_ipv6_redirects_disabled",
      "compute_network_all_redirects_disabled",
      "compute_network_default_redirects_disabled"
    ]
  },
  {
    "id": "3.3.3",
    "title": "Ensure secure ICMP redirects are not accepted",
    "assessment": "Automated",
    "description": "Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.",
    "rationale": "It is still possible for even known gateways to be compromised. Setting net.ipv4.conf.all.secure_redirects and net.ipv4.conf.default.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.secure_redirects is set to 0 • net.ipv4.conf.default.secure_redirects is set to 0 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.secure_redirects=0\" \"net.ipv4.conf.default.secure_redirects=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.secure_redirects = 0 • net.ipv4.conf.default.secure_redirects = 0 Example: # printf \" net.ipv4.conf.all.secure_redirects = 0 net.ipv4.conf.default.secure_redirects = 0 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following commands to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.secure_redirects=0 sysctl -w net.ipv4.conf.default.secure_redirects=0 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "network_interface_icmp_redirects_disabled",
      "network_interface_secure_icmp_redirects_disabled",
      "network_interface_untrusted_icmp_redirects_blocked",
      "network_interface_default_gateway_icmp_redirects_restricted",
      "network_interface_icmp_redirects_secure_gateways_only"
    ]
  },
  {
    "id": "3.3.4",
    "title": "Ensure suspicious packets are logged",
    "assessment": "Automated",
    "description": "When enabled, this feature logs packets with un-routable source addresses to the kernel log.",
    "rationale": "Setting net.ipv4.conf.all.log_martians and net.ipv4.conf.default.log_martians to 1` enables this feature. Logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.log_martians is set to 1 • net.ipv4.conf.default.log_martians is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.log_martians=1\" \"net.ipv4.conf.default.log_martians=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.log_martians = 1 • net.ipv4.conf.default.log_martians = 1 Example: # printf \" net.ipv4.conf.all.log_martians = 1 net.ipv4.conf.default.log_martians = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.log_martians=1 sysctl -w net.ipv4.conf.default.log_martians=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "network_interface_suspicious_packets_logging_enabled",
      "vpc_flow_log_suspicious_packets_logging_enabled",
      "network_acl_suspicious_packets_logging_enabled",
      "security_group_suspicious_packets_logging_enabled",
      "firewall_suspicious_packets_logging_enabled",
      "cloud_network_suspicious_packets_logging_enabled",
      "packet_filter_suspicious_packets_logging_enabled",
      "network_security_suspicious_packets_logging_enabled"
    ]
  },
  {
    "id": "3.3.5",
    "title": "Ensure broadcast ICMP requests are ignored",
    "assessment": "Automated",
    "description": "Setting net.ipv4.icmp_echo_ignore_broadcasts to 1 will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses.",
    "rationale": "Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for your network could be used to trick your host into starting (or participating) in a Smurf attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast messages with a spoofed source address. All hosts receiving this message and responding would send echo-reply messages back to the spoofed address, which is probably not routable. If many hosts respond to the packets, the amount of traffic on the network could be significantly multiplied.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.icmp_echo_ignore_broadcasts is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.icmp_echo_ignore_broadcasts=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.icmp_echo_ignore_broadcasts = 1 Example: # printf \" net.ipv4.icmp_echo_ignore_broadcasts = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_network_icmp_broadcast_ignored",
      "compute_network_icmp_echo_ignored",
      "compute_network_broadcast_protection_enabled",
      "compute_network_icmp_requests_blocked",
      "compute_network_icmp_echo_ignore_broadcasts_set"
    ]
  },
  {
    "id": "3.3.6",
    "title": "Ensure bogus ICMP responses are ignored",
    "assessment": "Automated",
    "description": "Setting net.ipv4.icmp_ignore_bogus_error_responses to 1 prevents the kernel from logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping file systems from filling up with useless log messages.",
    "rationale": "Some routers (and some attackers) will send responses that violate RFC-1122 and attempt to fill up a log file system with many useless error messages.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.icmp_ignore_bogus_error_responses is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.icmp_ignore_bogus_error_responses=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.icmp_ignore_bogus_error_responses = 1 Example: # printf \" net.ipv4.icmp_ignore_bogus_error_responses = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_kernel_icmp_ignore_bogus_error_responses_enabled",
      "compute_network_icmp_bogus_responses_ignored",
      "compute_system_icmp_error_responses_filtered",
      "compute_kernel_icmp_rfc1122_compliance_enabled",
      "compute_network_icmp_log_spam_prevented"
    ]
  },
  {
    "id": "3.3.7",
    "title": "Ensure Reverse Path Filtering is enabled",
    "assessment": "Automated",
    "description": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).",
    "rationale": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.conf.all.rp_filter is set to 1 • net.ipv4.conf.default.rp_filter is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.conf.all.rp_filter=1\" \"net.ipv4.conf.default.rp_filter=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.conf.all.rp_filter = 1 • net.ipv4.conf.default.rp_filter = 1 Example: # printf \" net.ipv4.conf.all.rp_filter = 1 net.ipv4.conf.default.rp_filter = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following commands to set the active kernel parameters: # { sysctl -w net.ipv4.conf.all.rp_filter=1 sysctl -w net.ipv4.conf.default.rp_filter=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "network_interface_reverse_path_filtering_enabled",
      "network_interface_rp_filter_all_enabled",
      "network_interface_rp_filter_default_enabled",
      "network_interface_martian_packet_logging_enabled"
    ]
  },
  {
    "id": "3.3.8",
    "title": "Ensure TCP SYN Cookies is enabled",
    "assessment": "Automated",
    "description": "When net.ipv4.tcp_syncookies is set to 1, the kernel will handle TCP SYN packets normally until the half-open connection queue is full, at which time, the SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply replies to the SYN with a SYN|ACK, but will include a specially crafted TCP sequence number that encodes the source and destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the queue.",
    "rationale": "Attackers use SYN flood attacks to perform a denial of service attacked on a system by sending many SYN packets without completing the three way handshake. This will quickly use up slots in the kernel's half-open connection queue and prevent legitimate connections from succeeding. Setting net.ipv4.tcp_syncookies to 1 enables SYN cookies, allowing the system to keep accepting valid connections, even if under a denial of service attack.",
    "audit": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv4.tcp_syncookies is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv4.tcp_syncookies=1\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv4.tcp_syncookies = 1 Example: # printf \" net.ipv4.tcp_syncookies = 1 \" >> /etc/sysctl.d/60-netipv4_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv4.tcp_syncookies=1 sysctl -w net.ipv4.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_network_tcp_syncookies_enabled",
      "compute_network_tcp_syncookies_configured",
      "network_tcp_syncookies_enabled",
      "network_tcp_syncookies_active",
      "linux_kernel_tcp_syncookies_enabled",
      "linux_network_tcp_syncookies_configured",
      "os_network_tcp_syncookies_enabled",
      "os_kernel_tcp_syncookies_active"
    ]
  },
  {
    "id": "3.3.9",
    "title": "Ensure IPv6 router advertisements are not accepted",
    "assessment": "Automated",
    "description": "This setting disables the system's ability to accept IPv6 router advertisements.",
    "rationale": "It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes. Setting net.ipv6.conf.all.accept_ra and net.ipv6.conf.default.accept_ra to 0 disables the system's ability to accept IPv6 router advertisements.",
    "audit": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: • net.ipv6.conf.all.accept_ra is set to 0 • net.ipv6.conf.default.accept_ra is set to 0 Note: • kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a conically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence. • IPv6 kernel parameters only apply to systems where IPv6 is enabled #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"net.ipv6.conf.all.accept_ra=0\" \"net.ipv6.conf.default.accept_ra=0\") l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\" kernel_parameter_chk() { l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration if [ \"$l_krp\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\" fi unset A_out; declare -A A_out # Check durable setting (files) while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\") fi fi done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)') if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl - -cat-config) l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\" l_kpar=\"${l_kpar//\\//.}\" [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\") fi if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output while IFS=\"=\" read -r l_fkpname l_fkpvalue; do l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\" if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\" else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\" fi done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\") else l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n   ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\" fi } while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\" if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\" else kernel_parameter_chk fi done < <(printf '%s\\n' \"${a_parlist[@]}\") if [ -z \"$l_output2\" ]; then # Provide output from checks echo -e \"\\n- Audit Result:\\n  ** PASS **\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\" fi }",
    "remediation": "-IF- IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: • net.ipv6.conf.all.accept_ra = 0 • net.ipv6.conf.default.accept_ra = 0 Example: # printf \" net.ipv6.conf.all.accept_ra = 0 net.ipv6.conf.default.accept_ra = 0 \" >> /etc/sysctl.d/60-netipv6_sysctl.conf Run the following command to set the active kernel parameters: # { sysctl -w net.ipv6.conf.all.accept_ra=0 sysctl -w net.ipv6.conf.default.accept_ra=0 sysctl -w net.ipv6.route.flush=1 } Note: If these settings appear in a conically later file, or later in the same file, these settings will be overwritten References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "network_interface_ipv6_router_advertisements_disabled",
      "network_interface_ipv6_ra_accept_disabled",
      "compute_instance_ipv6_router_advertisements_blocked",
      "vpc_network_ipv6_ra_acceptance_disabled",
      "instance_networking_ipv6_router_advertisements_rejected"
    ]
  },
  {
    "id": "3.4.3.1.1",
    "title": "Ensure iptables package is installed",
    "assessment": "Automated",
    "description": "iptables is a utility program that allows a system administrator to configure the tables provided by the Linux kernel firewall, implemented as different Netfilter modules, and the chains and rules it stores. Different kernel modules and programs are used for different protocols; iptables applies to IPv4, ip6tables to IPv6, arptables to ARP, and ebtables to Ethernet frames.",
    "rationale": "A method of configuring and maintaining firewall rules is necessary to configure a Host Based Firewall.",
    "audit": "Run the following command to verify that iptables is installed: # rpm -q iptables iptables-<version>",
    "remediation": "Run the following command to install iptables: # dnf install iptables References: 1. NIST SP 800-53 Rev. 5: CM-7, CA-9",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7, CA-9",
    "function_names": [
      "compute_firewall_package_installed",
      "compute_iptables_installed",
      "compute_netfilter_module_enabled",
      "compute_ipv4_firewall_installed",
      "compute_ipv6_firewall_installed",
      "compute_arptables_installed",
      "compute_ebtables_installed",
      "compute_kernel_firewall_installed",
      "compute_firewall_utility_installed",
      "compute_netfilter_configured"
    ]
  },
  {
    "id": "3.4.3.1.2",
    "title": "Ensure nftables is not installed with iptables",
    "assessment": "Automated",
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames and is the successor to iptables.",
    "rationale": "Running both iptables and nftables may lead to conflict.",
    "audit": "Run the following commend to verify that nftables is not installed: # rpm -q nftables package nftables is not installed",
    "remediation": "Run the following command to remove nftables: # dnf remove nftables References: 1. NIST SP 800-53 Rev. 5: CM-7, CA-9",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7, CA-9",
    "function_names": [
      "linux_nftables_not_installed_with_iptables",
      "linux_iptables_nftables_conflict_absent",
      "linux_network_filter_nftables_iptables_exclusive",
      "linux_packet_filter_nftables_iptables_mutual_exclusion",
      "linux_firewall_nftables_iptables_coexistence_disabled"
    ]
  },
  {
    "id": "3.4.3.1.3",
    "title": "Ensure firewalld is either not installed or masked with iptables",
    "assessment": "Automated",
    "description": "firewalld (Dynamic Firewall Manager) provides a dynamically managed firewall with support for network/firewall “zones” to assign a level of trust to a network and its associated connections, interfaces or sources. It has support for IPv4, IPv6, Ethernet bridges and also for IPSet firewall settings. There is a separation of the runtime and permanent configuration options.",
    "rationale": "Running iptables.service and\\or ip6tables.service with firewalld.service may lead to conflict and unexpected results.",
    "audit": "Run the following command to verify that firewalld is not installed: # rpm -q firewalld package firewalld is not installed OR Run the following commands to verify that firewalld is stopped and masked # systemctl status firewalld | grep \"Active: \" | grep -v  \"active (running) \" No output should be returned # systemctl is-enabled firewalld masked",
    "remediation": "Run the following command to remove firewalld # yum remove firewalld OR Run the following command to stop and mask firewalld # systemctl --now mask firewalld References: 1. NIST SP 800-53 Rev. 5: CM-7, CA-9",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-7, CA-9",
    "function_names": [
      "firewall_service_not_installed",
      "firewall_service_masked_with_iptables",
      "firewalld_disabled_or_masked",
      "dynamic_firewall_manager_not_installed",
      "firewalld_service_masked",
      "iptables_used_instead_of_firewalld",
      "firewalld_removed_or_masked",
      "firewall_manager_service_disabled",
      "firewalld_replaced_with_iptables",
      "firewalld_service_not_present_or_masked"
    ]
  },
  {
    "id": "4.1.1.1",
    "title": "Ensure rsyslog is installed",
    "assessment": "Automated",
    "description": "The rsyslog software is recommended in environments where journald does not meet operation requirements.",
    "rationale": "The security enhancements of rsyslog such as connection-oriented (i.e. TCP) transmission of logs, the option to log to database formats, and the encryption of log data en route to a central logging server) justify installing and configuring the package.",
    "audit": "Verify rsyslog is installed. Run the following command: # rpm -q rsyslog Verify the output matches: rsyslog-<version>",
    "remediation": "Run the following command to install rsyslog: # dnf install rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "function_names": [
      "logging_rsyslog_installed",
      "logging_rsyslog_configured",
      "logging_rsyslog_service_enabled",
      "logging_rsyslog_service_running",
      "logging_rsyslog_default_config_secure",
      "logging_rsyslog_remote_logging_enabled",
      "logging_rsyslog_tls_encryption_enabled",
      "logging_rsyslog_file_permissions_secure",
      "logging_rsyslog_rotation_enabled",
      "logging_rsyslog_retention_policy_configured"
    ]
  },
  {
    "id": "4.1.1.2",
    "title": "Ensure rsyslog service is enabled",
    "assessment": "Automated",
    "description": "Once the rsyslog package is installed, ensure that the service is enabled.",
    "rationale": "If the rsyslog service is not enabled to start on boot, the system will not capture logging events.",
    "audit": "Run the following command to verify rsyslog is enabled: # systemctl is-enabled rsyslog Verify the output matches: enabled",
    "remediation": "Run the following command to enable rsyslog: # systemctl --now enable rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "function_names": [
      "rsyslog_service_enabled",
      "rsyslog_service_running",
      "rsyslog_service_configured",
      "rsyslog_service_boot_enabled",
      "rsyslog_service_active_status"
    ]
  },
  {
    "id": "4.1.1.3",
    "title": "Ensure rsyslog default file permissions are configured",
    "assessment": "Automated",
    "description": "RSyslog will create logfiles that do not already exist on the system. This setting controls what permissions will be applied to these newly created files.",
    "rationale": "It is important to ensure that log files have the correct permissions to ensure that sensitive data is archived and protected. Impact: The systems global umask could override, but only making the file permissions stricter, what is configured in RSyslog with the FileCreateMode directive. RSyslog also has it's own $umask directive that can alter the intended file creation mode. In addition, consideration should be given to how FileCreateMode is used. Thus it is critical to ensure that the intended file creation mode is not overridden with less restrictive settings in /etc/rsyslog.conf, /etc/rsyslog.d/*conf files and that FileCreateMode is set before any file is created.",
    "audit": "Run the following command: # grep ^\\$FileCreateMode /etc/rsyslog.conf /etc/rsyslog.d/*.conf Verify the output matches: $FileCreateMode 0640 Should a site policy dictate less restrictive permissions, ensure to follow said policy. NOTE: More restrictive permissions such as 0600 is implicitly sufficient.",
    "remediation": "Edit either /etc/rsyslog.conf or a dedicated .conf file in /etc/rsyslog.d/ and set $FileCreateMode to 0640 or more restrictive: $FileCreateMode 0640 Restart the service: # systemctl restart rsyslog References: 1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, AC-6, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "impact": "The systems global umask could override, but only making the file permissions stricter, what is configured in RSyslog with the FileCreateMode directive. RSyslog also has it's own $umask directive that can alter the intended file creation mode. In addition, consideration should be given to how FileCreateMode is used. Thus it is critical to ensure that the intended file creation mode is not overridden with less restrictive settings in /etc/rsyslog.conf, /etc/rsyslog.d/*conf files and that FileCreateMode is set before any file is created.",
    "references": "1. See the rsyslog.conf(5) man page for more information. 2. NIST SP 800-53 Rev. 5: AC-3, AC-6, MP-2",
    "function_names": [
      "rsyslog_file_permissions_configured",
      "rsyslog_default_file_permissions_secure",
      "rsyslog_logfile_permissions_restricted",
      "rsyslog_new_file_permissions_enforced",
      "rsyslog_file_creation_permissions_set"
    ]
  },
  {
    "id": "4.1.1.4",
    "title": "Ensure rsyslog is not configured to receive logs from a remote client",
    "assessment": "Automated",
    "description": "RSyslog supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts.",
    "rationale": "If a client is configured to also receive data, thus turning it into a server, the client system is acting outside it's operational boundary.",
    "audit": "Review the /etc/rsyslog.conf and /etc/rsyslog.d/*.conf files and verify that the system is not configured to accept incoming logs. Old format  # grep '$ModLoad imtcp' /etc/rsyslog.conf /etc/rsyslog.d/*.conf # grep '$InputTCPServerRun' /etc/rsyslog.conf /etc/rsyslog.d/*.conf No output expected. New format  # grep -P -- '^\\h*module\\(load=\"imtcp\"\\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf # grep -P -- '^\\h*input\\(type=\"imtcp\" port=\"514\"\\)' /etc/rsyslog.conf /etc/rsyslog.d/*.conf No output expected.",
    "remediation": "Should there be any active log server configuration found in the auditing section, modify those file and remove the specific lines highlighted by the audit. Ensure none of the following entries are present in any of /etc/rsyslog.conf or /etc/rsyslog.d/*.conf. Old format  $ModLoad imtcp $InputTCPServerRun New format  module(load=\"imtcp\") input(type=\"imtcp\" port=\"514\") Restart the service: # systemctl restart rsyslog References: 1. NIST SP 800-53 Rev. 5: AU-2, AU-7, AU-12, CM-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-2, AU-7, AU-12, CM-6",
    "function_names": [
      "rsyslog_config_remote_receive_disabled",
      "rsyslog_client_remote_receive_disabled",
      "rsyslog_remote_host_receive_disabled",
      "rsyslog_remote_log_reception_disabled",
      "rsyslog_remote_client_receive_disabled"
    ]
  },
  {
    "id": "4.1.2",
    "title": "Ensure all logfiles have appropriate access configured",
    "assessment": "Automated",
    "description": "Log files contain information from many services on the local system, or in the event of a centralized log server, others systems logs as well. In general log files are found in /var/log/, although application can be configured to store logs elsewhere. Should your application store logs in another, ensure to run the same test on that location.",
    "rationale": "It is important that log files have the correct permissions to ensure that sensitive data is protected and that only the appropriate users / groups have access to them.",
    "audit": "Run the following script to verify that files in /var/log/ have appropriate permissions and ownership: #!/usr/bin/env bash { l_output2=\"\" l_auser=\"root|syslog\" l_agroup=\"root|adm\" l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\" file_test_chk() { l_op2=\"\" maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then if [[ ! \"$l_user\" =~ ($l_auser) ]]; then l_auser=\"$l_auser|$l_user\" fi if [[ ! \"$l_group\" =~ ($l_agroup) ]]; then l_tst=\"\" while read -r l_duid; do if [ -n \"$l_duid\" ]; then [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed fi done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\" [ \"$l_tst\" != \"failed\" ] && l_agroup=\"$l_agroup|$l_group\" fi fi if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then l_op2=\"$l_op2\\n  - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\" fi if [[ ! \"$l_user\" =~ ($l_auser) ]]; then l_op2=\"$l_op2\\n  - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\" fi if [[ ! \"$l_group\" =~ ($l_agroup) ]]; then l_op2=\"$l_op2\\n  - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\" fi [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\" } a_file=() # Initialize array # Loop to create array with stat of files that could possibly fail one of the audits while IFS= read -r -d $'\\0' l_file; do [ -f \"$l_file\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\")\") done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! - group root \\) -print0) while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do l_bname=\"$(basename \"$l_fname\")\" case \"$l_bname\" in lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | README) perm_mask='0113' file_test_chk;; secure | auth.log | auth.log.* | syslog | syslog.* | messages | messages.* | *.journal | *.journal~ | kern.log | kern.log.* | aide.log | aide.log.* | term.log | term.log.* | mail.log | mail.log.* | ufw.log | ufw.log.*) perm_mask='0137' file_test_chk;; btmp | btmp.* | btmp-* | SSSD | sssd | gdm | gdm3) perm_mask='0117' file_test_chk;; *) perm_mask='0133' file_test_chk;; esac done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\" unset a_file # Clear array # If all files passed, then we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Results:\\n ** Pass **\\n- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n\" else # print the reason why we are failing echo -e \"\\n- Audit Results:\\n ** Fail **\\n$l_output2\" fi }",
    "remediation": "Run the following script to update permissions and ownership on files in /var/log. Although the script is not destructive, ensure that the output is captured in the event that the remediation causes issues. #!/usr/bin/env bash { l_output2=\"\" l_auser=\"root|syslog\" l_agroup=\"root|adm\" l_fuser=\"root\" l_fgroup=\"root\" l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\" file_test_fix() { l_op2=\"\" maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then if [[ ! \"$l_user\" =~ ($l_auser) ]]; then l_auser=\"$l_auser|$l_user\" fi if [[ ! \"$l_group\" =~ ($l_agroup) ]]; then l_tst=\"\" while read -r l_duid; do if [ -n \"$l_duid\" ]; then [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed fi done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\" [ \"$l_tst\" != \"failed\" ] && l_agroup=\"$l_agroup|$l_group\" fi fi if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then l_op2=\"$l_op2\\n  - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\\n  - Removing excess permissions\" chmod \"$l_rperms\" \"$l_fname\" fi if [[ ! \"$l_user\" =~ ($l_auser) ]]; then l_op2=\"$l_op2\\n  - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\\n  - Changing ownership to: \\\"$l_fuser\\\"\" chown \"$l_fuser\" \"$l_fname\" fi if [[ ! \"$l_group\" =~ ($l_agroup) ]]; then l_op2=\"$l_op2\\n  - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\\n  - Changing group ownership to: \\\"$l_fgroup\\\"\" chgrp \"$l_fgroup\" \"$l_fname\" fi [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\" } unset a_file && a_file=() # clear and initialize array while IFS= read -r -d $'\\0' l_file; do # Loop to create array with stat of files that could possibly fail one of the audits [ -e \"$l_file\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\")\") done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! - group root \\) -print0) while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do l_bname=\"$(basename \"$l_fname\")\" case \"$l_bname\" in lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | README) perm_mask='0113' l_rperms=\"ug-x,o-wx\" file_test_fix;; secure | auth.log | auth.log.* | syslog | syslog.* | messages | messages.* | *.journal | *.journal~ | kern.log | kern.log.* | aide.log | aide.log.* | term.log | term.log.* | mail.log | mail.log.* | ufw.log | ufw.log.*) perm_mask='0137' l_rperms=\"u-x,g-wx,o-rwx\" file_test_fix;; btmp | btmp.* | btmp-* | SSSD | sssd | gdm | gdm3) perm_mask='0117' l_rperms=\"ug-x,o-rwx\" file_test_fix;; *) perm_mask='0133' l_rperms=\"u-x,go-wx\" file_test_fix;; esac done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\" unset a_file # Clear array if [ -z \"$l_output2\" ]; then # If all files passed, then we report no changes echo -e \"\\n- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n  - No changes required\\n\" else # print report of changes echo -e \"\\n$l_output2\" fi } Note: You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions. If there are services that log to other locations, ensure that those log files have the appropriate access configured. References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions.",
    "function_names": [
      "os_logfile_permissions_restricted",
      "os_logfile_owner_valid",
      "os_logfile_group_valid",
      "os_logfile_world_writable_disabled",
      "os_logfile_sticky_bit_set",
      "os_logfile_symlink_protected",
      "os_logfile_directory_permissions_restricted",
      "os_logfile_directory_owner_valid",
      "os_logfile_directory_group_valid",
      "os_logfile_directory_world_writable_disabled"
    ]
  },
  {
    "id": "4.2",
    "title": "Ensure logrotate is configured",
    "assessment": "Manual",
    "description": "The system includes the capability of rotating log files regularly to avoid filling up the system with logs or making the logs unmanageably large. The file /etc/logrotate.d/syslog is the configuration file used to rotate log files created by syslog or rsyslog.",
    "rationale": "By keeping the log files smaller and more manageable, a system administrator can easily archive these files to another system and spend less time looking through inordinately large log files.",
    "audit": "Review /etc/logrotate.conf and /etc/logrotate.d/* and verify logs are rotated according to site policy.",
    "remediation": "Edit /etc/logrotate.conf and /etc/logrotate.d/* to ensure logs are rotated according to site policy. References: 1. NIST SP 800-53 Rev. 5: AU-8 Additional Information: If no maxage setting is set for logrotate a situation can occur where logrotate is interrupted and fails to delete rotated log files. It is recommended to set this to a value greater than the longest any log file should exist on your system to ensure that any such log file is removed but standard rotation settings are not overridden.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AU-8 Additional Information: If no maxage setting is set for logrotate a situation can occur where logrotate is interrupted and fails to delete rotated log files. It is recommended to set this to a value greater than the longest any log file should exist on your system to ensure that any such log file is removed but standard rotation settings are not overridden.",
    "function_names": [
      "system_logrotate_config_exists",
      "system_logrotate_config_valid",
      "system_logrotate_rotation_enabled",
      "system_logrotate_retention_configured",
      "system_logrotate_size_limits_set",
      "system_logrotate_frequency_configured",
      "system_logrotate_compression_enabled",
      "system_logrotate_post_rotation_script_valid",
      "system_logrotate_error_handling_configured",
      "system_logrotate_permissions_correct"
    ]
  },
  {
    "id": "5.1.1",
    "title": "Ensure cron daemon is enabled",
    "assessment": "Automated",
    "description": "The cron daemon is used to execute batch jobs on the system.",
    "rationale": "While there may not be user jobs that need to be run on the system, the system does have maintenance jobs that may include security monitoring that have to run, and cron is used to execute them.",
    "audit": "Run the the following command to verify cron is enabled: # systemctl is-enabled crond enabled Verify result is \"enabled\".",
    "remediation": "Run the following command to enable cron: # systemctl --now enable crond References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: Additional methods of enabling a service exist. Consult your distribution documentation for appropriate methods.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: Additional methods of enabling a service exist. Consult your distribution documentation for appropriate methods.",
    "function_names": [
      "compute_cron_daemon_enabled",
      "compute_cron_service_running",
      "compute_cron_process_active",
      "compute_cron_autostart_enabled",
      "compute_cron_daemon_configured"
    ]
  },
  {
    "id": "5.1.2",
    "title": "Ensure permissions on /etc/crontab are configured",
    "assessment": "Automated",
    "description": "The /etc/crontab file is used by cron to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that only the owner can access the file.",
    "rationale": "This file contains information on what system jobs are run by cron. Write access to these files could provide unprivileged users with the ability to elevate their privileges. Read access to these files could provide users with the ability to gain insight on system jobs that run on the system and could provide them a way to gain unauthorized privileged access.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat /etc/crontab Access: (0600/-rw-------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/crontab : # chown root:root /etc/crontab # chmod og-rwx /etc/crontab References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "system_crontab_owner_root",
      "system_crontab_group_root",
      "system_crontab_permissions_restricted",
      "system_crontab_no_world_writable",
      "system_crontab_no_world_readable",
      "system_crontab_no_group_writable",
      "system_crontab_no_group_readable",
      "system_crontab_mode_600"
    ]
  },
  {
    "id": "5.1.3",
    "title": "Ensure permissions on /etc/cron.hourly are configured",
    "assessment": "Automated",
    "description": "This directory contains system cron jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat /etc/cron.hourly Access: (0700/drwx------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/cron.hourly : # chown root:root /etc/cron.hourly # chmod og-rwx /etc/cron.hourly References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "compute_cron_hourly_permissions_restricted",
      "compute_cron_hourly_directory_secure",
      "compute_cron_hourly_access_root_only",
      "compute_cron_hourly_no_world_writable",
      "compute_cron_hourly_no_group_writable",
      "compute_cron_hourly_no_other_writable",
      "compute_cron_hourly_permissions_configured",
      "compute_cron_hourly_ownership_root",
      "compute_cron_hourly_strict_permissions",
      "compute_cron_hourly_no_user_modifiable"
    ]
  },
  {
    "id": "5.1.4",
    "title": "Ensure permissions on /etc/cron.daily are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.daily directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat /etc/cron.daily Access: (0700/drwx------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/cron.daily : # chown root:root /etc/cron.daily # chmod og-rwx /etc/cron.daily References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "cron_directory_permissions_configured",
      "cron_daily_directory_restricted_access",
      "cron_daily_directory_root_ownership",
      "cron_daily_directory_no_world_writable",
      "cron_daily_directory_no_group_writable",
      "cron_daily_directory_no_other_writable",
      "cron_daily_directory_permissions_secure",
      "cron_daily_directory_access_controlled",
      "cron_daily_directory_no_unauthorized_access",
      "cron_daily_directory_secure_permissions"
    ]
  },
  {
    "id": "5.1.5",
    "title": "Ensure permissions on /etc/cron.weekly are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.weekly directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat /etc/cron.weekly Access: (0700/drwx------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/cron.weekly : # chown root:root /etc/cron.weekly # chmod og-rwx /etc/cron.weekly References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "cron_directory_permissions_configured",
      "cron_weekly_directory_restricted_access",
      "cron_weekly_directory_root_owned",
      "cron_weekly_directory_no_world_writable",
      "cron_weekly_directory_no_group_writable",
      "cron_weekly_directory_no_other_writable",
      "cron_weekly_directory_permissions_secure",
      "cron_weekly_directory_access_controlled",
      "cron_weekly_directory_strict_permissions",
      "cron_weekly_directory_no_unauthorized_access"
    ]
  },
  {
    "id": "5.1.6",
    "title": "Ensure permissions on /etc/cron.monthly are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.monthly directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat /etc/cron.monthly Access: (0700/drwx------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/cron.monthly : # chown root:root /etc/cron.monthly # chmod og-rwx /etc/cron.monthly References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "cron_directory_permissions_configured",
      "cron_monthly_directory_restricted_access",
      "cron_monthly_directory_root_only_access",
      "cron_monthly_directory_permissions_secure",
      "cron_directory_group_owner_root",
      "cron_directory_user_owner_root",
      "cron_monthly_directory_no_world_writable",
      "cron_monthly_directory_no_world_readable",
      "cron_monthly_directory_no_world_executable",
      "cron_directory_permissions_750_or_stricter"
    ]
  },
  {
    "id": "5.1.7",
    "title": "Ensure permissions on /etc/cron.d are configured",
    "assessment": "Automated",
    "description": "The /etc/cron.d directory contains system cron jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from /etc/crontab , but require more granular control as to when they run. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit": "Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other : # stat /etc/cron.d Access: (0700/drwx------)  Uid: (    0/    root)   Gid: (    0/    root)",
    "remediation": "Run the following commands to set ownership and permissions on /etc/cron.d : # chown root:root /etc/cron.d # chmod og-rwx /etc/cron.d References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "cron_directory_permissions_restricted",
      "cron_directory_root_ownership",
      "cron_directory_read_write_restricted",
      "cron_directory_search_access_restricted",
      "cron_directory_group_ownership_restricted",
      "cron_directory_user_ownership_restricted",
      "cron_directory_permissions_configured",
      "cron_directory_access_controlled"
    ]
  },
  {
    "id": "5.1.8",
    "title": "Ensure cron is restricted to authorized users",
    "assessment": "Automated",
    "description": "If cron is installed in the system, configure /etc/cron.allow to allow specific users to use these services. If /etc/cron.allow does not exist, then /etc/cron.deny is checked. Any user not specifically defined in those files is allowed to use cron. If both /etc/cron.allow and /etc/cron.deny exist, or only /etc/cron.allow exists, only users in /etc/cron.allow are allowed to use cron. Note: Even though a given user is not listed in cron.allow, cron jobs can still be run as that user. The cron.allow file only controls administrative access to the crontab command for scheduling and modifying cron jobs.",
    "rationale": "On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit": "Run the following command to verify /etc/cron.allow exists, is mode 0640 or more restrictive, is owned by root, and group owned by root: # stat -Lc 'File: (%n) Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.allow File: (/etc/cron.allow) Access: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 0/ root) Run the following command to verify /etc/cron.deny doesn't exist, or: is mode 0640 or more restrictive, is owned by root, and group owned by root: # stat -Lc 'File: (%n) Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.deny stat: cannot stat '/etc/cron.deny': No such file or directory -OR- File: (/etc/cron.deny) Access: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation": "Run the following script to remove /etc/cron.deny, create /etc/cron.allow, and set the file mode on /etc/cron.allow: #!/usr/bin/env bash { if rpm -q cronie >/dev/null; then [ -e /etc/cron.deny ] && rm -f /etc/cron.deny [ ! -e /etc/cron.allow ] && touch /etc/cron.allow chown root:root /etc/cron.allow chmod g-wx,o-rwx /etc/cron.allow else echo \"cron is not installed on the system\" fi } References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "cron_service_allow_file_exists",
      "cron_service_deny_file_restricted",
      "cron_service_authorized_users_only",
      "cron_service_allow_file_configured",
      "cron_service_deny_file_absent",
      "cron_service_user_access_restricted",
      "cron_service_allow_file_exclusive",
      "cron_service_deny_file_not_used"
    ]
  },
  {
    "id": "5.1.9",
    "title": "Ensure at is restricted to authorized users",
    "assessment": "Automated",
    "description": "If at is installed in the system, configure /etc/at.allow to allow specific users to use these services. If /etc/at.allow does not exist, then /etc/at.deny is checked. Any user not specifically defined in those files is allowed to use at. By removing the file, only users in /etc/at.allow are allowed to use at. Note: Even though a given user is not listed in at.allow, at jobs can still be run as that user. The at.allow file only controls administrative access to the at command for scheduling and modifying at jobs.",
    "rationale": "On many systems, only the system administrator is authorized to schedule at jobs. Using the at.allow file to control who can run at jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit": "Run the following script: #!/usr/bin/env bash { if rpm -q at >/dev/null; then [ -e /etc/at.deny ] && echo \"Fail: at.deny exists\" if [ ! -e /etc/at.allow ]; then echo \"Fail: at.allow doesn't exist\" else ! stat -Lc \"%a\" /etc/at.allow | grep -Eq \"[0,2,4,6]00\" && echo \"Fail: at.allow mode too permissive\" ! stat -Lc \"%u:%g\" /etc/at.allow | grep -Eq \"^0:0$\" && echo \"Fail: at.allow owner and/or group not root\" fi if [ ! -e /etc/at.deny ] && [ -e /etc/at.allow ] && stat -Lc \"%a\" /etc/at.allow | grep -Eq \"[0,2,4,6]00\" \\ && stat -Lc \"%u:%g\" /etc/at.allow | grep -Eq \"^0:0$\"; then echo \"Pass\" fi else echo \"Pass: at is not installed on the system\" fi } Verify the output of the script includes Pass",
    "remediation": "Run the following script to remove /etc/at.deny, create /etc/at.allow, and set the file mode for /etc/at.allow: #!/usr/bin/env bash { if rpm -q at >/dev/null; then [ -e /etc/at.deny ] && rm -f /etc/at.deny [ ! -e /etc/at.allow ] && touch /etc/at.allow chown root:root /etc/at.allow chmod u-x,go-rwx /etc/at.allow else echo \"at is not installed on the system\" fi } OR Run the following command to remove at: # dnf remove at References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "at_service_allow_restricted",
      "at_service_deny_removed",
      "at_service_allow_exists",
      "at_service_deny_nonexistent",
      "at_service_authorized_users_only",
      "at_service_unauthorized_blocked",
      "at_service_config_secure",
      "at_service_access_controlled"
    ]
  },
  {
    "id": "5.2.1",
    "title": "Ensure permissions on /etc/ssh/sshd_config are configured",
    "assessment": "Automated",
    "description": "The file /etc/ssh/sshd_config, and files ending in .conf in the /etc/ssh/sshd_config.d directory, contain configuration specifications for sshd.",
    "rationale": "configuration specifications for sshd need to be protected from unauthorized changes by non-privileged users.",
    "audit": "Run the following script and verify /etc/ssh/sshd_config and files ending in .conf in the /etc/ssh/sshd_config.d directory are: • Mode 0600 or more restrictive • Owned by the root user • Group owned by the group root. #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" unset a_sshdfiles && a_sshdfiles=() [ -e \"/etc/ssh/sshd_config\" ] && a_sshdfiles+=(\"$(stat -Lc '%n^%#a^%U^%G' \"/etc/ssh/sshd_config\")\") while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_sshdfiles+=(\"$(stat -Lc '%n^%#a^%U^%G' \"$l_file\")\") done < <(find /etc/ssh/sshd_config.d -type f  \\( -perm /077 -o ! -user root -o ! -group root \\) -print0) if (( ${#a_sshdfiles[@]} != 0 )); then perm_mask='0177' maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\" while IFS=\"^\" read -r l_file l_mode l_user l_group; do l_out2=\"\" [ $(( $l_mode & $perm_mask )) -gt 0 ] && l_out2=\"$l_out2\\n  - Is mode: \\\"$l_mode\\\" should be: \\\"$maxperm\\\" or more restrictive\" [ \"$l_user\" != \"root\" ] && l_out2=\"$l_out2\\n  - Is owned by \\\"$l_user\\\" should be owned by \\\"root\\\"\" [ \"$l_group\" != \"root\" ] && l_out2=\"$l_out2\\n  - Is group owned by \\\"$l_user\\\" should be group owned by \\\"root\\\"\" if [ -n \"$l_out2\" ]; then l_output2=\"$l_output2\\n - File: \\\"$l_file\\\":$l_out2\" else l_output=\"$l_output\\n - File: \\\"$l_file\\\":\\n  - Correct: mode ($l_mode), owner ($l_user), and group owner ($l_group) configured\" fi done <<< \"$(printf '%s\\n' \"${a_sshdfiles[@]}\")\" fi unset a_sshdfiles # If l_output2 is empty, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to set ownership and permissions on /etc/ssh/sshd_config and files ending in .conf in the /etc/ssh/sshd_config.d directory: #!/usr/bin/env bash { chmod u-x,og-rwx /etc/ssh/sshd_config chown root:root /etc/ssh/sshd_config while IFS= read -r -d $'\\0' l_file; do if [ -e \"$l_file\" ]; then chmod u-x,og-rwx \"$l_file\" chown root:root \"$l_file\" fi done < <(find /etc/ssh/sshd_config.d -type f -print0) } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "ssh_config_file_permissions_configured",
      "ssh_config_file_owner_correct",
      "ssh_config_file_group_correct",
      "ssh_config_file_mode_restricted",
      "ssh_config_directory_permissions_configured",
      "ssh_config_directory_owner_correct",
      "ssh_config_directory_group_correct",
      "ssh_config_directory_mode_restricted",
      "ssh_config_file_no_world_writable",
      "ssh_config_file_no_group_writable"
    ]
  },
  {
    "id": "5.2.2",
    "title": "Ensure permissions on SSH private host key files are configured",
    "assessment": "Automated",
    "description": "An SSH private key is one of two files used in SSH public key authentication. In this authentication method, the possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.",
    "rationale": "If an unauthorized user obtains the private SSH host key file, the host could be impersonated",
    "audit": "Run the following script to verify SSH private host key files are mode 0600 or more restrictive, owned be the root user, and owned by the group root or group designated to own openSSH private keys: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_skgn=\"ssh_keys\" # Group designated to own openSSH keys l_skgid=\"$(awk -F: '($1 == \"'\"$l_skgn\"'\"){print $3}' /etc/group)\" # Get gid of group [ -n \"$l_skgid\" ] && l_agroup=\"(root|$l_skgn)\" || l_agroup=\"root\" unset a_skarr && a_skarr=() # Clear and initialize array while IFS= read -r -d $'\\0' l_file; do # Loop to populate array if grep -Pq ':\\h+OpenSSH\\h+private\\h+key\\b' <<< \"$(file \"$l_file\")\"; then a_skarr+=(\"$(stat -Lc '%n^%#a^%U^%G^%g' \"$l_file\")\") fi done < <(find -L /etc/ssh -xdev -type f -print0) while IFS=\"^\" read -r l_file l_mode l_owner l_group l_gid; do echo \"File: \\\"$l_file\\\" Mode: \\\"$l_mode\\\" Owner: \\\"$l_owner\\\" Group: \\\"$l_group\\\" GID: \\\"$l_gid\\\"\" l_out2=\"\" [ \"$l_gid\" = \"$l_skgid\" ] && l_pmask=\"0137\" || l_pmask=\"0177\" l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then l_out2=\"$l_out2\\n  - Mode: \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\" fi if [ \"$l_owner\" != \"root\" ]; then l_out2=\"$l_out2\\n  - Owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_out2=\"$l_out2\\n  - Owned by group \\\"$l_group\\\" should be group owned by: \\\"${l_agroup//|/ or }\\\"\" fi if [ -n \"$l_out2\" ]; then l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\" else l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n  - Correct: mode ($l_mode), owner ($l_owner), and group owner ($l_group) configured\" fi done <<< \"$(printf '%s\\n' \"${a_skarr[@]}\")\" unset a_skarr if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\" [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\" fi }",
    "remediation": "Run the following script to set mode, ownership, and group on the private SSH host key files: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_skgn=\"ssh_keys\" # Group designated to own openSSH keys l_skgid=\"$(awk -F: '($1 == \"'\"$l_skgn\"'\"){print $3}' /etc/group)\" # Get gid of group if [ -n \"$l_skgid\" ]; then l_agroup=\"(root|$l_skgn)\" && l_sgroup=\"$l_skgn\" && l_mfix=\"u-x,g-wx,o- rwx\" else l_agroup=\"root\" && l_sgroup=\"root\" && l_mfix=\"u-x,go-rwx\" fi unset a_skarr && a_skarr=() # Clear and initialize array while IFS= read -r -d $'\\0' l_file; do # Loop to populate array if grep -Pq ':\\h+OpenSSH\\h+private\\h+key\\b' <<< \"$(file \"$l_file\")\"; then a_skarr+=(\"$(stat -Lc '%n^%#a^%U^%G^%g' \"$l_file\")\") fi done < <(find -L /etc/ssh -xdev -type f -print0) while IFS=\"^\" read -r l_file l_mode l_owner l_group l_gid; do l_out2=\"\" [ \"$l_gid\" = \"$l_skgid\" ] && l_pmask=\"0137\" || l_pmask=\"0177\" l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then l_out2=\"$l_out2\\n  - Mode: \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\\n   - Revoking excess permissions\" chmod \"$l_mfix\" \"$l_file\" fi if [ \"$l_owner\" != \"root\" ]; then l_out2=\"$l_out2\\n  - Owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\\n   - Changing ownership to \\\"root\\\"\" chown root \"$l_file\" fi if [[ ! \"$l_group\" =~ $l_agroup ]]; then l_out2=\"$l_out2\\n  - Owned by group \\\"$l_group\\\" should be group owned by: \\\"${l_agroup//|/ or }\\\"\\n   - Changing group ownership to \\\"$l_sgroup\\\"\" chgrp \"$l_sgroup\" \"$l_file\" fi [ -n \"$l_out2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\" done <<< \"$(printf '%s\\n' \"${a_skarr[@]}\")\" unset a_skarr if [ -z \"$l_output2\" ]; then echo -e \"\\n- No access changes required\\n\" else echo -e \"\\n- Remediation results:\\n$l_output2\\n\" fi } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_ssh_key_file_permissions_restricted",
      "compute_ssh_key_file_owner_correct",
      "compute_ssh_key_file_group_correct",
      "compute_ssh_key_file_mode_600",
      "compute_ssh_key_file_no_world_readable",
      "compute_ssh_key_file_no_world_writable",
      "compute_ssh_key_file_no_world_executable",
      "compute_ssh_key_file_secure_ownership",
      "compute_ssh_key_file_secure_permissions",
      "compute_ssh_key_file_no_unauthorized_access"
    ]
  },
  {
    "id": "5.2.3",
    "title": "Ensure permissions on SSH public host key files are configured",
    "assessment": "Automated",
    "description": "An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key that corresponds to a private key will be able to authenticate successfully.",
    "rationale": "If a public host key file is modified by an unauthorized user, the SSH service may be compromised.",
    "audit": "Run the following command and verify Access does not grant write or execute permissions to group or other for all returned files: Run the following script to verify SSH public host key files are mode 0644 or more restrictive, owned be the root user, and owned be the root group: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_pmask=\"0133\" awk '{print}' <<< \"$(find -L /etc/ssh -xdev -type f -exec stat -Lc \"%n %#a %U %G\" {} +)\" | (while read -r  l_file l_mode l_owner l_group; do if file \"$l_file\" | grep -Pq ':\\h+OpenSSH\\h+(\\H+\\h+)?public\\h+key\\b'; then l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then l_output2=\"$l_output2\\n - Public key file: \\\"$l_file\\\" is mode \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\" else l_output=\"$l_output\\n - Public key file: \\\"$l_file\\\" is mode \\\"$l_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\" fi if [ \"$l_owner\" != \"root\" ]; then l_output2=\"$l_output2\\n - Public key file: \\\"$l_file\\\" is owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\" else l_output=\"$l_output\\n - Public key file: \\\"$l_file\\\" is owned by: \\\"$l_owner\\\" should be owned by \\\"root\\\"\" fi if [ \"$l_group\" != \"root\" ]; then l_output2=\"$l_output2\\n - Public key file: \\\"$l_file\\\" is owned by group \\\"$l_group\\\" should belong to group \\\"root\\\"\\n\" else l_output=\"$l_output\\n - Public key file: \\\"$l_file\\\" is owned by group \\\"$l_group\\\" should belong to group \\\"root\\\"\\n\" fi fi done if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  *** PASS ***\\n$l_output\" else echo -e \"\\n- Audit Result:\\n  *** FAIL ***\\n$l_output2\\n\\n  - Correctly set:\\n$l_output\" fi ) }",
    "remediation": "Run the following script to set mode, ownership, and group on the public SSH host key files: #!/usr/bin/env bash { l_pmask=\"0133\" l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\" awk '{print}' <<< \"$(find -L /etc/ssh -xdev -type f -exec stat -Lc \"%n %#a %U %G\" {} +)\" | (while read -r  l_file l_mode l_owner l_group; do if file \"$l_file\" | grep -Pq ':\\h+OpenSSH\\h+(\\H+\\h+)?public\\h+key\\b'; then echo -e \" - Checking private key file: \\\"$l_file\\\"\" if [ $(( $l_mode & $l_pmask )) -gt 0 ]; then echo -e \" - File: \\\"$l_file\\\" is mode \\\"$l_mode\\\" changing to mode: \\\"$l_maxperm\\\"\" chmod u-x,go-wx \"$l_file\" fi if [ \"$l_owner\" != \"root\" ]; then echo -e \" - File: \\\"$l_file\\\" is owned by: \\\"$l_owner\\\" changing owner to \\\"root\\\"\" chown root \"$l_file\" fi if [ \"$l_group\" != \"root\" ]; then echo -e \" - File: \\\"$l_file\\\" is owned by group \\\"$l_group\\\" changing to group \\\"root\\\"\" chgrp \"root\" \"$l_file\" fi fi done ) } Default Value: 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_ssh_public_key_file_permissions_configured",
      "compute_ssh_host_key_file_permissions_restricted",
      "compute_ssh_key_file_permissions_secure",
      "compute_ssh_public_key_file_access_controlled",
      "compute_ssh_host_key_file_ownership_correct"
    ]
  },
  {
    "id": "5.2.4",
    "title": "Ensure SSH access is limited",
    "assessment": "Automated",
    "description": "There are several options available to limit which users and group can access the system via SSH. It is recommended that at least one of the following options be leveraged: • AllowUsers: o The AllowUsers variable gives the system administrator the option of allowing specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in from a particular host, the entry can be specified in the form of user@host. • AllowGroups: o The AllowGroups variable gives the system administrator the option of allowing specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable. • DenyUsers: o The DenyUsers variable gives the system administrator the option of denying specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by specifically denying a user's access from a particular host, the entry can be specified in the form of user@host. • DenyGroups: o The DenyGroups variable gives the system administrator the option of denying specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.",
    "rationale": "Restricting which users can remotely access the system via SSH will help ensure that only authorized users access the system.",
    "audit": "Run the following commands and verify the output: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -Pi '^\\h*(allow|deny)(users|groups)\\h+\\H+(\\h+.*)?$' # grep -Pis '^\\h*(allow|deny)(users|groups)\\h+\\H+(\\h+.*)?$' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Verify that the output of both commands matches at least one of the following lines: allowusers <userlist> allowgroups <grouplist> denyusers <userlist> denygroups <grouplist> Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set one or more of the parameter above any Include entries as follows: AllowUsers <userlist> OR AllowGroups <grouplist> OR DenyUsers <userlist> OR DenyGroups <grouplist> Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. If the Include location is not the default, /etc/ssh/sshd_config.d/*.conf, the audit will need to be modified to account for the Include location used. Default Value: None References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "ssh_config_allow_users_restricted",
      "ssh_config_allow_groups_restricted",
      "ssh_config_deny_users_restricted",
      "ssh_config_deny_groups_restricted",
      "ssh_config_access_limited",
      "ssh_config_user_access_restricted",
      "ssh_config_group_access_restricted",
      "ssh_config_host_based_restrictions_enabled"
    ]
  },
  {
    "id": "5.2.5",
    "title": "Ensure SSH LogLevel is appropriate",
    "assessment": "Automated",
    "description": "INFO level is the basic level that only records login activity of SSH users. In many situations, such as Incident Response, it is important to determine when a particular user was active on a system. The logout record can eliminate those users who disconnected, which helps narrow the field. VERBOSE level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be logged. This information is important for SSH key management, especially in legacy environments.",
    "rationale": "SSH provides several logging levels with varying amounts of verbosity. DEBUG is specifically not recommended other than strictly for debugging SSH communications since it provides so much data that it is difficult to identify important security information.",
    "audit": "Run the following command and verify that output matches loglevel VERBOSE or loglevel INFO: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep loglevel loglevel VERBOSE or loglevel INFO Run the following command and verify the output matches: # grep -Pis '^\\h*loglevel\\h+' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf | grep -Pvi '(VERBOSE|INFO)' Nothing should be returned Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: LogLevel VERBOSE OR LogLevel INFO Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: LogLevel INFO References: 1. https://www.ssh.com/ssh/sshd_config/ 2. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://www.ssh.com/ssh/sshd_config/ 2. NIST SP 800-53 Rev. 5: AU-3, AU-12, SI-5",
    "function_names": [
      "compute_ssh_loglevel_info_enabled",
      "compute_ssh_loglevel_verbose_enabled",
      "compute_ssh_loglevel_appropriate",
      "compute_ssh_loglevel_min_info",
      "compute_ssh_loglevel_min_verbose"
    ]
  },
  {
    "id": "5.2.6",
    "title": "Ensure SSH PAM is enabled",
    "assessment": "Automated",
    "description": "The UsePAM directive enables the Pluggable Authentication Module (PAM) interface. If set to yes this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication directives in addition to PAM account and session module processing for all authentication types.",
    "rationale": "When usePAM is set to yes, PAM runs through account and session types properly. This is important if you want to restrict access to services based off of IP, time or other factors of the account. Additionally, you can make sure users inherit certain environment variables on login or disallow access to the server",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i usepam Verify the output matches: usepam yes Run the following command: # grep -Pis '^\\h*UsePAM\\h+\"?no\"?\\b' /etc/ssh/sshd_config /etc/ssh/ssh_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: UsePAM yes Note: First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_pam_enabled",
      "compute_ssh_use_pam_configured",
      "compute_ssh_auth_module_enabled",
      "compute_ssh_pam_auth_required",
      "compute_ssh_pam_interface_enabled"
    ]
  },
  {
    "id": "5.2.7",
    "title": "Ensure SSH root login is disabled",
    "assessment": "Automated",
    "description": "The PermitRootLogin parameter specifies if the root user can log in using SSH. The default is prohibit-password.",
    "rationale": "Disallowing root logins over SSH requires system admins to authenticate using their own individual account, then escalating to root. This limits opportunity for non- repudiation and provides a clear audit trail in the event of a security incident.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep permitrootlogin Verify the output matches: permitrootlogin no Run the following command: # grep -Pis '^\\h*PermitRootLogin\\h+\"?(yes|prohibit-password|forced-commands- only)\"?\\b' /etc/ssh/sshd_config /etc/ssh/ssh_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: PermitRootLogin no Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: PermitRootLogin without-password References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "compute_ssh_root_login_disabled",
      "compute_ssh_permit_root_login_prohibited",
      "compute_ssh_root_access_restricted",
      "compute_ssh_root_login_prohibited_password",
      "compute_ssh_root_login_disabled_all_instances"
    ]
  },
  {
    "id": "5.2.8",
    "title": "Ensure SSH HostbasedAuthentication is disabled",
    "assessment": "Automated",
    "description": "The HostbasedAuthentication parameter specifies if authentication is allowed through trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with successful public key client host authentication.",
    "rationale": "Even though the .rhosts files are ineffective if support is disabled in /etc/pam.conf, disabling the ability to use .rhosts files in SSH provides an additional layer of protection.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep hostbasedauthentication Verify the output matches: hostbasedauthentication no Run the following command: # grep -Pis '^\\h*HostbasedAuthentication\\h+\"?yes\"?\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: HostbasedAuthentication no Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: HostbasedAuthentication no References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0001 M1042",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.003 TA0001 M1042",
    "function_names": [
      "compute_instance_ssh_hostbased_authentication_disabled",
      "compute_vm_ssh_hostbased_authentication_disabled",
      "compute_ssh_hostbased_authentication_disabled",
      "compute_ssh_config_hostbased_authentication_disabled",
      "compute_ssh_hostbased_authentication_disabled_all_regions"
    ]
  },
  {
    "id": "5.2.9",
    "title": "Ensure SSH PermitEmptyPasswords is disabled",
    "assessment": "Automated",
    "description": "The PermitEmptyPasswords parameter specifies if the SSH server allows login to accounts with empty password strings.",
    "rationale": "Disallowing remote shell access to accounts that have an empty password reduces the probability of unauthorized access to the system.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep permitemptypasswords Verify the output matches: permitemptypasswords no Run the following command and verify the output: # grep -Pis '^\\h*PermitEmptyPasswords\\h+\"?yes\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: PermitEmptyPasswords no Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: PermitEmptyPasswords no References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_permit_empty_passwords_disabled",
      "compute_ssh_empty_passwords_prohibited",
      "ssh_config_permit_empty_passwords_disabled",
      "ssh_server_empty_passwords_restricted",
      "linux_ssh_permit_empty_passwords_disabled"
    ]
  },
  {
    "id": "5.2.10",
    "title": "Ensure SSH PermitUserEnvironment is disabled",
    "assessment": "Automated",
    "description": "The PermitUserEnvironment option allows users to present environment options to the SSH daemon.",
    "rationale": "Permitting users the ability to set environment variables through the SSH daemon could potentially allow users to bypass security controls (e.g. setting an execution path that has SSH executing trojan'd programs)",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep permituserenvironment Verify the output matches: permituserenvironment no Run the following command and verify the output: # grep -Pis '^\\h*PermitUserEnvironment\\h+\"?yes\"?\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: PermitUserEnvironment no Note: First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: PermitUserEnvironment no References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1021, T1021.000 TA0008 M1042",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1021, T1021.000 TA0008 M1042",
    "function_names": [
      "compute_ssh_permit_user_environment_disabled",
      "ssh_config_permit_user_environment_disabled",
      "linux_ssh_permit_user_environment_disabled",
      "instance_ssh_permit_user_environment_disabled",
      "vm_ssh_permit_user_environment_disabled"
    ]
  },
  {
    "id": "5.2.11",
    "title": "Ensure SSH IgnoreRhosts is enabled",
    "assessment": "Automated",
    "description": "The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.",
    "rationale": "Setting this parameter forces users to enter a password when authenticating with SSH.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep ignorerhosts Verify the output matches: ignorerhosts yes Run the following command: # grep -Pis '^\\h*ignorerhosts\\h+\"?no\"?\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: IgnoreRhosts yes Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: IgnoreRhosts yes  References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_ignorerhosts_enabled",
      "compute_ssh_ignorerhosts_configured",
      "compute_ssh_rhosts_auth_disabled",
      "compute_ssh_hostbased_auth_disabled",
      "compute_ssh_secure_rhosts_config"
    ]
  },
  {
    "id": "5.2.12",
    "title": "Ensure only strong Ciphers are used",
    "assessment": "Automated",
    "description": "This variable limits the ciphers that SSH can use during communication. Note: • Some organizations may have stricter requirements for approved ciphers. • Ensure that ciphers used are in compliance with site policy. • The only \"strong\" ciphers currently FIPS 140-2 compliant are: o aes256-ctr o aes192-ctr o aes128-ctr",
    "rationale": "Weak ciphers that are used for authentication to the cryptographic module cannot be relied upon to provide confidentiality or integrity, and system data may be compromised. • The Triple DES ciphers, as used in SSH, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain clear text data via a birthday attack against a long-duration encrypted session, aka a \"Sweet32\" attack. • Error handling in the SSH protocol; Client and Server, when using a block cipher algorithm in Cipher Block Chaining (CBC) mode, makes it easier for remote attackers to recover certain plain text data from an arbitrary block of cipher text in an SSH session via unknown vectors.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep ciphers Verify that output does not contain any of the following weak ciphers: 3des-cbc aes128-cbc aes192-cbc aes256-cbc rijndael-cbc@lysator.liu.se",
    "remediation": "Edit the /etc/ssh/sshd_config file add/modify the Ciphers line to contain a comma separated list of the site approved ciphers above any Include entries: Example: Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128- gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr Note: First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: Ciphers chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128- gcm@openssh.com,aes256-gcm@openssh.com References: 1. https://nvd.nist.gov/vuln/detail/CVE-2016-2183 2. https://www.openssh.com/txt/cbc.adv 3. https://nvd.nist.gov/vuln/detail/CVE-2008-5161 4. https://www.openssh.com/txt/cbc.adv 5. SSHD_CONFIG(5) 6. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://nvd.nist.gov/vuln/detail/CVE-2016-2183 2. https://www.openssh.com/txt/cbc.adv 3. https://nvd.nist.gov/vuln/detail/CVE-2008-5161 4. https://www.openssh.com/txt/cbc.adv 5. SSHD_CONFIG(5) 6. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "ssh_config_ciphers_strong_only",
      "ssh_config_ciphers_fips_compliant",
      "ssh_config_ciphers_aes_ctr_only",
      "ssh_config_ciphers_no_weak_allowed",
      "ssh_config_ciphers_min_aes128_ctr",
      "ssh_config_ciphers_no_non_fips",
      "ssh_config_ciphers_restrict_to_approved",
      "ssh_config_ciphers_no_deprecated"
    ]
  },
  {
    "id": "5.2.13",
    "title": "Ensure only strong MAC algorithms are used",
    "assessment": "Automated",
    "description": "This variable limits the types of MAC algorithms that SSH can use during communication. Notes: • Some organizations may have stricter requirements for approved MACs. • Ensure that MACs used are in compliance with site policy. • The only \"strong\" MACs currently FIPS 140-2 approved are: o hmac-sha2-256 o hmac-sha2-512",
    "rationale": "MD5 and 96-bit MAC algorithms are considered weak and have been shown to increase exploitability in SSH downgrade attacks. Weak algorithms continue to have a great deal of attention as a weak spot that can be exploited with expanded computing power. An attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the SSH tunnel and capture credentials and information.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i \"MACs\" Verify that output does not contain any of the listed weak MAC algorithms: hmac-md5 hmac-md5-96 hmac-ripemd160 hmac-sha1 hmac-sha1-96 umac-64@openssh.com hmac-md5-etm@openssh.com hmac-md5-96-etm@openssh.com hmac-ripemd160-etm@openssh.com hmac-sha1-etm@openssh.com hmac-sha1-96-etm@openssh.com umac-64-etm@openssh.com",
    "remediation": "Edit the /etc/ssh/sshd_config file and add/modify the MACs line to contain a comma separated list of the site approved MACs above any Include entries: Example: MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2- 512,hmac-sha2-256,umac-128-etm@openssh.com,umac-128@openssh.com Note: First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: MACs umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256- etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1- etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2- 256,hmac-sha2-512,hmac-sha1 References: 1. More information on SSH downgrade attacks can be found here: http://www.mitls.org/pages/attacks/SLOTH 2. SSHD_CONFIG(5) 3. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. More information on SSH downgrade attacks can be found here: http://www.mitls.org/pages/attacks/SLOTH 2. SSHD_CONFIG(5) 3. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "ssh_config_mac_strong_algorithms",
      "ssh_config_mac_fips_approved",
      "ssh_config_mac_algorithm_compliance",
      "ssh_config_mac_algorithm_restricted",
      "ssh_config_mac_algorithm_secure",
      "ssh_config_mac_algorithm_approved_only",
      "ssh_config_mac_algorithm_no_weak",
      "ssh_config_mac_algorithm_hmac_sha2_only"
    ]
  },
  {
    "id": "5.2.14",
    "title": "Ensure only strong Key Exchange algorithms are used",
    "assessment": "Automated",
    "description": "Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received Notes: • Kex algorithms have a higher preference the earlier they appear in the list • Some organizations may have stricter requirements for approved Key exchange algorithms • Ensure that Key exchange algorithms used are in compliance with site policy • The only Key Exchange Algorithms currently FIPS 140-2 approved are: o ecdh-sha2-nistp256 o ecdh-sha2-nistp384 o ecdh-sha2-nistp521 o diffie-hellman-group-exchange-sha256 o diffie-hellman-group16-sha512 o diffie-hellman-group18-sha512 o diffie-hellman-group14-sha256",
    "rationale": "Key exchange methods that are considered weak should be removed. A key exchange method may be weak because too few bits are used, or the hashing algorithm is considered too weak. Using weak algorithms could expose connections to man-in-the- middle attacks",
    "audit": "Run the following command and verify that output does not contain any of the listed weak Key Exchange algorithms: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep kexalgorithms Weak Key Exchange Algorithms: diffie-hellman-group1-sha1 diffie-hellman-group14-sha1 diffie-hellman-group-exchange-sha1 Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file add/modify the KexAlgorithms line to contain a comma separated list of the site approved key exchange algorithms above any Include entries: Example: KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman- group14-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18- sha512,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie- hellman-group-exchange-sha256 Note: First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2- nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange- sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman- group14-sha256 References: 1. NIST SP 800-53 Rev. 5: SC-8",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: SC-8",
    "function_names": [
      "ssh_key_exchange_strong_algorithms",
      "ssh_key_exchange_fips_approved",
      "ssh_key_exchange_algorithm_compliance",
      "ssh_key_exchange_algorithm_preference_order",
      "ssh_key_exchange_no_weak_algorithms",
      "ssh_key_exchange_approved_algorithms_only",
      "ssh_key_exchange_ecdh_sha2_enabled",
      "ssh_key_exchange_diffie_hellman_sha2_enabled"
    ]
  },
  {
    "id": "5.2.15",
    "title": "Ensure SSH warning banner is configured",
    "assessment": "Automated",
    "description": "The Banner parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed.",
    "rationale": "Banners are used to warn connecting users of the particular site's policy regarding connection. Presenting a warning message prior to the normal user login may assist the prosecution of trespassers on the computer system.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep banner Verify the output matches: banner /etc/issue.net",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: Banner /etc/issue.net Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0001, TA0007 M1035",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1082, T1082.000, T1592, T1592.004 TA0001, TA0007 M1035",
    "function_names": [
      "compute_instance_ssh_banner_configured",
      "compute_ssh_banner_file_present",
      "compute_ssh_banner_content_valid",
      "compute_instance_ssh_banner_enabled",
      "compute_ssh_banner_permissions_restricted"
    ]
  },
  {
    "id": "5.2.16",
    "title": "Ensure SSH MaxAuthTries is set to 4 or less",
    "assessment": "Automated",
    "description": "The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.",
    "rationale": "Setting the MaxAuthTries parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. While the recommended setting is 4, set the number based on site policy.",
    "audit": "Run the following command and verify that output MaxAuthTries is 4 or less: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep maxauthtries maxauthtries 4 Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well. Run the following command and verify that the output: # grep -Pis '^\\h*maxauthtries\\h+\"?([5-9]|[1-9][0-9]+)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing is returned",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: MaxAuthTries 4 Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: MaxAuthTries 6 References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AU-3",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: AU-3",
    "function_names": [
      "compute_ssh_max_auth_tries_less_than_4",
      "compute_ssh_auth_attempts_limited",
      "compute_ssh_auth_tries_restricted",
      "compute_ssh_max_auth_tries_compliant",
      "compute_ssh_auth_attempts_threshold"
    ]
  },
  {
    "id": "5.2.17",
    "title": "Ensure SSH MaxStartups is configured",
    "assessment": "Automated",
    "description": "The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.",
    "rationale": "To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit": "Run the following command: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i maxstartups Verify that output MaxStartups is 10:30:100 or more restrictive: maxstartups 10:30:100 Run the following command and verify the output: # grep -Pis '^\\h*maxstartups\\h+\"?(((0|1[1-9]|[1-9][0-9]{2,}):([0-9]+):([0- 9]+))|(([0-9]+):(0|3[1-9]|[4-9][0-9]|[1-9][0-9][0-9]+):([0-9]+))|(([0- 9]+):([0-9]+):(0|10[1-9]|1[1-9][0-9]|[2-9][0-9]{2}|[1-9][0-9]{3,})))\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned. Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: MaxStartups 10:30:100 Note: First occurrence of a option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: MaxStartups 10:30:100 References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_ssh_maxstartups_configured",
      "compute_ssh_maxstartups_limited",
      "compute_ssh_connection_limit_set",
      "compute_ssh_unauthenticated_limit_configured",
      "compute_ssh_concurrency_control_enabled"
    ]
  },
  {
    "id": "5.2.18",
    "title": "Ensure SSH LoginGraceTime is set to one minute or less",
    "assessment": "Automated",
    "description": "The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.",
    "rationale": "Setting the LoginGraceTime parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy.",
    "audit": "Run the following command and verify that output LoginGraceTime is between 1 and 60 seconds or 1m: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep logingracetime logingracetime 60 Run the following command and verify the output: # grep -Pis '^\\h*LoginGraceTime\\h+\"?(0|6[1-9]|[7-9][0-9]|[1-9][0-9][0- 9]+|[^1]m)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: LoginGraceTime 60 Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: LoginGraceTime 120 References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-6 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1110, T1110.001, T1110.003, T1110.004 TA0006 M1036",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-6 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1110, T1110.001, T1110.003, T1110.004 TA0006 M1036",
    "function_names": [
      "compute_ssh_login_grace_time_one_minute_or_less",
      "compute_ssh_login_grace_time_within_limit",
      "compute_ssh_session_timeout_restricted",
      "compute_ssh_authentication_timeout_enforced",
      "compute_ssh_grace_period_compliant"
    ]
  },
  {
    "id": "5.2.19",
    "title": "Ensure SSH MaxSessions is set to 10 or less",
    "assessment": "Automated",
    "description": "The MaxSessions parameter specifies the maximum number of open sessions permitted from a given connection.",
    "rationale": "To protect a system from denial of service due to a large number of concurrent sessions, use the rate limiting function of MaxSessions to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit": "Run the following command and verify that output MaxSessions is 10 or less: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep -i maxsessions maxsessions 10 Run the following command and verify the output: grep -Pis '^\\h*MaxSessions\\h+\"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameter above any Include entries as follows: MaxSessions 10 Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: MaxSessions 10 References: 1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1499, T1499.002 TA0040 M1036",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SSHD_CONFIG(5) 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1499, T1499.002 TA0040 M1036",
    "function_names": [
      "compute_ssh_max_sessions_limited",
      "compute_ssh_max_sessions_under_10",
      "compute_ssh_session_limit_enforced",
      "compute_ssh_max_sessions_restricted",
      "compute_ssh_connection_limit_compliant"
    ]
  },
  {
    "id": "5.2.20",
    "title": "Ensure SSH Idle Timeout Interval is configured",
    "assessment": "Automated",
    "description": "NOTE: To clarify, the two settings described below is only meant for idle connections from a protocol perspective and not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never had, intentionally, the capability to drop idle users. In SSH versions before 8.2p1 there was a bug that caused these values to behave in such a manner that they where abused to disconnect idle users. This bug has been resolved in 8.2p1 and thus it can no longer be abused disconnect idle users. The two options ClientAliveInterval and ClientAliveCountMax control the timeout of SSH sessions. Taken directly from man 5 sshd_config: • ClientAliveInterval Sets a timeout interval in seconds after which if no data has been received from the client, sshd(8) will send a message through the encrypted channel to request a response from the client. The default is 0, indicating that these messages will not be sent to the client. • ClientAliveCountMax Sets the number of client alive messages which may be sent without sshd(8) receiving any messages back from the client. If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating the session. It is important to note that the use of client alive messages is very different from TCPKeepAlive. The client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option en‐abled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on knowing when a connection has become unresponsive. The default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax disables connection termination.",
    "rationale": "In order to prevent resource exhaustion, appropriate values should be set for both ClientAliveInterval and ClientAliveCountMax. Specifically, looking at the source code, ClientAliveCountMax must be greater than zero in order to utilize the ability of SSH to drop idle connections. If connections are allowed to stay open indefinately, this can potentially be used as a DDOS attack or simple resource exhaustion could occur over unreliable networks. The example set here is a 45 second timeout. Consult your site policy for network timeouts and apply as appropriate.",
    "audit": "Run the following commands and verify ClientAliveInterval is greater than zero: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep clientaliveinterval Example output: clientaliveinterval 15 Run the following command and verify ClientAliveCountMax is greater than zero: # sshd -T -C user=root -C host=\"$(hostname)\" -C addr=\"$(grep $(hostname) /etc/hosts | awk '{print $1}')\" | grep clientalivecountmax Example output: clientalivecountmax 3 Run the following command: # grep -Pis '^\\h*ClientAliveCountMax\\h+\"?0\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf Nothing should be returned Note: If Include locations besides, or in addition to /etc/ssh/sshd_config.d/*.conf and/or Match set statements are used in your environment, those locations should be checked for the correct configuration as well.",
    "remediation": "Edit the /etc/ssh/sshd_config file to set the parameters above any Include entries according to site policy. Example: ClientAliveInterval 15 ClientAliveCountMax 3 Note: First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location. Default Value: ClientAliveInterval 0 ClientAliveCountMax 3 References: 1. https://man.openbsd.org/sshd_config 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: https://bugzilla.redhat.com/show_bug.cgi?id=1873547 https://github.com/openssh/openssh-portable/blob/V_8_9/serverloop.c#L137 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.002, T1078.003 TA0001 M1026 5.3 Configure privilege escalation There are various tools which allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. sudo https://www.sudo.ws/ The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy. sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. pkexec https://www.freedesktop.org/software/polkit/docs/0.105/pkexec.1.html",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://man.openbsd.org/sshd_config 2. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: https://bugzilla.redhat.com/show_bug.cgi?id=1873547 https://github.com/openssh/openssh-portable/blob/V_8_9/serverloop.c#L137 MITRE ATT&CK Mappings: Techniques / Sub- techniques Tactics Mitigations T1078, T1078.001, T1078.002, T1078.003 TA0001 M1026 5.3 Configure privilege escalation There are various tools which allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. sudo https://www.sudo.ws/ The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy. sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. pkexec https://www.freedesktop.org/software/polkit/docs/0.105/pkexec.1.html",
    "function_names": [
      "compute_ssh_client_alive_interval_configured",
      "compute_ssh_client_alive_count_max_configured",
      "compute_ssh_idle_timeout_enabled",
      "compute_ssh_session_termination_configured",
      "compute_ssh_connection_timeout_set",
      "compute_ssh_encryption_keepalive_enabled",
      "compute_ssh_tcp_keepalive_disabled",
      "compute_ssh_unresponsive_client_disconnect_enabled"
    ]
  },
  {
    "id": "5.3.1",
    "title": "Ensure sudo is installed",
    "assessment": "Automated",
    "description": "sudo allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy.",
    "rationale": "sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. The security policy determines what privileges, if any, a user has to run sudo. The policy may require that users authenticate themselves with a password or another authentication mechanism. If authentication is required, sudo will exit if the user's password is not entered within a configurable time limit. This limit is policy-specific.",
    "audit": "Verify that sudo is installed. Run the following command: # dnf list sudo Installed Packages sudo.x86_64            <VERSION>        @anaconda Available Packages sudo.x86_64            <VERSION>        updates",
    "remediation": "Run the following command to install sudo # dnf install sudo References: 1. SUDO(8) 2. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. SUDO(8) 2. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "compute_instance_sudo_installed",
      "compute_vm_sudo_installed",
      "os_package_sudo_installed",
      "system_sudo_installed",
      "linux_sudo_installed",
      "unix_sudo_installed",
      "server_sudo_installed",
      "host_sudo_installed"
    ]
  },
  {
    "id": "5.3.2",
    "title": "Ensure re-authentication for privilege escalation is not disabled globally",
    "assessment": "Automated",
    "description": "The operating system must be configured so that users must re-authenticate for privilege escalation.",
    "rationale": "Without re-authentication, users may access resources or perform tasks for which they do not have authorization. When operating systems provide the capability to escalate a functional capability, it is critical the user re-authenticate.",
    "audit": "Verify the operating system requires users to re-authenticate for privilege escalation. Check the configuration of the /etc/sudoers and /etc/sudoers.d/* files with the following command: # grep -r \"^[^#].*\\!authenticate\" /etc/sudoers* If any line is found with a !authenticate tag, refer to the remediation procedure below.",
    "remediation": "Configure the operating system to require users to reauthenticate for privilege escalation. Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the relevant sudoers file. Remove any occurrences of !authenticate tags in the file(s). References: 1. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "os_privilege_escalation_reauthentication_enabled",
      "os_security_reauthentication_required",
      "os_privilege_escalation_global_reauth_enabled",
      "os_sudo_reauthentication_enabled",
      "os_privilege_escalation_no_reauth_disabled"
    ]
  },
  {
    "id": "5.3.3",
    "title": "Ensure sudo authentication timeout is configured correctly",
    "assessment": "Automated",
    "description": "sudo caches used credentials for a default of 5 minutes. This is for ease of use when there are multiple administrative tasks to perform. The timeout can be modified to suit local security policies.",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized privileged access to another user.",
    "audit": "Ensure that the caching timeout is no more than 15 minutes. Example: # grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers* If there is no timestamp_timeout configured in /etc/sudoers* then the default is 5 minutes. This default can be checked with: # sudo -V | grep \"Authentication timestamp timeout:\" NOTE: A value of -1 means that the timeout is disabled. Depending on the configuration of the timestamp_type, this could mean for all terminals / processes of that user and not just that one single terminal session.",
    "remediation": "If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with visudo -f <PATH TO FILE> and modify the entry timestamp_timeout= to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on its own, or on the same line as env_reset. See the following two examples: Defaults    env_reset, timestamp_timeout=15 Defaults    timestamp_timeout=15 Defaults    env_reset References: 1. https://www.sudo.ws/man/1.9.0/sudoers.man.html 2. NIST SP 800-53 Rev. 5: AC-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://www.sudo.ws/man/1.9.0/sudoers.man.html 2. NIST SP 800-53 Rev. 5: AC-6",
    "function_names": [
      "sudo_auth_timeout_configured",
      "sudo_auth_timeout_under_5m",
      "sudo_credential_cache_disabled",
      "sudo_credential_cache_limited",
      "sudo_session_timeout_enforced",
      "sudo_password_timeout_set",
      "sudo_privilege_timeout_restricted",
      "sudo_admin_timeout_compliant"
    ]
  },
  {
    "id": "5.4.1",
    "title": "Ensure password creation requirements are configured",
    "assessment": "Automated",
    "description": "The pam_pwquality.so module checks the strength of passwords. It performs checks such as making sure a password is not a dictionary word, it is a certain length, contains a mix of characters (e.g. alphabet, numeric, other) and more. The following are definitions of the pam_pwquality.so options. The following options are set in the /etc/security/pwquality.conf file: Password Length: • minlen = 14 - password must be 14 characters or more Password complexity: • minclass = 4 - The minimum number of required classes of characters for the new password (digits, uppercase, lowercase, others) -OR- • dcredit = -1 - provide at least one digit • ucredit = -1 - provide at least one uppercase character • ocredit = -1 - provide at least one special character • lcredit = -1 - provide at least one lowercase character The following is set in the /etc/pam.d/system-password and /etc/pam.d/system-auth files • try_first_pass - retrieve the password from a previous stacked PAM module. If not available, then prompt the user for a password. • retry=3 - Allow 3 tries before sending back a failure. The settings shown above are one possible policy. Alter these values to conform to your own organization's password policies. Notes: • Settings in /etc/security/pwquality.conf must use spaces around the = symbol. • Additional modules options may be set in the /etc/pam.d/system-password and /etc/pam.d/system-auth files",
    "rationale": "Strong passwords and limited attempts before locking an account protect systems from being hacked through brute force methods.",
    "audit": "Verify password creation requirements conform to organization policy. Run the following command to verify the minimum password length is 14 or more characters. # grep -Pi '^\\h*minlen\\b' /etc/security/pwquality.conf minlen = 14 Run one of the following commands to verify the required password complexity: # grep -Pi '^\\h*minclass\\b' /etc/security/pwquality.conf minclass = 4 -OR- # grep -Pi '^\\h*[duol]credit\\b' /etc/security/pwquality.conf dcredit = -1 ucredit = -1 lcredit = -1 ocredit = -1 Run the following commands to verify the files: /etc/pam.d/system-password and /etc/pam.d/system-auth include retry=3 on the password requisite pam_pwquality.so line: # grep -P '^\\h*password\\h+([^#\\n\\r]+\\h+)?pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?(retry=[1- 3])\\b' /etc/pam.d/system-password Example output: password    requisite     pam_pwquality.so retry=3 # grep -P '^\\h*password\\h+([^#\\n\\r]+\\h+)?pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?(retry=[1- 3])\\b' /etc/pam.d/system-auth Example output: password    requisite     pam_pwquality.so retry=3",
    "remediation": "Edit the file /etc/security/pwquality.conf and add or modify the following line for password length to conform to site policy minlen = 14 Edit the file /etc/security/pwquality.conf and add or modify the following line for password complexity to conform to site policy minclass = 4 -OR- dcredit = -1 ucredit = -1 ocredit = -1 lcredit = -1 Edit the /etc/pam.d/system-password and /etc/pam.d/system-auth files to include the appropriate options for pam_pwquality.so and to conform to site policy: password requisite pam_pwquality.so retry=3 References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "pam_password_min_length_14",
      "pam_password_min_class_4",
      "pam_password_digit_required",
      "pam_password_uppercase_required",
      "pam_password_special_char_required",
      "pam_password_lowercase_required",
      "pam_password_try_first_pass_enabled",
      "pam_password_retry_3_attempts",
      "pam_password_pwquality_conf_formatted",
      "pam_password_system_auth_configured"
    ]
  },
  {
    "id": "5.4.2",
    "title": "Ensure lockout for failed password attempts is configured",
    "assessment": "Automated",
    "description": "Lock out users after n unsuccessful consecutive login attempts. • deny=<n> - Number of attempts before the account is locked • unlock_time=<n> - Time in seconds before the account is unlocked Note: The maximum configurable value for unlock_time is 604800",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit": "Verify password lockouts are configured. Depending on the version you are running, follow one of the two methods bellow. • deny should not be 0 (never) or greater the 5 • unlock_time should be 0 (never) or 900 seconds or more. These settings are commonly configured with the pam_failock.so module found in /etc/pam.d/system-auth and /etc/pam.d/system-password. Run the following command are review the output to ensure that it follows local site policy. # grep -P '^\\h*auth\\h+[^#\\n\\r]+\\h+pam_faillock.so\\s+' /etc/pam.d/system- password /etc/pam.d/system-auth Output should look similar to: /etc/pam.d/system-password:auth     required     pam_faillock.so preauth silent deny=5 unlock_time=900 /etc/pam.d/system-password:auth     required     pam_faillock.so authfail deny=5 unlock_time=900 /etc/pam.d/system-auth:auth       required     pam_faillock.so preauth silent deny=5 unlock_time=900 /etc/pam.d/system-auth:auth       required     pam_faillock.so authfail deny=5 unlock_time=900",
    "remediation": "Set password lockouts and unlock times to conform to site policy. deny should be not greater than 5 and unlock_time should be 0 (never), or 900 seconds or greater. Edit the files /etc/pam.d/system-auth and /etc/pam.d/system-password and add the following lines: Modify the deny= and unlock_time= parameters to conform to local site policy, Not to be greater than deny=5: Add the following lines to the auth section: auth        required      pam_faillock.so preauth silent audit deny=5 unlock_time=900 auth        [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 The auth sections should look similar to the following example: Note: The ordering on the lines in the auth section is important. The preauth line needs to below the line auth required pam_env.so and above all password validation lines. The authfail line needs to be after all password validation lines such as pam_sss.so. Incorrect order can cause you to be locked out of the system Example: auth        required      pam_env.so auth        required      pam_faillock.so preauth silent audit deny=5 unlock_time=900 # <- Under \"auth required pam_env.so\" auth        sufficient    pam_unix.so nullok try_first_pass auth        [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900 # <- Last auth line before \"auth requisite pam_succeed_if.so\" auth        requisite     pam_succeed_if.so uid >= 1000 quiet_success auth        required      pam_deny.so Add the following line to the account section: account     required      pam_faillock.so Example: account     required     pam_faillock.so account     required     pam_unix.so account     sufficient   pam_localuser.so account     sufficient   pam_pam_succeed_if.so uid < 1000 quiet account     required     pam_permit.so References: 1. https://access.redhat.com/documentation/en- us/red_hat_enterprise_linux/7/html/security_guide 2. NIST SP 800-53 Rev. 5: AC-1, AC-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. https://access.redhat.com/documentation/en- us/red_hat_enterprise_linux/7/html/security_guide 2. NIST SP 800-53 Rev. 5: AC-1, AC-2",
    "function_names": [
      "iam_user_failed_attempts_lockout",
      "iam_user_failed_attempts_lockout_deny",
      "iam_user_failed_attempts_lockout_unlock_time",
      "iam_user_failed_attempts_lockout_deny_configured",
      "iam_user_failed_attempts_lockout_unlock_time_configured",
      "iam_user_failed_attempts_lockout_max_unlock_time",
      "iam_user_failed_attempts_lockout_within_limit"
    ]
  },
  {
    "id": "5.4.3",
    "title": "Ensure password hashing algorithm is SHA-512",
    "assessment": "Automated",
    "description": "The commands below change password encryption from md5 to sha512 (a much stronger hashing algorithm). All existing accounts will need to perform a password change to upgrade the stored hashes to the new algorithm. Note: • These changes only apply to accounts configured on the local system. • Additional module options may be set, recommendation only covers those listed here.",
    "rationale": "The SHA-512 algorithm provides much stronger hashing than MD5, thus providing additional protection to the system by increasing the level of effort for an attacker to successfully determine passwords.",
    "audit": "Run the following command to verify the sha512 option is included: # grep -P '^\\h*password\\h+([^#\\n\\r]+)?\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?sha512\\b' /etc/pam.d/system-auth /etc/pam.d/system-password Output should be similar to: /etc/pam.d/system-auth:password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok /etc/pam.d/system-password:password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok",
    "remediation": "Edit the /etc/pam.d/system-password and /etc/pam.d/system-auth files to include sha512 option and remove the md5 option for pam_unix.so: password sufficient pam_unix.so sha512 Note: • Any system accounts that need to be expired should be carefully done separately by the system administrator to prevent any potential problems. • If it is determined that the password algorithm being used is not SHA-512, once it is changed, it is recommended that all user ID's be immediately expired and forced to change their passwords on next login, In accordance with local site policies. Default Value: sha512 References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "auth_password_hash_sha512",
      "auth_password_encryption_sha512",
      "auth_password_algorithm_sha512",
      "auth_password_storage_sha512",
      "auth_password_policy_sha512",
      "auth_password_security_sha512",
      "auth_password_hashing_sha512",
      "auth_password_requirement_sha512",
      "auth_password_protection_sha512",
      "auth_password_standard_sha512"
    ]
  },
  {
    "id": "5.4.4",
    "title": "Ensure password reuse is limited",
    "assessment": "Automated",
    "description": "The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords.",
    "rationale": "Forcing users not to reuse their past 5 passwords make it less likely that an attacker will be able to guess the password.",
    "audit": "Verify remembered password history follows local site policy, not to be less than 5. Run the following command: # grep -P '^\\h*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?remember=([5- 9]|[1-9][0-9]+)\\b' /etc/pam.d/system-password /etc/pam.d/system-auth Output should look similar to: /etc/pam.d/system-auth:password    requisite      pam_pwhistory.so remember=5 /etc/pam.d/system-password:password    requisite      pam_pwhistory.so remember=5",
    "remediation": "Edit both the /etc/pam.d/system-password and /etc/pam.d/system-auth files to include the remember option and conform to site policy as shown: Note: Add or modify the line containing the pam_pwhistory.so after the first occurrence of password requisite: password    requisite      pam_pwhistory.so remember=5 Example: ( Second line is modified ) password    requisite     pam_pwquality.so try_first_pass local_users_only authtok_type= password    requisite      pam_pwhistory.so use_authtok remember=5 retry=3 password    sufficient    pam_unix.so sha512 shadow try_first_pass use_authtok password    required      pam_deny.so  Additional Information: • This setting only applies to local accounts. • This option is configured with the remember= n module option in /etc/pam.d/system-auth and /etc/pam.d/system-password",
    "profile_applicability": "•  Level 1 - Server",
    "function_names": [
      "linux_password_reuse_limited",
      "linux_opasswd_file_configured",
      "linux_password_history_enabled",
      "linux_password_recycle_prevented",
      "linux_opasswd_file_exists",
      "linux_password_reuse_restricted",
      "linux_opasswd_file_protected",
      "linux_password_history_enforced"
    ]
  },
  {
    "id": "5.5.1.1",
    "title": "Ensure password expiration is 365 days or less",
    "assessment": "Automated",
    "description": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age. It is recommended that the PASS_MAX_DAYS parameter be set to less than or equal to 365 days.",
    "rationale": "The window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity.",
    "audit": "Run the following command and verify PASS_MAX_DAYS conforms to site policy (no more than 365 days): # grep PASS_MAX_DAYS /etc/login.defs PASS_MAX_DAYS 365 Run the following command and Review list of users and PASS_MAX_DAYS to verify that all users' PASS_MAX_DAYS conforms to site policy (no more than 365 days): # awk -F: '$2~/^[^*!xX\\n\\r][^\\n\\r]+/{print $1\":\"$5}' /etc/shadow <user>:<PASS_MAX_DAYS>",
    "remediation": "Set the PASS_MAX_DAYS parameter to conform to site policy in /etc/login.defs : PASS_MAX_DAYS 365 Modify user parameters for all users with a password set to match: # chage --maxdays 365 <user> References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 5th field should be 365 or less for all users with a password. Note: A value of -1 will disable password expiration. Additionally the password expiration must be greater than the minimum days between password changes or users will be unable to change their password.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 5th field should be 365 or less for all users with a password. Note: A value of -1 will disable password expiration. Additionally the password expiration must be greater than the minimum days between password changes or users will be unable to change their password.",
    "function_names": [
      "linux_login_defs_password_expiration_365d_or_less",
      "linux_password_policy_max_days_365d_or_less",
      "linux_auth_password_expiry_365d_or_less",
      "linux_security_password_max_age_365d_or_less",
      "linux_account_password_expiration_365d_or_less"
    ]
  },
  {
    "id": "5.5.1.2",
    "title": "Ensure minimum days between password changes is configured",
    "assessment": "Automated",
    "description": "The PASS_MIN_DAYS parameter in /etc/login.defs allows an administrator to prevent users from changing their password until a minimum number of days have passed since the last time the user changed their password. It is recommended that PASS_MIN_DAYS parameter be set to 1 or more days.",
    "rationale": "By restricting the frequency of password changes, an administrator can prevent users from repeatedly changing their password in an attempt to circumvent password reuse controls.",
    "audit": "Run the following command and verify PASS_MIN_DAYS conforms to site policy (no less than 1 day): # grep ^\\s*PASS_MIN_DAYS /etc/login.defs PASS_MIN_DAYS 1 Run the following command and Review list of users and PASS_MIN_DAYS to Verify that all users' PASS_MIN_DAYS conform s to site policy (no less than 1 day): # awk -F: '$2~/^[^*!xX\\n\\r][^\\n\\r]+/{print $1\":\"$4}' /etc/shadow <user>:<PASS_MIN_DAYS>",
    "remediation": "Set the PASS_MIN_DAYS parameter to 1 in /etc/login.defs: PASS_MIN_DAYS 1 Modify user parameters for all users with a password set to match: # chage --mindays 1 <user> Default Value: PASS_MIN_DAYS 0 References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 4th field should be 1 or more for all users with a password.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 4th field should be 1 or more for all users with a password.",
    "function_names": [
      "linux_password_min_days_configured",
      "linux_login_defs_pass_min_days_set",
      "linux_password_policy_min_days_enforced",
      "linux_account_password_change_interval_set",
      "linux_security_password_min_age_configured"
    ]
  },
  {
    "id": "5.5.1.3",
    "title": "Ensure password expiration warning days is 7 or more",
    "assessment": "Automated",
    "description": "The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify users that their password will expire in a defined number of days. It is recommended that the PASS_WARN_AGE parameter be set to 7 or more days.",
    "rationale": "Providing an advance warning that a password will be expiring gives users time to think of a secure password. Users caught unaware may choose a simple password or write it down where it may be discovered.",
    "audit": "Run the following command and verify PASS_WARN_AGE conforms to site policy (No less than 7 days): # grep PASS_WARN_AGE /etc/login.defs PASS_WARN_AGE 7 Verify all users with a password have their number of days of warning before password expires set to 7 or more: Run the following command and Review list of users and PASS_WARN_AGE to verify that all users' PASS_WARN_AGE conforms to site policy (No less than 7 days): # awk -F: '$2~/[^*!xX\\n\\r][^\\n\\r]+/{print $1\":\"$6}' /etc/shadow <user>:<PASS_WARN_AGE>",
    "remediation": "Set the PASS_WARN_AGE parameter to 7 in /etc/login.defs : PASS_WARN_AGE 7 Modify user parameters for all users with a password set to match: # chage --warndays 7 <user> References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 6th field should be 7 or more for all users with a password.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 6th field should be 7 or more for all users with a password.",
    "function_names": [
      "linux_login_defs_password_warn_age_min_7d",
      "linux_password_policy_warn_age_7_or_more",
      "linux_auth_password_expiration_warning_min_7d",
      "linux_security_password_warn_age_compliance",
      "linux_login_password_warn_age_sufficient"
    ]
  },
  {
    "id": "5.5.1.4",
    "title": "Ensure inactive password lock is 30 days or less",
    "assessment": "Automated",
    "description": "User accounts that have been inactive for over a given period of time can be automatically disabled. It is recommended that accounts that are inactive for 30 days after password expiration be disabled.",
    "rationale": "Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.",
    "audit": "Run the following command and verify INACTIVE conforms to site policy (no more than 30 days): # useradd -D | grep INACTIVE INACTIVE=30 Verify all users with a password have Password inactive no more than 30 days after password expires Verify all users with a password have Password inactive no more than 30 days after password expires: Run the following command and Review list of users and INACTIVE to verify that all users' INACTIVE conforms to site policy (no more than 30 days): # awk -F: '$2~/^[^*!xX\\n\\r][^\\n\\r]+/{print $1\":\"$7}' /etc/shadow <user>:<INACTIVE>",
    "remediation": "Run the following command to set the default password inactivity period to 30 days: # useradd -D -f 30 Modify user parameters for all users with a password set to match: # chage --inactive 30 <user> Default Value: INACTIVE=-1 References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 7th field should be 30 or less for all users with a password. Note: A value of -1 would disable this setting.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also check this setting in /etc/shadow directly. The 7th field should be 30 or less for all users with a password. Note: A value of -1 would disable this setting."
  },
  {
    "id": "5.5.1.5",
    "title": "Ensure all users last password change date is in the past",
    "assessment": "Automated",
    "description": "All users should have a password change date in the past.",
    "rationale": "If a users recorded password change date is in the future then they could bypass any set password expiration.",
    "audit": "Run the following command and verify nothing is returned { l_output2=\"\" while read -r l_user; do l_change=\"$(chage --list $l_user | awk -F: '($1 ~ /^\\s*Last\\s+password\\s+change/ && $2 !~ /never/){print $2}' | xargs)\" if [[ \"$(date -d \"$l_change\" +%s)\" -gt \"$(date +%s)\" ]]; then l_output2=\"$l_output2\\n  - User: \\\"$l_user\\\" last password change is in the future \\\"$l_change\\\"\" fi done < <(awk -F: '($2 ~ /^[^*!xX\\n\\r][^\\n\\r]+/){print $1}' /etc/shadow) if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - All user password changes are in the past \\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\" fi }",
    "remediation": "Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate. References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5"
  },
  {
    "id": "5.5.2",
    "title": "Ensure system accounts are secured",
    "assessment": "Automated",
    "description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell.",
    "rationale": "It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.",
    "audit": "Run the following script to verify all local system accounts: • Do not have a valid login shell • Are locked #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" a_users=(); a_ulock=() # initialize arrays while read -r l_user; do # Populate array with system accounts that have a valid login shell a_users+=(\"$l_user\") done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|sync|shutdown|halt|^\\+)/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) while read -r l_ulock; do # Populate array with system accounts that aren't locked a_ulock+=(\"$l_ulock\") done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|^\\+)/ && $2!~/LK?/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) if ! (( ${#a_users[@]} > 0 )); then l_output=\"$l_output\\n  - local system accounts login is disabled\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_users[@]}\")\\\" system accounts with login enabled\\n   - List of accounts:\\n$(printf '%s\\n' \"${a_users[@]:0:$l_limit}\")\\n   - end of list\\n\" fi if ! (( ${#a_ulock[@]} > 0 )); then l_output=\"$l_output\\n  - local system accounts are locked\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_ulock[@]}\")\\\" system accounts that are not locked\\n   - List of accounts:\\n$(printf '%s\\n' \"${a_ulock[@]:0:$l_limit}\")\\n   - end of list\\n\" fi unset a_users; unset a_ulock # Remove arrays if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\" fi }  Note: • The root, sync, shutdown, and halt users are exempted from requiring a non- login shell • root is exempt from being locked",
    "remediation": "Set the shell for any accounts returned by the audit to nologin: # usermod -s $(which nologin) <user> Lock any non root accounts returned by the audit: # usermod -L <user> The following script will: • Set the shell for any accounts returned by the audit to nologin • Lock any non root system accounts returned by the audit: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\\\\\/,g;p}' | paste -s -d '|' - ))$\" a_users=(); a_ulock=() # initialize arrays while read -r l_user; do # change system accounts that have a valid login shell to nolog shell echo -e \" - System account \\\"$l_user\\\" has a valid logon shell, changing shell to \\\"$(which nologin)\\\"\" usermod -s \"$(which nologin)\" \"$l_user\" done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|sync|shutdown|halt|^\\+)/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) while read -r l_ulock; do # Lock system accounts that aren't locked echo -e \" - System account \\\"$l_ulock\\\" is not locked, locking account\" usermod -L \"$l_ulock\" done < <(awk -v pat=\"$l_valid_shells\" -F: '($1!~/(root|^\\+)/ && $2!~/LK?/ && $3<'\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"' && $(NF) ~ pat) { print $1 }' /etc/passwd) } References: 1. NIST SP 800-53 Rev. 5: AC-2. AC-3, AC-5, MP-2 Additional Information: The root, sync, shutdown, and halt users are exempted from requiring a non-login shell.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-2. AC-3, AC-5, MP-2 Additional Information: The root, sync, shutdown, and halt users are exempted from requiring a non-login shell.",
    "function_names": [
      "os_system_accounts_no_shell_access",
      "os_system_accounts_password_locked",
      "os_system_accounts_no_home_directory",
      "os_system_accounts_no_login_privileges",
      "os_system_accounts_secure_permissions",
      "os_system_accounts_no_ssh_keys",
      "os_system_accounts_no_sudo_access",
      "os_system_accounts_immutable_config"
    ]
  },
  {
    "id": "5.5.3",
    "title": "Ensure default group for the root account is GID 0",
    "assessment": "Automated",
    "description": "The usermod command can be used to specify which group the root account belongs to. This affects permissions of files that are created by the root account.",
    "rationale": "Using GID 0 for the root account helps prevent root -owned files from accidentally becoming accessible to non-privileged users.",
    "audit": "Run the following command and verify the result is 0 : # grep \"^root:\" /etc/passwd | cut -f4 -d: 0",
    "remediation": "Run the following command to set the root account default group to GID 0 : # usermod -g 0 root References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "iam_root_group_default_gid_zero",
      "iam_root_account_group_gid_zero",
      "iam_root_default_group_gid_zero",
      "iam_account_root_group_gid_zero"
    ]
  },
  {
    "id": "5.5.4",
    "title": "Ensure default user umask is 027 or more restrictive",
    "assessment": "Automated",
    "description": "The user file-creation mode mask (umask) is use to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw- rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode. umask can be set with either octal or Symbolic values: • Octal (Numeric) Value - Represented by either three or four digits. ie umask 0027 or umask 027. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively. • Symbolic Value - Represented by a comma separated list for User u, group g, and world/other o. The permissions listed are not masked by umask. ie a umask set by umask u=rwx,g=rx,o= is the Symbolic equivalent of the Octal umask 027. This umask would set a newly created directory with file mode drwxr-x--- and a newly created file with file mode rw-r-----. The default umask can be set to use the pam_umask module or in a System Wide Shell Configuration File. The user creating the directories or files has the discretion of changing the permissions via the chmod command, or choosing a different default umask by adding the umask command into a User Shell Configuration File, ( .bash_profile or .bashrc), in their home directory.  Setting the default umask: • pam_umask module: o will set the umask according to the system default in /etc/login.defs and user settings, solving the problem of different umask settings with different shells, display managers, remote sessions etc. o umask=<mask> value in the /etc/login.defs file is interpreted as Octal o Setting USERGROUPS_ENAB to yes in /etc/login.defs (default): ▪ will enable setting of the umask group bits to be the same as owner bits. (examples: 022 -> 002, 077 -> 007) for non-root users, if the uid is the same as gid, and username is the same as the <primary group name> ▪ userdel will remove the user's group if it contains no more members, and useradd will create by default a group with the name of the user • System Wide Shell Configuration File: o /etc/profile - used to set system wide environmental variables on users shells. The variables are sometimes the same ones that are in the .bash_profile, however this file is used to set an initial PATH or PS1 for all shell users of the system. is only executed for interactive login shells, or shells executed with the --login parameter. o /etc/profile.d - /etc/profile will execute the scripts within /etc/profile.d/*.sh. It is recommended to place your configuration in a shell script within /etc/profile.d to set your own system wide environmental variables. o /etc/bashrc - System wide version of .bashrc. In Fedora derived distributions, etc/bashrc also invokes /etc/profile.d/*.sh if non-login shell, but redirects output to /dev/null if non-interactive. Is only executed for interactive shells or if BASH_ENV is set to /etc/bashrc. User Shell Configuration Files: • ~/.bash_profile - Is executed to configure your shell before the initial command prompt. Is only read by login shells. • ~/.bashrc - Is executed for interactive shells. only read by a shell that's both interactive and non-login",
    "rationale": "Setting a secure default value for umask ensures that users make a conscious choice about their file permissions. A permissive umask value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users.",
    "audit": "Run the following to verify: • A default user umask is set to enforce a newly created directories' permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r----- ), or more restrictive • No less restrictive System Wide umask is set Run the following script to verify that a default user umask is set enforcing a newly created directories's permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive: #!/bin/bash passing=\"\" grep -Eiq '^\\s*UMASK\\s+(0[0-7][2-7]7|[0-7][2-7]7)\\b' /etc/login.defs && grep -Eqi '^\\s*USERGROUPS_ENAB\\s*\"?no\"?\\b' /etc/login.defs && grep -Eq '^\\s*session\\s+(optional|requisite|required)\\s+pam_umask\\.so\\b' /etc/pam.d/common-session && passing=true grep -REiq '^\\s*UMASK\\s+\\s*(0[0-7][2-7]7|[0-7][2- 7]7|u=(r?|w?|x?)(r?|w?|x?)(r?|w?|x?),g=(r?x?|x?r?),o=)\\b' /etc/profile* /etc/bashrc* && passing=true [ \"$passing\" = true ] && echo \"Default user umask is set\" Verify output is: \"Default user umask is set\" Run the following to verify that no less restrictive system wide umask is set: # grep -RPi '(^|^[^#]*)\\s*umask\\s+([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0- 6]\\b|[0-7][01][0-7]\\b|[0-7][0-7][0- 6]\\b|(u=[rwx]{0,3},)?(g=[rwx]{0,3},)?o=[rwx]+\\b|(u=[rwx]{1,3},)?g=[^rx]{1,3}( ,o=[rwx]{0,3})?\\b)' /etc/login.defs /etc/profile* /etc/bashrc* No file should be returned",
    "remediation": "Review /etc/bashrc, /etc/profile, and all files ending in *.sh in the /etc/profile.d/ directory and remove or edit all umask entries to follow local site policy. Any remaining entries should be: umask 027, umask u=rwx,g=rx,o= or more restrictive. Configure umask in one of the following files: • A file in the /etc/profile.d/ directory ending in .sh • /etc/profile • /etc/bashrc Example: # vi /etc/profile.d/set_umask.sh umask 027 Run the following command and remove or modify the umask of any returned files: # grep -RPi '(^|^[^#]*)\\s*umask\\s+([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][0- 6]\\b|[0-7][01][0-7]\\b|[0-7][0-7][0- 6]\\b|(u=[rwx]{0,3},)?(g=[rwx]{0,3},)?o=[rwx]+\\b|(u=[rwx]{1,3},)?g=[^rx]{1,3}( ,o=[rwx]{0,3})?\\b)' /etc/login.defs /etc/profile* /etc/bashrc* Follow one of the following methods to set the default user umask: Edit /etc/login.defs and edit the UMASK and USERGROUPS_ENAB lines as follows: UMASK 027 USERGROUPS_ENAB no Edit the files /etc/pam.d/password-auth and /etc/pam.d/system-auth and add or edit the following: session     optional      pam_umask.so OR Configure umask in one of the following files: • A file in the /etc/profile.d/ directory ending in .sh • /etc/profile • /etc/bashrc Example: /etc/profile.d/set_umask.sh umask 027 Note: this method only applies to bash and shell. If other shells are supported on the system, it is recommended that their configuration files also are checked. Default Value: UMASK 022 References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: • Other methods of setting a default user umask exist • If other methods are in use in your environment they should be audited • The default user umask can be overridden with a user specific umask • The user creating the directories or files has the discretion of changing the permissions: o Using the chmod command o Setting a different default umask by adding the umask command into a User Shell Configuration File, (.bashrc), in their home directory o Manually changing the umask for the duration of a login session by running the umask command NIST SP 800-53 Rev. 5: • AC-3 • MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2 Additional Information: • Other methods of setting a default user umask exist • If other methods are in use in your environment they should be audited • The default user umask can be overridden with a user specific umask • The user creating the directories or files has the discretion of changing the permissions: o Using the chmod command o Setting a different default umask by adding the umask command into a User Shell Configuration File, (.bashrc), in their home directory o Manually changing the umask for the duration of a login session by running the umask command NIST SP 800-53 Rev. 5: • AC-3 • MP-2",
    "function_names": [
      "linux_system_default_umask_restrictive",
      "linux_system_umask_pam_module_restrictive",
      "linux_system_umask_login_defs_restrictive",
      "linux_system_umask_profile_restrictive",
      "linux_system_umask_bashrc_restrictive",
      "linux_system_umask_user_shell_restrictive",
      "linux_system_umask_usergroups_enabled",
      "linux_system_umask_symbolic_restrictive",
      "linux_system_umask_octal_restrictive",
      "linux_system_umask_min_027"
    ]
  },
  {
    "id": "6.1.1",
    "title": "Ensure permissions on /etc/passwd are configured",
    "assessment": "Automated",
    "description": "The /etc/passwd file contains user account information that is used by many system utilities and therefore must be readable for these utilities to operate.",
    "rationale": "It is critical to ensure that the /etc/passwd file is protected from unauthorized write access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/passwd is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/passwd /etc/passwd 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd: # chmod u-x,go-wx /etc/passwd # chown root:root /etc/passwd Default Value: /etc/passwd 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_passwd_permissions_configured",
      "linux_file_passwd_readable",
      "linux_file_passwd_secure_permissions",
      "linux_file_passwd_ownership_correct",
      "linux_file_passwd_mode_644",
      "linux_file_passwd_group_ownership_root",
      "linux_file_passwd_user_ownership_root",
      "linux_file_passwd_no_world_writable",
      "linux_file_passwd_no_unauthorized_access",
      "linux_file_passwd_restrictive_permissions"
    ]
  },
  {
    "id": "6.1.2",
    "title": "Ensure permissions on /etc/passwd- are configured",
    "assessment": "Automated",
    "description": "The /etc/passwd- file contains backup user account information.",
    "rationale": "It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/passwd- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/passwd- /etc/passwd- 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd-: # chmod u-x,go-wx /etc/passwd- # chown root:root /etc/passwd- Default Value: /etc/passwd- 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "linux_file_passwd_backup_permissions_configured",
      "linux_file_passwd_backup_ownership_configured",
      "linux_file_passwd_backup_mode_restricted",
      "linux_file_passwd_backup_group_restricted",
      "linux_file_passwd_backup_world_readable_disabled"
    ]
  },
  {
    "id": "6.1.3",
    "title": "Ensure permissions on /etc/group are configured",
    "assessment": "Automated",
    "description": "The /etc/group file contains a list of all the valid groups defined in the system. The command below allows read/write access for root and read access for everyone else.",
    "rationale": "The /etc/group file needs to be protected from unauthorized changes by non-privileged users, but needs to be readable as this information is used with many non-privileged programs.",
    "audit": "Run the following command to verify /etc/group is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/group /etc/group 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group: # chmod u-x,go-wx /etc/group # chown root:root /etc/group Default Value: /etc/group 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "linux_file_group_read_only",
      "linux_file_group_owner_root",
      "linux_file_group_permissions_644",
      "linux_file_group_no_world_writable",
      "linux_file_group_no_unauthorized_access"
    ]
  },
  {
    "id": "6.1.4",
    "title": "Ensure permissions on /etc/group- are configured",
    "assessment": "Automated",
    "description": "The /etc/group- file contains a backup list of all the valid groups defined in the system.",
    "rationale": "It is critical to ensure that the /etc/group- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command to verify /etc/group- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/group- /etc/group- 644 0/root 0/root",
    "remediation": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group-: # chmod u-x,go-wx /etc/group- # chown root:root /etc/group- Default Value: /etc/group- 644 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_group_backup_permissions_configured",
      "linux_file_group_backup_ownership_configured",
      "linux_file_group_backup_mode_restricted",
      "linux_file_group_backup_access_controlled",
      "linux_file_group_backup_immutable_set",
      "linux_file_group_backup_secure_permissions",
      "linux_file_group_backup_read_only",
      "linux_file_group_backup_no_world_writable",
      "linux_file_group_backup_no_world_readable",
      "linux_file_group_backup_root_owned"
    ]
  },
  {
    "id": "6.1.5",
    "title": "Ensure permissions on /etc/shadow are configured",
    "assessment": "Automated",
    "description": "The /etc/shadow file is used to store the information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert the user accounts.",
    "audit": "Run the following command and verify Uid and Gid are 0/root , and Access is 0400 or more restrictive: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/shadow /etc/shadow 400 0/root 0/root",
    "remediation": "Run the following commands to set owner, group, and permissions on /etc/shadow: # chown root:root /etc/shadow # chmod u-wx,go-rwx /etc/shadow Default Value: /etc/shadow 400 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3, MP-2",
    "function_names": [
      "linux_file_shadow_permissions_configured",
      "linux_file_shadow_owner_root",
      "linux_file_shadow_group_shadow",
      "linux_file_shadow_mode_640",
      "linux_file_shadow_no_world_writable",
      "linux_file_shadow_no_group_writable",
      "linux_file_shadow_no_other_readable"
    ]
  },
  {
    "id": "6.1.6",
    "title": "Ensure permissions on /etc/shadow- are configured",
    "assessment": "Automated",
    "description": "The /etc/shadow- file is used to store backup information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/shadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command and verify Uid is 0/root, Gid is 0/root and Access is 0400 or more restrictive: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/shadow- /etc/shadow 400 0/root 0/root-",
    "remediation": "Run the following commands to set owner, group, and permissions on /etc/shadow-: # chown root:root /etc/shadow- # chmod u-wx,go-rwx /etc/shadow- Default Value: /etc/shadow 400 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "linux_file_shadow_backup_permissions_configured",
      "linux_file_shadow_backup_owner_root",
      "linux_file_shadow_backup_group_root",
      "linux_file_shadow_backup_mode_0000",
      "linux_file_shadow_backup_no_world_readable",
      "linux_file_shadow_backup_no_world_writable",
      "linux_file_shadow_backup_no_group_writable",
      "linux_file_shadow_backup_no_other_writable"
    ]
  },
  {
    "id": "6.1.7",
    "title": "Ensure permissions on /etc/gshadow are configured",
    "assessment": "Automated",
    "description": "The /etc/gshadow file is used to store the information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/gshadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/gshadow file (such as group administrators) could also be useful to subvert the group.",
    "audit": "Run the following command and verify verify Uid is 0/root, Gid is 0/root and Access is 0400 or more restrictive: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/gshadow /etc/gshadow 400 0/root 0/root",
    "remediation": "Run the following commands to set owner, group, and permissions on /etc/gshadow # chown root:root /etc/gshadow # chmod u-wx,go-rwx /etc/gshadow Default Value: /etc/gshadow 400 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "linux_file_gshadow_permissions_configured",
      "linux_file_gshadow_owner_root",
      "linux_file_gshadow_group_shadow",
      "linux_file_gshadow_mode_000",
      "linux_file_gshadow_no_world_readable",
      "linux_file_gshadow_no_world_writable",
      "linux_file_gshadow_no_world_executable",
      "linux_file_gshadow_no_group_writable",
      "linux_file_gshadow_no_group_executable"
    ]
  },
  {
    "id": "6.1.8",
    "title": "Ensure permissions on /etc/gshadow- are configured",
    "assessment": "Automated",
    "description": "The /etc/gshadow- file is used to store backup information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/gshadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit": "Run the following command and verify verify Uid is 0/root, Gid is 0/root and Access is 0400 or more restrictive: # stat -Lc \"%n %a %u/%U %g/%G\" /etc/gshadow- /etc/gshadow- 400 0/root 0/root",
    "remediation": "Run the following commands to set owner, group, and permissions on /etc/gshadow- : # chown root:root /etc/gshadow- # chmod u-wx,go-rwx /etc/gshadow- Default Value: /etc/gshadow- 400 0/root 0/root References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "linux_file_gshadow_backup_permissions_configured",
      "linux_file_gshadow_backup_ownership_correct",
      "linux_file_gshadow_backup_mode_restricted",
      "linux_file_gshadow_backup_access_controlled",
      "linux_file_gshadow_backup_security_settings_enforced"
    ]
  },
  {
    "id": "6.1.9",
    "title": "Ensure no unowned or ungrouped files or directories exist",
    "assessment": "Automated",
    "description": "Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by those users or groups.",
    "rationale": "A new user or group who is assigned a deleted user's user ID or group ID may then end up \"owning\" a deleted user or group's files, and thus have more access on the system than was intended.",
    "audit": "Run the following script to verify no unowned or ungrouped files or directories exist: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_path=(); a_arr=(); a_nouser=(); a_nogroup=() # Initialize arrays a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"/sys/fs/cgroup/memory/*\") while read -r l_bfs; do a_path+=( -a ! -path \"\"$l_bfs\"/*\") done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\\s*(nfs|proc|smb)/ {print $2}') while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%U^%G' \"$l_file\")\") && echo \"Adding: $l_file\" done < <(find / \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) \\( -nouser -o -nogroup \\) - print0 2> /dev/null) while IFS=\"^\" read -r l_fname l_user l_group; do # Test files in the array [ \"$l_user\" = \"UNKNOWN\" ] && a_nouser+=(\"$l_fname\") [ \"$l_group\" = \"UNKNOWN\" ] && a_nogroup+=(\"$l_fname\") done <<< \"$(printf '%s\\n' \"${a_arr[@]}\")\" if ! (( ${#a_nouser[@]} > 0 )); then l_output=\"$l_output\\n  - No unowned files or directories exist on the local filesystem.\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_nouser[@]}\")\\\" unowned files or directories on the system.\\n   - The following is a list of unowned files and/or directories:\\n$(printf '%s\\n' \"${a_nouser[@]}\")\\n   - end of list\" fi if ! (( ${#a_nogroup[@]} > 0 )); then l_output=\"$l_output\\n  - No ungrouped files or directories exist on the local filesystem.\" else l_output2=\"$l_output2\\n  - There are \\\"$(printf '%s' \"${#a_nogroup[@]}\")\\\" ungrouped files or directories on the system.\\n   - The following is a list of ungrouped files and/or directories:\\n$(printf '%s\\n' \"${a_nogroup[@]}\")\\n   - end of list\" fi unset a_path; unset a_arr ; unset a_nouser; unset a_nogroup # Remove arrays if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured * :\\n$l_output\\n\" fi } Note: On systems with a large number of files and/or directories, this audit may be a long running process",
    "remediation": "Remove or set ownership and group ownership of these files and/or directories to an active user on the system as appropriate. References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "filesystem_file_owner_exists",
      "filesystem_directory_owner_exists",
      "filesystem_file_group_exists",
      "filesystem_directory_group_exists",
      "filesystem_unowned_files_removed",
      "filesystem_ungrouped_files_removed",
      "filesystem_unowned_directories_removed",
      "filesystem_ungrouped_directories_removed",
      "filesystem_orphaned_resources_cleaned",
      "filesystem_ownership_validated"
    ]
  },
  {
    "id": "6.1.10",
    "title": "Ensure world writable files and directories are secured",
    "assessment": "Automated",
    "description": "World writable files are the least secure. Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. See the chmod(2) man page for more information. Setting the sticky bit on world writable directories prevents users from deleting or renaming files in that directory that are not owned by them.",
    "rationale": "Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. This feature prevents the ability to delete or rename files in world writable directories (such as /tmp ) that are owned by another user.",
    "audit": "Run the following script to verify: • No world writable files exist • No world writable directories without the sticky bit exist #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" l_smask='01000' a_path=(); a_arr=(); a_file=(); a_dir=() # Initialize arrays a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"/sys/kernel/security/apparmor/*\" -a ! -path \"/snap/*\" -a ! -path \"/sys/fs/cgroup/memory/*\") while read -r l_bfs; do a_path+=( -a ! -path \"\"$l_bfs\"/*\") done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\\s*(nfs|proc|smb)/ {print $2}') # Populate array with files that will possibly fail one of the audits while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%#a' \"$l_file\")\") done < <(find / \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2>/dev/null) while IFS=\"^\" read -r l_fname l_mode; do # Test files in the array [ -f \"$l_fname\" ] && a_file+=(\"$l_fname\") # Add WR files if [ -d \"$l_fname\" ]; then # Add directories w/o sticky bit [ ! $(( $l_mode & $l_smask )) -gt 0 ] && a_dir+=(\"$l_fname\") fi done < <(printf '%s\\n' \"${a_arr[@]}\") if ! (( ${#a_file[@]} > 0 )); then l_output=\"$l_output\\n  - No world writable files exist on the local filesystem.\" else l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_file[@]}\")\\\" World writable files on the system.\\n   - The following is a list of World writable files:\\n$(printf '%s\\n' \"${a_file[@]}\")\\n   - end of list\\n\" fi if ! (( ${#a_dir[@]} > 0 )); then l_output=\"$l_output\\n  - Sticky bit is set on world writable directories on the local filesystem.\" else l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_dir[@]}\")\\\" World writable directories without the sticky bit on the system.\\n   - The following is a list of World writable directories without the sticky bit:\\n$(printf '%s\\n' \"${a_dir[@]}\")\\n   - end of list\\n\" fi unset a_path; unset a_arr; unset a_file; unset a_dir # Remove arrays # If l_output2 is empty, we pass if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n  ** PASS **\\n - * Correctly configured * :\\n$l_output\\n\" else echo -e \"\\n- Audit Result:\\n  ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\" [ -n \"$l_output\" ] && echo -e \"- * Correctly configured * :\\n$l_output\\n\" fi } Note: On systems with a large number of files and/or directories, this audit may be a long running process",
    "remediation": "• World Writable Files: o It is recommended that write access is removed from other with the command ( chmod o-w <filename> ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file. • World Writable Directories: o Set the sticky bit on all world writable directories with the command ( chmod a+t <directory_name> ) Run the following script to: • Remove other write permission from any world writable files • Add the sticky bit to all world writable directories #!/usr/bin/env bash { l_smask='01000' a_path=(); a_arr=() # Initialize array a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"/sys/kernel/security/apparmor/*\" -a ! -path \"/snap/*\" -a ! -path \"/sys/fs/cgroup/memory/*\") while read -r l_bfs; do a_path+=( -a ! -path \"\"$l_bfs\"/*\") done < <(findmnt -Dkerno fstype,target | awk '$1 ~ /^\\s*(nfs|proc|smb)/ {print $2}') # Populate array with files while IFS= read -r -d $'\\0' l_file; do [ -e \"$l_file\" ] && a_arr+=(\"$(stat -Lc '%n^%#a' \"$l_file\")\") done < <(find / \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2>/dev/null) while IFS=\"^\" read -r l_fname l_mode; do # Test files in the array if [ -f \"$l_fname\" ]; then # Remove excess permissions from WW files echo -e \" - File: \\\"$l_fname\\\" is mode: \\\"$l_mode\\\"\\n  - removing write permission on \\\"$l_fname\\\" from \\\"other\\\"\" chmod o-w \"$l_fname\" fi if [ -d \"$l_fname\" ]; then if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then # Add sticky bit echo -e \" - Directory: \\\"$l_fname\\\" is mode: \\\"$l_mode\\\" and doesn't have the sticky bit set\\n  - Adding the sticky bit\" chmod a+t \"$l_fname\" fi fi done < <(printf '%s\\n' \"${a_arr[@]}\") unset a_path; unset a_arr # Remove array } References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2",
    "function_names": [
      "compute_file_world_writable_restricted",
      "compute_directory_world_writable_restricted",
      "compute_file_sticky_bit_enabled",
      "compute_directory_sticky_bit_enabled",
      "compute_file_permissions_secure",
      "compute_directory_permissions_secure",
      "compute_file_world_writable_removed",
      "compute_directory_world_writable_removed"
    ]
  },
  {
    "id": "6.2.1",
    "title": "Ensure password fields are not empty",
    "assessment": "Automated",
    "description": "An account with an empty password field means that anybody may log in as that user without providing a password.",
    "rationale": "All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user.",
    "audit": "Run the following command and verify that no output is returned: # awk -F: '($2 == \"\" ) { print $1 \" does not have a password \"}' /etc/shadow",
    "remediation": "If any accounts in the /etc/shadow file do not have a password, run the following command to lock the account until it can be determined why it does not have a password: # passwd -l <username> Also, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off. References: 1. NIST SP 800-53 Rev. 5: IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: IA-5",
    "function_names": [
      "iam_user_password_not_empty",
      "iam_user_password_configured",
      "iam_user_password_required",
      "iam_user_password_set",
      "iam_user_password_non_empty"
    ]
  },
  {
    "id": "6.2.2",
    "title": "Ensure all groups in /etc/passwd exist in /etc/group",
    "assessment": "Automated",
    "description": "Over time, system administration errors and changes can lead to groups being defined in /etc/passwd but not in /etc/group .",
    "rationale": "Groups defined in the /etc/passwd file but not in the /etc/group file pose a threat to system security since group permissions are not properly managed.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do grep -q -P \"^.*?:[^:]*:$i:\" /etc/group if [ $? -ne 0 ]; then echo \"Group $i is referenced by /etc/passwd but does not exist in /etc/group\" fi done",
    "remediation": "Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "linux_passwd_groups_exist_in_group",
      "linux_group_consistency_ensured",
      "linux_passwd_group_sync_valid",
      "linux_system_groups_consistent",
      "linux_group_membership_validated"
    ]
  },
  {
    "id": "6.2.3",
    "title": "Ensure no duplicate UIDs exist",
    "assessment": "Automated",
    "description": "Although the useradd program will not let you create a duplicate User ID (UID), it is possible for an administrator to manually edit the /etc/passwd file and change the UID field.",
    "rationale": "Users must be assigned unique UIDs for accountability and to ensure appropriate access protections.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c | while read x ; do [ -z \"$x\" ] && break set - $x if [ $1 -gt 1 ]; then users=$(awk -F: '($3 == n) { print $1 }' n=$2 /etc/passwd | xargs) echo \"Duplicate UID ($2): $users\" fi done",
    "remediation": "Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_user_unique_uid",
      "compute_user_no_duplicate_uids",
      "compute_user_uid_uniqueness",
      "compute_user_uid_not_reused",
      "compute_user_uid_single_assignment"
    ]
  },
  {
    "id": "6.2.4",
    "title": "Ensure no duplicate GIDs exist",
    "assessment": "Automated",
    "description": "Although the groupadd program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the /etc/group file and change the GID field.",
    "rationale": "User groups must be assigned unique GIDs for accountability and to ensure appropriate access protections.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -d: -f3 /etc/group | sort | uniq -d | while read x ; do echo \"Duplicate GID ($x) in /etc/group\" done",
    "remediation": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also use the grpck command to check for other inconsistencies in the /etc/group file.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: You can also use the grpck command to check for other inconsistencies in the /etc/group file.",
    "function_names": [
      "linux_group_duplicate_gid",
      "linux_group_unique_gid",
      "linux_group_gid_no_duplicates",
      "linux_group_gid_unique",
      "linux_group_gid_conflict_free"
    ]
  },
  {
    "id": "6.2.5",
    "title": "Ensure no duplicate user names exist",
    "assessment": "Automated",
    "description": "Although the useradd program will not let you create a duplicate user name, it is possible for an administrator to manually edit the /etc/passwd file and change the user name.",
    "rationale": "If a user is assigned a duplicate user name, it will create and have access to files with the first UID for that username in /etc/passwd . For example, if \"test4\" has a UID of 1000 and a subsequent \"test4\" entry has a UID of 2000, logging in as \"test4\" will use UID 1000. Effectively, the UID is shared, which is a security problem.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -d: -f1 /etc/passwd | sort | uniq -d | while read x; do echo \"Duplicate login name ${x} in /etc/passwd\" done",
    "remediation": "Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "iam_user_no_duplicate_names",
      "linux_user_no_duplicate_names",
      "system_user_no_duplicate_names",
      "os_user_no_duplicate_names",
      "local_user_no_duplicate_names",
      "passwd_user_no_duplicate_names",
      "auth_user_no_duplicate_names",
      "identity_user_no_duplicate_names"
    ]
  },
  {
    "id": "6.2.6",
    "title": "Ensure no duplicate group names exist",
    "assessment": "Automated",
    "description": "Although the groupadd program will not let you create a duplicate group name, it is possible for an administrator to manually edit the /etc/group file and change the group name.",
    "rationale": "If a group is assigned a duplicate group name, it will create and have access to files with the first GID for that group in /etc/group . Effectively, the GID is shared, which is a security problem.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash cut -d: -f1 /etc/group | sort | uniq -d | while read -r x; do echo \"Duplicate group name ${x} in /etc/group\" done",
    "remediation": "Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "iam_group_name_unique",
      "linux_group_name_unique",
      "system_group_name_unique",
      "local_group_name_unique",
      "unix_group_name_unique"
    ]
  },
  {
    "id": "6.2.7",
    "title": "Ensure root PATH Integrity",
    "assessment": "Automated",
    "description": "The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.",
    "rationale": "Including the current working directory (.) or other writable directory in root 's executable path makes it likely that an attacker can gain superuser access by forcing an administrator operating as root to execute a Trojan horse program.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash RPCV=\"$(sudo -Hiu root env | grep '^PATH=' | cut -d= -f2)\" echo \"$RPCV\" | grep -q \"::\" && echo \"root's path contains a empty directory (::)\" echo \"$RPCV\" | grep -q \":$\" && echo \"root's path contains a trailing (:)\" for x in $(echo \"$RPCV\" | tr \":\" \" \"); do if [ -d \"$x\" ]; then ls -ldH \"$x\" | awk '$9 == \".\" {print \"PATH contains current working directory (.)\"} $3 != \"root\" {print $9, \"is not owned by root\"} substr($1,6,1) != \"-\" {print $9, \"is group writable\"} substr($1,9,1) != \"-\" {print $9, \"is world writable\"}' else echo \"$x is not a directory\" fi done",
    "remediation": "Correct or justify any items discovered in the Audit step. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "system_path_root_integrity",
      "system_path_root_no_world_writable",
      "system_path_root_no_untrusted_dirs",
      "system_path_root_secure_permissions",
      "system_path_root_immutable",
      "system_path_root_no_relative_paths",
      "system_path_root_no_empty_entries",
      "system_path_root_no_duplicate_entries",
      "system_path_root_no_unowned_dirs",
      "system_path_root_no_group_writable"
    ]
  },
  {
    "id": "6.2.8",
    "title": "Ensure root is the only UID 0 account",
    "assessment": "Automated",
    "description": "Any account with UID 0 has superuser privileges on the system.",
    "rationale": "This access must be limited to only the default root account and only from the system console. Administrative access must be through an unprivileged account using an approved mechanism as noted in recommendation \"Ensure access to the su command is restricted\".",
    "audit": "Run the following command and verify that only \"root\" is returned: # awk -F: '($3 == 0) { print $1 }' /etc/passwd root",
    "remediation": "Remove any users other than root with UID 0 or assign them a new UID if appropriate. References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_user_root_only_uid_0",
      "compute_account_no_non_root_uid_0",
      "compute_system_uid_0_root_only",
      "compute_privilege_uid_0_root_exclusive",
      "compute_superuser_uid_0_single_account"
    ]
  },
  {
    "id": "6.2.9",
    "title": "Ensure all users' home directories exist",
    "assessment": "Automated",
    "description": "Users can be defined in /etc/passwd without a home directory or with a home directory that does not actually exist.",
    "rationale": "If the user's home directory does not exist or is unassigned, the user will be placed in \"/\" and will not be able to write any files or have local environment variables set.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ ! -d \"$dir\" ]; then echo \"User: \\\"$user\\\" home directory: \\\"$dir\\\" does not exist.\" fi done Note: The audit script checks all users with interactive shells except halt, sync, shutdown, and nfsnobody.",
    "remediation": "If any users' home directories do not exist, create them and make sure the respective user owns the directory. Users without an assigned home directory should be removed or assigned a home directory as appropriate. The following script will create a home directory for users with an interactive shell whose home directory doesn't exist: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ ! -d \"$dir\" ]; then mkdir \"$dir\" chmod g-w,o-wrx \"$dir\" chown \"$user\" \"$dir\" fi done References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: The audit script checks all users with interactive shells except halt, sync, shutdown, and nfsnobody.",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5 Additional Information: The audit script checks all users with interactive shells except halt, sync, shutdown, and nfsnobody.",
    "function_names": [
      "linux_user_home_directory_exists",
      "linux_user_home_directory_valid",
      "linux_passwd_home_directory_configured",
      "linux_user_home_directory_present",
      "linux_home_directory_defined"
    ]
  },
  {
    "id": "6.2.10",
    "title": "Ensure users own their home directories",
    "assessment": "Automated",
    "description": "The user home directory is space defined for the particular user to set local environment variables and to store personal files.",
    "rationale": "Since the user is accountable for files stored in the user home directory, the user (or root) must be the owner of the directory.",
    "audit": "Run the following script and verify no results are returned: #!/usr/bin/env bash { for i in $( awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) {print $1\":\"$6}' /etc/passwd); do user=$(echo \"$i\" | cut -d: -f1) dir=$(echo \"$i\" | cut -d: -f2) if [ ! -d \"$dir\" ]; then [ -z \"$output2\" ] && output2=\"The following users' home directories don't exist: \\\"$user\\\"\" || output2=\"$output2, \\\"$user\\\"\" else owner=\"$(stat -L -c \"%U\" \"$dir\")\" if [ \"$owner\" != \"$user\" ] && [ \"$owner\" != \"root\" ]; then [ -z \"$output\" ] && output=\"The following users' don't own their home directory: \\\"$user\\\" home directory is owned by \\\"$owner\\\"\" || output=\"$output, \\\"$user\\\" home directory is owned by \\\"$owner\\\"\" fi fi done }",
    "remediation": "Change the ownership of any home directories that are not owned by the defined user to the correct user. The following script will create missing home directories, set the owner, and set the permissions for interactive users' home directories: #!/usr/bin/env bash { awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)? \\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ ! -d \"$dir\" ]; then echo \"User: \\\"$user\\\" home directory: \\\"$dir\\\" does not exist, creating home directory\" mkdir \"$dir\" chmod g-w,o-rwx \"$dir\" chown \"$user\" \"$dir\" else owner=$(stat -L -c \"%U\" \"$dir\") if [ \"$owner\" != \"$user\" ]; then chmod g-w,o-rwx \"$dir\" chown \"$user\" \"$dir\" fi fi done } References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_user_home_directory_owned",
      "compute_user_home_directory_correct_permissions",
      "compute_user_home_directory_not_world_writable",
      "compute_user_home_directory_not_group_writable",
      "compute_user_home_directory_not_world_readable",
      "compute_user_home_directory_not_group_readable",
      "compute_user_home_directory_strict_ownership",
      "compute_user_home_directory_proper_acl",
      "compute_user_home_directory_secure_permissions",
      "compute_user_home_directory_user_exclusive"
    ]
  },
  {
    "id": "6.2.11",
    "title": "Ensure users' home directories permissions are 750 or more restrictive",
    "assessment": "Automated",
    "description": "While the system administrator can establish secure permissions for users' home directories, the users can easily override these.",
    "rationale": "Group or world-writable user home directories may enable malicious users to steal or modify other users' data or to gain another user's system privileges.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) {print $1 \" \" $6}' /etc/passwd | while read -r user dir; do if [ ! -d \"$dir\" ]; then echo \"User: \\\"$user\\\" home directory: \\\"$dir\\\" doesn't exist\" else dirperm=$(stat -L -c \"%A\" \"$dir\") if [ \"$(echo \"$dirperm\" | cut -c6)\" != \"-\" ] || [ \"$(echo \"$dirperm\" | cut -c8)\" != \"-\" ] || [ \"$(echo \"$dirperm\" | cut -c9)\" != \"-\" ] || [ \"$(echo \"$dirperm\" | cut -c10)\" != \"-\" ]; then echo \"User: \\\"$user\\\" home directory: \\\"$dir\\\" has permissions: \\\"$(stat -L -c \"%a\" \"$dir\")\\\"\" fi fi done",
    "remediation": "Making global modifications to user home directories without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user file permissions and determine the action to be taken in accordance with site policy. The following script can be used to remove permissions is excess of 750 from users' home directories: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) {print $6}' /etc/passwd | while read -r dir; do if [ -d \"$dir\" ]; then dirperm=$(stat -L -c \"%A\" \"$dir\") if [ \"$(echo \"$dirperm\" | cut -c6)\" != \"-\" ] || [ \"$(echo \"$dirperm\" | cut -c8)\" != \"-\" ] || [ \"$(echo \"$dirperm\" | cut -c9)\" != \"-\" ] || [ \"$(echo \"$dirperm\" | cut -c10)\" != \"-\" ]; then chmod g-w,o-rwx \"$dir\" fi fi done References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2, CM-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2, CM-6",
    "function_names": [
      "linux_home_directory_permissions_750_or_stricter",
      "linux_home_directory_permissions_restrictive",
      "linux_home_directory_permissions_secure",
      "linux_home_directory_permissions_compliant",
      "linux_home_directory_permissions_cis_benchmark"
    ]
  },
  {
    "id": "6.2.12",
    "title": "Ensure users' dot files are not group or world writable",
    "assessment": "Automated",
    "description": "While the system administrator can establish secure permissions for users' \"dot\" files, the users can easily override these.",
    "rationale": "Group or world-writable user configuration files may enable malicious users to steal or modify other users' data or to gain another user's system privileges.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ -d \"$dir\" ]; then for file in \"$dir\"/.*; do if [ ! -h \"$file\" ] && [ -f \"$file\" ]; then fileperm=$(stat -L -c \"%A\" \"$file\") if [ \"$(echo \"$fileperm\" | cut -c6)\" != \"-\" ] || [ \"$(echo \"$fileperm\" | cut -c9)\" != \"-\" ]; then echo \"User: \\\"$user\\\" file: \\\"$file\\\" has permissions: \\\"$fileperm\\\"\" fi fi done fi done",
    "remediation": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy. The following script will remove excessive permissions on dot files within interactive users' home directories. #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $6 }' /etc/passwd | while read -r dir; do if [ -d \"$dir\" ]; then for file in \"$dir\"/.*; do if [ ! -h \"$file\" ] && [ -f \"$file\" ]; then fileperm=$(stat -L -c \"%A\" \"$file\") if [ \"$(echo \"$fileperm\" | cut -c6)\" != \"-\" ] || [ \"$(echo \"$fileperm\" | cut -c9)\" != \"-\" ]; then chmod go-w \"$file\" fi fi done fi done References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2, CM-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2, CM-6",
    "function_names": [
      "linux_user_dot_files_group_writable",
      "linux_user_dot_files_world_writable",
      "linux_user_dot_files_permissions_restricted",
      "linux_user_dot_files_secure_permissions",
      "linux_user_dot_files_no_group_write",
      "linux_user_dot_files_no_world_write",
      "linux_user_dot_files_ownership_restricted",
      "linux_user_dot_files_access_controlled"
    ]
  },
  {
    "id": "6.2.13",
    "title": "Ensure users' .netrc Files are not group or world accessible",
    "assessment": "Automated",
    "description": "While the system administrator can establish secure permissions for users' .netrc files, the users can easily override these.",
    "rationale": "The .netrc file presents a significant security risk since it stores passwords in unencrypted form. Even if FTP is disabled, user accounts may have brought over .netrc files from other systems which could pose a risk to those systems. If a .netrc file is required, and follows local site policy, it should have permissions of 600 or more restrictive.",
    "audit": "Run the following script. This script will return: • FAILED: for any .netrc file with permissions less restrictive than 600 • WARNING: for any .netrc files that exist in interactive users' home directories. #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ -d \"$dir\" ]; then file=\"$dir/.netrc\" if [ ! -h \"$file\" ] && [ -f \"$file\" ]; then if stat -L -c \"%A\" \"$file\" | cut -c4-10 |  grep -Eq '[^-]+'; then echo \"FAILED: User: \\\"$user\\\" file: \\\"$file\\\" exists with permissions: \\\"$(stat -L -c \"%a\" \"$file\")\\\", remove file or excessive permissions\" else echo \"WARNING: User: \\\"$user\\\" file: \\\"$file\\\" exists with permissions: \\\"$(stat -L -c \"%a\" \"$file\")\\\", remove file unless required\" fi fi fi done Verify: • Any lines beginning with FAILED: - File should be removed unless deemed necessary, in accordance with local site policy, and permissions are updated to be 600 or more restrictive • Any lines beginning with WARNING: - File should be removed unless deemed necessary, and in accordance with local site policy",
    "remediation": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user .netrc files and determine the action to be taken in accordance with site policy. The following script will remove .netrc files from interactive users' home directories #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $6 }'  /etc/passwd | while read -r dir; do if [ -d \"$dir\" ]; then file=\"$dir/.netrc\" [ ! -h \"$file\" ] && [ -f \"$file\" ] && rm -f \"$file\" fi done References: 1. NIST SP 800-53 Rev. 5: AC-3. MP-2, CM-6",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: AC-3. MP-2, CM-6",
    "function_names": [
      "iam_user_netrc_file_restricted_permissions",
      "iam_user_netrc_file_no_group_access",
      "iam_user_netrc_file_no_world_access",
      "iam_user_netrc_file_secure_permissions",
      "iam_user_netrc_file_protected_access"
    ]
  },
  {
    "id": "6.2.14",
    "title": "Ensure no users have .forward files",
    "assessment": "Automated",
    "description": "The .forward file specifies an email address to forward the user's mail to.",
    "rationale": "Use of the .forward file poses a security risk in that sensitive data may be inadvertently transferred outside the organization. The .forward file also poses a risk as it can be used to execute commands that may perform unintended actions.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ -d \"$dir\" ]; then file=\"$dir/.forward\" if [ ! -h \"$file\" ] && [ -f \"$file\" ]; then echo \"User: \\\"$user\\\" file: \\\"$file\\\" exists\" fi fi done",
    "remediation": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user .forward files and determine the action to be taken in accordance with site policy. The following script will remove .forward files from interactive users' home directories #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $6 }' /etc/passwd | while read -r dir; do if [ -d \"$dir\" ]; then file=\"$dir/.forward\" [ ! -h \"$file\" ] && [ -f \"$file\" ] && rm -r \"$file\" fi done References: 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "linux_user_no_forward_files",
      "linux_user_no_forward_files_all",
      "linux_user_no_forward_files_present",
      "linux_user_forward_files_absent",
      "linux_user_forward_files_disabled",
      "linux_user_forward_files_prohibited",
      "linux_user_no_mail_forwarding",
      "linux_user_mail_forwarding_disabled"
    ]
  },
  {
    "id": "6.2.15",
    "title": "Ensure no users have .netrc files",
    "assessment": "Automated",
    "description": "The .netrc file contains data for logging into a remote host for file transfers via FTP.",
    "rationale": "The .netrc file presents a significant security risk since it stores passwords in unencrypted form. Even if FTP is disabled, user accounts may have brought over .netrc files from other systems which could pose a risk to those systems.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ -d \"$dir\" ]; then file=\"$dir/.netrc\" if [ ! -h \"$file\" ] && [ -f \"$file\" ]; then echo \"User: \\\"$user\\\" file: \\\"$file\\\" exists\" fi fi done",
    "remediation": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user .netrc files and determine the action to be taken in accordance with site policy. The following script will remove .netrc files from interactive users' home directories #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $6 }'  /etc/passwd | while read -r dir; do if [ -d \"$dir\" ]; then file=\"$dir/.netrc\" [ ! -h \"$file\" ] && [ -f \"$file\" ] && rm -f \"$file\" fi done References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "iam_user_no_netrc_files",
      "compute_instance_no_netrc_files",
      "os_user_no_netrc_files",
      "system_account_no_netrc_files",
      "remote_access_no_netrc_files"
    ]
  },
  {
    "id": "6.2.16",
    "title": "Ensure no users have .rhosts files",
    "assessment": "Automated",
    "description": "While no .rhosts files are shipped by default, users can easily create them.",
    "rationale": "This action is only meaningful if .rhosts support is permitted in the file /etc/pam.conf . Even though the .rhosts files are ineffective if support is disabled in /etc/pam.conf , they may have been brought over from other systems and could contain information useful to an attacker for those other systems.",
    "audit": "Run the following script and verify no results are returned: #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $1 \" \" $6 }' /etc/passwd | while read -r user dir; do if [ -d \"$dir\" ]; then file=\"$dir/.rhosts\" if [ ! -h \"$file\" ] && [ -f \"$file\" ]; then echo \"User: \\\"$user\\\" file: \\\"$file\\\" exists\" fi fi done",
    "remediation": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user .rhosts files and determine the action to be taken in accordance with site policy. The following script will remove .rhosts files from interactive users' home directories #!/bin/bash awk -F: '($1!~/(halt|sync|shutdown|nfsnobody)/ && $7!~/^(\\/usr)?\\/sbin\\/nologin(\\/)?$/ && $7!~/(\\/usr)?\\/bin\\/false(\\/)?$/) { print $6 }' /etc/passwd | while read -r dir; do if [ -d \"$dir\" ]; then file=\"$dir/.rhosts\" [ ! -h \"$file\" ] && [ -f \"$file\" ] && rm -r \"$file\" fi done References: 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "profile_applicability": "•  Level 1 - Server",
    "references": "1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5",
    "function_names": [
      "compute_user_no_rhosts_files",
      "compute_user_rhosts_files_absent",
      "compute_user_rhosts_files_disabled",
      "compute_user_rhosts_files_restricted",
      "compute_user_rhosts_files_prohibited"
    ]
  }
]