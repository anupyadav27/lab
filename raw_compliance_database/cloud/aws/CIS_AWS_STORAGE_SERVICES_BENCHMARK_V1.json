[
  {
    "id": "1.1",
    "title": "AWS Storage Backups",
    "assessment": "Manual",
    "description": "AWS Storage Backups is a managed AWS Service that establishes high resiliency to your cloud resources. AWS Storage Backups are like making extra copies of your important stuff on Amazon's computers. It is an excellent strategy to ensure that the data and resources you use remain available in the event of unrecoverable damage or loss to your resources.",
    "rationale": "AWS Backups enable you to back up and restore all data lost during the attack,While AWS Storage Backups provide a level of security, there are numerous methods to fortify your backups, ensuring the protection of your data and services.",
    "audit": "",
    "remediation": null,
    "function_names": [
      "backup",
      "backup",
      "backup",
      "backup",
      "backup",
      "backup",
      "backup"
    ],
    "profile_applicability": "â€¢  Level 2",
    "function_specs": [
      {
        "function_name": "backup_plan_automatic_deletion_disabled",
        "comment": "Ensure backup plan rules do not automatically delete recovery points (no DeleteAfterDays lifecycle).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[].Lifecycle.DeleteAfterDays",
            "expected": "absent/null"
          }
        ]
      },
      {
        "function_name": "backup_plan_recovery_points_encrypted",
        "comment": "Ensure recovery points produced by the plan are encrypted (via vault KMS association or recovery point metadata).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:describe_backup_vault",
          "backup:list_recovery_points_by_backup_vault",
          "backup:describe_recovery_point"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "describe_backup_vault",
            "path": "KmsKeyId",
            "expected": "present/non-empty (vault uses KMS)"
          },
          {
            "client": "backup",
            "api": "list_recovery_points_by_backup_vault",
            "path": "RecoveryPoints[].EncryptionKeyArn",
            "expected": "present/non-empty (for sampled points)"
          }
        ]
      },
      {
        "function_name": "backup_plan_rules_defined",
        "comment": "Ensure at least one backup rule exists in the plan.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules",
            "expected": "array length >= 1"
          }
        ]
      },
      {
        "function_name": "backup_plan_min_retention_35d",
        "comment": "Ensure plan retention is at least 35 days.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[].Lifecycle.DeleteAfterDays",
            "expected": ">= 35 (if present)"
          }
        ]
      },
      {
        "function_name": "backup_vault_lock_configuration_enabled",
        "comment": "Backup Vault Lock (immutability) is enabled to prevent early deletion.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:describe_backup_vault"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "describe_backup_vault",
            "path": "MinRetentionDays",
            "expected": "> 0"
          },
          {
            "client": "backup",
            "api": "describe_backup_vault",
            "path": "LockDate",
            "expected": "present (vault lock configured)"
          }
        ]
      },
      {
        "function_name": "backup_vault_access_logging_enabled",
        "comment": "Notifications for backup events are enabled on the vault (SNS topic configured via Backup).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:get_backup_vault_notifications"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_vault_notifications",
            "path": "SNSTopicArn",
            "expected": "present/non-empty"
          },
          {
            "client": "backup",
            "api": "get_backup_vault_notifications",
            "path": "BackupVaultEvents[]",
            "expected": "includes relevant events (e.g., BACKUP_JOB_COMPLETED, BACKUP_JOB_FAILED)"
          }
        ]
      },
      {
        "function_name": "backup_vault_cross_region_replication_enabled",
        "comment": "Plan includes CopyActions to a vault in a different region.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[].CopyActions[].DestinationBackupVaultArn",
            "expected": "present and ARN region != current region"
          }
        ]
      },
      {
        "function_name": "backup_vault_cross_account_access_restricted",
        "comment": "Vault access policy does not allow cross-account principals (restrict to same account/Org).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:get_backup_vault_access_policy"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_vault_access_policy",
            "path": "Policy.Statement[].Principal.AWS",
            "expected": "does not contain '*' or external account ARNs; optional aws:PrincipalOrgID condition present"
          }
        ]
      },
      {
        "function_name": "backup_job_copy_actions_encrypted",
        "comment": "Copy actions are configured to a destination vault (replication present). Encryption of destination vault is implied and not verified cross-service here.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[].CopyActions[].DestinationBackupVaultArn",
            "expected": "present/non-empty"
          }
        ]
      },
      {
        "function_name": "backup_job_completion_notification_enabled",
        "comment": "Vault has notifications configured for job completion via Backup notifications.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:get_backup_vault_notifications"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_vault_notifications",
            "path": "SNSTopicArn",
            "expected": "present/non-empty"
          },
          {
            "client": "backup",
            "api": "get_backup_vault_notifications",
            "path": "BackupVaultEvents[]",
            "expected": "includes BACKUP_JOB_COMPLETED or equivalent"
          }
        ]
      }
    ]
  },
  {
    "id": "1.2",
    "title": "Ensure securing AWS Backups",
    "assessment": "Manual",
    "description": "As an AWS administrator, it's important to know what you're responsible for. You're responsible for keeping things safe in the cloud, which means taking care of the resources and data on AWS. Here's what you need to secure, according to AWS documentation: 1. Responsible for alert communication with AWS. 2. Managing access credentials for AWS resources. 3. Configuring backup plans according to organization policies. 4. Ensuring backup recovery capability. 5. Including AWS Backups in the organization's disaster recovery procedures. 6. Ensuring user awareness and familiarity with AWS Backups platform usage",
    "rationale": "AWS will send periodic emails regarding the status of your backups and any service issues. The administrator must address any communicated issues from AWS, such as billing problems or backup inactivity, and take necessary steps to resolve them.",
    "audit": "CREATING AN AWS BACKUP: Creating an AWS Backup involves selecting the desired data, specifying backup frequency, and choosing storage options. Below we'll walk through how to create and configure an AWS Backup instance. 1. Sign into AWS Console: To sign into the AWS Console 'https://console.aws.amazon.com/billing/home#/', users navigate to the AWS Management Console website and enter their credentials, including their username and password. 2. Access the AWS Backup Service Dashboard in the AWS Management Console: AWS Management Console and type \"Backup\" or navigate through the services menu to find the \"Storage\" category, where AWS Backup is listed. 3. Create Backup Plan: Choose \"Create backup plan\" from the options provided. You can either create a custom plan tailored to your requirements or option for a per-defined template offered by AWS",
    "remediation": "References: 1. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html",
    "function_names": [
      "backup",
      "backup",
      "backup",
      "backup",
      "backup"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html",
    "function_specs": [
      {
        "function_name": "backup_plan_config_compliant",
        "comment": "At least one backup plan exists with one or more rules and a defined schedule.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "list_backup_plans",
            "path": "BackupPlansList[]",
            "expected": "length >= 1"
          },
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[]",
            "expected": "length >= 1"
          },
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[].ScheduleExpression",
            "expected": "present/non-empty for at least one rule"
          }
        ]
      },
      {
        "function_name": "backup_recovery_capability_enabled",
        "comment": "Recent restore capability verified by at least one COMPLETED restore job in the compliance window (e.g., last 90 days).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_restore_jobs"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "list_restore_jobs",
            "path": "RestoreJobs[].Status",
            "expected": "includes COMPLETED within time window"
          }
        ]
      },
      {
        "function_name": "backup_disaster_recovery_included",
        "comment": "Disaster recovery is included by configuring cross-region CopyActions in at least one plan rule.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[].CopyActions[].DestinationBackupVaultArn",
            "expected": "present and references a different region"
          }
        ]
      },
      {
        "function_name": "backup_credentials_secure",
        "comment": "Backup vault access policies are restrictive (no wildcard or external principals).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:get_backup_vault_access_policy"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_vault_access_policy",
            "path": "Policy.Statement[].Principal.AWS",
            "expected": "does not contain '*' or external account ARNs; optional aws:PrincipalOrgID acceptable"
          }
        ]
      },
      {
        "function_name": "backup_alert_communication_configured",
        "comment": "Vault notifications are configured so backup events are communicated (SNS topic set).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_vaults",
          "backup:get_backup_vault_notifications"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_vault_notifications",
            "path": "SNSTopicArn",
            "expected": "present/non-empty"
          },
          {
            "client": "backup",
            "api": "get_backup_vault_notifications",
            "path": "BackupVaultEvents[]",
            "expected": "includes BACKUP_JOB_COMPLETED or BACKUP_JOB_FAILED"
          }
        ]
      },
      {
        "function_name": "backup_user_awareness_verified",
        "comment": "User awareness/training is a process control and requires manual verification.",
        "boto3_clients": [],
        "supporting_calls": [],
        "field_checks": []
      }
    ]
  },
  {
    "id": "1.3",
    "title": "Ensure to create backup template and name",
    "assessment": "Manual",
    "description": "To create a backup plan, select a template and specify a name for the plan. Additionally, define backup rules according to your requirements and then click on create backup option.",
    "rationale": "",
    "audit": "Backup Resources: Once you've made your backup plan, it's time to put it into action and start backing up your stuff. Let's start by backing up an S3 storage bucket. To back up Elastic Beanstalk instance stored on AWS S3, we'll need to tag its Amazon Resource Name (ARN) with a backup plan. In S3, go to \"properties\" to attach the backup plan to the resource: 1. Copy the ARN from the console: From the AWS Management Console, copy the ARN (Amazon Resource Name) associated with the Elastic Beanstalk instance. This unique identifier will be used to tag the resource for backup. 2. Assign the resource: o After copying the ARN, return to the AWS Management Console and access Amazon Backup. o Choose the backup plan recently created, then proceed to assign the resource you wish to backup, such as the S3 bucket containing the Elastic Beanstalk resource. o Finally, navigate to \"Resource Assignments\" to complete the process. Choose \"Assign Resources\" and provide a name for the assignment. For now, maintain the role as Default. In subsequent sections, we'll explore implementing custom IAM roles and policies for your backup operations. Select the resource(s) that you want to backup. You have the option to backup all your resources, but we're just going to back up the specific Elastic Beanstalk resource for now. The resources are now being backed up according to the schedule established by your organization.",
    "remediation": "The AWS backup vault serves as the storage location for your backups. It's crucial to manage access to these backups to prevent unauthorized access and ensure data security. References: 1. https://docs.aws.amazon.com/aws-backup/latest/devguide/how-it-works.html",
    "function_names": [
      "backup"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/aws-backup/latest/devguide/how-it-works.html",
    "function_specs": [
      {
        "function_name": "backup_plan_template_exists",
        "comment": "At least one backup plan exists (template-derived or custom).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "list_backup_plans",
            "path": "BackupPlansList[]",
            "expected": "length >= 1"
          }
        ]
      },
      {
        "function_name": "backup_plan_name_specified",
        "comment": "Backup plan has a non-empty name.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.BackupPlanName",
            "expected": "present/non-empty"
          }
        ]
      },
      {
        "function_name": "backup_plan_rules_defined",
        "comment": "Backup plan contains one or more backup rules.",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:get_backup_plan"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "get_backup_plan",
            "path": "BackupPlan.Rules[]",
            "expected": "length >= 1"
          }
        ]
      },
      {
        "function_name": "backup_plan_creation_completed",
        "comment": "Backup plan is active and has resources assigned (selections exist).",
        "boto3_clients": [
          "backup"
        ],
        "supporting_calls": [
          "backup:list_backup_plans",
          "backup:list_backup_selections"
        ],
        "field_checks": [
          {
            "client": "backup",
            "api": "list_backup_selections",
            "path": "BackupSelectionsList[]",
            "expected": "length >= 1 (for at least one plan)"
          }
        ]
      }
    ]
  },
  {
    "id": "1.4",
    "title": "Ensure to create AWS IAM Policies",
    "assessment": "Manual",
    "description": "AWS IAM policies, specify the desired permissions for accessing AWS resources and define the conditions under which those permissions are granted. Configure the appropriate policies to keep your resources secure.",
    "rationale": "Managing AWS IAM policies is crucial to safeguard your backups from unauthorized access, ensuring that only approved users can manipulate or view sensitive data.",
    "audit": "To create a role for AWS Backup, follow these steps: 1. Navigate to the \"IAM Dashboard\" in the AWS Console. 2. Select \"Roles\" from the left-hand menu. 3. Click on the \"Create Role\" button. 4. Choose \"AWS Service\" as the trusted entity. 5. Select \"AWS Backup\" as the service that will use this role. 6. Choose a policy to apply to the role or create a custom policy. 7. Review the role details and provide a meaningful name for the role. 8. Click on \"Create Role\" to finalize the creation of the role for AWS Backup.",
    "remediation": "AWS IAM policies, restricting access to backup resources, and implementing additional security measures to prevent future incidents. References: 1. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html",
    "function_names": [
      "iam",
      "iam",
      "iam_policy_conditions_required",
      "iam_policy_no_inline_policies",
      "iam_policy_versioned",
      "iam_policy_no_unused_policies",
      "iam_policy_no_root_account_access",
      "iam_policy_no_public_access"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html"
  },
  {
    "id": "1.5",
    "title": "Ensure to create IAM roles for Backup",
    "assessment": "Manual",
    "description": "An AWS Identity and Access Management (IAM) role is similar to a user, in that it is an AWS identity with permissions policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it.",
    "rationale": "While Service Linked Roles offer quick deployment, using default configurations isn't recommended for security best practices.",
    "audit": "To create a role for AWS Backup, follow these steps: 1. Navigate to the \"IAM Dashboard\" in the AWS Console. 2. Select \"Roles\" from the left-hand menu. 3. Click on the \"Create Role\" button. 4. Choose \"AWS Service\" as the trusted entity. 5. Select \"AWS Backup\" as the service that will use this role. 6. Choose a policy to apply to the role or create a custom policy. 7. Review the role details and provide a meaningful name for the role. 8. Click on \"Create Role\" to finalize the creation of the role for AWS Backup.",
    "remediation": "Assess your organization's needs to determine whether to utilize Service Linked Roles for AWS backups. Default Value: When using the AWS Backup console for the first time, you can choose to have AWS Backup create a default service role for you. This role has the permissions that AWS Backup needs to create and restore backups on your behalf. References: 1. https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked- roles.html",
    "function_names": [
      "iam",
      "iam_role_backup_policy_attached"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked- roles.html"
  },
  {
    "id": "1.6",
    "title": "Ensure AWS Backup with Service Linked Roles",
    "assessment": "Manual",
    "description": "AWS Service Linked Roles are IAM roles designed specifically for AWS Backup. These roles come with default configurations allowing access to all AWS resources by default.",
    "rationale": "While Service Linked Roles offer quick deployment, using default configurations isn't recommended for security best practices.",
    "audit": "Create service-linked role for AWS Backup: You don't need to create a service-linked role manually. AWS Backup automatically creates it when you list resources to back up, set up cross-account backup, or perform backups using the AWS Management Console, AWS CLI, or AWS API. If you delete this role, you can recreate it by following the same steps. AWS Backup will create it for you again when needed.",
    "remediation": "Assess your organization's needs to determine whether to utilize Service Linked Roles for AWS backups. References: 1. https://docs.aws.amazon.com/aws-backup/latest/devguide/using-service-linked- roles.html 2 Elastic Block Store (EBS) Amazon EBS is a block level file storage system that runs on EC2. EBS can be used as a hard drive that's mounted on an EC2 instance (virtual machine). EBS can store data as a standalone apart from EC2. This means that data can persist to the block storage service while an EC2 instance is offline. Out of the box EBS functions as an unformatted file system that needs to be configured and mounted on top of an EC2 instance. EBS can be used as both a storage and boot drive; for the purposes of this document, we will focus on EBS as a storage device. EBS comes with many different options to fit the specific needs of an application. EBS is most likely the right choice if you need quick access to read and write files to the cloud and you need these files to be stored long term. You can also rapidly unmount the file system from one EC2 instance and deploy it to another instance by using snapshots.",
    "function_names": [
      "iam_role_service_linked_exists",
      "backup",
      "backup"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/aws-backup/latest/devguide/using-service-linked- roles.html 2 Elastic Block Store (EBS) Amazon EBS is a block level file storage system that runs on EC2. EBS can be used as a hard drive that's mounted on an EC2 instance (virtual machine). EBS can store data as a standalone apart from EC2. This means that data can persist to the block storage service while an EC2 instance is offline. Out of the box EBS functions as an unformatted file system that needs to be configured and mounted on top of an EC2 instance. EBS can be used as both a storage and boot drive; for the purposes of this document, we will focus on EBS as a storage device. EBS comes with many different options to fit the specific needs of an application. EBS is most likely the right choice if you need quick access to read and write files to the cloud and you need these files to be stored long term. You can also rapidly unmount the file system from one EC2 instance and deploy it to another instance by using snapshots."
  },
  {
    "id": "2.1",
    "title": "Ensure creating EC2 instance with EBS",
    "assessment": "Manual",
    "description": "EBS are storage volumes that you attach to Amazon EC2 instances. After you attach a volume to an instance, you can use it in the same way you would use a local hard drive attached to a computer, for example to store files or to install applications.",
    "rationale": "",
    "audit": "Creating EC2 instance with Volume:- To create an EC2 instance with a volume in AWS, you can follow these general steps: 1. Initializing a Secure EC2 Instance: Navigate to the EC2 dashboard within your AWS console. Make sure you're in the region that's right for you. Select cLaunch Instance. 2. Naming the EC2 instance: Name your EC2 instance according to the proper naming convention set by your organization. 3. Configure the operating system: You can choose any operating system according to your needs. In this tutorial, Ubuntu is the OS of choice. 4. Create a key pair Next, create a key pair. You will need this to login your EC2 instance. We're going to log in via SSH. Select cCreate new key pair. Give your key a name, select RSA encryption, and select Open SSH. As you can see by the prompt, you will need to keep the private key that's generated secure on your local computer. This is how you will access your EC2 instance. Select cCreate key pair your secret key will start downloading as a .pem file. Add Storage: 1. Click \"Add New Volume\" to add a new volume. 2. Specify the volume type (e.g., General Purpose SSD, Provisioned IOPS SSD, Magnetic). 3. Set the size of the volume in GB minimum of 8GB. 4. You can add multiple volumes if needed.",
    "remediation": "References: 1. https://aws.amazon.com/ebs/",
    "function_names": [
      "ec2",
      "ec2"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://aws.amazon.com/ebs/"
  },
  {
    "id": "2.2",
    "title": "Ensure configuring Security Groups",
    "assessment": "Manual",
    "description": "Security groups are your first line of defense for the EC2 instance. A security group is a firewall that controls inbound and outbound traffic.",
    "rationale": "Security groups play a critical role in maintaining the security of your AWS resources. It is advisable to restrict traffic to only what is necessary for accessing your instance, thereby minimizing potential security risks.",
    "audit": "Open traffic for SSH, HTTP, and HTTPS. Make sure to allow traffic from anywhere, unless you will be accessing the instance from a secure workstation or server with a static IP address.",
    "remediation": null,
    "function_names": [
      "ec2_security_group_restrict_all_traffic",
      "ec2_security_group_no_unrestricted_ingress",
      "ec2_security_group_no_unrestricted_egress",
      "ec2_security_group_no_wildcard_ingress",
      "ec2_security_group_no_wildcard_egress",
      "ec2_security_group_no_ssh_public_access",
      "ec2_security_group_no_rdp_public_access",
      "ec2_security_group_no_icmp_public_access",
      "ec2_security_group_no_insecure_protocol_ingress",
      "ec2_security_group_no_insecure_protocol_egress",
      "ec2_security_group_no_unused_rules",
      "ec2_security_group_no_inline_rules",
      "ec2_security_group_no_duplicate_rules",
      "ec2_security_group_no_excessive_rules",
      "ec2_security_group_no_self_reference_rules"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "2.3",
    "title": "Ensure the proper configuration of EBS storage",
    "assessment": "Manual",
    "description": "All computer instances need to have a device on which to store files. EBS is built on top of EC2 instances as a block storage device.",
    "rationale": "Remember that we are working with cloud computing. Rather than purchasing and manually installing disk drives on a server, AWS allows you to virtually add storage using Elastic Block Store (EBS). Impact: Failure to properly configure EBS storage can lead to data loss, performance issues, increased costs, security vulnerabilities, and operational downtime. Ensuring correct configuration is crucial to maintain data integrity, efficiency, cost-effectiveness, security, and reliability.",
    "audit": "",
    "remediation": "1. Open the Amazon EC2 Console : Navigate to the EC2 Dashboard in the AWS Management Console. 2. Select Volumes : Under the \"Elastic Block Store\" section, select \"Volumes\". 3. Create Volume : o Click on \"Create Volume\". o Choose the volume type (e.g., General Purpose SSD (gp2), Provisioned IOPS SSD (io1), etc.). o Specify the size and availability zone. o Optionally, configure additional settings such as IOPS, encryption, and tags. 4. Attach Volume to Instance : o Select the volume you created. o Click on \"Actions\" and choose \"Attach Volume\". o Select the instance to which you want to attach the volume and specify the device name. 5. Format and Mount the Volume (on the instance): o Connect to your instance using SSH. o List available disks using the command: lsblk. o Format the new volume (e.g., sudo mkfs -t ext4 /dev/xvdf for ext4 filesystem). o Create a mount point (e.g., sudo mkdir /mnt/data). o Mount the volume (e.g., sudo mount /dev/xvdf /mnt/data). 6. Configure Automatic Mounting (optional) : o Edit the /etc/fstab file to add an entry for the new volume to ensure it mounts automatically on reboot. o Example entry: /dev/xvdf /mnt/data ext4 defaults,nofail 0 2. By following these steps, you can effectively configure and manage EBS storage for your AWS instances.",
    "function_names": [
      "ebs_volume_encryption_enabled",
      "ebs_volume_delete_on_termination_disabled",
      "ebs_volume_multi_attach_disabled",
      "ebs_volume_snapshot_permissions_restricted",
      "ebs_volume_optimized_type_enabled",
      "ebs_volume_backup_policy_enabled",
      "ebs_volume_min_size_gb_configured",
      "ebs_volume_iops_provisioned",
      "ebs_volume_throughput_optimized_enabled"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Failure to properly configure EBS storage can lead to data loss, performance issues, increased costs, security vulnerabilities, and operational downtime. Ensuring correct configuration is crucial to maintain data integrity, efficiency, cost-effectiveness, security, and reliability."
  },
  {
    "id": "2.4",
    "title": "Ensure the creation of a new volume",
    "assessment": "Manual",
    "description": "Leave the root volume unchanged and create a new volume. To ensure the security of the instance and prevent data loss, select \"no\" under the \"delete on termination\" option and encrypt your volume using AWS KMS. A default key is available for encrypting the volume.",
    "rationale": "By leaving the root volume unchanged and creating a new volume, you separate critical data from the operating system. Selecting \"no\" for the \"delete on termination\" option ensures that data on the new volume is not automatically deleted when the instance is terminated, protecting against accidental data loss. Encrypting the volume using AWS KMS adds an additional layer of security, safeguarding the data against unauthorized access. The use of a default key for encryption simplifies the process while maintaining strong security measures. Impact: Not following these steps can lead to data loss, security risks, operational disruptions, and prolonged recovery times. Setting \"delete on termination\" to \"no\" prevents data deletion upon instance termination, while encrypting the volume with AWS KMS protects against unauthorized access. Storing critical data separately from the root volume ensures operational continuity and easier recovery.",
    "audit": "To audit this configuration in AWS, follow these steps: 1. Access the AWS Management Console : Log in to your AWS account and navigate to the AWS Management Console. 2. Review EBS Volumes : o Go to the EC2 Dashboard and select \"Volumes\" under the \"Elastic Block Store\" section. o Check the properties of each volume to ensure that the root volume is unchanged and new volumes are created as needed. 3. Check \"Delete on Termination\" Setting : o In the \"Volumes\" section, select each volume and click on the \"Actions\" button. o Select \"Modify Volume\" and ensure that \"Delete on Termination\" is set to \"no\" for the critical volumes. o Alternatively, go to the \"Instances\" section, select an instance, click on the \"Actions\" button, choose \"Instance Settings,\" and then \"Change Termination Protection.\" 4. Verify Encryption : o In the \"Volumes\" section, check the \"Encrypted\" column to confirm that the volumes are encrypted. o For detailed information, select a volume and view its details to ensure it is encrypted using AWS KMS. 5. Review IAM Policies : o Navigate to the IAM Dashboard and review the policies attached to users, groups, and roles to ensure they have appropriate permissions to create, modify, and encrypt EBS volumes. 6. Use AWS Config : o Enable AWS Config to continuously monitor and record AWS resource configurations. o Create AWS Config rules to check for compliance with best practices, such as ensuring volumes are encrypted and \"Delete on Termination\" is set to \"no.\" 7. Generate Reports : o Use AWS CloudTrail to review logs of API calls made to EBS volumes, ensuring compliance with the required configurations. o Generate compliance reports using AWS Config and AWS CloudTrail to provide evidence of adherence to best practices. By following these steps, you can effectively audit your EBS configurations to ensure data security, integrity, and operational reliability.",
    "remediation": "1. Volume Configurations : o After configuring your volume, ensure the settings meet your requirements. To secure your file system and prevent data loss, verify that the \"Delete on Termination\" option is set to \"no,\" the volume is encrypted, and the KMS key is correctly specified. For this EBS instance, we are using the default KMS key. 2. Availability Zone Consistency : o Ensure your EBS volume is in the same Availability Zone as your EC2 instance. An EBS volume can only be attached to an EC2 instance within the same Availability Zone. You can mount and unmount EBS volumes to any EC2 instance within the same zone as needed.",
    "function_names": [
      "ec2_volume_delete_on_termination_disabled",
      "ec2_volume_kms_encryption_enabled",
      "ec2_volume_root_unchanged",
      "ec2_volume_new_creation_required"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not following these steps can lead to data loss, security risks, operational disruptions, and prolonged recovery times. Setting \"delete on termination\" to \"no\" prevents data deletion upon instance termination, while encrypting the volume with AWS KMS protects against unauthorized access. Storing critical data separately from the root volume ensures operational continuity and easier recovery."
  },
  {
    "id": "2.5",
    "title": "Ensure creating snapshots of EBS volumes",
    "assessment": "Manual",
    "description": "A snapshot is a backup of your EBS volume that captures its state at a specific point in time, storing only the data changes since the last snapshot to optimize storage costs and speed. Snapshots are crucial for data recovery, creating new EBS volumes, and replicating data across AWS regions for disaster recovery and high availability. Restoring from a snapshot allows you to create a new EBS volume and attach it to an EC2 instance in the same availability zone, ensuring data integrity and accessibility.",
    "rationale": "The rationale behind using EBS snapshots is to ensure efficient and cost-effective data backup and recovery. By capturing only the data changes since the last snapshot, storage costs are minimized and the backup process is expedited. Snapshots are essential for maintaining data integrity, facilitating quick recovery, and enabling seamless data replication across regions, thereby enhancing disaster recovery capabilities and operational resilience. Impact: Not utilizing EBS snapshots can lead to significant risks and drawbacks. Without snapshots, data recovery becomes more complex and time-consuming, increasing the risk of prolonged downtime in the event of data loss or system failure. Additionally, the absence of incremental backups can lead to higher storage costs and inefficient use of resources. The lack of data replication across regions can severely compromise disaster recovery efforts, making it challenging to maintain high availability and operational continuity. Overall, failing to use snapshots undermines data integrity, security, and the ability to quickly restore critical information.",
    "audit": "To audit the use of EBS snapshots in AWS, follow these steps: 1. Access the AWS Management Console : o Log in to your AWS account and navigate to the AWS Management Console. 2. Review EBS Snapshots : o Go to the EC2 Dashboard and select \"Snapshots\" under the \"Elastic Block Store\" section. o Check the list of snapshots to ensure regular backups are being created for all critical volumes. 3. Verify Snapshot Policies : o Ensure that snapshot lifecycle policies are in place and configured correctly. o Go to the \"Lifecycle Manager\" under the EC2 Dashboard and review policies for automated snapshot creation and retention. 4. Check Snapshot Status and Details : o Review the status of each snapshot to ensure they are completed successfully. o Verify the details of snapshots, such as description, creation time, and the volume ID associated with each snapshot. 5. Inspect IAM Policies and Permissions : o Navigate to the IAM Dashboard and review the policies attached to users, groups, and roles. o Ensure that only authorized personnel have permissions to create, delete, and manage snapshots. 6. Use AWS Config Rules : o Enable AWS Config to continuously monitor and record AWS resource configurations. o Create AWS Config rules to check for compliance with best practices, such as ensuring snapshots are created regularly and are not older than a specific period. 7. Review AWS CloudTrail Logs : o Use AWS CloudTrail to review logs of API calls related to EBS snapshots. o Ensure that all snapshot activities are logged and can be traced back to authorized users and roles. 8. Generate Reports : o Utilize AWS Config and AWS CloudTrail to generate compliance and activity reports. o Review these reports to ensure adherence to snapshot policies and identify any anomalies or unauthorized activities. By following these steps, you can effectively audit the use of EBS snapshots to ensure data integrity, security, and compliance with best practices.",
    "remediation": "To create an EBS snapshot on AWS, follow these steps: 1. Access the AWS Management Console : o Log in to your AWS account and navigate to the AWS Management Console. 2. Navigate to the EC2 Dashboard : o In the AWS Management Console, select \"EC2\" from the services menu to open the EC2 Dashboard. 3. Select the Volume : o In the left-hand navigation pane, under \"Elastic Block Store,\" click on \"Volumes.\" o Find the volume you want to snapshot from the list and select it by clicking the checkbox next to it. 4. Create a Snapshot : o With the volume selected, click on the \"Actions\" button at the top of the page. o From the dropdown menu, select \"Create Snapshot.\" 5. Configure the Snapshot : o In the \"Create Snapshot\" dialog box, provide a description for the snapshot. This helps identify the snapshot later. o Review the volume ID to ensure it is the correct volume. 6. Initiate the Snapshot Creation : o Click the \"Create Snapshot\" button to start the snapshot creation process. 7. Monitor the Snapshot : o Navigate to the \"Snapshots\" section under \"Elastic Block Store\" in the left- hand navigation pane. o Find your snapshot in the list and monitor its status. The snapshot creation process might take some time, depending on the size of the volume and the amount of data. 8. Verify Completion : o Once the snapshot status changes to \"completed,\" it indicates that the snapshot has been successfully created and is available for use. By following these steps, you can create an EBS snapshot to ensure you have a backup of your volume at a specific point in time. References: 1. https://docs.aws.amazon.com/ebs/latest/userguide/ebs-creating-snapshot.html",
    "function_names": [
      "ebs_volume_snapshots_frequency_weekly",
      "ebs_volume_snapshots_recent_over_30d",
      "ebs_volume_snapshots_replication_enabled",
      "ebs_volume_snapshots_encryption_enabled",
      "ebs_volume_snapshots_retention_policy_configured",
      "ebs_volume_snapshots_cross_region_replication_enabled"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not utilizing EBS snapshots can lead to significant risks and drawbacks. Without snapshots, data recovery becomes more complex and time-consuming, increasing the risk of prolonged downtime in the event of data loss or system failure. Additionally, the absence of incremental backups can lead to higher storage costs and inefficient use of resources. The lack of data replication across regions can severely compromise disaster recovery efforts, making it challenging to maintain high availability and operational continuity. Overall, failing to use snapshots undermines data integrity, security, and the ability to quickly restore critical information.",
    "references": "1. https://docs.aws.amazon.com/ebs/latest/userguide/ebs-creating-snapshot.html"
  },
  {
    "id": "2.6",
    "title": "Ensure Proper IAM Configuration for EC2 Instances",
    "assessment": "Manual",
    "description": "IAM, or Identity and Access Management, is a vital security service used to control and manage access to AWS resources, ensuring only authorized users and services can interact with them. It allows you to create users and groups, set permissions, enforce multi-factor authentication, and implement least privilege principles to enhance security and compliance.",
    "rationale": "The rationale behind using IAM is to enhance security by controlling and managing access to AWS resources, ensuring that only authorized users and services can interact with them. This minimizes the risk of unauthorized access and potential security breaches, while also allowing for the implementation of best practices such as multi- factor authentication and least privilege principles, which further strengthen the security and compliance of your AWS environment. Impact: Not implementing IAM properly can lead to significant security vulnerabilities, including unauthorized access to AWS resources, data breaches, and potential loss of sensitive information. Without IAM, it is challenging to enforce access controls, monitor user activity, and implement security best practices such as multi-factor authentication and least privilege principles. This can result in increased risk of malicious attacks, operational disruptions, non-compliance with regulatory requirements, and substantial financial damage.",
    "audit": "1. Access the AWS Management Console : o Log in to your AWS account and navigate to the AWS Management Console. 2. Review IAM Users and Roles : o Go to the IAM Dashboard and select \"Users\" to review all user accounts. o Check each user for appropriate permissions, MFA enablement, and adherence to the principle of least privilege. o Similarly, review the \"Roles\" section to ensure roles have the correct permissions and are assigned appropriately. 3. Check IAM Policies : o In the IAM Dashboard, navigate to \"Policies\" and review both AWS managed and customer-managed policies. o Ensure that policies follow the principle of least privilege and do not grant excessive permissions. 4. Analyze IAM Groups : o Review the groups in the IAM Dashboard under \"Groups.\" o Ensure that users are grouped appropriately and that groups have suitable permissions. 5. Examine MFA Settings : o Verify that Multi-Factor Authentication (MFA) is enabled for all users with console access. o In the IAM Dashboard, click on \"Users\" and check the \"Security credentials\" tab for each user to confirm MFA setup. 6. Audit IAM Activity : o Use AWS CloudTrail to review logs of IAM activities, including user logins, policy changes, and other management activities. o Ensure that all IAM activities are logged and can be traced back to authorized users. 7. Implement AWS Config Rules : o Enable AWS Config to continuously monitor IAM configurations. o Create and apply AWS Config rules that check for compliance with best practices, such as ensuring all users have MFA enabled and policies are not overly permissive. 8. Generate IAM Reports : o Use AWS IAM Access Analyzer to identify permissions granted to resources that can be accessed from outside your AWS account. o Generate IAM credential reports from the IAM Dashboard to review the status of all IAM users, including when their passwords were last used and when their access keys were last rotated. 9. Conduct Regular Reviews : o Schedule regular audits to review IAM configurations and policies. o Periodically update and refine IAM policies and permissions to ensure ongoing compliance and security.",
    "remediation": "1. Restrict Overly Permissive Policies : o Identify and modify any IAM policies that are overly permissive. Update policies to grant the least privilege necessary for users to perform their tasks. o Use IAM policy simulator to test and validate the changes to ensure they do not disrupt operations. 2. Enable Multi-Factor Authentication (MFA) : o For all users with console access, enable MFA. This adds an additional layer of security. o Navigate to the IAM Dashboard, select \"Users,\" and enable MFA under the \"Security credentials\" tab for each user. 3. Rotate Access Keys : o Regularly rotate access keys for IAM users to reduce the risk of compromised credentials. o In the IAM Dashboard, select \"Users,\" go to the \"Security credentials\" tab, and create new access keys. Then, disable and delete old access keys after confirming the new keys are functioning correctly. 4. Remove Unnecessary Users and Roles : o Delete any IAM users or roles that are no longer needed to minimize potential security risks. o Review each user and role, and remove those that are inactive or no longer required. 5. Implement Role-Based Access Control (RBAC) : o Group users by their roles and assign permissions based on job functions. o Use IAM groups to manage permissions collectively rather than individually for each user. 6. Regularly Review and Update IAM Policies : o Set up a regular schedule to review and update IAM policies to ensure they remain aligned with security best practices and organizational changes. o Use AWS Config and AWS Config Rules to continuously monitor policy changes and ensure compliance. 7. Enable AWS CloudTrail and AWS Config : o Ensure that AWS CloudTrail is enabled to log all IAM activities. Configure it to capture and analyze logs for unauthorized access and policy changes. o Enable AWS Config to continuously monitor IAM resource configurations and compliance with best practices. 8. Conduct Security Awareness Training : o Provide regular security training for all users to educate them on best practices for using IAM and the importance of security measures like MFA and least privilege access. 9. Implement IAM Access Analyzer : o Use IAM Access Analyzer to identify and remediate permissions that allow external access to your resources. o Regularly review the findings and adjust permissions to ensure that only the necessary external access is granted. References: 1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon- ec2.html",
    "function_names": [
      "iam",
      "iam_instance_metadata_service_requires_token",
      "iam_instance_metadata_service_requires_imds_v2",
      "iam_instance_metadata_service_requires_hop_limit",
      "iam_instance_metadata_service_requires_session_token",
      "iam_instance_metadata_service_requires_min_tls_1_2",
      "iam_instance_metadata_service_requires_secure_transport",
      "iam_instance_metadata_service_requires_secure_headers"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not implementing IAM properly can lead to significant security vulnerabilities, including unauthorized access to AWS resources, data breaches, and potential loss of sensitive information. Without IAM, it is challenging to enforce access controls, monitor user activity, and implement security best practices such as multi-factor authentication and least privilege principles. This can result in increased risk of malicious attacks, operational disruptions, non-compliance with regulatory requirements, and substantial financial damage.",
    "references": "1. https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon- ec2.html"
  },
  {
    "id": "2.7",
    "title": "Ensure creating IAM User",
    "assessment": "Manual",
    "description": "IAM users are individuals whose accounts have been created by the AWS administrator, providing them access to specific AWS resources. These users have undergone identity verification with your organization, ensuring that only authorized personnel can manage and interact with your AWS environment.",
    "rationale": "The purpose of creating IAM users and verifying their identities with your organization is to ensure that only authorized individuals have access to AWS resources, enhancing security and preventing unauthorized access. This practice helps maintain control over your AWS environment, ensuring that sensitive data and critical operations are managed by trusted and validated personnel. Impact: Not creating IAM users and verifying their identities can lead to unauthorized access to your AWS resources, increasing the risk of security breaches and data leaks. This lack of control can result in compromised sensitive data, unauthorized changes to critical systems, and overall reduced security posture, potentially causing significant operational and financial damage to your organization.",
    "audit": "1. Access the AWS Management Console : o Log in to your AWS account and navigate to the AWS Management Console. 2. Review IAM Users : o Go to the IAM Dashboard and select \"Users.\" o Check the list of IAM users to ensure that only authorized users are present. 3. Check User Details : o For each user, click on their name to view their details. o Verify the \"User ARN\" and ensure that the user was created by an authorized administrator. o Check the \"Security credentials\" tab to see if Multi-Factor Authentication (MFA) is enabled for added security. 4. Verify Identity Policies : o Review the policies attached to each user to ensure they are appropriate for the user's role. o Check that permissions follow the principle of least privilege, granting only the necessary access. 5. Monitor Login Activity : o Use AWS CloudTrail to review login activities for each IAM user. o Check for any unusual login patterns or unauthorized access attempts. 6. Use AWS IAM Access Analyzer : o Enable IAM Access Analyzer to identify any IAM resources shared outside your AWS account. o Review findings to ensure that only verified and authorized users have access to your resources. 7. Generate IAM Credential Reports : o In the IAM Dashboard, go to \"Credential reports\" and generate a report. o Review the report for details on all IAM users, including their access key age, password age, and MFA status. 8. Implement AWS Config Rules : o Enable AWS Config to continuously monitor IAM configurations. o Create and apply AWS Config rules to check for compliance with identity verification and user management best practices. 9. Review IAM Roles and Groups : o Ensure that roles and groups are properly configured and assigned only to authorized users. o Verify that roles have the correct trust relationships and that group memberships are appropriate for the user's responsibilities. 10. Schedule Regular Audits : o Set up regular intervals to audit IAM users and their access rights. o Keep records of audit findings and remediation actions to maintain a secure and compliant AWS environment.",
    "remediation": "1. Remove Unauthorized Users : o Go to the IAM Dashboard, select \"Users,\" and review the list of users. o Identify any unauthorized or unverified users and delete their accounts to prevent unauthorized access. 2. Enable Multi-Factor Authentication (MFA) : o For each IAM user, go to the \"Security credentials\" tab and enable MFA. o Ensure all users have MFA configured to enhance security and reduce the risk of unauthorized access. 3. Update User Policies : o Review the policies attached to each IAM user. o Modify policies to follow the principle of least privilege, ensuring users have only the permissions necessary for their role. o Remove any overly permissive policies that could lead to security risks. 4. Rotate Access Keys : o For IAM users with long-lived access keys, create new keys and update the applications or services using them. o Delete the old access keys to reduce the risk of compromised credentials. o Encourage regular rotation of access keys as a security best practice. 5. Review and Correct IAM Roles and Groups : o Ensure IAM roles are assigned only to authorized users and that trust relationships are properly configured. o Check group memberships and remove users who should not be part of specific groups. o Update role policies to adhere to the principle of least privilege. 6. Configure AWS IAM Access Analyzer : o Enable IAM Access Analyzer to continuously monitor and analyze access to your IAM resources. o Address any findings related to unauthorized or overly broad access permissions. 7. Implement and Enforce IAM Policies : o Create and enforce organizational IAM policies that require identity verification for all users. o Use AWS Organizations and Service Control Policies (SCPs) to enforce these policies across all accounts within your organization. 8. Enable AWS Config and Create Compliance Rules : o Enable AWS Config to monitor IAM configurations and compliance. o Create AWS Config rules to ensure all users have MFA enabled, policies adhere to least privilege, and access keys are rotated regularly. 9. Conduct Regular Training : o Provide regular security awareness training for all users to emphasize the importance of secure IAM practices. o Educate users on how to properly use IAM features and the significance of identity verification. 10. Schedule Regular Reviews and Audits : o Establish a schedule for regular audits of IAM configurations and access controls. o Document findings and remediation actions taken during each audit. o Continuously improve your IAM practices based on audit results and evolving security threats. References: 1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html",
    "function_names": [
      "iam_user_identity_verified",
      "iam_user_authorized_access",
      "iam",
      "iam",
      "iam",
      "iam",
      "iam",
      "iam_user_password_policy_compliant",
      "iam_user_permissions_least_privilege"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not creating IAM users and verifying their identities can lead to unauthorized access to your AWS resources, increasing the risk of security breaches and data leaks. This lack of control can result in compromised sensitive data, unauthorized changes to critical systems, and overall reduced security posture, potentially causing significant operational and financial damage to your organization.",
    "references": "1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html"
  },
  {
    "id": "2.8",
    "title": "Ensure the Creation of IAM Groups",
    "assessment": "Manual",
    "description": "IAM Groups are collections of users that share the same permissions for accessing AWS resources. For instance, you can create a group named \"Administrators,\" which includes users who require full access to your AWS environment. This simplifies permission management by assigning common access policies to all members of the group.",
    "rationale": "IAM groups in AWS simplify permission management by grouping users with similar access needs and applying common access policies, reducing administrative overhead and enhancing security through the principle of least privilege. This approach ensures consistency, scalability, and ease of auditing, strengthening the overall security posture of the AWS environment.",
    "audit": "1. Enable AWS CloudTrail : o Navigate to the AWS Management Console and open the CloudTrail service. o Create a new trail or ensure that an existing trail is configured to capture API activity in your AWS account. o Verify that CloudTrail is recording events related to IAM actions, including changes to IAM groups. 2. Review CloudTrail Logs : o Access the CloudTrail console and navigate to the Event History or Insights section. o Filter the logs to focus on IAM-related events, such as CreateGroup, AddUserToGroup, RemoveUserFromGroup, and PutGroupPolicy. o Analyze the logs to track changes made to IAM groups, including user additions/removals and modifications to group policies. 3. Utilize AWS Config : o Open the AWS Config console and ensure that AWS Config is enabled for your AWS account. o Set up AWS Config rules to monitor IAM configurations, including IAM groups. o Configure rules to check for compliance with security standards or organizational policies regarding IAM group settings and permissions. 4. Check IAM Console : o Access the IAM console in the AWS Management Console. o Navigate to the \"Groups\" section to view a list of IAM groups in your account. o Review the details of each group, including its members and attached policies, to ensure they align with your security requirements.",
    "remediation": "1. CloudTrail and AWS Config Configuration : o If CloudTrail or AWS Config is not enabled, configure them to capture and monitor IAM activities and configurations respectively. Enable logging and set up appropriate rules to track IAM group changes and ensure compliance. 2. Review CloudTrail Logs for Anomalies : o Regularly review CloudTrail logs to identify any unauthorized or unexpected changes to IAM groups. o Investigate any anomalies detected in the logs, such as unauthorized user additions or policy modifications, and take appropriate action to rectify them. 3. AWS Config Remediation Rules : o Define AWS Config rules to automatically detect non-compliant IAM group configurations. o Configure remediation actions within AWS Config to automatically revert any deviations from the desired IAM group settings back to the compliant state. 4. IAM Group Cleanup : o Periodically review IAM groups to ensure they are still necessary and relevant. o Remove any unused or obsolete IAM groups to reduce the attack surface and simplify permission management. 5. Permissions Review : o Regularly review the permissions assigned to IAM groups to ensure they follow the principle of least privilege. o Remove any excessive permissions or policies that are not required for the group's intended purpose. 6. Security Best Practices : o Implement security best practices for IAM, such as enforcing multi-factor authentication (MFA) for privileged IAM users and regularly rotating access keys. o Train IAM administrators and users on security best practices to prevent inadvertent misconfigurations and unauthorized access. 7. Documentation and Monitoring : o Document IAM group configurations, policies, and access controls to maintain an audit trail and facilitate future audits. o Set up monitoring alerts to notify administrators of any suspicious activities related to IAM groups. References: 1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html",
    "function_names": [
      "iam",
      "iam_group_user_assigned"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html"
  },
  {
    "id": "2.9",
    "title": "Ensure Granular Policy Creation",
    "assessment": "Manual",
    "description": "Granular policies are meticulously tailored to AWS resources, ensuring precision in access control measures.",
    "rationale": "Emphasizing granular policies in AWS ensures that access control measures are precisely aligned with the requirements of each resource, bolstering security and minimizing unauthorized access. By tailoring policies to specific resources, organizations can adhere more closely to the principle of least privilege, mitigating risks and maintaining compliance with regulatory standards.",
    "audit": "1. Review IAM Policies : o Access the IAM console in the AWS Management Console. o Navigate to the \"Policies\" section to view all IAM policies. o Examine each policy to ensure they are finely tuned and specific to the resources they are intended to control access to. 2. Utilize AWS Config : o Open the AWS Config console and ensure that AWS Config is enabled for your AWS account. o Set up Config rules to monitor IAM policies for granularity. o Configure rules to detect policies that are overly broad or provide unnecessary permissions. 3. CloudTrail Analysis : o Access the CloudTrail console and review the logs. o Look for API calls related to IAM policy modifications. o Analyze the logs to ensure that policy changes align with the principles of granular access control. 4. Manual Review : o Conduct manual reviews of IAM policies and their associated resources. o Verify that policies are scoped to specific resources and actions, rather than providing blanket permissions. 5. Automated Scanning : o Utilize third-party AWS security tools that offer automated scanning and analysis of IAM policies for granularity. o Configure these tools to regularly scan and identify any policies that may not adhere to granular access control principles. 6. Continuous Monitoring : o Implement continuous monitoring solutions to track changes to IAM policies in real-time. o Set up alerts to notify administrators of any policy modifications that may deviate from granular access control best practices.",
    "remediation": "1. Policy Refinement : o Review existing IAM policies to identify those that are overly broad or lack granularity. o Refine these policies to restrict permissions to only the resources and actions necessary for each user or group. 2. IAM Policy Simulator : o Utilize the IAM Policy Simulator in the AWS Management Console to test the effectiveness of policy changes. o Simulate various access scenarios to ensure that policies are granting the intended level of access without unintended consequences. 3. Access Reviews : o Conduct regular access reviews to ensure that IAM policies remain aligned with the principle of least privilege. o Identify and remove any unnecessary permissions or policies that grant excessive access to resources. 4. AWS Config Remediation : o Configure AWS Config rules to automatically remediate non-compliant IAM policies. o Set up remediation actions to adjust policies to adhere to granular access control principles automatically. 5. Employee Training : o Provide training and guidance to IAM administrators on best practices for crafting granular policies. o Ensure that administrators understand the importance of restricting permissions to only what is necessary for each user or group. 6. Monitoring and Alerting : o Implement continuous monitoring solutions to detect and alert on any deviations from granular access control policies. o Set up alerts to notify administrators of any unauthorized changes to IAM policies in real-time. 7. Documentation and Documentation : o Document changes made to IAM policies and keep records of policy adjustments. o Maintain up-to-date documentation on IAM policies and access controls for reference during audits and compliance assessments. References: 1. https://docs.aws.amazon.com/tag-editor/latest/userguide/tags-in-iam- policies.html",
    "function_names": [
      "iam",
      "iam",
      "iam_policy_explicit_actions",
      "iam_policy_no_full_access",
      "iam_policy_restricted_arns"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/tag-editor/latest/userguide/tags-in-iam- policies.html"
  },
  {
    "id": "2.10",
    "title": "Ensure Resource Access via Tag-based Policies",
    "assessment": "Manual",
    "description": "For optimal granularity in EC2 access, configuring IAM policies via tags proves highly effective. This involves editing the JSON text editor to specify access permissions based on specific tags. In the provided example, I'm granting the \"developers\" group access exclusively to the newly created EC2 image, as illustrated in the attached screenshot depicting the policy creation process.",
    "rationale": "Implementing IAM policies based on tags in EC2 enables administrators to finely tailor access control, granting permissions dynamically according to resource attributes. This approach enhances security and scalability by aligning access rights with specific resource requirements while minimizing manual intervention.",
    "audit": "1. Review IAM Policies : o Access the IAM console in the AWS Management Console. o Navigate to the \"Policies\" section and review policies associated with EC2 resources. o Ensure that policies utilize condition keys related to EC2 tags for granting access. 2. IAM Policy Simulator : o Utilize the IAM Policy Simulator to simulate access scenarios based on EC2 tags. o Test various tag-based policy configurations to verify that access is granted or denied appropriately. 3. CloudTrail Analysis : o Access the CloudTrail console and review logs related to IAM policy changes. o Look for API calls related to modifications of policies using tag-based conditions. 4. AWS Config Rules : o Configure AWS Config rules to monitor IAM policies for tag-based conditions. o Set up rules to detect policies that do not include tag-based conditions or are overly permissive. 5. Manual Review : o Manually inspect IAM policies to ensure they include tag-based conditions where applicable. o Verify that policies accurately reflect the intended access control based on EC2 resource tags. 6. Automated Scanning : o Utilize third-party AWS security tools that offer automated scanning and analysis of IAM policies for tag-based conditions. o Configure these tools to regularly scan IAM policies and identify any deviations from best practices. 7. Continuous Monitoring : o Implement continuous monitoring solutions to track changes to IAM policies in real-time. o Set up alerts to notify administrators of any unauthorized modifications or policy changes that do not adhere to tag-based access control principles.",
    "remediation": "1. Policy Adjustment : o Review existing IAM policies associated with EC2 resources to ensure they include tag-based conditions where applicable. o Modify policies to incorporate tag-based conditions for granular access control, ensuring that access is granted or denied based on resource attributes. 2. IAM Policy Simulator Validation : o Utilize the IAM Policy Simulator to validate the effectiveness of policy adjustments. o Test various access scenarios to verify that policies accurately reflect the intended access control based on EC2 resource tags. 3. AWS Config Remediation : o Configure AWS Config rules to automatically remediate IAM policies that do not include tag-based conditions. o Set up remediation actions to adjust policies to adhere to tag-based access control principles automatically. 4. Employee Training : o Provide training to IAM administrators on best practices for crafting IAM policies based on tags. o Ensure that administrators understand the importance of utilizing tag- based conditions for granular access control in EC2. 5. Monitoring and Alerting : o Implement continuous monitoring solutions to detect and alert on any deviations from tag-based access control policies. o Set up alerts to notify administrators of any unauthorized modifications or policy changes that do not adhere to tag-based access control principles. 6. Documentation and Documentation : o Document changes made to IAM policies to include tag-based conditions. o Maintain up-to-date documentation on IAM policies and access controls for reference during audits and compliance assessments.",
    "function_names": [
      "iam_policy_tag_based_access",
      "iam_policy_ec2_tag_restriction",
      "iam_policy_resource_tag_condition",
      "ec2_image_tag_based_access",
      "iam_policy_tag_granularity_enabled",
      "iam_policy_tag_restriction_applied",
      "ec2_resource_tag_based_permissions",
      "iam_policy_tag_condition_required"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "2.11",
    "title": "Ensure Secure Password Policy Implementation",
    "assessment": "Manual",
    "description": "Password policies outline the appropriate parameters for password configuration within an organization.",
    "rationale": "Clear password policies provide essential guidelines for maintaining strong authentication practices, reducing the risk of unauthorized access and data breaches within an organization. By enforcing requirements for complex passwords and regular updates, these policies help bolster cybersecurity defenses and ensure compliance with industry standards and regulations.",
    "audit": "1. Review IAM Policies : o Access the IAM console in the AWS Management Console. o Navigate to the \"Password Policy\" section to review the current password policy settings. o Ensure that the password policy aligns with industry best practices and organizational security requirements, including parameters such as minimum length, complexity requirements, and password expiration. 2. AWS Config Rules : o Configure AWS Config rules to monitor IAM password policies. o Set up rules to check for compliance with password policy requirements, such as minimum length, complexity, and expiration settings. o Use AWS Config to continuously assess the configuration of IAM password policies and identify any non-compliant settings. 3. CloudTrail Analysis : o Access the CloudTrail console and review logs related to IAM password policy changes. o Look for API calls related to modifications of password policy settings. o Analyze the logs to ensure that password policy changes are authorized and adhere to organizational security standards. 4. Manual Review : o Manually inspect the IAM password policy settings to verify compliance with security requirements. o Check for parameters such as minimum password length, complexity requirements (e.g., uppercase, lowercase, special characters), and password expiration settings.",
    "remediation": "1. Revise and Update Password Policies : o Navigate to the IAM dashboard in the AWS Management Console. o Go to the \"Account settings\" section to review and adjust the password policy. o Strengthen the policy by setting requirements for password length, complexity (including uppercase, lowercase, numbers, and special characters), and rotation policies. 2. Enforce Password Changes : o If the audit reveals passwords that do not comply with the updated policy, require users to change their passwords immediately. o Implement mandatory password updates at regular intervals to ensure ongoing compliance with the policy. 3. Enable AWS Config for Continuous Compliance : o Use AWS Config to continuously monitor and record IAM password policies. o Set up AWS Config rules that automatically check compliance with your organization's password policy standards. 4. Utilize Multi-Factor Authentication (MFA) : o Enable MFA for an additional layer of security on all user accounts, especially for accounts with elevated permissions. o Regularly audit the use of MFA across your AWS environment to ensure it is enabled and functioning correctly. 5. Automate Alerts and Responses : o Set up real-time alerts for any non-compliant changes to password policies or unexpected password resets. o Automate responses where possible to enforce compliance immediately when a deviation from the password policy is detected.",
    "function_names": [
      "iam",
      "iam_password_policy_no_reuse"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "2.12",
    "title": "Ensure Monitoring EC2 and EBS with CloudWatch",
    "assessment": "Manual",
    "description": "CloudWatch is an AWS monitoring service that allows you to keep an eye on your AWS resources. You can track metrics via log files or worldclass data visuals. AWS CloudWatch allows the administrator to keep an eye on his/her AWS resources. You can set up alarms, monitor activity, and analyze log data. CloudWatch is a must to keep your AWS EBS and EC2 resources secure.",
    "rationale": "Using CloudWatch to monitor EC2 instances and EBS volumes is essential for enhancing operational oversight and ensuring optimal performance within the AWS environment. This approach provides real-time insights into resource usage and system health, enabling proactive adjustments and timely responses to potential issues, thereby maintaining high availability and efficiency. Impact: Failing to monitor EC2 instances and EBS volumes with CloudWatch can lead to delayed detection of performance issues and resource bottlenecks, potentially causing system outages and degraded user experiences. Without this monitoring, organizations also miss opportunities for proactive optimizations, increasing the risk of unexpected downtime and higher operational costs.",
    "audit": "Creating an AWS CloudWatch Dashboard: 1. Navigate to the AWS CloudWatch Console - https://us-east- 2.console.aws.amazon.com/cloudwatch/home?region=us-east-2#home. 2. Select the dashboard type that's right for you. Give the dashboard a name. Name the dashboard as something memorable. You can select which resources you want to monitor. Select cEBS. 3. Create an alarm - Alarms are important to send you an alert as soon as something suspicious happens on your volume. You can create an alarm to alert you when a certain threshold of IOPS are reached. To create alarm, follow steps - o Go to cAlarms on the left hand side of the CloudWatch dashboard. o Select cCreate a new alarm. o Select cEBS. o Select what you want to monitor. We're going to choose to monitor the write operations of an EBS volume. o Go back to the volume that was created in EC2 dashboard and copy the volume ID under the cvolume ID field. o Configure the settings that you want to trigger an alarm. o Move onto the next step before continuing.",
    "remediation": "1. Enable CloudWatch Monitoring : o Access the AWS Management Console, navigate to the EC2 dashboard, and select the instances and EBS volumes. o Enable detailed monitoring on each EC2 instance and EBS volume to collect data at a higher granularity. 2. Configure CloudWatch Alarms : o In the CloudWatch console, set up alarms based on key performance metrics such as CPU utilization, disk read/write operations, and network traffic. o Configure these alarms to notify administrators via email or SMS when thresholds are breached, allowing for immediate action. 3. Establish Baselines : o Analyze historical performance data from CloudWatch to establish baseline performance metrics for each instance and volume. o Use these baselines to identify abnormal behavior or performance degradation over time. 4. Automate Responses : o Utilize AWS CloudWatch Events and AWS Lambda to automate responses to specific alarms, such as scaling operations or initiating recovery processes. o Ensure these automated scripts are tested and reflect the operational policies of your organization. References: 1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch _Embedded_Metric_Format_View.html",
    "function_names": [
      "ec2",
      "ebs_volume_cloudwatch_monitoring_enabled",
      "ebs_volume_cloudwatch_alarms_configured",
      "cloudwatch_metrics_logging_enabled",
      "cloudwatch",
      "ebs_volume_detailed_monitoring_enabled",
      "cloudwatch",
      "cloudwatch_alarms_ec2_ebs_configured"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Failing to monitor EC2 instances and EBS volumes with CloudWatch can lead to delayed detection of performance issues and resource bottlenecks, potentially causing system outages and degraded user experiences. Without this monitoring, organizations also miss opportunities for proactive optimizations, increasing the risk of unexpected downtime and higher operational costs.",
    "references": "1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch _Embedded_Metric_Format_View.html"
  },
  {
    "id": "2.13",
    "title": "Ensure creating an SNS subscription",
    "assessment": "Manual",
    "description": "Create an SNS notification to send to the system administrator's email address.",
    "rationale": "",
    "audit": "Creating an SNS subscription: 1. Navigate to SNS service in the AWS console - https://us-east- 2.console.aws.amazon.com/sns/v3/home?region=us-east-2#/homepage (make sure you are in the correct region). 2. Navigate to ttopics. 3. Create a new topic. 4. Select the ARN of the topic. 5. Select the cEmail protocol if you wish to have the alarms delivered to your email. 6. Enter the correct email address of an administrator. 7. Select cCreate Subscription. To attach the SNS notification service to the alarm - select the SNS subscription that you just created and create the alarm.",
    "remediation": "References: 1. https://docs.aws.amazon.com/sns/latest/dg/sns-getting-started.html 3 Elastic File System (EFS) Amazon Elastic File System (EFS) automatically grows and shrinks as you add and remove files with no need for management or provisioning. AWS EFS is a serverless file storage service that allows users to easily configure filesystems. AWS takes care of provisioning, patching, and deploying the file system when you use EFS. This file system is built to scale without any user configuration changes. This means that the file system automatically gets bigger as the storage needs increase. The file system will also shrink with decreasing requirements, ensuring you only pay for what you need.",
    "function_names": [
      "sns",
      "sns"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/sns/latest/dg/sns-getting-started.html 3 Elastic File System (EFS) Amazon Elastic File System (EFS) automatically grows and shrinks as you add and remove files with no need for management or provisioning. AWS EFS is a serverless file storage service that allows users to easily configure filesystems. AWS takes care of provisioning, patching, and deploying the file system when you use EFS. This file system is built to scale without any user configuration changes. This means that the file system automatically gets bigger as the storage needs increase. The file system will also shrink with decreasing requirements, ensuring you only pay for what you need."
  },
  {
    "id": "3.1",
    "title": "EFS",
    "assessment": "Manual",
    "description": "AWS EFS is a scalable and fully-managed storage service that enables you to quickly deploy file systems without the hassle of configuring, patching, or maintaining them.",
    "rationale": "Utilize AWS EFS to streamline your file system deployment, allowing the service to handle the heavy lifting for you. Impact: Not using AWS EFS for your file system deployment can lead to increased management overhead, as you'll need to manually configure, patch, and maintain the systems. This manual effort is time-consuming and complex, raising the potential for errors that could result in downtime and data loss. By not leveraging AWS EFS, you miss out on the streamlined, automated management and scalability that the service provides, potentially impacting your operational efficiency and reliability.",
    "audit": "To create an Amazon EFS (Elastic File System), you can follow these steps: 1. Sign in to the AWS Management Console and navigate to the Amazon EFS console - https://us-east-2.console.aws.amazon.com/efs?region=us-east-2#/get- started. 2. Click on the \"Create file system\" button. 3. Enter a name for your file system. 4. Choose a VPC for your file system 5. Then you have to go to File system settings to edit configurations , then you have to select Lifecycle management , performance settings and File system protection , and then click save changes.",
    "remediation": "To create an Amazon EFS (Elastic File System), follow these steps: 1. Open the Amazon EFS Console : Sign in to your AWS Management Console and navigate to the Amazon EFS service. 2. Create File System : Click on the \"Create file system\" button to start the creation process. 3. Configure File System : Select your desired VPC (Virtual Private Cloud) and availability zones for the file system. Optionally, you can configure settings like throughput mode and lifecycle management. 4. Configure Access Points : Set up access points if needed, to control access permissions and streamline access management. 5. Review and Create : Review your settings and click on the \"Create\" button to create the file system. 6. Mount the File System : Once created, use the provided mount targets and instructions to mount the file system to your EC2 instances or other resources. References: 1. https://us-east-2.console.aws.amazon.com/efs?region=us-east-2#/get-started",
    "function_names": [
      "efs",
      "efs",
      "efs",
      "efs_file_system_access_points_restricted",
      "efs_file_system_vpc_endpoint_policy_enabled",
      "efs_file_system_iam_policy_attached",
      "efs",
      "efs_file_system_tags_configured",
      "efs"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not using AWS EFS for your file system deployment can lead to increased management overhead, as you'll need to manually configure, patch, and maintain the systems. This manual effort is time-consuming and complex, raising the potential for errors that could result in downtime and data loss. By not leveraging AWS EFS, you miss out on the streamlined, automated management and scalability that the service provides, potentially impacting your operational efficiency and reliability.",
    "references": "1. https://us-east-2.console.aws.amazon.com/efs?region=us-east-2#/get-started"
  },
  {
    "id": "3.2",
    "title": "Ensure Implementation of EFS",
    "assessment": "Manual",
    "description": "AWS EFS is a fully managed storage service that enables rapid file system deployment without the need for configuration, patching, or maintenance.",
    "rationale": "The rationale behind using AWS EFS is to simplify and expedite the deployment of file systems, eliminating the need for manual configuration, patching, and maintenance. This allows you to focus on other critical aspects of your operations while benefiting from a reliable, scalable, and fully managed storage solution. Impact: Not using AWS EFS can lead to increased complexity and time-consuming manual management for configuration, patching, and maintenance. This raises the risk of human error, system downtime, and data loss, while also making it more challenging to scale your file systems efficiently.",
    "audit": "1. Navigate to console - https://us-east- 1.console.aws.amazon.com/efs/home?region=us-east-1#/get-started. 2. Select cCreate File System. Give the file system a name and select the default VPC. Select cCreate. 3. Encrypting data at rest - The EFS is encrypted automatically upon creation.. 4. Attach the EFS to an EC2 instance. 5. Navigate to file system details - Select the radio box next to the file system that was just created and select cview details. 6. Creating an NFS directory on your EC2 instance - Launch your EC2 instance. Once connected, Type following command: csudo mkdir efs to create a new efs directory. 7. Mounting an NFS directory on your EC2 instance - Navigate to find your EC2 DNS information Paste this command into the console after making the efs directory sudo mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport mount-target-DNS:/   ~/efs-mount-point ``` NOTE: The encryption takes place as soon as you mount the directory. This encrypts the data in transit. 8. Terminating the EC2 instance - The EFS file system that was just mounted doesn't persist on reboot. You can consult the AWS documentation to see how you can write a script to automatically mount the file system upon every reboot.",
    "remediation": "To remediate the issues of manual file system management, follow these steps to create and use Amazon EFS: 1. Open the Amazon EFS Console : Sign in to the AWS Management Console and navigate to the Amazon EFS service. 2. Create a New File System : Click on \"Create file system\" to start the setup process. 3. Configure Settings : Select your desired VPC, availability zones, throughput mode, and any additional settings like lifecycle management. 4. Set Up Access Points : Configure access points to control permissions and simplify access management. 5. Review and Create : Verify your settings and click \"Create\" to finalize the file system setup. 6. Mount the File System : Use the provided mount targets and instructions to attach the file system to your EC2 instances or other resources. References: 1. https://aws.amazon.com/efs/",
    "function_names": [
      "efs",
      "efs",
      "efs",
      "efs_file_system_access_points_restricted",
      "efs_file_system_vpc_only_access_enabled",
      "efs_file_system_iam_policy_attached",
      "efs"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not using AWS EFS can lead to increased complexity and time-consuming manual management for configuration, patching, and maintenance. This raises the risk of human error, system downtime, and data loss, while also making it more challenging to scale your file systems efficiently.",
    "references": "1. https://aws.amazon.com/efs/"
  },
  {
    "id": "3.3",
    "title": "Ensure EFS and VPC Integration",
    "assessment": "Manual",
    "description": "You can use EFS as a network file system across availability zones on a virtual private cloud. This capability allows the organization to create a highly available file sharing solution. Leveraging AWS VPC and EC2 in tandem with AWS EFS makes for a highly available and scalable cloud file storage solution.",
    "rationale": "Redundancy and scalability are crucial for maintaining uninterrupted services. By integrating these AWS services, users can harness the full power of AWS, ensuring a resilient and scalable infrastructure. Impact: Not integrating AWS services for redundancy and scalability can lead to service disruptions and increased downtime. This approach also limits your ability to efficiently handle growing workloads, negatively impacting performance and user experience.",
    "audit": "Audit Procedures for AWS Redundancy and Scalability 1. Create Mount Targets in Each Availability Zone : Ensure EFS is attached in each availability zone by creating mount targets in each subnet. Although multiple subnets can exist per availability zone, verify that EFS is configured to work with one subnet per zone to maintain redundancy. 2. Monitor EFS with CloudWatch : Use AWS CloudWatch to automatically monitor your EFS service. Check that alarms are configured and logs and events are tracked effectively, providing real-time insights into the performance and health of your file systems.",
    "remediation": "Create an EC2 instance in each availability zone within your VPC. References: 1. https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html#how-it-works- conceptual",
    "function_names": [
      "efs_volume_vpc_integration_enabled",
      "efs_mount_target_vpc_configured",
      "efs_access_point_vpc_security_groups_attached",
      "efs_file_system_vpc_networking_enabled",
      "efs_volume_vpc_subnet_availability_zones_configured",
      "efs_mount_target_vpc_security_groups_attached",
      "efs_file_system_vpc_dns_resolution_enabled",
      "efs_volume_vpc_endpoint_configured"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not integrating AWS services for redundancy and scalability can lead to service disruptions and increased downtime. This approach also limits your ability to efficiently handle growing workloads, negatively impacting performance and user experience.",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/how-it-works.html#how-it-works- conceptual"
  },
  {
    "id": "3.4",
    "title": "Ensure controlling Network access to EFS Services",
    "assessment": "Manual",
    "description": "It's important that you secure access to your resources on your AWS VPC network. There are several ways to ensure that you control what traffic is accessing your resources. Some of which include tightening down network layer security using a Security Group and a NACL within the VPC console. You can also tighten down Security Groups within your EC2 console and by using AWS IAM. Maintaining network security is a high priority to ensure that no unauthorized users can access the data stored on your EFS service.",
    "rationale": "Maintaining network security is a best practice essential for keeping your data safe and secure. Impact: Failing to maintain network security can lead to significant vulnerabilities, exposing your data to unauthorized access, breaches, and potential data loss. This can result in severe financial, operational, and reputational damage to your organization.",
    "audit": "",
    "remediation": "Implement network security access controls. References: 1. https://docs.aws.amazon.com/efs/latest/ug/NFS-access-control-efs.html",
    "function_names": [
      "efs",
      "efs_security_group_restricted",
      "efs_vpc_endpoint_policy_restricted",
      "efs_mount_target_security_group_reviewed_recently",
      "efs_iam_policy_restricted",
      "efs_vpc_security_restricted"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Failing to maintain network security can lead to significant vulnerabilities, exposing your data to unauthorized access, breaches, and potential data loss. This can result in severe financial, operational, and reputational damage to your organization.",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/NFS-access-control-efs.html"
  },
  {
    "id": "3.5",
    "title": "Ensure using Security Groups for VPC",
    "assessment": "Manual",
    "description": "A security group controls the traffic that is allowed to reach and leave the resources that it is associated with. For example, after you associate a security group with an EC2 instance, it controls the inbound and outbound traffic for the instance.",
    "rationale": "",
    "audit": "1. Go to https://console.aws.amazon.com/vpc/ 2. Navigate to Security Groups and select on the VPC that houses your mount target. 3. Ensure that incoming traffic is restricted to SSH access on port 22 using TCP protocol and outbound traffic is accepting all traffic.",
    "remediation": null,
    "function_names": [
      "compute_instance_security_group_required",
      "vpc_security_group_in_use",
      "vpc_security_group_attached",
      "ec2",
      "network_security_group_default_deny",
      "vpc_security_group_traffic_restricted",
      "compute_instance_security_group_default_deny",
      "vpc_security_group_no_unrestricted_access"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "3.6",
    "title": "Ensure Secure Ports",
    "assessment": "Manual",
    "description": "Securing network ports is essential for protecting AWS storage services like Amazon S3, EFS, and EBS. By configuring security groups and network access control lists (NACLs) to allow only necessary traffic, you minimize the risk of unauthorized access. Regular audits and monitoring of port usage ensure that only approved ports and protocols are operational, enhancing the overall security of your AWS storage environment.",
    "rationale": "By limiting traffic to only necessary and approved ports and protocols, you reduce the attack surface and enhance the overall security of your storage environment. Regular audits and monitoring further ensure that security measures remain effective and up-to- date, safeguarding your data from emerging threats. Impact: Not securing network ports in AWS storage services can lead to significant vulnerabilities, exposing your data to unauthorized access and potential breaches. This lack of control increases the risk of attacks, such as port scanning and exploitation of open ports, which can result in data loss, corruption, and theft. Consequently, your organization may face severe financial losses, operational disruptions, and damage to its reputation.",
    "audit": "1. Review Security Group Configurations : 1. Navigate to \"Security Groups\" under \"Network & Security\". 2. Verify that security groups are configured to allow only necessary inbound and outbound traffic. 3. Ensure rules are in place to restrict access to critical storage services, such as Amazon S3, EFS, and EBS. 2. Check Network Access Control Lists (NACLs) : o Steps : 1. Navigate to \"Network ACLs\" under \"Security\". 2. Ensure NACLs are configured to control traffic to and from subnets, allowing only necessary ports and protocols. 3. Verify that rules are implemented to deny unauthorized access. 3. Monitor VPC Flow Logs : o Steps : 1. Enable VPC Flow Logs for each VPC. 2. Regularly review flow logs to monitor traffic and identify any unauthorized access attempts or anomalies. 3. Investigate and remediate any unusual traffic patterns. 4. Inspect IAM Policies and Roles : o Steps : 1. Review IAM policies to ensure they enforce least privilege principles for access to storage services. 2. Verify that roles are appropriately assigned and used to control access to security groups and NACLs. 5. Enable and Review AWS CloudTrail Logs : o Steps : 1. Ensure CloudTrail is enabled in all regions. 2. Regularly review CloudTrail logs for any changes to security groups, NACLs, and IAM policies. 3. Set up alerts for critical security events related to port configurations. 6. Conduct Regular Penetration Testing : o Steps : 1. Conduct tests to identify vulnerabilities in port configurations. 2. Review findings and implement necessary security measures to address identified issues. 3. Ensure compliance with AWS penetration testing policies. 7. Verify Encryption in Transit : o Steps : 1. Ensure that data encryption is enabled for data in transit. 2. Verify that encryption keys are managed securely using AWS Key Management Service (KMS). 3. Check that all communication with storage services is encrypted. 8. Implement and Review Security Best Practices : o Steps : 1. Implement recommended best practices for securing network ports and storage services. 2. Regularly review and update security configurations to align with evolving best practices. 3. Conduct periodic training for staff on security best practices and AWS configurations.",
    "remediation": null,
    "function_names": [
      "ec2_security_group_ports_restricted",
      "ec2_nacl_ports_restricted",
      "s3_bucket_secure_ports",
      "efs_file_system_secure_ports",
      "ebs_volume_secure_ports",
      "storage_service_unauthorized_ports_blocked",
      "ec2_security_group_regular_audit_enabled",
      "ec2_nacl_regular_audit_enabled"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not securing network ports in AWS storage services can lead to significant vulnerabilities, exposing your data to unauthorized access and potential breaches. This lack of control increases the risk of attacks, such as port scanning and exploitation of open ports, which can result in data loss, corruption, and theft. Consequently, your organization may face severe financial losses, operational disruptions, and damage to its reputation."
  },
  {
    "id": "3.7",
    "title": "Ensure File-Level Access Control with Mount Targets",
    "assessment": "Manual",
    "description": "Mount targets act as gateways, enabling resources to be accessed across different availability zones within a VPC. When you create an EFS file system, mount targets are automatically provisioned in each availability zone associated with the VPC. This ensures high availability and redundancy, allowing seamless and efficient access to the EFS file system from any availability zone.",
    "rationale": "Using mount targets ensures seamless access to the EFS file system across different availability zones within a VPC. This automatic provisioning of mount targets in each availability zone provides high availability and redundancy, essential for maintaining uninterrupted data access. It simplifies configuration and enhances the resilience and scalability of the file system architecture. Impact: Not using mount targets can lead to inefficient and unreliable access to the EFS file system across availability zones. This lack of automatic provisioning reduces high availability and redundancy, increasing the risk of service interruptions and data access issues. Consequently, your infrastructure may suffer from decreased performance, higher latency, and potential data loss or downtime.",
    "audit": "",
    "remediation": "Control access by modifying mount targets in each availability zone. References: 1. https://docs.aws.amazon.com/efs/latest/ug/accessing-fs.html",
    "function_names": [
      "efs",
      "efs_mount_target_vpc_access_restricted",
      "efs",
      "efs_mount_target_cross_zone_access_secure",
      "efs_mount_target_network_security_groups_applied",
      "efs_mount_target_subnet_association_valid",
      "efs",
      "efs_mount_target_iam_authorization_required",
      "efs_mount_target_resource_based_policies_configured"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not using mount targets can lead to inefficient and unreliable access to the EFS file system across availability zones. This lack of automatic provisioning reduces high availability and redundancy, increasing the risk of service interruptions and data access issues. Consequently, your infrastructure may suffer from decreased performance, higher latency, and potential data loss or downtime.",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/accessing-fs.html"
  },
  {
    "id": "3.8",
    "title": "Ensure managing mount target security groups",
    "assessment": "Manual",
    "description": "Managing security groups for mount targets is essential for controlling access to your Amazon EFS file systems. By configuring these security groups, you ensure that only authorized network traffic can access your file systems, enhancing security. Regular reviews and updates of security group rules maintain strict access control, protecting your data from unauthorized access and potential breaches.",
    "rationale": "The rationale for managing security groups for mount targets is to ensure robust access control and security for your Amazon EFS file systems. By configuring these security groups, you restrict access to only authorized network traffic, thereby minimizing the risk of unauthorized access and potential data breaches. Regularly reviewing and updating these rules helps maintain strong security measures and compliance with organizational policies and industry standards. Impact: Not managing security groups for mount targets can lead to significant vulnerabilities, exposing your Amazon EFS file systems to unauthorized access and potential breaches. This lack of control increases the risk of malicious attacks, data theft, and data corruption. Consequently, your organization may face severe financial losses, operational disruptions, and damage to its reputation.",
    "audit": "1. Navigate to EFS. 2. Select file systems. 3. Click the radio box and select cview details. 4. Select the cmanage button. 5. Select cNetworking tab. 6. This will bring up a screen for each of your mount points. 7. To edit Security Groups, select cManage.From here, you can edit security groups for each mount point. This gives you control of how traffic can flow between each subnet.",
    "remediation": "References: 1. https://docs.aws.amazon.com/efs/latest/ug/accessing-fs.html",
    "function_names": [
      "efs_mount_target_security_group_reviewed_recently",
      "efs_mount_target_security_group_authorized_only",
      "efs_mount_target_security_group_no_public_access",
      "efs_mount_target_security_group_minimal_rules",
      "efs_mount_target_security_group_no_unrestricted_ingress",
      "efs_mount_target_security_group_no_unrestricted_egress"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not managing security groups for mount targets can lead to significant vulnerabilities, exposing your Amazon EFS file systems to unauthorized access and potential breaches. This lack of control increases the risk of malicious attacks, data theft, and data corruption. Consequently, your organization may face severe financial losses, operational disruptions, and damage to its reputation.",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/accessing-fs.html"
  },
  {
    "id": "3.9",
    "title": "Ensure using VPC endpoints - EFS",
    "assessment": "Manual",
    "description": "With AWS PrivateLink, VPC Endpoints allow services to communicate within AWS using private IP addresses within approved CIDR ranges. This communication can be achieved without the need for a VPN, ensuring secure and efficient data transfer.",
    "rationale": "The rationale behind using AWS PrivateLink with VPC Endpoints is to enable secure and efficient communication between services within AWS. By using private IP addresses within approved CIDR ranges, it eliminates the need for a VPN, reducing complexity and potential points of failure. This approach enhances security, reduces latency, and ensures data remains within the AWS network, aligning with best practices for secure and reliable cloud architecture. Impact: Not using AWS PrivateLink with VPC Endpoints can lead to several issues, including increased security risks and potential data exposure since services would need to communicate over the public internet or through more complex VPN setups. This can result in higher latency, reduced performance, and greater vulnerability to attacks. Additionally, managing VPN connections adds complexity and potential points of failure, compromising the overall efficiency and reliability of your network architecture.",
    "audit": "Creating a FIPS compliant interface endpoint for EFS: 1. Navigate to VPC Console: https://console.aws.amazon.com/vpc/. 2. Select cEndpoints on the sidebar. 3. Select cCreate endpoint. 4. Name the endpoint. 5. Copy and paste this services into the services bar: com.amazonaws.region.elasticfilesystem-fips - replace region: with us-east-1 or whatever region you're using. 6. Select your VPC. 7. For subnets, select the availability zone and then select private subnet. 8. Select the Security Group for the VPC endpoint. 9. For policy: select cfull access. 10. Create a tag for future reference / granular IAM permissions. 11. Create endpoint.",
    "remediation": "Use VPC Endpoints in tandem with AWS Private Link to secure your EFS connections. References: 1. https://docs.aws.amazon.com/efs/latest/ug/efs-vpc- endpoints.html#:~:text=To%20establish%20a%20private%20connection,private %20network%20(VPN)%20connection.",
    "function_names": [
      "efs_access_point_vpc_endpoint_enabled",
      "efs_mount_target_vpc_endpoint_required",
      "efs_file_system_vpc_endpoint_configured",
      "vpc_endpoint_efs_service_connected",
      "efs",
      "efs_gateway_endpoint_route_table_associated",
      "efs_vpc_endpoint_security_group_restricted",
      "efs_vpc_endpoint_subnet_private",
      "efs_vpc_endpoint_policy_minimal_permissions",
      "efs_vpc_endpoint_connection_approved_cidr_only"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not using AWS PrivateLink with VPC Endpoints can lead to several issues, including increased security risks and potential data exposure since services would need to communicate over the public internet or through more complex VPN setups. This can result in higher latency, reduced performance, and greater vulnerability to attacks. Additionally, managing VPN connections adds complexity and potential points of failure, compromising the overall efficiency and reliability of your network architecture.",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/efs-vpc- endpoints.html#:~:text=To%20establish%20a%20private%20connection,private %20network%20(VPN)%20connection."
  },
  {
    "id": "3.10",
    "title": "Ensure managing AWS EFS access points",
    "assessment": "Manual",
    "description": "EFS access points serve as gateways to your EFS file system, allowing applications to interact with the file system across various resources. Proper configuration of these access points within your applications is crucial to ensure seamless and secure access. By configuring EFS access points, you can control and manage which users have access to specific resources in your EFS environment, enhancing security and operational efficiency.",
    "rationale": "The rationale behind properly configuring EFS access points is to ensure secure and efficient interaction between your applications and the EFS file system. By setting up these access points correctly, you can control and manage user permissions, ensuring that only authorized users can access specific resources. This not only enhances the security of your data but also improves operational efficiency by preventing unauthorized access and potential data breaches.",
    "audit": "1. Creating an EFS access point: You can create an EFS access point through the amazon CLI, AWS console, and with the EFS API. An EFS can only have up to 1,000 access points. 2. Mounting an EFS access point: Consult the section where we mounted an EFS file system on an EC2 instance. While inside the resource you want to configure an access point for, type in this command: mount -t efs -o tls,iam,accesspoint=fsap-abcdef0123456789a fs- abc0123def456789a: /localmountpoint  3. Enforcing a User Identity with an EFS access point: You can enforce user identity to ensure that users and groups with proper permissions are able to access the EFS file system. In order to do this, you must specify the user and group ID you wish to have ownership of the files. When enforcement is enabled, that file that is was created by the user will automatically show ownership to belong to the user. When enforcement is enabled, the access point considers the User ID, group ID, and secondary group ID. It ignored the NFS client's ID. Note: enforcing the user ID is subject to the cClientRootAccess IAM permission. If either the User ID or Group ID = 0, then you must explicitly allow cClientRootAccess permission.  4. Enforcing a root directory with an access point: If you wish to override the root directory of the EFS, you can make the root directory that of the access point. To enforce the root directory with an access point, you must specify three things upon provisioning the EFS mount point: o Owner UID o Group GID o Permissions To access an EFS from an access point, a root directory must be created and enforced. Reminder: You must specify permissions for the access point root directory. If these permissions are not defined, a root directory will not be created on the mount point, and you will not be able to access EFS from an access point. 5. Security Model for access point root directories: When a root directory override is in effect, the EFS behaves like a Linux server with a no_subtree_check option enabled.",
    "remediation": "Implement AWS EFS access points References: 1. https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html",
    "function_names": [
      "efs",
      "efs",
      "efs",
      "efs",
      "efs_access_point_vpc_only_access",
      "efs_access_point_iam_authorization_enabled",
      "efs"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html"
  },
  {
    "id": "3.11",
    "title": "Ensure accessing Points and IAM Policies",
    "assessment": "Manual",
    "description": "You can use IAM policies to control access to your EFS access points. To achieve this, utilize the elasticfilesystem:AccessPointArn IAM condition key. The AccessPointArn represents the Amazon Resource Name (ARN) of the access point that the file system is mounted with.",
    "rationale": "The rationale for using IAM policies with the elasticfilesystem:AccessPointArn condition key is to ensure precise and secure access control to EFS access points. By specifying the access point's ARN, you can restrict interactions to authorized users and resources only, thereby enhancing data security and preventing unauthorized access. This approach maintains the integrity and confidentiality of your data within the AWS environment.",
    "audit": "Below is a same IAM policy copied from the AWS documentation: { \"Version\": \"2012-10-17\", \"Id\": \"MyFileSystemPolicy\", \"Statement\": [ { \"Sid\": \"App1Access\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::111122223333:role/app1\" }, \"Action\": [ \"elasticfilesystem:ClientMount\", \"elasticfilesystem:ClientWrite\" ], \"Condition\": { \"StringEquals\": { \"elasticfilesystem:AccessPointArn\":\"arn:aws:elasticfilesystem:us-east- 1:222233334444:access-point/fsap-01234567\" } } }, { \"Sid\": \"App2Access\", \"Effect\": \"Allow\", \"Principal\": { \"AWS\": \"arn:aws:iam::111122223333:role/app2\" }, \"Action\": [ \"elasticfilesystem:ClientMount\", \"elasticfilesystem:ClientWrite\" ], \"Condition\": { \"StringEquals\": { \"elasticfilesystem:AccessPointArn\":\"arn:aws:elasticfilesystem:us-east 1:222233334444:access-point/fsap-89abcdef\" } } } ] }",
    "remediation": "References: 1. https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html",
    "function_names": [
      "efs_access_point_iam_policy_restricted",
      "efs",
      "efs_access_point_secure_iam_permissions"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/efs/latest/ug/efs-access-points.html"
  },
  {
    "id": "3.12",
    "title": "Ensure configuring IAM for AWS Elastic Disaster Recovery",
    "assessment": "Manual",
    "description": "Before installing the AWS Elastic Disaster Recovery client, you need to configure AWS IAM permissions and users for both the AWS Replication and AWS Failback Client.",
    "rationale": "Configuring AWS IAM permissions and users before installing the AWS Elastic Disaster Recovery client ensures that the AWS Replication and AWS Failback Client have the necessary access rights. This setup is essential for maintaining security and preventing unauthorized access. Proper IAM configuration guarantees the smooth operation of disaster recovery processes, safeguarding your data and ensuring system reliability.",
    "audit": "To create DRS Agent User, follow following steps: 1. Navigate to the AWS IAM Console - https://us-east- 1.console.aws.amazon.com/iam/home?region=us-east-1#/home. 2. Create new user. This user will only be able to access the Elastic disaster recovery agent installation resource. Accordingly, name the user cDSRuser. 3. Allow Programmatic access: This allows the user to access resources programmatically with a secure key rather than having to enter a password. 4. elect cattach policies directlyc and search for cAWSElasticDisasterRecoveryAgentInstallationPolicyc. 5. Create user. To create Failback Agent User, Follow the steps above with these two modifications: 1. Name the user cFailbackAgentuser. 2. Apply the cAWSElasticDisasterRecoveryFailbackInstallationPolicyc.",
    "remediation": "Configure IAM Credentials for AWS Elastic Disaster Recovery. References: 1. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/home",
    "function_names": [
      "iam_user_elastic_disaster_recovery_permissions",
      "iam_role_elastic_disaster_recovery_replication",
      "iam_policy_elastic_disaster_recovery_client",
      "iam_user_elastic_disaster_recovery_failback",
      "iam_role_elastic_disaster_recovery_failback_client",
      "iam_policy_elastic_disaster_recovery_minimal_permissions",
      "iam_credentials_elastic_disaster_recovery_rotated",
      "iam_service_elastic_disaster_recovery_integration"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/home"
  },
  {
    "id": "4.1",
    "title": "FSX (AWS Elastic File Cache)",
    "assessment": "Manual",
    "description": "Amazon File Cache is a fully managed, high speed cache on AWS that is used to process file data, regardless of where the data is stored. AWS File Cache is a serverless service on AWS that spares the administrators from the burden of managing file servers and storage volumes, updating hardware, configuring software, running out of capacity, or tuning performance. AWS Elastic cache is capable of handling hundreds of GB/s of throughput and up to millions of operations per second. AWS FSx is an excellent service for cost optimization and high scalability. Amazon File Cache automatically loads data into the cache when it's accessed for the first time and automatically releases data when it's not used.",
    "rationale": "Amazon File Cache is used as a temporary, high performance storage location for data that's stored in on-premises file systems, AWS file systems, and Amazon S3 buckets. This service is used for data processing and is best suited for applications that need high data processing speeds. This is not a long term storage option.",
    "audit": "",
    "remediation": "You can link your cache to S3 data repositories or to any file system that supports the NFSv3 protocol. The NFS data repository can either be on premises or in the cloud and you can link a maximum of eight repositories. All the linked repositories must be using the same file system; either S3 or NFS. When linked to a data repository, Amazon File Cache transparently presents S3 or NFS objects as files and directories. Amazon File Cache is compatible to be used interchangeably with Amazon Elastic Compute Service, Amazon Elastic Container Service, and Amazon Elastic Kubernetes Service. References: 1. https://aws.amazon.com/fsx/",
    "function_names": [
      "fsx",
      "fsx",
      "fsx",
      "fsx_cache_multi_region_replication_enabled",
      "fsx_cache_serverless_management_enabled",
      "fsx_cache_cost_optimization_enabled"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://aws.amazon.com/fsx/"
  },
  {
    "id": "4.2",
    "title": "Amazon Elastic File Cache",
    "assessment": "Manual",
    "description": "Amazon File Cache is available in the following AWS Regions: 1. US East (N. Virginia) 2. US East (Ohio) 3. US West (Oregon) 4. Canada (Central) 5. Europe (Frankfurt) 6. Europe (Ireland) 7. Europe (London) 8. Europe (Stockholm) 9. Asia Pacific (Hong Kong) 10. Asia Pacific (Mumbai) 11. Asia Pacific (Seoul) 12. Asia Pacific (Tokyo) 13. Asia Pacific (Singapore) 14. Asia Pacific (Sydney) Amazon Elastic File Cache Compatibility: In order to use AWS FSx, you must ensure that the operating system you're using on the compute instance is compatible with AWS FSx. Below are the compatible operating systems: 1. Amazon Linux 2 and Amazon Linux 2. Red Hat Enterprise Linux (RHEL) 3. CentOS 4. Rocky Linux 5. Ubuntu. The Lustre client must be installed on these systems in order for the FSx service to work.",
    "rationale": "The rationale behind creating Amazon Elastic File Cache is to enhance the performance and scalability of cloud-based applications by providing a high-speed, scalable file caching solution. This service reduces latency and improves access times for frequently accessed data, thereby optimizing application performance and user experience. Additionally, it helps manage and reduce storage costs by efficiently utilizing cached data, ensuring that resources are used effectively while maintaining high performance standards. Impact: Not implementing Amazon Elastic File Cache can lead to increased latency and slower access times for frequently accessed data, resulting in suboptimal performance for cloud-based applications. This can negatively affect user experience and productivity. Additionally, without an efficient caching solution, there may be higher storage costs due to inefficient use of resources, and the system may struggle to handle high demand, leading to potential performance bottlenecks and scalability issues.",
    "audit": "Creating Amazon Elastic File Cache: Before you can start using Amazon Elastic File Cache, you must set up an Amazon Elastic Compute Instance and an S3 bucket. We're going to create a new EC2 instance and S3 bucket for the sake of this tutorial. Creating an EC2 instance for FSx: Make sure that whatever AMI you select is compatible with Lustre 2.12 client. - Navigate to the Amazon EC2 console. - Select cLaunch Instance. - Give your server a name. - Select cUbuntu or an operating system that's compatible with FSx. - Select default VPC and security group. - Select or create private SSH keys. - Leave the rest of the settings default. - Create Instance.",
    "remediation": "References: 1. https://aws.amazon.com/fsx/",
    "function_names": [
      "file_cache_compatible_os",
      "file_cache_region_available",
      "file_cache_lustre_client_installed",
      "file_cache_fsx_compatibility_verified",
      "file_cache_amazon_linux_supported",
      "file_cache_rhel_supported",
      "file_cache_centos_supported",
      "file_cache_rocky_linux_supported",
      "file_cache_ubuntu_supported",
      "file_cache_client_configuration_valid"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Not implementing Amazon Elastic File Cache can lead to increased latency and slower access times for frequently accessed data, resulting in suboptimal performance for cloud-based applications. This can negatively affect user experience and productivity. Additionally, without an efficient caching solution, there may be higher storage costs due to inefficient use of resources, and the system may struggle to handle high demand, leading to potential performance bottlenecks and scalability issues.",
    "references": "1. https://aws.amazon.com/fsx/"
  },
  {
    "id": "4.3",
    "title": "Ensure the creation of an FSX Bucket",
    "assessment": "Manual",
    "description": "An S3 bucket will store the data that Amazon Elastic File Cache accesses",
    "rationale": "Storing data in S3 ensures scalability, durability, and cost-efficiency, while Amazon Elastic File Cache enhances access speed by caching frequently accessed data. This combination leverages the strengths of both services, providing a seamless and efficient data storage and retrieval solution.",
    "audit": "1. Navigate to the Amazon S3 bucket console. https://s3.console.aws.amazon.com/s3/. 2. Select cCreate Bucket. 3. Give your bucket a name and select the region. Note: your bucket must be a unique name that's not used anywhere else on AWS. 4. Block public access: This is an internal service that will not be accessed outside of our internal AWS network. Keep the cblock public access setting checked. 5. Enable bucket versioning. 6. Leave the rest of the settings as default. 7. Select ccreate bucket. 8. Create a path in your bucket, give it a name and leave the encryption as default for now.",
    "remediation": "References: 1. https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data- repo.html",
    "function_names": [
      "s3_bucket_fsx_data_access_enabled",
      "s3_bucket_fsx_encryption_enabled",
      "s3_bucket_fsx_versioning_enabled",
      "s3_bucket_fsx_logging_enabled",
      "s3_bucket_fsx_public_access_blocked",
      "s3_bucket_fsx_lifecycle_policy_configured",
      "s3",
      "s3_bucket_fsx_secure_transfer_required"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/fsx/latest/LustreGuide/create-dra-linked-data- repo.html"
  },
  {
    "id": "4.4",
    "title": "Ensure the creation of Elastic File Cache",
    "assessment": "Manual",
    "description": "With the prerequisites completed, we can now proceed to create our Elastic File Cache.",
    "rationale": "By implementing an Elastic File Cache, frequently accessed data is stored closer to the application, reducing latency and speeding up access times. This approach optimizes resource utilization, improves user experience, and ensures that the system can handle high-demand workloads effectively.",
    "audit": "1. Navigate to the AWS Elastic File Cache console: https://console.aws.amazon.com/fsx/. 2. Click the hamburger menu on the left side of the screen and select ccaches. 3. Select cCreate Cache. 4. Give your Cache a name. Choose a name that you will remember. 5. Select the amount of storage capacity you need for your cache. We'll select 1.2 TiB for this tutorial. You can select storage capacity in increments of 1.2 TiB. 6. Select the amount of throughput capacity. The amount of Throughput capacity is calculated by multiplying the cache storage capacity by the throughput tier. For example, for a 1.2 TiB cache, it's 1200 MB/s; for a 9.6 TiB cache, it's 9600 MB/s. Throughput capacity is the sustained speed at which the file server that hosts your cache can serve data. 7. In the Network & Security section, provide networking and security group information: o For Virtual Private Cloud (VPC) choose the correct amazon VPC that you want to associate with your cache. We're going to use the default VPC. o For VPC Security Groups, the ID for the default security group for your VPC should already be added. o For Subnet, you can choose any of the available subnets. 8. In the Encryption section, choose the Default aws/fsx KMS encryption keys to protect your data by encrypting your data at-rest. 9. You have the option to create tags; this is an optional step. 10. Select cnext. 11. In the Data repository associations (DRAs) section, there are no DRAs linking your cache to S3 or NFS repositories. We need to link the cache that we're creating to the Amazon S3 bucket that we created earlier. o For Data repository type, choose S3 o For Data repository path, type the path of the S3 bucket that you want to associate with this cache. For example: s3://{example-bucket}/{example-prefix} ```       - To access this URL, go back to the S3 bucket that was just created and navigate to the directory of the folder that you created. Select ccopy AWS URI. - For cache path, enter the name of a high-level directory such as /ns1 or subdirectory such as ns1/subdir within Amazon File Cache to associate with the S3 data repository. The first forward slash in the path is required. 12. Select cnext this will take you to the summary page. 13. ChoosecCreate Cache. You will see your cache in the FSx dashboard.",
    "remediation": "References: 1. https://aws.amazon.com/filecache/",
    "function_names": [
      "efs_cache_available",
      "efs_cache_provisioned",
      "efs_cache_operational",
      "efs_cache_deployed"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://aws.amazon.com/filecache/"
  },
  {
    "id": "4.5",
    "title": "Ensure installation and configuration of Lustre Client",
    "assessment": "Manual",
    "description": "To utilize the newly created File Cache, you must install the Lustre Client on your EC2 instance.",
    "rationale": "The Lustre Client facilitates efficient communication between the EC2 instance and the File Cache, ensuring high-performance data access and improved overall system efficiency. This setup is crucial for optimizing data processing and leveraging the benefits of the File Cache.",
    "audit": "Follow along to install the Lustre Client on Ubuntu 22.04: 1. Launch your EC2 instance. Navigate to the folder of your secure key and ssh into the instance using this command: - ssh -i \"{KEY.pem}\" ubuntu@{your ec2 instance} - When prompted to log in with the SSH key, enter in cyes - You should now be connected to your EC2 instance. 2. Run the following command to download and install the public Lustre key: wget -O - https://fsx-lustre-client-repo-public-keys.s3.amazonaws.com/fsx- ubuntu-public-key.asc | gpg --dearmor | sudo tee /usr/share/keyrings/fsx- ubuntu-public-key.gpg >/dev/null  3. Add the AWS Lustre package repository to your local package manager using the following command: sudo bash -c 'echo \"deb [signed-by=/usr/share/keyrings/fsx-ubuntu-public- key.gpg] https://fsx-lustre-client-repo.s3.amazonaws.com/ubuntu jammy main\" > /etc/apt/sources.list.d/fsxlustreclientrepo.list && apt-get update'  4. Determine which kernel is currently running on your client instance and update as needed. The AWS Lustre client on Ubuntu 22.02 requires kernel 5.15.0.1020- aws or later for both x86 based EC2 instances and Arm-based EC2 instanced powered by AWS Graviton processors: a. Run the following command to find out which kernel your machine is running: uname -r o If your kernel is not up to date, run the following command: This will install the kernel update, Lustre client update, as well as reboot your system. sudo apt install -y linux-aws lustre-client-modules-aws && sudo reboot - If your kernel is up to date and you just want to install the latest Lustre version, run this command: sudo apt install -y lustre-client-modules-$(uname -r)",
    "remediation": null,
    "function_names": [
      "compute_instance_lustre_client_installed",
      "compute_instance_lustre_client_configured",
      "compute_instance_lustre_client_operational",
      "compute_instance_lustre_client_version_compatible",
      "compute_instance_lustre_client_dependencies_installed"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "4.6",
    "title": "Ensure EC2 Kernel compatibility with Lustre",
    "assessment": "Manual",
    "description": "The latest kernel included with the Ubuntu Amazon EC2 AMI is not compatible with the Lustre service, which is crucial for mounting the cache on your EC2 instance. To downgrade your kernel, specific prerequisites must be met if you are using the default Ubuntu machine image as of November 8, 2023.",
    "rationale": "The latest kernel version is not supported by Lustre, and meeting the prerequisites for downgrading will allow you to leverage Lustre's high-performance file system capabilities effectively. This ensures optimal data access and processing efficiency on your EC2 instance.",
    "audit": "Follow the steps to downgrade your kernel: 1. List all of the available Lustre packages by typing in this command: sudo apt- cache search lustre-client-modules. This will show a list of supported modules with corresponding kernel versions in ascending order from top to bottom. The most recent version in this case is cclustre-client-modules-5.15.0-1049-aws. Save this information for the next commands. 2. Install the most recent linux image that supports the Lustre client with this command: sudo apt-get install -y linux-image-5.15.0-1049-aws sudo sed -i 's/GRUB_DEFAULT=.\\+/GRUB\\_DEFAULT=\"Advanced options for Ubuntu>Ubuntu, with Linux 5.15.0-1049-aws\"/' /etc/default/grub  3. Reboot your system by typing csudo reboot. 4. Install the correct Lustre module: . sudo apt-get install -y lustre-client-modules-$(uname -r)",
    "remediation": "References: 1. https://docs.aws.amazon.com/fsx/latest/LustreGuide/install-lustre-client.html",
    "function_names": [
      "ec2_instance_kernel_compatible_with_lustre",
      "ec2_ami_kernel_version_compatible_with_lustre",
      "ec2_ubuntu_ami_kernel_downgraded_for_lustre",
      "ec2_lustre_cache_kernel_prerequisites_met",
      "ec2_instance_kernel_version_valid_for_lustre"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/fsx/latest/LustreGuide/install-lustre-client.html"
  },
  {
    "id": "4.7",
    "title": "Ensure mounting FSx cache",
    "assessment": "Manual",
    "description": "Mounting the FSx cache is a crucial step to optimize data retrieval and system performance. This process involves connecting the FSx file system to your compute instances, allowing them to access cached data efficiently. Properly mounting the FSx cache ensures low-latency access to frequently used data, enhances overall application performance, and leverages the full capabilities of the AWS FSx service. This setup is essential for achieving high performance and efficient data processing in your AWS environment.",
    "rationale": "By connecting the FSx file system to your compute instances, you enable low-latency access to frequently used data, significantly improving application performance. This setup leverages the full capabilities of the AWS FSx service, ensuring efficient data processing and resource utilization in your AWS environment. Properly mounting the FSx cache is essential for achieving high performance and operational efficiency.",
    "audit": "To mount your cache, follow the next steps: 1. Make a directory for the mount point with the following command: sudo mkdir -p /mnt  2. Mount the Amazon file cache to the directory that you just created. Use the following command and replace these names: o Replace cache_dns_name with the actual file cache's Domain Name System (DNS) name o Replace mountname with the cache's mount name, which you can get by running the describe-file-caches AWS CLI command or DescribeFileCaches API operation sudo mount -t lustre -o relatime,flock cache_dns_name@tcp:/mountname /mnt Note: Make sure your EC2 instance is in the same VPC as your cache. If done correctly, the path of your folder will show up in the /mnt folder. You can also use the df command to see the DNS and mount point is attached to your file system:",
    "remediation": null,
    "function_names": [
      "fsx_cache_mount_required",
      "fsx"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "4.8",
    "title": "Ensure exporting cache to S3",
    "assessment": "Manual",
    "description": "The S3 bucket we created earlier will store the files generated at this mount point.",
    "rationale": "The rationale behind using the S3 bucket to store files generated at the mount point is to ensure scalable, durable, and cost-effective storage for your data. By exporting files to S3, you benefit from its high availability and robust data management features, which enhances data security and accessibility. This approach also optimizes storage resource utilization and simplifies data backup and retrieval processes.",
    "audit": "We can export the files that were created to the S3 bucket using the following steps: 1. Create a file on the FSx mount point: 2. Run the command: sudo touch efx.txt  3. Now run the command: sudo lsm hsm_archive efx.txt  4. Now check your S3 bucket that was created earlier.",
    "remediation": "References: 1. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups- exporting.html",
    "function_names": [
      "cloud_cdn_distribution_cache_export_to_s3_enabled",
      "cloud_cdn_distribution_cache_s3_export_required",
      "cloud_cdn_distribution_cache_s3_logging_enabled",
      "cloud_cdn_distribution_cache_s3_bucket_configured"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups- exporting.html"
  },
  {
    "id": "4.9",
    "title": "Ensure cleaning up FSx Resources",
    "assessment": "Manual",
    "description": "Cleaning up FSx resources involves removing unused or unnecessary FSx file systems and associated components to optimize costs and maintain a secure cloud environment. This includes deleting redundant file systems, snapshots, and mount targets, while ensuring all data is backed up or migrated. Regular cleanup prevents resource sprawl, reduces expenses, and maintains the overall health and performance of your AWS infrastructure.",
    "rationale": "The rationale for cleaning up FSx resources is to optimize costs and ensure a secure and efficient cloud environment. By removing unused or unnecessary file systems, snapshots, and mount targets, you prevent resource sprawl and reduce unnecessary expenses. Regular cleanup also helps maintain the overall health and performance of your AWS infrastructure, ensuring it remains organized and secure.",
    "audit": "To clean the FSx resources - 1. Terminate the EC2 instance. 2. Delete Fsx cache - On the actions drop down, select delete cache. 3. Verify that you want to delete the service. 4. Select Delete. It will take some time to delete the cache. 5. Delete the S3 Bucket Before you can delete the bucket you must first empty the bucket. Check the radio box and select Empty Select the bucket that you want to delete and select Delete n the S3 console.",
    "remediation": "References: 1. https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/getting-started-step3.html",
    "function_names": [
      "fsx",
      "fsx"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/getting-started-step3.html"
  },
  {
    "id": "5.1",
    "title": "Amazon Simple Storage Service",
    "assessment": "Manual",
    "description": "Amazon Simple Storage Service (Amazon S3) is an object storage service that provides industry-leading scalability, data availability, security, and performance. It allows customers of all sizes and industries to store and protect any amount of data for virtually any use case, including data lakes, cloud-native applications, and mobile apps. With cost-effective storage classes and intuitive management features, you can optimize costs, organize data, and configure precise access controls to meet your specific business, organizational, and compliance requirements.",
    "rationale": "By utilizing S3, businesses of all sizes can efficiently store and protect large amounts of data, ensuring it is accessible when needed. The service's cost-effective storage classes and user-friendly management features help optimize costs and streamline data organization. Additionally, S3's fine-tuned access controls allow organizations to meet specific business, organizational, and compliance requirements, enhancing overall data management and security.",
    "audit": "How Amazon S3 works: 1. To store your data in Amazon S3, you first create a bucket and specify a bucket name and AWS Region. Then, you upload your data to that bucket as objects in Amazon S3. Each object has a key (or key name), which is the unique identifier for the object within the bucket. 2. S3 provides features that you can configure to support your specific use case. For example, you can use S3 Versioning to keep multiple versions of an object in the same bucket, which allows you to restore objects that are accidentally deleted or overwritten. Buckets and the objects in them are private and can be accessed only if you explicitly grant access permissions. You can use bucket policies, AWS Identity and Access Management (IAM) policies, access control lists (ACLs), and S3 Access Points to manage access.",
    "remediation": "References: 1. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html",
    "function_names": [
      "s3",
      "s3_bucket_logging_enabled",
      "s3",
      "s3",
      "s3",
      "s3",
      "s3",
      "s3",
      "s3",
      "s3",
      "s3"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html"
  },
  {
    "id": "5.2",
    "title": "Ensure direct data addition to S3",
    "assessment": "Manual",
    "description": "Your bucket name must be unique and not already in use on AWS. Click on your bucket name, and in the right corner, you will find an option to upload data directly to your S3 bucket. You can choose the file option to upload individual files, images, or even entire folders.",
    "rationale": "Accessing the upload option within your bucket simplifies the process of adding data, making it easy to manage and organize your files. This streamlined approach allows for efficient data storage, retrieval, and management within the AWS S3 environment, enhancing overall operational efficiency.",
    "audit": "Access Point in S3 Bucket: Access points are named network endpoints that are attached to buckets which simplify managing data access at scale in S3. To see if any of the access points attached to this bucket grant public or cross-account access, go to IAM Access Analyzer for S3. 1. Enter a name for the access point. The name must be unique within the AWS account and Region. 2. Choose the VPC (Virtual Private Cloud) and subnet where you want the access point to be accessible. This determines the network traffic routing for the access point. 3. Optionally, you can configure additional settings such as permissions, bucket policy, and endpoint policy for the access point. 4. Review the settings, and click on \"Create access point\" to create the access point",
    "remediation": "References: 1. https://docs.aws.amazon.com/redshift/latest/dg/tutorial-loading-data-upload- files.html",
    "function_names": [
      "s3_bucket_direct_upload_enabled",
      "s3_bucket_unique_name_required",
      "s3_bucket_data_upload_restricted",
      "s3_bucket_file_upload_allowed",
      "s3_bucket_folder_upload_allowed"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/redshift/latest/dg/tutorial-loading-data-upload- files.html"
  },
  {
    "id": "5.3",
    "title": "Ensure Storage Classes are Configured",
    "assessment": "Manual",
    "description": "Amazon S3 offers various storage classes to optimize cost and performance based on data access patterns and retention needs. Standard Storage is for frequently accessed data, while Standard-IA and One Zone-IA are for infrequent access, with the latter offering cost savings by storing in a single Availability Zone. Intelligent-Tiering automatically moves data between access tiers based on usage, and Glacier and Glacier Deep Archive provide low-cost options for long-term archival storage with varying retrieval times. Each class balances availability, durability, performance, and cost, enabling a tailored storage strategy to meet specific requirements.",
    "rationale": "This approach ensures frequently accessed data is readily available, while infrequently accessed data is stored cost-effectively, balancing availability, durability, and cost.",
    "audit": "",
    "remediation": "References: 1. https://aws.amazon.com/s3/storage-classes/",
    "function_names": [
      "s3",
      "s3_bucket_standard_storage_enabled",
      "s3_bucket_standard_ia_storage_enabled",
      "s3_bucket_one_zone_ia_storage_enabled",
      "s3_bucket_storage_class_optimized",
      "s3_bucket_cost_performance_balanced",
      "s3_bucket_availability_configured"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://aws.amazon.com/s3/storage-classes/"
  },
  {
    "id": "6.1",
    "title": "Ensure Elastic Disaster Recovery is Configured",
    "assessment": "Manual",
    "description": "AWS Elastic Disaster Recovery is a service that enables you to create and maintain backups of your workloads on AWS, particularly your servers. This service is crucial for ensuring high resilience for your AWS workloads. It operates by establishing and maintaining backups in selected AWS regions, guaranteeing that your data is safe, durable, and highly available in the event of issues in the primary availability zone or region where your AWS server is located.",
    "rationale": "AWS Elastic Disaster Recovery is crucial for establishing high resiliency in the cloud, synonymous with effective disaster recovery. High resiliency measures your organization's ability to respond to and recover from disasters impacting IT infrastructure. Achieving high resiliency minimizes downtime and long-term costs associated with outages, while low resiliency can result in prolonged downtime, potential data loss, and even permanent infrastructure damage.",
    "audit": "1. Review Disaster Recovery Plans : o Log in to the AWS Management Console. o Navigate to the AWS Elastic Disaster Recovery service. o Locate and open the disaster recovery plans. o Verify that the plans are current and comprehensive, covering all critical workloads. o Ensure that the plans specify clear recovery time objectives (RTO) and recovery point objectives (RPO). 2. Check Backup Configurations : o In the AWS Elastic Disaster Recovery dashboard, review the list of protected servers and workloads. o Confirm that backups are enabled for all critical servers and workloads. o Verify the backup schedule and frequency to ensure they meet organizational requirements. o Check that backups are being stored in the correct AWS regions as specified in the disaster recovery plan. 3. Test Recovery Procedures : o Identify a non-production environment to conduct recovery drills. o Initiate a simulated disaster scenario to test the recovery procedures. o Execute the recovery process for each critical workload. o Measure and document the time taken to recover each workload. o Compare the measured recovery times against the RTO and RPO. o Identify and document any issues or delays encountered during the recovery process. 4. Monitor Backup Integrity : o Open the AWS CloudWatch console. o Set up CloudWatch Alarms to monitor the status of backups. o Configure alerts for any failed or incomplete backups. o Regularly review the CloudWatch logs to verify that backups are successfully completed and stored. 5. Evaluate Backup Storage and Security : o Access the AWS S3 or Glacier console, depending on where backups are stored. o Verify that all backup data is encrypted in transit and at rest. o Check the storage settings to confirm that data is being stored in secure, durable storage solutions. o Review the access control policies to ensure that only authorized personnel have access to backup data. 6. Ensure Compliance with Policies and Regulations : o Review organizational and regulatory compliance requirements relevant to disaster recovery. o Ensure that the disaster recovery practices and configurations comply with these requirements. o Document the compliance efforts, including any specific steps taken to meet industry standards and regulations. o Prepare reports or evidence of compliance for any upcoming audits or assessments.",
    "remediation": "1. Update Disaster Recovery Plans : o Action : Log in to the AWS Management Console. o Procedure : cNavigate to the AWS Elastic Disaster Recovery service. cLocate and review the current disaster recovery plans. cUpdate the plans to ensure they are comprehensive and cover all critical workloads. cEnsure that the plans specify clear recovery time objectives (RTO) and recovery point objectives (RPO). cSave and document the updated plans. 2. Correct Backup Configurations : o Action : Verify and adjust backup settings. o Procedure : cIn the AWS Elastic Disaster Recovery dashboard, review the list of protected servers and workloads. cEnable backups for any critical servers and workloads that are not currently being backed up. cAdjust the backup schedule and frequency to meet organizational requirements. cEnsure backups are stored in the correct AWS regions as specified in the disaster recovery plan. 3. Conduct Recovery Procedure Drills : o Action : Test and refine recovery procedures. o Procedure : cIdentify a non-production environment to conduct recovery drills. cSimulate a disaster scenario to test the recovery procedures. cExecute the recovery process for each critical workload. cMeasure and document the time taken to recover each workload. cCompare the measured recovery times against the RTO and RPO. cIdentify and address any issues or delays encountered during the recovery process. cUpdate the recovery procedures based on the findings from the drill. 4. Ensure Backup Integrity : o Action : Monitor and verify the integrity of backups. o Procedure : cOpen the AWS CloudWatch console. cSet up CloudWatch Alarms to monitor the status of backups. cConfigure alerts for any failed or incomplete backups. cRegularly review CloudWatch logs to verify that backups are successfully completed and stored. cResolve any issues identified in the logs, such as incomplete or failed backups. 5. Enhance Backup Storage and Security : o Action : Improve the storage and security of backup data. o Procedure : cAccess the AWS S3 or Glacier console, depending on where backups are stored. cEnsure all backup data is encrypted in transit and at rest. cAdjust storage settings to confirm that data is being stored in secure, durable storage solutions. cReview and update access control policies to ensure only authorized personnel can access backup data. cImplement any additional security measures necessary to protect the backup data. 6. Ensure Compliance with Policies and Regulations : o Action : Align disaster recovery practices with compliance requirements. o Procedure : cReview organizational and regulatory compliance requirements relevant to disaster recovery. cAdjust disaster recovery practices and configurations to ensure compliance with these requirements. cDocument the compliance efforts, including specific steps taken to meet industry standards and regulations. cPrepare and maintain reports or evidence of compliance for any upcoming audits or assessments.",
    "function_names": [
      "elastic_disaster_recovery_service_enabled",
      "elastic_disaster_recovery_backup_configuration_valid",
      "elastic_disaster_recovery_replication_settings_configured",
      "elastic_disaster_recovery_recovery_instance_launch_settings_valid",
      "elastic_disaster_recovery_source_server_replication_configured",
      "elastic_disaster_recovery_replication_server_security_group_valid",
      "elastic_disaster_recovery_recovery_instance_iam_role_configured",
      "elastic_disaster_recovery_replication_server_encryption_enabled",
      "elastic_disaster_recovery_recovery_snapshot_retention_configured",
      "elastic_disaster_recovery_replication_server_logging_enabled"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "6.2",
    "title": "Ensure AWS Disaster Recovery Configuration",
    "assessment": "Manual",
    "description": "It's important to understand how the network on EDR works. This isn't a simple service to configure, but it works with multiple work loads over the network. You can connect your on-premises or third-party cloud service to AWS EDR over the network. Below are the descriptions of the AWS network architecture: 1. Your local network inside the data center or cloud a.Connect an AWS Replication Agent to each of your resources. 2. AWS Cloud Architecture a. Choose the AWS Region that you want to house your disaster recovery instances. b.Create AWS API Endpoints for EC2, Disaster Recovery, and S3. c.Upon creation of Disaster Recovery endpoints, two subnets will be created in your VPC i.Staging Area Subnets: Replication servers with EBS volumes attached to each disk on the replication servers. ii.Recovery Subnets: Recovery EC2 instances attached to EBS volumes/ d.Connect local network over TCP port 443 to EDR and S3 e.Connect local replication agent to AWS replication servers over TCP port 1500 f.Connectivity out of staging area: Connect staging area on AWS to EDR over TCP port 443 g.Allow connection to S3 over TCP 443 h.Allow connectivity to EC2 over TCP 443 to connect to API Endpoint",
    "rationale": "",
    "audit": "",
    "remediation": "References: 1. https://aws.amazon.com/disaster-recovery/",
    "function_names": [
      "edr_replication_agent_installed",
      "edr_region_specified",
      "edr_api_endpoints_created",
      "edr_staging_subnets_created",
      "edr_recovery_subnets_created",
      "edr_tcp_443_local_to_edr_enabled",
      "edr_tcp_1500_agent_to_replication_enabled",
      "edr_tcp_443_staging_to_edr_enabled",
      "edr_tcp_443_to_s3_enabled",
      "edr_tcp_443_to_ec2_enabled"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://aws.amazon.com/disaster-recovery/"
  },
  {
    "id": "6.3",
    "title": "Ensure functionality of Endpoint Detection and Response (EDR)",
    "assessment": "Manual",
    "description": "Establish and maintain an effective Endpoint Detection and Response (EDR) system to proactively monitor, detect, and respond to security threats on endpoints such as computers, mobile devices, and servers. This involves deploying EDR software that continuously collects data from endpoints, analyzes this data for signs of malicious activity, and provides real-time alerts and detailed incident reports. Regularly test and update the EDR system to ensure it can accurately identify and mitigate advanced threats, including zero-day exploits and sophisticated malware, ensuring comprehensive protection and swift response to potential security incidents.",
    "rationale": "Ensuring the functionality of Endpoint Detection and Response (EDR) systems is essential for early detection and swift response to security threats on endpoints. These systems continuously monitor and analyze endpoint data, providing real-time alerts and detailed incident reports to identify and mitigate potential threats. Regular testing and updates of the EDR system ensure it remains effective against advanced threats, maintaining comprehensive protection for the organization's assets.",
    "audit": "1. Preparing the Environment for EDR - Before getting started with EDR, you must prepare the environment that you want to back up. 2. Preparing the Source Server - Allow direct access to Elastic Disaster Recovery and Amazon S3 AWS service API endpoints through HTTPS protocol (TCP port 443). Direct outbound TCP port 1500 from the source server to the staging area subnet, which contains the replication servers. 3. Preparing the Staging Area Subnet - Allow Direct access to EDR, S3, and EC2 through HTTPS protocol (TCP port 443) Direct inbound TCP port 1500 for replication traffic 4. Accessing the AWS Elastic Disaster Recovery Console - o Search for cAWS Elastic Disaster Recoveryc in the AWS Console. o Select cElastic Disaster Recoveryc 5. Configuring the Replication Settings Template - Select Configure and Initializein in the AWS Elastic Disaster Recovery screen. You will be navigated to setup your replication settings template. This will create a staging area in a subnet of your choice and a replication server instance types. The default replication server instance type will be a t3 micro EC2 instance. This is good for normal workloads with small I/O operations. 6. Next, configure EBS encryption and volume types. This will depend on your workload requirements. 7. To encrypt EBS volumes, leave the setting as cdefault.c If you wish to make a custom encryption setting, you will need to create an AWS KMS key. 8. Configure the security group to your specific needs. Remember what ports need to be opened on inbound / outbound traffic that was specified in previous steps: You can choose how you want your data routed and if you want to throttle network traffic to reserve bandwidth. To keep your data as secure as possible, it's recommended to get set up with a VPN or AWS direct connect, so your backups are not traveling over the public internet. Point in time policy defines the snapshot retention time. Because Elastic Disaster Recovery service uses incremental backups, it's not necessary to keep old copies of backups. Now, you're ready to launch this template.",
    "remediation": null,
    "function_names": [
      "edr_system_functionality_verified",
      "edr_software_deployment_ensured",
      "edr_data_collection_continuous",
      "edr_threat_analysis_real_time_enabled",
      "edr_alerting_system_configured",
      "edr_incident_reporting_detailed",
      "edr_system_testing_regular",
      "edr_threat_detection_advanced_enabled",
      "edr_zero_day_exploit_protection_enabled",
      "edr_malware_protection_sophisticated_enabled",
      "edr_response_mechanism_swift_configured",
      "edr_endpoint_coverage_comprehensive_ensured"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "6.4",
    "title": "Ensure configuration of replication settings",
    "assessment": "Manual",
    "description": "Set up and maintain the replication settings to ensure accurate and efficient data duplication across systems. Proper configuration includes specifying source and target locations, defining replication schedules, and setting bandwidth limits to optimize performance. Regularly review and update these settings to accommodate changes in data volume and network conditions, ensuring data integrity and availability during replication processes.",
    "rationale": "Proper configuration of replication settings is essential to ensure data consistency and availability across systems. Accurate replication schedules and bandwidth management optimize performance and prevent network congestion. Regular reviews and updates of these settings help adapt to changes in data volume and network conditions, maintaining efficient and reliable data replication processes.",
    "audit": "1. Select cConfigure and Initializec in in the AWS Elastic Disaster Recovery screen. You will be navigated to setup your replication settings template. This will create a staging area in a subnet of your choice and a replication server instance types. The default replication server instance type will be a t3 micro EC2 instance. This is good for normal workloads with small I/O operations. 2. Next, configure EBS encryption and volume types. This will depend on your workload requirements. To encrypt EBS volumes, leave the setting as cdefault.c If you wish to make a custom encryption setting, you will need to create an AWS KMS key. 3. Configure the security group to your specific needs. Remember what ports need to be opened on inbound / outbound traffic that was specified in previous steps: o Configure Additional Replication settings. o You can choose how you want your data routed and if you want to throttle network traffic to reserve bandwidth. To keep your data as secure as possible, it's recommended to get set up with a VPN or AWS direct connect, so your backups are not traveling over the public internet. o Point in time policy defines the snapshot retention time. Because Elastic Disaster Recovery service uses incremental backups, it's not necessary to keep old copies of backups. Now, you're ready to launch this template.",
    "remediation": null,
    "function_names": [
      "storage_bucket_replication_enabled",
      "storage_bucket_replication_schedule_defined",
      "storage_bucket_replication_bandwidth_limited",
      "storage_bucket_replication_target_configured",
      "storage_bucket_replication_source_configured",
      "storage_bucket_replication_integrity_verified",
      "storage_bucket_replication_reviewed_over_90d",
      "storage_bucket_replication_settings_updated"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "6.5",
    "title": "Ensure proper IAM configuration for AWS Elastic Disaster Recovery",
    "assessment": "Manual",
    "description": "Set up and maintain Identity and Access Management (IAM) roles and policies specifically for AWS Elastic Disaster Recovery. This includes defining least-privilege access for users and services, creating roles for automated processes, and enforcing multi-factor authentication (MFA) for added security. Regularly review and update IAM policies to adapt to changes in the organization and to maintain compliance with security best practices, ensuring that only authorized personnel and services can access and manage disaster recovery resources.",
    "rationale": "Proper IAM configuration for AWS Elastic Disaster Recovery ensures that only authorized users and services have access to critical recovery functions, reducing the risk of unauthorized access and potential security breaches. Implementing least- privilege access and MFA enhances security by limiting permissions and adding an extra layer of authentication. Regular reviews and updates of IAM policies help maintain security compliance and adapt to organizational changes, ensuring continuous protection of disaster recovery resources.",
    "audit": "To create DRS Agent User, follow following steps: 1. Navigate to the AWS IAM Console - https://us-east- 1.console.aws.amazon.com/iam/home?region=us-east-1#/home. 2. Create new user. This user will only be able to access the Elastic disaster recovery agent installation resource. Accordingly, name the user cDSRuser. 3. Allow Programmatic access: This allows the user to access resources programmatically with a secure key rather than having to enter a password. 4. elect cattach policies directlyc and search for cAWSElasticDisasterRecoveryAgentInstallationPolicyc. 5. Create user. To create Failback Agent User, Follow the steps above with these two modifications: 1. Name the user cFailbackAgentuser. 2. Apply the cAWSElasticDisasterRecoveryFailbackInstallationPolicyc.",
    "remediation": "Default Value: Configure IAM Credentials for AWS Elastic Disaster Recovery. References: 1. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/home",
    "function_names": [
      "iam_role_elastic_disaster_recovery_assumed",
      "iam_policy_elastic_disaster_recovery_restricted_access",
      "iam_user_elastic_disaster_recovery_mfa_enabled",
      "iam_role_elastic_disaster_recovery_automated_processes",
      "iam_policy_elastic_disaster_recovery_regular_review",
      "iam_role_elastic_disaster_recovery_authorized_personnel_only",
      "iam_policy_elastic_disaster_recovery_no_wildcard_permissions",
      "iam_user_elastic_disaster_recovery_no_inline_policies",
      "iam_role_elastic_disaster_recovery_no_unused_credentials",
      "iam_policy_elastic_disaster_recovery_no_public_access"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://us-east-1.console.aws.amazon.com/iam/home?region=us-east-1#/home"
  },
  {
    "id": "6.6",
    "title": "Ensure installation of the AWS Replication Agent",
    "assessment": "Manual",
    "description": "Set up and verify the installation of the AWS Replication Agent on all relevant systems to facilitate efficient and reliable data replication. This process includes downloading the agent, configuring it according to best practices, and ensuring it is correctly integrated with your AWS environment. Regularly check the agent's performance and update it as needed to maintain optimal functionality and data integrity during replication processes.",
    "rationale": "Installing the AWS Replication Agent is crucial for enabling efficient and reliable data replication, ensuring that critical data is accurately duplicated across systems. Proper configuration and integration with your AWS environment optimize the agent's performance, enhancing data availability and disaster recovery capabilities. Regular checks and updates of the replication agent help maintain its effectiveness, ensuring data integrity and minimizing the risk of replication failures.",
    "audit": "1. On the source servers page, from Actions, choose add servers to obtain the agent installer link. 2. On your source server (in our case, the EC2 instance that was already created) download the appropriate agent installer for your operating system. o For Linux instance on US-East-1. Substitute your region in the {Region} brackets of this command: wget -O ./aws-replication-installer-init https://aws-elastic-disaster- recovery-us-east-1.s3.us-east-1.amazonaws.com/latest/linux/aws-replication- installer-init  3. Run following command: chmod +x aws-replication-installer-init; sudo ./aws-replication-installer- init  4. Type in your region. Region is case sensitive: if you're in us-east-1, make sure you type us-east-1. 5. If you're using SSH, you will be prompted with your activation ID and secret activation key. Make sure you have those accessible for the IAM user you're using. You can generate a new key from the IAM dashboard if you forgot to save your key. 6. Select cEnterc to replicate all servers. 7. All servers should replicate. 8. Make sure your OS is up to date. If you run into an error replicating your devices, view the documentation on troubleshooting the AWS replication installation here: https://docs.aws.amazon.com/mgn/latest/ug/installation-requirements.html. 9. If install runs successfully, the source server will appear in your Elastic Disaster Recovery Console dashboard on the csource serversc page. This will signify the beginning of the replication process.",
    "remediation": "References: 1. https://docs.aws.amazon.com/mgn/latest/ug/agent-installation.html",
    "function_names": [
      "replication_agent_installed",
      "replication_agent_configured",
      "replication_agent_performance_checked"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/mgn/latest/ug/agent-installation.html"
  },
  {
    "id": "6.7",
    "title": "Ensure proper configuration of the Launch Settings",
    "assessment": "Manual",
    "description": "Set up and verify the launch settings to ensure systems and applications start correctly and securely. This includes defining startup parameters, specifying required resources, and configuring security settings to prevent unauthorized changes. Regularly review and update these settings to align with best practices and organizational requirements, ensuring optimal performance and security at launch.",
    "rationale": "Proper configuration of launch settings is crucial for ensuring that systems and applications start securely and perform optimally. Defining startup parameters and resource requirements prevents potential issues and enhances efficiency. Regular reviews and updates to these settings help maintain alignment with best practices and evolving organizational needs, thereby strengthening security and operational reliability from the moment of launch.",
    "audit": "The settings can be changed after instances have been launched, but a new instance must be launched for new launch settings to take effect. 1. Select launch settings on the source server page 2. Configure launch settings o On the launch settings page, next to general launch, select cedit. 3. Configure EC2 launch template o Enable auto assign public IP and change the instance type to a t2.medium 4. Set version to default in the console 5. Set the default version that was just created to default version 6. Return to the dashboard and confirm your configurations are correct.",
    "remediation": null,
    "function_names": [
      "compute_instance_secure_launch_settings",
      "compute_instance_startup_parameters_configured",
      "compute_instance_resource_requirements_defined",
      "compute_instance_security_settings_enabled",
      "compute_instance_launch_configuration_reviewed",
      "compute_instance_startup_integrity_verified",
      "compute_instance_launch_permissions_restricted",
      "compute_instance_launch_logging_enabled",
      "compute_instance_launch_encryption_enabled"
    ],
    "profile_applicability": "â€¢  Level 2"
  },
  {
    "id": "6.8",
    "title": "Ensure execution of a recovery drill",
    "assessment": "Manual",
    "description": "To ensure your organization is prepared for a disaster, it's crucial to verify that your disaster recovery services function as expected. Your IT team should conduct regular recovery drills on your AWS Elastic Recovery Instance to confirm everything operates smoothly and according to plan.",
    "rationale": "Regular recovery drills are essential to verify the functionality of your disaster recovery services and ensure your organization is well-prepared for any disruptions. By conducting these drills on your AWS Elastic Recovery Instance, you can identify and address potential issues before they impact operations. This proactive approach enhances the reliability and effectiveness of your disaster recovery plan, providing confidence that your systems can recover swiftly and efficiently in the event of a disaster.",
    "audit": "Steps to perform a recovery drill: 1. Navigate to source servers tab in AWS Elastic Disaster Recovery Dashboard. 2. Make sure that all servers you launch show as cReady under cstatus, report as chealthy in the data replication status column, and that pending actions show as cinitiate drill. 3. Select cinitiate drill under the orange dropdown menu. Make sure that you don't initiate a real recovery job. 4. Choose a recovery point. Normally, it makes sense to choose the most recent recovery point, but you can also choose a recovery point from earlier. 5. Select the orange cinitiate drill to initiate the recovery drill. 6. To complete the recovery drill, clean up your resources by deleting the recovery instance by selecting actions and cterminate recovery instancesc.",
    "remediation": "References: 1. https://docs.aws.amazon.com/drs/latest/userguide/failback-preparing.html",
    "function_names": [
      "disaster_recovery_instance_recovery_drill_executed",
      "disaster_recovery_instance_recovery_drill_scheduled",
      "disaster_recovery_instance_recovery_drill_successful",
      "disaster_recovery_instance_recovery_drill_documented",
      "disaster_recovery_instance_recovery_drill_over_90d",
      "disaster_recovery_instance_recovery_drill_all_regions"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/drs/latest/userguide/failback-preparing.html"
  },
  {
    "id": "6.9",
    "title": "Ensure Continuous Disaster Recovery Operations",
    "assessment": "Manual",
    "description": "Maintain ongoing disaster recovery operations to ensure that systems and data can be swiftly restored in the event of a disruption. This involves regularly updating and testing recovery plans, monitoring replication processes, and verifying the integrity and accessibility of backups. Continuously evaluate and improve disaster recovery strategies to adapt to evolving threats and organizational changes, ensuring resilience and minimal downtime during incidents.",
    "rationale": "Maintaining continuous disaster recovery operations is essential for ensuring that systems and data can be quickly and effectively restored following a disruption. Regular updates and tests of recovery plans, along with constant monitoring of replication processes, help verify the integrity and availability of backups. This proactive approach allows organizations to adapt to evolving threats and changes, ensuring resilience and minimizing downtime during incidents, which ultimately protects business continuity and reduces potential losses.",
    "audit": "1. Review Disaster Recovery Plan: o Verify that a comprehensive disaster recovery (DR) plan exists and is regularly updated. o Ensure the DR plan includes detailed procedures for data backup, system recovery, and failover processes. o Check for documentation of roles and responsibilities during a disaster event. 2. Check Backup and Replication Settings: o Confirm that AWS Backup is configured correctly for all critical systems and data. o Review the settings for Amazon RDS, EBS snapshots, S3 versioning, and other AWS services to ensure backups are automated and scheduled appropriately. o Ensure that replication settings are configured to replicate data across multiple AWS regions for added redundancy. 3. Test Recovery Procedures: o Verify that regular recovery drills are conducted to test the DR plan's effectiveness. o Check the logs and reports from these drills to ensure that any issues identified are addressed promptly. o Ensure that the most recent recovery drill results are documented and reviewed by relevant stakeholders. 4. Monitor and Log Review: o Ensure CloudWatch logs and alarms are set up to monitor backup and replication processes. o Review CloudTrail logs to verify that DR-related actions are being logged and monitored. o Check for alerts and notifications related to backup failures, replication issues, or any anomalies in the DR processes. 5. Evaluate Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO): o Verify that the DR plan specifies RTO and RPO for all critical systems and data. o Ensure that actual recovery times and points from recent drills meet or exceed the defined objectives. 6. Review Access Controls: o Check IAM policies to ensure that only authorized personnel have access to manage and initiate disaster recovery operations. o Verify that multi-factor authentication (MFA) is enabled for accounts with access to DR resources. 7. Assess Security and Compliance: o Ensure that data encryption is enabled for all backups and replicated data. o Verify compliance with industry standards and regulations (e.g., GDPR, HIPAA) concerning data protection and disaster recovery. 8. Continuous Improvement: o Review post-mortem reports from actual incidents and recovery drills to identify areas for improvement. o Ensure that feedback loops are in place for continuous enhancement of the DR plan and procedures. o Confirm that lessons learned from incidents and drills are incorporated into the DR plan. 9. Regular Updates and Communication: o Ensure the DR plan is reviewed and updated at least annually or whenever significant changes occur in the IT environment. o Verify that all relevant personnel are trained on the DR procedures and aware of their roles. o Check that regular communication channels are established for DR updates and training sessions.",
    "remediation": "References: 1. https://docs.aws.amazon.com/whitepapers/latest/disaster-recovery-workloads- on-aws/disaster-recovery-options-in-the-cloud.html",
    "function_names": [
      "compute_instance_replication_enabled",
      "compute_instance_backup_integrity_verified",
      "compute_instance_recovery_plan_updated",
      "compute_instance_recovery_plan_tested",
      "compute_instance_backup_accessibility_verified",
      "compute_instance_recovery_strategy_evaluated",
      "compute_instance_recovery_strategy_improved",
      "compute_instance_downtime_minimized",
      "compute_instance_disaster_recovery_continuous"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/whitepapers/latest/disaster-recovery-workloads- on-aws/disaster-recovery-options-in-the-cloud.html"
  },
  {
    "id": "6.10",
    "title": "Ensure execution of a Disaster Recovery Failover",
    "assessment": "Manual",
    "description": "Execute a comprehensive disaster recovery failover to transition operations from the primary system to a backup system during disruptions. This process includes ensuring all critical data and applications are accurately replicated to the backup site for seamless operational continuity. Regularly test and document the failover process to identify and resolve any issues, maintaining readiness to minimize downtime and data loss during real disasters.",
    "rationale": "Executing a comprehensive disaster recovery failover is essential to ensure operational continuity during disruptions. Accurate replication of critical data and applications to the backup site guarantees that business operations can continue seamlessly. Regular testing and documentation of the failover process help identify and resolve potential issues, maintaining a state of readiness and minimizing downtime and data loss in actual disaster scenarios.",
    "audit": "Follow the steps where we learned how to conduct a recovery drill with the below modifications: 1. Choose the server that you want to recover and failover. On the initiate recovery job menu, choose cinitiate recovery. 2. Choose a point in time to recover from backup. 3. Choose initiate recovery to create a recovery job. Note: You can use the job details to monitor the progress and status of the recovery job. After the recovery job has completed, the last recovery result of your source server will report csuccessful. The EC2 instance ID of the launched recovery instance will also be listed in the source server overview. You can test if the recovery instance is functioning by testing the EC2 instance that is in the source server overview.",
    "remediation": "Default Value: Implement a disaster recovery failover. References: 1. https://docs.aws.amazon.com/drs/latest/userguide/failback-preparing- failover.html",
    "function_names": [
      "cloud_dr_failover_executed",
      "cloud_dr_failover_replication_verified",
      "cloud_dr_failover_testing_regular",
      "cloud_dr_failover_documentation_complete",
      "cloud_dr_failover_critical_data_replicated",
      "cloud_dr_failover_operational_continuity_ensured",
      "cloud_dr_failover_downtime_minimized",
      "cloud_dr_failover_issues_resolved",
      "cloud_dr_failover_readiness_maintained",
      "cloud_dr_failover_process_validated"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/drs/latest/userguide/failback-preparing- failover.html"
  },
  {
    "id": "6.11",
    "title": "Ensure execution of a failback",
    "assessment": "Manual",
    "description": "This method involves transitioning operations back from the backup or recovery system to the primary system after the resolution of a disruption or disaster. You can execute a failback either to the original server, ensuring continuity and restoring the previous state, or to a new server, which might be necessary if the original server is compromised or no longer functional. The failback process ensures that all updated data and configurations are transferred back, maintaining the integrity and functionality of the primary system.",
    "rationale": "A failback is crucial for restoring normal operations after a disaster recovery scenario. Transitioning operations back to the primary system ensures continuity and leverages the original environment's configurations and settings. This process can be directed either to the original server, maintaining the existing infrastructure, or to a new server if the original is compromised. Ensuring all data and configurations are accurately transferred back preserves system integrity and functionality, reducing downtime and allowing the organization to resume normal operations efficiently. Impact: Failback Prerequisites:  The volumes on the server you are failing back to are the same size or larger than the recovery instance if failing back to a new server.  The failback client has the proper permissions to access both Elastic Disaster Recovery and S3 services on TCP port 1500 inbound and TCP port 443 outbound to communicate with the failback client.  A public IP is added to the recovery instance.",
    "audit": "Performing the failback: 1. Download the failback client ISO 2. Attach the ISO to your original server and boot up the server. o The failback client will prompt for the IAM access key and secret key generated when making the user with the permission to access the failback. It will also ask for the region of the recovery instance. Remember: regions are case sensitive. If you're in US east 1, type us-east-1. o If you are failing back to the original server, the failback client will automatically detect the recovery instance and map the data volumes for replication. o If you are failing back to a new server, you may need to manually specify from a list of available recovery instances and map the data volumes. o The failback client will verify that the chosen recovery instance has connectivity to the Elastic Disaster Recovery service. o The replication software will be downloaded to the failback client and then configured. Connectivity will be made between the failback client and the replication agent on the recovery instance to begin data replication. 3. Return to the elastic disaster recovery console and recovery instances to see the current state of replication. Failing back to the original server will show crescan in the console, while failing back o a new instance will perform an cinitial sync. 4. After the data replication is completed, you will be able to perform the failback. o Check the state of the recovery instance to ensure that it's ready to complete a failback. o Select your recovery instance, then choose failback for the chosen recovery instance(s). o Choose failback again the complete a failback for the chosen recovery instance(s). During the failback process, the failback client will prepare your source server for normal operation. After it has completed successfully, the failback client will return cfailback completed successfully in the console. 5. Reboot the server and return to normal operations. 6. Clean up failback job; terminate recovery job by following the steps outlined above when we ran a drill.",
    "remediation": "References: 1. https://docs.aws.amazon.com/drs/latest/userguide/failback-performing-main.html",
    "function_names": [
      "compute_instance_failback_execution",
      "compute_instance_failback_original_server",
      "compute_instance_failback_new_server",
      "compute_instance_failback_data_integrity",
      "compute_instance_failback_configuration_sync",
      "compute_instance_failback_primary_system_restored",
      "compute_instance_failback_continuity_ensured",
      "compute_instance_failback_disaster_recovery_completed"
    ],
    "profile_applicability": "â€¢  Level 2",
    "impact": "Failback Prerequisites:  The volumes on the server you are failing back to are the same size or larger than the recovery instance if failing back to a new server.  The failback client has the proper permissions to access both Elastic Disaster Recovery and S3 services on TCP port 1500 inbound and TCP port 443 outbound to communicate with the failback client.  A public IP is added to the recovery instance.",
    "references": "1. https://docs.aws.amazon.com/drs/latest/userguide/failback-performing-main.html"
  },
  {
    "id": "6.12",
    "title": "Ensure CloudWatch Metrics for AWS EDR",
    "assessment": "Manual",
    "description": "Set up and monitor AWS CloudWatch metrics for Endpoint Detection and Response (EDR) to track and analyze the performance and security of your AWS environment. This involves configuring CloudWatch to collect detailed logs and metrics on EDR activities, such as threat detections, response actions, and system health. Regularly review these metrics to identify trends, anomalies, and potential security issues, enabling proactive management and timely responses to ensure the effectiveness of your EDR solution.",
    "rationale": "Implementing AWS CloudWatch metrics for Endpoint Detection and Response (EDR) is essential for maintaining a secure and efficient AWS environment. By collecting detailed logs and metrics on EDR activities, you gain valuable insights into the performance and health of your security measures. Regular review of these metrics allows for the early detection of trends, anomalies, and potential security threats, enabling proactive management and swift responses to maintain the integrity and effectiveness of your EDR solution. This continuous monitoring ensures that your security posture remains robust and adaptive to evolving threats.",
    "audit": "1. Sign in to the AWS Management Console: o Open the AWS Management Console and sign in with your credentials. 2. Navigate to CloudWatch: o In the AWS Management Console, navigate to the CloudWatch service. 3. Create a CloudWatch Log Group: o Select Logs from the navigation pane. o Click on Create log group . o Enter a name for the log group and click Create . 4. Configure AWS EDR to Send Logs to CloudWatch: o Go to the AWS EDR (Elastic Disaster Recovery) console. o In the AWS EDR console, configure your settings to send logs and metrics to the CloudWatch log group you created. 5. Set Up CloudWatch Alarms: o In the CloudWatch console, select Alarms from the navigation pane. o Click on Create Alarm . o Select the metric you want to monitor from the list of AWS EDR metrics. o Configure the conditions for the alarm (e.g., threshold, period, etc.). o Set the actions to take when the alarm state is triggered (e.g., send a notification). o Review and create the alarm. 6. Create CloudWatch Dashboards: o In the CloudWatch console, select Dashboards from the navigation pane. o Click on Create dashboard . o Enter a name for your dashboard and click Create . o Add widgets to the dashboard by selecting the relevant AWS EDR metrics. o Customize the widgets to display the data in a meaningful way (e.g., graphs, numbers). 7. Enable CloudWatch Logs Insights: o In the CloudWatch console, select Logs Insights from the navigation pane. o Choose the log group you created for AWS EDR. o Use CloudWatch Logs Insights queries to analyze the log data and extract meaningful insights. 8. Set Up CloudWatch Events: o In the CloudWatch console, select Events from the navigation pane. o Click on Create rule . o Define the event source and the specific events you want to capture (e.g., changes in EDR status). o Set the target for the event (e.g., send a notification, invoke a Lambda function). o Configure the rule and click Create rule .",
    "remediation": "References: 1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsClou dWatch.html",
    "function_names": [
      "cloudwatch_edr_metrics_reviewed_regularly",
      "cloudwatch_edr_logging_enabled",
      "cloudwatch_edr_anomaly_detection_enabled",
      "cloudwatch_edr_threat_monitoring_enabled",
      "cloudwatch_edr_health_metrics_enabled",
      "cloudwatch_edr_alerts_configured"
    ],
    "profile_applicability": "â€¢  Level 2",
    "references": "1. https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsClou dWatch.html"
  },
  {
    "id": "6.13",
    "title": "Ensure working of EDR",
    "assessment": "Manual",
    "description": "",
    "rationale": "",
    "audit": "1. Preparing the Environment for EDR - Before getting started with EDR, you must prepare the environment that you want to back up. 2. Preparing the Source Server - Allow direct access to Elastic Disaster Recovery and Amazon S3 AWS service API endpoints through HTTPS protocol (TCP port 443). Direct outbound TCP port 1500 from the source server to the staging area subnet, which contains the replication servers. 3. Preparing the Staging Area Subnet - Allow Direct access to EDR, S3, and EC2 through HTTPS protocol (TCP port 443) Direct inbound TCP port 1500 for replication traffic 4. Accessing the AWS Elastic Disaster Recovery Console - o Search for cAWS Elastic Disaster Recoveryc in the AWS Console. o Select cElastic Disaster Recoveryc 5. Configuring the Replication Settings Template - Select Configure and Initializein in the AWS Elastic Disaster Recovery screen. You will be navigated to setup your replication settings template. This will create a staging area in a subnet of your choice and a replication server instance types. The default replication server instance type will be a t3 micro EC2 instance. This is good for normal workloads with small I/O operations. 6. Next, configure EBS encryption and volume types. This will depend on your workload requirements. 7. To encrypt EBS volumes, leave the setting as cdefault.c If you wish to make a custom encryption setting, you will need to create an AWS KMS key. 8. Configure the security group to your specific needs. Remember what ports need to be opened on inbound / outbound traffic that was specified in previous steps: You can choose how you want your data routed and if you want to throttle network traffic to reserve bandwidth. To keep your data as secure as possible, it's recommended to get set up with a VPN or AWS direct connect, so your backups are not traveling over the public internet. Point in time policy defines the snapshot retention time. Because Elastic Disaster Recovery service uses incremental backups, it's not necessary to keep old copies of backups. Now, you're ready to launch this template.",
    "remediation": "Appendix: Summary Table CIS Benchmark Recommendation Set Correctly Yes No 1 Introduction 1.1 AWS Storage Backups (Manual)  f  f 1.2 Ensure securing AWS Backups (Manual)  f  f 1.3 Ensure to create backup template and name (Manual)  f  f 1.4 Ensure to create AWS IAM Policies (Manual)  f  f 1.5 Ensure to create IAM roles for Backup (Manual)  f  f 1.6 Ensure AWS Backup with Service Linked Roles (Manual)  f  f 2 Elastic Block Store (EBS) 2.1 Ensure creating EC2 instance with EBS (Manual)  f  f 2.2 Ensure configuring Security Groups (Manual)  f  f 2.3 Ensure the proper configuration of EBS storage (Manual)  f  f 2.4 Ensure the creation of a new volume (Manual)  f  f 2.5 Ensure creating snapshots of EBS volumes (Manual)  f  f 2.6 Ensure Proper IAM Configuration for EC2 Instances (Manual)  f  f 2.7 Ensure creating IAM User (Manual)  f  f 2.8 Ensure the Creation of IAM Groups (Manual)  f  f 2.9 Ensure Granular Policy Creation (Manual)  f  f 2.10 Ensure Resource Access via Tag-based Policies (Manual)  f  f CIS Benchmark Recommendation Set Correctly Yes No 2.11 Ensure Secure Password Policy Implementation (Manual)  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch (Manual)  f  f 2.13 Ensure creating an SNS subscription (Manual)  f  f 3 Elastic File System (EFS) 3.1 EFS (Manual)  f  f 3.2 Ensure Implementation of EFS (Manual)  f  f 3.3 Ensure EFS and VPC Integration (Manual)  f  f 3.4 Ensure controlling Network access to EFS Services (Manual)  f  f 3.5 Ensure using Security Groups for VPC (Manual)  f  f 3.6 Ensure Secure Ports (Manual)  f  f 3.7 Ensure File-Level Access Control with Mount Targets (Manual)  f  f 3.8 Ensure managing mount target security groups (Manual)  f  f 3.9 Ensure using VPC endpoints - EFS (Manual)  f  f 3.10 Ensure managing AWS EFS access points (Manual)  f  f 3.11 Ensure accessing Points and IAM Policies (Manual)  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery (Manual)  f  f 4 FSx 4.1 FSX (AWS Elastic File Cache) (Manual)  f  f 4.2 Amazon Elastic File Cache (Manual)  f  f CIS Benchmark Recommendation Set Correctly Yes No 4.3 Ensure the creation of an FSX Bucket (Manual)  f  f 4.4 Ensure the creation of Elastic File Cache (Manual)  f  f 4.5 Ensure installation and configuration of Lustre Client (Manual)  f  f 4.6 Ensure EC2 Kernel compatibility with Lustre (Manual)  f  f 4.7 Ensure mounting FSx cache (Manual)  f  f 4.8 Ensure exporting cache to S3 (Manual)  f  f 4.9 Ensure cleaning up FSx Resources (Manual)  f  f 5 Simple Storage Service (S3) 5.1 Amazon Simple Storage Service (Manual)  f  f 5.2 Ensure direct data addition to S3 (Manual)  f  f 5.3 Ensure Storage Classes are Configured (Manual)  f  f 6 Elastic Disaster Recovery (EDR) 6.1 Ensure Elastic Disaster Recovery is Configured (Manual)  f  f 6.2 Ensure AWS Disaster Recovery Configuration (Manual)  f  f 6.3 Ensure functionality of Endpoint Detection and Response (EDR) (Manual)  f  f 6.4 Ensure configuration of replication settings (Manual)  f  f 6.5 Ensure proper IAM configuration for AWS Elastic Disaster Recovery (Manual)  f  f 6.6 Ensure installation of the AWS Replication Agent (Manual)  f  f 6.7 Ensure proper configuration of the Launch Settings (Manual)  f  f CIS Benchmark Recommendation Set Correctly Yes No 6.8 Ensure execution of a recovery drill (Manual)  f  f 6.9 Ensure Continuous Disaster Recovery Operations (Manual)  f  f 6.10 Ensure execution of a Disaster Recovery Failover (Manual)  f  f 6.11 Ensure execution of a failback (Manual)  f  f 6.12 Ensure CloudWatch Metrics for AWS EDR (Manual)  f  f 6.13 Ensure working of EDR (Manual)  f  f   Appendix: CIS Controls v7 IG 1 Mapped Recommendations Recommendation Set Correctly Yes No 2.5 Ensure creating snapshots of EBS volumes  f  f 2.6 Ensure Proper IAM Configuration for EC2 Instances  f  f 2.11 Ensure Secure Password Policy Implementation  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch  f  f 3.1 EFS  f  f 3.3 Ensure EFS and VPC Integration  f  f 3.7 Ensure File-Level Access Control with Mount Targets  f  f 3.8 Ensure managing mount target security groups  f  f 3.9 Ensure using VPC endpoints - EFS  f  f 3.10 Ensure managing AWS EFS access points  f  f 3.11 Ensure accessing Points and IAM Policies  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery  f  f 4.1 FSX (AWS Elastic File Cache)  f  f 4.2 Amazon Elastic File Cache  f  f 4.3 Ensure the creation of an FSX Bucket  f  f 5.1 Amazon Simple Storage Service  f  f 5.2 Ensure direct data addition to S3  f  f 6.1 Ensure Elastic Disaster Recovery is Configured  f  f 6.2 Ensure AWS Disaster Recovery Configuration  f  f 6.4 Ensure configuration of replication settings  f  f 6.5 Ensure proper IAM configuration for AWS Elastic Disaster Recovery  f  f 6.6 Ensure installation of the AWS Replication Agent  f  f 6.9 Ensure Continuous Disaster Recovery Operations  f  f 6.10 Ensure execution of a Disaster Recovery Failover  f  f 6.11 Ensure execution of a failback  f  f    Appendix: CIS Controls v7 IG 2 Mapped Recommendations Recommendation Set Correctly Yes No 2.2 Ensure configuring Security Groups  f  f 2.3 Ensure the proper configuration of EBS storage  f  f 2.4 Ensure the creation of a new volume  f  f 2.5 Ensure creating snapshots of EBS volumes  f  f 2.6 Ensure Proper IAM Configuration for EC2 Instances  f  f 2.7 Ensure creating IAM User  f  f 2.8 Ensure the Creation of IAM Groups  f  f 2.9 Ensure Granular Policy Creation  f  f 2.11 Ensure Secure Password Policy Implementation  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch  f  f 3.1 EFS  f  f 3.2 Ensure Implementation of EFS  f  f 3.3 Ensure EFS and VPC Integration  f  f 3.4 Ensure controlling Network access to EFS Services  f  f 3.5 Ensure using Security Groups for VPC  f  f 3.6 Ensure Secure Ports  f  f 3.7 Ensure File-Level Access Control with Mount Targets  f  f 3.8 Ensure managing mount target security groups  f  f 3.9 Ensure using VPC endpoints - EFS  f  f 3.10 Ensure managing AWS EFS access points  f  f 3.11 Ensure accessing Points and IAM Policies  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery  f  f 4.1 FSX (AWS Elastic File Cache)  f  f 4.2 Amazon Elastic File Cache  f  f 4.3 Ensure the creation of an FSX Bucket  f  f 4.5 Ensure installation and configuration of Lustre Client  f  f Recommendation Set Correctly Yes No 4.6 Ensure EC2 Kernel compatibility with Lustre  f  f 4.7 Ensure mounting FSx cache  f  f 4.9 Ensure cleaning up FSx Resources  f  f 5.1 Amazon Simple Storage Service  f  f 5.2 Ensure direct data addition to S3  f  f 5.3 Ensure Storage Classes are Configured  f  f 6.1 Ensure Elastic Disaster Recovery is Configured  f  f 6.2 Ensure AWS Disaster Recovery Configuration  f  f 6.3 Ensure functionality of Endpoint Detection and Response (EDR)  f  f 6.4 Ensure configuration of replication settings  f  f 6.5 Ensure proper IAM configuration for AWS Elastic Disaster Recovery  f  f 6.6 Ensure installation of the AWS Replication Agent  f  f 6.7 Ensure proper configuration of the Launch Settings  f  f 6.8 Ensure execution of a recovery drill  f  f 6.9 Ensure Continuous Disaster Recovery Operations  f  f 6.10 Ensure execution of a Disaster Recovery Failover  f  f 6.11 Ensure execution of a failback  f  f    Appendix: CIS Controls v7 IG 3 Mapped Recommendations Recommendation Set Correctly Yes No 2.1 Ensure creating EC2 instance with EBS  f  f 2.2 Ensure configuring Security Groups  f  f 2.3 Ensure the proper configuration of EBS storage  f  f 2.4 Ensure the creation of a new volume  f  f 2.5 Ensure creating snapshots of EBS volumes  f  f 2.6 Ensure Proper IAM Configuration for EC2 Instances  f  f 2.7 Ensure creating IAM User  f  f 2.8 Ensure the Creation of IAM Groups  f  f 2.9 Ensure Granular Policy Creation  f  f 2.10 Ensure Resource Access via Tag-based Policies  f  f 2.11 Ensure Secure Password Policy Implementation  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch  f  f 3.1 EFS  f  f 3.2 Ensure Implementation of EFS  f  f 3.3 Ensure EFS and VPC Integration  f  f 3.4 Ensure controlling Network access to EFS Services  f  f 3.5 Ensure using Security Groups for VPC  f  f 3.6 Ensure Secure Ports  f  f 3.7 Ensure File-Level Access Control with Mount Targets  f  f 3.8 Ensure managing mount target security groups  f  f 3.9 Ensure using VPC endpoints - EFS  f  f 3.10 Ensure managing AWS EFS access points  f  f 3.11 Ensure accessing Points and IAM Policies  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery  f  f 4.1 FSX (AWS Elastic File Cache)  f  f 4.2 Amazon Elastic File Cache  f  f Recommendation Set Correctly Yes No 4.3 Ensure the creation of an FSX Bucket  f  f 4.5 Ensure installation and configuration of Lustre Client  f  f 4.6 Ensure EC2 Kernel compatibility with Lustre  f  f 4.7 Ensure mounting FSx cache  f  f 4.9 Ensure cleaning up FSx Resources  f  f 5.1 Amazon Simple Storage Service  f  f 5.2 Ensure direct data addition to S3  f  f 5.3 Ensure Storage Classes are Configured  f  f 6.1 Ensure Elastic Disaster Recovery is Configured  f  f 6.2 Ensure AWS Disaster Recovery Configuration  f  f 6.3 Ensure functionality of Endpoint Detection and Response (EDR)  f  f 6.4 Ensure configuration of replication settings  f  f 6.5 Ensure proper IAM configuration for AWS Elastic Disaster Recovery  f  f 6.6 Ensure installation of the AWS Replication Agent  f  f 6.7 Ensure proper configuration of the Launch Settings  f  f 6.8 Ensure execution of a recovery drill  f  f 6.9 Ensure Continuous Disaster Recovery Operations  f  f 6.10 Ensure execution of a Disaster Recovery Failover  f  f 6.11 Ensure execution of a failback  f  f    Appendix: CIS Controls v7 Unmapped Recommendations Recommendation Set Correctly Yes No 1.1 AWS Storage Backups  f  f 1.2 Ensure securing AWS Backups  f  f 1.3 Ensure to create backup template and name  f  f 1.4 Ensure to create AWS IAM Policies  f  f 1.5 Ensure to create IAM roles for Backup  f  f 1.6 Ensure AWS Backup with Service Linked Roles  f  f 2.13 Ensure creating an SNS subscription  f  f 4.4 Ensure the creation of Elastic File Cache  f  f 4.8 Ensure exporting cache to S3  f  f 6.12 Ensure CloudWatch Metrics for AWS EDR  f  f 6.13 Ensure working of EDR  f  f    Appendix: CIS Controls v8 IG 1 Mapped Recommendations Recommendation Set Correctly Yes No 2.3 Ensure the proper configuration of EBS storage  f  f 2.4 Ensure the creation of a new volume  f  f 2.5 Ensure creating snapshots of EBS volumes  f  f 2.7 Ensure creating IAM User  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch  f  f 3.1 EFS  f  f 3.2 Ensure Implementation of EFS  f  f 3.4 Ensure controlling Network access to EFS Services  f  f 3.6 Ensure Secure Ports  f  f 3.7 Ensure File-Level Access Control with Mount Targets  f  f 3.8 Ensure managing mount target security groups  f  f 3.9 Ensure using VPC endpoints - EFS  f  f 3.10 Ensure managing AWS EFS access points  f  f 3.11 Ensure accessing Points and IAM Policies  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery  f  f 4.1 FSX (AWS Elastic File Cache)  f  f 4.2 Amazon Elastic File Cache  f  f 4.3 Ensure the creation of an FSX Bucket  f  f 4.5 Ensure installation and configuration of Lustre Client  f  f 4.6 Ensure EC2 Kernel compatibility with Lustre  f  f 4.9 Ensure cleaning up FSx Resources  f  f 5.1 Amazon Simple Storage Service  f  f 5.2 Ensure direct data addition to S3  f  f 5.3 Ensure Storage Classes are Configured  f  f 6.1 Ensure Elastic Disaster Recovery is Configured  f  f 6.2 Ensure AWS Disaster Recovery Configuration  f  f Recommendation Set Correctly Yes No 6.4 Ensure configuration of replication settings  f  f 6.7 Ensure proper configuration of the Launch Settings  f  f 6.9 Ensure Continuous Disaster Recovery Operations  f  f 6.10 Ensure execution of a Disaster Recovery Failover  f  f 6.11 Ensure execution of a failback  f  f    Appendix: CIS Controls v8 IG 2 Mapped Recommendations Recommendation Set Correctly Yes No 2.1 Ensure creating EC2 instance with EBS  f  f 2.2 Ensure configuring Security Groups  f  f 2.3 Ensure the proper configuration of EBS storage  f  f 2.4 Ensure the creation of a new volume  f  f 2.5 Ensure creating snapshots of EBS volumes  f  f 2.7 Ensure creating IAM User  f  f 2.10 Ensure Resource Access via Tag-based Policies  f  f 2.11 Ensure Secure Password Policy Implementation  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch  f  f 3.1 EFS  f  f 3.2 Ensure Implementation of EFS  f  f 3.3 Ensure EFS and VPC Integration  f  f 3.4 Ensure controlling Network access to EFS Services  f  f 3.5 Ensure using Security Groups for VPC  f  f 3.6 Ensure Secure Ports  f  f 3.7 Ensure File-Level Access Control with Mount Targets  f  f 3.8 Ensure managing mount target security groups  f  f 3.9 Ensure using VPC endpoints - EFS  f  f 3.10 Ensure managing AWS EFS access points  f  f 3.11 Ensure accessing Points and IAM Policies  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery  f  f 4.1 FSX (AWS Elastic File Cache)  f  f 4.2 Amazon Elastic File Cache  f  f 4.3 Ensure the creation of an FSX Bucket  f  f 4.5 Ensure installation and configuration of Lustre Client  f  f 4.6 Ensure EC2 Kernel compatibility with Lustre  f  f Recommendation Set Correctly Yes No 4.9 Ensure cleaning up FSx Resources  f  f 5.1 Amazon Simple Storage Service  f  f 5.2 Ensure direct data addition to S3  f  f 5.3 Ensure Storage Classes are Configured  f  f 6.1 Ensure Elastic Disaster Recovery is Configured  f  f 6.2 Ensure AWS Disaster Recovery Configuration  f  f 6.3 Ensure functionality of Endpoint Detection and Response (EDR)  f  f 6.4 Ensure configuration of replication settings  f  f 6.5 Ensure proper IAM configuration for AWS Elastic Disaster Recovery  f  f 6.6 Ensure installation of the AWS Replication Agent  f  f 6.7 Ensure proper configuration of the Launch Settings  f  f 6.8 Ensure execution of a recovery drill  f  f 6.9 Ensure Continuous Disaster Recovery Operations  f  f 6.10 Ensure execution of a Disaster Recovery Failover  f  f 6.11 Ensure execution of a failback  f  f    Appendix: CIS Controls v8 IG 3 Mapped Recommendations Recommendation Set Correctly Yes No 2.1 Ensure creating EC2 instance with EBS  f  f 2.2 Ensure configuring Security Groups  f  f 2.3 Ensure the proper configuration of EBS storage  f  f 2.4 Ensure the creation of a new volume  f  f 2.5 Ensure creating snapshots of EBS volumes  f  f 2.6 Ensure Proper IAM Configuration for EC2 Instances  f  f 2.7 Ensure creating IAM User  f  f 2.8 Ensure the Creation of IAM Groups  f  f 2.9 Ensure Granular Policy Creation  f  f 2.10 Ensure Resource Access via Tag-based Policies  f  f 2.11 Ensure Secure Password Policy Implementation  f  f 2.12 Ensure Monitoring EC2 and EBS with CloudWatch  f  f 3.1 EFS  f  f 3.2 Ensure Implementation of EFS  f  f 3.3 Ensure EFS and VPC Integration  f  f 3.4 Ensure controlling Network access to EFS Services  f  f 3.5 Ensure using Security Groups for VPC  f  f 3.6 Ensure Secure Ports  f  f 3.7 Ensure File-Level Access Control with Mount Targets  f  f 3.8 Ensure managing mount target security groups  f  f 3.9 Ensure using VPC endpoints - EFS  f  f 3.10 Ensure managing AWS EFS access points  f  f 3.11 Ensure accessing Points and IAM Policies  f  f 3.12 Ensure configuring IAM for AWS Elastic Disaster Recovery  f  f 4.1 FSX (AWS Elastic File Cache)  f  f 4.2 Amazon Elastic File Cache  f  f Recommendation Set Correctly Yes No 4.3 Ensure the creation of an FSX Bucket  f  f 4.5 Ensure installation and configuration of Lustre Client  f  f 4.6 Ensure EC2 Kernel compatibility with Lustre  f  f 4.9 Ensure cleaning up FSx Resources  f  f 5.1 Amazon Simple Storage Service  f  f 5.2 Ensure direct data addition to S3  f  f 5.3 Ensure Storage Classes are Configured  f  f 6.1 Ensure Elastic Disaster Recovery is Configured  f  f 6.2 Ensure AWS Disaster Recovery Configuration  f  f 6.3 Ensure functionality of Endpoint Detection and Response (EDR)  f  f 6.4 Ensure configuration of replication settings  f  f 6.5 Ensure proper IAM configuration for AWS Elastic Disaster Recovery  f  f 6.6 Ensure installation of the AWS Replication Agent  f  f 6.7 Ensure proper configuration of the Launch Settings  f  f 6.8 Ensure execution of a recovery drill  f  f 6.9 Ensure Continuous Disaster Recovery Operations  f  f 6.10 Ensure execution of a Disaster Recovery Failover  f  f 6.11 Ensure execution of a failback  f  f   Appendix: CIS Controls v8 Unmapped Recommendations Recommendation Set Correctly Yes No 1.1 AWS Storage Backups  f  f 1.2 Ensure securing AWS Backups  f  f 1.3 Ensure to create backup template and name  f  f 1.4 Ensure to create AWS IAM Policies  f  f 1.5 Ensure to create IAM roles for Backup  f  f 1.6 Ensure AWS Backup with Service Linked Roles  f  f 2.13 Ensure creating an SNS subscription  f  f 4.4 Ensure the creation of Elastic File Cache  f  f 4.7 Ensure mounting FSx cache  f  f 4.8 Ensure exporting cache to S3  f  f 6.12 Ensure CloudWatch Metrics for AWS EDR  f  f 6.13 Ensure working of EDR  f  f    Appendix: Change History Date Version Changes for this version 07/03/2024 V1.0.0 Document Created",
    "function_names": [
      "compute_instance_edr_agent_installed",
      "compute_instance_edr_agent_running",
      "compute_instance_edr_agent_healthy",
      "compute_instance_edr_agent_auto_update_enabled",
      "compute_instance_edr_agent_logging_enabled",
      "compute_instance_edr_agent_network_connected",
      "compute_instance_edr_agent_signature_updated",
      "compute_instance_edr_agent_tamper_protection_enabled"
    ],
    "profile_applicability": "â€¢  Level 2"
  }
]