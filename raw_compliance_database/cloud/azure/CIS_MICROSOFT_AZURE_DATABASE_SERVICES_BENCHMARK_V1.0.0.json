[
  {
    "id": "2.1",
    "title": "Ensure 'Microsoft Entra Authentication' is 'Enabled'",
    "assessment": "Manual",
    "description": "Ensuring that Microsoft Entra Authentication is \u2018Enabled\u2019 provides a natively integrated use of identities already defined with Microsoft Entra ID.",
    "rationale": "The use of a centralized Identity and Access Management (IAM) solution such as Microsoft Entra ID is highly recommended for all activity related to Identity, Authentication, Authorization, and Accountability. Decentralized IAM \u2013 such as local authentication methods \u2013 may present additional vulnerability and introduce avoidable administrative complexity. Impact: Free tiers exist for the licensing of Microsoft Entra ID if required.",
    "audit": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, click on Authentication 5. Review the checkbox next to Enable Microsoft Entra Authentication If the checkbox is Checked, the configuration for that instance is compliant.",
    "remediation": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, click on Authentication 5. Check the checkbox next to Enable Microsoft Entra Authentication Default Value: By default, Microsoft Entra Authentication is Checked during setup. References: 1. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-identity- management 2. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-azure- active-directory-for-authentication",
    "function_names": [
      "entra_authentication_enabled",
      "entra_authentication_enabled_all_regions",
      "entra_authentication_enabled_min_tls_1_2",
      "entra_authentication_enabled_over_90d",
      "entra_authentication_enabled_all_users"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Free tiers exist for the licensing of Microsoft Entra ID if required.",
    "references": "1. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-identity- management 2. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-azure- active-directory-for-authentication"
  },
  {
    "id": "2.2",
    "title": "Ensure that 'Allow access only via SSL' is set to 'Yes'",
    "assessment": "Automated",
    "description": "Setting \u2018Allow access only via SSL\u2019 to \u2018Yes\u2019 ensures that data in transit to and from Azure Cache for Redis is encrypted using TLS.",
    "rationale": "Data in transit which is not encrypted is vulnerable to attacks including adversary-in-the- middle (AITM or MITM), eavesdropping, or session hijack. These attacks can result in the compromise and exfiltration of data. Impact: No additional cost is required to implement this recommendation. Aside from expected network changes (no unencrypted communications), performance should not be impacted.",
    "audit": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Advanced Settings 5. Review the setting under Allow access only via SSL If Yes is selected, the configuration for that instance is compliant. From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 22bee202-a82f-4305-9a2a-6d7f44d4dedb - Name: 'Only secure connections to your Azure Cache for Redis should be enabled'",
    "remediation": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Advanced Settings 5. Select Yes under the Allow access only via SSL heading Default Value: By default, 'Allow access only via SSL' is set to 'Yes.' References: 1. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-best- practices-development 2. https://learn.microsoft.com/en-us/security/benchmark/azure/baselines/azure- cache-for-redis-security-baseline#microsoft-defender-for-cloud-monitoring-1",
    "function_names": [
      "redis_cache_ssl_access_enabled",
      "redis_cache_secure_transport_required",
      "redis_cache_tls_enforced",
      "redis_cache_non_ssl_disabled",
      "redis_cache_encryption_in_transit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "No additional cost is required to implement this recommendation. Aside from expected network changes (no unencrypted communications), performance should not be impacted.",
    "references": "1. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-best- practices-development 2. https://learn.microsoft.com/en-us/security/benchmark/azure/baselines/azure- cache-for-redis-security-baseline#microsoft-defender-for-cloud-monitoring-1"
  },
  {
    "id": "2.3",
    "title": "Ensure that 'Minimum TLS version' is set to TLS v1.2 (or higher)",
    "assessment": "Manual",
    "description": "Setting the 'Minimum TLS version' helps reduce (but not eliminate) TLS protocol vulnerabilities by preventing the use of significantly outdated versions of TLS.",
    "rationale": "Older versions of the TLS protocol have demonstrated vulnerabilities and should be avoided where possible. While TLS Protocol Version 1.3 is the most recent and preferred version in cases where it is available, version 1.2 is most broadly available and implemented by vendors. When it is configured to avoid specific vulnerable features of the protocol, version 1.2 of TLS can provide a secure implementation. Versions 1.0 and 1.1 of TLS are no longer considered secure. These versions should not be used or permitted where data integrity and confidentiality are required. Impact: This configuration setting should not result in any perceptible changes to cost or performance.",
    "audit": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance listed, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Advanced Settings 5. Review the setting under Minimum TLS version If 1.2 (Recommended) (or a higher version) is selected, the configuration for that instance is compliant.",
    "remediation": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance listed, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Advanced Settings 5. Click the drop-down menu under Minimum TLS version 6. Select 1.2 (Recommended) (higher versions are preferred when available) References: 1. https://www.rfc-editor.org/rfc/pdfrfc/rfc8446.txt.pdf 2. https://nvd.nist.gov/vuln/detail/CVE-2016-0701",
    "function_names": [
      "cloud_cdn_distribution_min_tls_version",
      "cloud_cdn_domain_min_tls_1_2",
      "cloud_cdn_endpoint_tls_version_compliance",
      "cloud_cdn_ssl_certificate_min_tls_1_2",
      "cloud_cdn_security_policy_tls_version",
      "cloud_cdn_custom_domain_tls_requirement",
      "cloud_cdn_edge_cache_tls_version",
      "cloud_cdn_origin_ssl_protocol_compliance"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "This configuration setting should not result in any perceptible changes to cost or performance.",
    "references": "1. https://www.rfc-editor.org/rfc/pdfrfc/rfc8446.txt.pdf 2. https://nvd.nist.gov/vuln/detail/CVE-2016-0701"
  },
  {
    "id": "2.4",
    "title": "Ensure that 'Access Policies' are implemented and reviewed periodically",
    "assessment": "Manual",
    "description": "Access Policies provide an Access Control List (ACL) functionality allowing administrators to define which identities or identity groups have access to what data and commands. This is an implementation of the Role Based Access Control (RBAC) concept and will require careful consideration to deploy and maintain.",
    "rationale": "Role Based Access Control (RBAC) using Access Control Lists (ACLs) is a method of implementing the principle of least privilege by ensuring that users and user groups with differing needs are presented with the privilege that fulfills their needs and any unnecessary access or functionality is prevented. Impact: Implementing RBAC for any system requires a careful analysis of 'who' needs access to the system, and 'what' privileges or functionality they need to perform. The time required to implement RBAC will increase based on the complexity and size of an environment. If RBAC is deployed without careful analysis, it may prevent users from accessing data or functionality that they require from the system. Conversely, it may present privilege which is unnecessary and introduce vulnerability to a system. Once RBAC has been deployed, there should be periodically scheduled access review. During the access review, all entries in the Access Control List and all identities are reviewed for fitness and necessity.",
    "audit": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Data Access Configuration 5. Click on the tab titled Access Policies and review the access policies for fitness and necessity. Please note: No more specific definition can be presented here because the definitions of fitness and necessity are judgments that must be made by the administrators and security personnel with knowledge of the identities and functionality required of the system being evaluated.",
    "remediation": "No prescriptive remediation is available due to the specific and unique nature of implementing RBAC for any given system. Implementing RBAC for any system requires a careful analysis of 'who' needs access to the system, and 'what' privileges or functionality they require. The time required to implement RBAC will increase based on the complexity and size of an environment. Default Value: By default, no Access Policies exist. References: 1. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-configure- role-based-access-control",
    "function_names": [
      "iam_policy_periodic_review",
      "iam_policy_access_control_listed",
      "iam_policy_rbac_implemented",
      "iam_policy_access_reviewed_over_90d",
      "iam_policy_least_privilege_enforced",
      "iam_policy_identity_group_restricted",
      "iam_policy_data_command_access_controlled",
      "iam_policy_role_based_access_enforced"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Implementing RBAC for any system requires a careful analysis of 'who' needs access to the system, and 'what' privileges or functionality they need to perform. The time required to implement RBAC will increase based on the complexity and size of an environment. If RBAC is deployed without careful analysis, it may prevent users from accessing data or functionality that they require from the system. Conversely, it may present privilege which is unnecessary and introduce vulnerability to a system. Once RBAC has been deployed, there should be periodically scheduled access review. During the access review, all entries in the Access Control List and all identities are reviewed for fitness and necessity.",
    "references": "1. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-configure- role-based-access-control"
  },
  {
    "id": "2.5",
    "title": "Ensure that 'System Assigned Managed Identity' is set to 'On'",
    "assessment": "Manual",
    "description": "System Assigned Managed Identities provide the Azure Cache for Redis instance with a unique account like a service principle but automatically assigned and managed by Azure. These identities are unique to the resource instance they are created for, and removed when the resource is deleted.",
    "rationale": "The System Assigned Managed Identity is authenticated with Entra ID, and allows for privileges required for the instance of Azure Cache for Redis to be granted or restricted using Azure Role Based Access Control (RBAC). Additionally, the managed identity provides a means for the Azure Cache for Redis instance to authenticate without storing credentials in code.",
    "audit": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Identity 5. Under the System assigned tab, ensure that Status is set to On. If Yes is selected and Object (principal) ID is populated, the configuration for that instance is compliant.",
    "remediation": "From Azure Portal 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, under Settings, click on Identity 5. Under the System assigned tab, toggle the status to On 6. Click the Save button 7. In the pop-up dialog titled Enable system assigned managed identity that appears after clicking save, click the Yes button. Default Value: By default, System Assigned Managed Identity of Off. References: 1. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-managed- identity",
    "function_names": [
      "redis_cache_system_identity_enabled",
      "redis_cache_managed_identity_assigned",
      "redis_cache_identity_auto_managed",
      "redis_cache_system_identity_required",
      "redis_cache_identity_auto_provisioned"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-managed- identity"
  },
  {
    "id": "2.6",
    "title": "Ensure that 'Public Network Access' is 'Disabled'",
    "assessment": "Manual",
    "description": "Disabling public network access restricts the service from accessing public networks.",
    "rationale": "A secure network architecture requires carefully constructed network segmentation. Public Network Access tends to be overly permissive and introduces unintended vectors for threat activity. Impact: Some architectural consideration may be necessary to ensure that required network connectivity is still made available. No additional cost or performance impact is required to deploy this recommendation. IMPORTANT NOTE: If Azure Cache for Redis has been deployed in a VNet, this recommendation cannot be implemented. See additional information below for more detail.",
    "audit": "From Azure Portal NOTE: This procedure applies only to instances that are not using VNets. 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, click on Private Endpoint 5. Review the button to the right of + Private Endpoint If the button is titled enable public network access, the configuration for that instance is currently disabled and compliant.",
    "remediation": "From Azure Portal NOTE: A Private Endpoint must exist before the \u201cDisable public network access\u201d button allows the configuration change to be performed via Portal. 1. Search for and open the Azure Cache for Redis service 2. For each instance, repeat the remaining steps 3. Click on the name of the instance 4. In the blade menu on the left, click on Private Endpoint 5. Click the Disable public network access button. Default Value: By default Public Network Access is Disabled when creating an Azure Cache for Redis instance. References: 1. https://learn.microsoft.com/en-us/security/benchmark/azure/security-controls-v3- network-security#ns-2-secure-cloud-services-with-network-controls 2. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-network- isolation 3. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-private- link#how-can-i-change-my-private-endpoint-to-be-disabled-or-enabled-from- public-network-access Additional Information: For Azure Cache for Redis instances deployed in classic VNets (Virtual Network injection), public network access cannot be disabled. In these cases, an equivalent control using restrictive Access Control Lists (ACLs) in Network Security Groups (NSGs) and/or Azure Firewall is recommended. If it is feasible, the Azure Cache for Redis instance can also be deleted and re-created with a new instance using Private Endpoints instead of VNets.",
    "function_names": [
      "compute_virtual_machine_public_network_access_disabled",
      "storage_account_public_network_access_disabled",
      "database_server_public_network_access_disabled",
      "key_vault_public_network_access_disabled",
      "container_registry_public_network_access_disabled",
      "app_service_public_network_access_disabled",
      "cache_public_network_access_disabled",
      "search_service_public_network_access_disabled",
      "event_grid_public_network_access_disabled",
      "service_bus_public_network_access_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Some architectural consideration may be necessary to ensure that required network connectivity is still made available. No additional cost or performance impact is required to deploy this recommendation. IMPORTANT NOTE: If Azure Cache for Redis has been deployed in a VNet, this recommendation cannot be implemented. See additional information below for more detail.",
    "references": "1. https://learn.microsoft.com/en-us/security/benchmark/azure/security-controls-v3- network-security#ns-2-secure-cloud-services-with-network-controls 2. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-network- isolation 3. https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-private- link#how-can-i-change-my-private-endpoint-to-be-disabled-or-enabled-from- public-network-access Additional Information: For Azure Cache for Redis instances deployed in classic VNets (Virtual Network injection), public network access cannot be disabled. In these cases, an equivalent control using restrictive Access Control Lists (ACLs) in Network Security Groups (NSGs) and/or Azure Firewall is recommended. If it is feasible, the Azure Cache for Redis instance can also be deleted and re-created with a new instance using Private Endpoints instead of VNets."
  },
  {
    "id": "3.1",
    "title": "Ensure That 'Firewalls & Networks' Is Limited to Use Selected Networks Instead of All Networks",
    "assessment": "Automated",
    "description": "Limiting your Cosmos DB to only communicate on whitelisted networks lowers its attack footprint.",
    "rationale": "Selecting certain networks for your Cosmos DB to communicate restricts the number of networks including the internet that can interact with what is stored within the database. Impact: WARNING: Failure to whitelist the correct networks will result in a connection loss. WARNING: Changes to Cosmos DB firewalls may take up to 15 minutes to apply. Ensure that sufficient time is planned for remediation or changes to avoid disruption.",
    "audit": "From Azure Portal 1. Open the portal menu. 2. Select the Azure Cosmos DB blade 3. Select a Cosmos DB to audit. 4. Select Networking. 5. Under Public network access, ensure Selected networks is selected. 6. Under Virtual networks, ensure appropriate virtual networks are configured. From Azure CLI Retrieve a list of all CosmosDB database names: az cosmosdb list For each database listed, run the following command: az cosmosdb show <database id> For each database, ensure that isVirtualNetworkFilterEnabled is set to true  From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 862e97cf-49fc-4a5c-9de4-40d4e2e7c8eb - Name: 'Azure Cosmos DB accounts should have firewall rules'",
    "remediation": "From Azure Portal 1. Open the portal menu. 2. Select the Azure Cosmos DB blade. 3. Select a Cosmos DB account to audit. 4. Select Networking. 5. Under Public network access, select Selected networks. 6. Under Virtual networks, select + Add existing virtual network or + Add a new virtual network. 7. For existing networks, select subscription, virtual network, subnet and click Add. For new networks, provide a name, update the default values if required, and click Create. 8. Click Save. Default Value: By default, Cosmos DBs are set to have access all networks. References: 1. https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-private- endpoints 2. https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-vnet- service-endpoint 3. https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest#az- cosmosdb-show 4. https://docs.microsoft.com/en-us/cli/azure/cosmosdb/database?view=azure-cli- latest#az-cosmosdb-database-list 5. https://docs.microsoft.com/en-us/powershell/module/az.cosmosdb/?view=azps- 8.1.0 6. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-2-secure-cloud-native-services-with-network-controls",
    "function_names": [
      "cosmosdb_account_network_restricted_to_selected",
      "cosmosdb_firewall_network_whitelisted",
      "cosmosdb_network_access_restricted",
      "cosmosdb_network_all_access_disabled",
      "cosmosdb_firewall_selected_networks_only"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "WARNING: Failure to whitelist the correct networks will result in a connection loss. WARNING: Changes to Cosmos DB firewalls may take up to 15 minutes to apply. Ensure that sufficient time is planned for remediation or changes to avoid disruption.",
    "references": "1. https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-private- endpoints 2. https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-vnet- service-endpoint 3. https://docs.microsoft.com/en-us/cli/azure/cosmosdb?view=azure-cli-latest#az- cosmosdb-show 4. https://docs.microsoft.com/en-us/cli/azure/cosmosdb/database?view=azure-cli- latest#az-cosmosdb-database-list 5. https://docs.microsoft.com/en-us/powershell/module/az.cosmosdb/?view=azps- 8.1.0 6. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-2-secure-cloud-native-services-with-network-controls"
  },
  {
    "id": "3.2",
    "title": "Ensure That Private Endpoints Are Used Where Possible",
    "assessment": "Automated",
    "description": "Private endpoints limit network traffic to approved sources.",
    "rationale": "For sensitive data, private endpoints allow granular control of which services can communicate with Cosmos DB and ensure that this network traffic is private. You set this up on a case by case basis for each service you wish to be connected. Impact: Only whitelisted services will have access to communicate with the Cosmos DB.",
    "audit": "From Azure Portal 1. Open the portal menu. 2. Select the Azure Cosmos DB blade. 3. Select the Azure Cosmos DB account. 4. Select Networking. 5. Ensure Public network access is set to Selected networks. 6. Ensure the listed networks are set appropriately. 7. Select Private access. 8. Ensure a private endpoint exists and Connection state is Approved. From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 58440f8a-10c5-4151-bdce-dfbaad4a20b7 - Name: 'CosmosDB accounts should use private link'",
    "remediation": "From Azure Portal 1. Open the portal menu. 2. Select the Azure Cosmos DB blade. 3. Select the Azure Cosmos DB account. 4. Select Networking. 5. Select Private access. 6. Click + Private Endpoint. 7. Provide a Name. 8. Click Next. 9. From the Resource type drop down, select Microsoft.AzureCosmosDB/databaseAccounts. 10. From the Resource drop down, select the Cosmos DB account. 11. Click Next. 12. Provide appropriate Virtual Network details. 13. Click Next. 14. Provide appropriate DNS details. 15. Click Next. 16. Optionally provide Tags. 17. Click Next : Review + create. 18. Click Create. Default Value: By default Cosmos DB does not have private endpoints enabled and its traffic is public to the network. References: 1. https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-private- endpoints 2. https://docs.microsoft.com/en-us/azure/private-link/tutorial-private-endpoint- cosmosdb-portal 3. https://docs.microsoft.com/en-us/cli/azure/cosmosdb/private-endpoint- connection?view=azure-cli-latest 4. https://docs.microsoft.com/en-us/cli/azure/network/private-endpoint?view=azure- cli-latest#az-network-private-endpoint-create 5. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-2-secure-cloud-native-services-with-network-controls",
    "function_names": [
      "compute_instance_private_endpoint_enabled",
      "storage_bucket_private_endpoint_enabled",
      "database_instance_private_endpoint_enabled",
      "cloud_cdn_private_endpoint_enabled",
      "api_gateway_private_endpoint_enabled",
      "cloud_sql_private_endpoint_enabled",
      "cloud_functions_private_endpoint_enabled",
      "cloud_run_private_endpoint_enabled",
      "cloud_storage_private_endpoint_enabled",
      "cloud_load_balancer_private_endpoint_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Only whitelisted services will have access to communicate with the Cosmos DB.",
    "references": "1. https://docs.microsoft.com/en-us/azure/cosmos-db/how-to-configure-private- endpoints 2. https://docs.microsoft.com/en-us/azure/private-link/tutorial-private-endpoint- cosmosdb-portal 3. https://docs.microsoft.com/en-us/cli/azure/cosmosdb/private-endpoint- connection?view=azure-cli-latest 4. https://docs.microsoft.com/en-us/cli/azure/network/private-endpoint?view=azure- cli-latest#az-network-private-endpoint-create 5. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-2-secure-cloud-native-services-with-network-controls"
  },
  {
    "id": "3.3",
    "title": "Use Entra ID Client Authentication and Azure RBAC where possible.",
    "assessment": "Manual",
    "description": "Cosmos DB can use tokens or Entra ID for client authentication which in turn will use Azure RBAC for authorization. Using Entra ID is significantly more secure because Entra ID handles the credentials and allows for MFA and centralized management, and the Azure RBAC better integrated with the rest of Azure.",
    "rationale": "Entra ID client authentication is considerably more secure than token-based authentication because the tokens must be persistent at the client. Entra ID does not require this.",
    "audit": "From Powershell: $cosmosdbname = \"<your-cosmos-db-account-name>\" $resourcegroup = \"<your-resource-group-name>\" az cosmosdb show --name $cosmosdbname --resource-group $resourcegroup | ConvertFrom-Json In the resulting output, disableLocalAuth should be true",
    "remediation": "Map all the resources that currently access to the Azure Cosmos DB account with keys or access tokens. Create an Entra ID identity for each of these resources: \u2022 For Azure resources, you can create a managed identity. You may choose between system-assigned and user-assigned managed identities. \u2022 For non-Azure resources, create an Entra ID identity. Grant each Entra ID identity the minimum permission it requires. When possible, we recommend you use one of the 2 built-in role definitions: Cosmos DB Built-in Data Reader or Cosmos DB Built-in Data Contributor. Validate that the new resource is functioning correctly. After new permissions are granted to identities, it may take a few hours until they propagate. When all resources are working correctly with the new identities, continue to the next step.  From Powershell: $cosmosdbname = \"<your-cosmos-db-account-name>\" $resourcegroup = \"<your-resource-group-name>\" az cosmosdb show --name $cosmosdbname --resource-group $resourcegroup | ConvertFrom-Json az resource update --ids $cosmosdb.id --set properties.disableLocalAuth=true --latest-include-preview Default Value: The default is to use tokens/keys for client authentication. References: 1. https://learn.microsoft.com/en-us/azure/cosmos-db/role-based-access-control",
    "function_names": [
      "cosmosdb_account_entra_id_authentication_enabled",
      "cosmosdb_account_azure_rbac_enabled",
      "cosmosdb_account_client_authentication_entra_id_required",
      "cosmosdb_account_token_authentication_disabled",
      "cosmosdb_account_mfa_authentication_enabled",
      "cosmosdb_account_centralized_credential_management_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://learn.microsoft.com/en-us/azure/cosmos-db/role-based-access-control"
  },
  {
    "id": "6.1",
    "title": "Ensure 'Enforce SSL connection' is set to 'Enabled' for Standard MySQL Database Server",
    "assessment": "Automated",
    "description": "Enable SSL connection on MYSQL Servers.",
    "rationale": "SSL connectivity helps to provide a new layer of security by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Go to Azure Database for MySQL servers 3. For each database, click on Connection security 4. In SSL settings, ensure Enforce SSL connection is set to ENABLED. From Azure CLI Ensure the output of the below command returns ENABLED. az mysql server show --resource-group <resourceGroupName> --name <serverName> --query sslEnforcement  From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: e802a67a-daf5-4436-9ea6-f6d821dd0c5d - Name: 'Enforce SSL connection should be enabled for MySQL database servers'",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Go to Azure Database for MySQL servers 3. For each database, click on Connection security 4. In SSL settings, click on ENABLED to Enforce SSL connections From Azure CLI Use the below command to set MYSQL Databases to Enforce SSL connection. az mysql server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled Default Value: Azure Database for MySQL when provisioned through the Azure portal or CLI will require SSL connections by default. References: 1. https://docs.microsoft.com/en-us/azure/mysql/single-server/concepts-ssl- connection-security 2. https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure-ssl 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-3-encrypt-sensitive-data-in-transit",
    "function_names": [
      "mysql_server_ssl_connection_enabled",
      "mysql_server_ssl_enforcement_enabled",
      "mysql_server_secure_connection_required",
      "mysql_server_ssl_only_enabled",
      "mysql_server_encryption_in_transit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/azure/mysql/single-server/concepts-ssl- connection-security 2. https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure-ssl 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-3-encrypt-sensitive-data-in-transit"
  },
  {
    "id": "6.2",
    "title": "Ensure 'TLS Version' is set to 'TLSV1.2' (or higher) for MySQL flexible Database Server",
    "assessment": "Automated",
    "description": "Ensure TLS version on MySQL flexible servers is set to use TLS version 1.2 or higher.",
    "rationale": "TLS connectivity helps to provide a new layer of security by connecting database server to client applications using Transport Layer Security (TLS). Enforcing TLS connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Go to Azure Database for MySQL flexible servers 3. For each database, click on Server parameters under Settings 4. In the search box, type in tls_version 5. Ensure tls_version is set to TLSV1.2 (or higher) From Azure CLI Ensure the output of the below command contains the key value pair \"values\": \"TLSV1.2\" (or higher). az mysql flexible-server parameter show --name tls_version --resource- group <resourceGroupName> --server-name <serverName> Example output (next page): { \"allowedValues\": \"TLSv1,TLSv1.1,TLSv1.2\", \"dataType\": \"Set\", \"defaultValue\": \"TLSv1.2\", \"description\": \"Which protocols the server permits for encrypted connections. By default, TLS 1.2 is enforced\", \"id\": \"/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/providers /Microsoft.DBforMySQL/flexibleServers/<serverName>/configurations/tls_version \", \"isConfigPendingRestart\": \"False\", \"isDynamicConfig\": \"False\", \"isReadOnly\": \"False\", \"name\": \"tls_version\", \"resourceGroup\": \"<resourceGroupName>\", \"source\": \"system-default\", \"systemData\": null, \"type\": \"Microsoft.DBforMySQL/flexibleServers/configurations\", \"value\": \"TLSv1.2\" } From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 49e6f04d-fbc3-4ac3-9e84-6ae0eb5db024 - Name: 'Require Secure Transport should be enabled for MySQL flexible servers'",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Go to Azure Database for MySQL flexible servers 3. For each database, click on Server parameters under Settings 4. In the search box, type in tls_version 5. Click on the VALUE dropdown, and ensure only TLSV1.2 (or higher) is selected for tls_version From Azure CLI Use the below command to set MYSQL flexible databases to used version 1.2 for the tls_version parameter. az mysql flexible-server parameter set --name tls_version --resource- group <resourceGroupName> --server-name <serverName> --value TLSV1.2 Default Value: By default, TLS is set to v1.2 for MySQL Flexible servers. References: 1. https://docs.microsoft.com/en-us/azure/mysql/concepts-ssl-connection-security 2. https://docs.microsoft.com/en-us/azure/mysql/howto-configure-ssl 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default",
    "function_names": [
      "mysql_flexible_server_tls_version_min_1_2",
      "mysql_flexible_server_tls_version_secure",
      "database_server_tls_version_compliant",
      "mysql_server_tls_version_enforced",
      "mysql_flexible_server_tls_version_up_to_date"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/azure/mysql/concepts-ssl-connection-security 2. https://docs.microsoft.com/en-us/azure/mysql/howto-configure-ssl 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default"
  },
  {
    "id": "6.3",
    "title": "Ensure server parameter 'audit_log_enabled' is set to 'ON' for MySQL Database Server",
    "assessment": "Manual",
    "description": "Enable audit_log_enabled on MySQL Servers.",
    "rationale": "Enabling audit_log_enabled helps MySQL Database to log items such as connection attempts to the server, DDL/DML access, and more. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance. Impact: There are further costs incurred for storage of logs. For high traffic databases these logs will be significant. Determine your organization's needs before enabling.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Select Azure Database for MySQL Servers 3. For each database, under the Settings section in the sidebar, select Server parameters 4. Ensure the audit_log_enabled parameter is set to ON",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Select Azure Database for MySQL Servers. 3. Select a database. 4. Under Settings, select Server parameters. 5. Update audit_log_enabled parameter to ON 6. Under Monitoring, select Diagnostic settings. 7. Select + Add diagnostic setting. 8. Provide a diagnostic setting name. 9. Under Categories, select MySQL Audit Logs. 10. Specify destination details. 11. Click Save. It may take up to 10 minutes for the logs to appear in the configured destination. Default Value: audit_log_enabled is set to OFF by default References: 1. https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure- audit-logs-portal 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation Additional Information: There is also a CLI version: https://docs.microsoft.com/en-us/azure/mysql/single- server/how-to-configure-audit-logs-cli There are numerous settings and event types and it might be helpful to discuss which of these may be appropriate to have a separate check item for.",
    "function_names": [
      "mysql_server_audit_log_enabled",
      "mysql_database_audit_log_enabled",
      "mysql_instance_audit_log_enabled",
      "mysql_audit_log_enabled",
      "database_mysql_audit_log_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "There are further costs incurred for storage of logs. For high traffic databases these logs will be significant. Determine your organization's needs before enabling.",
    "references": "1. https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure- audit-logs-portal 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation Additional Information: There is also a CLI version: https://docs.microsoft.com/en-us/azure/mysql/single- server/how-to-configure-audit-logs-cli There are numerous settings and event types and it might be helpful to discuss which of these may be appropriate to have a separate check item for."
  },
  {
    "id": "6.4",
    "title": "Ensure server parameter 'audit_log_events' has 'CONNECTION' set for MySQL Database Server",
    "assessment": "Manual",
    "description": "Set audit_log_enabled to include CONNECTION on MySQL Servers.",
    "rationale": "Enabling CONNECTION helps MySQL Database to log items such as successful and failed connection attempts to the server. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance. Impact: There are further costs incurred for storage of logs. For high traffic databases these logs will be significant. Determine your organization's needs before enabling.",
    "audit": "From Azure Portal 1. From Azure Home select the Portal Menu. 2. Select Azure Database for MySQL servers. 3. Select a database. 4. Under Settings, select Server parameters. 5. Ensure audit_log_enabled parameter is set to ON. 6. Ensure audit_log_events parameter has CONNECTION checked.",
    "remediation": "From Azure Portal 1. From Azure Home select the Portal Menu. 2. Select Azure Database for MySQL servers. 3. Select a database. 4. Under Settings, select Server parameters. 5. Update audit_log_enabled parameter to ON. 6. Update audit_log_events parameter to have at least CONNECTION checked. 7. Click Save. 8. Under Monitoring, select Diagnostic settings. 9. Select + Add diagnostic setting. 10. Provide a diagnostic setting name. 11. Under Categories, select MySQL Audit Logs. 12. Specify destination details. 13. Click Save. It may take up to 10 minutes for the logs to appear in the configured destination. Default Value: By default audit_log_events is disabled. References: 1. https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure- audit-logs-portal 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation Additional Information: There is also a CLI version: https://docs.microsoft.com/en-us/azure/mysql/single- server/how-to-configure-audit-logs-cli",
    "function_names": [
      "mysql_server_audit_log_events_connection_enabled",
      "mysql_server_audit_log_connection_enabled",
      "database_server_audit_log_events_connection_enabled",
      "mysql_audit_log_connection_required",
      "database_audit_log_connection_included"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "There are further costs incurred for storage of logs. For high traffic databases these logs will be significant. Determine your organization's needs before enabling.",
    "references": "1. https://docs.microsoft.com/en-us/azure/mysql/single-server/how-to-configure- audit-logs-portal 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation Additional Information: There is also a CLI version: https://docs.microsoft.com/en-us/azure/mysql/single- server/how-to-configure-audit-logs-cli"
  },
  {
    "id": "7.1",
    "title": "Ensure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server",
    "assessment": "Automated",
    "description": "Enable SSL connection on PostgreSQL Servers.",
    "rationale": "SSL connectivity helps to provide a new layer of security by connecting database server to client applications using Secure Sockets Layer (SSL). Enforcing SSL connections between database server and client applications helps protect against \"man in the middle\" attacks by encrypting the data stream between the server and application.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Go to Azure Database for PostgreSQL server 3. For each database, click on Connection security 4. In SSL settings, ensure Enforce SSL connection is set to ENABLED. From Azure CLI Ensure the output of the below command returns Enabled. az postgres server show --resource-group myresourcegroup --name <resourceGroupName> --query sslEnforcement From PowerShell Ensure the output of the below command returns Enabled. Get-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName > -ServerName <ServerName> | Select-Object SslEnforcement From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: d158790f-bfb0-486c-8631-2dc6b4e8e6af - Name: 'Enforce SSL connection should be enabled for PostgreSQL database servers'",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com 2. Go to Azure Database for PostgreSQL server 3. For each database, click on Connection security 4. In SSL settings, click on ENABLED to enforce SSL connections 5. Click Save From Azure CLI Use the below command to enforce ssl connection for PostgreSQL Database. az postgres server update --resource-group <resourceGroupName> --name <serverName> --ssl-enforcement Enabled From PowerShell Update-AzPostgreSqlServer -ResourceGroupName <ResourceGroupName > -ServerName <ServerName> -SslEnforcement Enabled Default Value: By default, secure connectivity is enforced, but some application frameworks may not enable it during deployment. References: 1. https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection- security 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default 3. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlserver?view=azps-9.2.0#example-2-get-postgresql-server-by- resource-group-and-server-name 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlserver?view=azps-9.2.0#example-1-update-postgresql-server-by- resource-group-and-server-name",
    "function_names": [
      "postgresql_server_ssl_connection_enabled",
      "postgresql_server_ssl_enforced",
      "postgresql_server_secure_connection_required",
      "postgresql_server_tls_enabled",
      "postgresql_server_encryption_in_transit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection- security 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default 3. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlserver?view=azps-9.2.0#example-2-get-postgresql-server-by- resource-group-and-server-name 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlserver?view=azps-9.2.0#example-1-update-postgresql-server-by- resource-group-and-server-name"
  },
  {
    "id": "7.2",
    "title": "Ensure Server Parameter 'log_checkpoints' is set to 'ON' for PostgreSQL Database Server",
    "assessment": "Automated",
    "description": "Enable log_checkpoints on PostgreSQL Servers.",
    "rationale": "Enabling log_checkpoints helps the PostgreSQL Database to Log each checkpoint in turn generates query and error logs. However, access to transaction logs is not supported. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance.",
    "audit": "From Azure Portal 1. From Azure Home select the Portal Menu. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for log_checkpoints. 5. Ensure that value is set to ON. From Azure CLI Ensure value is set to ON az postgres server configuration show  --resource-group <resourceGroupName> - -server-name <serverName> --name log_checkpoints From PowerShell Ensure value is set to ON Get-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_checkpoints From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: eb6f77b9-bd53-4e35-a23d-7f65d5f0e43d - Name: 'Log checkpoints should be enabled for PostgreSQL database servers'",
    "remediation": "From Azure Portal 1. From Azure Home select the Portal Menu. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for log_checkpoints. 5. Click ON and save. From Azure CLI Use the below command to update log_checkpoints configuration. az postgres server configuration set --resource-group <resourceGroupName> -- server-name <serverName> --name log_checkpoints --value on From PowerShell Update-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_checkpoints -Value on Default Value: By default log_checkpoints is enabled (set to on). References: 1. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/azure/postgresql/single-server/concepts-server- logs#configure-logging 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 6. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name",
    "function_names": [
      "postgres_server_log_checkpoints_enabled",
      "postgres_database_log_checkpoints_on",
      "postgres_instance_log_checkpoints_enabled",
      "postgres_server_log_checkpoints_on",
      "postgres_database_log_checkpoints_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/azure/postgresql/single-server/concepts-server- logs#configure-logging 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 6. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name"
  },
  {
    "id": "7.3",
    "title": "Ensure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server",
    "assessment": "Automated",
    "description": "Enable log_connections on PostgreSQL Servers.",
    "rationale": "Enabling log_connections helps PostgreSQL Database to log attempted connection to the server, as well as successful completion of client authentication. Log data can be used to identify, troubleshoot, and repair configuration errors and suboptimal performance.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for log_connections. 5. Ensure that value is set to ON. From Azure CLI Ensure log_connections value is set to ON az postgres server configuration show --resource-group <resourceGroupName> -- server-name <serverName> --name log_connections From PowerShell Ensure log_connections value is set to ON Get-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_connections From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: eb6f77b9-bd53-4e35-a23d-7f65d5f0e442 - Name: 'Log connections should be enabled for PostgreSQL database servers'",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for log_connections. 5. Click ON and save. From Azure CLI Use the below command to update log_connections configuration. az postgres server configuration set --resource-group <resourceGroupName> -- server-name <serverName> --name log_connections --value on From PowerShell Use the below command to update log_connections configuration. Update-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_connections -Value on Default Value: By default log_connections is enabled (set to on). References: 1. https://docs.microsoft.com/en-us/rest/api/postgresql/configurations/listbyserver 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name",
    "function_names": [
      "postgresql_server_log_connections_enabled",
      "postgresql_server_connection_logging_enabled",
      "postgresql_server_log_connections_on",
      "postgresql_server_connection_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/rest/api/postgresql/configurations/listbyserver 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name"
  },
  {
    "id": "7.4",
    "title": "Ensure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server",
    "assessment": "Automated",
    "description": "Enable log_disconnections on PostgreSQL Servers.",
    "rationale": "Enabling log_disconnections helps PostgreSQL Database to Logs end of a session, including duration, which in turn generates query and error logs. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub- optimal performance. Impact: Enabling this setting will enable a log of all disconnections. If this is enabled for a high traffic server, the log may grow exponentially.",
    "audit": "From Azure Portal 1. From Azure Home select the Portal Menu 2. Go to Azure Database for PostgreSQL servers 3. For each database, click on Server parameters 4. Search for log_disconnections. 5. Ensure that value is set to ON. From Azure CLI Ensure log_disconnections value is set to ON az postgres server configuration show --resource-group <resourceGroupName> -- server-name <serverName> --name log_disconnections  From PowerShell Ensure log_disconnections value is set to ON Get-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_disconnections  From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: eb6f77b9-bd53-4e35-a23d-7f65d5f0e446 - Name: 'Disconnections should be logged for PostgreSQL database servers.'",
    "remediation": "From Azure Portal 1. From Azure Home select the Portal Menu 2. Go to Azure Database for PostgreSQL servers 3. For each database, click on Server parameters 4. Search for log_disconnections. 5. Click ON and save. From Azure CLI Use the below command to update log_disconnections configuration. az postgres server configuration set --resource-group <resourceGroupName> -- server-name <serverName> --name log_disconnections --value on From PowerShell Use the below command to update log_disconnections configuration. Update-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_disconnections -Value on Default Value: By default log_disconnections is disabled (set to off). References: 1. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name",
    "function_names": [
      "postgresql_server_log_disconnections_enabled",
      "postgresql_server_log_disconnections_set_on",
      "postgresql_server_disconnection_logging_enabled",
      "postgresql_server_connection_logging_enabled",
      "postgresql_server_log_disconnections_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Enabling this setting will enable a log of all disconnections. If this is enabled for a high traffic server, the log may grow exponentially.",
    "references": "1. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name"
  },
  {
    "id": "7.5",
    "title": "Ensure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server",
    "assessment": "Automated",
    "description": "Enable connection_throttling on PostgreSQL Servers.",
    "rationale": "Enabling connection_throttling helps the PostgreSQL Database to Set the verbosity of logged messages. This in turn generates query and error logs with respect to concurrent connections that could lead to a successful Denial of Service (DoS) attack by exhausting connection resources. A system can also fail or be degraded by an overload of legitimate users. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for connection_throttling. 5. Ensure that value is set to ON. From Azure CLI Ensure connection_throttling value is set to ON az postgres server configuration show --resource-group <resourceGroupName> -- server-name <serverName> --name connection_throttling From PowerShell Ensure connection_throttling value is set to ON Get-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name connection_throttling From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 5345bb39-67dc-4960-a1bf-427e16b9a0bd - Name: 'Connection throttling should be enabled for PostgreSQL database servers'",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for connection_throttling. 5. Click ON and save. From Azure CLI Use the below command to update connection_throttling configuration. az postgres server configuration set --resource-group <resourceGroupName> -- server-name <serverName> --name connection_throttling --value on From PowerShell Use the below command to update connection_throttling configuration. Update-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name connection_throttling -Value on Default Value: By default, connection_throttling is enabled (set to on). References: 1. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name",
    "function_names": [
      "postgresql_server_connection_throttling_enabled",
      "postgresql_server_connection_throttling_on",
      "postgresql_server_connection_throttling_set",
      "postgresql_server_connection_throttling_active"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name"
  },
  {
    "id": "7.6",
    "title": "Ensure Server Parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server",
    "assessment": "Automated",
    "description": "Ensure log_retention_days on PostgreSQL Servers is set to an appropriate value.",
    "rationale": "Configuring log_retention_days determines the duration in days that Azure Database for PostgreSQL retains log files. Query and error logs can be used to identify, troubleshoot, and repair configuration errors and sub-optimal performance. Impact: Configuring this setting will result in logs being retained for the specified number of days. If this is configured on a high traffic server, the log may grow quickly to occupy a large amount of disk space. In this case you may want to set this to a lower number.",
    "audit": "From Azure Portal 1. From Azure Home select the Portal Menu. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for log_retention_days. 5. Ensure that the value is between 4 and 7 (inclusive). From Azure CLI Ensure log_retention_days value is greater than 3. az postgres server configuration show --resource-group <resourceGroupName> -- server-name <serverName> --name log_retention_days  From Powershell Ensure log_retention_days value is greater than 3. Get-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_retention_days  From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: eb6f77b9-bd53-4e35-a23d-7f65d5f0e8f3 - Name: 'Log duration should be enabled for PostgreSQL database servers' \u2022 Policy ID: 5e1de0e3-42cb-4ebc-a86d-61d0c619ca48 - Name: 'Public network access should be disabled for PostgreSQL flexible servers'",
    "remediation": "From Azure Portal 1. From Azure Home select the Portal Menu. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Server parameters. 4. Search for log_retention_days. 5. Input a value between 4 and 7 (inclusive) and click Save. From Azure CLI Use the below command to update log_retention_days configuration. az postgres server configuration set --resource-group <resourceGroupName> -- server-name <serverName> --name log_retention_days --value <4-7> From Powershell Use the below command to update log_retention_days configuration. Update-AzPostgreSqlConfiguration -ResourceGroupName <ResourceGroupName> - ServerName <ServerName> -Name log_retention_days -Value <4-7> Default Value: By default log_retention_days is set to 3. References: 1. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 2. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-6-configure-log-storage-retention 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name",
    "function_names": [
      "postgresql_server_log_retention_days_over_3d",
      "postgresql_server_log_retention_days_min_3d",
      "postgresql_server_log_retention_days_sufficient",
      "postgresql_server_log_retention_days_compliant",
      "postgresql_server_log_retention_days_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Configuring this setting will result in logs being retained for the specified number of days. If this is configured on a high traffic server, the log may grow quickly to occupy a large amount of disk space. In this case you may want to set this to a lower number.",
    "references": "1. https://docs.microsoft.com/en-us/azure/postgresql/howto-configure-server- parameters-using-portal 2. https://docs.microsoft.com/en- us/rest/api/postgresql/singleserver/configurations/list-by-server 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-6-configure-log-storage-retention 4. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/get- azpostgresqlconfiguration?view=azps-9.2.0#example-2-get-specified-postgresql- configuration-by-name 5. https://learn.microsoft.com/en-us/powershell/module/az.postgresql/update- azpostgresqlconfiguration?view=azps-9.2.0#example-1-update-postgresql- configuration-by-name"
  },
  {
    "id": "7.7",
    "title": "Ensure 'Allow access to Azure services' for PostgreSQL Database Server is disabled",
    "assessment": "Automated",
    "description": "Disable access from Azure services to PostgreSQL Database Server.",
    "rationale": "If access from Azure services is enabled, the server's firewall will accept connections from all Azure resources, including resources not in your subscription. This is usually not a desired configuration. Instead, set up firewall rules to allow access from specific network ranges or VNET rules to allow access from specific virtual networks.",
    "audit": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Connection security. 4. Under Firewall rules, ensure Allow access to Azure services is set to No. From Azure CLI Ensure the output of the below command does not include a rule with the name AllowAllWindowsAzureIps or \"startIpAddress\": \"0.0.0.0\" or \"endIpAddress\": \"0.0.0.0\", az postgres server firewall-rule list --resource-group <resourceGroupName>  - -server <serverName>  From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: b52376f7-9612-48a1-81cd-1ffe4b61032c - Name: 'Public network access should be disabled for PostgreSQL servers' \u2022 Policy ID: 5e1de0e3-42cb-4ebc-a86d-61d0c619ca48 - Name: 'Public network access should be disabled for PostgreSQL flexible servers'",
    "remediation": "From Azure Portal 1. Login to Azure Portal using https://portal.azure.com. 2. Go to Azure Database for PostgreSQL servers. 3. For each database, click on Connection security. 4. Under Firewall rules, set Allow access to Azure services to No. 5. Click Save. From Azure CLI Use the below command to delete the AllowAllWindowsAzureIps rule for PostgreSQL Database. az postgres server firewall-rule delete --name AllowAllWindowsAzureIps  -- resource-group <resourceGroupName> --server-name <serverName> Default Value: The Azure Postgres firewall is set to block all access by default. References: 1. https://docs.microsoft.com/en-us/azure/postgresql/concepts-firewall-rules 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-manage-firewall-using- cli 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-1-establish-network-segmentation-boundaries 4. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-6-deploy-web-application-firewall",
    "function_names": [
      "postgresql_server_azure_services_access_disabled",
      "postgresql_server_external_access_restricted",
      "postgresql_server_allow_azure_services_disabled",
      "postgresql_server_network_access_controlled",
      "postgresql_server_azure_services_blocked"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/azure/postgresql/concepts-firewall-rules 2. https://docs.microsoft.com/en-us/azure/postgresql/howto-manage-firewall-using- cli 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-1-establish-network-segmentation-boundaries 4. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-6-deploy-web-application-firewall"
  },
  {
    "id": "7.8",
    "title": "Ensure 'Infrastructure double encryption' for PostgreSQL Database Server is 'Enabled' (Single Server Only)",
    "assessment": "Automated",
    "description": "Azure Database for PostgreSQL servers should be created with 'infrastructure double encryption' enabled. NOTE: This recommendation currently only applies to Single Server, not Flexible Server. See additional information below for details about the planned retirement of Azure PostgreSQL Single Server.",
    "rationale": "If Double Encryption is enabled, another layer of encryption is implemented at the hardware level before the storage or network level. Information will be encrypted before it is even accessed, preventing both interception of data in motion if the network layer encryption is broken and data at rest in system resources such as memory or processor cache. Encryption will also be in place for any backups taken of the database, so the key will secure access the data in all forms. For the most secure implementation of key based encryption, it is recommended to use a Customer Managed asymmetric RSA 2048 Key in Azure Key Vault. Impact: The read and write speeds to the database will be impacted if both default encryption and Infrastructure Encryption are checked, as a secondary form of encryption requires more resource overhead for the cryptography of information. This cost is justified for information security. Customer managed keys are recommended for the most secure implementation, leading to overhead of key management. The key will also need to be backed up in a secure location, as loss of the key will mean loss of the information in the database.",
    "audit": "From Azure Portal 1. From Azure Home, click on more services. 2. Click on Databases. 3. Click on Azure Database for PostgreSQL servers. 4. Select the database by clicking on its name. 5. Under Security, click Data encryption. 6. Ensure that 'Infrastructure encryption enabled' is displayed and is 'checked'. From Azure CLI 1. Enter the command az postgres server configuration show --name <servername> --resource-group <resourcegroup> --query 'properties.infrastructureEncryption' -o tsv 2. Verify that Infrastructure encryption is enabled. From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 24fba194-95d6-48c0-aea7-f65bf859c598 - Name: 'Infrastructure encryption should be enabled for Azure Database for PostgreSQL servers'",
    "remediation": "It is not possible to enable 'infrastructure double encryption' on an existing Azure Database for PostgreSQL server. The remediation steps detail the creation of a new Azure Database for PostgreSQL server with 'infrastructure double encryption' enabled. From Azure Portal 1. Go through the normal process of database creation. 2. On step 2 titled 'Additional settings' ensure that 'Infrastructure double encryption enabled' is 'checked'. 3. Acknowledge that you understand this will impact database performance. 4. Finish database creation as normal. From Azure CLI az postgres server create --resource-group <resourcegroup> --name <servername>  --location <location> --admin-user <adminusername> --admin- password <server_admin_password> --sku-name GP_Gen4_2 --version 11 -- infrastructure-encryption Enabled Default Value: By Default, Double Encryption is disabled.  References: 1. https://docs.microsoft.com/en-us/azure/postgresql/howto-double-encryption 2. https://docs.microsoft.com/en-us/azure/postgresql/concepts-infrastructure- double-encryption 3. https://docs.microsoft.com/en-us/azure/postgresql/concepts-data-encryption- postgresql 4. https://docs.microsoft.com/en-us/azure/key-vault/keys/byok-specification 5. https://docs.microsoft.com/en-us/azure/postgresql/howto-double-encryption 6. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default Additional Information: RETIREMENT of Azure PostgreSQL Single Server: Azure PostgreSQL Single Server is slated for retirement by March 25, 2025. Please use these resources to consider and prepare for migration: \u2022 https://learn.microsoft.com/en-us/azure/postgresql/single-server/whats- happening-to-postgresql-single-server \u2022 https://learn.microsoft.com/en-us/azure/postgresql/migrate/concepts-single-to- flexible",
    "function_names": [
      "postgresql_server_infrastructure_double_encryption_enabled",
      "postgresql_single_server_infrastructure_double_encryption_enabled",
      "postgresql_server_encryption_double_enabled",
      "postgresql_single_server_encryption_double_enabled",
      "postgresql_infrastructure_encryption_double_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "The read and write speeds to the database will be impacted if both default encryption and Infrastructure Encryption are checked, as a secondary form of encryption requires more resource overhead for the cryptography of information. This cost is justified for information security. Customer managed keys are recommended for the most secure implementation, leading to overhead of key management. The key will also need to be backed up in a secure location, as loss of the key will mean loss of the information in the database.",
    "references": "1. https://docs.microsoft.com/en-us/azure/postgresql/howto-double-encryption 2. https://docs.microsoft.com/en-us/azure/postgresql/concepts-infrastructure- double-encryption 3. https://docs.microsoft.com/en-us/azure/postgresql/concepts-data-encryption- postgresql 4. https://docs.microsoft.com/en-us/azure/key-vault/keys/byok-specification 5. https://docs.microsoft.com/en-us/azure/postgresql/howto-double-encryption 6. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default Additional Information: RETIREMENT of Azure PostgreSQL Single Server: Azure PostgreSQL Single Server is slated for retirement by March 25, 2025. Please use these resources to consider and prepare for migration: \u2022 https://learn.microsoft.com/en-us/azure/postgresql/single-server/whats- happening-to-postgresql-single-server \u2022 https://learn.microsoft.com/en-us/azure/postgresql/migrate/concepts-single-to- flexible"
  },
  {
    "id": "10.1",
    "title": "Ensure that 'Auditing' is set to 'On'",
    "assessment": "Automated",
    "description": "Enable auditing on SQL Servers.",
    "rationale": "The Azure platform allows a SQL server to be created as a service. Enabling auditing at the server level ensures that all existing and newly created databases on the SQL server instance are audited. Auditing policy applied on the SQL database does not override auditing policy and settings applied on the particular SQL server where the database is hosted. Auditing tracks database events and writes them to an audit log in the Azure storage account. It also helps to maintain regulatory compliance, understand database activity, and gain insight into discrepancies and anomalies that could indicate business concerns or suspected security violations.",
    "audit": "From Azure Portal 1. Go to SQL servers 2. For each server instance 3. Click on Auditing 4. Ensure that Enable Azure SQL Auditing is set to On From PowerShell Get the list of all SQL Servers Get-AzSqlServer For each Server Get-AzSqlServerAudit -ResourceGroupName <ResourceGroupName> -ServerName <SQLServerName> Ensure that BlobStorageTargetState, EventHubTargetState, or LogAnalyticsTargetState is set to Enabled.  From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9 - Name: 'Auditing on SQL server should be enabled'",
    "remediation": "From Azure Portal 1. Go to SQL servers 2. Select the SQL server instance 3. Under Security, click Auditing 4. Click the toggle next to Enable Azure SQL Auditing 5. Select an Audit log destination 6. Click Save From PowerShell Get the list of all SQL Servers Get-AzSqlServer For each Server, enable auditing and set the retention for at least 90 days. Log Analytics Example Set-AzSqlServerAudit -ResourceGroupName <resource group name> -ServerName <SQL Server name> -RetentionInDays <Number of Days to retain the audit logs, should be 90days minimum> -LogAnalyticsTargetState Enabled - WorkspaceResourceId \"/subscriptions/<subscription ID>/resourceGroups/insights- integration/providers/Microsoft.OperationalInsights/workspaces/<workspace name>  Event Hub Example Set-AzSqlServerAudit -ResourceGroupName \"<resource group name>\" -ServerName \"<SQL Server name>\" -EventHubTargetState Enabled -EventHubName \"<Event Hub name>\" -EventHubAuthorizationRuleResourceId \"<Event Hub Authorization Rule Resource ID>\"  Blob Storage Example Set-AzSqlServerAudit -ResourceGroupName \"<resource group name>\" -ServerName \"<SQL Server name>\" -BlobStorageTargetState Enabled -StorageAccountResourceId \"/subscriptions/<subscription_ID>/resourceGroups/<Resource_Group>/providers/M icrosoft.Stora ge/storageAccounts/<Storage Account name>\" Default Value: By default, Enable Azure SQL Auditing is set to Off. References: 1. https://docs.microsoft.com/en-us/azure/security-center/security-center-enable- auditing-on-sql-servers 2. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserverauditing?view=azurermps-5.2.0 3. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/set- azurermsqlserverauditingpolicy?view=azurermps-5.2.0 4. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-auditing 5. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation Additional Information: \u2022 A server policy applies to all existing and newly created databases on the server. \u2022 If server blob auditing is enabled, it always applies to the database. The database will be audited, regardless of the database auditing settings. Auditing type table is already deprecated leaving only type blob available. \u2022 Enabling blob auditing on the database, in addition to enabling it on the server, does not override or change any of the settings of the server blob auditing. Both audits will exist side by side. In other words, the database is audited twice in parallel; once by the server policy and once by the database policy.",
    "function_names": [
      "sql_server_auditing_enabled",
      "sql_server_auditing_logging_enabled",
      "sql_server_auditing_retention_enabled",
      "sql_server_auditing_all_events_enabled",
      "sql_server_auditing_storage_enabled",
      "sql_server_auditing_min_retention_90d",
      "sql_server_auditing_write_and_read_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/azure/security-center/security-center-enable- auditing-on-sql-servers 2. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserverauditing?view=azurermps-5.2.0 3. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/set- azurermsqlserverauditingpolicy?view=azurermps-5.2.0 4. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-auditing 5. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-3-enable-logging-for-security-investigation Additional Information: \u2022 A server policy applies to all existing and newly created databases on the server. \u2022 If server blob auditing is enabled, it always applies to the database. The database will be audited, regardless of the database auditing settings. Auditing type table is already deprecated leaving only type blob available. \u2022 Enabling blob auditing on the database, in addition to enabling it on the server, does not override or change any of the settings of the server blob auditing. Both audits will exist side by side. In other words, the database is audited twice in parallel; once by the server policy and once by the database policy."
  },
  {
    "id": "10.2",
    "title": "Ensure no Azure SQL Databases allow ingress from 0.0.0.0/0 (ANY IP)",
    "assessment": "Automated",
    "description": "Ensure that no SQL Databases allow ingress from 0.0.0.0/0 (ANY IP).",
    "rationale": "Azure SQL Server includes a firewall to block access to unauthorized connections. More granular IP addresses can be defined by referencing the range of addresses available from specific datacenters. By default, for a SQL server, a Firewall exists with StartIp of 0.0.0.0 and EndIP of 0.0.0.0 allowing access to all the Azure services. Additionally, a custom rule can be set up with StartIp of 0.0.0.0 and EndIP of 255.255.255.255 allowing access from ANY IP over the Internet. In order to reduce the potential attack surface for a SQL server, firewall rules should be defined with more granular IP addresses by referencing the range of addresses available from specific datacenters. Impact: Disabling Allow Azure services and resources to access this server will break all connections to SQL server and Hosted Databases unless custom IP specific rules are added in Firewall Policy.",
    "audit": "From Azure Portal 1. Go to SQL servers 2. For each SQL server 3. Click on Networking 4. Ensure that Allow Azure services and resources to access this server is Unchecked 5. Ensure that no firewall rule exists with \u2022 Start IP of 0.0.0.0 \u2022 or other combinations which allows access to wider public IP ranges  From Azure CLI List all SQL servers az sql server list For each SQL server run the following command az sql server firewall-rule list --resource-group <resource group name> -- server <sql server name> Ensure the output does not contain any firewall allow rules with a source of 0.0.0.0, or any rules named AllowAllWindowsAzureIps From PowerShell Get the list of all SQL Servers Get-AzSqlServer For each Server Get-AzSqlServerFirewallRule -ResourceGroupName <resource group name> - ServerName <server name> Ensure that StartIpAddress is not set to 0.0.0.0, /0 or other combinations which allows access to wider public IP ranges including Windows Azure IP ranges. Also ensure that FirewallRuleName doesn't contain AllowAllWindowsAzureIps which is the rule created when the Allow Azure services and resources to access this server setting is enabled for that SQL Server. From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 1b8ca024-1d5c-4dec-8995-b1a932b41780 - Name: 'Public network access on Azure SQL Database should be disabled'",
    "remediation": "From Azure Portal 1. Go to SQL servers 2. For each SQL server 3. Click on Networking 4. Uncheck the checkbox for Allow Azure services and resources to access this server 5. Set firewall rules to limit access to only authorized connections  From Azure CLI Disable default firewall rule Allow access to Azure services: az sql server firewall-rule delete --resource-group <resource group> --server <sql server name> --name \"AllowAllWindowsAzureIps\" Remove a custom firewall rule: az sql server firewall-rule delete --resource-group <resource group> --server <sql server name> --name <firewall rule name> Create a firewall rule: az sql server firewall-rule create --resource-group <resource group> --server <sql server name> --name <firewall rule name> --start-ip-address \"<IP Address other than 0.0.0.0>\" --end-ip-address \"<IP Address other than 0.0.0.0 or 255.255.255.255>\" Update a firewall rule: az sql server firewall-rule update --resource-group <resource group> --server <sql server name> --name <firewall rule name> --start-ip-address \"<IP Address other than 0.0.0.0>\" --end-ip-address \"<IP Address other than 0.0.0.0 or 255.255.255.255>\"  From PowerShell Disable Default Firewall Rule Allow access to Azure services : Remove-AzSqlServerFirewallRule -FirewallRuleName \"AllowAllWindowsAzureIps\" - ResourceGroupName <resource group name> -ServerName <server name> Remove a custom Firewall rule: Remove-AzSqlServerFirewallRule -FirewallRuleName \"<firewall rule name>\" - ResourceGroupName <resource group name> -ServerName <server name> Set the appropriate firewall rules: Set-AzSqlServerFirewallRule -ResourceGroupName <resource group name> - ServerName <server name> -FirewallRuleName \"<firewall rule name>\" - StartIpAddress \"<IP Address other than 0.0.0.0>\" -EndIpAddress \"<IP Address other than 0.0.0.0 or 255.255.255.255>\" Default Value: By default, Allow access to Azure Services is set to NO. References: 1. https://docs.microsoft.com/en-us/sql/database-engine/configure- windows/configure-a-windows-firewall-for-database-engine-access?view=sql- server-2017 2. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserverfirewallrule?view=azurermps-5.2.0 3. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/set- azurermsqlserverfirewallrule?view=azurermps-5.2.0 4. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/remove- azurermsqlserverfirewallrule?view=azurermps-5.2.0 5. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall- configure 6. https://docs.microsoft.com/en-us/sql/relational-databases/system-stored- procedures/sp-set-database-firewall-rule-azure-sql-database?view=azuresqldb- current 7. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-2-secure-cloud-native-services-with-network-controls Additional Information: Firewall rules configured on individual SQL Database using Transact-sql overrides the rules set on SQL server. Azure does not provide any Powershell, API, CLI, Portal option to check database level firewall rules, and so far Transact-SQL is the only way to check for the same. For comprehensive control over egress traffic on SQL Databases, Firewall rules should be checked using SQL client.",
    "function_names": [
      "sql_database_firewall_rule_no_public_ip",
      "sql_database_network_restricted",
      "sql_database_ingress_no_any_ip",
      "sql_database_firewall_rule_restricted",
      "sql_database_network_no_public_access"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Disabling Allow Azure services and resources to access this server will break all connections to SQL server and Hosted Databases unless custom IP specific rules are added in Firewall Policy.",
    "references": "1. https://docs.microsoft.com/en-us/sql/database-engine/configure- windows/configure-a-windows-firewall-for-database-engine-access?view=sql- server-2017 2. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserverfirewallrule?view=azurermps-5.2.0 3. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/set- azurermsqlserverfirewallrule?view=azurermps-5.2.0 4. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/remove- azurermsqlserverfirewallrule?view=azurermps-5.2.0 5. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-firewall- configure 6. https://docs.microsoft.com/en-us/sql/relational-databases/system-stored- procedures/sp-set-database-firewall-rule-azure-sql-database?view=azuresqldb- current 7. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-network- security#ns-2-secure-cloud-native-services-with-network-controls Additional Information: Firewall rules configured on individual SQL Database using Transact-sql overrides the rules set on SQL server. Azure does not provide any Powershell, API, CLI, Portal option to check database level firewall rules, and so far Transact-SQL is the only way to check for the same. For comprehensive control over egress traffic on SQL Databases, Firewall rules should be checked using SQL client."
  },
  {
    "id": "10.3",
    "title": "Ensure SQL server's Transparent Data Encryption (TDE) protector is encrypted with Customer-managed key",
    "assessment": "Automated",
    "description": "Transparent Data Encryption (TDE) with Customer-managed key support provides increased transparency and control over the TDE Protector, increased security with an HSM-backed external service, and promotion of separation of duties. With TDE, data is encrypted at rest with a symmetric key (called the database encryption key) stored in the database or data warehouse distribution. To protect this data encryption key (DEK) in the past, only a certificate that the Azure SQL Service managed could be used. Now, with Customer-managed key support for TDE, the DEK can be protected with an asymmetric key that is stored in the Azure Key Vault. The Azure Key Vault is a highly available and scalable cloud-based key store which offers central key management, leverages FIPS 140-2 Level 2 validated hardware security modules (HSMs), and allows separation of management of keys and data for additional security. Based on business needs or criticality of data/databases hosted on a SQL server, it is recommended that the TDE protector is encrypted by a key that is managed by the data owner (Customer-managed key).",
    "rationale": "Customer-managed key support for Transparent Data Encryption (TDE) allows user control of TDE encryption keys and restricts who can access them and when. Azure Key Vault, Azure\u2019s cloud-based external key management system, is the first key management service where TDE has integrated support for Customer-managed keys. With Customer-managed key support, the database encryption key is protected by an asymmetric key stored in the Key Vault. The asymmetric key is set at the server level and inherited by all databases under that server. Impact: Once TDE protector is encrypted with a Customer-managed key, it transfers entire responsibility of respective key management on to you, and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible. When deploying Customer Managed Keys, it is prudent to ensure that you also deploy an automated toolset for managing these keys (this should include discovery and key rotation), and Keys should be stored in an HSM or hardware backed keystore, such as Azure Key Vault. As far as toolsets go, check with your cryptographic key provider, as they may well provide one as an add-on to their service.",
    "audit": "From Azure Portal 1. Go to SQL servers For the desired server instance 2. Click On Transparent data encryption 3. Ensure that Customer-managed key is selected 4. Ensure Make selected key the default TDE protector is checked From Azure CLI az account get-access-token --query \"{subscripton:subscription,accessToken:accessToken}\" --out tsv | xargs -L1 bash -c 'curl -X GET -H \"Authorization: Bearer $1\" -H \"Content-Type: application/json\" https://management.azure.com/subscriptions/$0/resourceGroups/{resourceGroupNa me}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector?api- version=2015-05-01-preview' Ensure the output of the command contains properties kind set to azurekeyvault serverKeyType set to AzureKeyVault uri is not null From PowerShell Get-AzSqlServerTransparentDataEncryptionProtector -ServerName <ServerName> - ResourceGroupName <ResourceGroupName> Ensure the output of the command contains properties Type set to AzureKeyVault ServerKeyVaultKeyName set to KeyVaultName_KeyName_KeyIdentifierVersion KeyId set to KeyIdentifier From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 0a370ff3-6cab-4e85-8995-295fd854c5b8 - Name: 'SQL servers should use customer-managed keys to encrypt data at rest' \u2022 Policy ID: ac01ad65-10e5-46df-bdd9-6b0cad13e1d2 - Name: 'SQL managed instances should use customer-managed keys to encrypt data at rest'",
    "remediation": "From Azure Console 1. Go to SQL servers For the desired server instance 2. Click On Transparent data encryption 3. Set Transparent data encryption to Customer-managed key 4. Browse through your key vaults to Select an existing key or create a new key in the Azure Key Vault. 5. Check Make selected key the default TDE protector From Azure CLI Use the below command to encrypt SQL server's TDE protector with a Customer- managed key az sql server tde-key set --resource-group <resourceName> --server <dbServerName> --server-key-type {AzureKeyVault} --kid <keyIdentifier> From PowerShell Use the below command to encrypt SQL server's TDE protector with a Customer- managed Key Vault key Set-AzSqlServerTransparentDataEncryptionProtector -Type AzureKeyVault -KeyId <KeyIdentifier> -ServerName <ServerName> -ResourceGroupName <ResourceGroupName> Select Y when prompted Default Value: By Default, Microsoft managed TDE protector is enabled for a SQL server. References: 1. https://docs.microsoft.com/en-us/sql/relational- databases/security/encryption/transparent-data-encryption-byok-azure-sql 2. https://azure.microsoft.com/en-in/blog/preview-sql-transparent-data-encryption- tde-with-bring-your-own-key-support/ 3. https://winterdom.com/2017/09/07/azure-sql-tde-protector-keyvault 4. https://docs.microsoft.com/en-us/security/benchmark/azure/security-controls-v3- data-protection#dp-5-use-customer-managed-key-option-in-data-at-rest- encryption-when-required 5. https://docs.microsoft.com/en-us/azure/key-vault/general/basic-concepts 6. https://docs.microsoft.com/en-us/cli/azure/sql/server/tde-key?view=azure-cli- latest 7. https://learn.microsoft.com/en-us/powershell/module/az.sql/get- azsqlservertransparentdataencryptionprotector?view=azps-9.2.0 8. https://learn.microsoft.com/en-us/powershell/module/az.sql/set- azsqlservertransparentdataencryptionprotector?view=azps-9.2.0 Additional Information: \u2022 This configuration is audited or can be done only on SQL server. The same configuration will be in effect on SQL Databases hosted on SQL Server. \u2022 Ensuring TDE is protected by a Customer-managed key on SQL Server does not ensure the encryption of SQL Databases. Transparent Data Encryption : Data Encryption (ON/OFF) setting on individual SQL Database decides whether database is encrypted or not.",
    "function_names": [
      "sql_server_tde_protector_customer_managed_key_encrypted",
      "sql_server_database_encryption_key_hsm_backed",
      "sql_server_tde_protector_key_vault_integration",
      "sql_server_tde_protector_separation_of_duties",
      "sql_server_tde_protector_fips_140_2_compliant",
      "sql_server_tde_protector_external_key_management",
      "sql_server_tde_protector_asymmetric_key_encrypted",
      "sql_server_tde_protector_key_vault_stored",
      "sql_server_tde_protector_encryption_key_control",
      "sql_server_tde_protector_encryption_key_owned"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Once TDE protector is encrypted with a Customer-managed key, it transfers entire responsibility of respective key management on to you, and hence you should be more careful about doing any operations on the particular key in order to keep data from corresponding SQL server and Databases hosted accessible. When deploying Customer Managed Keys, it is prudent to ensure that you also deploy an automated toolset for managing these keys (this should include discovery and key rotation), and Keys should be stored in an HSM or hardware backed keystore, such as Azure Key Vault. As far as toolsets go, check with your cryptographic key provider, as they may well provide one as an add-on to their service.",
    "references": "1. https://docs.microsoft.com/en-us/sql/relational- databases/security/encryption/transparent-data-encryption-byok-azure-sql 2. https://azure.microsoft.com/en-in/blog/preview-sql-transparent-data-encryption- tde-with-bring-your-own-key-support/ 3. https://winterdom.com/2017/09/07/azure-sql-tde-protector-keyvault 4. https://docs.microsoft.com/en-us/security/benchmark/azure/security-controls-v3- data-protection#dp-5-use-customer-managed-key-option-in-data-at-rest- encryption-when-required 5. https://docs.microsoft.com/en-us/azure/key-vault/general/basic-concepts 6. https://docs.microsoft.com/en-us/cli/azure/sql/server/tde-key?view=azure-cli- latest 7. https://learn.microsoft.com/en-us/powershell/module/az.sql/get- azsqlservertransparentdataencryptionprotector?view=azps-9.2.0 8. https://learn.microsoft.com/en-us/powershell/module/az.sql/set- azsqlservertransparentdataencryptionprotector?view=azps-9.2.0 Additional Information: \u2022 This configuration is audited or can be done only on SQL server. The same configuration will be in effect on SQL Databases hosted on SQL Server. \u2022 Ensuring TDE is protected by a Customer-managed key on SQL Server does not ensure the encryption of SQL Databases. Transparent Data Encryption : Data Encryption (ON/OFF) setting on individual SQL Database decides whether database is encrypted or not."
  },
  {
    "id": "10.4",
    "title": "Ensure that Microsoft Entra authentication is Configured for SQL Servers",
    "assessment": "Automated",
    "description": "Use Microsoft Entra authentication for authentication with SQL Database to manage credentials in a single place.",
    "rationale": "Microsoft Entra authentication is a mechanism to connect to Microsoft Azure SQL Database and SQL Data Warehouse by using identities in the Microsoft Entra ID directory. With Entra ID authentication, identities of database users and other Microsoft services can be managed in one central location. Central ID management provides a single place to manage database users and simplifies permission management. \u2022 It provides an alternative to SQL Server authentication. \u2022 Helps stop the proliferation of user identities across database servers. \u2022 Allows password rotation in a single place. \u2022 Customers can manage database permissions using external (Entra ID) groups. \u2022 It can eliminate storing passwords by enabling integrated Windows authentication and other forms of authentication supported by Microsoft Entra. \u2022 Entra ID authentication uses contained database users to authenticate identities at the database level. \u2022 Entra ID supports token-based authentication for applications connecting to SQL Database. \u2022 Entra ID authentication supports ADFS (domain federation) or native user/password authentication for a local Active Directory without domain synchronization. \u2022 Entra ID supports connections from SQL Server Management Studio that use Active Directory Universal Authentication, which includes Multi-Factor Authentication (MFA). MFA includes strong authentication with a range of easy verification options \u2014 phone call, text message, smart cards with pin, or mobile app notification. Impact: This will create administrative overhead with user account and permission management. For further security on these administrative accounts, you may want to consider licensing which supports features like Multi Factor Authentication.",
    "audit": "From Azure Portal 1. Go to SQL servers 2. For each SQL server, click on Microsoft Entra admin under the Settings section 3. Ensure that a value has been set for Admin Name under the Microsoft Entra admin section From Azure CLI To list SQL Server Admins on a specific server: az sql server ad-admin list --resource-group <resource-group> --server <server>  From PowerShell Print a list of all SQL Servers to find which one you want to audit Get-AzSqlServer Audit a list of Administrators on a Specific Server Get-AzSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> Ensure Output shows DisplayName set to AD account. From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 1f314764-cb73-4fc9-b863-8eca98ac36e9 - Name: 'An Azure Active Directory administrator should be provisioned for SQL servers'",
    "remediation": "From Azure Portal 1. Go to SQL servers 2. For each SQL server, click on Microsoft Entra admin 3. Click on Set admin 4. Select an admin 5. Click Save  From Azure CLI az ad user show --id For each Server, set AD Admin az sql server ad-admin create --resource-group <resource group name> --server <server name> --display-name <display name> --object-id <object id of user>  From PowerShell For each Server, set Entra ID Admin Set-AzSqlServerActiveDirectoryAdministrator -ResourceGroupName <resource group name> -ServerName <server name> -DisplayName \"<Display name of AD account to set as DB administrator>\"  Default Value: Entra ID Authentication for SQL Database/Server is not enabled by default  References: 1. https://learn.microsoft.com/en-us/azure/azure-sql/database/authentication-aad- configure 2. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-aad- authentication 3. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserveractivedirectoryadministrator?view=azurermps-5.2.0 4. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-identity- management#im-1-use-centralized-identity-and-authentication-system 5. https://docs.microsoft.com/en-us/cli/azure/sql/server/ad-admin?view=azure-cli- latest#az_sql_server_ad_admin_list Additional Information: NOTE - Assigning an Administrator in Entra ID is just the first step. When using Entra ID for central authentication there are many other groups and roles that need to be configured base on the needs of your organization. The How-to Guides should be used to determine what roles should be assigned and what groups should be created to manage permissions and access to resources.",
    "function_names": [
      "sql_server_entra_authentication_enabled",
      "sql_server_entra_authentication_configured",
      "sql_server_entra_authentication_required",
      "sql_server_entra_authentication_default",
      "sql_server_entra_authentication_only"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "This will create administrative overhead with user account and permission management. For further security on these administrative accounts, you may want to consider licensing which supports features like Multi Factor Authentication.",
    "references": "1. https://learn.microsoft.com/en-us/azure/azure-sql/database/authentication-aad- configure 2. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-aad- authentication 3. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserveractivedirectoryadministrator?view=azurermps-5.2.0 4. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-identity- management#im-1-use-centralized-identity-and-authentication-system 5. https://docs.microsoft.com/en-us/cli/azure/sql/server/ad-admin?view=azure-cli- latest#az_sql_server_ad_admin_list Additional Information: NOTE - Assigning an Administrator in Entra ID is just the first step. When using Entra ID for central authentication there are many other groups and roles that need to be configured base on the needs of your organization. The How-to Guides should be used to determine what roles should be assigned and what groups should be created to manage permissions and access to resources."
  },
  {
    "id": "10.5",
    "title": "Ensure that 'Data encryption' is set to 'On' on a SQL Database",
    "assessment": "Automated",
    "description": "Enable Transparent Data Encryption on every SQL server.",
    "rationale": "Azure SQL Database transparent data encryption helps protect against the threat of malicious activity by performing real-time encryption and decryption of the database, associated backups, and transaction log files at rest without requiring changes to the application.",
    "audit": "From Azure Portal 1. Go to SQL databases 2. For each DB instance 3. Click on Transparent data encryption 4. Ensure that Data encryption is set to On From Azure CLI Ensure the output of the below command is Enabled az sql db tde show --resource-group <resourceGroup> --server <dbServerName> - -database <dbName> --query status  From PowerShell Get a list of SQL Servers. Get-AzSqlServer For each server, list the databases. Get-AzSqlDatabase -ServerName <SQL Server Name> -ResourceGroupName <Resource Group Name> For each database not listed as a Master database, check for Transparent Data Encryption. Get-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName <Resource Group Name> -ServerName <SQL Server Name> -DatabaseName <Database Name> Make sure DataEncryption is Enabled for each database except the Master database. From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 17k78e20-9358-41c9-923c-fb736d382a12 - Name: 'Transparent Data Encryption on SQL databases should be enabled'",
    "remediation": "From Azure Portal 1. Go to SQL databases 2. For each DB instance 3. Click on Transparent data encryption 4. Set Data encryption to On From Azure CLI Use the below command to enable Transparent data encryption for SQL DB instance. az sql db tde set --resource-group <resourceGroup> --server <dbServerName> -- database <dbName> --status Enabled  From PowerShell Use the below command to enable Transparent data encryption for SQL DB instance. Set-AzSqlDatabaseTransparentDataEncryption -ResourceGroupName <Resource Group Name> -ServerName <SQL Server Name> -DatabaseName <Database Name> -State 'Enabled' Note: \u2022 TDE cannot be used to encrypt the logical master database in SQL Database. The master database contains objects that are needed to perform the TDE operations on the user databases. \u2022 Azure Portal does not show master databases per SQL server. However, CLI/API responses will show master databases. Default Value: By default, Data encryption is set to On. References: 1. https://docs.microsoft.com/en-us/sql/relational- databases/security/encryption/transparent-data-encryption-with-azure-sql- database 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default 3. https://learn.microsoft.com/en-us/powershell/module/az.sql/set- azsqldatabasetransparentdataencryption?view=azps-9.2.0 Additional Information: \u2022 Transparent Data Encryption (TDE) can be enabled or disabled on individual SQL Database level and not on the SQL Server level. \u2022 TDE cannot be used to encrypt the logical master database in SQL Database. The master database contains objects that are needed to perform the TDE operations on the user databases.",
    "function_names": [
      "sql_server_database_encryption_enabled",
      "sql_database_transparent_encryption_enabled",
      "sql_server_data_encryption_enabled",
      "sql_database_encryption_enabled",
      "sql_server_tde_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/sql/relational- databases/security/encryption/transparent-data-encryption-with-azure-sql- database 2. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-data- protection#dp-4-enable-data-at-rest-encryption-by-default 3. https://learn.microsoft.com/en-us/powershell/module/az.sql/set- azsqldatabasetransparentdataencryption?view=azps-9.2.0 Additional Information: \u2022 Transparent Data Encryption (TDE) can be enabled or disabled on individual SQL Database level and not on the SQL Server level. \u2022 TDE cannot be used to encrypt the logical master database in SQL Database. The master database contains objects that are needed to perform the TDE operations on the user databases."
  },
  {
    "id": "10.6",
    "title": "Ensure that 'Auditing' Retention is 'greater than 90 days'",
    "assessment": "Automated",
    "description": "SQL Server Audit Retention should be configured to be greater than 90 days.",
    "rationale": "Audit Logs can be used to check for anomalies and give insight into suspected breaches or misuse of information and access.",
    "audit": "From Azure Portal 1. Go to SQL servers 2. For each server instance 3. Click on Auditing 4. If storage is selected, expand Advanced properties 5. Ensure Retention (days) setting is greater than 90 days or 0 for unlimited retention. From PowerShell Get the list of all SQL Servers Get-AzSqlServer For each Server Get-AzSqlServerAudit -ResourceGroupName <resource group name> -ServerName <server name> Ensure that RetentionInDays is set to more than 90 Note: If the SQL server is set with LogAnalyticsTargetState setting set to Enabled, run the following additional command. Get-AzOperationalInsightsWorkspace | Where-Object {$_.ResourceId -eq <SQL Server WorkSpaceResourceId>} Ensure that RetentionInDays is set to more than 90   From Azure Policy If referencing a digital copy of this Benchmark, clicking a Policy ID will open a link to the associated Policy definition in Azure. If referencing a printed copy, you can search Policy IDs from this URL: https://portal.azure.com/#view/Microsoft_Azure_Policy/PolicyMenuBlade/~/Definitions \u2022 Policy ID: 89099bee-89e0-4b26-a5f4-165451757743 - Name: 'SQL servers with auditing to storage account destination should be configured with 90 days retention or higher'",
    "remediation": "From Azure Portal 1. Go to SQL servers 2. For each server instance 3. Click on Auditing 4. If storage is selected, expand Advanced properties 5. Set the Retention (days) setting greater than 90 days or 0 for unlimited retention. 6. Select Save From PowerShell For each Server, set retention policy to more than 90 days Log Analytics Example Set-AzSqlServerAudit -ResourceGroupName <resource group name> -ServerName <SQL Server name> -RetentionInDays <Number of Days to retain the audit logs, should be more than 90 days> -LogAnalyticsTargetState Enabled - WorkspaceResourceId \"/subscriptions/<subscription ID>/resourceGroups/insights- integration/providers/Microsoft.OperationalInsights/workspaces/<workspace name>  Event Hub Example Set-AzSqlServerAudit -ResourceGroupName \"<resource group name>\" -ServerName \"<SQL Server name>\" -EventHubTargetState Enabled -EventHubName \"<Event Hub name>\" -EventHubAuthorizationRuleResourceId \"<Event Hub Authorization Rule Resource ID>\"  Blob Storage Example Set-AzSqlServerAudit -ResourceGroupName \"<resource group name>\" -ServerName \"<SQL Server name>\" -BlobStorageTargetState Enabled -StorageAccountResourceId \"/subscriptions/<subscription_ID>/resourceGroups/<Resource_Group>/providers/M icrosoft.Stora ge/storageAccounts/<Storage Account name>\" Default Value: By default, SQL Server audit storage is disabled. References: 1. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-auditing 2. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserverauditing?view=azurermps-5.2.0 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-6-configure-log-storage-retention",
    "function_names": [
      "sql_audit_retention_over_90d",
      "sql_server_audit_logs_retention_90d_plus",
      "database_auditing_retention_long_term",
      "sql_audit_policy_retention_extended",
      "sql_server_audit_logs_retention_compliance"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://docs.microsoft.com/en-us/azure/sql-database/sql-database-auditing 2. https://docs.microsoft.com/en-us/powershell/module/azurerm.sql/get- azurermsqlserverauditing?view=azurermps-5.2.0 3. https://learn.microsoft.com/en-us/security/benchmark/azure/mcsb-logging-threat- detection#lt-6-configure-log-storage-retention"
  },
  {
    "id": "10.7",
    "title": "Ensure Public Network Access is Disabled",
    "assessment": "Manual",
    "description": "Disabling public network access restricts the service from accessing public networks.",
    "rationale": "A secure network architecture requires carefully constructed network segmentation. Public Network Access tends to be overly permissive and introduces unintended vectors for threat activity. Impact: Some architectural consideration may be necessary to ensure that required network connectivity is still made available. No additional cost or performance impact is required to deploy this recommendation.",
    "audit": "From Azure Portal 1. Search for and open the SQL Server service 2. For each SQL Server listed, repeat the remaining steps 3. Click on the name of the SQL Server 4. In the blade menu on the left, expand the Security section 5. Under the expanded Security section, click on Networking 6. Review the Public access tab in the networking window. If the radio button under Public network access setting is set to Disable, the configuration for that SQL Server is compliant.",
    "remediation": "From Azure Portal 1. Search for and open the SQL Server service 2. For each SQL Server listed, repeat the remaining steps 3. Click on the name of the SQL Server 4. In the blade menu on the left, expand the Security section 5. Under the expanded Security section, click on Networking 6. Under the Public access tab in the networking window, set the Public network access setting to Disable. Default Value: By default, Azure SQL Server's Public network access is set to Disable. References: 1. https://learn.microsoft.com/en-us/security/benchmark/azure/security-controls-v3- network-security#ns-2-secure-cloud-services-with-network-controls 2. https://learn.microsoft.com/en-us/azure/azure-sql/database/connectivity- settings?view=azuresql&tabs=azure-portal#deny-public-network-access",
    "function_names": [
      "compute_virtual_machine_public_network_access_disabled",
      "database_sql_server_public_network_access_disabled",
      "storage_account_public_network_access_disabled",
      "container_registry_public_network_access_disabled",
      "key_vault_public_network_access_disabled",
      "app_service_public_network_access_disabled",
      "cache_redis_public_network_access_disabled",
      "network_load_balancer_public_network_access_disabled",
      "compute_disk_public_network_access_disabled",
      "analytics_synapse_public_network_access_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Some architectural consideration may be necessary to ensure that required network connectivity is still made available. No additional cost or performance impact is required to deploy this recommendation.",
    "references": "1. https://learn.microsoft.com/en-us/security/benchmark/azure/security-controls-v3- network-security#ns-2-secure-cloud-services-with-network-controls 2. https://learn.microsoft.com/en-us/azure/azure-sql/database/connectivity- settings?view=azuresql&tabs=azure-portal#deny-public-network-access"
  }
]