[
  {
    "id": "1.1",
    "title": "(L1) Ensure 'Web content' is on non-system partition",
    "assessment": "Manual",
    "description": "Web resources published through IIS are mapped via Virtual Directories to physical locations on disk. It is recommended to map all Virtual Directories to a non-system disk volume.",
    "rationale": "Isolating web content from system files may reduce the probability of web sites/applications exhausting system disk space. It can also reduce the file IO vulnerability in the web site/application from affecting the confidentiality and/or integrity of system files. Impact: Once the configuration is changed all content from the root drive to the new drive including ACLs and empty directories will need to copied.",
    "audit": "Execute the following command to ensure no virtual directories are mapped to the system drive: To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list vdir OR To verify using PowerShell enter the following command: Get-Website | Format-List Name, PhysicalPath",
    "remediation": "1. Browse to web content in C:\\inetpub\\wwwroot\\ 2. Copy or cut content onto a dedicated and restricted web folder on a non-system drive such as D:\\webroot\\ 3. Change mappings for any applications or Virtual Directories to reflect the new location To change the mapping for the application named app1 which resides under the Default Web Site, open IIS Manager: 1. Expand the server node 2. Expand Sites 3. Expand Default Web Site 4. Click on app1 5. In the Actions pane, select Basic Settings 6. In the Physical path text box, put the new location of the application, D:\\wwwroot\\app1 in the example above Default Value: The default location for web content is: %systemdrive%\\inetpub\\wwwroot. References: 1. http://blogs.iis.net/thomad/archive/2008/02/10/moving-the-iis7-inetpub-directory- to-a-different-drive.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Once the configuration is changed all content from the root drive to the new drive including ACLs and empty directories will need to copied.",
    "references": "1. http://blogs.iis.net/thomad/archive/2008/02/10/moving-the-iis7-inetpub-directory- to-a-different-drive.aspx",
    "function_names": [
      "iis_virtual_directory_non_system_partition",
      "iis_web_content_non_system_disk",
      "iis_resource_non_system_volume",
      "iis_virtual_directory_non_os_drive",
      "iis_web_content_non_os_partition"
    ]
  },
  {
    "id": "1.2",
    "title": "(L1) Ensure 'Host headers' are on all sites",
    "assessment": "Automated",
    "description": "Host headers provide the ability to host multiple websites on the same IP address and port. It is recommended that host headers be configured for all sites. Note: Wildcard host headers are now supported.",
    "rationale": "Requiring a Host header for all sites may reduce the probability of DNS rebinding attacks successfully compromising or abusing site data or functionality and IP-based scans successfully identifying or interacting with a target application hosted on IIS. Impact: If a wildcard DNS entry exists and a wildcard host header is used, it may be serving data to more domains than intended.",
    "audit": "Execute the following command to identify sites that are not configured to require host headers: To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list sites OR To verify using PowerShell enter the following command: Get-WebBinding -Port * | Format-List bindingInformation All sites will be listed as such: SITE \"Default Web Site\" (id:1,bindings:http/\\*:80:test.com,state:Started) SITE \"badsite\" (id:3,bindings:http/\\*:80:,state:Started) For all non-SSL sites, ensure that the IP:port:host binding triplet contains a host name. In the example above, the first site is configured as recommended given the Default Web Site has a host header of test.com. badsite, however, does not have a host header configured - it shows \\*:80: which means all IPs over port 80, with no host header.",
    "remediation": "Obtain a listing of all sites by using the following appcmd.exe command: Enter the following command in AppCmd.exe to configure the host header: %systemroot%\\system32\\inetsrv\\appcmd.exe set config  - section:system.applicationHost/sites /\"[name='<website name>'].bindings.[protocol='http',bindingInformation='*:80:<host header>'].bindingInformation:\"*:80:<host header>\"\"  /commit:apphost OR Enter the following command in PowerShell to configure the host header: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.applicationHost/sites/site[@name='<website name>']/bindings/binding[@protocol='http' and @bindingInformation='*:80:']' - name 'bindingInformation' -value '*:80:<host header value>' OR Perform the following in IIS Manager to configure host headers for the Default Web Site: 1. Open IIS Manager 2. In the Connections pane expand the Sites node and select Default Web Site 3. In the Actions pane click Bindings 4. In the Site Bindings dialog box, select the binding for which host headers are going to be configured, Port 80 in this example 5. Click Edit 6. Under host name, enter the sites FQDN, such as <www.examplesite.com> 7. Click OK, then Close Note: Requiring a host header may impair site functionality for HTTP/1.0 clients. Default Value: By default, host headers are not required or set up automatically. References: 1. http://technet.microsoft.com/en-us/library/cc753195%28WS.10%29.aspx 2. http://crypto.stanford.edu/dns/dns-rebinding.pdf 3. http://www.sslshopper.com/article-ssl-host-headers-in-iis-7.html 4. http://blogs.iis.net/thomad/archive/2008/01/25/ssl-certificates-on-sites-with-host- headers.aspx 5. https://www.iis.net/learn/get-started/whats-new-in-iis-10/wildcard-host-header- support",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "If a wildcard DNS entry exists and a wildcard host header is used, it may be serving data to more domains than intended.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc753195%28WS.10%29.aspx 2. http://crypto.stanford.edu/dns/dns-rebinding.pdf 3. http://www.sslshopper.com/article-ssl-host-headers-in-iis-7.html 4. http://blogs.iis.net/thomad/archive/2008/01/25/ssl-certificates-on-sites-with-host- headers.aspx 5. https://www.iis.net/learn/get-started/whats-new-in-iis-10/wildcard-host-header- support",
    "function_names": [
      "cloud_cdn_site_host_headers_enabled",
      "cloud_cdn_site_wildcard_host_headers_enabled",
      "cloud_cdn_site_host_headers_configured",
      "cloud_cdn_site_host_headers_all_sites",
      "cloud_cdn_site_host_headers_no_wildcard"
    ]
  },
  {
    "id": "1.3",
    "title": "(L1) Ensure 'Directory browsing' is set to Disabled",
    "assessment": "Automated",
    "description": "Directory browsing allows the contents of a directory to be displayed upon request from a web client. If directory browsing is enabled for a directory in Internet Information Services, users receive a page that lists the contents of the directory when the following two conditions are met: 1. No specific file is requested in the URL 2. The Default Documents feature is disabled in IIS, or if it is enabled, IIS is unable to locate a file in the directory that matches a name specified in the IIS default document list Note: If directory browsing is enabled (an exception to this recommendation), make sure that it is only enabled on the particular directory or directories that need to be shared.",
    "rationale": "Ensuring that directory browsing is disabled may reduce the probability of disclosing sensitive content that is inadvertently accessible via IIS. Impact: Users will not be able to see the contents of directories.",
    "audit": "Perform the following to verify that Directory Browsing has been disabled at the server level: To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config /section:directoryBrowse If the server is configured as recommended, the following will be displayed: <system.webServer> <directoryBrowse enabled=\"false\" /> <system.webServer> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -Filter system.webserver/directorybrowse -PSPath iis:\\ -Name Enabled | select Value",
    "remediation": "Directory Browsing can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To disable directory browsing at the server level using an appcmd.exe command: Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:directoryBrowse /enabled:false OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -Filter system.webserver/directorybrowse -PSPath iis:\\ -Name Enabled  -Value False Default Value: In IIS, directory browsing is disabled by default. References: 1. http://technet.microsoft.com/en-us/library/cc725840%28WS.10%29.aspx 2. http://technet.microsoft.com/en-us/library/cc731109%28WS.10%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Users will not be able to see the contents of directories.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc725840%28WS.10%29.aspx 2. http://technet.microsoft.com/en-us/library/cc731109%28WS.10%29.aspx",
    "function_names": [
      "iis_directory_browsing_disabled",
      "iis_directory_browsing_not_enabled",
      "iis_directory_listing_disabled",
      "iis_directory_contents_hidden",
      "iis_directory_browsing_restricted",
      "iis_directory_default_documents_enabled",
      "iis_directory_browsing_no_exceptions",
      "iis_directory_browsing_specific_only"
    ]
  },
  {
    "id": "1.4",
    "title": "(L1) Ensure 'application pool identity' is configured for all application pools",
    "assessment": "Automated",
    "description": "Application Pool Identities are the actual users/authorities that will run the worker process - w3wp.exe. Assigning the correct user authority will help ensure that applications can function properly, while not giving overly permissive permissions on the system. These identities can further be used in ACLs to protect system content. It is recommended that each Application Pool run under a unique identity. IIS has additional built-in least privilege identities intended for use by Application Pools. It is recommended that the default Application Pool Identity be changed to a least privilege principle other than Network Service. Furthermore, it is recommended that all application pool identities be assigned a unique least privilege principal. To achieve isolation in IIS, application pools can be run as separate identities. IIS can be configured to automatically use the application pool identity if no anonymous user account is configured for a Web site. This can greatly reduce the number of accounts needed for Web sites and make management of the accounts easier. It is recommended the Application Pool Identity be set as the Anonymous User Identity. The name of the Application Pool account corresponds to the name of the Application Pool. Application Pool Identities were introduced in Windows Server 2008 SP2. It is recommended that Application Pools be set to run as ApplicationPoolIdentity unless there is an underlying reason that the application pool needs to run as a specified end user account. One example where this is needed is for web farms using Kerberos authentication.",
    "rationale": "Setting Application Pools to use unique least privilege identities such as ApplicationPoolIdentity reduces the potential harm the identity could cause should the application ever become compromised. Additionally, it will simplify application pools configuration and account management. Impact: If Application Pool Identities are not set properly to users/authorities applications may not function properly.",
    "audit": "To verify the Application Pools have been set to run under the ApplicationPoolIdentity using IIS Manager: 1. Open IIS Manager 2. Open the Application Pools node underneath the machine node; select Application Pool to be verified 3. Right click the Application Pool and select Advanced Settings… 4. Under the Process Model section, locate the Identity option and ensure that ApplicationPoolIdentity is set This configuration is stored in the same applicationHost.config file for web sites and application/virtual directories, at the bottom of the file, surrounded by <location path=\"path/to/resource\"> tags. To verify that any new Application Pools use the ApplicationPoolIdentity, execute the following command to determine if the Application Pool default has been changed to ApplicationPoolIdentity: To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config /section:applicationPools OR To verify using PowerShell enter the following command: Get-ChildItem -Path IIS:\\AppPools\\ | Select-Object name, state, <#@{e={$_.processModel.password};l=\"password\"}, #> @{e={$_.processModel.identityType};l=\"identityType\"}",
    "remediation": "The default Application Pool identity may be set for an application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to change the default identity to the built-in ApplicationPoolIdentity in the IIS Manager GUI: 1. Open the IIS Manager GUI 2. In the connections pane, expand the server node and click Application Pools 3. On the Application Pools page, select the DefaultAppPool, and then click Advanced Settings in the Actions pane 4. For the Identity property, click the '...' button to open the Application Pool Identity dialog box 5. Select the Built-in account option choose ApplicationPoolIdentity from the list, or input a unique application user created for this purpose 6. Restart IIS To change the ApplicationPool identity to the built-in ApplicationPoolIdentity using AppCmd.exe, run the following from a command prompt: Enter the following command in AppCmd.exe to configure %systemroot%\\system32\\inetsrv\\appcmd set config /section:applicationPools /[name='<apppool name>'].processModel.identityType:ApplicationPoolIdentity OR To change the ApplicationPool identity to the built-in ApplicationPoolIdentity using PowerShell: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter 'system.applicationHost/applicationPools/add[@name='<apppool name>']/processModel' -name 'identityType' -value 'ApplicationPoolIdentity' The example code above will set just the DefaultAppPool. Run this command for each configured Application Pool. Additionally, ApplicationPoolIdentity can be made the default for all Application Pools by using the Set Application Pool Defaults action on the Application Pools node. If using a custom defined Windows user such as a dedicated service account, that user will need to be a member of the IIS_IUSRS group. The IIS_IUSRS group has access to all the necessary file and system resources so that an account, when added to this group, can seamlessly act as an application pool identity. Default Value: By Default, the DefaultAppPool in IIS is configured to use the ApplicationPoolIdentity account.  References: 1. http://technet.microsoft.com/en-us/library/cc771170%28WS.10%29.aspx 2. http://learn.iis.net/page.aspx/140/understanding-built-in-user-and-group- accounts-in-iis-7/ 3. http://learn.iis.net/page.aspx/624/application-pool-identities/ 4. http://blogs.iis.net/tomwoolums/archive/2008/12/17/iis-7-0-application-pools.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "If Application Pool Identities are not set properly to users/authorities applications may not function properly.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc771170%28WS.10%29.aspx 2. http://learn.iis.net/page.aspx/140/understanding-built-in-user-and-group- accounts-in-iis-7/ 3. http://learn.iis.net/page.aspx/624/application-pool-identities/ 4. http://blogs.iis.net/tomwoolums/archive/2008/12/17/iis-7-0-application-pools.aspx",
    "function_names": [
      "iis_application_pool_identity_configured",
      "iis_application_pool_unique_identity",
      "iis_application_pool_least_privilege_identity",
      "iis_application_pool_anonymous_user_identity",
      "iis_application_pool_default_identity_changed",
      "iis_application_pool_network_service_disabled",
      "iis_application_pool_identity_isolated",
      "iis_application_pool_identity_auto_assigned",
      "iis_application_pool_identity_named_correctly",
      "iis_application_pool_identity_kerberos_auth_required"
    ]
  },
  {
    "id": "1.5",
    "title": "(L1) Ensure 'unique application pools' is set for sites",
    "assessment": "Automated",
    "description": "Application Pool Identities allows Application Pools to be run under unique accounts without the need to create and manage local or domain accounts. It is recommended that all Sites run under unique, dedicated Application Pools.",
    "rationale": "By setting sites to run under unique Application Pools, resource-intensive applications can be assigned to their own application pools which could improve server and application performance. In addition, it can help maintain application availability: if an application in one pool fails, applications in other pools are not affected. Last, isolating applications helps mitigate the potential risk of one application being allowed access to the resources of another application. It is also recommended to stop any application pool that is not in use or was created by an installation such as .Net 4.0. Impact: All sites will need to be run under unique dedicated Application Pools.",
    "audit": "The following appcmd.exe command will give a listing of all applications configured, which site they are in, which application pool is serving them and which application pool identity they are running under: %systemroot%\\system32\\inetsrv\\appcmd list app The output of this command will be similar to the following: APP \"Default Web Site/\" (applicationPool:DefaultAppPool) Run the above command and ensure a unique application pool is assigned for each site listed. OR To verify using PowerShell enter the following command: Get-Website | Select-Object Name, applicationPool",
    "remediation": "The following appcmd.exe command will set the application pool for a given application: %systemroot%\\system32\\inetsrv\\appcmd set app '<website name>/' /applicationpool:<apppool name> The output of this command will be similar to the following: APP object \"Default Web Site/\" changed (applicationPool:DefaultAppPool) Run the above command to ensure a unique application pool is assigned for each site listed OR Enter the following command in PowerShell to configure: Set-ItemProperty -Path 'IIS:\\Sites\\<website name>' -Name applicationPool - Value <apppool name> OR 1. Open IIS Manager 2. Open the Sites node underneath the machine node 3. Select the Site to be changed 4. In the Actions pane, select Basic Settings 5. Click the Select… box next to the Application Pool text box 6. Select the desired Application Pool 7. Once selected, click OK Default Value: By default, all Sites created will use the Default Application Pool (DefaultAppPool). References: 1. http://technet.microsoft.com/en-us/library/cc753449%28WS.10%29.aspx 2. http://blogs.iis.net/tomwoolums/archive/2008/12/17/iis-7-0-application-pools.aspx 3. http://learn.iis.net/page.aspx/624/application-pool-identities/",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "All sites will need to be run under unique dedicated Application Pools.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc753449%28WS.10%29.aspx 2. http://blogs.iis.net/tomwoolums/archive/2008/12/17/iis-7-0-application-pools.aspx 3. http://learn.iis.net/page.aspx/624/application-pool-identities/",
    "function_names": [
      "compute_site_unique_application_pools_enabled",
      "compute_site_application_pool_identity_isolated",
      "compute_site_dedicated_application_pool_required",
      "compute_application_pool_unique_per_site",
      "compute_site_application_pool_no_shared_identity"
    ]
  },
  {
    "id": "1.6",
    "title": "(L1) Ensure 'application pool identity' is configured for anonymous user identity",
    "assessment": "Automated",
    "description": "To achieve isolation in IIS, application pools can be run as separate identities. IIS can be configured to automatically use the application pool identity if no anonymous user account is configured for a web site. This can greatly reduce the number of accounts needed for Web sites and make management of the accounts easier. It is recommended the Application Pool Identity be set as the Anonymous User Identity.",
    "rationale": "Configuring the anonymous user identity to use the application pool identity will help ensure site isolation - provided sites are set to use the application pool identity. Since a unique principal will run each application pool, it will ensure the identity is least privilege. Additionally, it will simplify Site management. Impact: N/A",
    "audit": "Find and open the applicationHost.config file and verify that the userName attribute of the anonymousAuthentication tag is set to a blank string: <system.webServer> <security> <authentication> <anonymousAuthentication userName=\"\" /> </authentication> </security> </system.webServer> This configuration is stored in the same applicationHost.config file for web sites and application/virtual directories, at the bottom of the file, surrounded by <location path=\"path/to/resource\"> tags. To verify using PowerShell enter the following command: Get-WebConfiguration system.webServer/security/authentication/anonymousAuthentication  -Recurse | where {$_.enabled -eq $true} | format-list location",
    "remediation": "The Anonymous User Identity can be set to Application Pool Identity by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the username attribute of the anonymousAuthentication node in the IIS Manager GUI: 1. Open the IIS Manager GUI and navigate to the desired server, site, or application 2. In Features View, find and double-click the Authentication icon 3. Select the Anonymous Authentication option and in the Actions pane select Edit... 4. Choose Application pool identity in the modal window and then press the OK button OR To use AppCmd.exe to configure anonymousAuthentication at the server level, the command would look like this: %systemroot%\\system32\\inetsrv\\appcmd set config - section:anonymousAuthentication /username:\"\" --password OR Enter the following command in PowerShell to configure: Set-ItemProperty -Path IIS:\\AppPools\\<apppool name> -Name passAnonymousToken -Value True Default Value: The default identity for the anonymous user is the IUSR virtual account. References: 1. http://learn.iis.net/page.aspx/202/application-pool-identity-as-anonymous-user/ 2. http://learn.iis.net/page.aspx/624/application-pool-identities/",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://learn.iis.net/page.aspx/202/application-pool-identity-as-anonymous-user/ 2. http://learn.iis.net/page.aspx/624/application-pool-identities/",
    "function_names": [
      "iis_application_pool_anonymous_identity_application_pool_identity",
      "iis_application_pool_anonymous_identity_configured",
      "iis_application_pool_identity_anonymous_user_enabled",
      "iis_web_site_anonymous_user_application_pool_identity",
      "iis_web_site_anonymous_identity_application_pool_identity"
    ]
  },
  {
    "id": "1.7",
    "title": "(L1) Ensure' WebDav' feature is disabled",
    "assessment": "Automated",
    "description": "WebDAV is an extension to the HTTP protocol which allows clients to create, move, and delete files and resources on the web server. Note: The WebDAV feature must be enabled for this functionality to be available in IIS.",
    "rationale": "WebDAV is not widely used, and it has serious security concerns because it may allow clients to modify unauthorized files on the web server. Therefore, the WebDav feature should be disabled. Impact: The WebDav feature will not be available in IIS.",
    "audit": "To verify using PowerShell, enter the following command: Install-WindowsFeature Web-DAV-Publishing Verify that the Install State is Available",
    "remediation": "To disable this feature using PowerShell, enter the following command: Uninstall-WindowsFeature Web-DAV-Publishing Verify that Success is True Default Value: The default state of WebDAV Publishing is disabled",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The WebDav feature will not be available in IIS.",
    "function_names": [
      "iis_webdav_disabled",
      "web_server_webdav_disabled",
      "iis_feature_webdav_disabled",
      "webdav_extension_disabled",
      "iis_http_webdav_disabled"
    ]
  },
  {
    "id": "2.1",
    "title": "(L1) Ensure 'global authorization rule' is set to restrict access",
    "assessment": "Manual",
    "description": "IIS introduced URL Authorization, which allows the addition of Authorization rules to the actual URL, instead of the underlying file system resource, as a way to protect it. Authorization rules can be configured at the server, web site, folder (including Virtual Directories), or file level. The native URL Authorization module applies to all requests, whether they are .NET managed or other types of files (e.g., static files or ASP files). It is recommended that URL Authorization be configured to only grant access to the necessary security principals.",
    "rationale": "Configuring a global Authorization rule that restricts access will ensure inheritance of the settings down through the hierarchy of web directories; if that content is copied elsewhere, the authorization rules flow with it. This will ensure access to current and future content is only granted to the appropriate principals, mitigating risk of accidental or unauthorized access. Impact: If not set properly, the authorization rule could restrict assess at a level that is not intended to be restricted.",
    "audit": "Verify an authorization rule specifying no access to all users except the Administrators group: To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config  - section:system.webserver/security/authorization OR To verify using PowerShell enter the following command: Get-WebConfiguration -pspath 'IIS:\\'  -filter 'system.webServer/security/authorization' OR At the web site or application level, verify that the authorization rule configured has been applied: 1. Connect to Internet Information Services (IIS Manager) 2. Select the site or application where Authorization was configured 3. Select Authorization Rules and verify the configured rules were added Browse to and open the web.config file for the configured site/application/content: <configuration> <system.webServer> <security> <authorization> <remove users=\"*\" roles=\"\" verbs=\"\" /> <add accessType=\"Allow\" roles=\"administrators\" /> </authorization> </security> </system.webServer> </configuration>",
    "remediation": "To configure URL Authorization at the server level using command line utilities: Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config  - section:system.webServer/security/authorization /- \"[users='*',roles='',verbs='']\" %systemroot%\\system32\\inetsrv\\appcmd set config  - section:system.webServer/security/authorization /+\"[accessType='Allow',roles='Administrators']\" OR Enter the following command in PowerShell to configure: Remove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/authorization\" -name \".\" -AtElement @{users='*';roles='';verbs=''} Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/authorization\" -name \".\" -value @{accessType='Allow';roles='Administrators'} OR To configure URL Authorization at the server level using IIS Manager: 1. Connect to Internet Information Services (IIS Manager) 2. Select the server 3. Select Authorization Rules 4. Remove the \"Allow All Users\" rule 5. Click Add Allow Rule… 6. Allow access to the user(s), user groups, or roles that are authorized across all of the web sites and applications (e.g. the Administrators group) Default Value: The default server-level setting is to allow all users access. References: 1. http://www.iis.net/learn/manage/configuring-security/understanding-iis-url- authorization 2. http://www.iis.net/learn/get-started/whats-new-in-iis-7/changes-in-security- between-iis-60-and-iis-7-and-above#Authorization",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "If not set properly, the authorization rule could restrict assess at a level that is not intended to be restricted.",
    "references": "1. http://www.iis.net/learn/manage/configuring-security/understanding-iis-url- authorization 2. http://www.iis.net/learn/get-started/whats-new-in-iis-7/changes-in-security- between-iis-60-and-iis-7-and-above#Authorization",
    "function_names": [
      "iis_url_authorization_restrict_access",
      "iis_global_rule_restrict_access",
      "iis_authorization_rule_secure_config",
      "iis_url_rule_minimal_access",
      "iis_authorization_rule_principal_restricted"
    ]
  },
  {
    "id": "2.2",
    "title": "(L1) Ensure access to sensitive site features is restricted to authenticated principals only",
    "assessment": "Manual",
    "description": "IIS supports both challenge-based and login redirection-based authentication methods. Challenge-based authentication methods, such as Integrated Windows Authentication, require a client to respond correctly to a server-initiated challenge. A login redirection- based authentication method such as Forms Authentication relies on redirection to a login page to determine the identity of the principal. Challenge-based authentication and login redirection-based authentication methods cannot be used in conjunction with one another. Public servers/sites are typically configured to use Anonymous Authentication. This method typically works, provided the content or services is intended for use by the public. When sites, applications, or specific content containers are not intended for anonymous public use, an appropriate authentication mechanism should be utilized. Authentication will help confirm the identity of clients who request access to sites, application, and content. IIS provides the following authentication modules by default: • Anonymous Authentication - allows anonymous users to access sites, applications, and/or content • Integrated Windows Authentication - authenticates users using the NTLM or Kerberos protocols; Kerberos v5 requires a connection to Active Directory • ASP.NET Impersonation - allows ASP.NET applications to run under a security context different from the default security context for an application • Forms Authentication - enables a user to login to the configured space with a valid username and password which is then validated against a database or other credentials store • Basic authentication - requires a valid username and password to access content • Client Certificate Mapping Authentication - allows automatic authentication of users who log on with client certificates that have been configured; requires SSL • Digest Authentication - uses Windows domain controller to authenticate users who request access Note that none of the challenge-based authentication modules can be used at the same time Forms Authentication is enabled for certain applications/content. Forms Authentication does not rely on IIS authentication, so anonymous access for the ASP.NET application can be configured if Forms Authentication will be used. It is recommended that sites containing sensitive information, confidential data, or non- public web services be configured with a credentials-based authentication mechanism.",
    "rationale": "Configuring authentication will help mitigate the risk of unauthorized users accessing data and/or services, and in some cases reduce the potential harm that can be done to a system. Impact: Authentication will be restricted to the method that is applied.",
    "audit": "To verify that the authentication module is enabled for a specific site, application, or content, browse to and open the web.config file pertaining to the content. Verify the configuration file now has a mode defined within the <authentication> tags. The example below shows that Forms Authentication is configured, cookies will always be used, and SSL is required: <system.web> <authentication> <forms cookieless=\"UseCookies\" requireSSL=\"true\" /> </authentication> </system.web> OR To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config  - section:system.web/authentication OR To verify using PowerShell enter the following command: Get-WebConfiguration system.webServer/security/authentication/* -Recurse | Where-Object {$_.enabled -eq $true} | Format-Table",
    "remediation": "When configuring an authentication module for the first time, each mechanism must be completely configured before use. Enabling authentication can be performed by using the user interface (UI), running AppCmd.exe commands in a command-line window, editing configuration files directly, or by writing WMI scripts. To verify an authentication mechanism is in place for sensitive content using the IIS Manager GUI: 1. Open IIS Manager and navigate to level with sensitive content 2. In Features View, double-click Authentication 3. On the Authentication page, make sure an authentication module is enabled, while anonymous authentication is enabled (Forms Authentication can have anonymous as well) 4. If necessary, select the desired authentication module, then in the Actions pane, click Enable OR Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config  - section:system.web/authentication /mode:<Windows|Passport|Forms> OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/anonymousAuthentication' -name 'enabled' -value 'False' Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website location>' -filter 'system.webServer/security/authentication/windowsAuthentication' -name 'enabled' -value 'True' Default Value: The default installation of IIS supports Anonymous Authentication without further electing additional methods. References: 1. http://learn.iis.net/page.aspx/377/using-aspnet-forms-authentication/rev/1 2. http://learn.iis.net/page.aspx/244/how-to-take-advantage-of-the-iis7-integrated- pipeline/ 3. http://technet.microsoft.com/en-us/library/cc733010%28WS.10%29.aspx 4. http://msdn.microsoft.com/en-us/library/aa480476.aspx 5. https://technet.microsoft.com/en-us/library/hh831496(v=ws.11).aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Authentication will be restricted to the method that is applied.",
    "references": "1. http://learn.iis.net/page.aspx/377/using-aspnet-forms-authentication/rev/1 2. http://learn.iis.net/page.aspx/244/how-to-take-advantage-of-the-iis7-integrated- pipeline/ 3. http://technet.microsoft.com/en-us/library/cc733010%28WS.10%29.aspx 4. http://msdn.microsoft.com/en-us/library/aa480476.aspx 5. https://technet.microsoft.com/en-us/library/hh831496(v=ws.11).aspx",
    "function_names": [
      "iis_site_anonymous_auth_disabled",
      "iis_site_authentication_enabled",
      "iis_site_challenge_auth_enabled",
      "iis_site_forms_auth_restricted",
      "iis_site_sensitive_content_auth_required",
      "iis_site_integrated_windows_auth_enabled",
      "iis_site_basic_auth_enabled",
      "iis_site_client_cert_mapping_auth_enabled",
      "iis_site_digest_auth_enabled",
      "iis_site_asp_net_impersonation_disabled"
    ]
  },
  {
    "id": "2.3",
    "title": "(L1) Ensure 'forms authentication' require SSL",
    "assessment": "Automated",
    "description": "Forms-based authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted using SSL, especially in cases where the site is publicly accessible. It is recommended that communications with any portion of a site using Forms Authentication be encrypted using SSL. NOTE Due to identified security vulnerabilities, SSL no longer provides adequate protection for a sensitive information.",
    "rationale": "Requiring SSL for Forms Authentication will protect the confidentiality of credentials during the login process, helping mitigate the risk of stolen user information. Impact: None.",
    "audit": "To verify that SSL is required for forms authentication for a specific site, application, or content, browse to and open the web.config file for the level in which forms authentication was enabled. Verify the tag <forms requireSSL=\"true\" />: <system.web> <authentication> <forms requireSSL=\"true\" /> </authentication> </system.web> OR To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config - section:system.web/authentication OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'requireSSL' | Format- Table Name, Value",
    "remediation": "1. Open IIS Manager and navigate to the appropriate tier 2. In Features View, double-click Authentication 3. On the Authentication page, select Forms Authentication 4. In the Actions pane, click Edit 5. Check the Requires SSL checkbox in the cookie settings section, click OK OR Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config  - section:system.web/authentication /mode:Forms OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'requireSSL' -value 'True' Default Value: SSL is not required when Forms Authentication is enabled. References: 1. http://technet.microsoft.com/en-us/library/cc771077(WS.10).aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "None.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc771077(WS.10).aspx",
    "function_names": [
      "app_service_auth_ssl_required",
      "app_service_auth_https_enforced",
      "app_service_auth_secure_transport_enabled",
      "app_service_auth_encryption_required",
      "app_service_auth_tls_enforced",
      "app_service_auth_cleartext_disabled",
      "app_service_auth_secure_communication_enabled",
      "app_service_auth_ssl_only_enabled"
    ]
  },
  {
    "id": "2.4",
    "title": "(L2) Ensure 'forms authentication' is set to use cookies",
    "assessment": "Automated",
    "description": "Forms Authentication can be configured to maintain the site visitor's session identifier in either a URI or cookie. It is recommended that Forms Authentication be set to use cookies.",
    "rationale": "Using cookies to manage session state may help mitigate the risk of session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL. Moving session information identifiers into the URL may cause session IDs to show up in proxy logs, browsing history, and be accessible to client scripting via document.location. Impact: Site visitor's session identifier will be stored via cookies.",
    "audit": "Locate and open the web.config for the configured application. Verify the presence of <forms cookieless=\"UseCookies\" />. <system.web> <authentication> <forms cookieless=\"UseCookies\" requireSSL=\"true\" timeout=\"30\" /> </authentication> </system.web> OR To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config  - section:system.web/authentication OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -Recurse -name 'cookieless'",
    "remediation": "1. Open IIS Manager and navigate to the level where Forms Authentication is enabled 2. In Features View, double-click Authentication 3. On the Authentication page, select Forms Authentication 4. In the Actions pane, click Edit 5. In the Cookie settings section, select Use cookies from the Mode dropdown OR Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config  - section:system.web/authentication /forms.cookieless:\"UseCookies\" OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter 'system.web/authentication/forms' -name 'cookieless' -value 'UseCookies' Default Value: The default setting for Cookie Mode is Auto Detect which will only use cookies if the device profile supports cookies. References: 1. http://technet.microsoft.com/en-us/library/cc732830%28WS.10%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Site visitor's session identifier will be stored via cookies.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc732830%28WS.10%29.aspx",
    "function_names": [
      "app_service_authentication_cookie_required",
      "web_app_authentication_cookie_enabled",
      "forms_authentication_cookie_only",
      "authentication_cookie_session_required",
      "app_service_cookie_authentication_enabled"
    ]
  },
  {
    "id": "2.5",
    "title": "(L1) Ensure 'cookie protection mode' is configured for forms authentication",
    "assessment": "Automated",
    "description": "The cookie protection mode defines the protection Forms Authentication cookies will be given within a configured application. The four cookie protection modes that can be defined are: • Encryption and validation - Specifies that the application use both data validation and encryption to help protect the cookie; this option uses the configured data validation algorithm (based on the machine key) and triple-DES (3DES) for encryption, if available and if the key is long enough (48 bytes or more) • None - Specifies that both encryption and validation are disabled for sites that are using cookies only for personalization and have weaker security requirements • Encryption - Specifies that the cookie is encrypted by using Triple-DES or DES, but data validation is not performed on the cookie; cookies used in this manner might be subject to plain text attacks • Validation - Specifies that a validation scheme verifies that the contents of an encrypted cookie have not been changed in transit It is recommended that cookie protection mode always encrypt and validate Forms Authentication cookies.",
    "rationale": "By encrypting and validating the cookie, the confidentiality and integrity of data within the cookie is assured. This helps mitigate the risk of attacks such as session hijacking and impersonation. Impact: Protection Forms Authentication cookies will restricted to the mode defined.",
    "audit": "Locate and open the web.config for the configured application. Verify the presence of <forms protection=\"All\" />. <system.web> <authentication> <forms cookieless=\"UseCookies\" protection=\"All\" /> </authentication> </system.web> The protection=\"All\" property will only show up if cookie protection mode was set to something different, and then changed to Encryption and validation. To truly verify the protection=\"All\" property in the web.config, the protection mode can be changed, and then changed back. Conversely, the protection=\"All\" line can be added to the web.config manually. OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter 'system.web/authentication/forms' -name 'protection'",
    "remediation": "Cookie protection mode can be configured by using the user interface (UI), by running Appcmd.exe commands in a command-line window, by editing configuration files directly, or by writing WMI scripts. Using IIS Manager: 1. Open IIS Manager and navigate to the level where Forms Authentication is enabled 2. In Features View, double-click Authentication 3. On the Authentication page, select Forms Authentication 4. In the Actions pane, click Edit 5. In the Cookie settings section, verify the drop-down for Protection mode is set for Encryption and validation OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter 'system.web/authentication/forms' -name 'protection' -value 'All' Default Value: When cookies are used for Forms Authentication, the default cookie protection mode is All, meaning the application encrypts and validates the cookie.  References: 1. http://technet.microsoft.com/en-us/library/cc731804%28WS.10%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Protection Forms Authentication cookies will restricted to the mode defined.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc731804%28WS.10%29.aspx",
    "function_names": [
      "app_service_auth_cookie_protection_encryption_and_validation_enabled",
      "app_service_auth_cookie_protection_none_disabled",
      "app_service_auth_cookie_protection_encryption_enabled",
      "app_service_auth_cookie_protection_validation_enabled",
      "app_service_auth_cookie_protection_strong_mode_enabled"
    ]
  },
  {
    "id": "2.6",
    "title": "(L1) Ensure transport layer security for 'basic authentication' is configured",
    "assessment": "Automated",
    "description": "Basic Authentication can pass credentials across the network in clear text. It is therefore imperative that the traffic between client and server be encrypted, especially in cases where the site is publicly accessible and is recommended that TLS be configured and required for any Site or Application using Basic Authentication.",
    "rationale": "Credentials sent in clear text can be easily intercepted by malicious code or persons. Enforcing the use of Transport Layer Security will help mitigate the chances of hijacked credentials. Impact: Credentials will not be passed across the network in plain text.",
    "audit": "Once transport layer security has been configured and required for a Site or application, only the https:// address will be available. Attempt loading the Site or application for which Basic Authentication is configured using http://, the requests will fail and IIS will throw a 403.4 - Forbidden error. OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website name>' -filter 'system.webServer/security/access' -name 'sslFlags'",
    "remediation": "To protect Basic Authentication with transport layer security: 1. Open IIS Manager 2. In the Connections pane on the left, select the server to be configured 3. In the Connections pane, expand the server, then expand Sites and select the site to be configured 4. In the Actions pane, click Bindings; the Site Bindings dialog appears 5. If an HTTPS binding is available, click Close and see below \"To require SSL\" 6. If no HTTPS binding is visible, perform the following steps To add an HTTPS binding: 1. In the Site Bindings dialog, click Add; the Add Site Binding dialog appears 2. Under Type, select https 3. Under SSL certificate, select an X.509 certificate 4. Click OK, then close To require SSL: 1. In Features View, double-click SSL Settings 2. On the SSL Settings page, select Require SSL. 3. In the Actions pane, click Apply OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -location '<website name>' -filter 'system.webServer/security/access' -name 'sslFlags' -value 'Ssl' Default Value: Transport Layer Security is not enabled by default when Basic Authentication is configured. References: 1. http://technet.microsoft.com/en-us/library/dd378853%28WS.10%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Credentials will not be passed across the network in plain text.",
    "references": "1. http://technet.microsoft.com/en-us/library/dd378853%28WS.10%29.aspx",
    "function_names": [
      "cloud_cdn_endpoint_basic_auth_tls_enabled",
      "cloud_cdn_endpoint_basic_auth_tls_required",
      "cloud_cdn_endpoint_basic_auth_https_only",
      "cloud_cdn_endpoint_basic_auth_min_tls_1_2",
      "cloud_cdn_endpoint_basic_auth_encryption_enabled",
      "cloud_cdn_endpoint_basic_auth_secure_transport",
      "cloud_cdn_endpoint_basic_auth_tls_enforced",
      "cloud_cdn_endpoint_basic_auth_no_cleartext",
      "cloud_cdn_endpoint_basic_auth_secure_channel",
      "cloud_cdn_endpoint_basic_auth_tls_protected"
    ]
  },
  {
    "id": "2.7",
    "title": "(L1) Ensure 'passwordFormat' is not set to clear",
    "assessment": "Automated",
    "description": "The <credentials> element of the <authentication> element allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization. Note: The <credentials> element only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider. It is recommended that passwordFormat be set to a value other than Clear, such as SHA1.",
    "rationale": "Authentication credentials should always be protected to reduce the risk of stolen authentication credentials. Impact: passwordFormat will be encrypted.",
    "audit": "Locate and open the configuration file for the configured application. Verify the credentials element is not present: <configuration> <system.web> <authentication mode=\"Forms\"> <forms name=\"SampleApp\" loginUrl=\"/login.aspx\"> <credentials passwordFormat=\"SHA1\"> <user name=\"<em>UserName1</em>\" password=\"<em>SHA1EncryptedPassword1</em>\"/> <user name=\"<em>UserName2</em>\" password=\"<em>SHA1EncryptedPassword2</em>\"/> </credentials> </forms> </authentication> </system.web> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter 'system.web/authentication/forms/credentials' -name 'passwordFormat'",
    "remediation": "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config: 1. Locate and open the configuration file where the credentials are stored 2. Find the <credentials> element 3. If present, ensure passwordFormat is not set to Clear 4. Change passwordFormat to SHA1 The clear text passwords will need to be replaced with the appropriate hashed version. OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter 'system.web/authentication/forms/credentials' -name 'passwordFormat' -value 'SHA1' Default Value: The default passwordFormat method is SHA1. References: 1. http://www.iis.net/ConfigReference/system.webServer/management/authenticatio n/credentials 2. http://msdn.microsoft.com/en-us/library/bb422401%28VS.90%29.aspx 3. https://docs.microsoft.com/en-us/dotnet/framework/whats-new/#v471",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "passwordFormat will be encrypted.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/management/authenticatio n/credentials 2. http://msdn.microsoft.com/en-us/library/bb422401%28VS.90%29.aspx 3. https://docs.microsoft.com/en-us/dotnet/framework/whats-new/#v471",
    "function_names": [
      "iis_credentials_password_format_encrypted",
      "iis_authentication_password_format_not_clear",
      "iis_manager_user_password_format_secure",
      "iis_forms_auth_password_format_hashed",
      "iis_configuration_password_format_sha1"
    ]
  },
  {
    "id": "2.8",
    "title": "(L2) Ensure 'credentials' are not stored in configuration files",
    "assessment": "Automated",
    "description": "The <credentials> element of the <authentication> element allows optional definitions of name and password for IIS Manager User accounts within the configuration file. Forms based authentication also uses these elements to define the users. IIS Manager Users can use the administration interface to connect to sites and applications in which they've been granted authorization. Note: The <credentials> element only applies when the default provider, ConfigurationAuthenticationProvider, is configured as the authentication provider. It is recommended to avoid storing passwords in the configuration file even in form of hash.",
    "rationale": "Authentication credentials should always be protected to reduce the risk of stolen authentication credentials. For security reasons, it is recommended that user credentials not be stored an any IIS configuration files. Impact: Passwords in the configuration file will be stored in form of a hash.",
    "audit": "Locate and open the configuration file for the configured application. Verify the credentials element is not present: <configuration> <system.web> <authentication mode=\"Forms\"> <forms name=\"SampleApp\" loginUrl=\"/login.aspx\"> </forms> </authentication> </system.web> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter 'system.web/authentication/forms/credentials' -name 'passwordFormat'",
    "remediation": "Authentication mode is configurable at the machine.config, root-level web.config, or application-level web.config: 1. Locate and open the configuration file where the credentials are stored 2. Find the <credentials> element 3. If present, remove the section This will remove all references to stored users in the configuration files. OR Enter the following command in PowerShell to configure: Remove-WebConfigurationProperty  -pspath 'MACHINE/WEBROOT/APPHOST/<website name>'  -filter 'system.web/authentication/forms/credentials' -name '.' References: 1. http://www.iis.net/ConfigReference/system.webServer/management/authenticatio n/credentials 2. http://msdn.microsoft.com/en-us/library/bb422401%28VS.90%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Passwords in the configuration file will be stored in form of a hash.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/management/authenticatio n/credentials 2. http://msdn.microsoft.com/en-us/library/bb422401%28VS.90%29.aspx",
    "function_names": [
      "iis_authentication_credentials_not_stored",
      "iis_manager_user_passwords_not_stored",
      "iis_config_no_plaintext_credentials",
      "iis_authentication_no_config_credentials",
      "iis_credentials_element_disabled",
      "iis_config_no_credentials_element",
      "iis_authentication_no_stored_passwords",
      "iis_manager_user_no_config_passwords"
    ]
  },
  {
    "id": "3.1",
    "title": "(L1) Ensure 'deployment method retail' is set",
    "assessment": "Manual",
    "description": "The <deployment retail> switch is intended for use by production IIS servers. This switch is used to help applications run with the best possible performance and least possible security information leakages by disabling the application's ability to generate trace output on a page, disabling the ability to display detailed error messages to end users, and disabling the debug switch. Often times, switches and options that are developer-focused, such as failed request tracing and debugging, are enabled during active development. It is recommended that the deployment method on any production server be set to retail.",
    "rationale": "Utilizing the switch specifically intended for production IIS servers will eliminate the risk of vital application and system information leakages that would otherwise occur if tracing or debug were to be left enabled, or customErrors were to be left off. Impact: N/A",
    "audit": "After the next time IIS is restarted, open the machine.config file and verify that <deployment retail=\"true\" /> remains set to true. <system.web> <deployment retail=\"true\" /> </system.web>",
    "remediation": "1. Open the machine.config file located in: %systemroot%\\Microsoft.NET\\Framework<bitness (if not the 32 bit)>\\<framework version>\\CONFIG 2. Add the line <deployment retail=\"true\" /> within the <system.web> section 3. If systems are 64-bit, do the same for the machine.config located in: %systemroot%\\Microsoft.NET\\Framework<bitness (if not the 32 bit)>\\<framework version>\\CONFIG Default Value: The <deployment retail> tag is not included in the machine.config by default. References: 1. http://msdn.microsoft.com/en-US/library/ms228298%28VS.80%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://msdn.microsoft.com/en-US/library/ms228298%28VS.80%29.aspx",
    "function_names": [
      "compute_server_deployment_method_retail",
      "compute_server_debug_disabled",
      "compute_server_trace_output_disabled",
      "compute_server_detailed_errors_disabled",
      "compute_server_production_optimized",
      "compute_server_development_features_disabled",
      "compute_server_retail_mode_enabled"
    ]
  },
  {
    "id": "3.2",
    "title": "(L2) Ensure 'debug' is turned off",
    "assessment": "Automated",
    "description": "Developers often enable the debug mode during active ASP.NET development so that they do not have to continually clear their browsers cache every time they make a change to a resource handler. The problem would arise from this being left \"on\" or set to \"true\". Compilation debug output is displayed to the end user, allowing malicious persons to obtain detailed information about applications. This is a defense in depth recommendation due to the <deployment retail=\"true\" /> in the machine.config configuration file overriding any debug settings. It is recommended that debugging still be turned off.",
    "rationale": "Setting <compilation debug> to false ensures that detailed error information does not inadvertently display during live application usage, mitigating the risk of application information leakage falling into unscrupulous hands. Impact: Debugging will be disabled.",
    "audit": "Browse to and open the web.config file pertaining to the server or specific application that has been configured. Locate the <compilation debug> switch and verify it is set to false. <configuration> <system.web> <compilation debug=\"false\" /> </system.web> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/compilation\" -name \"debug\" | format-list Name, Value",
    "remediation": "To use the UI to make this change: 1. Open IIS Manager and navigate desired server, site, or application 2. In Features View, double-click .NET Compilation 3. On the .NET Compilation page, in the Behavior section, ensure the Debug field is set to False 4. When finished, click Apply in the Actions pane Note: The <compilation debug> switch will not be present in the web.config file unless it has been added manually, or has previously been configured using the IIS Manager GUI. OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/compilation\" -name \"debug\" -value \"False\" Default Value: The compilation of debug binaries is not enabled by default. References: 1. http://technet.microsoft.com/en-us/library/cc725812%28WS.10%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Debugging will be disabled.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc725812%28WS.10%29.aspx",
    "function_names": [
      "app_service_web_app_debug_disabled",
      "app_service_web_app_debug_mode_off",
      "app_service_web_app_compilation_debug_disabled",
      "app_service_web_app_debug_output_disabled",
      "app_service_web_app_production_mode_enabled"
    ]
  },
  {
    "id": "3.3",
    "title": "(L2) Ensure custom error messages are not off",
    "assessment": "Automated",
    "description": "When an ASP.NET application fails and causes an HTTP/1.x 500 Internal Server Error, or a feature configuration (such as Request Filtering) prevents a page from being displayed, an error message will be generated. Administrators can choose whether or not the application should display a friendly message to the client, detailed error message to the client, or detailed error message to localhost only. The <customErrors> tag in the web.config has three modes: • On: Specifies that custom errors are enabled. If no defaultRedirect attribute is specified, users see a generic error. The custom errors are shown to the remote clients and to the local host • Off: Specifies that custom errors are disabled. The detailed ASP.NET errors are shown to the remote clients and to the local host • RemoteOnly: Specifies that custom errors are shown only to the remote clients, and that ASP.NET errors are shown to the local host. This is the default value This is a defense in depth recommendation due to the <deployment retail=\"true\" /> in the machine.config file overriding any settings for customErrors to be turned Off. It is recommended that customErrors still be turned to On or RemoteOnly.",
    "rationale": "customErrors can be set to On or RemoteOnly without leaking detailed application information to the client. Ensuring that customErrors is not set to Off will help mitigate the risk of malicious persons learning detailed application error and server configuration information. Impact: N/A",
    "audit": "Find and open the web.config file for the application/site and verify that the tag has either <customErrors mode=\"RemoteOnly\" /> or <customErrors mode=\"On\" /> defined. OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/customErrors\" -name \"mode\"",
    "remediation": "customErrors may be set for a server, site, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the customErrors mode to RemoteOnly or On for a Web Site in the IIS Manager GUI: 1. Open the IIS Manager GUI and navigate to the site to be configured 2. In Features View, find and double-click .NET Error Pages icon 3. In the Actions Pane, click Edit Feature Settings 4. In modal dialog, choose On or Remote Only for Mode settings 5. Click OK OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site'  -filter \"system.web/customErrors\" -name \"mode\" -value \"RemoteOnly\" Default Value: The default value is <customErrors mode= “RemoteOnly” />. References: 1. http://technet.microsoft.com/en-us/library/dd569096%28WS.10%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "N/A",
    "references": "1. http://technet.microsoft.com/en-us/library/dd569096%28WS.10%29.aspx",
    "function_names": [
      "app_service_web_config_custom_errors_enabled",
      "app_service_web_config_custom_errors_not_off",
      "app_service_web_config_custom_errors_remote_only",
      "app_service_web_config_custom_errors_on",
      "app_service_web_config_deployment_retail_enabled"
    ]
  },
  {
    "id": "3.4",
    "title": "(L1) Ensure IIS HTTP detailed errors are hidden from displaying remotely",
    "assessment": "Automated",
    "description": "A Web site's error pages are often set to show detailed error information for troubleshooting purposes during testing or initial deployment. To prevent unauthorized users from viewing this privileged information, detailed error pages must not be seen by remote users. This setting can be modified in the errorMode attribute setting for a Web site's error pages. By default, the errorMode attribute is set in the Web.config file for the Web site or application and is located in the <httpErrors> element of the <system.webServer> section. It is recommended that custom errors be prevented from displaying remotely.",
    "rationale": "The information contained in custom error messages can provide clues as to how applications function, opening up unnecessary attack vectors. Ensuring custom errors are never displayed remotely can help mitigate the risk of malicious persons obtaining information as to how the application works. Impact: Custom errors will not be viewable remotely.",
    "audit": "The errorMode attribute is set in the Web.config file for the Web site or application in the <httpErrors> element of the <system.webServer> section. Browse to the web.config and verify the errorMode is set to DetailedLocalOnly or Custom: <system.web> <system.webServer> <httpErrors errorMode=\"DetailedLocalOnly\"> </httpErrors> </system.webServer> </system.web> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.webServer/httpErrors\" -name \"errorMode\"",
    "remediation": "The following describes how to change the errorMode attribute to DetailedLocalOnly or Custom for a Web site by using IIS Manager: 1. Open IIS Manager with Administrative privileges 2. In the Connections pane on the left, expand the server, then expand the Sites folder 3. Select the Web site or application to be configured 4. In Features View, select Error Pages, in the Actions pane, select Open Feature 5. In the Actions pane, select Edit Feature Settings 6. In the Edit Error Pages Settings dialog, under Error Responses, select either Custom error pages or Detailed errors for local requests and custom error pages for remote requests 7. Click OK and exit the Edit Error Pages Settings dialog OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.webServer/httpErrors\" -name \"errorMode\" -value \"DetailedLocalOnly\" Default Value: The default errorMode is DetailedLocalOnly.  References: 1. http://technet.microsoft.com/en-us/library/dd391900%28WS.10%29.aspx 2. http://www.iis.net/configreference/system.webserver/httperrors",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Custom errors will not be viewable remotely.",
    "references": "1. http://technet.microsoft.com/en-us/library/dd391900%28WS.10%29.aspx 2. http://www.iis.net/configreference/system.webserver/httperrors",
    "function_names": [
      "iis_site_http_errors_hidden_remotely",
      "iis_web_server_detailed_errors_disabled_remote",
      "iis_http_errors_error_mode_configured",
      "iis_system_web_server_custom_errors_restricted",
      "iis_web_config_http_errors_secure",
      "iis_site_error_pages_remote_access_disabled",
      "iis_http_errors_remote_display_blocked",
      "iis_web_server_error_mode_secure",
      "iis_http_errors_detailed_remote_hidden",
      "iis_web_config_error_pages_protected"
    ]
  },
  {
    "id": "3.5",
    "title": "(L2) Ensure ASP.NET stack tracing is not enabled",
    "assessment": "Automated",
    "description": "The trace element configures the ASP.NET code tracing service that controls how trace results are gathered, stored, and displayed. When tracing is enabled, each page request generates trace messages that can be appended to the page output or stored in an application trace log. This is a defense in depth recommendation due to the <deployment retail=\"true\" /> in the machine.config file overriding any settings for ASP.NET stack tracing that are left on. It is recommended that ASP.NET stack tracing still be turned off.",
    "rationale": "In an active Web Site, tracing should not be enabled because it can display sensitive configuration and detailed stack trace information to anyone who views the pages in the site. If necessary, the localOnly attribute can be set to true to have trace information displayed only for localhost requests. Ensuring that ASP.NET stack tracing is not on will help mitigate the risk of malicious persons learning detailed stack trace information. Impact: ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site.",
    "audit": "Tracing is configurable at numerous levels: 1. Machine.config 2. Root-level web.config 3. Application-level web.config 4. Virtual or physical directory-level web.config 5. Individual ASP.Net page level Verify ASP.NET tracing is not turned on, via a per-page basis in the application. Ensure the trace attribute is not enabled: Trace=\"true\" On an application basis like in the web.config ensure that tracing is not enabled like: <configuration> <system.web> <trace enabled=\"true\"> </system.web> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/trace\" -name \"enabled\" | Format-List Name,Value",
    "remediation": "1. Ensure <deployment retail=\"true\" /> is enabled in the machine.config. 2. Remove all attribute references to ASP.NET tracing by deleting the trace and trace enable attributes. Per Page: Remove any references to: Trace=\"true\" Per Application: <configuration> <system.web> <trace enabled=\"true\"> </system.web> </configuration> OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/trace\" -name \"enabled\" -value \"False\" Default Value: The default value for ASP.NET tracing is off. References: 1. http://msdn.microsoft.com/en-us/library/94c55d08%28v=vs.100%29.aspx 2. http://msdn.microsoft.com/en-us/library/0x5wc973%28v=vs.100%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "ASP.NET stack tracing still be turned off and sensitive configuration and detailed stack trace information will not be viewable to anyone who views the pages in the site.",
    "references": "1. http://msdn.microsoft.com/en-us/library/94c55d08%28v=vs.100%29.aspx 2. http://msdn.microsoft.com/en-us/library/0x5wc973%28v=vs.100%29.aspx",
    "function_names": [
      "app_service_web_app_trace_disabled",
      "app_service_web_app_stack_tracing_disabled",
      "asp_net_trace_disabled",
      "asp_net_stack_tracing_disabled",
      "web_app_trace_disabled",
      "web_app_stack_tracing_disabled"
    ]
  },
  {
    "id": "3.6",
    "title": "(L2) Ensure 'httpcookie' mode is configured for session state",
    "assessment": "Automated",
    "description": "A session cookie associates session information with client information for that session, which can be the duration of a user's connection to a site. The cookie is passed in a HTTP header together with all requests between the client and server. Session information can also be stored in the URL. However, storing session information in this manner has security implications that can open attack vectors such as session hijacking. An effective method used to prevent session hijacking attacks is to force web applications to use cookies to store the session token. This is accomplished by setting the cookieless attribute of the sessionState node to UseCookies or False which will in turn keep session state data out of URI. It is recommended that session state be configured to UseCookies.",
    "rationale": "Cookies that have been properly configured help mitigate the risk of attacks such as session hi-jacking attempts by preventing ASP.NET from having to move session information to the URL; moving session information in URI causes session IDs to show up in proxy logs and is accessible to client scripting via document.location. Impact: Session information in URI session IDs will not show up in proxy logs.",
    "audit": "Find and open the web.config file for the application/site and verify that the sessionState tag is set to use cookies: <system.web> <sessionState cookieless=\"UseCookies\" /> </system.web> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/sessionState\" -name \"mode\"",
    "remediation": "SessionState can be set to UseCookies by using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, directly editing the configuration files, or by writing WMI scripts. Perform the following to set the cookieless attribute of the sessionState node to UseCookies in the IIS Manager GUI: 1. Open the IIS Manager GUI and navigate desired server, site, or application 2. In Features View, find and double-click the Session State icon 3. In the Cookie Settings section, choose Use Cookies from the Mode dropdown 4. In the Actions Pane, click Apply To use AppCmd.exe to configure sessionState at the server level, the command would look like this: %systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:sessionState /cookieless:UseCookies /cookieName:ASP.NET_SessionID /timeout:20 When Appcmd.exe is used to configure the <sessionstate> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config. OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/<website name>' -filter \"system.web/sessionState\" -name \"mode\" -value \"StateServer\" Default Value: By default, IIS maintains session state data for a managed code application in the worker process where the application runs e.g. In Process.  References: 1. http://www.iis.net/learn/application-frameworks/scenario-build-an-aspnet-website- on-iis/planning-step-2-plan-asp-net-settings 2. http://msdn.microsoft.com/en-us/library/h6bb9cz9%28VS.71%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Session information in URI session IDs will not show up in proxy logs.",
    "references": "1. http://www.iis.net/learn/application-frameworks/scenario-build-an-aspnet-website- on-iis/planning-step-2-plan-asp-net-settings 2. http://msdn.microsoft.com/en-us/library/h6bb9cz9%28VS.71%29.aspx",
    "function_names": [
      "app_service_session_state_httpcookie_enabled",
      "app_service_session_state_cookieless_disabled",
      "app_service_session_state_use_cookies_required",
      "app_service_session_state_uri_tokens_disabled",
      "app_service_session_state_secure_cookie_mode",
      "app_service_session_state_hijacking_protection_enabled",
      "app_service_session_state_token_storage_cookie_only"
    ]
  },
  {
    "id": "3.7",
    "title": "(L1) Ensure 'cookies' are set with HttpOnly attribute",
    "assessment": "Automated",
    "description": "The httpOnlyCookies attribute of the httpCookies node determines if IIS will set the HttpOnly flag on HTTP cookies it sets. The HttpOnly flag indicates to the user agent that the cookie must not be accessible by client-side script (i.e document.cookie). It is recommended that the httpOnlyCookies attribute be set to true.",
    "rationale": "When cookies are set with the HttpOnly flag, they cannot be accessed by client-side scripting running in the user's browser. Preventing client-side scripting from accessing cookie content may reduce the probability of a cross site scripting attack materializing into a successful session hijack. Impact: N/A",
    "audit": "After the next time IIS is restarted, browse to and open the web.config for the application in which httpOnly cookies have been turned on. Confirm the httpOnlyCookies attribute is set to true: <httpCookies httpOnlyCookies=\"true\" />.",
    "remediation": "1. Locate and open the application's web.config file 2. Add the <httpCookies httpOnlyCookies=\"true\" /> tag within <system.web>: <configuration> <system.web> <httpCookies httpOnlyCookies=\"true\" /> </system.web> </configuration> Setting the value of the httpOnlyCookies attribute of the httpCookies element to true will add the HttpOnly flag to all the cookies set by the application. All modern versions of browsers recognize HttpOnly attribute; older versions will either treat them as normal cookies or simply ignore them altogether.  Default Value: By default, ASP.NET 2.0 does not force cookies to httpOnly. References: 1. https://tools.ietf.org/wg/httpstate/charters 2. https://www.owasp.org/index.php/HTTPOnly#Browsers_Supporting_HttpOnly 3. https://msdn.microsoft.com/en-us/library/ms533046.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. https://tools.ietf.org/wg/httpstate/charters 2. https://www.owasp.org/index.php/HTTPOnly#Browsers_Supporting_HttpOnly 3. https://msdn.microsoft.com/en-us/library/ms533046.aspx",
    "function_names": [
      "iis_http_cookies_http_only_enabled",
      "iis_http_cookies_http_only_attribute_set",
      "iis_http_cookies_http_only_flag_configured",
      "iis_http_cookies_secure_attribute_enabled",
      "iis_http_cookies_http_only_and_secure_enabled"
    ]
  },
  {
    "id": "3.8",
    "title": "(L2) Ensure 'MachineKey validation method - .Net 3.5' is configured",
    "assessment": "Automated",
    "description": "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification. The following validation methods are available: • Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys • Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data • Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest • Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES It is recommended that AES or SHA1 methods be configured for use at the global level.",
    "rationale": "Setting the validation property to AES will provide confidentiality and integrity protection to the viewstate. AES is the strongest encryption algorithm supported by the validation property. Setting the validation property to SHA1 will provide integrity protection to the viewstate. SHA1 is the strongest hashing algorithm supported by the validation property. Impact: N/A",
    "audit": "To verify the Machine Key validation method using IIS Manager: 1. Open IIS Manager and navigate to the level that was configured, the WEBROOT, or server in this case 2. In the features view, double click Machine Key 3. On the Machine Key page, verify that SHA1 is selected in the validation method dropdown",
    "remediation": "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command: %systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:machineKey /validation:SHA1 Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config. Default Value: The default Machine Key validation method is SHA1. References: 1. http://technet.microsoft.com/en-us/library/cc772271%28WS.10%29.aspx 2. http://technet.microsoft.com/en-us/library/cc772287%28WS.10%29.aspx",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "N/A",
    "references": "1. http://technet.microsoft.com/en-us/library/cc772271%28WS.10%29.aspx 2. http://technet.microsoft.com/en-us/library/cc772287%28WS.10%29.aspx",
    "function_names": [
      "asp_net_machine_key_validation_method_aes_configured",
      "asp_net_machine_key_validation_method_sha1_configured",
      "asp_net_machine_key_validation_method_secure_configured",
      "asp_net_machine_key_validation_method_no_md5",
      "asp_net_machine_key_validation_method_no_triple_des",
      "asp_net_machine_key_validation_method_min_aes_128",
      "asp_net_machine_key_validation_method_no_weak_algorithms"
    ]
  },
  {
    "id": "3.9",
    "title": "(L1) Ensure 'MachineKey validation method - .Net 4.5' is configured",
    "assessment": "Automated",
    "description": "The machineKey element of the ASP.NET web.config specifies the algorithm and keys that ASP.NET will use for encryption. The Machine Key feature can be managed to specify hashing and encryption settings for application services such as view state, Forms authentication, membership and roles, and anonymous identification. The following validation methods are available: • Advanced Encryption Standard (AES) is relatively easy to implement and requires little memory. AES has a key size of 128, 192, or 256 bits. This method uses the same private key to encrypt and decrypt data, whereas a public-key method must use a pair of keys • Message Digest 5 (MD5) is used for digital signing of applications. This method produces a 128-bit message digest, which is a compressed form of the original data • Secure Hash Algorithm (SHA1) is considered more secure than MD5 because it produces a 160-bit message digest • Triple Data Encryption Standard (TripleDES) is a minor variation of Data Encryption Standard (DES). It is three times slower than regular DES but can be more secure because it has a key size of 192 bits. If performance is not a primary consideration, consider using TripleDES • Secure Hash Algorithm (SHA-2) is a family of two similar hash functions, with different block sizes known as SHA-256 and SHA-512. They differ in the word size; SHAS-256 used 32-bit words and SHA-512 uses 64-bit words. It is recommended that SHA-2 methods be configured for use at the global level.",
    "rationale": "SHA-2 is the strongest hashing algorithm supported by the validation property so it should be used as the validation method for the MachineKey in .Net 4.5. Impact: N/A",
    "audit": "To verify the Machine Key validation method using IIS Manager: 1. Open IIS Manager and navigate to the level that was configured, the WEBROOT, or server in this case 2. In the features view, double click Machine Key 3. On the Machine Key page, verify that HMACSHA256 is selected in the validation method dropdown OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter \"system.web/machineKey\" -name \"validation\"",
    "remediation": "Machine key encryption can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the Machine Key encryption at the global level using an appcmd.exe command: %systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:machineKey /validation:<validation method> Note: When Appcmd.exe is used to configure the <machineKey> element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config. OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter \"system.web/machineKey\" -name \"validation\" -value \"<validation method>\" Default Value: The default Machine Key validation method is SHA256. References: 1. http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-aspnet-configuration- management",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-aspnet-configuration- management",
    "function_names": [
      "asp_net_machine_key_validation_method_aes_enabled",
      "asp_net_machine_key_validation_method_md5_disabled",
      "asp_net_machine_key_validation_method_sha1_disabled",
      "asp_net_machine_key_validation_method_triple_des_disabled",
      "asp_net_machine_key_validation_method_sha2_enabled",
      "asp_net_machine_key_validation_method_min_sha256",
      "asp_net_machine_key_validation_method_secure_algorithm_used"
    ]
  },
  {
    "id": "3.10",
    "title": "(L1) Ensure global .NET trust level is configured",
    "assessment": "Automated",
    "description": "An application's trust level determines the permissions that are granted by the ASP.NET code access security (CAS) policy. CAS defines two trust categories: full trust and partial trust. An application that has full trust permissions may access all resource types on a server and perform privileged operations, while applications that run with partial trust have varying levels of operating permissions and access to resources. The possible values for the Level property of the TrustSection class are: • Full: Specifies unrestricted permissions and grants the ASP.NET application permissions to access any resource that is subject to operating system security; all privileged operations are supported • High: specifies a high level of code access security which limits the application from doing the following: o Call unmanaged code o Call serviced components o Write to the event log o Access Microsoft Windows Message Queuing queues o Access ODBC, OLD DB, or Oracle data sources • Medium: specifies a medium level of code access security, which means that in addition to the restrictions for High, the ASP.NET application cannot do any of the following things: o Access files outside the application directory o Access the registry • Low: specifies a low level of code access security, which means that in addition to the restrictions for Medium, the application is prevented from performing any of the following actions: o Write to the file system o Call the System.Security.CodeAccessPermission.Assert method to expand permissions to resources o Minimal: specifies a minimal level of code access security, which means that the application has only execute permission It is recommended that the global .NET Trust Level be set to Medium or lower.",
    "rationale": "The CAS determines the permissions that are granted to the application on the server. Setting a minimal level of trust that is compatible with the applications will limit the potential harm that a compromised application could cause to a system. Impact: If not set properly, the application may not run.",
    "audit": "To verify the global .NET Trust Level using IIS Manager: 1. Open IIS Manager and navigate to the level that was configured, the server in this example 2. In the features view, double click .NET Trust Levels 3. On the .NET Trust Levels page, verify that Medium (web_mediumtrust.config) is selected in the Trust Level dropdown OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter \"system.web/trust\" -name \"level\"",
    "remediation": "Trust level can be set by using the UI, running appcmd.exe commands, by editing configuration files directly, or by writing WMI scripts. To set the .Net Trust Level to Medium at the server level using an appcmd.exe command: %systemroot%\\system32\\inetsrv\\appcmd set config /commit:WEBROOT /section:trust /level:Medium When Appcmd.exe is used to configure the element at the global level in IIS, the /commit:WEBROOT switch must be included so that configuration changes are made to the root web.config file instead of ApplicationHost.config. OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT'  -filter \"system.web/trust\" -name \"level\" -value \"Medium\" Default Value: By default, ASP.NET web applications run under the full trust setting. References: 1. http://technet.microsoft.com/en-us/library/cc772237(WS.10).aspx 2. http://msdn.microsoft.com/en-us/library/ms691448%28VS.90%29.aspx 3. http://support.microsoft.com/kb/2698981",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "If not set properly, the application may not run.",
    "references": "1. http://technet.microsoft.com/en-us/library/cc772237(WS.10).aspx 2. http://msdn.microsoft.com/en-us/library/ms691448%28VS.90%29.aspx 3. http://support.microsoft.com/kb/2698981",
    "function_names": [
      "app_service_net_trust_level_configured",
      "app_service_net_trust_level_medium_or_lower",
      "app_service_net_trust_level_not_full",
      "app_service_net_trust_level_restricted",
      "app_service_net_trust_level_secure",
      "app_service_net_trust_level_compliant",
      "app_service_net_trust_level_limited",
      "app_service_net_trust_level_enforced"
    ]
  },
  {
    "id": "3.11",
    "title": "(L2) Ensure X-Powered-By Header is removed",
    "assessment": "Manual",
    "description": "The x-powered-by headers specify the underlying technology used by the webserver.",
    "rationale": "Attackers are able to conduct reconnaissance on a website using these response headers. This header could be used to target attacks for specific known vulnerabilities associated with the underlying technology. Removing this header will prevent targeting of your application for specific exploits by non-determined attackers. While this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers. Impact: X-powered-by headers will not be available on the webserver.",
    "audit": "To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd.exe list config  - section:system.webServer/httpProtocol",
    "remediation": "Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd.exe set config  - section:system.webServer/httpProtocol /-\"customHeaders.[name='X-Powered-By']\" /commit:apphost OR Enter the following command in PowerShell to configure: Remove-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webserver/httpProtocol/customHeaders\" -name \".\" -AtElement @{name='X- Powered-By'} References: 1. https://blogs.msdn.microsoft.com/jpsanders/2015/10/07/remove-server-and-x- powered-by-headers-from-your-azure-mobile-apps/",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "X-powered-by headers will not be available on the webserver.",
    "references": "1. https://blogs.msdn.microsoft.com/jpsanders/2015/10/07/remove-server-and-x- powered-by-headers-from-your-azure-mobile-apps/",
    "function_names": [
      "cloud_cdn_header_x_powered_by_removed",
      "compute_header_x_powered_by_removed",
      "web_server_header_x_powered_by_removed",
      "load_balancer_header_x_powered_by_removed",
      "api_gateway_header_x_powered_by_removed"
    ]
  },
  {
    "id": "3.12",
    "title": "(L2) Ensure Server Header is removed",
    "assessment": "Manual",
    "description": "The server header headers specify the underlying technology used by the application.",
    "rationale": "While this is not the only way to fingerprint a site through the response headers, it makes it harder and prevents some potential attackers. The server header removal directive is a new feature in IIS 10 that can assist in mitigating this risk. Impact: This will remove the server header.",
    "audit": "To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd.exe list config - section:system.webServer/security/requestFiltering OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath machine/webroot/apphost -filter 'system.webserver/security/requestfiltering ' -name 'removeServerHeader'",
    "remediation": "Enter the following command to use AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd.exe set config - section:system.webServer/security/requestFiltering /removeServerHeader:\"True\" /commit:apphost OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/' -filter \"system.webServer/security/requestFiltering\" -name \"removeServerHeader\" - value \"True\" Default Value: Microsoft-IIS/10.0 References: 1. https://blogs.msdn.microsoft.com/jpsanders/2015/10/07/remove-server-and-x- powered-by-headers-from-your-azure-mobile-apps/",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "This will remove the server header.",
    "references": "1. https://blogs.msdn.microsoft.com/jpsanders/2015/10/07/remove-server-and-x- powered-by-headers-from-your-azure-mobile-apps/",
    "function_names": [
      "cloud_cdn_distribution_server_header_removed",
      "compute_load_balancer_server_header_removed",
      "cloud_storage_bucket_server_header_removed",
      "api_gateway_server_header_removed",
      "cloud_front_distribution_server_header_removed",
      "web_application_firewall_server_header_removed",
      "cloud_run_service_server_header_removed",
      "app_engine_service_server_header_removed"
    ]
  },
  {
    "id": "4.1",
    "title": "(L2) Ensure 'maxAllowedContentLength' is configured",
    "assessment": "Manual",
    "description": "The maxAllowedContentLength Request Filter is the maximum size of the http request, measured in bytes, which can be sent from a client to the server. Configuring this value enables the total request size to be restricted to a configured value. It is recommended that the overall size of requests be restricted to a maximum value appropriate for the server, site, or application.",
    "rationale": "Setting an appropriate value that has been tested for the maxAllowedContentLength filter will lower the impact an abnormally large request would otherwise have on IIS and/or web applications. This helps to ensure availability of web content and services, and may also help mitigate the risk of buffer overflow type attacks in unmanaged components. Impact: Size of requests be restricted to the maximum value set.",
    "audit": "Upon exceeding the configured value set for the Request Filter, IIS will throw a Status Code 404.13. To manually verify the change, locate and open the web.config for the web site or application in which the request filter was set. Ensure the value defined for maxAllowedContentLength is what was set. The 28.6MB max example would show: <configuration> <system.webServer> <security> <requestFiltering> <requestLimits maxAllowedContentLength=\"30000000\" /> </requestFiltering> </security> </system.webServer> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/requestFiltering/requestLimits\" -name \"maxAllowedContentLength\"",
    "remediation": "The MaxAllowedContentLength Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI: 1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, click on the server, site, application, or directory to be configured 3. In the Home pane, double-click Request Filtering 4. Click Edit Feature Settings... in the Actions pane 5. Under the Request Limits section, key the maximum content length in bytes that will allow applications to retain their intended functionality, such as 30000000 (approx. 28.6 MB) Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxAllowedContentLength:30000000 OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/requestFiltering/requestLimits\" -name \"maxAllowedContentLength\" -value 30000000 Default Value: When request filtering is installed on a system, the default value is: maxAllowedContentLength=“30000000”, which is approximately 28.6MB. References: 1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Size of requests be restricted to the maximum value set.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "function_names": [
      "cloud_cdn_endpoint_request_size_restricted",
      "cloud_cdn_endpoint_max_content_length_configured",
      "cloud_cdn_endpoint_request_limit_enforced",
      "cloud_cdn_endpoint_content_length_restricted",
      "cloud_cdn_endpoint_request_size_limited"
    ]
  },
  {
    "id": "4.2",
    "title": "(L2) Ensure 'maxURL request filter' is configured",
    "assessment": "Automated",
    "description": "The maxURL attribute of the <requestLimits> property is the maximum length (in Bytes) in which a requested URL can be (excluding query string) in order for IIS to accept. Configuring this Request Filter enables administrators to restrict the length of the requests that the server will accept. It is recommended that a limit be put on the length of URL.",
    "rationale": "With a properly configured Request Filter limiting the amount of data accepted in the URL, chances of undesired application behaviors affecting the availability of content and services are reduced. Impact: Length of the URL will be restricted to the maximum value set.",
    "audit": "IIS will log a 404.14 HTTP status if the requested URL was rejected because it exceeded the length defined in the filter. To manually verify the change, locate and open the web.config for the web site or application in which the request filter was set. Verify the value defined for maxURL. <configuration> <system.webServer> <security> <requestFiltering> <requestLimits maxURL=\"4096\" /> </requestFiltering> </security> </system.webServer> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/requestFiltering/requestLimits\" -name \"maxUrl\"",
    "remediation": "The MaxURL Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI: 1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, click on the connection, site, application, or directory to be configured 3. In the Home pane, double-click Request Filtering 4. Click Edit Feature Settings... in the Actions pane 5. Under the Request Limits section, key the maximum URL length in bytes that has been tested with web applications Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxURL:4096 OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/requestFiltering/requestLimits\" -name \"maxUrl\" - value 4096 Default Value: When Request Filtering is installed on a system, the default value for maxURL=“4096”. References: 1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Length of the URL will be restricted to the maximum value set.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "function_names": [
      "iis_request_limits_max_url_configured",
      "iis_request_filter_url_length_restricted",
      "iis_request_limits_url_size_set",
      "iis_request_filter_max_url_bytes_defined",
      "iis_request_limits_url_length_enforced"
    ]
  },
  {
    "id": "4.3",
    "title": "(L2) Ensure 'MaxQueryString request filter' is configured",
    "assessment": "Automated",
    "description": "The MaxQueryString Request Filter describes the upper limit on the length of the query string that the configured IIS server will allow for websites or applications. It is recommended that values always be established to limit the amount of data that can be accepted in the query string.",
    "rationale": "With a properly configured Request Filter limiting the amount of data accepted in the query string, chances of undesired application behaviors such as app pool failures are reduced. Impact: The amount of data to be accepted in the query string will be limited.",
    "audit": "If a request is rejected because it exceeds the value set in the maxQueryString Request Filter, a 404.15 HTTP status is logged to the IIS log file. To manually verify the change, locate and open the web.config for the web site or application in which the filter was set. Ensure the value defined for maxQueryString is what was configured. <configuration> <system.webServer> <security> <requestFiltering> <requestLimits maxQueryString=\"2048\" /> </requestFiltering> </security> </system.webServer> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webServer/security/requestFiltering/requestLimits\" -name \"maxQueryString\"",
    "remediation": "The MaxQueryString Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI: 1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, go to the connection, site, application, or directory to be configured 3. In the Home pane, double-click Request Filtering 4. Click Edit Feature Settings... in the Actions pane 5. Under the Request Limits section, key in a safe upper bound in the Maximum query string (Bytes) textbox Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /requestLimits.maxQueryString:2048 OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webServer/security/requestFiltering/requestLimits\" -name \"maxQueryString\" -value 2048 Default Value: When request filtering is installed on a system, the default value is maxQueryString=“2048”. References: 1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "The amount of data to be accepted in the query string will be limited.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "function_names": [
      "iis_request_filter_max_query_string_configured",
      "iis_request_filter_query_string_length_limited",
      "iis_request_filter_query_string_upper_limit_set",
      "iis_request_filter_query_string_size_restricted",
      "iis_request_filter_query_string_max_length_defined"
    ]
  },
  {
    "id": "4.4",
    "title": "(L2) Ensure non-ASCII characters in URLs are not allowed",
    "assessment": "Automated",
    "description": "This feature is used to allow or reject all requests to IIS that contain non-ASCII characters. When using this feature, Request Filtering will deny the request if high-bit characters are present in the URL. The UrlScan equivalent is AllowHighBitCharacters. It is recommended that requests containing non-ASCII characters be rejected, where possible.",
    "rationale": "This feature can help defend against canonicalization attacks, reducing the potential attack surface of servers, sites, and/or applications. Impact: Requests containing non-ASCII characters be rejected.",
    "audit": "If a request is rejected because it contains a high-bit character, a 404.12 HTTP status is logged to the IIS log file. To manually verify the change, locate and open the web.config for the web site or application in which the request filter was set. Ensure the value defined for the filter is false, as such: <configuration> <system.webServer> <security> <requestFiltering allowHighBitCharacters=\"false\"> </requestFiltering> </security> </system.webServer> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter 'system.webServer/security/requestFiltering' -name 'allowHighBitCharacters'",
    "remediation": "The AllowHighBitCharacters Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI: 1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, go to the connection, site, application, or directory to be configured 3. In the Home pane, double-click Request Filtering 4. Click Edit Feature Settings... in the Actions pane 5. Under the General section, uncheck Allow high-bit characters Note: Disallowing high-bit ASCII characters in the URL may negatively impact the functionality of sites requiring international language support. Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /allowHighBitCharacters:false OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webServer/security/requestFiltering\" -name \"allowHighBitCharacters\" - value \"False\" Default Value: When Request Filtering is installed on a system, the default behavior is to allow high-bit characters in URI. References: 1. http://learn.iis.net/page.aspx/143/use-request-filtering/ 2. http://learn.iis.net/page.aspx/936/urlscan-1-reference/ 3. Professional IIS 7 by Ken Schaefer, Jeff Cochran, Scott Forsyth, Rob Baugh, Mike Everest, Dennis Glendenning",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Requests containing non-ASCII characters be rejected.",
    "references": "1. http://learn.iis.net/page.aspx/143/use-request-filtering/ 2. http://learn.iis.net/page.aspx/936/urlscan-1-reference/ 3. Professional IIS 7 by Ken Schaefer, Jeff Cochran, Scott Forsyth, Rob Baugh, Mike Everest, Dennis Glendenning",
    "function_names": [
      "iis_request_filtering_non_ascii_rejected",
      "iis_url_high_bit_characters_blocked",
      "iis_request_non_ascii_denied",
      "iis_url_filtering_ascii_only_enabled"
    ]
  },
  {
    "id": "4.5",
    "title": "(L1) Ensure Double-Encoded requests will be rejected",
    "assessment": "Automated",
    "description": "This Request Filter feature prevents attacks that rely on double-encoded requests and applies if an attacker submits a double-encoded request to IIS. When the double- encoded requests filter is enabled, IIS will go through a two iteration process of normalizing the request. If the first normalization differs from the second, the request is rejected and the error code is logged as a 404.11. The double-encoded requests filter was the VerifyNormalization option in UrlScan. It is recommended that double-encoded requests be rejected.",
    "rationale": "This feature will help prevent attacks that rely on URLs that have been crafted to contain double-encoded request(s). Impact: Double-encoded requests will be rejected.",
    "audit": "If a request is rejected because it contains a double-encoded request, a 404.11 HTTP status is logged to the IIS log file. To manually verify the change, locate and open the web.config for the web site or application in which the request filter was set. Ensure the value defined for allowDoubleEscaping is false: <configuration> <system.webServer> <security> <requestFiltering allowDoubleEscaping=\"false\"> </requestFiltering> </security> </system.webServer> </configuration> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webServer/security/requestFiltering\" -name \"allowDoubleEscaping\"",
    "remediation": "The allowDoubleEscaping Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure using the IIS Manager GUI: 1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, select the site, application, or directory to be configured 3. In the Home pane, double-click Request Filtering 4. Click Edit Feature Settings... in the Actions pane 5. Under the General section, uncheck Allow double escaping If a file name in a URL includes \"+\" then allowDoubleEscaping must be set to true to allow functionality. Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /allowDoubleEscaping:false OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webServer/security/requestFiltering\" -name \"allowDoubleEscaping\" - value \"True\" Default Value: When Request Filtering is installed on a system, the default behavior is to not allow double-encoded requests. References: 1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Double-encoded requests will be rejected.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://learn.iis.net/page.aspx/143/use-request-filtering/",
    "function_names": [
      "iis_request_filter_double_encoding_rejected",
      "iis_request_filter_normalization_enabled",
      "iis_request_filter_verify_normalization_enabled",
      "iis_request_filter_404_11_error_logging_enabled",
      "iis_request_filter_attack_prevention_enabled"
    ]
  },
  {
    "id": "4.6",
    "title": "(L1) Ensure 'HTTP Trace Method' is disabled",
    "assessment": "Manual",
    "description": "The HTTP TRACE method returns the contents of client HTTP requests in the entity- body of the TRACE response. Attackers could leverage this behavior to access sensitive information, such as authentication data or cookies, contained in the HTTP headers of the request. One such way to mitigate this is by using the <verbs> element of the <requestFiltering> collection. The <verbs> element replaces the [AllowVerbs] and [DenyVerbs] features in UrlScan. It is recommended the HTTP TRACE method be denied.",
    "rationale": "Attackers may abuse HTTP TRACE functionality to gain access to information in HTTP headers such as cookies and authentication data. This risk can be mitigated by not allowing the TRACE verb. Impact: Contents of client HTTP requests in the entity-body of the TRACE response will not be available.",
    "audit": "IIS will return an HTTP 404.6 error to the client when Request Filtering blocks an HTTP request because of a denied HTTP verb. To manually verify the change, browse to the web.config file for which the change was made and verify the below configuration: <configuration> <system.webServer> <security> <requestFiltering> <verbs> <add verb=\"TRACE\" allowed=\"false\" /> </verbs> </requestFiltering> </security> </system.webServer> </configuration> To view this Request Filter using an AppCmd.exe command, run the following command at an elevated command prompt: %systemroot%\\system32\\inetsrv\\appcmd listconfig /section:requestfiltering",
    "remediation": "1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, select the site, application, or directory to be configured 3. In the Home pane, double-click Request Filtering 4. In the Request Filtering pane, click the HTTP verbs tab, and then click Deny Verb... in the Actions pane 5. In the Deny Verb dialog box, enter the TRACE, and then click OK Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /+verbs.[verb='TRACE',allowed='false'] OR Enter the following command in PowerShell to configure: Add-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/requestFiltering/verbs\" -name \".\" -value @{verb='TRACE';allowed='False'} Default Value: The TRACE verb is not filtered by default.  References: 1. http://www.kb.cert.org/vuls/id/867593 2. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/v erbs",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Contents of client HTTP requests in the entity-body of the TRACE response will not be available.",
    "references": "1. http://www.kb.cert.org/vuls/id/867593 2. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/v erbs",
    "function_names": [
      "iis_request_filtering_trace_method_denied",
      "iis_http_trace_method_disabled",
      "iis_request_filtering_verbs_configured",
      "iis_trace_method_restricted",
      "iis_http_methods_secure_config"
    ]
  },
  {
    "id": "4.7",
    "title": "(L1) Ensure Unlisted File Extensions are not allowed",
    "assessment": "Automated",
    "description": "The FileExtensions Request Filter allows administrators to define specific extensions their web server(s) will allow and disallow. The property allowUnlisted will cover all other file extensions not explicitly allowed or denied. Often times, extensions such as .config, .bat, .exe, to name a few, should never be served. The AllowExtensions and DenyExtensions options are the UrlScan equivalents. It is recommended that all extensions be disallowed at the most global level possible, with only those necessary being allowed.",
    "rationale": "Disallowing all but the necessary file extensions can greatly reduce the attack surface of applications and servers. Impact: If not set properly, file extensions that are needed will be rejected.",
    "audit": "When IIS rejects a request based on a file extensions filter, the error code logged is 404.7. To manually verify the change, locate and open the web.config for the web site or application in which the Request Filter was set. Ensure <fileExtensions allowUnlisted=\"false\">. The following web.config will disallow any requests for files that do not have .asp, .aspx, or .html as their extension: <configuration> <system.webServer> <security> <requestFiltering> <fileExtensions allowUnlisted=\"false\"> <add fileExtension=\".asp\" allowed=\"true\" /> <add fileExtension=\".aspx\" allowed=\"true\" /> <add fileExtension=\".html\" allowed=\"true\" /> </fileExtensions> </requestFiltering> </security> </system.webServer> </configuration> OR To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd list config /section:requestfiltering OR To verify using PowerShell enter the following command Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.webServer/security/requestFiltering/fileExtensions\" -name \"allowUnlisted\"",
    "remediation": "The allowUnlisted Request Filter may be set for a server, website, or application using the IIS Manager GUI, using AppCmd.exe commands in a command-line window, and/or directly editing the configuration files. To configure at the server level using the IIS Manager GUI: 1. Open Internet Information Services (IIS) Manager 2. In the Connections pane, select the server 3. In the Home pane, double-click Request Filtering 4. Click Edit Feature Settings... in the Actions pane 5. Under the General section, uncheck Allow unlisted file name extensions Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:requestfiltering /fileExtensions.allowunlisted:false OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/requestFiltering/fileExtensions\" -name \"allowUnlisted\" -value \"False\" Default Value: The default Request Filtering configuration allows all unlisted file extensions to be requested. References: 1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://www.iis.net/learn/manage/configuring-security/configure-request-filtering-in- iis",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "If not set properly, file extensions that are needed will be rejected.",
    "references": "1. http://www.iis.net/ConfigReference/system.webServer/security/requestFiltering/re questLimits 2. http://www.iis.net/learn/manage/configuring-security/configure-request-filtering-in- iis",
    "function_names": [
      "cloud_cdn_endpoint_allowed_file_extensions_restricted",
      "cloud_cdn_endpoint_unlisted_file_extensions_denied",
      "cloud_cdn_endpoint_allow_unlisted_disabled",
      "cloud_cdn_endpoint_deny_extensions_configured",
      "cloud_cdn_endpoint_allow_extensions_explicit",
      "cloud_cdn_endpoint_file_extension_filter_enabled",
      "cloud_cdn_endpoint_unsafe_extensions_blocked",
      "cloud_cdn_endpoint_extension_policy_enforced"
    ]
  },
  {
    "id": "4.8",
    "title": "(L1) Ensure Handler is not granted Write and Script/Execute",
    "assessment": "Manual",
    "description": "Handler mappings can be configured to give permissions to Read, Write, Script, or Execute depending on what the use is for - reading static content, uploading files, executing scripts, etc. It is recommended to grant a handler either Execute/Script or Write permissions, but not both.",
    "rationale": "By allowing both Execute/Script and Write permissions, a handler can run malicious code on the target server. Ensuring these two permissions are never together will help lower the risk of malicious code being executed on the server. Impact: N/A",
    "audit": "Open the ApplicationHost.config file in %systemroot%\\system32\\inetsrv\\config. Find the <handlers> section and verify that the accessPolicy attribute does not contain Write when Script or Execute are present. The following is an acceptable example: <system.webserver> <handlers accessPolicy=\"Read, Script\"> </handlers> </system.webserver> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/handlers\" -name \"accessPolicy\"",
    "remediation": "The accessPolicy attribute in the <handlers> section of either the ApplicationHost.config (server-wide) or web.config (site or application) must not have Write present when Script or Execute are present. To resolve this issue for a Web server, the attribute in the <handlers> section of the ApplicationHost.config file for the server must manually be edited. To edit the ApplicationHost.config file by using Notepad, perform the following steps: 1. Open Notepad as Administrator 2. Open the ApplicationHost.config file in %systemroot%\\system32\\inetsrv\\config 3. Edit the <handlers> section accessPolicy attribute so that Write is not present when Script or Execute are present Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config /section:handlers /accessPolicy:Read,Script OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/handlers\" -name \"accessPolicy\" -value \"Read,Script\" Note: This configuration change cannot be made by using IIS Manager. Default Value: The default handlers accessPolicy is Read, Script.  References: 1. http://technet.microsoft.com/en-us/library/dd391910%28WS.10%29.aspx 2. http://blogs.iis.net/thomad/archive/2006/11/05/quo-vadis-accessflags.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://technet.microsoft.com/en-us/library/dd391910%28WS.10%29.aspx 2. http://blogs.iis.net/thomad/archive/2006/11/05/quo-vadis-accessflags.aspx",
    "function_names": [
      "cloud_cdn_handler_write_and_execute_disallowed",
      "cloud_cdn_handler_permissions_restricted",
      "cloud_cdn_handler_script_and_write_separated",
      "cloud_cdn_handler_secure_permission_mapping",
      "cloud_cdn_handler_no_write_and_execute"
    ]
  },
  {
    "id": "4.9",
    "title": "(L1) Ensure 'notListedIsapisAllowed' is set to false",
    "assessment": "Automated",
    "description": "The notListedIsapisAllowed attribute is a server-level setting that is located in the ApplicationHost.config file in the <isapiCgiRestriction> element of the <system.webServer> section under <security>. This element ensures that malicious users cannot copy unauthorized ISAPI binaries to the Web server and then run them. It is recommended that notListedIsapisAllowed be set to false.",
    "rationale": "Restricting this attribute to false will help prevent potentially malicious ISAPI extensions from being run. Impact: Unauthorized ISAPI binaries will not be allowed.",
    "audit": "Open the applicationHost.config file in %systemroot%\\system32\\inetsrv\\config. Verify that the notListedIsapisAllowed attribute in the <isapiCgiRestriction> element is set to false: <system.webServer> <security> <isapiCgiRestriction notListedIsapisAllowed=\"false\"> </isapiCgiRestriction> </security> </system.webServer> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/isapiCgiRestriction\" -name \"notListedIsapisAllowed\"",
    "remediation": "To use IIS Manager to set the notListedIsapisAllowed attribute to false: 1. Open IIS Manager as Administrator 2. In the Connections pane on the left, select server to be configured 3. In Features View, select ISAPI and CGI Restrictions; in the Actions pane, select Open Feature 4. In the Actions pane, select Edit Feature Settings 5. In the Edit ISAPI and CGI Restrictions Settings dialog, clear the Allow unspecified ISAPI modules check box, if checked 6. Click OK Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd.exe set config  - section:system.webServer/security/isapiCgiRestriction /notListedIsapisAllowed:false OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/isapiCgiRestriction\" -name \"notListedIsapisAllowed\" -value \"False\" Default Value: The default value for notListedIsapisAllowed is false. References: 1. http://technet.microsoft.com/en-us/library/dd378846%28WS.10%29.aspx 2. http://www.iis.net/ConfigReference/system.webServer/security/isapiCgiRestrictio n",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Unauthorized ISAPI binaries will not be allowed.",
    "references": "1. http://technet.microsoft.com/en-us/library/dd378846%28WS.10%29.aspx 2. http://www.iis.net/ConfigReference/system.webServer/security/isapiCgiRestrictio n",
    "function_names": [
      "iis_server_isapi_restriction_not_listed_allowed_disabled",
      "iis_config_isapi_cgi_restriction_secure",
      "iis_security_isapi_unauthorized_binaries_blocked",
      "iis_application_host_not_listed_isapis_denied",
      "web_server_isapi_restriction_secure_config_enabled"
    ]
  },
  {
    "id": "4.10",
    "title": "(L1) Ensure 'notListedCgisAllowed' is set to false",
    "assessment": "Automated",
    "description": "The notListedCgisAllowed attribute is a server-level setting that is located in the ApplicationHost.config file in the <isapiCgiRestriction> element of the <system.webServer> section under <security>. This element ensures that malicious users cannot copy unauthorized CGI binaries to the Web server and then run them. It is recommended that notListedCgisAllowed be set to false.",
    "rationale": "Restricting this attribute to false will help prevent unlisted CGI extensions, including potentially malicious CGI scripts from being run. Impact: Unlisted CGI extensions will not be allowed.",
    "audit": "Browse to and open the applicationHost.config file and verify that the notListedCgisAllowed attribute in the <isapiCgiRestriction> element is set to false: <system.webServer> <security> <isapiCgiRestriction notListedCgisAllowed=\"false\"> </isapiCgiRestriction> </security> </system.webServer> OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/isapiCgiRestriction\" -name \"notListedCgisAllowed\"",
    "remediation": "To set the notListedCgisAllowed attribute to false using IIS Manager: 1. Open IIS Manager as Administrator 2. In the Connections pane on the left, select the server to configure 3. In Features View, select ISAPI and CGI Restrictions; in the Actions pane, select Open Feature 4. In the Actions pane, select Edit Feature Settings 5. In the Edit ISAPI and CGI Restrictions Settings dialog, clear the Allow unspecified CGI modules check box 6. Click OK Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd.exe set config  - section:system.webServer/security/isapiCgiRestriction /notListedCgisAllowed:false OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/isapiCgiRestriction\" -name \"notListedCgisAllowed\" -value \"False\" Default Value: The default value for notListedCgisAllowed is false. References: 1. http://technet.microsoft.com/en-us/library/dd391919%28WS.10%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Unlisted CGI extensions will not be allowed.",
    "references": "1. http://technet.microsoft.com/en-us/library/dd391919%28WS.10%29.aspx",
    "function_names": [
      "web_server_isapi_cgi_restriction_not_listed_disallowed",
      "web_server_security_cgi_restriction_unauthorized_blocked",
      "web_server_config_isapi_cgi_unlisted_execution_disabled",
      "web_server_system_web_security_cgi_restriction_enabled",
      "web_server_isapi_cgi_restriction_secure_config_enabled"
    ]
  },
  {
    "id": "4.11",
    "title": "(L1) Ensure 'Dynamic IP Address Restrictions' is enabled",
    "assessment": "Manual",
    "description": "Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the specified number of requests or request frequency. Note: Ensure that you receive the Forbidden page once the block has been enforced.",
    "rationale": "IIS Dynamic IP Address Restrictions capability can be used to thwart DDos attacks. This is complimentary to the IP Addresses and Domain names Restrictions lists that can be manually maintained within IIS. In contrast, Dynamic IP address filtering allows administrators to configure the server to block access for IPs that exceed the specified request threshold. The default action Deny action for restrictions is to return a Forbidden response to the client. Impact: Clients will receive a forbidden response when the specified number of requests or request frequency is exceeded.",
    "audit": "Access the web server enough times to trigger the IP restriction based on the settings entered. OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests\" -name \"enabled\" Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests\" -name \"maxConcurrentRequests\"",
    "remediation": "1. Open IIS Manager. 2. Open the IP Address and Domain Restrictions feature. 3. Click Edit Dynamic Restrictions Settings.. 4. Check the Deny IP Address based on the number of concurrent requests and the Deny IP Address based on the number of requests over a period of time boxes. The values can be tweaked as needed for your specific environment. OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests\" -name \"enabled\" -value \"True\" Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.webServer/security/dynamicIpSecurity/denyByConcurrentRequests\" -name \"maxConcurrentRequests\" -value <number of requests> Default Value: By default Dynamic IP Restrictions are not enabled. References: 1. http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-dynamic-ip-address- restrictions",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Clients will receive a forbidden response when the specified number of requests or request frequency is exceeded.",
    "references": "1. http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-dynamic-ip-address- restrictions",
    "function_names": [
      "app_service_site_dynamic_ip_restrictions_enabled",
      "app_service_site_ip_filtering_block_enabled",
      "app_service_site_request_rate_limiting_enabled",
      "app_service_site_forbidden_page_on_block_enabled",
      "app_service_site_dynamic_ip_restrictions_active"
    ]
  },
  {
    "id": "5.1",
    "title": "(L1) Ensure Default IIS web log location is moved",
    "assessment": "Automated",
    "description": "IIS will log relatively detailed information on every request. These logs are usually the first item looked at in a security response and can be the most valuable. Malicious users are aware of this and will often try to remove evidence of their activities. It is recommended that the default location for IIS log files be changed to a restricted, non-system drive.",
    "rationale": "Moving IIS logging to a restricted, non-system drive will help mitigate the risk of logs being maliciously altered, removed, or lost in the event of system drive failure(s). Impact: If an administrator needs access to the log file, that does not have drive permission, they will be unable to view that file.",
    "audit": "To verify web logs are being logged to the new location, open Windows Explorer and browse to the path that was defined. Depending on how the logging was configured, there will be either: 1. A folder containing .log files or 2. .log files in the root of the specified directory OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.applicationHost/sites/siteDefaults/logFile\" -name \"directory\"",
    "remediation": "Moving the default log location can be easily accomplished using the Logging feature in the IIS Management UI, AppCmd.exe, or PowerShell. Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd set config -section:sites - siteDefaults.logfile.directory:<new log location> OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.applicationHost/sites/siteDefaults/logFile\" -name \"directory\" -value <new log location> Moving log file stores to a non-system drive or partition separate from where web applications run and/or content is served is preferred. Additionally, folder-level NTFS permissions should be set as restrictive as possible; Administrators and SYSTEM are typically the only principals requiring access. While standard IIS logs can be moved and edited using IIS Manager, additional management tool add-ons are required in order to manage logs generated by other IIS features, such as Request Filtering and IIS Advanced Logging. These add-ons can be obtained using the Web Platform Installer or from Microsoft's site. The HTTPErr logging location can be changed by adding a registry key. Default Value: The default location for web logs in IIS is: %SystemDrive%\\inetpub\\logs\\LogFiles. References: 1. https://technet.microsoft.com/en-us/library/cc770709(v=ws.10).aspx?",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "If an administrator needs access to the log file, that does not have drive permission, they will be unable to view that file.",
    "references": "1. https://technet.microsoft.com/en-us/library/cc770709(v=ws.10).aspx?",
    "function_names": [
      "compute_iis_logs_non_system_drive",
      "compute_iis_logs_custom_location",
      "compute_iis_logs_restricted_path",
      "compute_iis_logs_default_moved",
      "compute_iis_logs_secure_location"
    ]
  },
  {
    "id": "5.2",
    "title": "(L1) Ensure Advanced IIS logging is enabled",
    "assessment": "Automated",
    "description": "IIS Advanced Logging is a module which provides flexibility in logging requests and client data. It provides controls that allow businesses to specify what fields are important, easily add additional fields, and provide policies pertaining to log file rollover and Request Filtering. HTTP request/response headers, server variables, and client- side fields can be easily logged with minor configuration in the IIS management console.",
    "rationale": "Many of the fields available in Advanced Logging can provide extensive, real-time data and details not otherwise obtainable. Developers and security professionals can use this information to identify and remediate application vulnerabilities/attack patterns. Impact: Collecting detailed log files will take more space on the specified drive.",
    "audit": "Browse to the location of the Advanced Logs and verify .log files are being generated. Note that logs will be written to disk after a non-determined period of time. They can be written into their specified directory immediately if, in the Log Definition, the Publish real- time events and Write to disk options are selected.",
    "remediation": "IIS Advanced Logging can be configured for servers, Web sites, and directories in IIS Manager. To enable Advanced Logging using the UI: 1. Open Internet Information Services (IIS) Manager 2. Click the server in the Connections pane 3. Double-click the Logging icon on the Home page 4. Click Select Fields The fields that will be logged need to be configured using the Add or Edit Fields button. Note: There may be performance considerations depending on the extent of the configuration. Default Value: IIS Advanced Logging is enabled by default. References: 1. https://www.iis.net/learn/get-started/whats-new-in-iis-85/enhanced-logging-for- iis85",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Collecting detailed log files will take more space on the specified drive.",
    "references": "1. https://www.iis.net/learn/get-started/whats-new-in-iis-85/enhanced-logging-for- iis85",
    "function_names": [
      "iis_server_advanced_logging_enabled",
      "iis_server_logging_fields_configured",
      "iis_server_log_rollover_policy_enabled",
      "iis_server_request_filtering_enabled",
      "iis_server_http_headers_logging_enabled",
      "iis_server_client_fields_logging_enabled",
      "iis_server_logging_module_installed"
    ]
  },
  {
    "id": "5.3",
    "title": "(L1) Ensure 'ETW Logging' is enabled",
    "assessment": "Manual",
    "description": "Event Tracing for Windows (ETW) is a Windows feature that allows Administrators to send logging information to another location. This information is then compiled on the server and can be queried.",
    "rationale": "IIS flushes log information to disk, therefore prior to IIS, administrators do not have access to real-time logging information. Text-based log files can also be difficult and time consuming to process. By enabling ETW, administrators have access to use standard query tools for viewing real-time logging information. Impact: A dedicated server hosting Event Tracing for Windows (ETW) will be needed.",
    "audit": "Using Message Analyzer, configure the query for Microsoft-Windows-IIS-Logging. Verify you see live logging data by accessing the website.",
    "remediation": "To configure ETW logging: 1. Open IIS Manager 2. Select the server or site to enable ETW 3. Select Logging. 4. Ensure Log file format is W3C. 5. Select Both log file and ETW event 6. Save your settings. References: 1. http://www.iis.net/learn/get-started/whats-new-in-iis-85/logging-to-etw-in-iis-85 2. http://blogs.technet.com/b/erezs_iis_blog/archive/2013/07/15/hook-me-up.aspx 3. https://blogs.msdn.microsoft.com/dcook/2015/09/30/etw-overview/ 4. https://social.msdn.microsoft.com/Forums/en-US/a1aa1350-41a0-4490-9ae3- 9b4520aeb9d4/faq-common-questions-for-etw-and-windows-event- log?forum=etw",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "A dedicated server hosting Event Tracing for Windows (ETW) will be needed.",
    "references": "1. http://www.iis.net/learn/get-started/whats-new-in-iis-85/logging-to-etw-in-iis-85 2. http://blogs.technet.com/b/erezs_iis_blog/archive/2013/07/15/hook-me-up.aspx 3. https://blogs.msdn.microsoft.com/dcook/2015/09/30/etw-overview/ 4. https://social.msdn.microsoft.com/Forums/en-US/a1aa1350-41a0-4490-9ae3- 9b4520aeb9d4/faq-common-questions-for-etw-and-windows-event- log?forum=etw",
    "function_names": [
      "compute_vm_etw_logging_enabled",
      "compute_instance_etw_logging_enabled",
      "windows_etw_logging_enabled",
      "windows_vm_etw_logging_enabled",
      "compute_etw_logging_enabled",
      "windows_instance_etw_logging_enabled",
      "compute_windows_etw_logging_enabled",
      "windows_etw_logging_configured",
      "compute_etw_logging_configured",
      "windows_vm_etw_logging_configured"
    ]
  },
  {
    "id": "6.1",
    "title": "(L1) Ensure FTP requests are encrypted",
    "assessment": "Manual",
    "description": "FTP Publishing Service for IIS supports adding an SSL certificate to an FTP site. Using an SSL certificate with an FTP site is also known as FTP-S or FTP over Secure Socket Layers (SSL). FTP-S is an RFC standard (RFC 4217) where an SSL certificate is added to an FTP site and thereby making it possible to perform secure file transfers.",
    "rationale": "By using SSL, the FTP transmission is encrypted and secured from point to point and all FTP traffic as well as credentials are thereby guarded against interception. Impact: SSL will be needed for the FTP transmission.",
    "audit": "To verify using PowerShell enter the following commands: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.applicationHost/sites/siteDefaults/ftpServer/security/ssl\" -name \"controlChannelPolicy\" Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.applicationHost/sites/siteDefaults/ftpServer/security/ssl\" -name \"dataChannelPolicy\" The output should be SslRequire for both commands.",
    "remediation": "To configure FTP over SSL at the server level using AppCmd.exe or PowerShell: Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd.exe set config  - section:system.applicationHost/sites /siteDefaults.ftpServer.security.ssl.controlChannelPolicy:\"SslRequire\" /siteDefaults.ftpServer.security.ssl.dataChannelPolicy:\"SslRequire\" /commit:apphost OR Enter the following commands in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.applicationHost/sites/siteDefaults/ftpServer/security/ssl\" -name \"controlChannelPolicy\" -value \"SslRequire\" Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST' -filter \"system.applicationHost/sites/siteDefaults/ftpServer/security/ssl\" -name \"dataChannelPolicy\" -value \"SslRequire\" Default Value: By default, FTP sites are not SSL enabled. References: 1. http://www.windowsnetworking.com/articles_tutorials/IIS-FTP-Publishing-Service- Part3.html 2. http://learn.iis.net/page.aspx/304/using-ftp-over-ssl/#03 3. https://tools.ietf.org/html/rfc4217",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "SSL will be needed for the FTP transmission.",
    "references": "1. http://www.windowsnetworking.com/articles_tutorials/IIS-FTP-Publishing-Service- Part3.html 2. http://learn.iis.net/page.aspx/304/using-ftp-over-ssl/#03 3. https://tools.ietf.org/html/rfc4217",
    "function_names": [
      "ftp_site_ssl_certificate_enabled",
      "ftp_publishing_encryption_enabled",
      "ftp_service_secure_transfer_required",
      "ftp_site_tls_enabled",
      "ftp_connection_ssl_required",
      "ftp_transfer_encryption_enabled",
      "ftp_site_ftps_enabled",
      "ftp_service_secure_socket_layer_enabled"
    ]
  },
  {
    "id": "6.2",
    "title": "(L1) Ensure FTP Logon attempt restrictions is enabled",
    "assessment": "Manual",
    "description": "FTP Logon attempt restrictions is a built-in network security feature to automatically block brute force FTP attacks. This can be used to mitigate a malicious client from attempting a brute-force attack on a discovered account, such as the local administrator account.",
    "rationale": "Successful brute force FTP attacks can allow an otherwise unauthorized user to make changes to data that should not be made. This could allow the unauthorized user to modify website code by uploading malicious software or even changing functionality for items such as online payments. Impact: N/A",
    "audit": "To verify using AppCmd.exe enter the following command: %systemroot%\\system32\\inetsrv\\appcmd.exe list config  - section:system.ftpServer/security/authentication The output should include denyByFailure = true OR To verify using PowerShell enter the following command: Get-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.ftpServer/security/authentication/denyByFailure\" -name \"enabled\"",
    "remediation": "To configure FTP Logon Attempt Restrictions at the server level using AppCmd.exe or PowerShell: Enter the following command in AppCmd.exe to configure: %systemroot%\\system32\\inetsrv\\appcmd.exe set config  - section:system.ftpServer/security/authentication /denyByFailure.enabled:\"True\"  /commit:apphost OR Enter the following command in PowerShell to configure: Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST'  -filter \"system.ftpServer/security/authentication/denyByFailure\" -name \"enabled\" - value \"True\" Default Value: By default, this feature is not enabled when FTP is installed. References: 1. http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-ftp-logon-attempt- restrictions",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-ftp-logon-attempt- restrictions",
    "function_names": [
      "compute_ftp_logon_attempt_restrictions_enabled",
      "compute_ftp_brute_force_protection_enabled",
      "compute_ftp_login_restrictions_enabled",
      "compute_ftp_security_restrictions_enabled",
      "compute_ftp_automatic_blocking_enabled"
    ]
  },
  {
    "id": "7.1",
    "title": "(L2) Ensure HSTS Header is set",
    "assessment": "Manual",
    "description": "HTTP Strict Transport Security (HSTS) allows a site to inform the user agent to communicate with the site only over HTTPS. This header takes two parameters: max- age, \"specifies the number of seconds, after the reception of the STS header field, during which the user agent regards the host (from whom the message was received) as a Known HSTS Host [speaks only HTTPS]\"; and includeSubDomains. includeSubDomains is an optional directive that defines how this policy is applied to subdomains. If includeSubDomains is included in the header, it provides the following definition: this HSTS Policy also applies to any hosts whose domain names are subdomains of the Known HSTS Host's domain name.",
    "rationale": "HTTP Strict Transport Security (HSTS) is a simple and widely supported standard to protect visitors by ensuring that their browsers always connect to a website over HTTPS. HSTS exists to remove the need for the common, insecure practice of redirecting users from http:// to https:// URLs. HSTS relies on the User Agent/Browser to enforce the required behavior. All major browsers support it. If the browser doesn't support HSTS, it will be ignored. When a browser knows that a domain has enabled HSTS, it does two things: 1. Always uses an https:// connection, even when clicking on an http:// link or after typing a domain into the location bar without specifying a protocol. 2. Removes the ability for users to click through warnings about invalid certificates. A domain instructs browsers that it has enabled HSTS by returning an HTTP header over an HTTPS connection. Impact: The user agent will only be able to communicate with the site over HTTPS.",
    "audit": "The recommended max age is 8 minutes (480 seconds) or greater. Any value greater than 0 is acceptable. Perform the following in IIS Manager to view host headers configured for the server: 1. Open IIS Manager 2. In the Connections pane, select your server 3. In the Features View pane, double click HTTP Response Headers 4. Verify an entry exists named Strict-Transport-Security 5. Double click Strict-Transport-Security and verify the Value: box contains any value greater than 0 6. Click OK. Perform the following in IIS Manager to view host headers configured for the Website: 1. Open IIS Manager 2. In the Connections pane, expand the tree and select Website 3. In the Features View pane, double click HTTP Response Headers 4. Verify an entry exists name Strict-Transport-Security 5. Double click Strict-Transport-Security and verify the Value: box contains any value greater than 0 6. Click OK.",
    "remediation": "Any value greater than 0 meets this recommendation. The examples below are specific to 8 minutes but can be adjusted to meet your requirements. To set the HTTP Header at the server level using an AppCmd.exe command, run the following command from an elevated command prompt: %systemroot%\\system32\\inetsrv\\appcmd.exe set config - section:system.webServer/httpProtocol /+\"customHeaders.[name='Strict- Transport-Security',value='max-age=480; preload']\" To set the HTTP Header and include subdomains at the server level using an AppCmd.exe command, run the following command from an elevated command prompt: %systemroot%\\system32\\inetsrv\\appcmd.exe set config - section:system.webServer/httpProtocol /+\"customHeaders.[name='Strict- Transport-Security',value='max-age=480; includeSubDomains; preload']\" To set the HTTP Header at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt: %systemroot%\\system32\\inetsrv\\appcmd.exe set config \"<em>Website\"</em> - section:system.webServer/httpProtocol /+\"customHeaders.[name='Strict- Transport-Security',value='max-age=480; preload']\" To set the HTTP Header and include subdomains at the Website level using an AppCmd.exe command, run the following command from an elevated command prompt: %systemroot%\\system32\\inetsrv\\appcmd.exe set config \"<em>Website\"</em> - section:system.webServer/httpProtocol /+\"customHeaders.[name='Strict- Transport-Security',value='max-age=480; includeSubDomains; preload']\" References: 1. http://tools.ietf.org/html/rfc6797#section-5.1 2. https://https.cio.gov/hsts/ 3. https://www.iis.net/configreference/system.webserver/httpprotocol/customheader s#006",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "The user agent will only be able to communicate with the site over HTTPS.",
    "references": "1. http://tools.ietf.org/html/rfc6797#section-5.1 2. https://https.cio.gov/hsts/ 3. https://www.iis.net/configreference/system.webserver/httpprotocol/customheader s#006",
    "function_names": [
      "cloud_cdn_distribution_hsts_header_enabled",
      "cloud_cdn_distribution_hsts_max_age_valid",
      "cloud_cdn_distribution_hsts_include_subdomains_enabled",
      "cloud_cdn_distribution_hsts_header_secure_settings",
      "cloud_cdn_distribution_hsts_header_compliant"
    ]
  },
  {
    "id": "7.2",
    "title": "(L1) Ensure SSLv2 is Disabled",
    "assessment": "Automated",
    "description": "The SSLv2 protocol is not considered cryptographically secure, therefore should be disabled.",
    "rationale": "Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data. Impact: The SSLv2 protocol will not be available for use.",
    "audit": "Perform the following to verify SSL 2.0 is disabled. 1. Ensure the following key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Client:Enabled 2. Ensure the following key is set to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Client:DisabledByDefault To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 2.0\\Server' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 2.0\\Client' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 2.0\\Server' -name 'DisabledByDefault' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 2.0\\Client' -name 'DisabledByDefault'",
    "remediation": "Perform the following to disable SSL 2.0: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Client:Enabled 2. Set the following Registry key to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 2.0\\Client:DisabledByDefault To disable using PowerShell enter the following command: New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 2.0\\Server' -Force | Out-Null New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 2.0\\Client' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 2.0\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 2.0\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 2.0\\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 2.0\\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null Default Value: Enabled  References: 1. http://technet.microsoft.com/en-us/library/dn786419.aspx 2. http://technet.microsoft.com/en-us/library/dn786433.aspx 3. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 4. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The SSLv2 protocol will not be available for use.",
    "references": "1. http://technet.microsoft.com/en-us/library/dn786419.aspx 2. http://technet.microsoft.com/en-us/library/dn786433.aspx 3. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 4. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29",
    "function_names": [
      "cloud_cdn_ssl_certificate_sslv2_disabled",
      "compute_load_balancer_sslv2_disabled",
      "compute_ssl_certificate_sslv2_disabled",
      "cloudfront_distribution_sslv2_disabled",
      "elastic_load_balancer_sslv2_disabled",
      "api_gateway_domain_sslv2_disabled",
      "cloud_cdn_endpoint_sslv2_disabled",
      "network_load_balancer_sslv2_disabled",
      "application_load_balancer_sslv2_disabled",
      "ssl_policy_sslv2_disabled"
    ]
  },
  {
    "id": "7.3",
    "title": "(L1) Ensure SSLv3 is Disabled",
    "assessment": "Automated",
    "description": "The SSLv3 protocol is not considered cryptographically secure, therefore should be disabled.",
    "rationale": "Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data. Impact: The SSLv3 protocol will not be available.",
    "audit": "Perform the following to verify SSL 3.0 is disabled: 1. Ensure the following key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Client:Enabled 2. Ensure the following key is set to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Client:DisabledByDefault To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 3.0\\Server' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 3.0\\Client' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 3.0\\Server' -name 'DisabledByDefault' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\SSL 3.0\\Client' -name 'DisabledByDefault'",
    "remediation": "Perform the following to disable SSL 3.0: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Client:Enabled 2. Set the following Registry key to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\SS L 3.0\\Client:DisabledByDefault To disable using PowerShell enter the following command: New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 3.0\\Server' -Force | Out-Null New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 3.0\\Client' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 3.0\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 3.0\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 3.0\\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ SSL 3.0\\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null Default Value: Enabled  References: 1. https://www.openssl.org/~bodo/ssl-poodle.pdf 2. http://technet.microsoft.com/en-us/library/dn786419.aspx 3. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 4. http://technet.microsoft.com/en-us/library/dn786433.aspx 5. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The SSLv3 protocol will not be available.",
    "references": "1. https://www.openssl.org/~bodo/ssl-poodle.pdf 2. http://technet.microsoft.com/en-us/library/dn786419.aspx 3. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 4. http://technet.microsoft.com/en-us/library/dn786433.aspx 5. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx",
    "function_names": [
      "cloud_cdn_ssl_certificate_sslv3_disabled",
      "compute_load_balancer_sslv3_disabled",
      "compute_ssl_certificate_sslv3_disabled",
      "cloudfront_distribution_sslv3_disabled",
      "api_gateway_domain_sslv3_disabled",
      "elastic_load_balancer_sslv3_disabled",
      "cloud_cdn_ssl_protocol_sslv3_disabled",
      "compute_ssl_policy_sslv3_disabled"
    ]
  },
  {
    "id": "7.4",
    "title": "(L1) Ensure TLS 1.0 is Disabled",
    "assessment": "Automated",
    "description": "The TLS 1.0 protocol is not considered cryptographically secure, therefore should be disabled.",
    "rationale": "Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data. Impact: The TLS 1.0 protocol will not be available.",
    "audit": "Perform the following to verify TLS 1.0 is disabled: 1. Ensure the following Registry key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Client:Enabled 2. Ensure the following Registry key is set to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Client:DisabledByDefault To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.0\\Server' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.0\\Client' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.0\\Server' -name 'DisabledByDefault' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.0\\Client' -name 'DisabledByDefault'",
    "remediation": "Perform the following to disable TLS 1.0: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Client:Enabled 2. Set the following Registry key to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.0\\Client:DisabledByDefault To disable using PowerShell enter the following command: New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.0\\Server' -Force | Out-Null New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.0\\Client' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.0\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.0\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.0\\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.0\\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null  References: 1. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The TLS 1.0 protocol will not be available.",
    "references": "1. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "function_names": [
      "cloud_cdn_ssl_certificate_tls_1_0_disabled",
      "compute_load_balancer_tls_1_0_disabled",
      "cloudfront_distribution_tls_1_0_disabled",
      "api_gateway_domain_tls_1_0_disabled",
      "elastic_load_balancer_tls_1_0_disabled",
      "cloud_storage_bucket_tls_1_0_disabled",
      "cloud_sql_instance_tls_1_0_disabled",
      "cloud_run_service_tls_1_0_disabled",
      "cloud_functions_function_tls_1_0_disabled",
      "cloud_network_endpoint_tls_1_0_disabled"
    ]
  },
  {
    "id": "7.5",
    "title": "(L1) Ensure TLS 1.1 is Disabled",
    "assessment": "Automated",
    "description": "The TLS 1.1 protocol is not considered cryptographically secure, therefore should be disabled.",
    "rationale": "Disabling weak protocols will help ensure the confidentiality and integrity of in-transit data. Impact: TLS 1.1 may be needed for backward compatibility. Warning: Fully test the application to ensure that backwards compatibility is not needed. If it is, build in exceptions as necessary for backwards compatibility.",
    "audit": "Perform the following to verify TLS 1.1 is disabled: 1. Ensure the following Registry key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Client:Enabled 2. Ensure the following Registry key is set to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Client:DisabledByDefault To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.1\\Server' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.1\\Client' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.1\\Server' -name 'DisabledByDefault' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.1\\Client' -name 'DisabledByDefault'",
    "remediation": "Perform the following to disable TLS 1.1: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Server:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Client:Enabled 2. Set the following Registry key to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Server:DisabledByDefault HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.1\\Client:DisabledByDefault To disable using PowerShell enter the following command: New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.1\\Server' -Force | Out-Null New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.1\\Client' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.1\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.1\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.1\\Server' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.1\\Client' -name 'DisabledByDefault' -value '1' -PropertyType 'DWord' - Force | Out-Null  References: 1. http://technet.microsoft.com/en-us/library/dn786433.aspx 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 5. https://community.qualys.com/thread/16565-is-there-a-reason-for-still-having- tlsv11-enabled",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "TLS 1.1 may be needed for backward compatibility. Warning: Fully test the application to ensure that backwards compatibility is not needed. If it is, build in exceptions as necessary for backwards compatibility.",
    "references": "1. http://technet.microsoft.com/en-us/library/dn786433.aspx 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 5. https://community.qualys.com/thread/16565-is-there-a-reason-for-still-having- tlsv11-enabled",
    "function_names": [
      "cloud_cdn_ssl_certificate_tls_1_1_disabled",
      "compute_load_balancer_tls_1_1_disabled",
      "cloudfront_distribution_tls_1_1_disabled",
      "api_gateway_domain_tls_1_1_disabled",
      "elastic_load_balancing_tls_1_1_disabled",
      "cloud_run_service_tls_1_1_disabled",
      "app_engine_domain_tls_1_1_disabled",
      "network_endpoint_tls_1_1_disabled",
      "storage_bucket_tls_1_1_disabled",
      "database_instance_tls_1_1_disabled"
    ]
  },
  {
    "id": "7.6",
    "title": "(L1) Ensure TLS 1.2 is Enabled",
    "assessment": "Automated",
    "description": "TLS 1.2 is the most recent and mature protocol for protecting the confidentiality and integrity of HTTP traffic.",
    "rationale": "Enabling this protocol will help ensure the confidentiality and integrity of data in transit. Impact: N/A",
    "audit": "Perform the following to verify TLS 1.2 is enabled: 1. Ensure the following Registry key is set to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.2\\Server:Enabled 2. Ensure the following Registry key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.2\\Server:DisabledByDefault To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.2\\Server' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocol s\\TLS 1.2\\Server' -name 'DisabledByDefault'",
    "remediation": "Perform the following to enable TLS 1.2: 1. Set the following Registry key to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.2\\Server:Enabled 2. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TL S 1.2\\Server:DisabledByDefault To enable using PowerShell enter the following command: New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.2\\Server' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.2\\Server' -name 'Enabled' -value '1' -PropertyType 'DWord' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\ TLS 1.2\\Server' -name 'DisabledByDefault' -value '0' -PropertyType 'DWord' - Force | Out-Null References: 1. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "function_names": [
      "cloud_cdn_ssl_certificate_min_tls_1_2_enabled",
      "compute_load_balancer_min_tls_1_2_enabled",
      "cloudfront_distribution_min_tls_1_2_enabled",
      "api_gateway_domain_min_tls_1_2_enabled",
      "elastic_load_balancing_listener_min_tls_1_2_enabled",
      "cloud_storage_bucket_tls_1_2_required",
      "cloud_sql_instance_tls_1_2_enabled",
      "cloud_run_service_tls_1_2_enabled",
      "cloud_functions_function_tls_1_2_enabled",
      "cloud_redis_instance_tls_1_2_enabled"
    ]
  },
  {
    "id": "7.7",
    "title": "(L1) Ensure NULL Cipher Suites is Disabled",
    "assessment": "Automated",
    "description": "The NULL cipher does not provide data confidentiality or integrity, therefore it is recommended that the NULL cipher be disabled.",
    "rationale": "By disabling the NULL cipher, there is a better chance of maintaining data confidentiality and integrity. Impact: The NULL cipher suite will not be available.",
    "audit": "Perform the following to verify NULL cipher is disabled: 1. Ensure the following Registry key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\NULL :Enabled To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\NU LL' -name 'Enabled'",
    "remediation": "Perform the following to disable NULL cipher: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\NULL :Enabled To disable using PowerShell enter the following command: New-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\NU LL' -Force | Out-Null New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\NU LL' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null References: 1. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 2. http://technet.microsoft.com/en-us/library/dn786419.aspx 3. http://technet.microsoft.com/en-us/library/dn786433.aspx 4. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The NULL cipher suite will not be available.",
    "references": "1. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 2. http://technet.microsoft.com/en-us/library/dn786419.aspx 3. http://technet.microsoft.com/en-us/library/dn786433.aspx 4. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx",
    "function_names": [
      "cloud_cdn_ssl_certificate_null_cipher_disabled",
      "compute_load_balancer_null_cipher_disabled",
      "network_load_balancer_null_cipher_disabled",
      "application_load_balancer_null_cipher_disabled",
      "ssl_certificate_null_cipher_disabled",
      "cloudfront_distribution_null_cipher_disabled",
      "api_gateway_null_cipher_disabled",
      "elastic_load_balancing_null_cipher_disabled"
    ]
  },
  {
    "id": "7.8",
    "title": "(L1) Ensure DES Cipher Suites is Disabled",
    "assessment": "Automated",
    "description": "The DES Cipher Suite is considered a weak symmetric-key cipher, therefore it is recommended that it be disabled.",
    "rationale": "By disabling DES, there is a better chance of maintaining data confidentiality and integrity. Impact: The DES Cipher Suite will not be avaiable.",
    "audit": "Perform the following to verify DES 56/56 cipher is disabled: 1. Ensure the following Registry key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\DES 56/56:Enabled To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\DE S 56/56' -name 'Enabled'",
    "remediation": "Perform the following to disable DES 56/56 cipher: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\DES 56/56:Enabled To disable using PowerShell enter the following command: (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('DES 56/56') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\DE S 56/56' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null References: 1. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 2. http://technet.microsoft.com/en-us/library/dn786433.aspx 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The DES Cipher Suite will not be avaiable.",
    "references": "1. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 2. http://technet.microsoft.com/en-us/library/dn786433.aspx 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx",
    "function_names": [
      "compute_ssl_certificate_des_disabled",
      "compute_load_balancer_des_disabled",
      "cloud_cdn_des_cipher_disabled",
      "network_ssl_policy_des_disabled",
      "security_tls_des_disabled",
      "compute_instance_des_disabled",
      "database_ssl_des_disabled",
      "storage_bucket_des_disabled"
    ]
  },
  {
    "id": "7.9",
    "title": "(L1) Ensure RC4 Cipher Suites is Disabled",
    "assessment": "Automated",
    "description": "The RC4 Cipher Suites are considered insecure, therefore should be disabled. Note: RC4 cipher enabled by default on Server 2012 and 2012 R2 is RC4 128/128.",
    "rationale": "The use of RC4 may increase an adversaries ability to read sensitive information sent over SSL/TLS. Impact: The RC4 Cipher Suites will not be available. The use of RC4 in TLS and SSL could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions.",
    "audit": "Perform the following to verify RC4 40/128, RC4 56/128, RC4 64/128, RC4 128/128 ciphers have been disabled. 1. Ensure the following Registry keys are set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 40/128:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 56/128:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 64/128:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 128/128:Enabled To verify using PowerShell enter the following commands: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 40/128' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 56/128' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 64/128' -name 'Enabled' Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 128/128' -name 'Enabled'",
    "remediation": "Perform the following to disable RC4 40/128, RC4 56/128, RC4 64/128, RC4 128/128 ciphers: 1. Set the following Registry keys to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 40/128:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 56/128:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 64/128:Enabled HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC4 128/128:Enabled To disable using PowerShell enter the following commands: (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('RC4 40/128') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 40/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('RC4 56/128') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 56/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('RC4 64/128') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 64/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('RC4 128/128') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\RC 4 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null  References: 1. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 2. http://technet.microsoft.com/en-us/library/dn786433.aspx 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "The RC4 Cipher Suites will not be available. The use of RC4 in TLS and SSL could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions.",
    "references": "1. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 2. http://technet.microsoft.com/en-us/library/dn786433.aspx 3. http://technet.microsoft.com/en-us/library/dn786419.aspx 4. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29",
    "function_names": [
      "compute_ssl_certificate_rc4_disabled",
      "compute_ssl_certificate_weak_ciphers_disabled",
      "compute_ssl_certificate_secure_ciphers_enabled",
      "compute_ssl_certificate_legacy_protocols_disabled",
      "compute_ssl_certificate_tls_1_2_enabled",
      "compute_ssl_certificate_insecure_suites_disabled",
      "compute_ssl_certificate_strong_encryption_enabled",
      "compute_ssl_certificate_rc4_128_disabled"
    ]
  },
  {
    "id": "7.10",
    "title": "(L1) Ensure AES 128/128 Cipher Suite is Disabled",
    "assessment": "Automated",
    "description": "The AES 128/128 Cipher Suite is not considered secure and therefore should be disabled, if possible.",
    "rationale": "This item is Scored for the following reasons and should be disabled: • Enabling AES 256/256 is recommended. • This cipher does not suffer from known practical attacks. Impact: Warning: Enabling AES 128/128 may be required for client compatibility.",
    "audit": "Perform the following to verify AES 128/128 cipher is disabled: 1. Ensure the following Registry key is set to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AES 128/128:Enabled To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AE S 128/128' -name 'Enabled'",
    "remediation": "Perform the following to disable AES 128/128 cipher: 1. Set the following Registry key to 0. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AES 128/128:Enabled To disable using PowerShell enter the following command: (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('AES 128/128') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AE S 128/128' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null References: 1. http://technet.microsoft.com/en-us/library/dn786419.aspx 2. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 3. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "Warning: Enabling AES 128/128 may be required for client compatibility.",
    "references": "1. http://technet.microsoft.com/en-us/library/dn786419.aspx 2. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 3. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "function_names": [
      "cloud_cdn_cipher_suite_aes_128_disabled",
      "cloud_cdn_ssl_certificate_aes_128_disabled",
      "compute_load_balancer_cipher_suite_aes_128_disabled",
      "compute_ssl_certificate_aes_128_disabled",
      "cloud_cdn_tls_cipher_suite_aes_128_disabled",
      "compute_tls_cipher_suite_aes_128_disabled"
    ]
  },
  {
    "id": "7.11",
    "title": "(L1) Ensure AES 256/256 Cipher Suite is Enabled",
    "assessment": "Automated",
    "description": "AES 256/256 is the most recent and mature cipher suite for protecting the confidentiality and integrity of HTTP traffic. Enabling AES 256/256 is recommended. Note: AES 256/256 is enabled by default starting with Server 2012 and 2012 R2.",
    "rationale": "Enabling this cipher will help ensure the confidentiality and integrity of data in transit. Impact: N/A",
    "audit": "Perform the following to verify AES 256/256 cipher is enabled: 1. Ensure the following Registry key is set to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AES 256/256:Enabled To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AE S 256/256' -name 'Enabled'",
    "remediation": "Perform the following to enable AES 256/256 cipher: 1. Set the following Registry key to 1. HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AES 256/256:Enabled To enable using PowerShell enter the following command: (Get-Item 'HKLM:\\').OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHA NNEL\\Ciphers', $true).CreateSubKey('AES 256/256') New-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Ciphers\\AE S 256/256' -name 'Enabled' -value '1' -PropertyType 'DWord' -Force | Out-Null References: 1. http://technet.microsoft.com/en-us/library/dn786419.aspx 2. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 3. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "profile_applicability": "•  Level 1 - IIS 10",
    "impact": "N/A",
    "references": "1. http://technet.microsoft.com/en-us/library/dn786419.aspx 2. http://msdn.microsoft.com/en-us/library/aa374757%28v=vs.85%29.aspx 3. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM- 001%29 4. http://technet.microsoft.com/en-us/library/dn786433.aspx",
    "function_names": [
      "cloud_cdn_distribution_aes_256_enabled",
      "cloud_cdn_distribution_tls_cipher_suite_aes_256",
      "cloud_cdn_distribution_secure_cipher_suite_enabled",
      "cloud_cdn_distribution_strong_encryption_enabled",
      "cloud_cdn_distribution_aes_256_required",
      "cloud_cdn_distribution_tls_1_2_aes_256_enabled",
      "cloud_cdn_distribution_secure_http_traffic_enabled",
      "cloud_cdn_distribution_confidentiality_integrity_enabled"
    ]
  },
  {
    "id": "7.12",
    "title": "(L2) Ensure TLS Cipher Suite ordering is Configured",
    "assessment": "Automated",
    "description": "Cipher suites are a named combination of authentication, encryption, message authentication code, and key exchange algorithms used for the security settings of a network connection using TLS protocol. Clients send a cipher list and a list of ciphers that it supports in order of preference to a server. The server then replies with the cipher suite that it selects from the client cipher suite list.",
    "rationale": "Cipher suites should be ordered from strongest to weakest in order to ensure that the more secure configuration is used for encryption between the server and client. TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 Avoid cipher suits that do not provide Perfect Forward Secrecy or use weak hashing function, use them only if you need to support backwards compatibility and in the bottom of the list and you will have to create exceptions for the items that cause this to become out of compliance: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA (uses SHA-1) TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA (uses SHA-1) TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA (uses SHA-1) TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA (uses SHA-1) TLS_RSA_WITH_AES_256_GCM_SHA384 (lack of Perfect Forward Secrecy) TLS_RSA_WITH_AES_128_GCM_SHA256 (lack of Perfect Forward Secrecy) TLS_RSA_WITH_AES_256_CBC_SHA256 (lack of Perfect Forward Secrecy) TLS_RSA_WITH_AES_128_CBC_SHA256 (lack of Perfect Forward Secrecy) TLS_RSA_WITH_AES_256_CBC_SHA (uses SHA-1, lack of Perfect Forward Secrecy) TLS_RSA_WITH_AES_128_CBC_SHA (uses SHA-1, lack of Perfect Forward Secrecy) Note: HTTP/2 compatibility: first 4 ciphers (in bold) in the top part list are compatible with HTTP/2 Impact: Cipher ordering is important to ensure that the most secure ciphers are listed first and will be applied over weaker ciphers when possible.",
    "audit": "Perform the following to verify the TLS cipher suite order is configured properly: 1. Ensure the following Registry key is set to TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_ 256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WI TH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_E CDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TL S_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA2 56. HKLM\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002:Func tions To verify using PowerShell enter the following command: Get-ItemProperty -path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002' - name 'Functions' TLS_AES_256_GCM_SHA384 TLS_AES_128_GCM_SHA256",
    "remediation": "Perform the following to configure TLS cipher suite order: 1. Set the following Registry key to TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH E_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,T LS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_S HA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_25 6_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256. HKLM\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002:Func tions To configure TLS cipher suite order using PowerShell enter the following command: New-Item 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002' - Force | Out-Null New-ItemProperty -path 'HKLM:\\SOFTWARE\\Policies\\Microsoft\\Cryptography\\Configuration\\SSL\\00010002' - name 'Functions' -value 'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_G CM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_ GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256 _CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_25 6_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' -PropertyType 'MultiString' -Force | Out-Null",
    "profile_applicability": "•  Level 2 - IIS 10",
    "impact": "Cipher ordering is important to ensure that the most secure ciphers are listed first and will be applied over weaker ciphers when possible.",
    "function_names": [
      "cloud_cdn_load_balancer_tls_cipher_suite_ordered",
      "cloud_cdn_load_balancer_tls_cipher_suite_prioritized",
      "cloud_cdn_load_balancer_tls_cipher_suite_secure_order",
      "cloud_cdn_load_balancer_tls_cipher_suite_strong_first",
      "cloud_cdn_load_balancer_tls_cipher_suite_compliant_order",
      "cloud_cdn_load_balancer_tls_cipher_suite_secure_priority",
      "cloud_cdn_load_balancer_tls_cipher_suite_approved_order",
      "cloud_cdn_load_balancer_tls_cipher_suite_secure_precedence"
    ]
  }
]