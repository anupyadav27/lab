[
  {
    "id": "1.2",
    "title": "Ensure the Server Is Not a Multi-Use System",
    "assessment": "Not Scored",
    "description": "A web server should function as only a web server, and it possible should not be mixed with other primary functions such as email, DNS, databases, or middleware. The number of services and daemons executing on the server should be limited to those necessary.",
    "rationale": "Default server configurations often expose a wide variety of services. The more services exposed to an attacker, the more potential vectors an attacker has to exploit the server and therefore the higher the risk for the server. Just because a server can perform many services doesn't mean it is wise to do so. Maintaining a server for a single purpose increases the security of your application and system.",
    "audit": "Leverage the package or services manager for your OS to list enabled services and compare them with the documented business needs of the server. On Red Hat systems, the following will produce the list of current services enabled: chkconfig --list | grep ':on'",
    "remediation": "Leverage the package or services manager for your OS to uninstall or disable all unneeded services. On Red Hat systems, the following will disable a given service: chkconfig <servicename> off",
    "profile_applicability": "•  Level 2 •  Level 1",
    "function_names": [
      "compute_server_single_purpose",
      "compute_instance_no_mixed_services",
      "compute_daemon_minimal_services",
      "compute_system_no_additional_roles",
      "compute_host_no_extra_functions",
      "compute_server_no_multi_use",
      "compute_instance_dedicated_web_role",
      "compute_system_service_minimization",
      "compute_daemon_essential_only",
      "compute_host_no_secondary_services"
    ]
  },
  {
    "id": "1.3",
    "title": "Ensure Apache Is Installed From the Appropriate Binaries",
    "assessment": "Not Scored",
    "description": "The CIS Apache Benchmark recommends using the Apache binary provided by your vendor for most situations in order to reduce the effort and increase the effectiveness of maintenance and security patches. However, to keep the benchmark as generic and applicable to all Unix/Linux platforms as possible, a default source build has been used for this benchmark. Important Note : There is a major difference between source builds and most vendor packages that is very important to highlight. The default source build of Apache is fairly conservative and minimalist in the modules included, and therefore starts off in a fairly strong security state, while most vendor binaries are typically very well loaded with most of the functionality that one may be looking for. Therefore, it is important that you don't assume the default value shown in the benchmark will match default values in your installation. You should always test any new installation in your environment before putting it into production. Also, keep in mind you can install and run a new version alongside the old one by using a different Apache prefix and a different IP address or port number in the Listen directive.",
    "rationale": "The benefits of using vendor supplied binaries include: • Easy installation; it should work straight out of the box. • It is customized for your OS environment. • It has been tested and gone through QA procedures. • Everything you need is likely to be included, probably including some third-party modules. Many OS vendors ship Apache with mod_ssl, OpenSSL, PHP, mod_perl and mod_security, for example. • Your vendor will tell you about security issues, so you have to look for information in fewer places. • Updates to fix security issues will be easy to apply. The vendor will have already verified the problem, checked the signature on the Apache download, worked out the impact, and so on.  14 | P a g e • You may be able to get the updates automatically, reducing the window of risk.",
    "remediation": "Installation depends on the operating system platform. For a source build, consult the Apache 2.2 documentation on compiling and installing http://httpd.apache.org/docs/2.2/install.html. For Red Hat Enterprise Linux 5, the following yum command could be used: # yum install httpd References: 1. Apache Compiling and Installation http://httpd.apache.org/docs/2.2/install.html",
    "audit": "",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. Apache Compiling and Installation http://httpd.apache.org/docs/2.2/install.html",
    "function_names": [
      "apache_installation_vendor_binaries_used",
      "apache_installation_source_build_secure",
      "apache_installation_default_modules_minimal",
      "apache_installation_prefix_unique",
      "apache_installation_listen_directive_configured",
      "apache_installation_secure_defaults_verified",
      "apache_installation_vendor_patches_applied",
      "apache_installation_environment_tested",
      "apache_installation_production_ready",
      "apache_installation_legacy_compatibility_checked"
    ]
  },
  {
    "id": "2.1",
    "title": "Ensure Only Necessary Authentication and Authorization Modules Are Enabled",
    "assessment": "Not Scored",
    "description": "The Apache 2.2 modules for authentication and authorization have been refactored to provide finer granularity and more consistent and logical names, and to simplify configuration. The authn_* modules provide authentication, while the authz_* modules provide authorization. Apache provides two types of authentication: basic and digest. Enable only the modules that are required.",
    "rationale": "Authentication and authorization are the front doors to the protected information in your web site. Most installations only need a small subset of the modules available. By minimizing the enabled modules to those that are actually used, we reduce the number of \"doors\" and therefore reduce the attack surface of the web site. Likewise, having fewer modules means less software that could have vulnerabilities.",
    "audit": "1. Use the httpd -M option as root to check which auth* modules are loaded. # httpd -M | egrep 'auth._' 2. Use the httpd -M option as root to check for any LDAP modules which don't follow the same naming convention. # httpd -M | egrep 'ldap'  16 | P a g e The above commands should generate a Syntax OK message to stderr, in addition to a list of modules installed to stdout. If the Syntax OK message is missing, then there was most likely an error in parsing the configuration files.",
    "remediation": "Consult Apache module documentation for descriptions of each module in order to determine the necessary modules for the specific installation. The unnecessary static compiled modules are disabled through compile time configuration options. The dynamically loaded modules are disabled by commenting out or removing the LoadModule directive from the Apache configuration files (typically httpd.conf). Some modules may be separate packages and may be removed. Default Value: The following are the modules statically loaded for a default source build: • authn_file_module (static) • authn_default_module (static) • authz_host_module (static) • authz_groupfile_module (static) • authz_user_module (static) • authz_default_module (static) • auth_basic_module (static) References: 1. https://httpd.apache.org/docs/2.2/howto/auth.html 2. https://httpd.apache.org/docs/2.2/mod/ 3. https://httpd.apache.org/docs/2.2/programs/configure.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/howto/auth.html 2. https://httpd.apache.org/docs/2.2/mod/ 3. https://httpd.apache.org/docs/2.2/programs/configure.html",
    "function_names": [
      "apache_auth_module_unnecessary_disabled",
      "apache_auth_module_required_enabled",
      "apache_auth_basic_disabled",
      "apache_auth_digest_disabled",
      "apache_authz_module_unnecessary_disabled",
      "apache_authz_module_required_enabled",
      "apache_authn_module_minimal_enabled",
      "apache_authz_module_minimal_enabled"
    ]
  },
  {
    "id": "2.2",
    "title": "Ensure the Log Config Module Is Enabled",
    "assessment": "Scored",
    "description": "The log_config module provides for flexible logging of client requests and for the configuration of the information in each log.",
    "rationale": "Logging is critical for monitoring usage and potential abuse of your web server. To configure web server logging using the log_format directive, this module is required.",
    "audit": "Perform the following to determine if the log_config has been loaded: Use the httpd -M option as root to check the module is loaded. # httpd -M | grep log_config Note : If the module is correctly enabled, the output will include the module name and whether it is loaded statically or as a shared module.",
    "remediation": "Perform either one of the following: • For source builds with static modules, run the Apache ./configure script without including the --disable-log-config script options. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure • For dynamically loaded modules, add or modify the LoadModule directive so that it is present in the Apache configuration as below and not commented out: LoadModule log_config_module modules/mod_log_config.so  18 | P a g e Default Value: The module is loaded by default. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_log_config.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_log_config.html",
    "function_names": [
      "cloud_cdn_log_config_logging_enabled",
      "cloud_cdn_log_config_module_enabled",
      "cloud_cdn_log_config_request_logging_enabled",
      "cloud_cdn_log_config_client_logging_enabled"
    ]
  },
  {
    "id": "2.3",
    "title": "Ensure the WebDAV Modules Are Disabled",
    "assessment": "Scored",
    "description": "The Apache mod_dav and mod_dav_fs modules support WebDAV ('Web-based Distributed Authoring and Versioning') functionality for Apache. WebDAV is an extension to the HTTP protocol which allows clients to create, move, and delete files and resources on the web server.",
    "rationale": "WebDAV is not widely used, and it has serious security concerns because it may allow clients to modify unauthorized files on the web server. Therefore, the WebDav modules mod_dav and mod_dav_fs should be disabled.",
    "audit": "Perform the following to determine if the WebDAV modules are disabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | grep ' dav_[[:print:]]+module' Note: If the WebDav modules are correctly disabled, the only output when executing the above command should be Syntax OK.",
    "remediation": "Perform either one of the following to disable the WebDAV modules: 1. For source builds with static modules, run the Apache ./configure script without including mod_dav and mod_dav_fs in the --enable-modules=configure script options. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure 2. For dynamically loaded modules, comment out or remove the LoadModule directive for the mod_dav and mod_dav_fs modules from the httpd.conf file.  20 | P a g e ##LoadModule dav_module modules/mod_dav.so ##LoadModule dav_fs_module modules/mod_dav_fs.so Default Value: The modules are not enabled with a default source build. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_dav.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_dav.html",
    "function_names": [
      "apache_webdav_disabled",
      "apache_module_dav_disabled",
      "apache_module_dav_fs_disabled",
      "webdav_modules_disabled",
      "apache_webdav_support_disabled"
    ]
  },
  {
    "id": "2.4",
    "title": "Ensure the Status Module Is Disabled",
    "assessment": "Scored",
    "description": "The Apache mod_status module provides current server performance statistics.",
    "rationale": "While having server performance status information available as a web page may be convenient, it's recommended that this module be disabled. When it is enabled, its handler capability is available in all configuration files, including per-directory files (e.g., .htaccess). This may have security-related ramifications.",
    "audit": "Perform the following to determine if the mod_status module is disabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | egrep 'status_module' Note : If the modules are correctly disabled, the only output when executing the above command should be Syntax OK.",
    "remediation": "Perform either one of the following to disable the mod_status module: 1. For source builds with static modules, run the Apache ./configure script with the - -disable-status configure script options. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure --disable-status 2. For dynamically loaded modules, comment out or remove the LoadModule directive for the mod_status module from the httpd.conf file. ##LoadModule status_module modules/mod_status.so  22 | P a g e Default Value: The module is enabled with a default source build. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_status.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_status.html",
    "function_names": [
      "apache_module_status_disabled",
      "apache_module_status_not_installed",
      "apache_module_status_unloaded",
      "apache_module_status_no_access",
      "apache_module_status_restricted_access"
    ]
  },
  {
    "id": "2.5",
    "title": "Ensure the Autoindex Module Is Disabled",
    "assessment": "Scored",
    "description": "The Apache mod_autoindex module automatically generates a web page listing the contents of directories on the server, typically used so an index.html does not have to be generated.",
    "rationale": "Automated directory listings should not be enabled because they will reveal information helpful to an attacker such as naming conventions and directory paths. They may also reveal files that were not intended to be revealed.",
    "audit": "Perform the following to determine if the mod_autoindex module is disabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | grep autoindex_module Note : If the module is correctly disabled, the only output when executing the above command should be Syntax OK.",
    "remediation": "Perform either one of the following to disable the mod_autoindex module: 1. For source builds with static modules, run the Apache ./configure script with the - -disable-autoindex configure script options. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure -disable-autoindex 2. For dynamically loaded modules, comment out or remove the LoadModule directive for the mod_autoindex module from the httpd.conf file. ## LoadModule autoindex_module modules/mod_autoindex.so  24 | P a g e Default Value: The module is enabled with a default source build. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_autoindex.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_autoindex.html",
    "function_names": [
      "apache_module_autoindex_disabled",
      "apache_module_autoindex_not_configured",
      "apache_module_autoindex_not_installed",
      "apache_module_autoindex_not_loaded",
      "apache_module_autoindex_not_enabled",
      "apache_module_autoindex_not_active",
      "apache_module_autoindex_not_present",
      "apache_module_autoindex_not_loaded_in_config",
      "apache_module_autoindex_not_included_in_config",
      "apache_module_autoindex_not_listed_in_config"
    ]
  },
  {
    "id": "2.6",
    "title": "Ensure the Proxy Modules Are Disabled",
    "assessment": "Scored",
    "description": "The Apache proxy modules allow the server to act as a proxy (either forward or reverse proxy) for HTTP and other protocols with additional proxy modules loaded. If the Apache installation is not intended to proxy requests to or from another network, the proxy module should not be loaded.",
    "rationale": "Proxy servers can act as an important security control when properly configured. However, a secure proxy server is not within the scope of this benchmark. A web server should be primarily a web server or a proxy server but not both, for the same reasons that other multi-use servers are not recommended. Scanning for web servers that will also proxy requests is a very common attack because proxy servers are useful for anonymizing attacks on other servers, or possibly proxying requests into an otherwise protected network.",
    "audit": "Perform the following to determine if the proxy modules are disabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | grep proxy_ Note : If the modules are correctly disabled, the only output when executing the above command should be Syntax OK.",
    "remediation": "Perform either one of the following to disable the proxy modules: 1. For source builds with static modules, run the Apache ./configure script without including the mod_proxy and all other proxy modules in the --enable- modules=configure script options. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure  26 | P a g e 2. For dynamically loaded modules, comment out or remove the LoadModule directive for the mod_proxy module and all other proxy modules from the httpd.conf file. ##LoadModule proxy_module modules/mod_proxy.so ##LoadModule proxy_balancer_module modules/mod_proxy_balancer.so ##LoadModule proxy_ftp_module modules/mod_proxy_ftp.so ##LoadModule proxy_http_module modules/mod_proxy_http.so ##LoadModule proxy_connect_module modules/mod_proxy_connect.so ##LoadModule proxy_ajp_module modules/mod_proxy_ajp.so Default Value: The proxy modules are disabled with a default source build. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_proxy.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_proxy.html",
    "function_names": [
      "apache_proxy_modules_disabled",
      "apache_proxy_forward_disabled",
      "apache_proxy_reverse_disabled",
      "apache_proxy_http_disabled",
      "apache_proxy_modules_unloaded",
      "apache_proxy_config_removed",
      "apache_proxy_requests_blocked",
      "apache_proxy_extra_modules_disabled"
    ]
  },
  {
    "id": "2.7",
    "title": "Ensure the User Directories Module Is Disabled",
    "assessment": "Scored",
    "description": "The UserDir directive must be disabled so that user home directories are not accessed via the web site with a tilde (~) preceding the username. The directive also sets the path name of the directory that will be accessed. For example: • http://example.com/~ralph/ might access a public_html sub-directory of ralph user's home directory. • The directive UserDir ./ might map /~root to the root directory (/).",
    "rationale": "The user directories should not be globally enabled since that allows anonymous access to anything users may want to share with other users on the network. Also consider that every time a new account is created on the system, there is potentially new content available via the web site.",
    "audit": "Perform the following to determine if the user directories module is disabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | grep userdir_ Note : If the module is correctly disabled, the only output when executing the above command should be Syntax OK.",
    "remediation": "Perform either one of the following to disable the user directories module: 1. For source builds with static modules, run the Apache ./configure script with the - -disable-userdir configure script option. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure --disable-userdir  28 | P a g e 2. For dynamically loaded modules, comment out or remove the LoadModule directive for the mod_userdir module from the httpd.conf file. ##LoadModule userdir_module modules/mod_userdir.so Default Value: The module is enabled with a default source build. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_userdir.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_userdir.html",
    "function_names": [
      "apache_userdir_disabled",
      "apache_userdir_access_restricted",
      "apache_userdir_public_access_disabled",
      "apache_userdir_home_directory_protected",
      "apache_userdir_secure_path_configuration",
      "apache_userdir_tilde_access_disabled",
      "apache_userdir_directory_traversal_prevented",
      "apache_userdir_web_access_disabled"
    ]
  },
  {
    "id": "2.8",
    "title": "Ensure the Info Module Is Disabled",
    "assessment": "Scored",
    "description": "The Apache mod_info module provides information on the server configuration via access to a /server-info URL location.",
    "rationale": "Although having server configuration information available as a web page may be convenient, it's recommended that this module be disabled. Once the module is loaded into the server, its handler capability is available in per-directory .htaccess files. This can leak sensitive information, such as system paths, usernames/passwords, and database names, from the configuration directives of other Apache modules.",
    "audit": "Perform the following to determine if the info module is disabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | egrep 'info_module' Note : If the module is correctly disabled, the only output when executing the above command should be Syntax OK.",
    "remediation": "Perform either one of the following to disable the mod_info module: 1. For source builds with static modules, run the Apache ./configure script without including mod_info in the --enable-modules= configure script options. $ cd $DOWNLOAD/httpd-2.2.22 $ ./configure 2. For dynamically loaded modules, comment out or remove the LoadModule directive for the mod_info module from the httpd.conf file.  30 | P a g e ##LoadModule info_module modules/mod_info.so Default Value: The module is disabled with a default source build. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_info.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_info.html",
    "function_names": [
      "apache_module_info_disabled",
      "apache_server_info_endpoint_disabled",
      "apache_config_info_module_disabled",
      "apache_httpd_info_disclosure_disabled",
      "apache_server_config_info_disabled"
    ]
  },
  {
    "id": "2.9",
    "title": "Ensure the Basic and Digest Authentication Modules are Disabled",
    "assessment": "Scored",
    "description": "The Apache mod_auth_basic and mod_auth_digest modules support HTTP Basic Authentication and HTTP Digest Authentication respectively. The two authentication protocols are used to restrict access to users who provide a valid user name and password.",
    "rationale": "Neither HTTP Basic nor HTTP Digest authentication should be used as the protocols are out dated and no longer considered secure. Disabling the modules will improve the security posture of the web server by reducing the amount of potentially vulnerable code paths exposed to the network and reducing potential for unauthorized access to files via misconfigured access controls. In the early days of the web, Basic HTTP Authentication was considered adequate if it was only used over HTTPS, so that the credentials would not be sent in the clear. Basic authentication uses Base64 to encode the credentials which are sent with every request. Base64 encoding is of course easily reversed, and is no more secure than clear text. The issues with using Basic Auth over HTTPS is that it does not meet current security standards for protecting the login credentials and protecting the authenticated session. The following security issues plague the Basic Authentication protocol. • The authenticated session has an indefinite length (as long as any browser window is open) and is not timed-out on the server when the session is idle. • Application logout is required to invalidate the session on the server to limit, but in the case of Basic Authentication, there is no server-side session that can be invalidated. • The credentials are remembered by the browser and stored in memory. • There is no way to disable auto-complete, where the browser offers to store the passwords. Passwords stored in the browser can be accessed if the client system or browser become compromised. • The credentials are more likely to be exposed since they are automatically sent with every request.  32 | P a g e • Administrators may at times have access to the HTTP headers sent in request for the purposes of diagnosing problems and detecting attacks. Having a user’s credentials in the clear in the HTTP headers, may allow a user to repudiate actions performed, because the web or system administrators also had access to the user’s password. The HTTP Digest Authentication is considered even worse than Basic Authentication because it stores the password in the clear on the server, and has the same session management issues as Basic Authentication.",
    "audit": "Perform the following to determine if the HTTP Basic or HTTP Digest authentication modules are enabled. Run the httpd server with the -M option to list enabled modules: # httpd -M | grep auth_basic_module # httpd -M | grep auth_digest_module Note: If the modules are correctly disabled, there will be no output when executing either of the above commands.",
    "remediation": "Perform either one of the following to disable the HTTP Basic or HTTP Digest authentication modules: 1. For source builds with static modules run the Apache ./configure script without including the mod_auth_basic, and mod_auth_digest in the --enable- modules=configure script options. $ cd $DOWNLOAD_HTTPD $ ./configure 2. For dynamically loaded modules comment out or remove the LoadModule directive for mod_auth_basic, and mod_auth_digest modules from the httpd.conf file. ##LoadModule mod_auth_basic modules/mod_auth_basic.so ##LoadModule mod_auth_digest modules/mod_auth_digest.so Default Value: The mod_auth_basic and mod_auth_digest modules are not enabled with a default source build.  33 | P a g e References: 1. https://httpd.apache.org/docs/2.2/mod/mod_auth_basic.html 2. https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_auth_basic.html 2. https://httpd.apache.org/docs/2.2/mod/mod_auth_digest.html",
    "function_names": [
      "apache_auth_module_basic_disabled",
      "apache_auth_module_digest_disabled",
      "apache_auth_module_no_basic_auth",
      "apache_auth_module_no_digest_auth",
      "apache_auth_module_secure_protocols_enabled"
    ]
  },
  {
    "id": "3.1",
    "title": "Ensure the Apache Web Server Runs As a Non-Root User",
    "assessment": "Scored",
    "description": "Although Apache is typically started with root privileges in order to listen on port 80 and 443, it can and should run as another non-root user in order to perform the web services. The Apache User and Group directives are used to designate the user and group to be used.",
    "rationale": "One of the best ways to reduce your exposure to attack when running a web server is to create a unique, unprivileged user and group for the server application. The nobody or daemon user and group that come default on Unix variants should NOT be used to run the web server because the account is commonly used for other separate daemon services. Instead, an account should be used only by the Apache software so as to not give unnecessary access to other services. Also, the user used for the Apache user should be a unique value between 1 and 499, as these lower values are reserved for the special system accounts not used by regular users, as discussed in the User Accounts section of the CIS Red Hat benchmark. As an even more secure alternative, if the Apache web server can be run on high unprivileged ports, it is not necessary to start Apache as root, and all the Apache processes may be run as the Apache specific user, as described below.",
    "audit": "Ensure the apache account is unique and has been created with a UID between 1-499 with the Apache group and configured in the httpd.conf file. 1. Ensure the following lines are present in the Apache configuration and not commented out:  35 | P a g e # grep -i '^User' $APACHE_PREFIX/conf/httpd.conf User apache # grep -i '^Group' $APACHE_PREFIX/conf/httpd.conf Group apache 2. Ensure the Apache account is correct: # grep '^UID_MIN' /etc/login.defs # id apache The 'uid' must be less than the UID_MIN value in /etc/login.defs, and the group for apache must be similar to the following entries: uid=48(apache) gid=48(apache) groups=48(apache) 3. While the web server is running, check the user id for the httpd processes. The username should match the configuration file. # ps axu | grep httpd | grep -v '^root'",
    "remediation": "Perform the following: 1. If the Apache user and group do not already exist, create the account and group as a unique system account: # groupadd -r apache # useradd apache -r -g apache -d /var/www -s /sbin/nologin 2. Configure the Apache user and group in the Apache configuration file httpd.conf: User apache Group apache Default Value: The default Apache user and group are configured as ‘daemon’.",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_server_non_root_user",
      "apache_server_user_non_privileged",
      "apache_server_group_non_privileged",
      "apache_server_user_no_root",
      "apache_server_group_no_root",
      "apache_server_user_privilege_restricted",
      "apache_server_group_privilege_restricted"
    ]
  },
  {
    "id": "3.2",
    "title": "Ensure the Apache User Account Has an Invalid Shell",
    "assessment": "Scored",
    "description": "The apache account must not be used as a regular login account, so it should be assigned an invalid or nologin shell to ensure it cannot be used to log in.",
    "rationale": "Service accounts such as the apache account are a risk if they can be used to get a login shell to the system.",
    "audit": "Check the apache login shell in the /etc/passwd file: # grep apache /etc/passwd The apache account shell must be /sbin/nologin or /dev/null, similar to the following: /etc/passwd:apache:x:48:48:Apache:/var/www:/sbin/nologin",
    "remediation": "Change the apache account to use the nologin shell or an invalid shell such as /dev/null: # chsh -s /sbin/nologin apache Default Value: The default Apache user account is daemon with a shell of /dev/null or /sbin/nologin.",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "compute_apache_user_invalid_shell",
      "compute_apache_user_nologin_shell",
      "compute_apache_user_shell_restricted",
      "compute_apache_user_shell_disabled",
      "compute_apache_user_shell_invalid"
    ]
  },
  {
    "id": "3.3",
    "title": "Ensure the Apache User Account Is Locked",
    "assessment": "Scored",
    "description": "The user account under which Apache runs should not have a valid password, but should be locked.",
    "rationale": "As a defense-in-depth measure, the Apache user account should be locked to prevent logins and to prevent a user from su-ing to apache using the password. In general, there shouldn't be a need for anyone to have to su as apache, and when there is a need, sudo should be used instead, which would not require the apache account password.",
    "audit": "Ensure the apache account is locked using the following: # passwd -S apache The results should be similar to the following: apache LK 2010-01-28 0 99999 7 -1 (Password locked.) - or - apache L 07/02/2012 -1 -1 -1 -1",
    "remediation": "Use the passwd command to lock the apache account: # passwd -l apache Notes: The default user account, daemon, is locked by default.  40 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_user_account_locked",
      "apache_user_password_disabled",
      "apache_user_no_valid_password",
      "apache_user_login_disabled",
      "apache_user_shell_access_restricted"
    ]
  },
  {
    "id": "3.4",
    "title": "Ensure Apache Directories and Files Are Owned By Root",
    "assessment": "Scored",
    "description": "The Apache directories and files should be owned by root. This applies to all of the Apache software directories and files installed.",
    "rationale": "Restricting ownership of the Apache files and directories will reduce the probability of unauthorized modifications.",
    "audit": "Verify that there are no files in the Apache directory that are not owned by root: # find $APACHE_PREFIX \\! -user root -ls",
    "remediation": "Perform the following: Set ownership on the $APACHE_PREFIX directories such as /usr/local/apache2: $ chown -R root $APACHE_PREFIX Default Value: Default ownership is a mixture of the user that built the software and root.",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_directory_root_owned",
      "apache_file_root_owned",
      "apache_directory_root_owned_all",
      "apache_file_root_owned_all",
      "apache_software_root_owned",
      "apache_installation_root_owned"
    ]
  },
  {
    "id": "3.5",
    "title": "Ensure the Group Is Set Correctly on Apache Directories and Files",
    "assessment": "Scored",
    "description": "The Apache directories and files should be set to have a group of root (or a root equivalent group). This applies to all the Apache software directories and files installed. The only expected exception is that the Apache web document root ($APACHE_PREFIX/htdocs) is likely to need a designated group to allow web content to be updated (such as webupdate) through a change management process.",
    "rationale": "Securing Apache files and directories will reduce the probability of unauthorized modifications.",
    "audit": "Verify that there are no files in the Apache directories (other than htdocs) with a group other than root: # find $APACHE_PREFIX -path $APACHE_PREFIX/htdocs -prune -o \\! -group root - ls",
    "remediation": "Perform the following: Set the group on the $APACHE_PREFIX directories, such as /usr/local/apache2: $ chgrp -R root $APACHE_PREFIX Default Value: Default group is a mixture of the user group that built the software and root.  44 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_directory_group_set_root",
      "apache_file_group_set_root",
      "apache_directory_group_set_root_equivalent",
      "apache_file_group_set_root_equivalent",
      "apache_htdocs_group_set_webupdate",
      "apache_directory_group_set_correctly",
      "apache_file_group_set_correctly",
      "apache_directory_group_set_non_root_exception",
      "apache_file_group_set_non_root_exception",
      "apache_directory_group_set_secure"
    ]
  },
  {
    "id": "3.6",
    "title": "Ensure Other Write Access on Apache Directories and Files Is Restricted",
    "assessment": "Scored",
    "description": "The permission on the Apache directories should be rwxr-xr-x (755) and the file permissions should be similar, except not executable unless appropriate. This applies to all the Apache software directories and files installed, with the possible exception in some cases that a group with write access for the Apache web document root ($APACHE_PREFIX/htdocs) may be needed to allow web content to be updated. In addition, the /bin directory and executables should be set to not be readable by other.",
    "rationale": "None of the Apache files and directories, including the Web document root, should allow other write access. Other write access is likely to be very useful for unauthorized modification of web content, configuration files, and software.",
    "audit": "Verify that there are no files or directories in the Apache directory with other write access, excluding symbolic links: # find -L $APACHE_PREFIX \\! -type l -perm /o=w -ls",
    "remediation": "Perform the following to remove other write access on the $APACHE_PREFIX directories: # chmod -R o-w $APACHE_PREFIX Default Value: The default permissions are mostly rwXr-Xr-X, except for some files which have group or other permissions that are affected by the umask of the user performing the build.  46 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_directory_write_restricted",
      "apache_file_write_restricted",
      "apache_directory_permissions_correct",
      "apache_file_permissions_correct",
      "apache_bin_directory_read_restricted",
      "apache_executable_read_restricted",
      "apache_htdocs_group_write_allowed",
      "apache_directory_no_other_write",
      "apache_file_no_other_write",
      "apache_directory_permissions_755",
      "apache_file_permissions_non_executable",
      "apache_executable_permissions_correct"
    ]
  },
  {
    "id": "3.7",
    "title": "Ensure the Core Dump Directory Is Secured",
    "assessment": "Scored",
    "description": "The CoreDumpDirectory directive can be used to specify a directory which Apache attempts to switch before dumping core for debugging. The default directory is the Apache ServerRoot directory. However, on Linux systems, core dumps are disabled by default. Most production environments should leave core dumps disabled. In the event that core dumps are needed, the directory needs to be writable by Apache, and it should meet the security requirements defined below in the audit and remediation sections.",
    "rationale": "Core dumps are snapshots of memory and may contain sensitive information that should not be accessible by other accounts on the system.",
    "audit": "Verify that either the CoreDumpDirectory directive is not enabled in any of the Apache configuration files, or the configured directory meets the following requirements: 1. Not within the Apache web document root ($APACHE_PREFIX/htdocs) 2. Owned by root and has a group ownership of the Apache group (as defined via the Group directive) 3. Has no read-write-search access permission for other users (e.g., o=rwx)",
    "remediation": "Either remove the CoreDumpDirectory directive from the Apache configuration files, or make the configured directory meet the following requirements: 1. Not within the Apache web document root ($APACHE_PREFIX/htdocs) 2. Owned by root and has a group ownership of the Apache group (as defined via the Group directive) # chown root:apache /var/log/httpd 3. Has no read-write-search access permission for other users  48 | P a g e # chmod o-rwx /var/log/httpd Default Value: The default core dump directory is the ServerRoot directory, which should not be writable. References: 1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#coredumpdirectory",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#coredumpdirectory",
    "function_names": [
      "apache_core_dump_directory_secure_permissions",
      "apache_core_dump_directory_restricted_access",
      "apache_core_dump_directory_disabled_by_default",
      "apache_core_dump_directory_writable_by_apache",
      "apache_core_dump_directory_no_world_writable",
      "apache_core_dump_directory_no_world_readable",
      "apache_core_dump_directory_no_world_executable",
      "apache_core_dump_directory_owned_by_root",
      "apache_core_dump_directory_group_owned_by_root",
      "apache_core_dump_directory_no_suid_set",
      "apache_core_dump_directory_no_sgid_set",
      "apache_core_dump_directory_strict_mode_1777"
    ]
  },
  {
    "id": "3.8",
    "title": "Ensure the Lock File Is Secured",
    "assessment": "Scored",
    "description": "The LockFile directive sets the path to the lock file used when Apache uses fcntl(2) or flock(2) system calls to implement a mutex. Most Linux systems will default to using semaphores instead, so the directive may not apply. However, in the event a lock file is used, it is important for the lock file to be in a locally mounted directory that is not writable by other users.",
    "rationale": "If the LockFile is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a lock file with the same name.",
    "audit": "Perform these steps to verify the lock file is secured properly: 1. Find the directory in which the LockFile would be created. The default value is the ServerRoot/logs directory. 2. Verify that the lock file directory is not a directory within the Apache DocumentRoot. 3. Verify that the lock file directory is on a locally mounted hard drive rather than an NFS mounted file system. 4. Verify that the ownership and group of the directory is root:root (or the user under which apache initially starts up if not root). 5. Verify that the permissions on the directory are only writable by root (or the startup user if not root).",
    "remediation": "Perform these steps to properly secure the lock file: 1. Find the directory in which the LockFile would be created. The default value is the ServerRoot/logs directory. 2. Modify the directory for the LockFile so it is not within the Apache DocumentRoot and so it is on a locally mounted hard drive rather than an NFS mounted file system.  50 | P a g e 3. Change the ownership and group of the directory to be root:root. 4. Change the permissions on the directory so it is only writable by root, or the user under which apache initially starts up (default is root). Default Value: The default lock file is logs/accept.lock. References: 1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#lockfile",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#lockfile",
    "function_names": [
      "apache_lock_file_local_mount",
      "apache_lock_file_restricted_permissions",
      "apache_lock_file_not_world_writable",
      "apache_lock_file_secure_path",
      "apache_lock_file_protected_directory"
    ]
  },
  {
    "id": "3.9",
    "title": "Ensure the Pid File Is Secured",
    "assessment": "Scored",
    "description": "The PidFile directive sets the file path to the process ID (pid) file to which the server records the pid of the server. The pid is useful for sending a signal to the server process or checking on the health of the process.",
    "rationale": "If the PidFile is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a pid file with the same name.",
    "audit": "Perform these steps to verify the pid file is secured: 1. Find the directory in which the PidFile would be created. The default value is the ServerRoot/logs directory. 2. Verify that the process ID file directory is not a directory within the Apache DocumentRoot. 3. Verify that the ownership and group of the directory is root:root (or the user under which apache initially starts up if not root). 4. Verify the permissions on the directory are only writable by root (or the startup user if not root).",
    "remediation": "Perform these steps to secure the pid file: 1. Find the directory in which the PidFile would be created. The default value is the ServerRoot/logs directory. 2. Modify the directory if it is within the Apache DocumentRoot. 3. Change the ownership and group of the directory to be root:root. 4. Change the permissions for the directory so it is only writable by root, or the user under which apache initially starts up (default is root).  52 | P a g e Default Value: The default process ID file is logs/httpd.pid. References: 1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#pidfile",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#pidfile",
    "function_names": [
      "nginx_config_pid_file_secured",
      "nginx_config_pid_file_permissions_restricted",
      "nginx_config_pid_file_ownership_correct",
      "nginx_config_pid_file_path_valid",
      "nginx_config_pid_file_not_world_writable"
    ]
  },
  {
    "id": "3.10",
    "title": "Ensure the ScoreBoard File Is Secured",
    "assessment": "Scored",
    "description": "The ScoreBoardFile directive sets a file path which the server will use for interprocess communication (IPC) among the Apache processes. On most Linux platforms, shared memory will be used instead of a file in the file system, so this directive is not generally needed and does not need to be specified. However, if the directive is specified, Apache will use the configured file for IPC, so it needs to be located in a secure directory.",
    "rationale": "If the ScoreBoardFile is placed in a writable directory, other accounts could create a denial of service attack and prevent the server from starting by creating a file with the same name, and users could monitor and disrupt communication between the processes by reading and writing to the file.",
    "audit": "Perform the following steps to verify the ScoreBoard file is secure: 1. Check to see if the ScoreBoardFile is specified in any of the Apache configuration files. If it is not present, the configuration is compliant. 2. Find the directory in which the ScoreBoardFile would be created. The default value is the ServerRoot/logs directory. 3. Verify that the directory is not within the Apache DocumentRoot. 4. Verify that the directory is on a locally mounted hard drive rather than an NFS mounted file system. 5. Verify that the ownership and group of the directory is root:root (or the user under which Apache initially starts up if not root). 6. Verify that the directory is only writable by root (or the startup user if not root).",
    "remediation": "Perform the following steps to secure the ScoreBoard file: 1. Check to see if the ScoreBoardFile is specified in any of the Apache configuration files. If it is not present, no changes are required.  54 | P a g e 2. If the directive is present, find the directory in which the ScoreBoardFile would be created. The default value is the ServerRoot/logs directory. 3. Modify the directory if it is within the Apache DocumentRoot or if it is on an NFS mounted file system and not a locally mounted hard drive. 4. Change the directory ownership and group to be root:root. 5. Change the directory permissions so it is only writable by root or the user under which apache initially starts up (default is root). Default Value: The default scoreboard file is logs/apache_status. References: 1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#scoreboardfile",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#scoreboardfile",
    "function_names": [
      "apache_scoreboard_file_secure_location",
      "apache_scoreboard_file_restricted_permissions",
      "apache_scoreboard_file_no_world_writable",
      "apache_scoreboard_file_owned_by_root",
      "apache_scoreboard_file_in_secure_directory",
      "apache_scoreboard_file_no_unauthorized_access",
      "apache_scoreboard_file_protected_by_selinux",
      "apache_scoreboard_file_no_symlink_allowed"
    ]
  },
  {
    "id": "3.11",
    "title": "Ensure Group Write Access for the Apache Directories and Files Is Properly Restricted",
    "assessment": "Scored",
    "description": "Group permissions on Apache directories should generally be r-x, and file permissions should be similar, except not executable if executable is not appropriate. This applies to all the Apache software directories and files installed, with the possible exception of the web document root $DOCROOT defined by Apache DocumentRoot and defaulting to $APACHE_PREFIX/htdocs. The directories and files in the web document root may have a designated web development group with write access to allow web content to be updated.",
    "rationale": "Restricting write permissions on the Apache files and directories can help mitigate attacks that modify web content to provide unauthorized access or to attack web clients.",
    "audit": "Verify that there are no files or directories in the Apache directory with group write access, excluding symbolic links: # find -L $APACHE_PREFIX \\! -type l -perm /g=w -ls",
    "remediation": "Perform the following to remove group write access on the $APACHE_PREFIX directories: # chmod -R g-w $APACHE_PREFIX",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_directory_group_write_restricted",
      "apache_file_group_write_restricted",
      "apache_directory_group_permissions_rx",
      "apache_file_group_permissions_r",
      "apache_directory_group_write_exceptions",
      "apache_file_group_write_exceptions",
      "apache_directory_group_write_restricted_non_docroot",
      "apache_file_group_write_restricted_non_docroot",
      "apache_directory_group_write_restricted_docroot_exempt",
      "apache_file_group_write_restricted_docroot_exempt"
    ]
  },
  {
    "id": "3.12",
    "title": "Ensure Group Write Access for the Document Root Directories and Files Is Properly Restricted",
    "assessment": "Scored",
    "description": "The Apache Document Root directory $DOCROOT may need to be writeable by an authorized group such as development, support, or a production content management tool. However, it is important that the Apache group used to run the server does not have write access to any directories or files in the document root.",
    "rationale": "Preventing Apache from writing to the web document root helps mitigate risk associated with web application vulnerabilities associated with file uploads or command execution. Typically, if an application hosted by Apache needs to write to a directory, it is best practice to have that directory live outside the web root.",
    "audit": "Verify that there are no files or directories in the Apache Document Root directory with Apache group write access: ## Define $GRP to be the Apache group configured # GRP=$(grep '^Group' $APACHE_PREFIX/conf/httpd.conf | cut -d' ' -f2) # find -L $DOCROOT -group $GRP -perm /g=w -ls",
    "remediation": "Perform the following to remove group write access on the $DOCROOT directories and files for the apache group. # find -L $DOCROOT -group $GRP -perm /g=w -print | xargs chmod g-w",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_document_root_group_write_restricted",
      "apache_document_root_no_server_group_write_access",
      "apache_file_group_write_permissions_restricted",
      "apache_directory_group_write_access_restricted",
      "apache_docroot_group_write_privileges_secure",
      "apache_server_group_write_access_denied",
      "apache_document_root_group_write_protected"
    ]
  },
  {
    "id": "3.13",
    "title": "Ensure Access to Special Purpose Application Writable Directories is Properly Restricted",
    "assessment": "Not Scored",
    "description": "When the Apache webserver includes application software such as PHP, Java and many others, it is common for the application to require a writable directory. The writable directory may be needed for file uploads, application data, user session state information or many other purposes. It is important such directories have a single purpose, and have access properly secured to prevent a variety of possible exploits. The directory should be: • Single Purpose Directory • Outside the Configured Web DocumentRoot • Owned by the root User or an Administrator Account • Not writable by Other",
    "rationale": "The following provides the rationale for each requirement on the application writable directory: • Single Purpose Directory - Each writable application directory should have a single purpose. For example, mixing file uploads in the same directory with session tracking information would be an obvious vulnerability, as users could create session information, to hijack or manufacturer authenticated sessions. • Outside the Configured Web DocumentRoot - The directory should NOT be under the configured DocumentRoot directory as such directories are browsable by default, and might allow unintentional web read access. With web read access an attacker could upload malicious content, and then references the content in a URL exploiting the trust that users have in the website. • Owned by the root User or an Administrator Account – The directory should be owned by root or a designated administrator to prevent unintended changes to the permissions. • Not Writable by Other - The write access can be provided through the group permissions to the configured Apache group rather than allow write access to Other / all users. The group write access should implement the least privileges necessary in order prevent unintended access to the directory. If the application requires more complex write access, such as to specific accounts or for multiple groups, usage of an  60 | P a g e access control lists (ACL) is recommended. ACL’s are supported by most Linux file systems, and can be enabled when the file system is mounted.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Single Purpose Directory - For each application writable directory review the documented purpose for the directory to confirm the directory serves a single purpose. 2. Outside the Configured Web DocumentRoot - For each writable directory and it’s corresponding DocumentRoot perform the following. No output from the find command indicates the directory is not within the DocumentRoot. # Set the WR_DIR to the writable directory such as the example shown below WR_DIR=/var/phptmp/sessions # DOCROOT is the DocmentRoot directory for the web site or virtual host. DOCROOT=$(grep -i '^DocumentRoot' $APACHE_PREFIX/conf/httpd.conf | cut -d' ' -f2 | tr -d '\\\"') # Get Inode number of the writable Directory INUM=$(stat -c '%i' $WR_DIR) # Verify the directory is not found (No output = Not found) find -L $DOCROOT -inum $INUM 3. Owned by the root User or an Administrator Account - For each writable directory, use the stat command to show the owner of each directory. stat -c '%U' $WR_DIR/ 4. Not writable by Other - For each writable directory, use the find command to identify directories writable by Other. No output indicates the directory and any sub-directories are not writable by Other. find $WR_DIR/ -perm /o=w -ls",
    "remediation": "Perform the following: 1. Single Purpose Directory – Create separate directories of the multipurpose directory, and adjust the application configuration and directory ownership and permissions appropriately. 2. Outside the Configured Web DocumentRoot – Move the writable directory to a more suitable location NOT under the DocumentRoot directory. A location within the /var/ filesystem may be a good choice for changeable data.  61 | P a g e 3. Owned by the root User or an Administrator Account – Change the ownership to root or an administrator. chown root $WR_DIR 4. Not writable by Other – Remove the other write permissions, use group write or ACLs to provide the least privileges necessary. chmod o-w $WR_DIR",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_writable_directory_single_purpose",
      "apache_writable_directory_outside_document_root",
      "apache_writable_directory_root_owned",
      "apache_writable_directory_not_world_writable"
    ]
  },
  {
    "id": "4.1",
    "title": "Ensure Access to OS Root Directory Is Denied By Default",
    "assessment": "Scored",
    "description": "The Apache Directory directive allows for directory-specific configuration of access controls and many other features and options. One important usage is to create a default deny policy that does not allow access to OS directories and files, except for those specifically allowed. This is done by denying access to the OS root directory.",
    "rationale": "One aspect of Apache that is occasionally misunderstood is the feature of default access. That is, unless you take steps to change it, if the server can find its way to a file through normal URL mapping rules, it can and will serve it to clients. Having a default deny helps prevent unintended access. The Order directive is important as it provides for other Allow directives to override the default deny.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find a root <Directory> element. 2. Ensure there is a single Order directive with the value of deny, allow. 3. Ensure there is a Deny directive and it has the value of from all. 4. Ensure there are no Allow or Require directives in the root <Directory> element. The following may be useful in extracting root directory elements from the Apache configuration for auditing. $ perl -ne 'print if /^ *<Directory *\\//i .. /<\\/Directory/i' $APACHE_PREFIX/conf/httpd.conf  63 | P a g e",
    "remediation": "Perform the following to implement the recommended state: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find a root <Directory> element. 2. Have a single Order directive and set its value to deny, allow. 3. Have a Deny directive and set its value to from all. 4. Remove all Allow directives from the root <Directory> element. <Directory /> . . . Order deny,allow Deny from all . . . </Directory> Default Value: The following is the default root directory configuration: <Directory /> . . . Order deny,allow Deny from all </Directory> References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#directory 2. https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#directory 2. https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html",
    "function_names": [
      "apache_directory_root_access_denied",
      "apache_directory_default_deny_policy",
      "apache_directory_os_root_restricted",
      "apache_directory_access_control_secure",
      "apache_directory_root_deny_enabled"
    ]
  },
  {
    "id": "4.2",
    "title": "Ensure Appropriate Access to Web Content Is Allowed",
    "assessment": "Not Scored",
    "description": "In order to serve web content, the Apache Allow directive will need to be used to allow for appropriate access to directories, locations, and virtual hosts that contain web content.",
    "rationale": "The Allow directive may be used within a directory, a location, or other context to allow appropriate access. Access may be allowed to all, or to specific networks, hosts, or users as appropriate.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find all <Directory> elements. 2. Ensure there is a single Order directive with the value of Deny, Allow for each. 3. Ensure the Allow and Deny directives have values that are appropriate for the purposes of the directory. The following commands may be useful to extract <Directory> and <Location> elements and Allow directives from the apache configuration files. # perl -ne 'print if /^ *<Directory */i .. /<\\/Directory/i' $APACHE_PREFIX/conf/httpd.conf $APACHE_PREFIX/conf.d/*.conf # perl -ne 'print if /^ *<Location */i .. /<\\/Location/i' $APACHE_PREFIX/conf/httpd.conf $APACHE_PREFIX/conf.d/*.conf # grep -i -C 6 -i 'Allow[[:space:]]from' $APACHE_PREFIX/conf/httpd.conf $APACHE_PREFIX/conf.d/*.conf",
    "remediation": "Perform the following to implement the recommended state:  66 | P a g e 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find all <Directory> and <Location> elements. There should be one for the document root and any special purpose directories or locations. There are likely to be other access control directives in other contexts, such as virtual hosts or special elements like <Proxy>. 2. Add a single Order directive and set the value to deny, allow. 3. Include the appropriate Allow and Deny directives, with values that are appropriate for the purposes of the directory. The configurations below are just a few possible examples. <Directory \"/var/www/html/\"> Order deny,allow Deny from all Allow from 192.169. </Directory>  <Directory \"/var/www/html/\"> Order allow,deny Allow from all </Directory> <Location /usage> Order deny,allow Deny from all Allow from 127.0.0.1 Allow from ::1 </Location> Default Value: The following is the default web root directory configuration: <Directory \"/usr/local/apache2/htdocs\"> . . . Order deny,allow Allow from all </Directory> References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#require 2. https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html 3. https://httpd.apache.org/docs/2.2/howto/auth.html  67 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#require 2. https://httpd.apache.org/docs/2.2/mod/mod_authz_host.html 3. https://httpd.apache.org/docs/2.2/howto/auth.html  67 | P a g e",
    "function_names": [
      "apache_directory_appropriate_access_allowed",
      "apache_location_appropriate_access_allowed",
      "apache_virtual_host_appropriate_access_allowed",
      "apache_web_content_access_restricted",
      "apache_allow_directive_configured_correctly"
    ]
  },
  {
    "id": "4.3",
    "title": "Ensure OverRide Is Disabled for the OS Root Directory",
    "assessment": "Scored",
    "description": "The Apache OverRide directive allows for .htaccess files to be used to override much of the configuration, including authentication, handling of document types, auto generated indexes, access control, and options. When the server finds an .htaccess file (as specified by AccessFileName), it needs to know which directives declared in that file can override earlier access information. When this directive is set to None, .htaccess files are completely ignored. When this directive is set to All, any directive which has the .htaccess Context is allowed in .htaccess files. Refer to the Apache 2.2 documentation for details http://httpd.apache.org/docs/2.2/mod/core.html#allowoverride.",
    "rationale": "While the functionality of htaccess files is sometimes convenient, usage decentralizes the access controls and increases the risk of configurations being changed or viewed inappropriately by an unintended or rogue .htaccess file. Consider also that some of the more common vulnerabilities in web servers and web applications allow the web files to be viewed or to be modified; this is why it is wise to keep the configuration of the web server from being placed in .htaccess files.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find a root element. 2. Ensure there is a single AllowOverride directive with the value of None. The following may be useful for extracting root directory elements from the Apache configuration for auditing: $ perl -ne 'print if /^ *<Directory *\\//i .. /<\\/Directory/i' $APACHE_PREFIX/conf/httpd.conf  69 | P a g e",
    "remediation": "Perform the following to implement the recommended state: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find a root <Directory> element. 2. Add a single AllowOverride directive if there is none. 3. Set the value for AllowOverride to None. <Directory /> . . . AllowOverride None . . . </Directory> Default Value: The following is the default root directory configuration: <Directory /> . . . AllowOverride None . . . </Directory> References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#allowoverride",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#allowoverride",
    "function_names": [
      "apache_directory_override_disabled",
      "apache_root_directory_override_none",
      "apache_htaccess_override_restricted",
      "apache_config_override_disabled",
      "apache_root_override_none",
      "apache_directory_override_none",
      "apache_override_none_root",
      "apache_root_directory_override_disabled"
    ]
  },
  {
    "id": "4.4",
    "title": "Ensure OverRide Is Disabled for All Directories",
    "assessment": "Scored",
    "description": "The Apache AllowOverride directive allows for .htaccess files to be used to override much of the configuration, including authentication, handling of document types, auto generated indexes, access control, and options. When the server finds an .htaccess file (as specified by AccessFileName), it needs to know which directives declared in that file can override earlier access information. When this directive is set to None, .htaccess files are completely ignored. When this directive is set to All, any directive which has the .htaccess Context is allowed in .htaccess files. Refer to the Apache 2.2 documentation for details http://httpd.apache.org/docs/2.2/mod/core.html#allowoverride.",
    "rationale": "While the functionality of htaccess files is sometimes convenient, usage decentralizes the access controls and increases the risk of configurations being changed or viewed inappropriately by an unintended or rogue .htaccess file. Consider also that some of the more common vulnerabilities in web servers and web applications allow the web files to be viewed or to be modified; this is why it is wise to keep the configuration of the web server from being placed in .htaccess files.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find any AllowOverride directives. 2. Ensure the value for AllowOverride is None. grep -i AllowOverride $APACHE_PREFIX/conf/httpd.conf",
    "remediation": "Perform the following to implement the recommended state: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find AllowOverride directives.  71 | P a g e 2. Set the value for all AllowOverride directives to None. . . . AllowOverride None . . . References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#allowoverride",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#allowoverride",
    "function_names": [
      "apache_directory_override_disabled",
      "apache_directory_override_none",
      "apache_directory_no_htaccess_override",
      "apache_directory_allowoverride_none",
      "apache_directory_override_restricted"
    ]
  },
  {
    "id": "5.1",
    "title": "Ensure Options for the OS Root Directory Are Restricted",
    "assessment": "Scored",
    "description": "The Apache Options directive allows for specific configuration of options, including execution of CGI, following symbolic links, server side includes, and content negotiation. Refer to the Apache 2.2 documentation for details: http://httpd.apache.org/docs/2.2/mod/core.html#options.",
    "rationale": "The Options directive for the root OS level is used to create a default minimal options policy that allows only the minimal options at the root directory level. Then for specific web sites or portions of the web site, options may be enabled as needed and appropriate. No options should be enabled and the value for the Options directive should be None.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find a root <Directory> element. 2. Ensure there is a single Options directive with the value of None. The following may be useful for extracting root directory elements from the Apache configuration for auditing: perl -ne 'print if /^ *<Directory */i .. /<\\/Directory/i' $APACHE_PREFIX/conf/httpd.conf",
    "remediation": "Perform the following to implement the recommended state:  73 | P a g e 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find a root <Directory> element. 2. Add a single Options directive if there is none. 3. Set the value for Options to None. <Directory /> . . . Options None . . . </Directory> Default Value: The following is the default root directory configuration: <Directory /> Options FollowSymLinks . . . </Directory> References: 1. http://httpd.apache.org/docs/2.2/mod/core.html#options",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. http://httpd.apache.org/docs/2.2/mod/core.html#options",
    "function_names": [
      "apache_directory_options_restricted",
      "apache_root_directory_options_secure",
      "apache_options_directive_no_cgi",
      "apache_options_directive_no_symlinks",
      "apache_options_directive_no_ssi",
      "apache_options_directive_no_negotiation",
      "apache_root_directory_options_minimal",
      "apache_options_directive_hardened"
    ]
  },
  {
    "id": "5.2",
    "title": "Ensure Options for the Web Root Directory Are Restricted",
    "assessment": "Scored",
    "description": "The Apache Options directive allows for specific configuration of options, including execution of CGI, following symbolic links, server side includes, and content negotiation. Refer to the Apache 2.2 documentation for details http://httpd.apache.org/docs/2.2/mod/core.html#options.",
    "rationale": "The Options directive at the web root or document root level should be restricted to the minimal options required. A setting of None is highly recommended; however, at this level, content negotiation may be needed if multiple languages are supported. No other options should be enabled.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find the document root <Directory> element. 2. Ensure there is a single Options directive with the value of None or Multiviews (if multiviews are needed). The following may be useful in extracting root directory elements from the Apache configuration for auditing: perl -ne 'print if /^ *<Directory */i .. /<\\/Directory/i' $APACHE_PREFIX/conf/httpd.conf",
    "remediation": "Perform the following to implement the recommended state: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find the document root <Directory> element.  75 | P a g e 2. Add or modify any existing Options directive to have a value of None or Multiviews, if multiviews are needed. <Directory \"/usr/local/apache2/htdocs\"> . . . Options None . . . </Directory> Default Value: The following is the default document root directory configuration: <Directory \"/usr/local/apache2/htdocs\"> . . . Options Indexes FollowSymLinks . . . </Directory> References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#options",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#options",
    "function_names": [
      "apache_web_root_options_restricted",
      "apache_directory_options_restricted",
      "apache_web_root_no_cgi_enabled",
      "apache_web_root_no_symlinks_enabled",
      "apache_web_root_no_includes_enabled",
      "apache_web_root_no_content_negotiation_enabled",
      "apache_directory_no_unsafe_options",
      "apache_web_root_minimal_options_enabled"
    ]
  },
  {
    "id": "5.3",
    "title": "Ensure Options for Other Directories Are Minimized",
    "assessment": "Scored",
    "description": "The Apache Options directive allows for specific configuration of options, including execution of CGI, following symbolic links, server side includes, and content negotiation. Refer to the Apache 2.2 documentation for details http://httpd.apache.org/docs/2.2/mod/core.html#options.",
    "rationale": "The options for other directories and hosts should be restricted to the minimal options required. A setting of None is recommended; however, it is recognized that other options may be needed in some cases: • Multiviews is appropriate if content negotiation is required, such as when multiple languages are supported. • ExecCGI is only appropriate for special directories dedicated to executable content, such as a cgi-bin/ directory. That way you will know what is executed on the server. It is possible to enable CGI script execution based on file extension or permission settings, but this makes script control and management almost impossible as developers may install scripts without your knowledge. • FollowSymLinks & SymLinksIfOwnerMatch: The following of symbolic links is not recommended and should be disabled if possible. The usage of symbolic links opens up additional risk for possible attacks that may use inappropriate symbolic links to access content outside of the document root of the web server. Also consider that it could be combined with a vulnerability that allows an attacker or insider to create an inappropriate link. The option SymLinksIfOwnerMatch is much safer in that the ownership must match in order for the link to be used, but keep in mind there is additional overhead created by requiring Apache to check the ownership. • Includes & IncludesNOEXEC: The IncludesNOEXEC option should only be needed when server side includes are required. The full Includes option should not be used because it allows execution of arbitrary shell commands. See Apache Mod Include for details http://httpd.apache.org/docs/2.2/mod/mod_include.html. • Indexes causes automatic generation of indexes if the default index page is missing, so it should be disabled unless required.  77 | P a g e",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find all <Directory> elements. 2. Ensure that the Options directives do not enable Includes. 3. Ensure that all other options are set correctly. The following may be useful for extracting directory elements from the Apache configuration for auditing: perl -ne 'print if /^ *<Directory */i .. /<\\/Directory/i' $APACHE_PREFIX/conf/httpd.conf or grep -i -A 12 '<Directory[[:space:]]' $APACHE_PREFIX/conf/httpd.conf",
    "remediation": "Perform the following to implement the recommended state: 1. Search the Apache configuration files (httpd.conf and any included configuration files) to find all <Directory> elements. 2. Add or modify any existing Options directive to NOT have a value of Includes. Other options may be set if necessary and appropriate as described above. Default Value: <Directory \"/usr/local/apache2/cgi-bin\"> . . . Options None . . . </Directory> References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#options",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#options",
    "function_names": [
      "apache_directory_options_minimized",
      "apache_directory_options_restricted",
      "apache_directory_options_no_cgi",
      "apache_directory_options_no_symlinks",
      "apache_directory_options_no_ssi",
      "apache_directory_options_no_negotiation",
      "apache_directory_options_secure",
      "apache_directory_options_limited",
      "apache_directory_options_disabled",
      "apache_directory_options_no_execution"
    ]
  },
  {
    "id": "5.4",
    "title": "Ensure Default HTML Content Is Removed",
    "assessment": "Scored",
    "description": "Apache installations have default content that is not needed or appropriate for production use. The primary function for the sample content is to provide a default web site, provide user manuals, or demonstrate special features of the web server. All content that is not needed should be removed.",
    "rationale": "Historically, sample content and features have been remotely exploited and can provide different levels of access to the server. Usually these routines are not written for production use and consequently little thought was given to security in their development.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Verify the document root directory and the configuration files do not provide for a default index.html or welcome page. 2. Ensure the Apache User Manual content is not installed by checking the configuration files for manual location directives. 3. Verify the Apache configuration files do not have the Server Status handler configured. 4. Verify that the Server Information handler is not configured. 5. Verify that any other handler configurations such as perl-status are not enabled.",
    "remediation": "Review all pre-installed content and remove content which is not required. In particular, look for unnecessary content in the document root directory, in a configuration directory such as conf/extra directory, or as a Unix/Linux package. 1. Remove the default index.html or welcome page if it is a separate package. If the default welcome page is part of the main Apache httpd package, such as it is on Red Hat Linux, then comment out the configuration as shown below. Removing a file  80 | P a g e such as the welcome.conf is not recommended as it may get replaced if the package is updated. # # This configuration file enables the default \"Welcome\" # page if there is no default index page present for # the root URL. To disable the Welcome page, comment # out all the lines below. # ## <LocationMatch \"^/+$\"> ## Options -Indexes ## ErrorDocument 403 /error/noindex.html ## </LocationMatch> 2. Remove the Apache user manual content or comment out configurations referencing the manual. # yum erase httpd-manual 3. Remove or comment out any Server Status handler configuration. # # Allow server status reports generated by mod_status, # with the URL of http://servername/server-status # Change the \".example.com\" to match your domain to enable. # ## <Location /server-status> ## SetHandler server-status ## Order deny,allow ## Deny from all ## Allow from .example.com ## </Location> 4. Remove or comment out any Server Information handler configuration. # # Allow remote server configuration reports, with the URL of # http://servername/server-info (requires that mod_info.c be loaded). # Change the \".example.com\" to match your domain to enable. # ## <Location /server-info> ## SetHandler server-info ## Order deny,allow ## Deny from all ## Allow from .example.com ## </Location> 5. Remove or comment out any other handler configurations such as perl-status. # This will allow remote server configuration reports, with the URL of # http://servername/perl-status # Change the \".example.com\" to match your domain to enable.  81 | P a g e # ## <Location /perl-status> ## SetHandler perl-script ## PerlResponseHandler Apache2::Status ## Order deny,allow ## Deny from all ## Allow from .example.com ## </Location> Default Value: The default source build extra content is available in the /usr/local/apache2/conf/extra/ directory, but the configuration of the extra content is commented out by default. The only default content is a minimal barebones index.html in the document root which contains the following: <html> <body> <h1>It works!</h1> </body> </html>",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_server_default_content_removed",
      "apache_server_sample_content_removed",
      "apache_server_unnecessary_content_removed",
      "apache_server_production_content_only",
      "apache_server_default_website_removed",
      "apache_server_demo_content_removed",
      "apache_server_unused_content_removed",
      "apache_server_non_production_content_removed"
    ]
  },
  {
    "id": "5.5",
    "title": "Ensure the Default CGI Content printenv Script Is Removed",
    "assessment": "Scored",
    "description": "Most web servers, including Apache installations, have default CGI content which is not needed or appropriate for production use. The primary function for these sample programs is to demonstrate the capabilities of the web server. One common default CGI content for apache installations is the script printenv. This script will print back to the requester all of the CGI environment variables, which include many server configuration details and system paths.",
    "rationale": "CGI programs have a long history of security bugs and problems associated with improperly accepting user input. Since these programs are often targets of attackers, we need to make sure there are no unnecessary CGI programs that could potentially be used for malicious purposes. Usually these programs were not written for production use, and consequently little thought was given to security in their development. The printenv script in particular will disclose inappropriate information about the web server, including directory paths and detailed version and configuration information.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate cgi-bin files and directories enabled in the Apache configuration via the Script, ScriptAlias, ScriptAliasMatch, or ScriptInterpreterSource directives. 2. Ensure the printenv CGI is not installed in any configured cgi-bin directory.",
    "remediation": "Perform the following to implement the recommended state: 1. Locate cgi-bin files and directories enabled in the Apache configuration via the Script, ScriptAlias, ScriptAliasMatch, or ScriptInterpreterSource directives. 2. Remove the printenv default CGI in the cgi-bin directory if it is installed. # rm $APACHE_PREFIX/cgi-bin/printenv  83 | P a g e Notes: The default source build does not include the printenv script.",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_cgi_printenv_removed",
      "apache_cgi_default_content_removed",
      "apache_cgi_sample_scripts_removed",
      "apache_cgi_production_content_removed",
      "apache_cgi_environment_variables_protected",
      "apache_cgi_server_config_protected",
      "apache_cgi_unnecessary_scripts_removed",
      "apache_cgi_secure_content_enabled"
    ]
  },
  {
    "id": "5.6",
    "title": "Ensure the Default CGI Content test-cgi Script Is Removed",
    "assessment": "Scored",
    "description": "Most web servers, including Apache installations, have default CGI content which is not needed or appropriate for production use. The primary function for these sample programs is to demonstrate the capabilities of the web server. A common default CGI content for Apache installations is the script test-cgi. This script will print back to the requester CGI environment variables, which includes many server configuration details.",
    "rationale": "CGI programs have a long history of security bugs and problems associated with improperly accepting user input. Since these programs are often targets of attackers, we need to make sure there are no unnecessary CGI programs that could potentially be used for malicious purposes. Usually these programs were not written for production use, and consequently little thought was given to security in their development. The test-cgi script in particular will disclose inappropriate information about the web server, including directory paths and detailed version and configuration information.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate cgi-bin files and directories enabled in the Apache configuration via Script, ScriptAlias, ScriptAliasMatch, or ScriptInterpreterSource directives. 2. Ensure the test-cgi script is not installed in any configured cgi-bin directory.",
    "remediation": "Perform the following to implement the recommended state: 1. Locate cgi-bin files and directories enabled in the Apache configuration via Script, ScriptAlias, ScriptAliasMatch, or ScriptInterpreterSource directives. 2. Remove the test-cgi default CGI in the cgi-bin directory if it is installed. # rm $APACHE_PREFIX/cgi-bin/test-cgi  85 | P a g e Default Value: The default source build does not include the test-cgi script.",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "apache_cgi_content_test_cgi_removed",
      "apache_cgi_script_default_removed",
      "web_server_default_cgi_content_disabled",
      "apache_default_test_cgi_deleted",
      "web_server_cgi_script_production_removed"
    ]
  },
  {
    "id": "5.7",
    "title": "Ensure HTTP Request Methods Are Restricted",
    "assessment": "Scored",
    "description": "Use the Apache <LimitExcept> directive to restrict unnecessary HTTP request methods of the web server so it only accepts and processes the GET, HEAD, POST and OPTIONS HTTP request methods.",
    "rationale": "The HTTP 1.1 protocol supports several request methods which are rarely used and potentially high risk. For example, methods such as PUT and DELETE are rarely used and should be disabled in keeping with the security principle of minimizing features and options. Also, since these methods are typically used to modify resources on the web server, they should be explicitly disallowed. For normal web server operation, you will typically need to allow only the GET, HEAD and POST request methods. This will allow for downloading web pages and submitting information to web forms. The OPTIONS request method will also be allowed as it is used to request which HTTP request methods are allowed. Unfortunately, the Apache <LimitExcept> directive does not deny the TRACE request method. The TRACE request method is disallowed in another benchmark recommendation with the TraceEnable directive.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate the Apache configuration files and included configuration files. 2. Search for all <Directory> directives other than the OS root directory. 3. Ensure that group contains a single Order directive within the <Directory> directive with a value of deny,allow. 4. Verify the <LimitExcept> directive does not include any HTTP methods other than GET, POST, and OPTIONS. (It may contain fewer methods.)",
    "remediation": "Perform the following to implement the recommended state:  87 | P a g e 1. Locate the Apache configuration files and included configuration files. 2. Search for the directive on the document root directory, such as: <Directory \"/usr/local/apache2/htdocs\"> . . . </Directory> 3. Ensure that the access control order within the <Directory> directive is deny,allow. Order allow,deny 4. Add a directive as shown below within the group of document root directives. # Limit HTTP methods to standard methods. Note: Does not limit TRACE <LimitExcept GET POST OPTIONS> Deny from all </LimitExcept> 5. Search for other directives in the Apache configuration files in places other than the root directory, and add the same directives to each. It is very important to understand that the directives are based on the OS file system hierarchy as accessed by Apache and not the hierarchy of the locations within web site URLs. <Directory \"/usr/local/apache2/cgi-bin\"> . . . Order allow,deny # Limit HTTP methods <LimitExcept GET POST OPTIONS> Deny from all </LimitExcept> </Directory> Default Value: No limits on HTTP methods References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#limitexcept 2. https://www.ietf.org/rfc/rfc2616.txt  88 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#limitexcept 2. https://www.ietf.org/rfc/rfc2616.txt  88 | P a g e",
    "function_names": [
      "apache_http_limit_except_restricted",
      "apache_http_request_methods_restricted",
      "apache_http_unnecessary_methods_blocked",
      "apache_http_allowed_methods_enforced",
      "apache_http_methods_whitelist_enforced"
    ]
  },
  {
    "id": "5.8",
    "title": "Ensure the HTTP TRACE Method Is Disabled",
    "assessment": "Scored",
    "description": "Use the Apache TraceEnable directive to disable the HTTP TRACE request method. Refer to the Apache documentation for more details: http://httpd.apache.org/docs/2.2/mod/core.html#traceenable",
    "rationale": "The HTTP 1.1 protocol requires support for the TRACE request method, which reflects the request back as a response and was intended for diagnostics purposes. The TRACE method is not needed and is easily subjected to abuse, so it should be disabled.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate the Apache configuration files and included configuration files. 2. Verify there is a single TraceEnable directive configured with a value of off.",
    "remediation": "Perform the following to implement the recommended state: 1. Locate the main Apache configuration file such as httpd.conf. 2. Add a TraceEnable directive to the server level configuration with a value of off. Server level configuration is the top level configuration, not nested within any other directives like <Directory> or <Location>. TraceEnable off Default Value: on References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#traceenable  90 | P a g e 2. https://www.ietf.org/rfc/rfc2616.txt",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#traceenable  90 | P a g e 2. https://www.ietf.org/rfc/rfc2616.txt",
    "function_names": [
      "apache_http_trace_disabled",
      "apache_server_trace_method_disabled",
      "http_server_trace_request_disabled",
      "web_server_trace_enable_off",
      "apache_core_trace_directive_disabled"
    ]
  },
  {
    "id": "5.9",
    "title": "Ensure Old HTTP Protocol Versions Are Disallowed",
    "assessment": "Scored",
    "description": "The Apache modules mod_rewrite and mod_security can be used to disallow old and invalid HTTP versions. The HTTP version 1.1 RFC is dated June 1999 and has been supported by Apache since version 1.2, so it should no longer be necessary to allow ancient versions of HTTP prior to 1.1. Refer to the Apache documentation on mod_rewrite for more details: http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html",
    "rationale": "Many malicious automated programs, vulnerability scanners, and fingerprinting tools send requests using old HTTP versions to see how the web server responds. These requests are usually part of the attacker's enumeration process.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate the Apache configuration files and included configuration files. 2. Verify there is a rewrite condition within the global server context that disallows requests that do not include the HTTP/1.1 header, as shown below. RewriteEngine On RewriteCond %{THE_REQUEST} !HTTP/1\\.1$ RewriteRule .* - [F] 3. Verify the following directives are included in each section so that the main server settings will be inherited: RewriteEngine On RewriteOptions Inherit",
    "remediation": "Perform the following to implement the recommended state: 1. Load the mod_rewrite module for Apache by doing either one of the following:  92 | P a g e a. Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script. ./configure --enable-rewrite b. Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file. LoadModule rewrite_module modules/mod_rewrite.so 2. Add the RewriteEngine directive to the configuration within the global server context with the value of on so the rewrite engine is enabled. RewriteEngine On 3. Locate the main Apache configuration file such as httpd.conf, and add the following rewrite condition to match HTTP/1.1 and the rewrite rule to the top server level configuration to disallow other protocol versions. RewriteEngine On RewriteCond %{THE_REQUEST} !HTTP/1\\.1$ RewriteRule .* - [F] 4. By default, mod_rewrite configuration settings from the main server context are not inherited by virtual hosts. Therefore, it is also necessary to add the following directives in each section to inherit the main server settings: RewriteEngine On RewriteOptions Inherit Default Value: The default value for the RewriteEngine is off References: 1. https://httpd.apache.org/docs/2.2/mod/mod_rewrite.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_rewrite.html",
    "function_names": [
      "apache_http_protocol_versions_disallowed",
      "apache_http_old_versions_blocked",
      "apache_http_min_version_1_1",
      "apache_http_invalid_versions_rejected",
      "apache_mod_rewrite_http_versions_restricted",
      "apache_mod_security_http_versions_restricted",
      "apache_http_legacy_protocol_disabled",
      "apache_http_1_1_minimum_required"
    ]
  },
  {
    "id": "5.10",
    "title": "Ensure Access to .ht* Files Is Restricted",
    "assessment": "Scored",
    "description": "Restrict access to any files beginning with .ht using the FilesMatch directive.",
    "rationale": "The default name for the access file which allows files in web directories to override the Apache configuration is .htaccess. The usage of access files should not be allowed, but as a defense in depth a FilesMatch directive is recommended to prevent web clients from viewing those files in case they are created. Also, common names for web password and group files are .htpasswd and .htgroup. Neither of these files should be placed in the document root, but in the event they are, the FilesMatch directive can be used to prevent them from being viewed by web clients.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that a FilesMatch directive similar to the one below is present in the Apache configuration and not commented out. <FilesMatch \"^\\.ht\"> Order allow,deny Deny from all </FilesMatch>",
    "remediation": "Perform the following to implement the recommended state: Add or modify the following lines in the Apache configuration file at the server configuration level: <FilesMatch \"^\\.ht\"> Order allow,deny Deny from all </FilesMatch>  95 | P a g e Default Value: .ht* files are not accessible References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#filesmatch",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#filesmatch",
    "function_names": [
      "apache_files_match_ht_restricted",
      "apache_files_match_ht_access_denied",
      "apache_files_match_ht_protected",
      "apache_files_match_ht_blocked",
      "apache_files_match_ht_secure",
      "apache_files_match_ht_no_access",
      "apache_files_match_ht_restrict_all",
      "apache_files_match_ht_deny_all"
    ]
  },
  {
    "id": "5.11",
    "title": "Ensure Access to Inappropriate File Extensions Is Restricted",
    "assessment": "Scored",
    "description": "Restrict access to inappropriate file extensions that are not expected to be a legitimate part of web sites using the FilesMatch directive.",
    "rationale": "There are many files that are often left within the web server document root that could provide an attacker with sensitive information. Most often these files are mistakenly left behind after installation, troubleshooting, or backing up files before editing. Regardless of the reason for their creation, these files can still be served by Apache even when there is no hyperlink pointing to them. The web administrators should use the FilesMatch directive to restrict access to only those file extensions that are appropriate for the web server. Rather than create a blacklist of potentially inappropriate file extensions such as .bak, .config, .old, etc., it is recommended instead that a whitelist of the appropriate and expected file extensions for the web server be created, reviewed, and enforced with a FilesMatch directive.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Verify that the FilesMatch directive that denies access to all files is present as shown in step 3 of the remediation with the order of Deny, Allow. 2. Verify that there is another FilesMatch directive similar to the one in step 4 of the remediation, with an expression that matches the approved file extensions.",
    "remediation": "Perform the following to implement the recommended state: 1. Compile a list of existing file extensions on the web server. The following find/awk command may be useful but is likely to need some customization according to the appropriate webroot directories for your web server. Please note that the find command skips over any files without a dot (.) in the filename, as these are not expected to be appropriate web content. find */htdocs -type f -name '*.*' | awk -F. '{print $NF }' | sort -u  97 | P a g e 2. Review the list of existing file extensions. Remove those that are inappropriate and add any appropriate file extensions expected to be added to the web server in the near future. 3. Add the FilesMatch directive below, which denies access to all files by default. # Block all files by default, unless specifically allowed. <FilesMatch \"^.*$\"> Order Deny,Allow Deny from all </FilesMatch> 4. Add another FilesMatch directive that allows access to those file extensions specifically allowed from the review process in step 2. An example FilesMatch directive is below. The file extensions in the regular expression should match your approved list, and not necessarily the expression below. # Allow files with specifically approved file extensions # Such as (css, htm; html; js; pdf; txt; xml; xsl; ...), # images (gif; ico; jpeg; jpg; png; ...), multimedia <FilesMatch \"^.*\\.(css|html?|js|pdf|txt|xml|xsl|gif|ico|jpe?g|png)$\"> Order Deny,Allow Allow from all </FilesMatch> Default Value: There are no restrictions on file extensions in the default configuration. References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#filesmatch",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#filesmatch",
    "function_names": [
      "apache_filesmatch_restricted_extensions",
      "apache_filesmatch_inappropriate_extensions_blocked",
      "webserver_filesmatch_extension_restrictions",
      "apache_filesmatch_secure_extensions",
      "webserver_filesmatch_inappropriate_blocked",
      "apache_filesmatch_extension_access_restricted",
      "webserver_filesmatch_restricted_extensions",
      "apache_filesmatch_block_inappropriate_extensions"
    ]
  },
  {
    "id": "5.12",
    "title": "Ensure IP Address Based Requests Are Disallowed",
    "assessment": "Scored",
    "description": "The Apache module mod_rewrite should disallow access for requests that use an IP address instead of a host name for the URL. Most normal access to the website from browsers and automated software will use a hostname, and will therefore include the hostname in the HTTP HOST header. Refer to the Apache 2.2 documentation for details: http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html",
    "rationale": "A common malware propagation and automated network scanning technique is to use IP addresses rather than hostnames for web requests, since it's simpler to automate. By denying IP-based web requests, these automated techniques will be denied access to the website. Malicious web scanning techniques continue to evolve, and many are now using hostnames, but denying access to IP-based requests is still a worthwhile defensive measure.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Locate the Apache configuration files and included configuration files. 2. Verify there is a rewrite condition within the global server context that disallows IP- based requests by requiring a HTTP HOST header similar to the example shown below. RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC] RewriteCond %{REQUEST_URI} !^/error [NC] RewriteRule ^.(.*) - [L,F]",
    "remediation": "Perform the following to implement the recommended state: 1. Load the mod_rewrite module for Apache by doing either one of the following: a. Build Apache with mod_rewrite statically loaded during the build by adding the --enable-rewrite option to the ./configure script.  99 | P a g e /configure --enable-rewrite b. Or, dynamically load the module with the LoadModule directive in the httpd.conf configuration file. LoadModule rewrite_module modules/mod_rewrite.so 2. Add the RewriteEngine directive to the configuration within the global server context with the value of on so the rewrite engine is enabled. RewriteEngine On 3. Locate the Apache configuration file such as httpd.conf and add the following rewrite condition to match the expected host name of the top server level configuration. RewriteCond %{HTTP_HOST} !^www\\.example\\.com [NC] RewriteCond %{REQUEST_URI} !^/error [NC] RewriteRule ^.(.*) - [L,F] Default Value: RewriteEngine off References: 1. https://httpd.apache.org/docs/2.2/mod/mod_rewrite.html",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_rewrite.html",
    "function_names": [
      "apache_server_ip_requests_disallowed",
      "apache_rewrite_hostname_required",
      "apache_http_host_header_validated",
      "apache_mod_rewrite_ip_blocking_enabled",
      "apache_request_hostname_enforced"
    ]
  },
  {
    "id": "5.13",
    "title": "Ensure the IP Addresses for Listening for Requests Are Specified",
    "assessment": "Scored",
    "description": "The Apache Listen directive specifies the IP addresses and port numbers the Apache web server will listen on for requests. Rather than be unrestricted to listen on all IP addresses available to the system, the specific IP address or addresses intended should be explicitly specified. Specifically, a Listen directive with no IP address specified or with an IP address of all zeroes should not be used.",
    "rationale": "Having multiple interfaces on web servers is fairly common, and without explicit Listen directives, the web server is likely to be listening on an IP address or interface that was not intended for the web server. Single-homed systems with a single IP address are also required to have an explicit IP address in the Listen directive, in case additional interfaces are added to the system at a later date.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that no Listen directives are in the Apache configuration file with no IP address specified or with an IP address of all zeroes.",
    "remediation": "Perform the following to implement the recommended state: 1. Find any Listen directives in the Apache configuration file with no IP address specified or with an IP address of all zeroes similar to the examples below. Keep in mind there may be both IPv4 and IPv6 addresses on the system. Listen 80 Listen 0.0.0.0:80 Listen [::ffff:0.0.0.0]:80  101 | P a g e 2. Modify the Listen directives in the Apache configuration file to have explicit IP addresses according to the intended usage. Multiple Listen directives may be specified for each IP address and port. Listen 10.1.2.3:80 Listen 192.168.4.5:80 Listen [2001:db8::a00:20ff:fea7:ccea]:80 Default Value: Listen 80 References: 1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#listen",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mpm_common.html#listen",
    "function_names": [
      "apache_listen_directive_ip_specified",
      "apache_listen_directive_no_wildcard_ip",
      "apache_listen_directive_explicit_ip_required",
      "apache_listen_directive_restrict_ip_binding",
      "apache_listen_directive_no_all_ips"
    ]
  },
  {
    "id": "5.14",
    "title": "Ensure Browser Framing Is Restricted",
    "assessment": "Scored",
    "description": "The Header directive allows server HTTP response headers to be added, replaced, or merged. Use the directive to add a server HTTP response header to tell browsers to restrict all the web pages from being framed by other web sites.",
    "rationale": "Using iframes and regular web frames to embed malicious content along with expected web content has been a favored attack vector for attacking web clients for a long time. This can happen when the attacker lures the victim to a malicious web site, which uses frames to include the expected content from the legitimate site. The attack can also be performed via XSS (either reflected, DOM or stored XSS) to add the malicious content to the legitimate web site. To combat this vector, an HTTP Response header, X-Frame-Options, has been introduced that allows a server to specify whether a web page may be loaded in any frame (DENY) or only those frames that share the page's origin (SAMEORIGIN).",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Ensure a Header directive for X-Frame-Options is present in the Apache configuration and has the condition always, an action of append, and a value of SAMEORIGIN, as shown below: # grep -i X-Frame-Options $APACHE_PREFIX/conf/httpd.conf Header always append X-Frame-Options SAMEORIGIN",
    "remediation": "Perform the following to implement the recommended state: Add or modify the Header directive for the X-Frame-Options header in the Apache configuration to have the condition always, an action of append, and a value of SAMEORIGIN, as shown below. Header always append X-Frame-Options SAMEORIGIN  103 | P a g e Default Value: The X-Frame-Options HTTP response header is not generated by default References: 1. http://httpd.apache.org/docs/2.2/mod/mod_headers.html#header 2. https://developer.mozilla.org/en/The_X-FRAME-OPTIONS_response_header 3. http://blogs.msdn.com/b/ie/archive/2009/01/27/ie8-security-part-vii- clickjacking-defenses.aspx",
    "profile_applicability": "•  Level 2",
    "references": "1. http://httpd.apache.org/docs/2.2/mod/mod_headers.html#header 2. https://developer.mozilla.org/en/The_X-FRAME-OPTIONS_response_header 3. http://blogs.msdn.com/b/ie/archive/2009/01/27/ie8-security-part-vii- clickjacking-defenses.aspx",
    "function_names": [
      "cloud_cdn_response_header_framing_restricted",
      "cloud_cdn_header_x_frame_options_deny",
      "cloud_cdn_security_header_framing_protected",
      "cloud_cdn_response_header_no_framing",
      "cloud_cdn_header_content_security_policy_framing_restricted"
    ]
  },
  {
    "id": "6.1",
    "title": "Ensure the Error Log Filename and Severity Level Are Configured Correctly",
    "assessment": "Scored",
    "description": "The LogLevel directive is used to configure the severity level for the error logs, while the ErrorLog directive configures the error log filename. The log level values are the standard syslog levels of emerg, alert, crit, error, warn, notice, info and debug. The recommended level is notice, so that all errors from the emerg level through the notice level will be logged.",
    "rationale": "The server error logs are invaluable because they can be used to spot potential problems before they become serious. Most importantly, they can be used to watch for anomalous behavior such as numerous \"not found\" or \"unauthorized\" errors that may be an indication an attack is pending or has occurred. IMPORTANT NOTE: The Apache htttpd server stopped including 404 not found errors in its error log several years ago. Not including the 404 errors may cause log monitoring and host intrusion detection and prevention software to miss web scanning attacks which cause a large number of not found errors, and may fail to block the attack. For Apache 2.4 benchmark we have recommended using “notice core:info” in order to pick up the 404 errors. However, in Apache 2.2, the LogLevel directive doesn’t support multiple levels. So the same recommended solution is not available. There are three alternatives to consider: 1. Set the LogLevel to info – However this may create excessive logs, especially for TLS connections. The excessive logs may overwhelm the log monitoring processes.  105 | P a g e 2. Adapt the log monitoring and IDS to monitor the access logs. Which are much more frequent and may also overwhelm the log monitoring system. 3. Upgrade to Apache 2.4. For historical context: • A useful discussion which includes a justification by the bug fix author for the not found log level change. https://stackoverflow.com/questions/36568205/404- error-doesnt-appear-in-apache-error-log • The Apache “bug fix” that caused the change in logging 404 not found errors is available at https://bz.apache.org/bugzilla/show_bug.cgi?id=35768",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Verify the LogLevel in the Apache server configuration has a value of notice or lower. Note that it is also compliant to have a value of info or debug if there is a need for a more verbose log and the storage and monitoring processes are capable of handling the extra load. The recommended value is notice. 2. Verify the ErrorLog directive is configured to an appropriate log file or syslog facility. 3. Verify there is a similar ErrorLog directive for each virtual host configured if the virtual host will have different people responsible for the web site.",
    "remediation": "Perform the following to implement the recommended state: 1. Add or modify the LogLevel in the Apache configuration to have a value of notice or lower. Note that is it is compliant to have a value of info or debug if there is a need for a more verbose log and the storage and monitoring processes are capable of handling the extra load. The recommended value is notice. LogLevel notice 2. Add an ErrorLog directive if not already configured. The file path may be relative or absolute, or the logs may be configured to be sent to a syslog server. ErrorLog \"logs/error_log\" 3. Add a similar ErrorLog directive for each virtual host configured if the virtual host will have different people responsible for the web site. Each responsible individual or organization needs access to their own web logs.  106 | P a g e Default Value: The following is the default configuration: LogLevel warn ErrorLog \"logs/error_log\" References: 1. https://httpd.apache.org/docs/2.2/logs.html 2. https://httpd.apache.org/docs/2.2/mod/core.html#loglevel 3. https://httpd.apache.org/docs/2.2/mod/core.html#errorlog",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/logs.html 2. https://httpd.apache.org/docs/2.2/mod/core.html#loglevel 3. https://httpd.apache.org/docs/2.2/mod/core.html#errorlog",
    "function_names": [
      "cloud_cdn_log_level_notice",
      "cloud_cdn_error_log_filename_configured",
      "cloud_cdn_log_severity_valid",
      "cloud_cdn_error_logging_enabled",
      "cloud_cdn_log_level_min_notice"
    ]
  },
  {
    "id": "6.2",
    "title": "Ensure a Syslog Facility Is Configured for Error Logging",
    "assessment": "Scored",
    "description": "The ErrorLog directive should be configured to send web server error logs to a syslog facility so the logs can be processed and monitored along with the system logs.",
    "rationale": "It is easy for web server error logs to be overlooked in the log monitoring process, and yet the application-level attacks have become the most common and are extremely important for detecting attacks early, as well as detecting non-malicious problems such as a broken link, or internal errors. By including the Apache error logs with the system logging facility, the application logs are more likely to be included in the established log monitoring process.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Verify that the ErrorLog in the Apache server configuration has a value of syslog:facility, where facility can be any of the syslog facility values such as local1. 2. Verify there is a similar ErrorLog directive which is either configured or inherited for each virtual host.",
    "remediation": "Perform the following to implement the recommended state: 1. Add an ErrorLog directive if not already configured. Any appropriate syslog facility may be used in place of local1. ErrorLog \"syslog:local1\" 2. Add a similar ErrorLog directive for each virtual host if necessary. Default Value: The following is the default configuration:  108 | P a g e ErrorLog \"logs/error_log\" References: 1. https://httpd.apache.org/docs/2.2/logs.html 2. https://httpd.apache.org/docs/2.2/mod/core.html#loglevel 3. https://httpd.apache.org/docs/2.2/mod/core.html#errorlog",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/logs.html 2. https://httpd.apache.org/docs/2.2/mod/core.html#loglevel 3. https://httpd.apache.org/docs/2.2/mod/core.html#errorlog",
    "function_names": [
      "apache_error_log_syslog_facility_configured",
      "apache_error_log_syslog_enabled",
      "apache_error_log_remote_syslog_integration",
      "apache_error_log_syslog_facility_valid",
      "apache_error_log_syslog_destination_configured"
    ]
  },
  {
    "id": "6.3",
    "title": "Ensure the Server Access Log Is Configured Correctly",
    "assessment": "Scored",
    "description": "The LogFormat directive defines the format and information to be included in the server access log entries. The CustomLog directive specifies the log file, syslog facility, or piped logging utility.",
    "rationale": "The server access logs are invaluable for a variety of reasons. They can be used to determine what resources are being used most. Most importantly, they can be used to investigate anomalous behavior that may be an indication an attack is pending or has occurred. If the server only logs errors and does not log successful access, it is very difficult to investigate incidents. You may see that the errors stop and wonder if the attacker gave up or if the attack was successful.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Verify the CustomLog directive is configured to an appropriate log file, syslog facility, or piped logging utility and the directive uses a log format that includes all of the format string tokens listed below. The log format string may be specified as a LogFormat nickname or as an explicit string. For example, either of the following two configurations are compliant: LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User- agent}i\\\"\"    combined CustomLog log/access_log combined CustomLog log/access_log \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User- agent}i\\\"\" The log format string should include the following tokens in any order. The portion \" = description text. \" describes the information to be logged. o %h = Remote hostname or IP address if HostnameLookups is set to Off, which is the default.  110 | P a g e o %l =Remote logname / identity. o %u =Remote user, if the request was authenticated. o %t = Time the request was received, o %r = First line of request. o %>s = Final status. o %b = Size of response in bytes. o %{Referer}i = Variable value for Referer header. o %{User-agent}i = Variable value for User Agent header. 2. Verify there is a similar CustomLog directives for each virtual host configured if the virtual host will have different people responsible for the web site.",
    "remediation": "Perform the following to implement the recommended state: 1. Add or modify the LogFormat directives in the Apache configuration to use the combined` format show as shown below. LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User- agent}i\\\"\" combined 2. Add or modify the CustomLog directives in the Apache configuration to use the combined format with an appropriate log file, syslog facility or piped logging utility. CustomLog log/access_log combined 3. Add a similar CustomLog directives for each virtual host configured if the virtual host will have different people responsible for the web site. Each responsible individual or organization needs access to their own web logs as well as the skills/training/tools for monitoring the logs. Default Value: The following is the default log configuration: LogFormat “%h %l %u %t \\”%r\\” %>s %b \\”%{Referer}i\\” \\”%{User-Agent}i\\”” combined LogFormat “%h %l %u %t \\”%r\\” %>s %b” common CustomLog “logs/access_log” common References: 1. https://httpd.apache.org/docs/2.2/mod/mod_log_config.html#customlog 2. https://httpd.apache.org/docs/2.2/mod/mod_log_config.html#formats   111 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_log_config.html#customlog 2. https://httpd.apache.org/docs/2.2/mod/mod_log_config.html#formats   111 | P a g e",
    "function_names": [
      "cloud_cdn_distribution_log_format_configured",
      "cloud_cdn_distribution_custom_log_enabled",
      "cloud_cdn_distribution_logging_configured",
      "cloud_cdn_distribution_access_log_format_valid",
      "cloud_cdn_distribution_log_destination_secure"
    ]
  },
  {
    "id": "6.4",
    "title": "Ensure Log Storage and Rotation Is Configured Correctly",
    "assessment": "Scored",
    "description": "It is important that there is adequate disk space on the partition to hold all the log files, and that log rotation is configured to retain at least three months or 13 weeks of logs if central logging is not used for storage.",
    "rationale": "The generation of logs is under a potential attacker's control, so do not hold any Apache log files on the root partition of the OS. This could result in a denial of service against your web server host by filling up the root partition and causing the system to crash. For this reason, it is recommended that the log files should be stored on a dedicated partition. Likewise, consider that attackers sometimes put information into your logs which is intended to attack your log collection or log analysis processing software. So it is important that they are not vulnerable. Investigation of incidents often requires access to several months or more of logs, which is why it is important to keep at least three months' worth available. Two common log rotation utilities are rotatelogs(8), which is bundled with Apache, and logrotate(8), commonly bundled on Linux distributions.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Verify the web log rotation configuration matches the Apache configured log files. 2. Verify the rotation period and number of logs to retain is at least 13 weeks or three months. 3. For each virtual host configured with its own log files, ensure those log files are also included in a similar log rotation.",
    "remediation": "To implement the recommended state, do either option a) if using the Linux logrotate utility or option b) if using a piped logging utility such as the Apache rotatelogs:  113 | P a g e a) File Logging with Logrotate: 1. Add or modify the web log rotation configuration to match your configured log files in /etc/logrotate.d/httpd to be similar to the following. /var/log/httpd/*log { missingok notifempty sharedscripts postrotate /bin/kill -HUP 'cat /var/run/httpd.pid 2>/dev/null' 2> /dev/null || true endscript } 2. Modify the rotation period and number of logs to keep so that at least 13 weeks or three months of logs are retained. This may be done as the default value for all logs in /etc/logrotate.conf or in the web specific log rotation configuration in /etc/logrotate.d/httpd to be similar to the following. # rotate log files weekly weekly # keep 1 year of logs rotate 52 3. For each virtual host configured with its own log files, ensure those log files are also included in a similar log rotation. b) Piped Logging: 1. Configure the log rotation interval and log filenames to a suitable interval such as daily. CustomLog \"|bin/rotatelogs -l /var/logs/logfile.%Y.%m.%d 86400\" combined 2. Ensure the log file naming and any rotation scripts provide for retaining at least three months or 13 weeks of log files. 3. For each virtual host configured with its own log files, ensure those log files are included in a similar log rotation. Default Value: The following is the default httpd log rotation configuration in /etc/logrotate.d/httpd: /var/log/httpd/*log { missingok  114 | P a g e notifempty sharedscripts postrotate /bin/kill -HUP cat /var/run/httpd.pid 2>/dev/null 2> /dev/null || true endscript } The default log retention is configured in /etc/logrotate.conf: # rotate log files weekly weekly # keep 4 weeks worth of backlogs rotate 4",
    "profile_applicability": "•  Level 1 •  Level 2",
    "function_names": [
      "compute_instance_log_storage_configured",
      "compute_instance_log_rotation_enabled",
      "compute_instance_log_retention_over_90d",
      "compute_instance_log_partition_space_adequate",
      "compute_instance_log_rotation_min_13_weeks",
      "compute_instance_log_central_storage_enabled",
      "compute_instance_log_retention_configured",
      "compute_instance_log_storage_rotation_compliant"
    ]
  },
  {
    "id": "6.5",
    "title": "Ensure Applicable Patches Are Applied",
    "assessment": "Scored",
    "description": "Apply Apache patches within one month of availability.",
    "rationale": "Obviously knowing about newly discovered vulnerabilities is only part of the solution; there needs to be a process in place where patches are tested and installed. These patches fix diverse problems, including security issues. It is recommended to use the Apache packages and updates provided by your Linux platform vendor rather than building from source whenever possible in order to minimize the disruption and the work of keeping the software up-to-date.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. When Apache was built from source: a. Check the Apache web site for latest versions, date of releases, and any security patches.  http://httpd.apache.org/security/vulnerabilities_22.html Apache patches are available http://www.apache.org/dist/httpd/patches b. If newer versions with security patches more than one month old are not installed, the installation is not sufficiently up-to-date. 2. When using platform packages: a. Check for vendor supplied updates on the vendor web site. b. If newer versions with security patches more than one month old are not installed, the installation is not sufficiently up-to-date.",
    "remediation": "Update to the latest Apache release available according to either of the following: 1. When building from source: a. Read release notes and related security patch information. b. Download latest source and any dependent modules such as mod_security. c. Build new Apache software according to your build process with the same configuration options.  116 | P a g e d. Install and test the new software according to your organization's testing process. e. Move to production according to your organization's deployment process. 2. When using platform packages: a. Read release notes and related security patch information. b. Download and install latest available Apache package and any dependent software. c. Test the new software according to your organization's testing process. d. Move to production according to your organization's deployment process. Default Value: Not applicable References: 1. https://httpd.apache.org/security/vulnerabilities_22.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/security/vulnerabilities_22.html",
    "function_names": [
      "compute_instance_patches_applied_over_30d",
      "compute_vm_patches_applied_over_30d",
      "compute_server_patches_applied_over_30d",
      "apache_server_patches_applied_over_30d",
      "apache_instance_patches_applied_over_30d",
      "apache_web_server_patches_applied_over_30d",
      "web_server_patches_applied_over_30d",
      "server_software_patches_applied_over_30d"
    ]
  },
  {
    "id": "6.6",
    "title": "Ensure ModSecurity Is Installed and Enabled",
    "assessment": "Scored",
    "description": "ModSecurity is an open source web application firewall (WAF) for real-time web application monitoring, logging, and access control. It does not include a powerful customizable rule set, which may be used to detect and block common web application attacks. Installation of ModSecurity without a rule set does not provide additional security for the protected web applications. Refer to the benchmark recommendation \" Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled \" for details on a recommended rule set. Note: Like other application security/application firewall systems, ModSecurity requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing ModSecurity may NOT be effective and may provide a false sense of security.",
    "rationale": "Installation of the ModSecurity Apache module enables a customizable web application firewall rule set which may be configured to detect and block common attack patterns as well as block outbound data leakage.",
    "audit": "Perform the following to determine if the security2_module has been loaded: Use the httpd -M option as root to check that the module is loaded. # httpd -M | grep security2_module Note: If the module is correctly enabled, the output will include the module name and whether it is loaded statically or as a shared module.  118 | P a g e",
    "remediation": "Perform the following to enable the module: 1. Install the ModSecurity module if it is not already installed in modules/mod_security2.so. It may be installed via OS package installation (such as apt-get or yum) or built from the source files. See https://www.modsecurity.org/download.html for details. 2. Add or modify the LoadModule directive if not already present in the Apache configuration as shown below. Typically, the LoadModule directive is placed in the file named mod_security.conf, which is included in the Apache configuration: LoadModule security2_module modules/mod_security2.so Default Value: The ModSecurity module is not loaded by default References: 1. https://www.modsecurity.org/",
    "profile_applicability": "•  Level 2",
    "references": "1. https://www.modsecurity.org/",
    "function_names": [
      "compute_web_server_modsecurity_installed",
      "compute_web_server_modsecurity_enabled",
      "compute_web_server_modsecurity_rule_set_installed",
      "compute_web_server_modsecurity_rule_set_enabled",
      "compute_web_server_modsecurity_owasp_rules_installed",
      "compute_web_server_modsecurity_owasp_rules_enabled",
      "compute_web_server_modsecurity_logging_enabled",
      "compute_web_server_modsecurity_monitoring_enabled",
      "compute_web_server_modsecurity_tuning_required",
      "compute_web_server_modsecurity_alert_handling_required"
    ]
  },
  {
    "id": "6.7",
    "title": "Ensure the OWASP ModSecurity Core Rule Set Is Installed and Enabled",
    "assessment": "Scored",
    "description": "The OWASP ModSecurity Core Rule Set (CRS) is a set of open source web application defensive rules for the ModSecurity web application firewall (WAF). The OWASP ModSecurity CRS provides baseline protections in the following attack/threat categories: • HTTP Protection - detecting violations of the HTTP protocol and a locally defined usage policy. • Real-time Blacklist Lookups - utilizes 3rd Party IP Reputation • HTTP Denial of Service Protections - defense against HTTP Flooding and Slow HTTP DoS Attacks. • Common Web Attacks Protection - detecting common web application security attack. • Automation Detection - Detecting bots, crawlers, scanners and other surface malicious activity. • Integration with AV Scanning for File Uploads - detects malicious files uploaded through the web application. • Tracking Sensitive Data - Tracks Credit Card usage and blocks leakages. • Trojan Protection - Detecting access to Trojans horses. • Identification of Application Defects - alerts on application misconfigurations. • Error Detection and Hiding - Disguising error messages sent by the server. Note: Like other application security/application firewall systems, Mod_Security requires a significant commitment of staff resources for initial tuning of the rules and handling alerts. In some cases, this may require additional time working with application developers/maintainers to modify applications based on analysis of the results of tuning and monitoring logs. After setup, an ongoing commitment of staff is required for monitoring logs and ongoing tuning, especially after upgrades/patches. Without this commitment to tuning and monitoring, installing Mod_Security may NOT be effective and may provide a false sense of security.",
    "rationale": "Installing, configuring, and enabling the OWASP ModSecurity Core Rule Set (CRS) provides additional baseline security defense and a good starting point to customize the monitoring and blocking of common web application attacks.  121 | P a g e",
    "audit": "For the OWASP ModSecurity CRS version 2.2.9 , perform the following to audit the configuration: In the 2.2.9 release, the OWASP ModSecurity CRS contains 15 base_rule configuration files, each with rule sets. The CRS also contains 14 optional rule sets, and 17 experimental rule sets. Since it is expected that customization and testing will be necessary to implement the CRS, it is not expected that any site will implement all CRS configuration files / rule sets. Therefore, for the purpose of auditing, the OWASP ModSecurity CRS will be considered implemented if 200 or more of the security rules (SecRule) are active in the CRS configuration files. The default 2.2.9 installation contains 227 security rules. Perform the following to determine if 2.2.9 OWASP ModSecurity CRS is enabled: • Set RULE_DIR environment variable to the directory where the active rules are included from the modsecurity configuration file. An example is shown below. RULE_DIR=$APACHE_PREFIX/modsecurity.d/activated_rules/ • Use the following command to count the security rules in all of the active CRS configuration files. find $APACHE_PREFIX/modsecurity.d/activated_rules/ -name 'modsecurity_crs_*.conf' | xargs grep '^SecRule ' | wc -l • If the number of active files is 200 or greater, then OWASP ModSecurity CRS is considered active and the audit passed. For the OWASP ModSecurity CRS version 3.0 , perform the following to audit the configuration: In the 3.0 release, the OWASP ModSecurity CRS contains 29 rule configuration files, each with rule sets. It is expected that customization and testing will be necessary to implement the CRS; it is not expected that any site will implement all CRS configuration files / rule sets. Therefore, for the purpose of auditing, the OWASP ModSecurity CRS v3.0 will be considered implemented if 325 or more of the security rules (SecRule) are active in the CRS configuration files. The default OWASP ModSecurity CRS 3.0 installation contains 462 security rules. In addition to the rules, there are three additional values that have to be set. The Inbound and the Outbound Anomaly Threshold and the Paranoia Mode. The Anomaly Threshold values set a limit so that traffic is not blocked until the threshold is exceeded. Any traffic that triggers enough active rules so that the additive value of each rule exceeds the threshold value will be block. The suitable paranoia level has to be defined according to the security level of the service in question. The default value of 1 should be applicable for any online service. The Paranoia Level 2 should be chosen for online services with a need for further hardening, (such as online services with a wide attack surface or online services  122 | P a g e with known security issues and concerns). Paranoia Level 3 and Level 4 cater services with even higher security requirements but have to be considered experimental. Perform the following to determine if OWASP ModSecurity CRS 3.0 is enabled, and is configured to meet or exceed the expected values: • Set RULE_DIR environment variable to the directory where the active rules are included from the modsecurity configuration file. An example is shown below. RULE_DIR=$APACHE_PREFIX/modsecurity.d/owasp-modsecurity-crs-3.0.0/ • Use the following command to count the security rules in all of the active CRS configuration files. find $RULE_DIR -name '*.conf' | xargs grep '^SecRule ' | wc -l • If the number of active rules is 325 or greater then OWASP ModSecurity CRS 3.0 is considered active. • The Inbound Anomaly Threshold must be less than or equal to 5 and can be checked with the following command. find $RULE_DIR -name '*.conf' | xargs egrep -v '^\\s*#' | grep 'setvar:tx.inbound_anomaly_score_threshold' • The Outbound Anomaly Threshold must be less than or equal to 4 and may be audited with the following command. find $RULE_DIR -name '*.conf' | xargs egrep -v '^\\s*#' | grep 'setvar:tx.outbound_anomaly_score_threshold' • The Paranoia Level must be greater than or equal to 1 and may be audited with the following command. find $RULE_DIR -name '*.conf' | xargs egrep -v '^\\s*#' | grep 'setvar:tx.paranoia_level'",
    "remediation": "Install, configure and test the OWASP ModSecurity Core Rule Set: 1. Download the OWASP ModSecurity CRS from the project page https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_ Project. 2. Unbundle the archive and follow the instructions in the INSTALL file. 3. The modsecurity_crs_10_setup.conf file is required, and rules in the base_rules directory are intended as a baseline useful for most applications.  123 | P a g e 4. Test the application for correct functionality after installing the CRS. Check web server error logs and the modsec_audit.log file for blocked requests due to false positives. 5. It is also recommended to test the application response to malicious traffic such as an automated web application scanner to ensure the rules are active. The web server error log and modsec_audit.log files should show logs of the attacks and the server's response codes. Default Value: The OWASP ModSecurity CRS is not installed by default. References: 1. https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_ Project 2. https://www.modsecurity.org/",
    "profile_applicability": "•  Level 2",
    "references": "1. https://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_ Project 2. https://www.modsecurity.org/",
    "function_names": [
      "cloud_cdn_waf_owasp_crs_installed",
      "cloud_cdn_waf_owasp_crs_enabled",
      "cloud_cdn_waf_owasp_crs_http_protection_enabled",
      "cloud_cdn_waf_owasp_crs_blacklist_lookups_enabled",
      "cloud_cdn_waf_owasp_crs_dos_protection_enabled",
      "cloud_cdn_waf_owasp_crs_web_attack_protection_enabled",
      "cloud_cdn_waf_owasp_crs_automation_detection_enabled",
      "cloud_cdn_waf_owasp_crs_av_scanning_enabled",
      "cloud_cdn_waf_owasp_crs_sensitive_data_tracking_enabled",
      "cloud_cdn_waf_owasp_crs_trojan_protection_enabled",
      "cloud_cdn_waf_owasp_crs_application_defect_detection_enabled",
      "cloud_cdn_waf_owasp_crs_error_hiding_enabled",
      "cloud_cdn_waf_owasp_crs_logging_enabled",
      "cloud_cdn_waf_owasp_crs_monitoring_enabled",
      "cloud_cdn_waf_owasp_crs_tuning_required"
    ]
  },
  {
    "id": "7.1",
    "title": "Ensure mod_ssl and/or mod_nss Is Installed",
    "assessment": "Scored",
    "description": "Secure Sockets Layer (SSL) was developed by Netscape and turned into an open standard and was renamed Transport Layer Security (TLS) as part of the process. TLS is important for protecting communication and can provide authentication of the server and even the client. However, contrary to vendor claims, implementing SSL does NOT directly make your web server more secure! SSL is used to encrypt traffic and therefore does provide confidentiality of private information and users credentials. Keep in mind, however that just because you have encrypted the data in transit does not mean that the data provided by the client is secure while it is on the server. Also, SSL does not protect the web server, as attackers will easily target SSL-Enabled web servers, and the attack will be hidden in the encrypted channel. The mod_ssl module is the standard, most used module that implements SSL/TLS for Apache. A newer module found on Red Hat systems can be a compliment or replacement for mod_ssl and provides the same functionality plus additional security services. The mod_nss is an Apache module implementation of the Network Security Services (NSS) software from Mozilla, which implements a wide range of cryptographic functions in addition to TLS.",
    "rationale": "It is best to plan for SSL/TLS implementation from the beginning of any new web server because most web servers have some need for SSL/TLS due to: • Non-public information submitted that should be protected as it's transmitted to the web server • Non-public information that is downloaded from the web server • Users authenticating to some portion of the web server  125 | P a g e • Authenticating the web server to ensure users they have reached the real web server and have not been phished or redirected to a bogus site",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Ensure the mod_ssl and/or mod_nss is loaded in the Apache configuration: # httpd -M | egrep 'ssl_module|nss_module' Results should show \"Syntax OK\" along with either or both of the modules.",
    "remediation": "Perform either of the following to implement the recommended state: 1. For Apache installations built from source, use the option --with-ssl= to specify the openssl path, and the --enable-ssl configure option to add the SSL modules to the build. The --with-included-apr configure option may be necessary if there are conflicts with the platform version. See the Apache documentation on building from source http://httpd.apache.org/docs/2.2/install.html for details. # ./configure --with-included-apr --with-ssl=$OPENSSL_DIR --enable-ssl 2. For installations using OS packages, it is typically just a matter of ensuring the mod_ssl package is installed. The mod_nss package might also be installed. The following yum command is suitable for Red Hat Linux. # yum install mod_ssl Default Value: SSL/TLS is not enabled by default. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html 2. https://developer.mozilla.org/en- US/docs/Mozilla/Projects/NSS/Reference/Building_and_installing_NSS  126 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html 2. https://developer.mozilla.org/en- US/docs/Mozilla/Projects/NSS/Reference/Building_and_installing_NSS  126 | P a g e",
    "function_names": [
      "apache_module_ssl_installed",
      "apache_module_nss_installed",
      "apache_module_ssl_or_nss_installed",
      "apache_module_tls_enabled",
      "apache_module_encryption_enabled",
      "apache_module_secure_communication_enabled",
      "apache_module_nss_configured",
      "apache_module_ssl_configured"
    ]
  },
  {
    "id": "7.2",
    "title": "Ensure a Valid Trusted Certificate Is Installed",
    "assessment": "Scored",
    "description": "The default SSL certificate is self-signed and is not trusted. Install a valid certificate signed by a commonly trusted certificate authority. To be valid, the certificate must be: • Signed by a trusted certificate authority • Not be expired, and • Have a common name that matches the host name of the web server, such as www.example.com. Note: Some previously \"Trusted\" Certificate Authority certificates had been signed with a weak hash algorithm such as MD5, or SHA1. These signature algorithms are known to be vulnerable to collision attacks. Note that it’s not the just the signature on the server’s certificate, but any signature up the certificate chain. Such CA certificates are considered no longer trusted as of January 1, 2017.",
    "rationale": "A digital certificate on your server automatically communicates your site's authenticity to visitors' web browsers. If a trusted authority signs your certificate, it confirms for visitors they are actually communicating with you, and not with a fraudulent site stealing credit card numbers or personal information.",
    "audit": "Perform one or more of the following steps to determine if the recommended state is implemented: 1. The Qualys SSL Labs has a website that may be used for testing external servers. https://www.ssllabs.com/ssltest/ Enter the external host name of the server and wait for an extensive tests of TLS protocols and ciphers, in addition to testing the server certificate and the entire certificate authority chain. The SSL Labs test will report any weak digital signatures of the intermediate certificate authorities. For example, the report may include a warning of:  128 | P a g e Intermediate certificate has an insecure signature. Upgrade to SHA2 as soon as possible to avoid browser warnings. In addition, the weak SHA1 or MD5 signature algorithm will be highlighted with red text where the additional intermediate CA certificates are enumerated. For example, the certificate below from an SSL Labs report used SHA1 for the digital signature: o Subject The Go Daddy Group, Inc. o Fingerprint SHA256: 18f8a7. . . o Pin SHA256: VjLZe. . . o Valid until Sat, 29 Jun . . . o Key RSA 2048 bits (e 3) o Issuer http://www... o Signature algorithm SHA1withRSA INSECURE If a weak signature is found, then follow your certificate authority’s process for having the server certificate re-issued / re-signed, in order to ensure that it is signed with a strong digital signature. 2. If the server is not an external server, or is not running on the standard port 443, a vulnerability scanner such as Nessus may be used to validate both the server certificate and the intermediate certificate chain. Custom certificate authorities may also be tested by loading the root certificate into the vulnerability scanner. 3. The testing can also be done by connecting to a running web server with your favorite browser and checking for a warning with regard to the certificate trust. However, some browsers may not warn of weak digital signatures, or other certificate issues. 4. OpenSSL can also be used to validate a certificate as a valid trusted certificate, using a trusted bundle of CA certificate. It is important that the CA bundle of certificates be an already validated and trusted file in order for the test to be valid. $ openssl verify -CAfile /etc/ssl/certs/ca-bundle.crt -purpose sslserver /etc/ssl/certs/example.com.crt /etc/ssl/certs/example.com.crt: OK A specific error message and code will be reported in addition to the OK if the certificate is not valid, For example: error 10 at 0 depth lookup:certificate has expired OK Of course, it is important here as well to be sure of the integrity of the trusted certificate authorities used by the web client. Visit the OWASP testing SSL web page for additional suggestions: https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM-001%29  129 | P a g e",
    "remediation": "Perform the following to implement the recommended state: 1. Decide on the hostname to be used for the certificate. It is important to remember that the browser will compare the hostname in the URL to the common name in the certificate, so it is important that all https: URLs match the correct hostname. Specifically, the hostname www.example.com is not the same as example.com nor the same as ssl.example.com. 2. Generate a private key using openssl. Although certificate key lengths of 1024 have been common in the past, a key length of 2048 is now recommended for strong authentication. The key must be kept confidential and will be encrypted with a passphrase by default. Follow the steps below and respond to the prompts for a passphrase. See the Apache or OpenSSL documentation for details: o http://httpd.apache.org/docs/2.2/ssl/ssl_faq.html#realcert o http://www.openssl.org/docs/HOWTO/certificates.txt # cd /etc/pki/tls/certs # umask 077 # openssl genrsa -aes128 2048 > example.com.key Generating RSA private key, 2048 bit long modulus ...+++ ............+++ e is 65537 (0x10001) Enter pass phrase: Verifying - Enter pass phrase: 3. Create a certificate specific template configuration file. It is important that common name in the certificate exactly make the web host name in the intended URL. If there are multiple host names which may be used, as is very common, then the subjectAltName (SAN) field should be filled with all of the alternate names. Creating a template configuration file specific to the server certificate is helpful, as it allows for multiple entries in the subjectAltName. Also, any typos in the CSR can be potentially costly due to the lost time, so using a file, rather than hand typing helps prevent errors. To create a template configuration file, make a local copy of the openssl.cnf typically found in /etc/ssl/ or /etc/pki/tls/ # cp /etc/ssl/openssl.cnf ex1.cnf> 4. Find the request section which follows the line “[ req ]\". Then add or modify the configuration file to include the appropriate values for the host names. It is recommended (but not required) that the first subjectAltName match the commonName. [ req ] . . . distinguished_name = req_distinguished_name req_extensions = req_ext  130 | P a g e [ req_ext ] subjectAltName = @alt_names [alt_names] DNS.1 = www.example.com DNS.2 = example.com DNS.3 = app.example.com DNS.4 = service.example.com 5. Continue editing the configuration file under the request distinguished name section to change the existing default values in the configuration file to match the desired certificates information. [ req_distinguished_name ] countryName_default             = GB stateOrProvinceName_default     = Scotland localityName_default            = Glasgow 0.organizationName_default      = Example Company Ltd organizationalUnitName_default  = ICT commonName_default              = www.example.com 6. Now generate the CSR from the template file, verifying the information. If the default values were placed in the template, then just press enter to confirm the default value. # openssl req -new -config ex2.cnf -out example.com.csr -key example.com.key Enter pass phrase for example.com.key: You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [GB]: State or Province Name (full name) [Scotland]: Locality Name (eg, city) [Glasgow]: Organization Name (eg, company) [Example Company Ltd]: Organizational Unit Name (eg, section) [ICT]: Common Name (e.g. server FQDN or YOUR name) [www.example.com]: 7. Review and verify the CSR information including the SAN by displaying the information. # openssl req -in ex2.csr -text | more Certificate Request: Data: Version: 1 (0x0)  131 | P a g e Subject: C = GB, ST = Scotland, L = Glasgow, O = Example Company Ltd, OU = ICT, CN = www.example.com Subject Public Key Info: Public Key Algorithm: rsaEncryption Public-Key: (2048 bit) Modulus: 00:cb:c2:7a:04:13:19:7a:c0:74:00:63:dd:e9:6e: . . .  <snip> . . . 3a:9d:aa:50:09:4a:40:48:b4:e2:24:ef:fa:7b:42: a4:33 Exponent: 65537 (0x10001) Attributes: Requested Extensions: X509v3 Subject Alternative Name: DNS:www.example.com, DNS:example.com, DNS:app.example.com, DNS:ws.example.com X509v3 Basic Constraints: CA:FALSE X509v3 Key Usage: Digital Signature, Non Repudiation, Key Encipherment Signature Algorithm: sha256WithRSAEncryption 73:f0:e3:90:a7:ab:01:e4:7f:12:19:b7:6a:dd:be:4e:5c:f1: . . . 8. Now move the private key to its intended directory. # mv www.example.com.key /etc/ssl/private/ 9. Send the certificate signing request (CSR) to a certificate signing authority to be signed, and follow their instructions for submission and validation. The CSR and the final signed certificate are just encoded text and need to be protected for integrity, but not confidentiality. This certificate will be given out for every SSL connection made. 10. The resulting signed certificate may be named www.example.com.crt and placed in /etc/ssl/certs/ as readable by all (mode 0444). Please note that the certificate authority does not need the private key (example.com.key) and this file must be carefully protected. With a decrypted copy of the private key, it would be possible to decrypt all conversations with the server. 11. Do not forget the passphrase used to encrypt the private key. It will be required every time the server is started in https mode. If it is necessary to avoid requiring an administrator having to type the passphrase every time the httpd service is started, the private key may be stored in clear text. Storing the private key in clear text increases the convenience while increasing the risk of disclosure of the key, but may be appropriate for the sake of being able to restart, if the risks are well managed. Be sure that the key file is only readable by root. To decrypt the private key and store it in clear text file the following openssl command may be used. You can tell by the private key headers whether it is encrypted or clear text. # cd /etc/ssl/private/ # umask 077  132 | P a g e # openssl rsa -in www.example.com.key -out www.example.com.key.clear 12. Locate the Apache configuration file for mod_ssl and add or modify the SSLCertificateFile and SSLCertificateKeyFiledirectives to have the correct path for the private key and signed certificate files. If a clear text key is referenced then a passphrase will not be required. You may need to configure the CA's certificate along with any intermediate CA certificates that signed your certificate using the SSLCertificateChainFile directive. As an alternative, starting with Apache version 2.4.8 the CA and intermediate certificates may be concatenated to the server certificate configured with the SSLCertificateFile directive instead. SSLCertificateFile /etc/ssl/certs/example.com.crt SSLCertificateKeyFile /etc/ssl/private/example.com.key # Default CA file, can be replaced with your CA certificate. SSLCertificateChainFile /etc/ssl/certs/server-chain.crt 13. Lastly, start or restart the httpd service and verify correct functioning with your favorite browser. References: 1. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM-001%29 2. https://httpd.apache.org/docs/2.2/ssl/ssl_faq.html#realcert 3. https://www.openssl.org/docs/HOWTO/certificates.txt 4. https://security.googleblog.com/2014/09/gradually-sunsetting-sha-1.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM-001%29 2. https://httpd.apache.org/docs/2.2/ssl/ssl_faq.html#realcert 3. https://www.openssl.org/docs/HOWTO/certificates.txt 4. https://security.googleblog.com/2014/09/gradually-sunsetting-sha-1.html",
    "function_names": [
      "cloud_cdn_ssl_certificate_trusted_ca_signed",
      "cloud_cdn_ssl_certificate_not_expired",
      "cloud_cdn_ssl_certificate_common_name_matches_host",
      "cloud_cdn_ssl_certificate_strong_hash_algorithm",
      "cloud_cdn_ssl_certificate_chain_trusted",
      "cloud_cdn_ssl_certificate_no_weak_hash",
      "cloud_cdn_ssl_certificate_valid_post_2017"
    ]
  },
  {
    "id": "7.3",
    "title": "Ensure the Server's Private Key Is Protected",
    "assessment": "Scored",
    "description": "It is critical to protect the server's private key. The private key is encrypted by default as a means of protecting it, but having it encrypted means that the passphrase is required each time the server is started up. Now it is necessary to protect the passphrase as well. The passphrase may be typed in when it is manually started up or provided by an automated program. See http://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslpassphrasedialog for details. To summarize, the options are: 1. Use SSLPassPhraseDialog builtin, which requires a passphrase to be manually entered. 2. Use SSLPassPhraseDialog |/path/to/program to provide the passphrase. 3. Use SSLPassPhraseDialog exec:/path/to/program to provide the passphrase. 4. Store the private key in clear text so a passphrase is not required. Any of the above options 1-4 are acceptable as long as the key and passphrase are protected properly. Option 1 has the additional security benefit of not storing the passphrase but is not generally acceptable for most production web servers, since it requires the web server to be manually started. Options 2 and 3 can provide additional security if the programs providing them are secure. Option 4 is the simplest, is widely used, and is acceptable as long as the private key is appropriately protected.",
    "rationale": "If the private key were to be disclosed, it could be used to decrypt all of the SSL communications with the web server as well as to impersonate the web server.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. For each certificate file referenced in the Apache configuration files with the SSLCertificateFile directive, examine the file for a private key, clearly identified by the string PRIVATE KEY—--.  134 | P a g e 2. For each file referenced in the Apache configuration files with the SSLCertificateKeyFile directive, verify the ownership is root:root and the permission 0400.",
    "remediation": "Perform the following to implement the recommended state: 1. All private keys must be stored separately from the public certificates. Find all SSLCertificateFile directives in the Apache configuration files. For any SSLCertificateFile directives that do not have a corresponding separate SSLCertificateKeyFile directive, move the key to a separate file from the certificate, and add the SSLCertificateKeyFile directive for the key file. 2. For each SSLCertificateKeyFile directive, change the ownership and permissions on the server private key to be owned by root:root with permission 0400. Default Value: Not applicable References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html",
    "function_names": [
      "apache_server_private_key_encrypted",
      "apache_server_passphrase_protected",
      "apache_server_ssl_passphrase_dialog_builtin",
      "apache_server_ssl_passphrase_dialog_program",
      "apache_server_ssl_passphrase_dialog_exec",
      "apache_server_private_key_cleartext_protected"
    ]
  },
  {
    "id": "7.4",
    "title": "Ensure Weak SSL Protocols Are Disabled",
    "assessment": "Scored",
    "description": "The Apache SSLProtocol directive specifies the SSL and TLS protocols allowed. Both the SSLv2 and the SSLv3 protocols should be disabled in this directive because they are outdated and vulnerable to information disclosure. Only TLS protocols should be enabled.",
    "rationale": "The SSLv2 and SSLv3 protocols are flawed and shouldn't be used, as they are subject to man-in-the-middle attacks and other cryptographic attacks. The TLSv1 protocols should be used instead, and the newer TLS protocols are preferred.",
    "audit": "Perform the following to determine if the recommended state is implemented: Verify the SSLProtocol directive is present in the Apache server level configuration and every virtual host that is SSL enabled. For each directive, verify that either: • a minus -SSLv2 and a minus -SSLv3 are included • an explicit list of only TLS protocols without any plus (+) or minus (-) symbols",
    "remediation": "Perform the following to implement the recommended state: Search the Apache configuration files for the SSLProtocol directive. Add the directive if not present or change the value to match one of the following values. The first setting TLS1.2 is preferred when it is acceptable to also disable the TLSv1.0 and TLSv1.1 protocols. See the level 2 recommendation \"Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled\" for details. SSLProtocol TLS1.2 SSLProtocol TLSv1  136 | P a g e Default Value: SSLProtocol all -SSLv2 References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslprotocol 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM-001%29 3. https://www.us-cert.gov/ncas/alerts/TA14-290A 4. https://www.openssl.org/~bodo/ssl-poodle.pdf",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslprotocol 2. https://www.owasp.org/index.php/Testing_for_SSL-TLS_%28OWASP-CM-001%29 3. https://www.us-cert.gov/ncas/alerts/TA14-290A 4. https://www.openssl.org/~bodo/ssl-poodle.pdf",
    "function_names": [
      "apache_ssl_protocol_weak_disabled",
      "apache_ssl_protocol_tls_only_enabled",
      "apache_ssl_protocol_sslv2_disabled",
      "apache_ssl_protocol_sslv3_disabled",
      "apache_ssl_protocol_secure_protocols_enabled"
    ]
  },
  {
    "id": "7.5",
    "title": "Ensure Weak SSL/TLS Ciphers Are Disabled",
    "assessment": "Scored",
    "description": "Disable weak SSL ciphers using the SSLCipherSuite and SSLHonorCipherOrder directives. The SSLCipherSuite directive specifies which ciphers are allowed in the negotiation with the client. The SSLHonorCipherOrder directive causes the server's preferred ciphers to be used instead of the clients' specified preferences.",
    "rationale": "The SSL/TLS protocols support a large number of encryption ciphers, including many weak ciphers that are subject to man-in-the middle attacks and information disclosure. Some implementations even support the NULL cipher, which allows a TLS connection without any encryption! Therefore, it is critical to ensure the configuration only allows strong ciphers greater than or equal to 128 bit to be negotiated with the client. Stronger 256-bit ciphers should be allowed and preferred. In addition, enabling SSLHonorCipherOrder further protects the client from man-in-the-middle downgrade attacks by ensuring the server's preferred ciphers will be used rather than the clients' preferences. In addition, the RC4 stream ciphers should be disabled, even though they are widely used and have been recommended in previous Apache benchmarks as a means of mitigating attacks based on CBC cipher vulnerabilities. The RC4 ciphers have known cryptographic weaknesses and are no longer recommended. The IETF has published the RFC 7465 standard[4] that would disallow RC4 negotiation for all TLS versions. While the document is somewhat new (Feb 2015), it is expected the RC4 cipher suites will begin to disappear from options in TLS deployments. In the meantime, it is important to ensure that RC4- based cipher suites are disabled in the configuration.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: The SSL protocols and ciphers supported can be easily tested by connecting to a running web server with an up-to-date version of the sslscan tool. The tool is available on Kali Linux https://www.kali.org/ or via github https://github.com/rbsec/sslscan. The tool will color highlight the following weak ciphers:  138 | P a g e • Red Background NULL cipher (no encryption) • Red Broken cipher (<= 40 bit), broken protocol (SSLv2 or SSLv3), or broken certificate signing algorithm (MD5) • Yellow Weak cipher (<= 56 bit or RC4) or weak certificate signing algorithm (SHA-1) • Purple Anonymous cipher (ADH or AECDH) Alternatively, the Qualys SSL Labs has a website that may be used for testing external servers https://www.ssllabs.com/. Alternatively Verify the SSLCipherSuite directive is present and has the following values to disable weak ciphers in the Apache server level configuration and every virtual host that is SSL/TLS enabled. SSLHonorCipherOrder On SSLCipherSuite ALL:!EXP:!NULL:!LOW:!SSLv2:!RC4:!aNULL",
    "remediation": "Perform the following to implement the recommended state: Ensure the SSLCipherSuite includes all of the following: !NULL:!SSLv2:!RC4:!aNULL values. For example add or modify the following line in the Apache server level configuration and every virtual host that is TLS enabled: SSLHonorCipherOrder On SSLCipherSuite ALL:!EXP:!NULL:!LOW:!SSLv2:!RC4:!aNULL It is not recommended to add !SSLv3 to the directive even if the SSLv3 protocol is not in use. Doing so disables ALL of the ciphers that may used with SSLv3, which includes the same ciphers used with the TLS protocols. The !aNULL will disable both the ADH and AECDH ciphers, so the !ADH is not required. IMPORTANT NOTE: The above SSLCipherSuite value disables only the weak ciphers but allows medium strength and other ciphers which should also be disabled. Refer to the remaining TLS benchmark recommendations for stronger cipher suite values. The following cipher suite value will meet all of the level 1 and level 2 benchmark recommendations. As always, testing prior to production use is highly recommended. SSLHonorCipherOrder On SSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA Default Value: The following are the default values: SSLCipherSuite default depends on OpenSSL version. SSLHonorCipherOrder Off  139 | P a g e References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslciphersuite 2. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslhonorcipherorder 3. https://github.com/rbsec/sslscan 4. https://tools.ietf.org/html/rfc7465 5. https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is- broken-now-what",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslciphersuite 2. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslhonorcipherorder 3. https://github.com/rbsec/sslscan 4. https://tools.ietf.org/html/rfc7465 5. https://community.qualys.com/blogs/securitylabs/2013/03/19/rc4-in-tls-is- broken-now-what",
    "function_names": [
      "cloud_cdn_ssl_cipher_suite_strong_only",
      "cloud_cdn_ssl_honor_cipher_order_enabled",
      "cloud_cdn_weak_ssl_ciphers_disabled",
      "cloud_cdn_ssl_tls_strong_ciphers_only",
      "cloud_cdn_ssl_cipher_order_server_preferred"
    ]
  },
  {
    "id": "7.6",
    "title": "Ensure Insecure SSL Renegotiation Is Not Enabled",
    "assessment": "Scored",
    "description": "A man-in-the-middle renegotiation attack was discovered in SSLv3 and TLSv1 in Nov 2009 CVE-2009-3555. http://www.phonefactor.com/sslgap/ssl-tls-authentication-patches A fix was approved as an Internet Standard as RFC 574, Feb 2010. The workaround which removes the renegotiation is available from OpenSSL as of version 0.9.8l and newer versions. For details: http://www.openssl.org/news/secadv_20091111.txt The SSLInsecureRenegotiation directive was added in Apache 2.2.15 for web servers linked with OpenSSL version 0.9.8m or later, to allow the insecure renegotiation to provide backward compatibility to clients with the older unpatched SSL implementations. While providing backward compatibility, enabling the SSLInsecureRenegotiation directive also leaves the server vulnerable to man-in-the-middle renegotiation attack CVE-2009-3555. Therefore, the SSLInsecureRenegotiation directive should not be enabled.",
    "rationale": "The seriousness and ramification of this attack warrants that servers and clients be upgraded to support the improved SSL/TLS protocols. Therefore, the recommendation is to not enable the insecure renegotiation.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Search the Apache configuration files for the SSLInsecureRenegotiation directive and verify that the directive is either not present or has a value of off.",
    "remediation": "Perform the following to implement the recommended state: Search the Apache configuration files for the SSLInsecureRenegotiation directive. If the directive is present, modify the value to be off. If the directive is not present, no action is required. SSLInsecureRenegotiation off  141 | P a g e Default Value: SSLInsecureRenegotiation off References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslinsecurerenegotiation 2. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2009-3555",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslinsecurerenegotiation 2. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CAN-2009-3555",
    "function_names": [
      "compute_load_balancer_ssl_renegotiation_disabled",
      "compute_ssl_certificate_secure_renegotiation_enabled",
      "cloud_cdn_ssl_renegotiation_protected",
      "compute_web_server_insecure_renegotiation_disabled",
      "compute_ssl_config_renegotiation_secure",
      "cloud_load_balancer_ssl_renegotiation_safe",
      "compute_ssl_policy_renegotiation_compliant",
      "cloud_web_server_ssl_renegotiation_disabled"
    ]
  },
  {
    "id": "7.7",
    "title": "Ensure SSL Compression is Not Enabled",
    "assessment": "Scored",
    "description": "The SSLCompression directive controls whether SSL compression is used by Apache when serving content over HTTPS. It is recommended that the SSLCompression directive be set to off.",
    "rationale": "If SSL compression is enabled, HTTPS communication between the client and the server may be at increased risk to the CRIME attack. The CRIME attack increases a malicious actor's ability to derive the value of a session cookie, which commonly contains an authenticator. If the authenticator in a session cookie is derived, it can be used to impersonate the account associated with the authenticator.",
    "audit": "For Apache 2.2.26 and later, perform the following steps to determine if the recommended state is implemented: 1. Search the Apache configuration files for the SSLCompression directive. 2. Verify that the directive either does not exist or exists and is set to off. For Apache 2.2.24 and 2.2.25, perform the following steps to determine if the recommended state is implemented: 1. Search the Apache configuration files for the SSLCompression directive. 2. Verify that the directive exists and is set to off. (The default value is on.) Apache versions prior to 2.2.24 do not support disabling SSL compression and are not compliant.",
    "remediation": "Perform the following to implement the recommended state: 1. Verify the Apache version is 2.2.24 or later, with the command httpd -v.  143 | P a g e 2. Search the Apache configuration files for the SSLCompression directive. 3. Add or update the directive to have a value of off. Default Value: The SSLCompression directive was available in httpd 2.2.24 and later, if using OpenSSL 0.9.8 or later; virtual host scope is available if using OpenSSL 1.0.0 or later. The default used to be ON in versions 2.2.24 to 2.2.25 and is OFF for 2.2.26 and later. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslcompression 2. https://en.wikipedia.org/wiki/CRIME_(security_exploit)",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslcompression 2. https://en.wikipedia.org/wiki/CRIME_(security_exploit)",
    "function_names": [
      "apache_ssl_compression_disabled",
      "apache_ssl_compression_off",
      "apache_https_compression_disabled",
      "apache_tls_compression_disabled",
      "web_server_ssl_compression_disabled",
      "web_server_https_compression_disabled",
      "web_server_tls_compression_disabled",
      "ssl_config_compression_disabled",
      "https_config_compression_disabled",
      "tls_config_compression_disabled"
    ]
  },
  {
    "id": "7.8",
    "title": "Ensure Medium Strength SSL/TLS Ciphers Are Disabled",
    "assessment": "Scored",
    "description": "The SSLCipherSuite directive specifies which ciphers are allowed in the negotiation with the client. Disable the medium strength ciphers such as Triple DES (3DES) and IDEA by adding !3DES and !IDEA in the SSLCipherSuite directive.",
    "rationale": "Although Triple DES was a trusted standard in the past, several vulnerabilities for it have been published over the years and it is no longer considered secure. A somewhat recent attack against 3DES in CBC mode, nicknamed the SWEET32 attack, was published in 2016 as CVE-2016-2183. The IDEA cipher in CBC mode is also vulnerable to the SWEET32 attack.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: • The SSL protocols and ciphers supported can be easily tested by connecting to a running web server with an up-to-date version of the sslscan tool. The tool is available on Kali Linux https://www.kali.org/ or via github https://github.com/rbsec/sslscan Use the command below to detect 3DES and IDEA ciphers. No output means the ciphers are not allowed. $ sslscan --no-colour www.lugor.org | egrep 'IDEA|DES' Accepted  TLSv1.2  112 bits  ECDHE-RSA-DES-CBC3-SHA        Curve P-256 DHE 256 Accepted  TLSv1.2  112 bits  EDH-RSA-DES-CBC3-SHA          DHE 2048 bits Accepted  TLSv1.2  112 bits  DES-CBC3-SHA Accepted  TLSv1.1  112 bits  ECDHE-RSA-DES-CBC3-SHA        Curve P-256 DHE 256 Accepted  TLSv1.1  112 bits  EDH-RSA-DES-CBC3-SHA          DHE 2048 bits Accepted  TLSv1.1  112 bits  DES-CBC3-SHA • Alternatively, the Qualys SSL Labs has a website that may be used for testing external servers https://www.ssllabs.com/.  145 | P a g e • Alternatively, verify the SSLCipherSuite directive includes !3DES and !IDEA to disable the ciphers in the Apache server level configuration and every virtual host that is SSL/TLS enabled.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the following lines in the Apache server level configuration and every virtual host that is SSL/TLS enabled: SSLHonorCipherOrder On SSLCipherSuite ALL:!EXP:!NULL:!LOW:!SSLv2:!RC4:!aNULL:!3DES:!IDEA IMPORTANT NOTE: The above SSLCipherSuite value disables only the weak and medium ciphers but allows other ciphers which should also be disabled. Refer to the remaining TLS benchmark recommendations for more stronger cipher suite values. The following cipher suite value will meet all of the level 1 and level 2 benchmark recommendations. As always, testing prior to production use is highly recommended. SSLHonorCipherOrder On SSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA Default Value: The SSLCipherSuite default depends on the OpenSSL version. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslciphersuite 2. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslhonorcipherorder 3. https://sweet32.info/ 4. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2183 5. https://github.com/rbsec/sslscan",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslciphersuite 2. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html#sslhonorcipherorder 3. https://sweet32.info/ 4. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2183 5. https://github.com/rbsec/sslscan",
    "function_names": [
      "cloud_cdn_ssl_cipher_suite_medium_disabled",
      "cloud_cdn_ssl_cipher_suite_3des_disabled",
      "cloud_cdn_ssl_cipher_suite_idea_disabled",
      "cloud_cdn_ssl_cipher_suite_weak_protocols_disabled",
      "cloud_cdn_ssl_cipher_suite_strong_only_enabled"
    ]
  },
  {
    "id": "7.9",
    "title": "Ensure All Web Content is Accessed via HTTPS",
    "assessment": "Scored",
    "description": "All of the website content should be served via HTTPS rather than HTTP. A redirect from the HTTP website to the HTTPS content is often useful and is recommended, but all significant content should be accessed via HTTPS so that it is authenticated and encrypted.",
    "rationale": "The usage of clear text HTTP prevents the client browser from authenticating the connection and ensuring the integrity of the website information. Without the HTTPS authentication, a client may be subjected to a variety of man-in-the-middle and spoofing attacks which would cause them to receive modified web content which could harm the organization’s reputation. Through DNS attacks or malicious redirects, the client could arrive at a malicious website instead of the intended website. The malicious website could deliver malware, request credentials, or deliver false information.",
    "audit": "Perform the following to determine if the recommended state is implemented: • Gather the list of listening IP addresses from the Apache configuration files. The commands below may be used to extract the relevant IP addresses from the configuration files. The CONF_DIRS variable needs to be set to the list of directories that contain all of the Apache configuration files. ## Replace the following directory list with the appropriate list. CONF_DIRS=”/etc/httpd/conf /etc/httpd/conf.d /etc/httpd/conf_dir2 . . . “ CONFS=$(find  $CONF_DIRS -type f -name '*.conf' ) ## Search for Listen directives that are not port :443 or https IPS=$(egrep -ih '^\\s*Listen ' $CONFS | egrep -iv '(:443\\b)|https' | cut -d' ' -f2) • Gather the list of virtual host names from the Apache configuration files. The commands below can be used to extract the relevant virtual host names from the configuration files listed in $CONFS. The resulting list will include all virtual hosts not running on port :443. Although some listed virtual hosts may be TLS enabled, but on  148 | P a g e a non-standard port. Such websites will return an error rather than HTML content, as shown in the final steps. ## Get host names and ports of all of the virtual hosts VHOSTS=$(egrep -iho '^\\s*<VirtualHost .*>' $CONFS | egrep -io '\\s+[A- Z:.0-9]+>$' | \\ tr -d ' >') • For each of the IP address and virtual hosts name, prefix the IP address or host name with the http:// protocol, and add the final slash as well. URLS=$(for h in $LIPADDR $VHOSTS ;  do echo \"http://$h/\"; done) • Check to ensure each URL does not deliver significate web content via the HTTP protocol. The URL’s may be manually entered in a browser for testing, or may be scripted with a command line web client such as curl, as shown below. ## For each of the URL’s test with curl, and truncate the output to 300 characters for u in $URLS ; do echo -e \"\\n\\n\\n=== $u ===\"; curl -fSs $u | head -c 300 ; done Any URLs which return significant HTML document content, rather than a redirect or an error are not compliant. Two compliant examples are shown; the first one has a redirect. === http://www.cisecurity.org/ === <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"> <html><head> <title>301 Moved Permanently</title> </head><body> <h1>Moved Permanently</h1> <p>The document has moved <a href=\"https://www.cisecurity.org/\">here</a>.</p> </body></html> This compliant example below returns an error, due to using HTTP on a HTTPS website. === http://www.example.com:4430/ === curl: (22) The requested URL returned error: 400 Bad Request",
    "remediation": "Perform the following to implement the recommended state: Move the web content to a TLS enabled website, and add an HTTP Redirect directive to the Apache configuration file to redirect to the TLS enabled website similar to the example shown. Redirect permanent / https://www.cisecurity.org/  149 | P a g e Default Value: The following are the default values: TLS is not enabled by default. References: 1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_ssl.html"
  },
  {
    "id": "7.10",
    "title": "Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled",
    "assessment": "Scored",
    "description": "The TLSv1.0 and TLSv1.1 protocols should be disabled via the SSLProtocol directive. The TLSv1.0 protocol is vulnerable to information disclosure and both protocols lack support for modern cryptographic algorithms including authenticated encryption. The only SSL/TLS protocols that should be allowed is TLSv1.2 along with the new TLSv1.3 protocol when it is supported.",
    "rationale": "The TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity. All major up-to-date browsers support TLSv1.2, and most recent versions of FireFox and Chrome support the newer TLSv1.3 protocol, since 2017. The NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Search the Apache configuration files for the SSLProtocol directive and ensure it matches one of the values below. SSLProtocol TLSv1.2 TLSv1.3 SSLProtocol TLSv1.2",
    "remediation": "Perform the following to implement the recommended state:  151 | P a g e 1. Check if the TLSv1.3 protocol is supported by the Apache server by either checking that the version of OpenSSL is 1.1.1 or later or place the TLSv1.3 value in the SSLProtocol string of a configuration file and check the syntax with the httpd -t command before using the file in production. Two examples below are shown of servers that do support the TLSv1.3 protocol. $ openssl version OpenSSL 1.1.1a  20 Nov 2018 ### _(Add TLSv1.3 to the SSLProtocol directive)_ # httpd -t Syntax OK 2. Search the Apache configuration files for the SSLProtocol directive; add the directive, if not present, or change the value to TLSv1.2 or TLSv1.2 TLSv1.3 if the TLSv1.3 protocol is supported. Default Value: SSLProtocol all -SSLv2 References: 1. https://caniuse.com/#search=tls%201.3 2. https://csrc.nist.gov/publications/detail/sp/800-52/rev-2/draft 3. https://en.wikipedia.org/wiki/Authenticated_encryption 4. https://tools.ietf.org/html/draft-ietf-tls-oldversions-deprecate-00 5. https://www.ietf.org/rfc/rfc8446.txt",
    "profile_applicability": "•  Level 2",
    "references": "1. https://caniuse.com/#search=tls%201.3 2. https://csrc.nist.gov/publications/detail/sp/800-52/rev-2/draft 3. https://en.wikipedia.org/wiki/Authenticated_encryption 4. https://tools.ietf.org/html/draft-ietf-tls-oldversions-deprecate-00 5. https://www.ietf.org/rfc/rfc8446.txt",
    "function_names": [
      "cloud_cdn_ssl_protocol_tls1_0_disabled",
      "cloud_cdn_ssl_protocol_tls1_1_disabled",
      "cloud_cdn_ssl_protocol_min_tls_1_2",
      "cloud_cdn_ssl_protocol_tls1_3_supported",
      "cloud_cdn_ssl_protocol_weak_versions_disabled",
      "cloud_cdn_ssl_protocol_secure_versions_enabled",
      "cloud_cdn_ssl_protocol_vulnerable_versions_disabled",
      "cloud_cdn_ssl_protocol_modern_crypto_enabled"
    ]
  },
  {
    "id": "7.11",
    "title": "Ensure HTTP Strict Transport Security Is Enabled",
    "assessment": "Scored",
    "description": "HTTP Strict Transport Security (HSTS) is an optional web server security policy mechanism specified by an HTTP Server header. The HSTS header allows a server declaration that only HTTPS communication should be used rather than clear text HTTP communication.",
    "rationale": "Usage of HTTP Strict Transport Security (HSTS) helps protect HSTS-compliant browsers and other agents from HTTP downgrade attacks. Downgrade attacks include a variety of man-in-the-middle attacks which leave the web communication vulnerable to disclosure and modification by forcing the usage of HTTP rather than HTTPS communication. The sslstrip attack tool by Moxie Marlinspike released in 2009 is one such attack, which works when a server allows both HTTP and HTTPS communication. However, a man-in- the-middle HTTP-to-HTTPS proxy would be effective in cases where the server required HTTPS but did not publish an HSTS policy to the browser. This attack would also be effective on browsers which were not compliant with HSTS. All current up-to-date browsers support HSTS. The HSTS header specifies a length of time in seconds that the browser/user agent should access the server only using HTTPS. The header may also specify if all subdomains should also be included in the same policy. Once a compliant browser receives the HSTS header, it will not allow access to the server via HTTP. Therefore, it is important you ensure there is no portion of the web site or web application that requires HTTP prior to enabling the HSTS protocol. If all subdomains are to be included via the includeSubDomains option, carefully consider all various hostnames, web applications, and third-party services used to include any DNS CNAME values that may be impacted. An overly broad includeSubDomains policy will disable access to HTTP websites for all websites with the same domain name. Also consider that the access will be disabled for the number of seconds given in the max-age value, so in the event a mistake is made, a large value, such as a year, could create significant support issues. An optional flag of preload may be added if the website name is to be submitted to be preloaded in Chrome, Firefox and Safari browsers. See https://hstspreload.appspot.com/ for details.  153 | P a g e",
    "audit": "Perform either of the following steps to determine if the recommended state is implemented. At the Apache server level configuration and for every virtual host that is SSL enabled, verify there is a Header directive present that sets the Strict-Transport-Security header with a max-age value of at least 480 seconds or more (8 minutes or more). For example: Header always set Strict-Transport-Security \"max-age=600\" As an alternative, the configuration may be validated by connecting to the HTTPS server and verifying the presence of the header, such as the openssl s_client command shown below: openssl s_client -connect www.example.com:443 GET / HTTP1.1. Host:www.example.com HTTP/1.1 200 OK Date: Mon, 08 Dec 2014 18:28:29 GMT Server: Apache X-Frame-Options: NONE Strict-Transport-Security: max-age=600 Last-Modified: Mon, 19 Jun 2006 14:47:16 GMT ETag: \"152-41694d7a92500\" Accept-Ranges: bytes Content-Length: 438 Connection: close Content-Type: text/html",
    "remediation": "Perform the following to implement the recommended state: Add a Header directive as shown below in the Apache server level configuration and every virtual host that is SSL enabled. The includeSubDomains and preload flags may be included in the header, but are not required. Header always set Strict-Transport-Security \"max-age=600”; includeSubDomains; preload - or - Header always set Strict-Transport-Security \"max-age=600” Default Value: The Strict Transport Security header is not present by default.  154 | P a g e References: 1. https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security 2. https://www.owasp.org/index.php/HTTP_Strict_Transport_Security 3. https://moxie.org/software/sslstrip/ 4. https://developer.mozilla.org/en- US/docs/Web/Security/HTTP_strict_transport_security 5. https://hstspreload.appspot.com/",
    "profile_applicability": "•  Level 2",
    "references": "1. https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security 2. https://www.owasp.org/index.php/HTTP_Strict_Transport_Security 3. https://moxie.org/software/sslstrip/ 4. https://developer.mozilla.org/en- US/docs/Web/Security/HTTP_strict_transport_security 5. https://hstspreload.appspot.com/",
    "function_names": [
      "cloud_cdn_distribution_hsts_enabled",
      "cloud_cdn_domain_hsts_enabled",
      "cloud_cdn_response_header_hsts_enabled",
      "cloud_cdn_security_policy_hsts_enabled",
      "cloud_cdn_cache_behavior_hsts_enabled",
      "cloud_cdn_viewer_policy_hsts_enabled",
      "cloud_cdn_origin_policy_hsts_enabled",
      "cloud_cdn_custom_header_hsts_enabled",
      "cloud_cdn_default_policy_hsts_enabled",
      "cloud_cdn_edge_policy_hsts_enabled"
    ]
  },
  {
    "id": "7.12",
    "title": "Ensure Only Cipher Suites That Provide Forward Secrecy Are Enabled",
    "assessment": "Scored",
    "description": "In cryptography, forward secrecy (FS), which is also known as perfect forward secrecy (PFS), is a feature of specific key exchange protocols that give assurance that your session keys will not be compromised even if the private key of the server is compromised. Protocols such as RSA do not provide the forward secrecy, while the protocols ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) and the DHE (Diffie-Hellman Ephemeral) will provide forward secrecy. The ECDHE is the stronger protocol and should be preferred, while the DHE may be allowed for greater compatibility with older clients. The TLS ciphers should be configured to require either the ECDHE or the DHE ephemeral key exchange, while not allowing other cipher suites.",
    "rationale": "During the TLS handshake, after the initial client & server Hello, there is a pre-master secret generated, which is used to generate the master secret, and in turn generates the session key. When using protocols that do not provide forward secrecy, such as RSA, the pre-master secret is encrypted by the client with the server’s public key and sent over the network. However, with protocols such as ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) the pre-master secret is not sent over the wire, even in encrypted format. The key exchange arrives at the shared secret in the clear using ephemeral keys that are not stored or used again. With FS, each session has a unique key exchange, so that future sessions are protected.",
    "audit": "Perform one of the following to determine if the recommended state is implemented: • The SSL protocols and ciphers supported can be easily tested by connecting to a running web server with an up-to-date version of the sslscan tool. The tool is available on Kali Linux https://www.kali.org/, or via github https://github.com/rbsec/sslscan. Usage of Kali Linux for sslscan is highly recommended rather than other Linux distributions as it is important that the scan make use of an SSL library that still enables the old protocols. Current Linux versions often wisely eliminate support for older protocols such as SSLv3, and  156 | P a g e therefore may be unable to properly detect the availability of older protocols on a remote system. A statically compiled sslscan with its own openssl library that supports the older protocols may be used as well. Check the output of sslscan, and confirm that all accepted ciphers begin with either 'ECDHE-' or 'DHE-'. Any ciphers not starting with one of the ephemeral Diffie- Helman algorithms, is not implementing the recommended state. The sslscan command below includes regular expressions which will extract any ciphers which are not included in the recommendation. No output means that only the FS ciphers are allowed. $ sslscan --no-colour --no-failed www.example.com | egrep '(^Accepted)|(^Preferred)' | egrep -v '( ECDHE-)|( DHE-)' • Alternatively, Qualys SSL Labs has a website that is very thorough and is commonly used for testing external servers. The report will show the cipher suites allowed along with many other details. https://www.ssllabs.com/ssltest/ The recommended cipher suites will start with TLS_ECDHE_ or TLS_DHE_ and have the initials FS at the end for forward secrecy. • Alternatively find the specified values for the SSLCipherSuite directive in the Apache server level configuration and every virtual host that is SSL/TLS enabled. Then use the openssl command on the local system to verify the specified SSLCipherSuite directive only allows cipher suites that begin with the ECDHE- or DHE- algorithms. For example: $ openssl ciphers -v 'EECDH:EDH:!NULL:!SSLv2:!RC4:!3DES:!IDEA:!aNULL:!SHA1' ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(256) Mac=AEAD ECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(256) Mac=AEAD ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(256) Mac=SHA384 ECDHE-ECDSA-AES256-SHA384 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(256) Mac=SHA384 ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AESGCM(128) Mac=AEAD ECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AESGCM(128) Mac=AEAD ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=RSA  Enc=AES(128) Mac=SHA256 ECDHE-ECDSA-AES128-SHA256 TLSv1.2 Kx=ECDH     Au=ECDSA Enc=AES(128) Mac=SHA256 DHE-DSS-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=DSS  Enc=AESGCM(256) Mac=AEAD DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(256) Mac=AEAD DHE-RSA-AES256-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(256) Mac=SHA256  157 | P a g e DHE-DSS-AES256-SHA256   TLSv1.2 Kx=DH       Au=DSS  Enc=AES(256) Mac=SHA256 DHE-DSS-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=DSS  Enc=AESGCM(128) Mac=AEAD DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH       Au=RSA  Enc=AESGCM(128) Mac=AEAD DHE-RSA-AES128-SHA256   TLSv1.2 Kx=DH       Au=RSA  Enc=AES(128) Mac=SHA256 DHE-DSS-AES128-SHA256   TLSv1.2 Kx=DH       Au=DSS  Enc=AES(128) Mac=SHA256",
    "remediation": "Perform one of the following to implement the recommended state: • Add or modify the following line in the Apache server level configuration and every virtual host that is SSL/TLS enabled: SSLCipherSuite EECDH:EDH:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA • The more recent versions of openssl (such as 1.0.2 and newer) will support the usage of ECDHE as a synonym for EECDH and DHE as a synonym for EDH in the cipher specification. The usage of ECDHE and DHE are preferred so that the specification matches the expected output. So, the cipher specification could be: SSLCipherSuite ECDHE:DHE:!NULL:!SSLv2:!RC4:!aNULL:!3DES:!IDEA Default Value: The default value for SSLCipherSuite depends on OpenSSL library version used. References: 1. https://en.wikipedia.org/wiki/Forward_secrecy 2. https://scotthelme.co.uk/perfect-forward-secrecy/ 3. https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet",
    "profile_applicability": "•  Level 2",
    "references": "1. https://en.wikipedia.org/wiki/Forward_secrecy 2. https://scotthelme.co.uk/perfect-forward-secrecy/ 3. https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet",
    "function_names": [
      "cloud_cdn_distribution_forward_secrecy_enabled",
      "cloud_cdn_distribution_ecdhe_ciphers_required",
      "cloud_cdn_distribution_dhe_ciphers_required",
      "cloud_cdn_distribution_rsa_ciphers_disabled",
      "cloud_cdn_distribution_tls_forward_secrecy_compliant",
      "compute_load_balancer_forward_secrecy_enabled",
      "compute_load_balancer_ecdhe_ciphers_required",
      "compute_load_balancer_dhe_ciphers_required",
      "compute_load_balancer_rsa_ciphers_disabled",
      "compute_load_balancer_tls_forward_secrecy_compliant"
    ]
  },
  {
    "id": "8.1",
    "title": "Ensure ServerTokens is Set to 'Prod' or 'ProductOnly'",
    "assessment": "Scored",
    "description": "Configure the Apache ServerTokens directive to provide minimal information by setting the value to Prod or ProductOnly. The only version information given in the server HTTP response header will be Apache rather than details on modules and versions installed.",
    "rationale": "Information is power, and identifying web server details greatly increases the efficiency of any attack, as security vulnerabilities are extremely dependent upon specific software versions and configurations. Excessive probing and requests may cause too much \"noise\" being generated and may tip off an administrator. If an attacker can accurately target exploits, the chances of successful compromise prior to detection increase dramatically. Script kiddies are constantly scanning the Internet and documenting the version information openly provided by web servers. The purpose of this scanning is to accumulate a database of software installed on those hosts, which can then be used when new vulnerabilities are released.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify the ServerTokens directive is present in the Apache configuration and has a value of Prod or ProductOnly.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the ServerTokens directive as shown below to have the value of Prod or ProductOnly:  160 | P a g e ServerTokens Prod Default Value: The default value is Full, which provides the most detailed information. ServerTokens Full References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#servertokens",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#servertokens",
    "function_names": [
      "apache_server_servertokens_prod",
      "apache_server_servertokens_product_only",
      "apache_server_servertokens_minimal_info",
      "apache_server_response_header_restricted",
      "apache_server_version_disclosure_disabled"
    ]
  },
  {
    "id": "8.2",
    "title": "Ensure ServerSignature Is Not Enabled",
    "assessment": "Scored",
    "description": "Disable the server signatures, which is the generation of a signature line as a trailing footer at the bottom of server-generated documents such as error pages.",
    "rationale": "Server signatures are helpful when the server is acting as a proxy because they help the user distinguish errors from the proxy rather than the destination server. However, in this context there is no need for the additional information.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify the ServerSignature directive is either NOT present in the Apache configuration or is present and has a value of Off.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the ServerSignature directive as shown below to have the value of Off: ServerSignature Off Default Value: Off References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#serversignature  162 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#serversignature  162 | P a g e",
    "function_names": [
      "apache_server_signature_disabled",
      "web_server_signature_disabled",
      "http_server_signature_disabled",
      "apache_response_header_removed",
      "web_server_footer_disabled",
      "http_response_signature_disabled",
      "apache_server_tokens_disabled",
      "web_server_version_hidden"
    ]
  },
  {
    "id": "8.3",
    "title": "Ensure All Default Apache Content Is Removed",
    "assessment": "Scored",
    "description": "In previous recommendations, we have removed default content such as the Apache manuals and default CGI programs. However, if you want to further restrict information leakage about the web server, it is important that default content such as icons are not left on the web server.",
    "rationale": "To identify the type of web servers and versions software installed, it is common for attackers to scan for icons or special content specific to the server type and version. A simple request like http://example.com/icons/apache_pb2.png may tell the attacker that the server is Apache 2.2. Many icons are used primarily for auto indexing, which is recommended to be disabled.",
    "audit": "Perform the following step to determine if the recommended state is implemented: Verify there is no alias or directory access to the apache icons directory in any of the Apache configuration files.",
    "remediation": "Perform either of the following to implement the recommended state: 1. The default source build places the auto-index and icon configurations in the extra/httpd-autoindex.conf file, so it can be disabled by leaving the include line commented out in the main httpd.conf file, as shown below. # Fancy directory listings #Include conf/extra/httpd-autoindex.conf 2. Alternatively, the icon alias directive and the directory access control configuration can be commented out as shown: # We include the /icons/ alias for FancyIndexed directory listings. If # you do not use FancyIndexing, you may comment this out. #  164 | P a g e #Alias /icons/ \"/var/www/icons/\" #<Directory \"/var/www/icons\"> #     Options Indexes MultiViews FollowSymLinks #     AllowOverride None #     Order allow,deny #     Allow from all #</Directory> Default Value: The default source build does not enable access to the Apache icons.",
    "profile_applicability": "•  Level 2",
    "function_names": [
      "apache_server_default_content_removed",
      "apache_server_default_icons_removed",
      "apache_server_information_leakage_prevented",
      "apache_server_default_files_removed",
      "apache_server_unnecessary_content_removed",
      "apache_server_default_documentation_removed",
      "apache_server_default_cgi_removed",
      "apache_server_default_manuals_removed"
    ]
  },
  {
    "id": "8.4",
    "title": "Ensure ETag Response Header Fields Do Not Include Inodes",
    "assessment": "Scored",
    "description": "The FileETag directive configures the file attributes that are used to create the ETag (entity tag) response header field when the document is based on a static file. The ETag value is used in cache management to save network bandwidth. The value returned may be based on combinations of the file inode, the modification time, and the file size.",
    "rationale": "When the FileETag is configured to include the file inode number, a remote attacker may be able to discern the inode number from returned values. The inode is considered sensitive information, as it could be useful in assisting in other attacks.",
    "audit": "Perform the following step to determine if the recommended state is implemented: 1. For the server configurations, verify that the FileETag directive is present, and the configured value does not contain any of the values all, inode, or +inode. 2. For all virtual host and directory configurations, verify that either o The FileETag directive is not present, or o The configured FileETag value does not contain any of the values all, inode, or +inode.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the FileETag directive in the server and each virtual host configuration to have the value None or MTime Size. Default Value: INode MTime Size References: 1. http://httpd.apache.org/docs/2.2/mod/core.html#FileETag 2. https://nvd.nist.gov/vuln/detail/CVE-2003-1418  166 | P a g e",
    "profile_applicability": "•  Level 2",
    "references": "1. http://httpd.apache.org/docs/2.2/mod/core.html#FileETag 2. https://nvd.nist.gov/vuln/detail/CVE-2003-1418  166 | P a g e",
    "function_names": [
      "cloud_cdn_file_etag_no_inode",
      "cloud_cdn_response_header_etag_safe",
      "cloud_cdn_static_file_etag_secure",
      "cloud_cdn_etag_inode_disabled",
      "cloud_cdn_file_etag_no_sensitive_data"
    ]
  },
  {
    "id": "9.1",
    "title": "Ensure the TimeOut Is Set Properly",
    "assessment": "Scored",
    "description": "The TimeOut directive controls the maximum time in seconds that Apache HTTP server will wait for an Input/Output call to complete. It is recommended that the TimeOut directive be set to 10 or less.",
    "rationale": "One common technique for DoS is to initiate many connections to the server. By decreasing the timeout for old connections, the server can free resources more quickly and be more responsive. By making the server more efficient, it will be more resilient to DoS conditions. Important Notice : There is a slow form of DoS attack not adequately mitigated by these controls, such as the Slow Loris DoS attack of June 2009 http://ha.ckers.org/slowloris/. Upgrading to Apache 2.4 is recommended.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the Timeout directive is specified in the Apache configuration files to have a value of 10 seconds or less.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the Timeout directive in the Apache configuration files to have a value of 10 seconds or less.  168 | P a g e Timeout 10 Default Value: Timeout 300 References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#timeout",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#timeout",
    "function_names": [
      "apache_http_server_timeout_set_properly",
      "apache_http_server_timeout_less_than_10s",
      "apache_http_server_io_timeout_configured",
      "apache_http_server_timeout_within_recommended_limit"
    ]
  },
  {
    "id": "9.2",
    "title": "Ensure KeepAlive Is Enabled",
    "assessment": "Scored",
    "description": "The KeepAlive directive controls whether Apache will reuse the same TCP connection per client to process subsequent HTTP requests from that client. It is recommended that the KeepAlive directive be set to On.",
    "rationale": "Allowing per-client reuse of TCP sockets reduces the amount of system and network resources required to serve requests. This efficiency gain may improve a server's resiliency to DoS attacks.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the KeepAlive directive in the Apache configuration either has a value of On or is not present. If the directive is not present, the default value is On.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the KeepAlive directive in the Apache configuration to have a value of On. KeepAlive On Default Value: KeepAlive On References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#keepalive  170 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#keepalive  170 | P a g e",
    "function_names": [
      "apache_server_keepalive_enabled",
      "apache_http_keepalive_enabled",
      "web_server_keepalive_enabled",
      "apache_connection_keepalive_enabled",
      "apache_performance_keepalive_enabled"
    ]
  },
  {
    "id": "9.3",
    "title": "Ensure MaxKeepAliveRequests Is Set Properly",
    "assessment": "Scored",
    "description": "The MaxKeepAliveRequests directive limits the number of requests allowed per connection when KeepAlive is on. If it is set to 0, unlimited requests will be allowed. It is recommended that the MaxKeepAliveRequests directive be set to 100 or greater.",
    "rationale": "Limiting the number of requests per connection may improve a server's resiliency to DoS attacks.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the MaxKeepAliveRequests directive in the Apache configuration either has a value of 100 or more or is not present. If the directive is not present, the default value is 100.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the MaxKeepAliveRequests directive in the Apache configuration to have a value of 100 or more. MaxKeepAliveRequests 100 Default Value: MaxKeepAliveRequests 100 References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#maxkeepaliverequests  172 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#maxkeepaliverequests  172 | P a g e",
    "function_names": [
      "cloud_cdn_distribution_max_keep_alive_requests_set",
      "cloud_cdn_distribution_max_keep_alive_requests_min_100",
      "cloud_cdn_distribution_keep_alive_requests_limited",
      "cloud_cdn_distribution_keep_alive_requests_not_unlimited"
    ]
  },
  {
    "id": "9.4",
    "title": "Ensure the KeepAliveTimeout Is Set Properly",
    "assessment": "Scored",
    "description": "The KeepAliveTimeout directive specifies the number of seconds Apache will wait for a subsequent request before closing a connection that is being kept alive.",
    "rationale": "Reducing the number of seconds that Apache HTTP server will keep unused resources allocated will increase the availability of resources to serve other requests. This efficiency gain may improve a server's resiliency to DoS attacks.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the KeepAliveTimeout directive in the Apache configuration either has a value of 15 or less or is not present. If the directive is not present, the default value is 15 seconds.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the KeepAliveTimeout directive in the Apache configuration to have a value of 15 or less. KeepAliveTimeout 15 Default Value: KeepAliveTimeout 15 References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#keepalivetimeout  174 | P a g e",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#keepalivetimeout  174 | P a g e",
    "function_names": [
      "apache_server_keepalive_timeout_configured",
      "apache_server_keepalive_timeout_within_threshold",
      "apache_server_keepalive_timeout_optimized",
      "apache_server_keepalive_timeout_not_disabled",
      "apache_server_keepalive_timeout_secure_value"
    ]
  },
  {
    "id": "9.5",
    "title": "Ensure the Timeout Limits for Request Headers is Set to 40 or Less",
    "assessment": "Scored",
    "description": "The RequestReadTimeout directive allows configuration of timeout limits for client requests. The header portion of the directive provides for an initial timeout value, a maximum timeout, and a minimum rate. The minimum rate specifies that after the initial timeout, the server will wait an additional second for each N bytes received. The recommended setting is to have a maximum timeout of 40 seconds or less. Keep in mind that for SSL/TLS virtual hosts, the time for the TLS handshake must fit within the timeout.",
    "rationale": "Setting a request header timeout is vital for mitigating DoS attacks based on slow requests. The slow request attacks are particularly lethal and relative easy to perform, because they require very little bandwidth and can easily be done through anonymous proxies. These attacks started in June 2009 with the Slow Loris DoS attack, which used a slow GET request, as published by Robert Hansen (RSnake) on his blog http://ha.ckers.org/slowloris/. Later in November 2010 at the OWASP App Sec DC conference, Wong Onn Chee demonstrated a slow POST request attack which was even more effective. For details, see: https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate the Apache configuration files and included configuration files. 2. Locate any RequestReadTimeout directives and verify that they have a maximum header request timeout of 40 seconds or less. 3. If the configuration does not contain any RequestReadTimeout directives and the mod_reqtimeout module is being loaded, then the default value of 40 seconds is compliant with the benchmark recommendation. RequestReadTimeout header=XXX- 40 ,MinRate=XXX  body=XXXXXXXXXX  176 | P a g e",
    "remediation": "Perform the following to implement the recommended state: 1. Load the mod_requesttimeout module in the Apache configuration with the following. LoadModule reqtimeout_module modules/mod_reqtimeout.so 2. Add a RequestReadTimeout directive similar to the one below with the maximum request header timeout value of 40 seconds or less. RequestReadTimeout header=20-40,MinRate=500 body=20,MinRate=500 Default Value: header=20-40,MinRate=500 References: 1. http://ha.ckers.org/slowloris/ 2. https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t 3. https://httpd.apache.org/docs/2.2/mod/mod_reqtimeout.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. http://ha.ckers.org/slowloris/ 2. https://www.owasp.org/index.php/H.....t.....t....p.......p....o....s....t 3. https://httpd.apache.org/docs/2.2/mod/mod_reqtimeout.html",
    "function_names": [
      "cloud_cdn_request_header_timeout_less_than_40",
      "cloud_cdn_request_read_timeout_configured",
      "cloud_cdn_header_timeout_max_40_seconds",
      "cloud_cdn_request_timeout_initial_max_rate_set",
      "cloud_cdn_request_header_timeout_secure_config",
      "cloud_cdn_request_read_timeout_limits_enforced",
      "cloud_cdn_header_timeout_tls_handshake_compliant",
      "cloud_cdn_request_timeout_rate_limits_configured"
    ]
  },
  {
    "id": "9.6",
    "title": "Ensure Timeout Limits for the Request Body Are Set Properly",
    "assessment": "Scored",
    "description": "The RequestReadTimeout directive allows setting timeout values for the body portion of a request. The directive provides for an initial timeout value, a maximum timeout, and a minimum rate. The minimum rate specifies that after the initial timeout, the server will wait an additional second for each N bytes received. The recommended setting is to have a maximum timeout of 20 seconds or less.",
    "rationale": "It is not sufficient to timeout only on the header portion of the request, as the server will still be vulnerable to attacks like the OWASP Slow POST attack, which provide the body of the request very slowly. Therefore, the body portion of the request must have a timeout as well. A timeout of 20 seconds or less is recommended.",
    "audit": "Perform the following to determine if the recommended state is implemented: 1. Locate the Apache configuration files and included configuration files. 2. Locate any RequestReadTimeout directives and verify the configuration has a maximum body request timeout of 20 seconds or less. 3. If the configuration does not contain any RequestReadTimeout directives and the mod_reqtimeout module is being loaded, then the default value of 20 seconds is compliant with the benchmark recommendation. RequestReadTimeout header=XXXXXX body= 20 ,MinRate=XXXXXXXXXX",
    "remediation": "Perform the following to implement the recommended state: 1. Load the mod_requesttimeout module in the Apache configuration with the following. LoadModule reqtimeout_module modules/mod_reqtimeout.so  178 | P a g e 2. Add a RequestReadTimeout directive similar to the one below with the maximum request body timeout value of 20 seconds or less. RequestReadTimeout header=20-40,MinRate=500 body= 20 ,MinRate=500 Default Value: body=20,MinRate=500 References: 1. https://httpd.apache.org/docs/2.2/mod/mod_reqtimeout.html",
    "profile_applicability": "•  Level 1 •  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/mod_reqtimeout.html",
    "function_names": [
      "cloud_cdn_distribution_request_read_timeout_limits",
      "cloud_cdn_distribution_request_body_timeout_configured",
      "cloud_cdn_distribution_request_timeout_max_20s",
      "cloud_cdn_distribution_request_timeout_rate_enforced",
      "cloud_cdn_distribution_request_timeout_initial_set",
      "cloud_cdn_distribution_request_timeout_min_rate_configured"
    ]
  },
  {
    "id": "10.1",
    "title": "Ensure the LimitRequestLine directive is Set to 512 or less",
    "assessment": "Scored",
    "description": "Buffer Overflow attacks attempt to exploit an application by providing more data than the application buffer can contain. If the application allows copying data to the buffer to overflow the boundaries of the buffer, then the application is vulnerable to a buffer overflow. The results of Buffer overflow vulnerabilities vary, and may result in the application crashing, or may allow the attacker to execute instructions provided in the data. The Apache LimitRequest* directives allow the Apache web server to limit the sizes of requests and request fields and can be used to help protect programs and applications processing those requests. Specifically, the LimitRequestLine directive limits the allowed size of a client's HTTP request-line, which consists of the HTTP method, URI, and protocol version.",
    "rationale": "The limiting of the size of the request line is helpful so that the web server can prevent an unexpectedly long or large request from being passed to a potentially vulnerable CGI program, module or application that would have attempted to process the request. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directive is available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.  180 | P a g e",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the LimitRequestLine directive is in the Apache configuration and has a value of 512 or less.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the LimitRequestLine directive in the Apache configuration to have a value of 512 or less. LimitRequestLine 512 Default Value: LimitRequestline 8190 References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestline",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestline",
    "function_names": [
      "apache_http_limit_request_line_size",
      "apache_http_request_line_length_restricted",
      "apache_http_request_line_size_limited",
      "apache_http_limit_request_line_512_or_less",
      "apache_http_request_line_buffer_protected",
      "apache_http_request_line_overflow_prevented",
      "apache_http_limit_request_line_configured",
      "apache_http_request_line_size_enforced"
    ]
  },
  {
    "id": "10.2",
    "title": "Ensure the LimitRequestFields Directive is Set to 100 or Less",
    "assessment": "Scored",
    "description": "The LimitRequestFields directive limits the number of fields allowed in an HTTP request.",
    "rationale": "The limiting of the number of fields is helpful so that the web server can prevent an unexpectedly high number of fields from being passed to a potentially vulnerable CGI program, module or application that would have attempted to process the request. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directives are available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the LimitRequestFields directive is in the Apache configuration and has a value of 100 or less.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the LimitRequestFields directive in the Apache configuration to have a value of 100 or less. If the directive is not present, the default depends on a compile time configuration, but defaults to a value of 100. LimitRequestFields 100 Default Value: LimitRequestFields 100  182 | P a g e References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfields",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfields",
    "function_names": [
      "cloud_cdn_http_request_limit_request_fields_under_100",
      "cloud_cdn_http_request_limit_request_fields_configured",
      "cloud_cdn_http_request_limit_request_fields_compliant",
      "cloud_cdn_http_request_limit_request_fields_restricted",
      "cloud_cdn_http_request_limit_request_fields_enforced"
    ]
  },
  {
    "id": "10.3",
    "title": "Ensure the LimitRequestFieldsize Directive is Set to 1024 or Less",
    "assessment": "Scored",
    "description": "The LimitRequestFieldSize limits the number of bytes that will be allowed in an HTTP request header. It is recommended that the LimitRequestFieldSize directive be set to 1024 or less.",
    "rationale": "By limiting of the size of request headers is helpful so that the web server can prevent an unexpectedly long or large value from being passed to exploit a potentially vulnerable program. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. Since the configuration directives are available only at the server configuration level, it is not possible to tune the value for different portions of the same web server. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the LimitRequestFieldSize directive is in the Apache configuration and has a value of 1024 or less.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the LimitRequestFieldSize directive in the Apache configuration to have a value of 1024 or less. LimitRequestFieldsize 1024 Default Value: LimitRequestFieldSize 8190  184 | P a g e References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfieldsize",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestfieldsize",
    "function_names": [
      "cloud_cdn_http_header_limit_request_field_size_under_1024",
      "cloud_cdn_http_header_request_field_size_limited",
      "cloud_cdn_http_header_request_field_size_restricted",
      "cloud_cdn_http_header_request_field_size_max_1024",
      "cloud_cdn_http_header_request_field_size_enforced"
    ]
  },
  {
    "id": "10.4",
    "title": "Ensure the LimitRequestBody Directive is Set to 102400 or Less",
    "assessment": "Scored",
    "description": "The LimitRequestBody directive limits the number of bytes that are allowed in a request body. Size of requests may vary greatly; for example, during a file upload the size of the file must fit within this limit.",
    "rationale": "The limiting of the size of the request body is helpful so that the web server can prevent an unexpectedly long or large request from being passed to a potentially vulnerable program. Of course, the underlying dependency is that we need to set the limits high enough to not interfere with any one application on the server, while setting them low enough to be of value in protecting the applications. The LimitRequestBody may be configured on a per directory, or per location context. Please read the Apache documentation carefully, as these requests may interfere with the expected functionality of some web applications.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Verify that the LimitRequestBody directive in the Apache configuration has a value of 102400 (100K) or less.",
    "remediation": "Perform the following to implement the recommended state: Add or modify the LimitRequestBody directive in the Apache configuration to have a value of 102400 (100K) or less. Please read the Apache documentation so it is understood this directive will limit the size of file uploads to the web server. LimitRequestBody 102400 Default Value: LimitRequestBody 0 (unlimited)  186 | P a g e References: 1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestbody",
    "profile_applicability": "•  Level 2",
    "references": "1. https://httpd.apache.org/docs/2.2/mod/core.html#limitrequestbody",
    "function_names": [
      "cloud_cdn_request_body_limit_102400_or_less",
      "cloud_cdn_request_body_size_restricted",
      "cloud_cdn_request_body_limit_enforced",
      "cloud_cdn_request_body_max_size_102400",
      "cloud_cdn_request_body_limit_configured"
    ]
  },
  {
    "id": "11.1",
    "title": "Ensure SELinux Is Enabled in Enforcing Mode",
    "assessment": "Scored",
    "description": "SELinux (Security-Enhanced Linux) is a Linux kernel security module that provides mandatory access control security policies with type enforcement that are checked after the traditional discretionary access controls. It was created by the US National Security Agency and can enforce rules on files and processes in a Linux system, and restrict actions, based on defined policies.",
    "rationale": "Web applications and services continue to be one of the leading attack vectors for black-hat criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The SELinux mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Use the sestatus command to check that SELinux is enabled and that both the current mode and the configured mode are set to enforcing. $ sestatus | grep -i mode Current mode: enforcing Mode from config file: enforcing",
    "remediation": "Perform the following to implement the recommended state: If SELinux is not enabled in the configuration file, edit the file /etc/selinux/config and set the value of SELINUX as enforcing. Reboot the system for the new configuration to be effective. SELINUX=enforcing  189 | P a g e If the current mode is not enforcing and an immediate reboot is not possible, the current mode can be set to enforcing with the command shown below. # setenforce 1 Default Value: SELinux is not enabled by default. References: 1. https://en.wikipedia.org/wiki/Security-Enhanced_Linux",
    "profile_applicability": "•  Level 2",
    "references": "1. https://en.wikipedia.org/wiki/Security-Enhanced_Linux",
    "function_names": [
      "compute_selinux_enforcing_mode_enabled",
      "compute_selinux_enforcing_mode_enabled_all_instances",
      "compute_selinux_enforcing_mode_enabled_over_30d",
      "compute_selinux_enforcing_mode_enabled_min_kernel_version",
      "compute_selinux_enforcing_mode_enabled_no_exceptions"
    ]
  },
  {
    "id": "11.2",
    "title": "Ensure Apache Processes Run in the httpd_t Confined Context",
    "assessment": "Scored",
    "description": "SELinux includes customizable targeted policies that may be used to confine the Apache httpd server to enforce least privileges so the httpd server has only the minimal access to specified directories, files, and network ports. Access is controlled by process types (domains) defined for the httpd process. There are over a hundred individual httpd related types defined in a default Apache SELinux policy, which includes many of the common Apache add-ons and applications such as php, nagios, and smokeping. The default SELinux policies work well for a default Apache installation, but implementation of SELinux targeted policies on a complex or highly customized web server requires a rather significant development and testing effort which comprehends both the workings of SELinux and the detailed operations and requirements of the web application. All directories and files to be accessed by the web server process must have security labels with appropriate types. The following types are a sample of the most commonly used: • http_port_t - Network ports allowed for listening • httpd_sys_content_t - Read access to directories and files with web content • httpd_log_t - Directories and files to be used for writable log data • httpd_sys_script_exec_t - Directories and files for executable content.",
    "rationale": "With the proper implementation of SELinux, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read inappropriate system files may be prevented from execution by SELinux because the inappropriate files are not labeled as httpd_sys_content_t. Likewise, writing to an unexpected directory or execution of unexpected content can be prevented by similar mandatory security labels enforced by SELinux.",
    "audit": "Perform the following steps to determine if the recommended state is implemented:  191 | P a g e Check that all of the Apache httpd processes are confined to the httpd_t SELinux context. The type (the third colon separated field) for each process should be httpd_t. Note that on some platforms, such as Ubuntu, the Apache executable is named apache2 instead of httpd. $ ps -eZ | grep httpd unconfined_u:system_r: httpd_t :s0 1366 ? 00:00:00 httpd unconfined_u:system_r: httpd_t :s0 1368 ? 00:00:00 httpd . . .",
    "remediation": "Perform the following to implement the recommended state: If the running httpd processes are not confined to the httpd_t SELinux context, check the context for the httpd binary and the apachectl binary, and set the httpd binary to have a context of httpd_exec_t and the apachectl executable to have a context of initrc_exec_t, as shown below. Also note that on some platforms, such as Ubuntu, the Apache executable is named apache2 instead of httpd. # ls -alZ /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl -rwxr-xr-x. root root system_u:object_r: initrc_exec_t :s0 /usr/sbin/apachectl -rwxr-xr-x. root root system_u:object_r: httpd_exec_t :s0 /usr/sbin/httpd -rwxr-xr-x. root root system_u:object_r: httpd_exec_t :s0 /usr/sbin/httpd.worker -rwxr-xr-x. root root system_u:object_r: httpd_exec_t :s0 /usr/sbin/httpd.event If the executable files are not labeled correctly, they may be relabeled with the chcon command, as shown; however, the file system labeling is based on the SELinux file context policies, and the file systems will on some occasions be relabeled according to the policy. # chcon -t initrc_exec_t /usr/sbin/apachectl # chcon -t httpd_exec_t /usr/sbin/httpd /usr/sbin/httpd.* Since the file system may be relabeled based on SELinux policy, it's best to check the SELinux policy with the semanage fcontext -l option. If the policy is not present, add the pattern to the policy using the -a option. The restorecon command shown below will restore the file context label according to the current policy, and is required if a pattern was added. # ### Check the Policy # semanage fcontext -l | fgrep 'apachectl' /usr/sbin/apachectl regular file system_u:object_r: initrc_exec_t :s0 # semanage fcontext -l | fgrep '/usr/sbin/httpd' /usr/sbin/httpd regular file system_u:object_r: httpd_exec_t :s0 /usr/sbin/httpd.worker regular file system_u:object_r: httpd_exec_t :s0 /usr/sbin/httpd.event regular file system_u:object_r: httpd_exec_t :s0 # ### Add to the policy, if not present # semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd' # semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.worker'  192 | P a g e # semanage fcontext -f -- -a -t httpd_exec_t '/usr/sbin/httpd.event' # semanage fcontext -f -- -a -t initrc_exec_t /usr/sbin/apachectl # ### Restore the file labeling accord to the SELinux policy # restorecon -v /usr/sbin/httpd /usr/sbin/httpd.* /usr/sbin/apachectl Default Value: SELinux is not enabled by default. References: 1. https://access.redhat.com/documentation/en- US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/chap-Security- Enhanced_Linux-Targeted_Policy.html",
    "profile_applicability": "•  Level 2",
    "references": "1. https://access.redhat.com/documentation/en- US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/chap-Security- Enhanced_Linux-Targeted_Policy.html",
    "function_names": [
      "selinux_httpd_process_confined_context",
      "selinux_httpd_process_least_privilege",
      "selinux_httpd_process_type_restricted",
      "selinux_httpd_port_type_enforced",
      "selinux_httpd_content_type_restricted",
      "selinux_httpd_log_type_enforced",
      "selinux_httpd_script_exec_type_restricted",
      "selinux_httpd_policy_customized",
      "selinux_httpd_security_labels_correct",
      "selinux_httpd_web_content_access_restricted"
    ]
  },
  {
    "id": "11.3",
    "title": "Ensure the httpd_t Type Is Not in Permissive Mode",
    "assessment": "Scored",
    "description": "In addition to setting the entire SELinux configuration in permissive mode, it is possible to set individual process types (domains) such as httpd_t into permissive mode as well. Permissive mode will not prevent any access or actions; instead, any actions that would have been denied are simply logged.",
    "rationale": "Usage of permissive mode is helpful for testing and ensuring that SELinux will not prevent access that is necessary for the proper function of a web application. However, all access is allowed in permissive mode by SELinux.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Check that the httpd_t process type (domain) is not in permissive mode with the semodule command. There should be no output if the type is not set to permissive. # semodule -l | grep permissive_httpd_t",
    "remediation": "Perform the following to implement the recommended state: If the httpd_t type is in permissive mode, the customized permissive mode should be deleted with the following semanage command. # semanage permissive -d httpd_t Default Value: The httpd_t type is not in permissive mode by default.  194 | P a g e References: 1. https://access.redhat.com/documentation/en- US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security- Enhanced_Linux-Fixing_Problems-Permissive_Domains.html",
    "profile_applicability": "•  Level 2",
    "references": "1. https://access.redhat.com/documentation/en- US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security- Enhanced_Linux-Fixing_Problems-Permissive_Domains.html",
    "function_names": [
      "selinux_httpd_type_permissive_disabled",
      "selinux_domain_permissive_mode_disabled",
      "httpd_t_permissive_mode_disabled",
      "selinux_process_type_permissive_disabled",
      "httpd_selinux_permissive_mode_disabled"
    ]
  },
  {
    "id": "11.4",
    "title": "Ensure Only the Necessary SELinux Booleans Are Enabled",
    "assessment": "Not Scored",
    "description": "SELinux booleans allow or disallow behavior specific to the Apache web server. Common examples include whether CGI execution is allowed, or if the httpd server is allowed to communicate with the current terminal (tty). Communication with the terminal may be necessary for entering a passphrase during startup to decrypt a private key.",
    "rationale": "Enabling only the necessary httpd related booleans provides a defense in depth approach that will deny actions that are not in use or expected.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Review the SELinux httpd booleans that are enabled to ensure only the necessary booleans are enabled for the current and the configured state. Due to the variety and complexity of web server usages and organizational needs, a preset recommendation of enabled booleans is not practical. Run either of the two commands below to show only the enabled httpd related booleans. The getsebool command is installed with the core SELinux, while the semanage command is an optional package; however, the semanage output includes descriptive text. # getsebool -a | grep httpd_ | grep '> on' httpd_builtin_scripting --> on httpd_dbus_avahi --> on httpd_tty_comm --> on httpd_unified --> on Alternative using the semanage command. # semanage boolean -l | grep httpd_ | grep -v '(off , off)' httpd_enable_cgi (on , on) Allow httpd cgi support httpd_dbus_avahi (on , on) Allow Apache to communicate with avahi service via dbus httpd_unified (on , on) Unify HTTPD handling of all content files. httpd_builtin_scripting (on , on) Allow httpd to use built in scripting (usually php)  196 | P a g e httpd_tty_comm (on , on) Unify HTTPD to communicate with the terminal...",
    "remediation": "Perform the following to implement the recommended state: To disable the SELinux httpd booleans that are determined to be unnecessary, use the setsebool command as shown below with the -P option to make the change persistent. # setsebool -P httpd_enable_cgi off # getsebool httpd_enable_cgi httpd_enable_cgi --> off Default Value: SELinux is not enabled by default. References: 1. https://access.redhat.com/documentation/en- US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security- Enhanced_Linux-Working_with_SELinux-Booleans.html",
    "profile_applicability": "•  Level 2",
    "references": "1. https://access.redhat.com/documentation/en- US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/sect-Security- Enhanced_Linux-Working_with_SELinux-Booleans.html",
    "function_names": [
      "selinux_boolean_unnecessary_disabled",
      "selinux_boolean_apache_cgi_disabled",
      "selinux_boolean_httpd_tty_disabled",
      "selinux_boolean_minimal_required_enabled",
      "selinux_boolean_non_default_disabled"
    ]
  },
  {
    "id": "12.1",
    "title": "Ensure the AppArmor Framework Is Enabled",
    "assessment": "Scored",
    "description": "AppArmor is a Linux kernel security module that provides a named based mandatory access control with security policies. AppArmor can enforce rules on programs for file access and network connections and restrict actions based on defined policies.",
    "rationale": "Web applications and web services continue to be one of the leading attack vectors for criminals to gain access to information and servers. The threat is high because web servers are often externally accessible and typically have the greatest share of server-side vulnerabilities. The AppArmor mandatory access controls provide a much stronger security model which can be used to implement a deny-by-default model only allowing what is explicitly permitted.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Use the aa-status command with the --enabled option to check that AppArmor is enabled. If AppArmor is enabled, the command will return a zero (0) exit code for success. The && echo Enabled is added to the command below to provide positive feedback. If no text is echoed, AppArmor is not enabled. # aa-status --enabled && echo Enabled Enabled",
    "remediation": "Perform the following to implement the recommended state: • If the aa-status command is not found, then the AppArmor package is not installed and needs to be installed using the appropriate Linux distribution package management. For example: # apt-get install apparmor # apt-get install libapache2-mod-apparmor • To enable the AppArmor framework, run the init.d script as shown below.  199 | P a g e # /etc/init.d/apparmor start Default Value: AppArmor is enabled by default. References: 1. https://help.ubuntu.com/community/AppArmor",
    "profile_applicability": "•  Level 2",
    "references": "1. https://help.ubuntu.com/community/AppArmor",
    "function_names": [
      "compute_instance_app_armor_enabled",
      "compute_system_app_armor_enabled",
      "linux_kernel_app_armor_enabled",
      "security_module_app_armor_enabled",
      "os_security_app_armor_enabled",
      "host_security_app_armor_enabled",
      "system_security_app_armor_enabled",
      "compute_security_app_armor_enabled"
    ]
  },
  {
    "id": "12.2",
    "title": "Ensure the Apache AppArmor Profile Is Configured Properly",
    "assessment": "Not Scored",
    "description": "AppArmor includes customizable profiles that may be used to confine the Apache web server to enforce least privileges so the server has only the minimal access to specified directories, files, and network ports. Access is controlled by a profile defined for the apache2 process. The default AppArmor profile is typically a very permissive profile that allows read-write access to all system files. Therefore, it's important that the default profile be customized to enforce least privileges. The AppArmor utilities such as aa-autodep, aa- complain, and aa-logprof can be used to generate an initial profile based on actual usage. However, thorough testing, review, and customization will be necessary to ensure the Apache profile restrictions allow the necessary functionality while implementing least privilege.",
    "rationale": "With the proper implementation of an AppArmor profile, vulnerabilities in the web application may be prevented from being exploited due to the additional restrictions. For example, a vulnerability that allows an attacker to read an inappropriate system files may be prevented from execution by AppArmor because the inappropriate files are not allowed by the profile. Likewise, writing to an unexpected directory or executing unexpected content can be prevented by similar mandatory security controls enforced by AppArmor.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: 1. Find the Apache AppArmor profile typically found in /etc/apparmor.d/usr.sbin.apache2 along with any files included by the profile such as /etc/apparmor.d/apache2.d/* and files in the /etc/apparmor.d/abstractions/ directory. 2. Review the capabilities and permissions granted to ensure that the profile implements least privileges for the web application. Wild-card paths such as /** which grant access to all files and directories starting with the root level directory should not be present in the profile. Instead, read-only access to specific necessary system files such as /etc/group and to web content files such as /var/www/html/**  201 | P a g e should be given. Refer to the apparmor.d man page for additional details. Shown below are some possible example capabilities and path permissions. capability dac_override, capability dac_read_search, capability net_bind_service, capability setgid, capability setuid, capability kill, capability sys_tty_config, . . . /usr/sbin/apache2 mr, /etc/gai.conf r, /etc/group r, /etc/apache2/** r, /var/www/html/** r, /run/apache2/** rw, /run/lock/apache2/** rw, /var/log/apache2/** rw, /etc/mime.types r,",
    "remediation": "Perform the following to implement the recommended state: 1. Stop the Apache server. # service apache2 stop 2. Create a mostly empty apache2 profile based on program dependencies. # aa-autodep apache2 Writing updated profile for /usr/sbin/apache2. 3. Set the apache2 profile in complain mode so access violations will be allowed and will be logged. # aa-complain apache2 Setting /usr/sbin/apache2 to complain mode. 4. Start the apache2 service. # service apache2 start 5. Thoroughly test the web application, attempting to exercise all intended functionality so AppArmor will generate the necessary logs of all resources accessed. The logs are sent via the system syslog utility and are typically found in  202 | P a g e either the /var/log/syslog or /var/log/messages files. Also stop and restart the web server as part of the testing process. 6. Use aa-logprof to update the profile based on logs generated during the testing. The tool will prompt for suggested modifications to the profile, based on the logs. The logs may also be reviewed manually in order to update the profile. # aa-logprof 7. Review and edit the profile, removing any inappropriate content and adding appropriate access rules. Directories with multiple files accessed with the same permission can be simplified with the usage of wild-cards when appropriate. Reload the updated profile using the apparmor_parser command. # apparmor_parser -r /etc/apparmor.d/usr.sbin.apache2 8. Test the new updated profile again and check for any new AppArmor denied logs generated. Update and reload the profile as necessary. Repeat the application tests until no new AppArmor deny logs are created, except for access which should be prohibited. # tail -f /var/log/syslog 9. Set the apache2 profile to enforce mode, reload AppArmor, and test the web site functionality again. # aa-enforce /usr/sbin/apache2 # /etc/init.d/apparmor reload Default Value: The default Apache profile is very permissive. References: 1. https://wiki.ubuntu.com/AppArmor",
    "profile_applicability": "•  Level 2",
    "references": "1. https://wiki.ubuntu.com/AppArmor",
    "function_names": [
      "apparmor_apache_profile_least_privileges_enabled",
      "apparmor_apache_profile_customized",
      "apparmor_apache_profile_read_write_restricted",
      "apparmor_apache_profile_network_ports_restricted",
      "apparmor_apache_profile_directory_access_restricted",
      "apparmor_apache_profile_file_access_restricted",
      "apparmor_apache_profile_default_permissive_disabled",
      "apparmor_apache_profile_usage_based_generated",
      "apparmor_apache_profile_testing_required",
      "apparmor_apache_profile_functionality_verified"
    ]
  },
  {
    "id": "12.3",
    "title": "Ensure the Apache AppArmor Profile Is in Enforce Mode",
    "assessment": "Scored",
    "description": "AppArmor profiles may be in one of three modes: disabled, complain, or enforce. In the complain mode, any violations of the access controls are logged but the restrictions are not enforced. Also, once a profile mode has been changed, it is recommended to restart the Apache server, otherwise the currently running process may not be confined by the policy.",
    "rationale": "The complain mode is useful for testing and debugging a profile but is not appropriate for production. Only the confined process running in enforce mode will prevent attacks that violate the configured access controls.",
    "audit": "Perform the following steps to determine if the recommended state is implemented: Use the aa-unconfined command to check that the apache2 policy is enforced, and that the currently running apache2 processes are confined. The output should include both confined by and (enforce) # aa-unconfined --paranoid | grep apache2 1899 /usr/sbin/apache2 confined by '/usr/sbin/apache2 (enforce)' 1902 /usr/sbin/apache2 confined by '/usr/sbin/apache2 (enforce)' 1903 /usr/sbin/apache2 confined by '/usr/sbin/apache2 (enforce)' . . . Note that non-compliant results may include not confined or (complain), such as the following: 3304 /usr/sbin/apache2 not confined 2502 /usr/sbin/apache2 confined by '/usr/sbin/apache2 (complain)' 4004 /usr/sbin/apache2 confined by '/usr/sbin/apache2//HANDLING_UNTRUSTED_INPUT (complain)'",
    "remediation": "Perform the following to implement the recommended state: 1. Set the profile state to enforce mode.  205 | P a g e # aa-enforce apache2 Setting /usr/sbin/apache2 to enforce mode. 2. Stop the Apache server and confirm that is it not running. In some cases, the AppArmor controls may prevent the web server from stopping properly, and it may be necessary to stop the process manually or even reboot the server. # service apache2 stop * Stopping web server apache2 # service apache2 status * apache2 is not running 3. Restart the Apache service. # service apache2 start * Starting web server apache2 Default Value: enforce",
    "profile_applicability": "•  Level 2",
    "function_names": [
      "compute_apache_profile_enforce_mode",
      "compute_apache_profile_not_complain_mode",
      "compute_apache_profile_not_disabled",
      "compute_apache_profile_restart_required"
    ]
  }
]