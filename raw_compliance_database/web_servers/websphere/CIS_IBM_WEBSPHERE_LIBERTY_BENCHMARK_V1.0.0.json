[
  {
    "id": "1.1",
    "title": "Ensure root does not have ownership of Websphere Liberty binaries",
    "assessment": "Manual",
    "description": "Preventing the root user from owning files in the ${wlp.install.dir} directory prevents unauthorized commands or files from being run.",
    "rationale": "When directories or files are owned by the root user, administration of those files requires a user to log in as root or elevate their existing login to have root privileges. Performing operations as the root user could result in unauthorized commands that could alter files beyond the scope of WebSphere Liberty itself.",
    "audit": "Check to ensure that no files or directories underneath ${wlp.install.dir} are owned by the root user or root group: ls -l -R ${wlp.install.dir} | awk '{print $3, $4}' Expected result: You should not see the root user or root group referenced in the output.",
    "remediation": "Set the ownership and group of ${wlp.install.dir} to something other than root: chown -R <non-root user>:<non-root group> ${wlp.install.dir}",
    "function_names": [
      "compute_liberty_binaries_root_ownership_disabled",
      "compute_websphere_binaries_root_ownership_disabled",
      "compute_wlp_binaries_root_ownership_disabled",
      "compute_liberty_install_dir_root_ownership_disabled",
      "compute_websphere_install_dir_root_ownership_disabled"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "1.2",
    "title": "Ensure extraneous files and directories are removed",
    "assessment": "Manual",
    "description": "The installation might provide example applications, documentation, and other directories which may not serve a production use.",
    "rationale": "Removing non-production resources is a defense in depth measure that reduces potential exposures introduced by these resources.",
    "audit": "Check for the existence of extraneous resources: $ ls -l ${wlp.user.dir}/extension \\ ${wlp.user.dir}/shared \\ ${wlp.user.dir}/server \\ ${wlp.user.dir}/client There should be no non-production client extension/shared resource(s)/server/client in these folders",
    "remediation": "Remove extraneous resources for each: Extension: $ rm -rf ${wlp.user.dir}/extension/<non-production extension> Shared resource(s): $ rm -rf ${wlp.user.dir}/shared/<non-production shared resource(s)> Server: $ rm -rf ${wlp.user.dir}/server/<non-production server> Client: $ rm -rf ${wlp.user.dir}/client/<non-production client>",
    "function_names": [
      "compute_instance_extraneous_files_removed",
      "compute_instance_example_apps_removed",
      "compute_instance_documentation_removed",
      "compute_instance_non_production_files_removed",
      "compute_instance_unnecessary_directories_removed",
      "compute_instance_default_content_removed",
      "compute_instance_sample_data_removed",
      "compute_instance_unused_files_removed"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "1.3",
    "title": "Ensure only defined users have access to the file system",
    "assessment": "Manual",
    "description": "In Linux systems, there is a category of permission as others. These users are the ones who are not neither owner nor in a group associated with the file/folder. Since these users are anyone else than users defined, they should not have any access at all on Websphere Liberty file system.",
    "rationale": "",
    "audit": "Ensure that no one falling into other category have access to the Websphere Liberty file system. You should expect to see ---. ls -l -R ${wlp.install.dir} | awk '{print substr($1,length($1)-3,3)}'",
    "remediation": "Ensure that other has no access to the system. chmod -R o-rwx ${wlp.install.dir}",
    "function_names": [
      "linux_file_system_others_access_restricted",
      "linux_file_system_undefined_users_access_denied",
      "linux_file_system_others_permissions_disabled",
      "linux_file_system_non_owner_access_blocked",
      "linux_file_system_group_others_access_restricted"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "1.4",
    "title": "Ensure that only one user ID has write access to the WebSphere Liberty configuration files",
    "assessment": "Manual",
    "description": "Ensure that only one user ID has write access to the WebSphere Liberty configuration files. If there are multiple administrators, they can use sudo and the /etc/sudoers file to elevate their privilege when write access is required.",
    "rationale": "WebSphere Liberty server administrators sometimes need the ability to write to server configuration files, but following the principle of least privilege they should not operate with write access unless absolutely necessary. Administrators can use sudo and the /etc/sudoers to file to elevate their privilege when write access is needed, while operating with read access the rest of the time. Administrators should never share user IDs and passwords.",
    "audit": "Verify that all WebSphere administrators have been added to the group that owns the server's configuration directory, which will grant them read but not write access. Ensure that the user that owns the server's configuration directory is a non-login user. Use sudo and the /etc/sudoers file to grant the administrators the ability to elevate their privilege to the user that owns the server's configuration directory when write access is required.",
    "remediation": "Create a single, non-login, user ID that owns the server's configuration directory. Add any WebSphere administrators to the group that owns the server's configuration directory, which will automatically give them read access to the server's configuration, but not write access. Use sudo and the /etc/sudoers file to allow these administrators to elevate their privilege to the user ID that owns the server's configuration directory when write access is required.",
    "function_names": [
      "compute_was_liberty_config_single_write_user",
      "compute_was_liberty_config_restrict_write_access",
      "compute_was_liberty_config_admin_write_permission",
      "compute_was_liberty_config_sudo_elevated_access",
      "compute_was_liberty_config_file_owner_restriction"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "1.5",
    "title": "Ensure Websphere Liberty Server Output is not set to the default value",
    "assessment": "Manual",
    "description": "The user ID that the WebSphere Liberty server process runs under should not have write access to its own configuration files. The WebSphere Liberty server process requires write access to certain runtime files such as temporary caches and logs, but those files can be written to a different location than the configuration files, and permissions can be set separately for those two locations.",
    "rationale": "Removing write access to a server's configuration files limits the damage that can be done by a theoretical attacker that is able to inject code to be run inside the WebSphere Liberty server process.",
    "audit": "Ensure the existence of the WLP_OUTPUT_DIR variable in the server.env file. This environment variable is used to specify an alternative location for server generated output such as logs, the workarea directory, and other generated files. The variable should point to an output directory that is different from the server's configuration directory. The user ID of the WebSphere Liberty server process should have write access to the output directory but only read access to the configuration directory. For more information about server.env please see here . WLP_OUTPUT_DIR=/<server-writeable directory>/ Confirm that the output directory exists and has write access granted to the WebSphere Liberty server process user ID: ls -l $WLP_OUTPUT_DIR | awk '{print $1, $3}' Confirm that the WebSphere Liberty server process user ID has read access to its configuration files: ls -l ${server.config.dir} | awk '{print $1, $3}'",
    "remediation": "Create the server.env file if it does not exist. For more information about server.env please see here . Define WLP_OUTPUT_DIR in the server.env file: WLP_OUTPUT_DIR=/<server-writeable directory>/ Ensure that the WebSphere Liberty server process user ID has write access to the WLP_OUTPUT_DIR directory. Ensure that the WebSphere Liberty server process user ID does not have write access to the ${server.config.dir} directory.",
    "function_names": [
      "websphere_liberty_server_output_not_default",
      "websphere_liberty_config_write_access_restricted",
      "websphere_liberty_runtime_files_separated",
      "websphere_liberty_process_user_permissions_secure",
      "websphere_liberty_config_files_protected",
      "websphere_liberty_logs_cache_write_permissions_restricted"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "1.6",
    "title": "Ensure automated configuration updates are disabled",
    "assessment": "Automated",
    "description": "WebSphere Liberty provides the ability to automatically update the server runtime when the configuration changes, without requiring a server restart.",
    "rationale": "Automatic updates during runtime are very useful during development and test phases. Configuration updates must be carefully controlled in production environments to reduce the possibility that unknown changes or vulnerabilities are deployed to users.",
    "audit": "Ensure the updateTrigger attribute on the config element controls in the Liberty configuration is set to a value other than polled. grep -w -R -i 'updateTrigger' ${server.config.dir}",
    "remediation": "Add the updateTrigger attribute to the config element in ${server.config.dir}/configDropins/overrides/*.xmland set to mbean or disabled. <config updateTrigger=\"mbean\" /> Default Value: Liberty enables dynamic configuration updates by default. The default settings for configuration monitoring are as follows: <config updateTrigger=\"polled\" monitorInterval=\"500ms\"/> References: 1. https://openliberty.io/docs/latest/reference/config/server-configuration- overview.html#_dynamic_updates 2. https://www.ibm.com/docs/en/was- liberty/base?topic=SSEQTP_liberty/com.ibm.websphere.wlp.zseries.doc/ae/twlp_ setup_dyn_upd.html 3. https://openliberty.io/docs/latest/reference/config/config.html",
    "function_names": [
      "websphere_liberty_server_automated_updates_disabled",
      "websphere_liberty_runtime_auto_config_disabled",
      "websphere_liberty_server_config_updates_disabled",
      "websphere_liberty_auto_runtime_update_disabled",
      "websphere_liberty_dynamic_config_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/server-configuration- overview.html#_dynamic_updates 2. https://www.ibm.com/docs/en/was- liberty/base?topic=SSEQTP_liberty/com.ibm.websphere.wlp.zseries.doc/ae/twlp_ setup_dyn_upd.html 3. https://openliberty.io/docs/latest/reference/config/config.html"
  },
  {
    "id": "1.7",
    "title": "Ensure the WebSphere Liberty Installation is Validated",
    "assessment": "Manual",
    "description": "Ensure that all WebSphere Liberty binaries were installed successfully and that you are running the latest fix pack version.",
    "rationale": "Ensuring that all WebSphere Liberty binaries are installed successfully and that the latest fix pack version is applied provides the most up-to-date protection against vulnerabilities.",
    "audit": "Validate your WebSphere Liberty installation by running the command below: ${wlp_install_dir}/bin/productInfo validate Expected result: Start product validation... Product validation completed successfully. Validate that you are running with the latest fixpack. ${wlp_install_dir}/bin/productInfo version Expected result: Product version: YY.0.0.FP In the output, YY is the last two digits of the year that the fixpack was released, and FP represents the fixpack number for that year. Ensure that this matches that latest fixpack available from IBM.",
    "remediation": "If the audit procedure fails, remove your current installation and install from a more secure location, ensuring that you are installing the latest fixpack from a trusted source.",
    "function_names": [
      "websphere_liberty_installation_valid",
      "websphere_liberty_fix_pack_latest",
      "websphere_liberty_binary_integrity_verified",
      "websphere_liberty_version_compliance",
      "websphere_liberty_installation_successful"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "1.8",
    "title": "Ensure Websphere Liberty file system access is Restricted",
    "assessment": "Manual",
    "description": "The permissions of files and directories underneath ${wlp.install.dir} should follow the principle of least privilege.",
    "rationale": "If the permissions of files and directories underneath ${wlp.install.dir} are too broad, unintended users may be able to modify or read those files. Write permission should be limited to a single administrator, read permission should be limited to a specifically- defined group containing users that require that access, and all other users should have their access entirely removed. Impact: If the file permissions are too broad, a security vulnerability exists where unintended users will have the ability to modify and read WebSphere Liberty files.",
    "audit": "Check the permissions of ${wlp.install.dir}: ls -l -R ${wlp.install.dir} | awk '{print $1}' Expected result: All files should show permissions of the form (d)rw(x)r-(x)---. The d(directory) and x(executable) flags may or may not exist depending on the file type, however the r(read) and w(write) flags should always appear in the same position as the above output.",
    "remediation": "Change WebSphere Liberty file system access to 750 (owner has read/write/execute, group has read/execute, other has no access): chmod \u2013R 750 ${wlp.install.dir}",
    "function_names": [
      "websphere_liberty_file_system_access_restricted",
      "websphere_liberty_install_dir_permissions_least_privilege",
      "websphere_liberty_directory_permissions_restricted",
      "websphere_liberty_file_permissions_least_privilege",
      "websphere_liberty_install_dir_access_controlled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "If the file permissions are too broad, a security vulnerability exists where unintended users will have the ability to modify and read WebSphere Liberty files."
  },
  {
    "id": "1.9",
    "title": "Ensure that the 'onConflict attribute' is set to 'IGNORE' to restrict config file overwrites",
    "assessment": "Automated",
    "description": "WebSphere Liberty allows additional configuration files to be included in the main configuration file. Using included files in the main configuration file provides organization, separation, update controls and file access restriction.",
    "rationale": "Use additional configuration files to hold sensitive configuration information. Restrict access to files with sensitive information. This avoids unauthorized access to information such as passwords. Use additional configuration files to organization configuration information by type. This helps users only update their portion of the server configuration and not accidentally or intentionally change configuration information in other areas. Included files should also be ignored if there is a merge conflict with the main file. This prevents a user from accidentally or intentionally overriding information in the main configuration file. To protect important configuration settings from merges or changes, information can be set in the ${server.config.dir}/configDropins/overrides/.",
    "audit": "Ensure that the onConflict attribute on all the location elements and is set to IGNORE in the Liberty configuration. grep -w -R -i 'include location' ${server.config.dir} Review the file permissions on included files. ls -al <includedFileName.xml> Review the main Liberty configuration file for any sensitive or grouped elements that can be moved to an included file.",
    "remediation": "Set the onConflict attribute to the IGNORE value in all include elements in the Liberty configuration. <include ... onConflict=\"IGNORE\" /> Reduce file permission on all included files to essential users only. Default Value: In WebSphere Liberty, the onConflict attribute in the include element is MERGE by default. References: 1. https://openliberty.io/docs/latest/reference/config/include.html",
    "function_names": [
      "websphere_liberty_config_file_on_conflict_ignore",
      "websphere_liberty_config_file_overwrite_restricted",
      "websphere_liberty_config_file_include_safe",
      "websphere_liberty_config_file_no_overwrite",
      "websphere_liberty_config_file_conflict_ignore_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/include.html"
  },
  {
    "id": "2.1",
    "title": "Ensure 'displayAuthenticationRealm' is set to 'false'",
    "assessment": "Automated",
    "description": "Configuring displayAuthenticationRealm will ensure that the registry information is not displayed in the login prompt. This will restrict the potential leak of security realm information.",
    "rationale": "Do not display the user registry information when prompting the user for credentials to avoid showing sensitive information like the LDAP host and port.",
    "audit": "Ensure the displayAuthenticationRealm attribute for first webAppSecurity element is set to false in the Liberty configuration . grep -w -R -i 'displayAuthenticationRealm' ${server.config.dir}",
    "remediation": "Set the displayAuthenticationRealm attribute in the webAppSecurity element to false in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <webAppSecurity ... displayAuthenticationRealm=\"false\" /> Default Value: The default value of the displayAuthenticationRealm attribute in the webAppSecurity element is set to false. References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=applications-configuring- web-security-related-properties-in-liberty",
    "function_names": [
      "cloud_cdn_distribution_display_authentication_realm_disabled",
      "cloud_cdn_distribution_authentication_realm_hidden",
      "cloud_cdn_distribution_login_prompt_realm_obscured",
      "cloud_cdn_distribution_security_realm_info_suppressed",
      "cloud_cdn_distribution_authentication_realm_false"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=applications-configuring- web-security-related-properties-in-liberty"
  },
  {
    "id": "2.2",
    "title": "Ensure Basic Registry and Quick Start security Registry are Removed",
    "assessment": "Automated",
    "description": "The Basic Registry and Quick Start Security user registries are indented for developing and testing environments.",
    "rationale": "The Basic and Quick Start Security user registries are not robust enough for production to be used. Registries like LDAP, Database or a custom user registry should be used for production.",
    "audit": "Ensure there are no uses of basicRegistry or quickStartSecurity elements in the Liberty configuration. grep -w -i -R 'basicRegistry' ${server.config.dir} grep -w -i -R 'quickStartSecurity' ${server.config.dir}",
    "remediation": "Use robust user registries, such as an LDAP registry or a Custom registry for production. References: 1. https://openliberty.io/docs/latest/reference/feature/appSecurity-2.0.html",
    "function_names": [
      "iam_user_registry_removed",
      "iam_quick_start_registry_removed",
      "iam_registry_no_basic_config",
      "iam_registry_no_quick_start_config",
      "iam_registry_development_removed",
      "iam_registry_testing_removed"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/feature/appSecurity-2.0.html"
  },
  {
    "id": "2.3",
    "title": "Ensure that the LDAP connection uses TLS",
    "assessment": "Automated",
    "description": "TLS (Transport Layer Security) provides secure communication over a network.",
    "rationale": "Secure the data sent to the LDAP server which can include user authentication and search requests.",
    "audit": "Ensure that the sslEnabled attribute of all ldapRegistry elements is to true. The sslRef of all ldapRegistry elements must match the id attribute of an ssl element. Both configurations are set on the Liberty configuration. grep -w -R -i 'sslEnabled' ${server.config.dir} The sslEnabled attribute may match to elements in addition to the ldapRegistry element.",
    "remediation": "Set the sslEnabled attribute on all ldapRegistry elements in ${server.config.dir}/configDropins/overrides/<any file name>.xml. Also set the sslRef attribute to a value that contains the correct keystore and truststore configuration for LDAPS communication. <ldapRegistry sslEnabled=\"true\" sslRef=\"LDAPSSLSettings\" > </ldapRegistry> <ssl id=\"LDAPSSLSettings\" keyStoreRef=\"LDAPKeyStore\" trustStoreRef=\"LDAPTrustStore\" /> Default Value: The default value of the sslEnabled attribute on the ldapRegistry element is false. References: 1. https://openliberty.io/docs/latest/reference/config/ldapRegistry.html 2. https://openliberty.io/docs/latest/reference/config/ssl.html",
    "function_names": [
      "ldap_connection_tls_enabled",
      "ldap_connection_secure_transport_required",
      "ldap_connection_encryption_enabled",
      "ldap_connection_tls_1_2_required",
      "ldap_connection_secure_protocol_enabled",
      "ldap_connection_tls_certificate_valid",
      "ldap_connection_secure_channel_required",
      "ldap_connection_tls_version_min_1_2"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/ldapRegistry.html 2. https://openliberty.io/docs/latest/reference/config/ssl.html"
  },
  {
    "id": "3.1",
    "title": "Ensure that automatic applications updates are disabled",
    "assessment": "Automated",
    "description": "Automatic application updates will dynamically update the runtime behavior of the applications of any changes to the application.",
    "rationale": "Automatic updates during runtime are very useful during development and test phases. Application updates must be carefully controlled in production environments to reduce the possibility that unknown changes or vulnerabilities are deployed to users.",
    "audit": "Review the updateTrigger attribute and dropinsEnabled attributes in the applicationMonitor element in the Liberty configuration . Ensure the updateTrigger attribute is set to a value other than polled. Ensure the dropinsEnabled attritubute is set to false. grep -w -R -i 'updateTrigger' ${server.config.dir} grep -w -R -i 'dropinsEnabled' ${server.config.dir}",
    "remediation": "Add the dropinsEnabled attribute and the updateTrigger attributes to the applicationMonitor element to ${server.config.dir}/configDropins/overrides/*.xml. Set the dropinsEnabled to false to stop usage of dropins folder. Set the updateTrigger to mbean or disabled. <applicationMonitor updateTrigger=\"mbean\" dropinsEnabled=\"false\" /> Default Value: Liberty enables dynamic application by default. The default settings for application monitoring are as follows: <applicationMonitor updateTrigger=\"polled\" pollingRate=\"500ms\" dropins=\"dropins\" dropinsEnabled=\"true\"/>  References: 1. https://openliberty.io/docs/latest/reference/config/applicationMonitor.html 2. https://www.ibm.com/docs/en/was- liberty/base?topic=SSEQTP_liberty/com.ibm.websphere.wlp.zseries.doc/ae/twlp_ setup_dyn_upd.html",
    "function_names": [
      "compute_instance_automatic_updates_disabled",
      "compute_vm_automatic_updates_disabled",
      "compute_application_automatic_updates_disabled",
      "compute_runtime_automatic_updates_disabled",
      "compute_environment_automatic_updates_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/applicationMonitor.html 2. https://www.ibm.com/docs/en/was- liberty/base?topic=SSEQTP_liberty/com.ibm.websphere.wlp.zseries.doc/ae/twlp_ setup_dyn_upd.html"
  },
  {
    "id": "3.2",
    "title": "Ensure JDK Security Manager is Enabled",
    "assessment": "Automated",
    "description": "The JDK's security manager allows applications to implement a security policy. It allows an application to permit or deny operations defined by the security policy.",
    "rationale": "In some situations there is a need to restrict applications from performing certain operations like read and writing to files, opening network connections etc. JDK's security manager provides a way to configure a security policy that can be applied to restrict the applications operations. Note: The security manager is proposed to be deprecated and removed in future releases of JDK. Impact: Generally enabling the security manager can impact the performance because of the additional checks needed to restrict operations by applications. Applications can also fail to run with these additional checks in which case appropriate permissions have to configured for the application either in the server configuration files or the application specific permissions.xml file.",
    "audit": "Ensure that the websphere.java.security property is configured in ${server.config.dir}/bootstrap.properties file websphere.java.security and also confirm that the appropriate permissions are granted in the application's permission.xml file and/or in the javaPermission element in Liberty configuration <javaPermission ... />",
    "remediation": "Enable the websphere.java.security property in ${server.config.dir}/bootstrap.properties file websphere.java.security and also confirm that the appropriate permissions are granted in the application's permission.xml file and/or in the javaPermission element specified in ${server.config.dir}/configDropins/overrides/*.xml. For example, <javaPermission className=\"java.security.PropertyPermission\" name=\"os.name\" actions=\"read\" restriction=\"true\" /> Default Value: Security Manager is not enabled by default. References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=security-java-2 2. https://openjdk.java.net/jeps/411 3. https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/SecurityM anager.html  4 Web Applications Security considerations that apply to Web applications like servlets, jsps etc.  4.1 Securing Cookies 4.1.1 Securing Session Cookies JSESSIONID is a cookie generated by Servlet containers and used for session management in J2EE web applications for HTTP protocol",
    "function_names": [
      "compute_jdk_security_manager_enabled",
      "compute_jdk_security_manager_policy_configured",
      "compute_jdk_security_manager_default_policy_restrictive",
      "compute_jdk_security_manager_custom_policy_applied",
      "compute_jdk_security_manager_all_applications_covered"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Generally enabling the security manager can impact the performance because of the additional checks needed to restrict operations by applications. Applications can also fail to run with these additional checks in which case appropriate permissions have to configured for the application either in the server configuration files or the application specific permissions.xml file.",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=security-java-2 2. https://openjdk.java.net/jeps/411 3. https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/SecurityM anager.html  4 Web Applications Security considerations that apply to Web applications like servlets, jsps etc.  4.1 Securing Cookies 4.1.1 Securing Session Cookies JSESSIONID is a cookie generated by Servlet containers and used for session management in J2EE web applications for HTTP protocol"
  },
  {
    "id": "4.1.1.1",
    "title": "Ensure 'cookieSameSite' SameSite attribute is set to 'Strict' for session cookies",
    "assessment": "Automated",
    "description": "The SameSite attribute is used by web browsers to determine if a particular cookie should be sent with a request. Setting this attribute can help protect against Cross Site Request Forgery (CSRF) attacks. It is recommended to set the SameSite attribute to Strict. A Strict value for the SameSite attribute ensures the cookie is only sent by the web browser if the site for the cookie matches the site in the address bar, for example.",
    "rationale": "Some browsers treat cookies without a SameSite attribute as if they have the SameSite attribute value of Lax.",
    "audit": "Ensure the cookieSameSite attribute is set to Strict in the httpSession element in the Liberty configuration grep -w -R -i 'cookieSameSite' ${server.config.dir}",
    "remediation": "Add the cookieSameSite attribute to the httpSession element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. Set the cookieSameSite value to Strict. <httpSession cookieSameSite=\"Strict\"/> Default Value: The default value is Disabled. References: 1. https://openliberty.io/blog/2020/03/25/set-samesite-attribute-cookies-liberty.html",
    "function_names": [
      "cloud_cdn_cookie_samesite_strict",
      "cloud_cdn_session_cookie_samesite_strict",
      "cloud_cdn_cookie_csrf_protection_strict",
      "cloud_cdn_cookie_samesite_attribute_strict",
      "cloud_cdn_session_cookie_samesite_attribute_strict"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/blog/2020/03/25/set-samesite-attribute-cookies-liberty.html"
  },
  {
    "id": "4.1.1.2",
    "title": "Ensure 'cookieHttpOnly' HttpOnly attribute is set to 'true' for session cookies",
    "assessment": "Manual",
    "description": "The HttpOnly attribute on a cookie prevents the cookie from being accessed by the client side scripts.",
    "rationale": "Enabling HttpOnly attribute mitigates Cross-Site Scripting (XSS) attacks.",
    "audit": "Ensure the cookieHttpOnly attribute in the httpSession element is set to true in the Liberty configuration grep -w -R -i 'cookieHttpOnly' ${server.config.dir}",
    "remediation": "Set the cookieHttpOnly attribute to true in the httpSession element in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <httpSession cookieHttpOnly=\"true\" /> Default Value: The default value is set to true References: 1. https://openliberty.io/docs/latest/reference/config/httpSession.html",
    "function_names": [
      "cloud_cdn_cookie_http_only_enabled",
      "compute_cookie_http_only_enabled",
      "load_balancer_cookie_http_only_enabled",
      "web_app_cookie_http_only_enabled",
      "api_gateway_cookie_http_only_enabled",
      "session_cookie_http_only_enabled",
      "cookie_http_only_attribute_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpSession.html"
  },
  {
    "id": "4.1.1.3",
    "title": "Ensure 'cookieDomain' cookie domain name attribute is set for the session cookies.",
    "assessment": "Automated",
    "description": "The domain name attribute in a cookie specifies which hosts can receive the cookie.",
    "rationale": "Ensure the JSESSIONID cookie is sent to the correct domain by configuring the domain name. This will prevent the cookie to be sent to servers in other domains.",
    "audit": "Ensure the cookieDomain attribute in the httpSession element is set to the appropriate domain in the Liberty configuration grep -w -R -i 'cookieDomain' ${server.config.dir}",
    "remediation": "Set the cookieDomain attribute in the httpSession element to the appropriate domain name in the ${server.config.dir}/configDropins/overrides/<any file name>.xml For Example, \"mySubDomain.myCompany.com\" <httpSession cookieDomain=\"mySubDomain.myCompany.com\" /> References: 1. https://openliberty.io/docs/latest/reference/config/httpSession.html",
    "function_names": [
      "cloud_cdn_cookie_domain_set",
      "cloud_cdn_session_cookie_domain_set",
      "cloud_cdn_cookie_domain_attribute_set",
      "cloud_cdn_session_cookie_domain_attribute_set",
      "cloud_cdn_cookie_domain_restricted",
      "cloud_cdn_session_cookie_domain_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpSession.html"
  },
  {
    "id": "4.1.1.4",
    "title": "Ensure 'cookieSecure' secure attribute is set to 'true'",
    "assessment": "Automated",
    "description": "The secure flag on a cookie will restrict the browser to send the cookies only on encrypted channels like HTTPS.",
    "rationale": "Cookies with the secure flag will only be sent over encrypted HTTPS requests.",
    "audit": "Ensure cookieSecure is set to true in the httpSession element in the Liberty configuration grep -w -R -i 'cookieSecure' ${server.config.dir}",
    "remediation": "Set the cookieSecure attribute to true in the httpSession element in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <httpSession cookieSecure=\"true\"/> Default Value: The default value is false References: 1. https://openliberty.io/docs/latest/reference/config/httpSession.html",
    "function_names": [
      "cloud_cdn_cookie_secure_enabled",
      "cloud_cdn_cookie_secure_flag_set",
      "cloud_cdn_cookie_https_only",
      "cloud_cdn_cookie_secure_attribute_true",
      "cloud_cdn_cookie_encrypted_transfer_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpSession.html"
  },
  {
    "id": "4.1.2.1",
    "title": "Ensure 'sameSiteCookie' attribute is set to 'Strict'",
    "assessment": "Manual",
    "description": "The SameSite attribute is used by web browsers to determine if a particular cookie should be sent with a request. Setting this attribute can help protect against Cross Site Request Forgery (CSRF) attacks. It is recommended to set the SameSite attribute to Strict. A Strict value for the SameSite attribute ensures the cookie is only sent by the web browser if the site for the cookie matches the site in the address bar, for example.",
    "rationale": "Cookies without a SameSite attribute are treated as if they have the SameSite attribute value of Lax for some browsers.",
    "audit": "Ensure the sameSiteCookie attribute is set to Strict in the webAppSecurity element in the Liberty configuration grep -w -R -i 'sameSiteCookie' ${server.config.dir}",
    "remediation": "Add the sameSiteCookie attribute to the webAppSecurity element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. Set the sameSiteCookie value to Strict. <webAppSecurity sameSiteCookie=\"Strict\"/> Default Value: The default value is Disabled. References: 1. https://openliberty.io/blog/2020/03/25/set-samesite-attribute-cookies-liberty.html",
    "function_names": [
      "cloud_cdn_cookie_same_site_strict",
      "cloud_cdn_cookie_same_site_attribute_strict",
      "cloud_cdn_cookie_csrf_protection_strict",
      "cloud_cdn_cookie_same_site_secure",
      "cloud_cdn_cookie_same_site_enabled_strict"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/blog/2020/03/25/set-samesite-attribute-cookies-liberty.html"
  },
  {
    "id": "4.1.2.2",
    "title": "Ensure 'ssoDomainNames' attribute is configured for the authentication cookies.",
    "assessment": "Automated",
    "description": "The domain name attribute in a cookie specifies which hosts can receive the cookie.",
    "rationale": "Cookies that have their domain attribute set to a specific domain will only be sent to the hosts in that domain or sub-domain which helps in controlling its propagation.",
    "audit": "Ensure the ssoDomainNames attribute in the webAppSecurity element is set to the appropriate domain name in the Liberty configuration grep -w -R -i 'ssoDomainNames' ${server.config.dir}",
    "remediation": "Add the appropriate domain name to the ssoDomainNames attribute in the webAppSecurity element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. For example, to add mySubDomain.myCompany.com <webAppSecurity ssoDomainNames=\"mySubDomain.myCompany.com\"/> References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "cloudfront_distribution_sso_domain_names_configured",
      "cloudfront_distribution_auth_cookie_domain_restricted",
      "cloudfront_distribution_sso_cookie_domain_set",
      "cloudfront_distribution_auth_cookie_domain_configured",
      "cloudfront_distribution_sso_domain_names_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.1.2.3",
    "title": "Ensure 'setCookieSecureFlag' secure attribute is set to 'true' for the `JWT` cookie.",
    "assessment": "Automated",
    "description": "The secure flag on a cookie will restrict the browser to send the cookies only on encrypted channels like HTTPS.",
    "rationale": "Cookies with the secure attribute set will only be sent over encrypted HTTPS requests.",
    "audit": "Ensure the setCookieSecureFlag attribute in the jwtSso element is set to true in the Liberty configuration grep -w -R -i 'setCookieSecureFlag' ${server.config.dir}",
    "remediation": "Set the setCookieSecureFlag attribute to true in the jwtSso element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <jwtSso setCookieSecureFlag=\"true\"/> Default Value: The default value is true. References: 1. https://openliberty.io/docs/latest/reference/config/jwtSso.html",
    "function_names": [
      "cloud_cdn_jwt_cookie_secure_flag_enabled",
      "cloud_cdn_jwt_cookie_set_cookie_secure_enabled",
      "cloud_cdn_jwt_cookie_https_only_enabled",
      "cloud_cdn_jwt_cookie_secure_attribute_enabled",
      "cloud_cdn_jwt_cookie_secure_transport_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/jwtSso.html"
  },
  {
    "id": "4.1.2.4",
    "title": "Ensure 'ssoRequiresSSL' secure attribute is set to 'true' for the LTPA Cookies",
    "assessment": "Automated",
    "description": "Cookies with the secure flag will only be sent over encrypted HTTPS requests.",
    "rationale": "Transport cookies over a secure TLS connection to avoid clear text transmission of the cookie information. A stolen cookie by a third-party intruder can allow them to act as that user until it expires",
    "audit": "Ensure the ssoRequiresSSL attribute is set to true in the webAppSecurity element in the Liberty configuration grep -w -R -i 'ssoRequiresSSL' ${server.config.dir}",
    "remediation": "Set the ssoRequiresSSL attribute is set to true in the webAppSecurity element on ${server.config.dir}/configDropins/overrides/*.xml <webAppSecurity ssoRequiresSSL=\"true\" /> References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "security_cookie_sso_requires_ssl_enabled",
      "security_cookie_secure_attribute_enabled",
      "security_cookie_https_only_enabled",
      "security_cookie_ltpa_secure_flag_enabled",
      "security_cookie_encryption_required_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.1.2.5",
    "title": "Ensure 'ssoCookieName' LTPA cookie name is set",
    "assessment": "Automated",
    "description": "The server will authenticate only the LTPA cookie name that is configured. When the request contains other LTPA cookie names, they will be ignored.",
    "rationale": "Changing the LTPA cookie name helps make the cookie uniquely usable across multiple Liberty servers. It also helps hides the intended use of the cookie which helps prevent a bad actor from knowing how to try and misuse the cookie.",
    "audit": "Ensure the ssoCookieName attribute in the webAppSecurity is set to something other than LtpaToken2 in the Liberty configuration grep -w -R -i 'ssoCookieName' ${server.config.dir} Also, Ensure the useOnlyCustomCookieName attribute in the webAppSecurity is set to true in the Liberty configuration grep -w -R -i 'useOnlyCustomCookieName' ${server.config.dir}",
    "remediation": "Set the ssoCookieName attribute to something other than LtpaToken2 in the webAppSecurity in the ${server.config.dir}/configDropins/overrides/*.xml For Example, obscureCookieName2 <webAppSecurity ssoCookieName=\"obscureCookieName2\" /> Set the useOnlyCustomCookieName attribute to true in the webAppSecurity in the ${server.config.dir}/configDropins/overrides/*.xml <webAppSecurity useOnlyCustomCookieName=\"true\" /> Default Value: \u2022 The ssoCookieName attribute has a default value of LtpaToken2. \u2022 The useOnlyCustomCookieName attribute is set to false by default. References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "security_sso_cookie_name_configured",
      "security_sso_cookie_name_ltpa_set",
      "security_sso_cookie_name_valid",
      "security_sso_cookie_name_restricted",
      "security_sso_cookie_name_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.1.2.6",
    "title": "Ensure 'httpOnlyCookies' HttpOnly attribute is set to 'True' for the authentication cookies",
    "assessment": "Automated",
    "description": "The HttpOnly attribute on a cookie prevents the cookie from being accessed by the client side scripts.",
    "rationale": "Preventing client-side scripts from accessing authentication cookies helps prevent Cross-Site Scripting (XSS) attacks.",
    "audit": "Ensure the httpOnlyCookies attribute in the webAppSecurity is set to true in the Liberty configuration grep -w -R -i 'httpOnlyCookies' ${server.config.dir}",
    "remediation": "Set the httpOnlyCookies attribute to true in the webAppSecurity in the ${server.config.dir}/configDropins/overrides/*.xml <webAppSecurity httpOnlyCookies=\"true\" /> References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "app_engine_app_http_only_cookies_enabled",
      "app_engine_app_auth_cookie_http_only_set",
      "app_engine_app_cookie_http_only_attribute_true",
      "app_engine_app_auth_cookie_secure_config",
      "app_engine_app_http_only_cookie_compliance"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.1.2.7",
    "title": "Ensure 'trackLoggedOutSSOCookies' is set to 'true'",
    "assessment": "Automated",
    "description": "The trackLoggedOutSSOCookies attribute keeps track of the LTPA cookies that are logged out in a running server.",
    "rationale": "Prevent the misuse of LTPA tokens after users have logged out.",
    "audit": "Ensure the trackLoggedOutSSOCookies attribute in the webAppSecurity element is set to true in the Liberty configuration grep -w -R -i 'trackLoggedOutSSOCookies' ${server.config.dir}",
    "remediation": "Set trackLoggedOutSSOCookies to true in the webAppSecurity element in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <webAppSecurity trackLoggedOutSSOCookies=\"true\" /> Default Value: The default value of trackLoggedOutSSOCookies is false References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "security_settings_ltpa_cookies_tracking_enabled",
      "security_settings_sso_cookies_logout_tracking_enabled",
      "security_settings_logged_out_cookies_tracking_enabled",
      "security_settings_track_logged_out_sso_cookies_enabled",
      "security_settings_sso_session_cookies_tracking_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.1.2.8",
    "title": "Ensure 'cookieName' JWT (JSON Web Token) cookie name is set",
    "assessment": "Automated",
    "description": "The server will authenticate only the JWT cookie name that is configured. When the request contains other JWT cookie names, they will be ignored.",
    "rationale": "Changing the JWT cookie name helps make the cookie uniquely usable across multiple Liberty servers. It also helps hides the intended use of the cookie which helps prevent a bad actor from knowing how to try and misuse the cookie.",
    "audit": "Ensure the cookieName attribute in the jwtSso element is set to anything except JWT in the Liberty configuration grep -w -R -i 'cookieName' ${server.config.dir} Also, Ensure the useOnlyCustomCookieName attribute in the webAppSecurity is set to true in the Liberty configuration grep -w -R -i 'useOnlyCustomCookieName' ${server.config.dir}",
    "remediation": "Set the cookieName attribute to any obscure value in jwtSso element in the ${server.config.dir}/configDropins/overrides/*.xml For Example, \"obscuredCookieName2\" <jwtSso cookieName=\"obscuredCookieName2\" /> Set the useOnlyCustomCookieName attribute to true in the webAppSecurity in the ${server.config.dir}/configDropins/overrides/*.xml <webAppSecurity useOnlyCustomCookieName=\"true\" /> Default Value: \u2022 The cookieName attribute has a default value of JWT. \u2022 The useOnlyCustomCookieName attribute is set to false by default.  References: 1. https://openliberty.io/docs/latest/reference/config/jwtSso.html 2. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html 4.1.3 Securing Other Cookies",
    "function_names": [
      "jwt_cookie_name_configured",
      "jwt_cookie_name_set",
      "jwt_cookie_name_valid",
      "jwt_cookie_name_not_default",
      "jwt_cookie_name_customized",
      "jwt_cookie_name_enforced",
      "jwt_cookie_name_restricted",
      "jwt_cookie_name_single_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/jwtSso.html 2. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html 4.1.3 Securing Other Cookies"
  },
  {
    "id": "4.1.3.1",
    "title": "Ensure 'samesite' SameSite attribute is set to 'Strict' for additional cookies",
    "assessment": "Automated",
    "description": "The SameSite attribute is used by web browsers to determine if a particular cookie should be sent with a request. Setting this attribute can help protect against Cross Site Request Forgery (CSRF) attacks. It is recommended to set the SameSite attribute to Strict. A Strict value for the SameSite attribute ensures the cookie is only sent by the web browser if the site for the cookie matches the site in the address bar for example.",
    "rationale": "Cookies without a SameSite attribute are treated as if they have the SameSite attribute value of Lax for some browsers.",
    "audit": "Ensure all other defined cookie names are added to the Strict attribute comma- separated list (or * is used to include all cookies) in the samesite element used by the httpEndPoint element in the Liberty configuration. grep -w -R -i 'samesite' ${server.config.dir}",
    "remediation": "Set the strict attribute to * in the samesite element in the httpEndpoint element in ${server.config.dir}/configDropins/overrides/*.xml. <httpEndpoint ... <samesite strict=\"*\"/> </httpEndpoint> References: 1. https://openliberty.io/blog/2020/03/25/set-samesite-attribute-cookies-liberty.html 4.2 Secure Transport",
    "function_names": [
      "cloud_cdn_cookie_samesite_strict",
      "compute_cookie_samesite_strict",
      "web_app_cookie_samesite_strict",
      "load_balancer_cookie_samesite_strict",
      "api_gateway_cookie_samesite_strict",
      "cloudfront_cookie_samesite_strict",
      "web_server_cookie_samesite_strict",
      "application_cookie_samesite_strict",
      "http_cookie_samesite_strict",
      "security_cookie_samesite_strict"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/blog/2020/03/25/set-samesite-attribute-cookies-liberty.html 4.2 Secure Transport"
  },
  {
    "id": "4.2.1",
    "title": "Ensure 'trustDefaultCerts' is set to 'false'",
    "assessment": "Automated",
    "description": "The default certificates from the Java runtime are trusted by the server in addition to the certificates configured in the SSL/TLS configurations in the server.",
    "rationale": "Restricting the certificates trusted by the server to only the SSL/TLS configurations in the server in a production environment eliminates the risk of trusting other certificates when making outbound secure connections.",
    "audit": "Ensure the trustDefaultCerts attribute is set to false in all ssl elements in the Liberty configuration. grep -w -R -i 'trustDefaultCerts' ${server.config.dir}",
    "remediation": "Add the trustDefaultCerts attribute to all ssl elements to ${server.config.dir}/configDropins/overrides/*.xml and set the value to false. <ssl trustDefaultCerts=\"false\" /> Default Value: The default configuration templates provided by WebSphere Liberty trust public certificates from the Java runtime by default, the templates set the trustDefaultCerts attribute to true. References: 1. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html 2. https://openliberty.io/docs/latest/reference/config/ssl.html",
    "function_names": [
      "compute_ssl_certificate_trust_default_disabled",
      "compute_server_trust_default_certs_disabled",
      "compute_tls_configuration_default_certs_untrusted",
      "compute_java_runtime_trust_default_disabled",
      "compute_ssl_trust_default_certs_false"
    ],
    "profile_applicability": "\u2022  Level 2",
    "references": "1. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html 2. https://openliberty.io/docs/latest/reference/config/ssl.html"
  },
  {
    "id": "4.2.2",
    "title": "Ensure 'sslProtocol' is set to the latest versions of TLS (Transport Layer Security)",
    "assessment": "Automated",
    "description": "The latest versions of TLS provide drop support for less secure cryptographic features and add support for more advanced cryptographic algorithms.",
    "rationale": "TLS 1.2 and higher versions are recommended for secure communication.",
    "audit": "Review the TLS version level set by the of the sslProtocol attribute in all ssl elements in the Liberty configuration. grep -w -R -i 'sslProtocol' ${server.config.dir}",
    "remediation": "Set the sslProtocol attribute version to the latest supported level in all ssl elements to ${server.config.dir}/configDropins/overrides/*.xml. <ssl ... sslProtocol=\"TLSv1.2\" /> Default Value: In WebSphere Liberty, when using the IBM JRE the default version is SSL_TLSv2 and when using the Oracle JRE the default value is SSL when transport security is enabled. References: 1. https://openliberty.io/docs/latest/reference/config/ssl.html 2. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html",
    "function_names": [
      "cloud_cdn_distribution_ssl_protocol_min_tls_1_2",
      "cloud_cdn_distribution_ssl_protocol_min_tls_1_3",
      "cloud_cdn_distribution_ssl_protocol_no_weak_versions",
      "cloud_cdn_distribution_ssl_protocol_latest_versions_enabled",
      "cloud_cdn_distribution_ssl_protocol_secure_ciphers_only"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/ssl.html 2. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html"
  },
  {
    "id": "4.2.3",
    "title": "Ensure HSTS (HTTP Strict Transport Security) is enabled",
    "assessment": "Automated",
    "description": "The HSTS response header informs browsers that the site should only be accessed using HTTPS, and that any future attempts to access it using HTTP should automatically be converted to HTTPS.",
    "rationale": "Enabling HSTS helps mitigate passive eavesdropper and active man-in-the-middle (MITM) attacks.",
    "audit": "Ensure the addstricttransportsecurityheader attribute is set in the webContainer element in the Liberty configuration grep -w -R -i 'addstricttransportsecurityheader' ${server.config.dir} If it is not set in the Liberty configuration above, then check if it is set for individual apps in the web.xml files for each application. grep -w -R -i 'ADD_STS_HEADER_WEBAPP' ${server.config.dir}",
    "remediation": "Set the addstricttransportsecurityheader attribute in the webContainer element in the ${server.config.dir}/configDropins/overrides/*.xml as follows: <webContainer addstricttransportsecurityheader=\"max- age=31536000;includeSubDomains\" /> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=slia-securing-liberty-by- using-http-strict-transport-security-hsts",
    "function_names": [
      "cloud_cdn_distribution_hsts_enabled",
      "cloud_cdn_domain_hsts_enabled",
      "cloud_cdn_origin_hsts_enabled",
      "cloud_cdn_response_header_hsts_enabled",
      "cloud_cdn_security_policy_hsts_enabled",
      "cloud_cdn_cache_behavior_hsts_enabled",
      "cloud_cdn_viewer_policy_hsts_enabled",
      "cloud_cdn_custom_header_hsts_enabled",
      "cloud_cdn_default_policy_hsts_enabled",
      "cloud_cdn_edge_policy_hsts_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=slia-securing-liberty-by- using-http-strict-transport-security-hsts"
  },
  {
    "id": "4.2.4",
    "title": "Ensure that outbound TLS configurations are specified",
    "assessment": "Automated",
    "description": "If there are no specific SSL/TLS configurations configured for outbound TLS connections the common TLS configurations are used by both the inbound and outbound connections.",
    "rationale": "Configure additional TLS configuration elements for outbound connections with listed hostnames and ports allows to separate the TLS connection configurations for outbound calls for more fine grain control.",
    "audit": "Ensure the outboundSSLRef attribute is set to a valid ssl configuration on the sslDefault element in the Liberty configuration. grep -w -R -i 'outboundSSLRef' ${server.config.dir} Also ensure that host and port attributes are set on outboundConnection elements for all ssl elements used for outbound requests. grep -w -R -i 'outboundConnection' ${server.config.dir}",
    "remediation": "Add the outboundSSLRef attribute to the sslDefault elements to ${server.config.dir}/configDropins/overrides/*.xml and set the value to a valid ssl configuration id. <sslDefault outboundSSLRef=\"alternateSSLSettings\" /> Also add host and port attributes on the outboundConnection elements for all ssl elements used for outbound requests to ${server.config.dir}/configDropins/overrides/*.xml and set the values to hosts and ports used by the application or server. <ssl id=\"alternateSSLSettings\" ... <outboundConnection host=\"hostname1\" port=\"020\" /> <outboundConnection host=\"hostname2\" port=\"9020\" /> </ssl>  References: 1. https://openliberty.io/docs/latest/reference/config/ssl.html 2. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html",
    "function_names": [
      "cloud_cdn_domain_outbound_tls_specified",
      "cloud_cdn_domain_outbound_tls_configured",
      "cloud_cdn_domain_outbound_tls_customized",
      "cloud_cdn_domain_outbound_tls_explicit",
      "cloud_cdn_domain_outbound_tls_defined",
      "cloud_cdn_domain_outbound_tls_min_version",
      "cloud_cdn_domain_outbound_tls_protocol_set",
      "cloud_cdn_domain_outbound_tls_cipher_suite_configured",
      "cloud_cdn_domain_outbound_tls_security_policy_applied",
      "cloud_cdn_domain_outbound_tls_compliance_standard_met"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/ssl.html 2. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html"
  },
  {
    "id": "4.2.5",
    "title": "Ensure that secure ciphers suites are configured",
    "assessment": "Automated",
    "description": "A cipher suite includes a set of algorithms used when making secure TLS connections. Strong cipher suites contain more secure algorithms.",
    "rationale": "WebSphere Liberty provides groups of different strength cipher suites to use for the TLS handshake. The highest cipher group or a custom cipher list should be used for secure communication.",
    "audit": "Ensure the securityLevel attribute is set to HIGH in all ssl elements in the Liberty configuration. grep -w -R -i 'securityLevel' ${server.config.dir} Or ensure the enabledCiphers attribute is set to a customized list of ciphers in all ssl elements. The enabledCiphers attribute overrides the securityLevel attribute. grep -w -R -i 'enabledCiphers' ${server.config.dir} For either configuration above, ensure the enforceCipherOrder attribute is set to true. grep -w -R -i 'enforceCipherOrder' ${server.config.dir}",
    "remediation": "Add the securityLevel attribute to all ssl elements to ${server.config.dir}/configDropins/overrides/*.xml and set the value to HIGH. Also add the enforceCipherOrder attribute and set the value to true. <ssl ... securityLevel=\"HIGH\" enforceCipherOrder=\"true\" /> Or add the enabledCiphers attribute to all ssl elements to ${server.config.dir}/configDropins/overrides/*.xml and set the value to space separated list of appropriate strong ciphers in the preferred order. For example, <ssl ... enabledCiphers=\"TLS_AES_256_GCM_SHA384 SSL_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 SSL_ECDHE_RSA_WITH_AES_256_GCM_SHA384\" enforceCipherOrder=\"true\" />  Default Value: WebSphere Liberty sets the securityLevel attribute to HIGH and the enforceCipherOrder attribute is set to false by default. References: 1. https://openliberty.io/docs/latest/reference/config/ssl.html 2. https://www.ibm.com/docs/en/sdk-java-technology/8?topic=suites-cipher 3. https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard- names.html#jsse-cipher-suite-names",
    "function_names": [
      "cloud_cdn_ssl_certificate_secure_cipher_suites",
      "compute_load_balancer_secure_cipher_suites",
      "cloudfront_distribution_secure_cipher_suites",
      "api_gateway_domain_secure_cipher_suites",
      "elastic_load_balancing_secure_cipher_suites",
      "cloud_cdn_secure_cipher_suites_min_tls_1_2",
      "compute_ssl_certificate_secure_cipher_suites",
      "network_load_balancer_secure_cipher_suites",
      "application_load_balancer_secure_cipher_suites",
      "cloud_cdn_secure_cipher_suites_no_weak_algorithms"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/ssl.html 2. https://www.ibm.com/docs/en/sdk-java-technology/8?topic=suites-cipher 3. https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard- names.html#jsse-cipher-suite-names"
  },
  {
    "id": "4.2.6",
    "title": "Ensure 'transport-guarantee' is set to 'CONFIDENTIAL' for all web applications",
    "assessment": "Automated",
    "description": "The transport-guarantee setting of CONFIDENTIAL will enforce that the application can only be accessed through HTTPS secure connection. HTTPS protocol protects the integrity and confidentiality of data between the client and the server.",
    "rationale": "Applications should set the transport guarantee to CONFIDENTIAL to enforce TLS secure communication when accessing the application.",
    "audit": "Ensure the transport-guarantee attribute in the user-data-constraint element on the security-constraint element in all applications' /WEB-INF/web.xml files is set to CONFIDENTIAL. Applications may also be in the ${server.config.dir}/dropins directory or a custom location. grep -w -R -i 'transport-guarantee' ${wlp.user.dir}/shared/apps/ For legacy web applications, the transport guarantee can also be set in the ibm-web- ext.xml or ibm-web-ext.xmi files. Note: The security-constraints can also be set in the code using annotations like @ServletSecurity.TransportGuarantee",
    "remediation": "Add the transport-guarantee attribute to user-data-constraint element under the security-constraint in ${wlp.user.dir}/shared/apps/WEB-INF/web.xml and set the value to CONFIDENTIAL. <security-constraint> ... <user-data-constraint> <transport-guarantee>CONFIDENTIAL</transport-guarantee> </user-data-constraint> Note: The security-constraints can also be set in the code using annotations like @ServletSecurity.TransportGuarantee Default Value: WebSphere Liberty does not set a transport guarantee for applications by default. References: 1. https://openliberty.io/docs/latest/application-configuration-hardening.html",
    "function_names": [
      "app_engine_web_app_transport_guarantee_confidential",
      "web_app_https_enforced",
      "app_engine_web_app_https_only",
      "web_app_secure_transport_required",
      "app_engine_web_app_tls_required",
      "web_app_confidential_transport_guarantee",
      "app_engine_web_app_secure_connection_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/application-configuration-hardening.html"
  },
  {
    "id": "4.2.7",
    "title": "Ensure Hostname verification for TLS communication is enabled",
    "assessment": "Automated",
    "description": "Hostname verification is a server identity check that is used to ensure that a client is talking to the correct server. The check is performed on the client side of an SSL communication and involves looking at the server\u2019s certificate Subject Alternative Name (or the SubjectDN) to see if it matches the host part of the URL that was used to make the outbound request.",
    "rationale": "Hostname verification mitigates man-in-the-middle security vulnerability attacks.",
    "audit": "Ensure the verifyHostname attribute is set to true in the SSL configuration in the Liberty configuration. grep -w -R 'verifyHostname' ${server.config.dir} For JAX-RS client applications ensure the disableCNCheck attribute is set to false in the webTarget element. grep -w -R 'disableCNCheck' ${server.config.dir}",
    "remediation": "Enable hostname verification in the SSL configuration by adding the verifyHostname attribute to the ssl configuration element in ${server.config.dir}/configDropins/overrides/<any file name>.xml <ssl ... verifyHostname=\"true\" /> For JAX-RS client, enable hostname verification in the webTarget element by adding the disableCNCheck attribute in ${server.config.dir}/configDropins/overrides/<any file name>.xml <webTarget ... disableCNCheck=\"false\" /> Default Value: \u2022 The default value of the verifyHostname attribute is false \u2022 The default value of the disableCNCheck attribute is false References: 1. https://openliberty.io/blog/2019/06/21/microprofile-rest-client-19006.html 2. https://openliberty.io/docs/latest/reference/config/ssl.html",
    "function_names": [
      "compute_instance_hostname_verification_enabled",
      "compute_instance_tls_hostname_verification_enabled",
      "compute_instance_secure_hostname_verification_enabled",
      "compute_instance_certificate_hostname_verification_enabled",
      "compute_instance_tls_certificate_validation_enabled",
      "compute_instance_secure_tls_communication_enabled",
      "compute_instance_tls_server_identity_check_enabled",
      "compute_instance_tls_hostname_validation_enabled",
      "compute_instance_tls_certificate_subject_validation_enabled",
      "compute_instance_tls_certificate_san_validation_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/blog/2019/06/21/microprofile-rest-client-19006.html 2. https://openliberty.io/docs/latest/reference/config/ssl.html"
  },
  {
    "id": "4.2.8",
    "title": "Ensure that CA (Certificate Authority) certificates are used",
    "assessment": "Automated",
    "description": "SSL/TLS certificates are used to establish trust during the secure communications. Certificates can be a simple self-signed cert or can be from a well established or known CA authority.",
    "rationale": "Using trusted Certificate Authority (CA) signed certificates for TLS communications mitigates against using untrusted or revoked certificates and eliminates warning messages in the browser.",
    "audit": "Ensure that Owner and Issuer values are not the same, which typically implies that the certificate is not be self signed. Other information in the certificate can also confirm this. keytool -list -v -keystore <keystore file name> -storepass <store password> - storetype <store type> | grep 'Owner\\|Issuer'",
    "remediation": "Add non self signed CA certificates as described here.",
    "function_names": [
      "cloud_cdn_ssl_certificate_ca_authority_used",
      "compute_ssl_certificate_ca_authority_used",
      "load_balancer_ssl_certificate_ca_authority_used",
      "cloudfront_ssl_certificate_ca_authority_used",
      "api_gateway_ssl_certificate_ca_authority_used",
      "cloud_run_ssl_certificate_ca_authority_used",
      "app_engine_ssl_certificate_ca_authority_used",
      "cloud_functions_ssl_certificate_ca_authority_used"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "4.2.9",
    "title": "Ensure 'ocsp.enable' certificate revocation is set to 'true'",
    "assessment": "Automated",
    "description": "Certificate revocation is the process of canceling the digital certificate of the revoked user and keeping track of them.",
    "rationale": "Enabling certificate revocation prevents use of revoked certificates.",
    "audit": "Ensure the ocsp.enable variable is set to true in java.security file. grep 'ocsp.enable' $JAVA_HOME/jre/lib/security/java.security",
    "remediation": "Add ocsp.enable=true in $JAVA_HOME/jre/lib/security/java.security file. ocsp.enable=true Default Value: Default value depends on JDK distribution.",
    "function_names": [
      "cloud_cdn_ssl_certificate_ocsp_enabled",
      "cloud_cdn_certificate_revocation_enabled",
      "cloud_cdn_ssl_certificate_ocsp_validation_enabled",
      "cloud_cdn_certificate_ocsp_check_enabled",
      "cloud_cdn_ssl_certificate_revocation_check_enabled"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "4.2.10",
    "title": "Ensure mutual TLS authentication is enabled",
    "assessment": "Automated",
    "description": "Mutual TLS authentication requires that both the server and the client authenticate to the other during SSL/TLS handshake.",
    "rationale": "Mutual authentication, also known as two-way authentication, is certificate-based authentication for clients. Use of mutual TLS authentication whenever possible is recommended.",
    "audit": "Ensure the clientAuthentication attribute in the ssl element is set to true and the trustedHeaderOrigin attribute in httpDispatcher element is set to appropriate value in the Liberty configuration . grep -w -R 'clientAuthentication' ${server.config.dir} grep -w -R 'trustedHeaderOrigin' ${server.config.dir}",
    "remediation": "Add these settings to ${server.config.dir}/configDropins/overrides/<any file name>.xml for direct login to WebSphere Liberty. <httpDispatcher ... trustedHeaderOrigin=\u201cnone\u201d/> <ssl ... clientAuthentication=\"true\" /> For login in conjunction with a proxy, add the following. Replace the ip addresses with your values. <httpDispatcher ... trustedHeaderOrigin=\u201c10.20.30.40, 10.20.50.60\u201d/> <ssl ... clientAuthentication=\"true\" /> References: 1. https://www.ibm.com/support/pages/how-setup-liberty-use-certificate-based- authentication",
    "function_names": [
      "cloud_cdn_domain_mutual_tls_enabled",
      "cloud_cdn_endpoint_mutual_tls_enabled",
      "cloud_cdn_origin_mutual_tls_enabled",
      "cloud_cdn_api_mutual_tls_enabled",
      "cloud_cdn_load_balancer_mutual_tls_enabled",
      "cloud_cdn_ssl_certificate_mutual_tls_enabled",
      "cloud_cdn_client_authentication_mutual_tls_enabled",
      "cloud_cdn_server_authentication_mutual_tls_enabled",
      "cloud_cdn_tls_handshake_mutual_auth_enabled",
      "cloud_cdn_secure_connection_mutual_tls_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "references": "1. https://www.ibm.com/support/pages/how-setup-liberty-use-certificate-based- authentication"
  },
  {
    "id": "4.2.11",
    "title": "Ensure that strong algorithms are used for TLS certificates.",
    "assessment": "Manual",
    "description": "Certificates created with stronger algorithms use stronger hashes which is more secure. Also, some browsers warn when using weak certificates.",
    "rationale": "With increased CPU speeds and computing power of computers, some algorithms are not secure to use in production systems anymore such as SHA1 or MD5. On top of that, even for accepted algorithms such as SHA256 or higher, key sizes need to be higher than 2048 bits. Weak algorithms and small key sizes are not secure.",
    "audit": "Ensure that Signature algorithm name is SHA256 or higher and Subject Public Key Algorithm is equal or higher than 2048 bit. keytool -list -v -keystore <keystore file name> -storepass <store password> - storetype <store type> | grep 'Signature algorithm name\\|Subject Public Key Algorithm' ... Signature algorithm name: SHA256withRSA Subject Public Key Algorithm: 2048-bit RSA key ...",
    "remediation": "Create certificates with SHA256 or higher algorithm and 2048 or higher key bit size.",
    "function_names": [
      "cloud_cdn_ssl_certificate_strong_algorithm",
      "compute_ssl_certificate_strong_algorithm",
      "cloudfront_ssl_certificate_strong_algorithm",
      "load_balancer_ssl_certificate_strong_algorithm",
      "api_gateway_ssl_certificate_strong_algorithm",
      "cloud_cdn_ssl_certificate_min_tls_1_2",
      "compute_ssl_certificate_min_tls_1_2",
      "cloudfront_ssl_certificate_min_tls_1_2",
      "load_balancer_ssl_certificate_min_tls_1_2",
      "api_gateway_ssl_certificate_min_tls_1_2"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "4.2.12",
    "title": "Ensure `httpPort` attribute set to `-1`",
    "assessment": "Automated",
    "description": "Disabling the http port in the server configuration ensures that only the secure https protocol will be used to access the web applications. HTTPS protocol protects the integrity and confidentiality of data between the client and the server.",
    "rationale": "Disabling the HTTP port forces communication to use the HTTPS port which is encrypted to give better defense against man-in-the-middle attacks.",
    "audit": "Ensure the httpPort attribute in the httpEndpoint element is set to \"-1\" in Liberty configuration. grep -w -R 'httpPort' ${server.config.dir}",
    "remediation": "Set the httpPort attribute to -1 in the httpEndpoint element in ${server.config.dir}/configDropins/overrides/*.xml. <httpEndpoint ... httpPort=\"-1\"/> References: 1. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html",
    "function_names": [
      "compute_server_http_port_disabled",
      "compute_server_https_only_enabled",
      "compute_server_insecure_port_blocked",
      "compute_server_secure_port_only",
      "compute_server_http_port_set_invalid"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/feature/transportSecurity-1.0.html"
  },
  {
    "id": "4.2.13",
    "title": "Ensure that hardware crypto cards/modules (HSM) are used to store SSL/TLS certificates",
    "assessment": "Manual",
    "description": "Hardware security modules (HSMs) are hardened, tamper-resistant hardware devices that secure cryptographic processes by generating, protecting, and managing keys used for encrypting and decrypting data and creating digital signatures and certificates.",
    "rationale": "Using hardware security modules (HSM) to store and use certificates for the SSL/TLS communication provides greater security. Impact: Hardware crypto cards/modules are external devices that can store certificates that can be used for the SSL/TLS communications. They store and protect the cryptographic keys throughout their lifecycles. The use of these devices have to be weighed against the security requirements and the additional expenses this would entail. The specific configuration needed to support depends on the crypto card and JDK. The following applies when using the IBM JDK and when the keyStore type is PKCS11.",
    "audit": "Ensure that the location attribute is set to the specific hardware crypto configuration file. In addition ensure that type attribute is set to PKCS11. Both these are under the keyStore element of the SSL configuration in the Liberty configuration. grep -w -R -i 'location' ${server.config.dir} grep -w -R -i 'type' ${server.config.dir}",
    "remediation": "Configure the location attribute to the specific hardware crypto card configuration file. In addition configure the type attribute to PKCS11. Both these attributes are in the keyStore element used by the SSL configuration in ${server.config.dir}/configDropins/overrides/*.xml. In this example, the HWCryto.cfg contains the hardware crypto configuration information. <keyStore id=\"hwKeyStore\" location=\"${server.config.dir}/HWCrypto.cfg\" type=\"PKCS11\" fileBased=\"false\" provider=\"IBMPKCS11Impl\" ... /> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-keystores",
    "function_names": [
      "cloud_cdn_ssl_certificate_hsm_required",
      "compute_ssl_certificate_hsm_required",
      "cloudfront_ssl_certificate_hsm_required",
      "load_balancer_ssl_certificate_hsm_required",
      "cloud_hsm_ssl_certificate_stored",
      "ssl_certificate_hsm_backed",
      "cloud_crypto_ssl_certificate_hsm_enabled",
      "cloud_security_ssl_certificate_hsm_protected"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Hardware crypto cards/modules are external devices that can store certificates that can be used for the SSL/TLS communications. They store and protect the cryptographic keys throughout their lifecycles. The use of these devices have to be weighed against the security requirements and the additional expenses this would entail. The specific configuration needed to support depends on the crypto card and JDK. The following applies when using the IBM JDK and when the keyStore type is PKCS11.",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-keystores"
  },
  {
    "id": "4.2.14",
    "title": "Ensure SP800-131a recommendation is used for stronger cryptographic keys and more robust algorithms.",
    "assessment": "Manual",
    "description": "The National Institute of Standards and Technology (NIST) SP800-131a recommendation enforces stronger cryptographic keys and more robust algorithms.",
    "rationale": "The NIST recommendation (SP 800-131A) provides more specific guidance to the use of stronger cryptographic keys and more robust algorithms for SSL/TLS connections and is recommended to be used if it is appropriate for your environment.",
    "audit": "The SP800-131a recommendation can be enforced by setting the system property com.ibm.jsse2.sp800-131 to strict when using IBM JDK. For other JDKs, follow their specific instructions. Set com.ibm.jsse2.sp800-131=strict in the jvm.options file. More information on how to set the system properties provided in the reference section. grep -w -R -i 'com.ibm.jsse2.sp800-131=strict' ${server.config.dir}",
    "remediation": "Configure the system property -Dcom.ibm.jsse2.sp800-131 to strict in the jvm.options file. The link in reference section provides more information on how to customize the Liberty environment with system properties. In the jvm.options file add the following -Dcom.ibm.jsse2.sp800-131=strict ... References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-setting-up-run-in- sp800-131a 2. https://www.ibm.com/docs/en/was-liberty/base?topic=manually-customizing- liberty-environment 3. https://www.ibm.com/support/pages/setting-generic-jvm-arguments-websphere- application-server-v85-liberty-profile",
    "function_names": [
      "kms_key_sp800_131a_compliant",
      "cloudtrail_encryption_sp800_131a_compliant",
      "s3_bucket_encryption_sp800_131a_compliant",
      "rds_instance_encryption_sp800_131a_compliant",
      "ssl_certificate_sp800_131a_compliant",
      "cloudfront_distribution_sp800_131a_compliant",
      "elasticache_replication_group_sp800_131a_compliant",
      "ebs_volume_encryption_sp800_131a_compliant",
      "secretsmanager_secret_sp800_131a_compliant",
      "acm_certificate_sp800_131a_compliant"
    ],
    "profile_applicability": "\u2022  Level 2",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-setting-up-run-in- sp800-131a 2. https://www.ibm.com/docs/en/was-liberty/base?topic=manually-customizing- liberty-environment 3. https://www.ibm.com/support/pages/setting-generic-jvm-arguments-websphere- application-server-v85-liberty-profile"
  },
  {
    "id": "4.2.15",
    "title": "Ensure that the Federal Information Processing Standards (FIPS) are used for the cryptographic modules",
    "assessment": "Manual",
    "description": "The National Institute of Standards and Technology (NIST) issues the FIPS 140 Publication Series to coordinate the requirements and standards for cryptography modules that include both hardware and software components. Protection of a cryptographic module within a security system is necessary to maintain the confidentiality and integrity of the information protected by the module. This standard specifies the security requirements that will be satisfied by a cryptographic module.",
    "rationale": "Federal Information Processing Standards (FIPS) are standards and guidelines that are issued by the National Institute of Standards and Technology (NIST) for federal government computer systems. You can set up Liberty to comply with FIPS requirements by setting system properties and specifying a FIPS-validated security provider.",
    "audit": "The FIPS standard can be enforced by setting the system properties - Dcom.ibm.jsse2.usefipsprovider=true and - Dcom.ibm.jsse2.usefipsProviderName=IBMJCEPlusFIPS when using IBM JDK. For other JDKs, follow their specific instructions. grep -w -R -i '-Dcom.ibm.jsse2.usefipsprovider=true' ${server.config.dir} grep -w -R -i '-Dcom.ibm.jsse2.usefipsProviderName=IBMJCEPlusFIPS' ${server.config.dir} In addition, configure to use the IBMJCEPlusFIPS security provider in the $JAVA_HOME/jre/lib/security/java.security file. grep -w -R -i 'com.ibm.crypto.plus.provider.IBMJCEPlusFIPS' ${JAVA_HOME}",
    "remediation": "Configure the system property -Dcom.ibm.jsse2.usefipsprovider to true and - Dcom.ibm.jsse2.usefipsProviderName to IBMJCEPlusFIPS in the jvm.options file. The link in reference section provides more information on how to customize the Liberty environment with system properties. -Dcom.ibm.jsse2.usefipsprovider=true -Dcom.ibm.jsse2.usefipsProviderName=`IBMJCEPlusFIPS` ... In addition, configure the IBMJCEPlusFIPS provider in the $JAVA_HOME/jre/lib/security/java.security file. security.provider.1=com.ibm.crypto.plus.provider.IBMJCEPlusFIPS ... References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-setting-up-fips- compliance 2. https://www.ibm.com/support/pages/setting-generic-jvm-arguments-websphere- application-server-v85-liberty-profile 4.3 Single Sign On (SSO) Security recommendations for SSO technologies like OpenId connect (OIDC), SAML, OAuth",
    "function_names": [
      "compute_instance_fips_enabled",
      "compute_disk_fips_enabled",
      "cloud_kms_fips_enabled",
      "cloud_cdn_fips_enabled",
      "cloud_load_balancer_fips_enabled",
      "cloud_storage_fips_enabled",
      "cloud_database_fips_enabled",
      "cloud_vpc_fips_enabled",
      "cloud_network_fips_enabled",
      "cloud_ssl_certificate_fips_enabled"
    ],
    "profile_applicability": "\u2022  Level 2",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-setting-up-fips- compliance 2. https://www.ibm.com/support/pages/setting-generic-jvm-arguments-websphere- application-server-v85-liberty-profile 4.3 Single Sign On (SSO) Security recommendations for SSO technologies like OpenId connect (OIDC), SAML, OAuth"
  },
  {
    "id": "4.3.1",
    "title": "Ensure 'signatureAlgorithm' asymmetric key algorithm is set for encrypting the JSON Web Tokens",
    "assessment": "Automated",
    "description": "The signatureAlgorithm is used to sign the JWT and can be configured to use different algorithms like HS256 (symmetric), RS256 (asymmetric).",
    "rationale": "The OpenID Connect server provider should use an asymmetric algorithm to sign JSON Web Tokens (JWT) for better security since different keys are used for signing and verifying the token.",
    "audit": "Ensure the signatureAlgorithm attribute is set to a stronger algorithm like RS256 in the openidConnectProvider element for the OIDC provider and openidConnectClient for the OIDC client in the Liberty configuration grep -w -R -i 'signatureAlgorithm' ${server.config.dir}",
    "remediation": "Add the signatureAlgorithm attribute to the openidConnectProvider element and set it to a strong algorithm, such as RS256 in ${server.config.dir}/configDropins/overrides/*.xml. <openidConnectProvider signatureAlgorithm=\"RS256\" /> <openidConnectClient signatureAlgorithm=\"RS256\" /> Default Value: The WebSphere Liberty OpenID Connect Server Provider signs the token ID by default with the signature algorithm of HS256. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectProvider.html",
    "function_names": [
      "iam_jwt_signature_algorithm_asymmetric",
      "iam_jwt_rs256_algorithm_enabled",
      "iam_token_signature_algorithm_secure",
      "iam_jwt_encryption_asymmetric_required",
      "iam_jwt_signature_algorithm_no_hs256"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectProvider.html"
  },
  {
    "id": "4.3.2",
    "title": "Ensure that constrained delegation is configured for SPNEGO (Simple and Protected GSSAPI Negotiation Mechanism)",
    "assessment": "Manual",
    "description": "SPNEGO authentication supports both constrained and unconstrained delegation. Constrained delegation provides the ability to specify and enforce application trust boundaries on a user's behalf by limiting the flow of the SPENGO tokens only to trusted servers.",
    "rationale": "Constrained delegation gives service administrators the ability to specify and enforce application trust boundaries by limiting the scope where application services can act on behalf of a user. Impact: Enabling constrained delegation requires additional configuration at the external KDC (Kerberos Distribution Center) server that is creating the SPNEGO token. The additional configuration depends on the KDC.",
    "audit": "If SPNEGO authentication is configured in the Liberty server make sure that the constrained delegation feature is also enabled in the Liberty configuration. grep -w -R -i 'spnego' ${server.config.dir} grep -w -R -i 'constrainedDelegation' ${server.config.dir}",
    "remediation": "In ${server.config.dir}/configDropins/overrides/<any file name>.xml, add the constrainedDelegation-1.0 feature to the featureManager element: <feature>constrainedDelegation-1.0</feature> References: 1. https://openliberty.io/docs/latest/reference/feature/constrainedDelegation- 1.0.html 2. https://www.ibm.com/docs/en/was- liberty/nd?topic=SSAW57_liberty/com.ibm.websphere.wlp.doc/ae/twlp_config_ke rb_constrained_del.html",
    "function_names": [
      "active_directory_spnego_constrained_delegation_enabled",
      "active_directory_spnego_unconstrained_delegation_disabled",
      "active_directory_spnego_trusted_servers_configured",
      "active_directory_spnego_token_flow_restricted",
      "active_directory_spnego_delegation_boundaries_enforced"
    ],
    "profile_applicability": "\u2022  Level 2",
    "impact": "Enabling constrained delegation requires additional configuration at the external KDC (Kerberos Distribution Center) server that is creating the SPNEGO token. The additional configuration depends on the KDC.",
    "references": "1. https://openliberty.io/docs/latest/reference/feature/constrainedDelegation- 1.0.html 2. https://www.ibm.com/docs/en/was- liberty/nd?topic=SSAW57_liberty/com.ibm.websphere.wlp.doc/ae/twlp_config_ke rb_constrained_del.html"
  },
  {
    "id": "4.3.3",
    "title": "Ensure 'tokenReuse' is set to 'false'",
    "assessment": "Automated",
    "description": "The \"jti\" claim in the JWT token can be made unique to prevent the JWT tokens from being replayed.",
    "rationale": "The OpenID Connect relying party should not reuse JSON Web Tokens to prevent a token replay attack.",
    "audit": "Ensure the existence of the tokenReuse attribute and that it is set to false in the openidConnectClient element in the Liberty configuration: grep -w -R -i 'tokenReuse' ${server.config.dir}",
    "remediation": "Add the tokenReuse attribute to the openidConnectClient element to ${server.config.dir}/configDropins/overrides/*.xml and set it to false to prevent token reuse on JSON Web Tokens. <openidConnectClient tokenReuse=\"false\" /> Default Value: The tokenReuse attribute is set to false by default. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html",
    "function_names": [
      "iam_token_reuse_disabled",
      "iam_jwt_token_reuse_prevented",
      "iam_jti_claim_unique_enabled",
      "iam_jwt_replay_protection_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html"
  },
  {
    "id": "4.3.4",
    "title": "Ensure 'disableIssChecking' issuer claim is set to 'false' in the RP (Relying Party)",
    "assessment": "Automated",
    "description": "The issuer claim in the JWT token is used by the RP (relying party) to verify the OP (OIDC provider) token issuer.",
    "rationale": "The issuer claim in a JSON Web Token (JWT) should be required and validated by the OpenID Connect relying party. This helps to ensure the authenticity of the JWT by matching the issuer claim to the name attribute or the redirect attribute of the client configuration in the OpenID Connect server provider.",
    "audit": "Ensure the existence of the disableIssChecking attribute and that it is set to false in the disableIssChecking element in the Liberty configuration: grep -w -R -i 'disableIssChecking' ${server.config.dir}",
    "remediation": "Add the disableIssChecking attribute to the openidConnectClient element to ${server.config.dir}/configDropins/overrides/*.xml. Set the disableIssChecking attribute value to false to ensure that issuer claim checking for JSON Web Tokens occurs. <openidConnectClient disableIssChecking=\"false\" /> Default Value: The disableIssChecking attribute is set to false by default. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html",
    "function_names": [
      "oidc_rp_issuer_claim_disabled",
      "oidc_rp_issuer_checking_enabled",
      "oidc_rp_issuer_validation_required",
      "oidc_rp_issuer_claim_verified",
      "oidc_rp_issuer_checking_false_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html"
  },
  {
    "id": "4.3.5",
    "title": "Ensure 'hostNameVerificationEnabled' is set to 'true' in OIDC Relying Party (RP)",
    "assessment": "Automated",
    "description": "Hostname verification is a server identity check that is used to ensure that a client is talking to the correct server. The check is performed on the client side of an SSL communication and involves looking at the server\u2019s certificate Subject Alternative Name (or the SubjectDN) to see if it matches the host part of the URL that was used to make the outbound request.",
    "rationale": "Hostname verification verifies the request is talking to the correct server and has not been redirected to an unknown server thus mitigating man-in-the-middle security vulnerability attacks.",
    "audit": "Ensure the existence of the hostNameVerificationEnabled attribute set to true in the openidConnectClient element in the Liberty configuration: grep -w -R -i 'hostNameVerificationEnabled' ${server.config.dir}",
    "remediation": "Add the hostNameVerificationEnabled attribute to the openidConnectClient element to ${server.config.dir}/configDropins/overrides/*.xml and set it to true to do hostname verification for JSON Web Tokens. <openidConnectClient hostNameVerificationEnabled=\"true\" /> Default Value: The WebSphere Liberty hostname verification for an OpenID Connect relying party is disabled by default, hostNameVerificationEnabled is set to false. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html",
    "function_names": [
      "oidc_relying_party_hostname_verification_enabled",
      "oidc_rp_hostname_verification_enabled",
      "oidc_rp_hostname_verification_enabled_true",
      "oidc_relying_party_hostname_verification_enabled_true",
      "oidc_rp_hostname_verification_required",
      "oidc_relying_party_hostname_verification_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html"
  },
  {
    "id": "4.3.6",
    "title": "Ensure 'signatureAlgorithm' is set to a secure algorithm in OIDC Relying Party (RP)",
    "assessment": "Automated",
    "description": "The signatureAlgorithm is used by the RP to verify the signed ID tokens sent by the OP.",
    "rationale": "When the OpenID Connect Server Provider uses a signature algorithm to sign the ID tokens, sensitive information is protected and the relying party can verify the authenticity of the JSON Web Token (JWT).",
    "audit": "Ensure the existence of the signatureAlgorithm attribute and that it is set to a value other than none in the openidConnectClient element in the Liberty configuration. grep -w -R -i 'signatureAlgorithm' ${server.config.dir}",
    "remediation": "Add the signatureAlgorithm attribute to the openidConnectClient element to ${server.config.dir}/configDropins/overrides/*.xml and set it a valid signature algorithm type, for example RS256, to enable token signing for JSON Web Tokens. <openidConnectClient signatureAlgorithm=\"RS256\" /> Default Value: The signatureAlgorithm attribute is set to HS256 by default. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html",
    "function_names": [
      "oidc_relying_party_signature_algorithm_secure",
      "oidc_rp_signature_algorithm_secure",
      "oidc_relying_party_signature_algorithm_min_rs256",
      "oidc_rp_signature_algorithm_min_rs256",
      "oidc_relying_party_signature_algorithm_no_insecure",
      "oidc_rp_signature_algorithm_no_insecure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html"
  },
  {
    "id": "4.3.7",
    "title": "Ensure 'signatureAlgorithm' is set to a secure algorithm in OIDC Provider (OP)",
    "assessment": "Automated",
    "description": "The signatureAlgorithm is used by the OP to sign the ID tokens.",
    "rationale": "The OpenID Connect Server Provider should use a signature algorithm to sign the ID tokens. This protects sensitive information and helps the relying party verify the authenticity of the JWT.",
    "audit": "Ensure the existence of the signatureAlgorithm attribute is set to a value other than none in the openidConnectProvider element in the Liberty configuration grep -w -R -i 'signatureAlgorithm' ${server.config.dir}",
    "remediation": "Add the signatureAlgorithm attribute to the openidConnectProvider element to ${server.config.dir}/configDropins/overrides/*.xml and set it to a valid algorithm, such as RS256, to ensure tokens are signed. <openidConnectProvider signatureAlgorithm=\"RS256\" /> Default Value: The signatureAlgorithm attribute is set to HS256 by default. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectProvider.html",
    "function_names": [
      "iam_oidc_provider_secure_signature_algorithm",
      "iam_oidc_provider_signature_algorithm_secure",
      "oidc_provider_signature_algorithm_secure",
      "oidc_provider_secure_signature_algorithm",
      "iam_oidc_provider_signature_algorithm_rs256_or_higher"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectProvider.html"
  },
  {
    "id": "4.3.8",
    "title": "Ensure 'httpsRequired' is set to 'true' in OIDC Relying Party (RP)",
    "assessment": "Automated",
    "description": "HTTPS protocol protects the integrity and confidentiality of data between the client and the server.",
    "rationale": "Encrypting the communication between the OpenID Connect relying part and the OpenID Connect server provider using HTTPS protects sensitive information.",
    "audit": "Ensure the existence of the httpsRequired attribute and that it is set to true in the openidConnectClient element in the Liberty configuration: grep -w -R -i 'httpsRequired' ${server.config.dir}",
    "remediation": "Add the httpsRequired attribute to the openidConnectClient element to ${server.config.dir}/configDropins/overrides/*.xml and set it to true to ensure that security transport is used for JSON Web Tokens. <openidConnectClient httpsRequired=\"true\" /> Default Value: The httpsRequired attribute is set to true by default. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html",
    "function_names": [
      "oidc_relying_party_https_required",
      "oidc_relying_party_https_required_enabled",
      "oidc_rp_https_required",
      "oidc_rp_https_required_enabled",
      "oidc_relying_party_https_enforced",
      "oidc_rp_https_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectClient.html"
  },
  {
    "id": "4.3.9",
    "title": "Ensure 'tokenEndpointAuthMethodsSupported' is set to a valid authentication method in OIDC Provider (OP)",
    "assessment": "Automated",
    "description": "The tokenEndpoint is used to verify the authenticity of the RP (relying party).",
    "rationale": "When the OpenID Connect server provider requires a token endpoint authentication method the provider can verify the authenticity of the relying party.",
    "audit": "Ensure the existence of the tokenEndpointAuthMethodsSupported attribute and that it does not include a value of none in the openidConnectProvider element in the Liberty configuration grep -w -R -i 'tokenEndpointAuthMethodsSupported' ${server.config.dir}",
    "remediation": "Add the tokenEndpointAuthMethodsSupported attribute to the openidConnectProvider element to ${server.config.dir}/configDropins/overrides/*.xml and set it to a valid list of authentication methods, such as client_secret_post, to ensure that an authentication method is required for the token endpoint. <openidConnectProvider tokenEndpointAuthMethodsSupported=\"client_secret_post, client_secret_basic\" /> Default Value: The tokenEndpointAuthMethodsSupported attribute is set to client_secret_post, client_secret_basic by default. References: 1. https://openliberty.io/docs/latest/reference/config/openidConnectProvider.html",
    "function_names": [
      "oidc_provider_token_endpoint_auth_methods_supported_valid",
      "oidc_provider_token_endpoint_auth_methods_configured",
      "oidc_provider_token_endpoint_auth_methods_secure",
      "oidc_provider_token_endpoint_auth_methods_compliant",
      "oidc_provider_token_endpoint_auth_methods_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/openidConnectProvider.html"
  },
  {
    "id": "4.3.10",
    "title": "Ensure 'accessTokenEncoding' is set to a strong hash algorithm in OAuth 2.0",
    "assessment": "Automated",
    "description": "The OAuth access token contains sensitive data and should be hashed to protect it.",
    "rationale": "Encoding the OAuth access token using a hashing algorithm protects sensitive information.",
    "audit": "Ensure the existence of the accessTokenEncoding attribute and that it is set to a value other than plain in the oauthProvider element in the Liberty configuration. grep -w -R -i 'accessTokenEncoding' ${server.config.dir}",
    "remediation": "Add the accessTokenEncoding attribute to the oauthProvider element to ${server.config.dir}/configDropins/overrides/*.xml and set it to a valid encoding type, for example PBKDF2WithHmacSHA512, to enable stored access token encoding. Do not use the plain value as it does not encode. <oauthProvider accessTokenEncoding=\"PBKDF2WithHmacSHA512\" /> Default Value: The accessTokenEncoding is set to plain for backward compatibility by default. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider",
    "function_names": [
      "oauth_access_token_strong_hash_algorithm",
      "oauth_access_token_encoding_secure",
      "oauth_access_token_hash_algorithm_compliant",
      "oauth_access_token_encoding_min_sha256",
      "oauth_access_token_secure_hashing_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider"
  },
  {
    "id": "4.3.11",
    "title": "Ensure 'allowPublicClients' is set to 'false' in OAuth 2.0",
    "assessment": "Automated",
    "description": "Public clients can be blocked to access OAuth applications for better control.",
    "rationale": "Blocking OAuth public clients prevents client IDs or client secrets from being exposed",
    "audit": "Ensure the existence of the allowPublicClients attribute and that it is set to false in the oauthProvider element in the Liberty configuration: grep -w -R -i 'allowPublicClients' ${server.config.dir}",
    "remediation": "Add the allowPublicClients attribute to the oauthProvider element to ${server.config.dir}/configDropins/overrides/*.xml and set it to false to block public clients. <oauthProvider allowPublicClients=\"false\" /> Default Value: The allowPublicClients attribute is set to false by default. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider",
    "function_names": [
      "oauth_application_public_clients_disabled",
      "oauth_application_allow_public_clients_false",
      "oauth_application_client_restriction_enabled",
      "oauth_application_public_access_blocked",
      "oauth_application_secure_client_policy_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider"
  },
  {
    "id": "4.3.12",
    "title": "Ensure 'clientSecretEncoding' is set to a strong encoding type in OAuth 2.0",
    "assessment": "Automated",
    "description": "The OAuth client secret is encoded using the 'clientSecretEncoding' attribute.",
    "rationale": "Encoding the OAuth client secret at highest level available reduces the possibility of it being decoded by an unauthorized party.",
    "audit": "Ensure the existence of the clientSecretEncoding attribute and that it is set to a value other than xor in the oauthProvider element in the Liberty configuration. grep -w -R -i 'clientSecretEncoding' ${server.config.dir}",
    "remediation": "Add the clientSecretEncoding attribute to the oauthProvider element to ${server.config.dir}/configDropins/overrides/*.xml is set to a valid encoding type, for example PBKDF2WithHmacSHA512, to enable stored access token encoding. <oauthProvider clientSecretEncoding=\"PBKDF2WithHmacSHA512\" /> Default Value: The clientSecretEncoding attribute is set to xor by default. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider",
    "function_names": [
      "oauth_client_secret_strong_encoding",
      "oauth_client_secret_encoding_secure",
      "oauth_client_secret_encoding_base64",
      "oauth_client_secret_encoding_strong_type",
      "oauth_client_strong_secret_encoding"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider"
  },
  {
    "id": "4.3.13",
    "title": "Ensure 'httpsRequired' is set to 'true' in OAuth 2.0",
    "assessment": "Automated",
    "description": "HTTPS protocol protects the integrity and confidentiality of data between the client and the server.",
    "rationale": "Encrypting communication between the OAuth client and the provider and using HTTPS protects sensitive information.",
    "audit": "Ensure the existence of the httpsRequired attribute and that it is set to true in the oauthProvider element in the Liberty configuration: grep -w -R -i 'httpsRequired' ${server.config.dir}",
    "remediation": "Add the httpsRequired attribute to the oauthProvider element to ${server.config.dir}/configDropins/overrides/*.xml and set to true to ensure secure transport with a client. <oauthProvider httpsRequired=\"true\" /> Default Value: The httpsRequired attribute is set to true by default. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider",
    "function_names": [
      "oauth_client_https_required",
      "oauth_client_https_enabled",
      "oauth_client_secure_transport_required",
      "oauth_client_secure_connection_enabled",
      "oauth_client_tls_required",
      "oauth_client_encryption_in_transit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider"
  },
  {
    "id": "4.3.14",
    "title": "Ensure 'skipResourceOwnerValidation' is set to 'false' in OAuth 2.0",
    "assessment": "Automated",
    "description": "Resource owner validation check validates the resource owner credentials.",
    "rationale": "Verifying the credentials of the resource owner prevents unauthorized access.",
    "audit": "Ensure the existence of the skipResourceOwnerValidation attribute and that it is set to false in the oauthProvider element in the Liberty configuration: grep -w -R -i 'skipResourceOwnerValidation' ${server.config.dir}",
    "remediation": "Add the skipResourceOwnerValidation attribute to the oauthProvider element to ${server.config.dir}/configDropins/overrides/*.xml and set to false to ensure resource owner validation is completed. <oauthProvider skipResourceOwnerValidation=\"false\" /> Default Value: The WebSphere Liberty OAuth resource owner validation is enabled by default, skipResourceOwnerValidation is set to false. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider",
    "function_names": [
      "oauth2_client_skip_resource_owner_validation_disabled",
      "oauth2_client_resource_owner_validation_enabled",
      "oauth2_client_credentials_validation_required",
      "oauth2_client_skip_validation_disabled",
      "oauth2_client_owner_validation_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-oauthprovider"
  },
  {
    "id": "4.3.15",
    "title": "Ensure 'httpsRequired' is set to 'true' in SAML",
    "assessment": "Automated",
    "description": "HTTPS protocol protects the integrity and confidentiality of data between the client and the server.",
    "rationale": "Transport communication accessing a SAML WebSSO service provider end point should be secured with HTTPS (TLS) to protect sensitive information.",
    "audit": "Ensure the httpsRequired attribute is set to true in on all samlWebSso20 elements in the Liberty configuration. grep -w -R -i 'httpsRequired' ${server.config.dir}",
    "remediation": "Add the httpsRequired attribute to all samlWebSso20 elements to ${server.config.dir}/configDropins/overrides/*.xml and set it to true. <samlWebSso20 ... httpsRequired=\"true\" /> Default Value: WebSphere Liberty sets the httpsRequired to true on samlWebSso20 elements. References: 1. https://openliberty.io/docs/latest/reference/config/samlWebSso20.html",
    "function_names": [
      "iam_saml_https_required",
      "iam_saml_https_required_enabled",
      "iam_saml_https_required_true",
      "iam_saml_https_required_enforced",
      "iam_saml_https_required_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/samlWebSso20.html"
  },
  {
    "id": "4.3.16",
    "title": "Enforce 'wantAssertionsSigned' to 'true' in SAML",
    "assessment": "Automated",
    "description": "A SAML (Security Assertions Markup Language) authentication assertion is issued as proof of an authentication event and can be signed.",
    "rationale": "WebSphere Liberty should require that SAML assertions (<saml:Assertion> elements) contain a signature element that signs the assertion so that it can be verified securely by the server.",
    "audit": "Ensure the wantAssertionsSigned attribute is set to true on all samlWebSso20 elements in the Liberty configuration. grep -w -R -i 'wantAssertionsSigned' ${server.config.dir}",
    "remediation": "Add the wantAssertionsSigned attribute to all samlWebSso20 elements to ${server.config.dir}/configDropins/overrides/*.xml and set it to true. <samlWebSso20 ... wantAssertionsSigned=\"true\" /> Default Value: WebSphere Liberty sets the wantAssertionsSigned to true on samlWebSso20 elements. References: 1. https://openliberty.io/docs/latest/reference/config/samlWebSso20.html",
    "function_names": [
      "iam_saml_want_assertions_signed",
      "iam_saml_assertion_signing_enabled",
      "iam_saml_signed_assertions_required",
      "saml_provider_want_assertions_signed",
      "saml_provider_assertion_signing_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/samlWebSso20.html"
  },
  {
    "id": "4.3.17",
    "title": "Ensure 'authnRequestsSigned' is set to 'true' in SAML",
    "assessment": "Automated",
    "description": "SAML providers can sign the request messages for authenticity.",
    "rationale": "SAML authentication request messages (<samlp:AuthnRequest> messages) can be signed so it can be verified securely by the receiver.",
    "audit": "Ensure the authnRequestsSigned attribute is set to true on all samlWebSso20 elements in the Liberty configuration. grep -w -R -i 'authnRequestsSigned' ${server.config.dir}",
    "remediation": "Add the authnRequestsSigned attribute to all samlWebSso20 elements to ${server.config.dir}/configDropins/overrides/*.xml and set it to true. <samlWebSso20 ... authnRequestsSigned=\"true\" /> Default Value: WebSphere Liberty sets the authnRequestsSigned to true on samlWebSso20 elements. References: 1. https://openliberty.io/docs/latest/reference/config/samlWebSso20.html 4.4 General General recommendations related to web resources including servlets, JSPs, JAX-RS applications.",
    "function_names": [
      "iam_saml_provider_authn_requests_signed",
      "iam_saml_provider_request_signing_enabled",
      "iam_saml_provider_signed_auth_requests_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/samlWebSso20.html 4.4 General General recommendations related to web resources including servlets, JSPs, JAX-RS applications."
  },
  {
    "id": "4.4.1",
    "title": "Ensure 'disableXPoweredBy' is set to 'true'",
    "assessment": "Automated",
    "description": "The disableXPoweredBy setting can reveal the server's identity.",
    "rationale": "Preventing the Liberty server from advertising its presence in this manner will prevent malicious attackers from determining the server's identity and exploiting any security vulnerabilities.",
    "audit": "Ensure the disableXPoweredBy attribute for the webContainer element is set to true in the Liberty configuration . grep -w -R 'disableXPoweredBy' ${server.config.dir}",
    "remediation": "Add the disableXPoweredBy attribute to webContainer element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. Set the disableXPoweredBy attributes value to true. <webContainer disableXPoweredBy=\"true\" /> Default Value: For servlet-5.0 and newer, the default value is true. For previous versions the value is false. References: 1. https://openliberty.io/docs/latest/reference/config/webContainer.html",
    "function_names": [
      "compute_server_xpoweredby_disabled",
      "web_server_header_xpoweredby_disabled",
      "server_config_xpoweredby_disabled",
      "web_server_security_headers_xpoweredby_disabled",
      "server_response_headers_xpoweredby_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webContainer.html"
  },
  {
    "id": "4.4.2",
    "title": "Ensure 'preserveFullyQualifiedReferrerUrl' is set to 'false'",
    "assessment": "Automated",
    "description": "Setting the preserveFullyQualifiedReferrerUrl attribute to false ensures that the host for the referrer URL is removed, and that the redirect is to localhost.",
    "rationale": "Using a fully qualified referrer URL containing the hostname may open your systems to potential URL redirect attacks.",
    "audit": "Ensure the preserveFullyQualifiedReferrerUrl attribute is set to false in the webAppSecurity element in the Liberty configuration grep -w -R -i 'preserveFullyQualifiedReferrerUrl' ${server.config.dir}",
    "remediation": "Set the preserveFullyQualifiedReferrerUrl attribute to false in the webAppSecurity element on ${server.config.dir}/configDropins/overrides/*.xml <webAppSecurity preserveFullyQualifiedReferrerUrl=\"false\" /> Default Value: The preserveFullyQualifiedReferrerUrl attribute is false by default. References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "cloud_cdn_endpoint_preserve_fully_qualified_referrer_url_disabled",
      "cloud_cdn_endpoint_referrer_url_host_removed",
      "cloud_cdn_endpoint_redirect_to_localhost_enabled",
      "cloud_cdn_endpoint_secure_referrer_url_config",
      "cloud_cdn_endpoint_referrer_url_sanitized"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.4.3",
    "title": "Ensure 'logoutPageRedirectDomainNames' is set to relevant domain names for logout page redirects",
    "assessment": "Automated",
    "description": "For logout page redirects, explicit domain names can be listed.",
    "rationale": "Defining approved domain names for redirects prevents the server from redirecting to a disallowed domain.",
    "audit": "Ensure the logoutPageRedirectDomainNames attribute in the webAppSecurity element lists the domain names that are allowed for the logout page redirect in the Liberty configuration grep -w -R -i 'logoutPageRedirectDomainNames' ${server.config.dir}",
    "remediation": "Set the logoutPageRedirectDomainNames attribute in the webAppSecurity element to a pipe(|) separated list of domain names that are allowed for the logout page redirect in ${server.config.dir}/configDropins/overrides/*.xml For Example, for the two domains ibm.com and openliberty.io <webAppSecurity logoutPageRedirectDomainNames=\"ibm.com|openliberty.io\" /> References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "iam_policy_logout_page_redirect_domain_names_set",
      "iam_policy_logout_redirect_domains_configured",
      "iam_policy_logout_redirect_domains_valid",
      "iam_policy_logout_page_redirect_domains_restricted",
      "iam_policy_logout_redirect_domains_specified"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.4.4",
    "title": "Ensure 'hostNameExcludeList' is set to the hostnames to be excluded for web traffic",
    "assessment": "Manual",
    "description": "Host names can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address exclude list protects against unwanted inbound connections.",
    "audit": "Ensure the hostNameExcludeList attribute is set to a list of host names in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'hostNameExcludeList' ${server.config.dir}",
    "remediation": "Add the hostNameExcludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set to comma-separated list of host names. <tcpOptions hostNameExcludeList=\"*.abc.com,sample.all.com\" /> References: 1. https://openliberty.io/docs/latest/reference/config/httpEndpoint.html",
    "function_names": [
      "cloud_cdn_endpoint_hostname_exclude_list_configured",
      "cloud_cdn_endpoint_hostname_exclude_list_not_empty",
      "cloud_cdn_endpoint_hostname_exclude_list_valid",
      "cloud_cdn_endpoint_hostname_exclude_list_contains_required_hosts",
      "cloud_cdn_endpoint_hostname_exclude_list_no_wildcards",
      "cloud_cdn_endpoint_hostname_exclude_list_no_duplicates",
      "cloud_cdn_endpoint_hostname_exclude_list_case_sensitive",
      "cloud_cdn_endpoint_hostname_exclude_list_format_valid"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpEndpoint.html"
  },
  {
    "id": "4.4.5",
    "title": "Ensure 'logoutOnHttpSessionExpire' is set to 'true'",
    "assessment": "Automated",
    "description": "Logout users after the HTTP session timer expires.",
    "rationale": "Logging out users after the HTTP session expires syncs the session and the LTPA authentication token and prompts the user to login again when accessing the resource.",
    "audit": "Ensure the logoutOnHttpSessionExpire attribute is set to true in the webAppSecurity element in the Liberty configuration grep -w -R -i 'logoutOnHttpSessionExpire' ${server.config.dir}",
    "remediation": "Set the logoutOnHttpSessionExpire attribute to true in the webAppSecurity element on ${server.config.dir}/configDropins/overrides/*.xml <webAppSecurity logoutOnHttpSessionExpire=\"true\" /> Default Value: The logoutOnHttpSessionExpire attribute is false by default. References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "iam_user_logout_on_http_session_expire_enabled",
      "iam_session_logout_on_expire_enabled",
      "iam_http_session_logout_enabled",
      "iam_user_session_timeout_logout_enabled",
      "iam_security_logout_on_session_expire_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.4.6",
    "title": "Ensure 'hostNameIncludeList' is set to the host names that will be allowed for web traffic",
    "assessment": "Manual",
    "description": "Host names can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address include list allows only wanted inbound connections.",
    "audit": "Ensure the hostNameIncludeList attribute is set to a list of host names in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'hostNameIncludeList' ${server.config.dir}",
    "remediation": "Add the hostNameIncludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set to comma-separated list of host names. <tcpOptions hostNameIncludeList=\"*.def.com,sample.here.com\" /> References: 1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html",
    "function_names": [
      "cloud_cdn_endpoint_hostname_allowlist_configured",
      "cloud_cdn_endpoint_hostname_restricted",
      "cloud_cdn_endpoint_hostname_whitelist_enabled",
      "cloud_cdn_endpoint_hostname_filtering_enabled",
      "cloud_cdn_endpoint_hostname_access_controlled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html"
  },
  {
    "id": "4.4.7",
    "title": "Ensure 'addressIncludeList' is set to the IP addresses that will be allowed for web traffic",
    "assessment": "Automated",
    "description": "IP addresses can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address include list allows only wanted inbound connections.",
    "audit": "Ensure the addressIncludeList attribute is set to a list of IP addresses in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'addressIncludeList' ${server.config.dir}",
    "remediation": "Add the addressIncludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set to comma-separated list of IP Address. <tcpOptions addressIncludeList=\"254.*.*.9,255.0.0.2\" /> References: 1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html",
    "function_names": [
      "cloud_cdn_endpoint_ip_whitelisted",
      "cloud_cdn_endpoint_address_include_list_configured",
      "cloud_cdn_endpoint_restricted_ip_access",
      "cloud_cdn_endpoint_allowed_ips_defined",
      "cloud_cdn_endpoint_web_traffic_filtered"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html"
  },
  {
    "id": "4.4.8",
    "title": "Ensure 'addressExcludeList' is set to the IP addresses to be excluded for web traffic",
    "assessment": "Manual",
    "description": "IP addresses can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address exclude list protects against unwanted inbound connections.",
    "audit": "Ensure the addressExcludeList attribute is set to a list of hostnames in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'addressExcludeList' ${server.config.dir}",
    "remediation": "Add the addressExcludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set it to a comma- separated list of IP addresses. <tcpOptions addressExcludeList=\"254.1.0.9,*.1.255.0\" /> References: 1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html",
    "function_names": [
      "cloud_cdn_endpoint_address_exclude_list_configured",
      "cloud_cdn_endpoint_ip_exclusion_list_set",
      "cloud_cdn_endpoint_web_traffic_exclusion_configured",
      "cloud_cdn_endpoint_blocked_ip_list_defined",
      "cloud_cdn_endpoint_inbound_ip_restrictions_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html"
  },
  {
    "id": "4.4.9",
    "title": "Ensure ''trustedSensitiveHeaderOrigin'' is set to trusted host names and IP addresses for sensitive data",
    "assessment": "Automated",
    "description": "The web server plug-in uses private headers to provide information about the original request. A subset of these headers is considered sensitive. Incoming sensitive private headers are not trusted from any source. To allow sensitive private header processing for specific trusted sources, specify a comma-separated list of IP addresses and hostnames.",
    "rationale": "",
    "audit": "Ensure the trustedSensitiveHeaderOrigin attribute for first httpDispatcher element is set to appropriate value in the Liberty configuration . grep -w -R 'trustedSensitiveHeaderOrigin' ${server.config.dir}",
    "remediation": "Add the settings below to ${server.config.dir}/configDropins/overrides/<any file name>.xml. <httpDispatcher ... trustedSensitiveHeaderOrigin=\"localhost, 127.0.0.1, 192.168.*.*, 0:0:0:0:0:ffff:*:*, *.ibm.com\"/> Default Value: The default value is none. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-httpdispatcher 2. https://openliberty.io/blog/2021/02/19/configure-trustedHeaderOrigin-21002.html",
    "function_names": [
      "cloud_cdn_distribution_trusted_sensitive_header_origin_set",
      "cloud_cdn_distribution_sensitive_headers_restricted",
      "cloud_cdn_distribution_trusted_origin_configured",
      "cloud_cdn_distribution_private_headers_trusted_sources",
      "cloud_cdn_distribution_sensitive_headers_trusted_hosts"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-httpdispatcher 2. https://openliberty.io/blog/2021/02/19/configure-trustedHeaderOrigin-21002.html"
  },
  {
    "id": "4.4.10",
    "title": "Ensure 'trustedHeaderOrigin' is set to trusted host names and IP addresses",
    "assessment": "Automated",
    "description": "The web server plug-in uses private headers to provide information about the original request. These headers take precedence over the HTTP host header and are used to select a virtual host to service a request. To restrict private header processing to specific trusted sources, specify a comma-separated list of IP addresses and hostnames.",
    "rationale": "",
    "audit": "Ensure the trustedHeaderOrigin attribute for first httpDispatcher element is set to appropriate value in the Liberty configuration . grep -w -R 'trustedHeaderOrigin' ${server.config.dir}",
    "remediation": "Add the settings below to ${server.config.dir}/configDropins/overrides/<any file name>.xml. <httpDispatcher ... trustedHeaderOrigin=\"localhost, 127.0.0.1, 192.168.*.*, 0:0:0:0:0:ffff:*:*, *.ibm.com\"/> Default Value: The default value is *. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-httpdispatcher 2. https://openliberty.io/blog/2021/02/19/configure-trustedHeaderOrigin-21002.html",
    "function_names": [
      "cloud_cdn_distribution_trusted_header_origin_restricted",
      "cloud_cdn_distribution_trusted_header_origin_configured",
      "cloud_cdn_distribution_trusted_header_origin_valid",
      "cloud_cdn_distribution_trusted_header_origin_sources_restricted",
      "cloud_cdn_distribution_trusted_header_origin_hostnames_valid",
      "cloud_cdn_distribution_trusted_header_origin_ips_valid",
      "cloud_cdn_distribution_trusted_header_origin_sources_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=configuration-httpdispatcher 2. https://openliberty.io/blog/2021/02/19/configure-trustedHeaderOrigin-21002.html"
  },
  {
    "id": "4.4.11",
    "title": "Ensure 'logoutPageRedirectDomainNames' is set to valid host names to redirect after logout",
    "assessment": "Automated",
    "description": "Once a user is logged out, the logout page redirects can be controlled to be redirected to a specific set of trusted domains instead of just localhost.",
    "rationale": "One can control the domain names to be directed to once a logout happens. This will ensure that the redirection is not happening to an untrusted server.",
    "audit": "Ensure that pipe (|) separated list of domain names are provided in logoutPageRedirectDomainNames attribute of webAppSecurity element in Liberty configuration. grep -w -R -i 'logoutPageRedirectDomainNames' ${server.config.dir}",
    "remediation": "Add/set the setting below to ${server.config.dir}/configDropins/overrides/<any file name>.xml <webAppSecurity logoutPageRedirectDomainNames=\"<domain name list>\" /> References: 1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html",
    "function_names": [
      "iam_logout_page_redirect_domain_names_valid",
      "iam_logout_page_redirect_domain_names_configured",
      "iam_logout_page_redirect_domain_names_trusted",
      "iam_logout_page_redirect_domain_names_restricted",
      "iam_logout_page_redirect_domain_names_non_localhost"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webAppSecurity.html"
  },
  {
    "id": "4.4.12",
    "title": "Ensure security constraints are specified to protect web applications",
    "assessment": "Automated",
    "description": "Protect web applications by configuring security constraints for all web resources using either deployment descriptor and/or annotations.",
    "rationale": "Specifying security constraints allows fine grained access control to protected resources. This can be done either using deployment descriptor and/or annotations.",
    "audit": "Ensure the <security-constraint> elements are specified in the web.xml file for each application. grep -w -R -i 'security-constraint' ${server.config.dir} Note: If using annotations, make sure that the appropriate methods are protected using the @ServletSecurity annotation.",
    "remediation": "Set <security-constraint> elements in the web.xml deployment descriptor file of each application or use annotations in the code. Example using security-constraint: <security-constraint> <web-resource-collection> <url-pattern>/*</url-pattern> </web-resource-collection> <auth-constraint> <role-name>testing</role-name> </auth-constraint> </security-constraint>  Example using annotations: @WebServlet(\"/myServlet\") @ServletSecurity( httpMethodConstraints = { @HttpMethodConstraint(value = \"GET\", rolesAllowed = \"user\"), @HttpMethodConstraint(value = \"POST\", rolesAllowed = \"manager\", transportGuarantee = TransportGuarantee.CONFIDENTIAL), } ) public class myServlet extends HttpServlet { // servlet code... } References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=applications-getting- started-security-in-liberty",
    "function_names": [
      "compute_web_app_security_constraints_specified",
      "compute_web_resource_deployment_descriptor_configured",
      "compute_web_app_annotations_security_configured",
      "compute_web_app_protection_constraints_enabled",
      "compute_web_resource_security_constraints_defined"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=applications-getting- started-security-in-liberty"
  },
  {
    "id": "4.4.13",
    "title": "Ensure application security feature is enabled",
    "assessment": "Automated",
    "description": "The app security features (any of the appSecurity-* versions) enable basic features like authentication, authorization and transport security. Depending on the resources in the servers and the security configuration needed additional security features also need to be enabled.",
    "rationale": "Enabling Security for applications prevents unauthorized users from accessing an application. This is the basic security feature to be added in addition to other features that the server might need.",
    "audit": "Ensure that any one of the appSecurity-* feature is enabled in the Liberty configuration. Note that a feature can be individually specified or can be included in other features. For more information see Liberty Features Overview. grep -w -R 'appSecurity' ${server.config.dir}",
    "remediation": "Add the appSecurity-2.0 under the featureManager element in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <featureManager> <feature>appSecurity-2.0</feature> </featureManager> References: 1. https://openliberty.io/docs/latest/reference/feature/appSecurity-3.0.html",
    "function_names": [
      "app_security_feature_enabled",
      "app_security_authentication_enabled",
      "app_security_authorization_enabled",
      "app_security_transport_security_enabled",
      "app_security_basic_features_enabled",
      "app_security_advanced_features_enabled",
      "app_security_all_features_enabled",
      "app_security_minimum_features_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/feature/appSecurity-3.0.html"
  },
  {
    "id": "4.4.14",
    "title": "Ensure 'invalidateOnUnauthorizedSessionRequestException' is set to 'false'",
    "assessment": "Automated",
    "description": "When a user tries to access a session owned by another user, the UnauthorizedSessionRequestException is raised so the user cannot continue.",
    "rationale": "If this is set to true, there is no exception raised. The only reason to enable this is to suppress the exception when the session is accessed after a user's token is expired.",
    "audit": "Ensure that invalidateOnUnauthorizedSessionRequestException attribute of httpSession is set to true in the Liberty configuration. grep -w -R 'invalidateOnUnauthorizedSessionRequestException' ${server.config.dir}",
    "remediation": "Set the invalidateOnUnauthorizedSessionRequestException attribute to true in the httpSession element in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <httpSession invalidateOnUnauthorizedSessionRequestException=\"true\" /> Default Value: invalidateOnUnauthorizedSessionRequestException is false by default. References: 1. https://openliberty.io/docs/latest/reference/config/httpSession.html",
    "function_names": [
      "cognito_user_pool_invalidate_on_unauthorized_session_request_disabled",
      "cognito_user_pool_unauthorized_session_request_handling_disabled",
      "cognito_user_pool_session_request_exception_disabled",
      "cognito_user_pool_session_security_disabled",
      "cognito_user_pool_unauthorized_access_handling_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpSession.html"
  },
  {
    "id": "4.4.15",
    "title": "Ensure Web Server Document Root does not contain information that should be private",
    "assessment": "Automated",
    "description": "WAR files contain servable content. The Web container will serve any files found in the root(Web Server Document Root) of the WAR file. This is fine as long as you place only servable content in the root. Thus, you should never place content that shouldn't be shown to users in the root of the WAR. For example, don't put property files, class files, or other important information there. If you must place such information in the WAR file, place it within the WEB-INF directory, as permitted by the servlet specification. Information there is never served by the Web.",
    "rationale": "",
    "audit": "Ensure that there is no content that shouldn't be shown to users in the root of the WAR. For example, check for property files, class files, or other important information.",
    "remediation": "Remove all content that shouldn't be shown to users in the root of the WAR. For example, relocate property files, class files, or other important information within the WEB-INF directory, as permitted by the servlet specification.",
    "function_names": [
      "compute_web_server_document_root_no_private_content",
      "compute_war_file_no_sensitive_content_in_root",
      "compute_web_server_private_content_in_web_inf",
      "compute_war_file_sensitive_content_protected",
      "compute_web_server_document_root_content_restricted"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "4.4.16",
    "title": "Ensure HTTP session overflow is 'disabled'",
    "assessment": "Manual",
    "description": "Applications that use in-memory HTTP sessions can configure if overflow is allowed and the number of sessions that can be created.",
    "rationale": "Disabling session overflow and the number of maximum number of sessions allowed helps to avoid denial-of-service attacks in which attackers generate new sessions until all JVM memory is exhausted.",
    "audit": "Ensure that the allowOverflow attribute of httpSession element is set to false and the maxInMemorySessionCountvalue of thehttpSession` element is set to an appropriate value in Liberty configuration. grep -w -R -i 'allowOverflow' ${server.config.dir} grep -w -R -i 'maxInMemorySessionCount' ${server.config.dir}",
    "remediation": "Set the allowOverflow attribute on the httpSession element to the value of false in ${server.config.dir}/configDropins/overrides/*.xml. Also set the maxInMemorySessionCount attribute on the httpSession element to a maximum number of sessions the JVM is able to support for each web module. <httpSession allowOverflow=\"false\" maxInMemorySessionCount=\"1000\" /> Default Value: WebSphere Liberty allows session overflow by default, allowOverflow is set to true. The maximum session count, maxInMemorySessionCount, is 1000 by default. References: 1. https://openliberty.io/docs/latest/reference/config/httpSession.html",
    "function_names": [
      "cloud_cdn_http_session_overflow_disabled",
      "compute_http_session_overflow_disabled",
      "load_balancer_http_session_overflow_disabled",
      "web_app_http_session_overflow_disabled",
      "app_engine_http_session_overflow_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpSession.html"
  },
  {
    "id": "4.4.17",
    "title": "Ensure uncovered http methods are denied",
    "assessment": "Automated",
    "description": "Servlets are secured by URL and each URL that is to be secured must be specified in the web.xml file describing the application.",
    "rationale": "A servlet can have multiple aliases and an application can have many servlets, making it easy to accidentally forget to secure an alias or URL for a servlet. If just one servlet URL is insecure, an intruder might be able to bypass security. Use wildcards to secure servlets wherever possible instead of specific URLs and configure the application to deny access to uncovered http methods. Impact: Open Liberty secures URLs and not the underlying classes, if just one servlet URL is insecure, an intruder might be able to bypass security.",
    "audit": "Review all of your web applications to ensure that each servlet has an alias associated with security constraints. Review each application\u2019s web.xml file located in the application's ${wlp.user.dir}/shared/apps/<app_name>/WEB-INF/ directory and determine if a deny- uncovered-http-methods element is set. Applications may also be in the ${server.config.dir}/dropins directory or a custom location. grep -w -R -i 'deny-uncovered-http-methods' ${wlp.user.dir}/shared/apps/<app_name>/WEB-INF/ Note: The security-constraints can also be set in the code using annotations like @ServletSecurity.",
    "remediation": "Create aliases for each servlet. Assign a security constraint for each URL defined in alias. Add additional security by adding <deny-uncovered-http-methods /> to WEB- INF/web.xml to block all undeclared methods. <servlet-mapping id=\"ServletMapping_1\"> <servlet-name>MyServlet</servlet-name> <url-pattern>/MyURLPattern</url-pattern> </servlet-mapping> <deny-uncovered-http-methods /> <!-- SECURITY CONSTRAINTS --> <security-constraint id=\"SecurityConstraint_1\"> <web-resource-collection id=\"WebResourceCollection_1\"> <web-resource-name>Protected with Employee or Manager roles</web-resource-name> <url-pattern>/MyURLPattern</url-pattern> <http-method>GET</http-method> <http-method>POST</http-method> </web-resource-collection> <auth-constraint id=\"AuthConstraint_1\"> <role-name>Employee</role-name> <role-name>Manager</role-name> </auth-constraint> </security-constraint> Note: The security constraints can also be set in the code using annotations like @ServletSecurity References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=applications-getting- started-security-in-liberty 2. https://openliberty.io/docs/latest/application-configuration-hardening.html",
    "function_names": [
      "compute_servlet_http_methods_denied",
      "compute_servlet_uncovered_methods_restricted",
      "compute_web_xml_http_methods_secure",
      "compute_servlet_url_access_denied",
      "compute_web_xml_methods_denied",
      "compute_servlet_http_methods_restricted",
      "compute_web_xml_uncovered_methods_denied",
      "compute_servlet_url_methods_secure"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "Open Liberty secures URLs and not the underlying classes, if just one servlet URL is insecure, an intruder might be able to bypass security.",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=applications-getting- started-security-in-liberty 2. https://openliberty.io/docs/latest/application-configuration-hardening.html"
  },
  {
    "id": "4.4.18",
    "title": "Ensure 'disallowServeServletsByClassName' is 'disabled'",
    "assessment": "Automated",
    "description": "Servlets can be served by class name or via a normal URL alias.",
    "rationale": "Serving servlets by class name allows anyone that knows the class name of any servlet to invoke it directly which leads to a security exposure from possible misuse of the servlet.",
    "audit": "Ensure the disallowServeServletsByClassName attribute on the webContainer element in the Liberty configuration is set to true. grep -w -R -i 'disallowServeServletsByClassName` ${server.config.dir} Serving servlets by class name can also be set on the enable-serving-servlets-by- class-name attributes in the web-ext element for individual webApplication elements. For legacy web applications, servlet serving by class name can also be set in the ibm- web-ext.xml or ibm-web-ext.xmi files in the application.",
    "remediation": "Add the disallowServeServletsByClassName attribute on the webContainer element in ${server.config.dir}/configDropins/overrides/*.xml and set it to true. <webContainer disallowServeServletsByClassName=\"true\"/> If serving servlets by class name is set at the application level, update the webApplication elements or ibm-web-ext files. Default Value: WebSphere Liberty disables serving servlets by class name by default, disallowServeServletsByClassName is set to true. References: 1. https://openliberty.io/docs/latest/reference/config/webApplication.html#web-ext 2. https://openliberty.io/docs/latest/reference/config/webContainer.html 3. https://openliberty.io/docs/latest/application-configuration-hardening.html",
    "function_names": [
      "app_engine_application_disallow_serve_servlets_by_classname_disabled",
      "app_engine_application_servlet_serving_restricted",
      "app_engine_application_classname_servlet_disabled",
      "app_engine_application_servlet_access_controlled",
      "app_engine_application_servlet_serving_by_classname_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webApplication.html#web-ext 2. https://openliberty.io/docs/latest/reference/config/webContainer.html 3. https://openliberty.io/docs/latest/application-configuration-hardening.html"
  },
  {
    "id": "4.4.19",
    "title": "Ensure server headers on requests are removed",
    "assessment": "Automated",
    "description": "A server header contains information about the software used by the server to handle the request. This information can be returned to browsers or web clients in certain situations.",
    "rationale": "Revealing the specific software version of the server may allow Websphere Liberty to become more vulnerable to attacks against software that is known to contain security holes. Enabling the removeServerHeader on the Liberty configuration removes this information and overrides the default value that is sent down in the HTTP header further masking any information about Websphere Liberty implementation.",
    "audit": "Ensure the removeServerHeader attribute set to true in the httpOptions element in Liberty configuration. grep -w -R -i 'removeServerHeader' ${server.config.dir}",
    "remediation": "Add the removeServerHeader attribute to httpOptions element specified in ${server.config.dir}/configDropins/overrides/*.xml. Set the removeServerHeader attribute value to true. <httpEndpoint id=\"defaultHttpEndpoint\" ... <httpOptions removeServerHeader=`true`/> </httpEndpoint> Default Value: Liberty server headers are enabled by default. References: 1. https://openliberty.io/docs/latest/reference/config/httpOptions.html",
    "function_names": [
      "cloud_cdn_distribution_server_headers_removed",
      "cloud_cdn_cache_server_headers_removed",
      "compute_load_balancer_server_headers_removed",
      "compute_instance_server_headers_removed",
      "storage_bucket_server_headers_removed",
      "api_gateway_server_headers_removed",
      "cloud_front_server_headers_removed",
      "web_application_server_headers_removed"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpOptions.html"
  },
  {
    "id": "4.4.20",
    "title": "Ensure 'directoryBrowsingEnabled' is set to 'false' for web applications",
    "assessment": "Automated",
    "description": "Disable directory browsing for your web applications. Directory browsing automatically list the contents of directories that do not have an index page or welcome page present.",
    "rationale": "Directory browsing enables the web applications to expose the file names in the application.",
    "audit": "Ensure the directoryBrowsingEnabled attribute on the webContainer element configured in the Liberty configuration is set to false. grep -w -R -i 'directoryBrowsingEnabled' ${server.config.dir} Directory browsing can also be set on the enable-directory-browsing attributes in the web-ext element for individual webApplication elements. For legacy web applications, directory browsing can also be set in the ibm-web-ext.xml or ibm-web-ext.xmi files in the application.",
    "remediation": "Add the directoryBrowsingEnabled attribute on the webContainer element in ${server.config.dir}/configDropins/overrides/*.xml and set it to false. <webContainer directoryBrowsingEnabled=\"false\"/> If directory browsing is set at the application level, update the webApplication elements or ibm-web-ext files. Default Value: In WebSphere Liberty directory browsing for web applications is disabled by default, directoryBrowsingEnabled is set to false. References: 1. https://openliberty.io/docs/latest/reference/config/webContainer.html 2. https://openliberty.io/docs/latest/reference/config/webApplication.html#web-ext 3. https://openliberty.io/docs/latest/application-configuration-hardening.html",
    "function_names": [
      "web_app_directory_browsing_disabled",
      "web_app_directory_browsing_not_enabled",
      "web_app_directory_listing_disabled",
      "web_app_directory_indexing_disabled",
      "web_app_directory_browsing_set_false"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webContainer.html 2. https://openliberty.io/docs/latest/reference/config/webApplication.html#web-ext 3. https://openliberty.io/docs/latest/application-configuration-hardening.html"
  },
  {
    "id": "4.4.21",
    "title": "Ensure 'default-error-page' is set for web applications",
    "assessment": "Manual",
    "description": "When errors occur in a Web application or before the application dispatch, an error message is displayed to the user. By default, the app server displays an exception stack dump of the error. A default error handler or page should be defined for all applications.",
    "rationale": "Without a default error page, displaying the exception stack may reveal information about the application. For example, the names of classes and methods that are in the stack information. The exception message text is also displayed which could contain sensitive information.",
    "audit": "Ensure that the default-error-page attribute is set to an error page in the web-ext element of all of the webApplication elements in the Liberty configuration. grep -w -R -i 'default-error-page' ${server.config.dir} The default error page can also be set in the web.xml file in the application. For legacy web applications, the default error page can also be set in the ibm-web- ext.xml or ibm-web-ext.xmi files in the application.",
    "remediation": "Add the default-error-page attribute on the web-ext element for all webApplication elements in ${server.config.dir}/configDropins/overrides/*.xml and set it to a valid error page. <webApplication ... > <web-ext default-error-page=\"errorPageName.jsp\"/> Default Value: WebSphere Liberty does not provide a default error page for web applications. References: 1. https://openliberty.io/docs/latest/reference/config/webApplication.html#web-ext",
    "function_names": [
      "cloud_cdn_web_app_default_error_page_enabled",
      "compute_web_app_default_error_page_configured",
      "web_app_default_error_page_customized",
      "web_app_error_handling_default_page_set",
      "cloud_cdn_web_app_error_page_defined",
      "compute_web_app_error_page_enabled",
      "web_app_default_error_page_configured",
      "web_app_error_page_customized"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/webApplication.html#web-ext"
  },
  {
    "id": "4.4.22",
    "title": "Ensure virtual hosts are defined to isolate applications",
    "assessment": "Automated",
    "description": "Isolate applications by configuring separate virtual hosts.",
    "rationale": "Use separate ports using virtual hosts to decouple access to different applications.",
    "audit": "Ensure the following to enable virtual hosting. 1. Configure the application with virtual-host name in the enterpriseApplication or webApplication elements in the Liberty configuration. grep -w -R -i 'virtual-host name' ${server.config.dir} Note: The virtual-host name can also be set in the ibm-web.bnd.xml file in the application. 2. Configure the application to use the specific virtual host in Liberty configuration. grep -w -R -i 'virtualHost' ${server.config.dir}",
    "remediation": "Ensure the following to enable virtual hosting. 1. Configure the application with virtual-host name in the enterpriseApplication or webApplication elements in the [Liberty configuration]${server.config.dir}/configDropins/overrides/*.xml <webApplication ... > <web-bnd virtual-host name=\"myApplication1\"/> </webApplication> Note: The virtual-host name can also be set in the ibm-web.bnd.xml file in the application.  2. Configure the application to use the specific virtual host in ${server.config.dir}/configDropins/overrides/*.xml. <virtualHost id=\"myApplication1\"> <hostAlias>your_host_name:9080</hostAlias> </virtualHost> Default Value: WebSphere Liberty provides a default virtual host (default_host) that matches requests from any incoming host and port combination. References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-using-virtual-hosts",
    "function_names": [
      "compute_virtual_host_isolated",
      "compute_virtual_host_application_isolation",
      "compute_virtual_host_separate_apps",
      "compute_virtual_host_isolation_enabled",
      "compute_virtual_host_application_separation"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-using-virtual-hosts"
  },
  {
    "id": "4.4.23",
    "title": "Ensure virtual hosts are Defined to isolate JMX communication and application traffic",
    "assessment": "Automated",
    "description": "Isolate JMX communication and application traffic using separate virtual hosts for applications.",
    "rationale": "Use separate ports using virtual hosts to decouple JMX and applications communication.",
    "audit": "Ensure the following to isolate the JMX communication with application traffic. This needs to be configured for every application so that only the JMX communication uses the default virtual host and all applications traffic use the respective virtual hosts. 1. Configure the application with virtual-host name in the enterpriseApplication or webApplication elements in the Liberty configuration. grep -w -R -i 'virtual-host name' ${server.config.dir} Note: The virtual-host name can also be set in the ibm-web.bnd.xml or ibm-web- bnd.xmi file in the application. 2. Configure the application to use the specific virtual host in Liberty configuration. grep -w -R -i 'virtualHost' ${server.config.dir}",
    "remediation": "Ensure the following to enable virtual hosting. 1. Configure the application with virtual-host name in the enterpriseApplication or webApplication elements in the [Liberty configuration]${server.config.dir}/configDropins/overrides/*.xml <webApplication ... > <web-bnd virtual-host name=\"myApplication1\"/> </webApplication> Note: The virtual-host name can also be set in the ibm-web.bnd.xml file in the application. 2. Configure the application to use the specific virtual host in ${server.config.dir}/configDropins/overrides/*.xml. <virtualHost id=\"myApplication1\"> <hostAlias>your_host_name:9080</hostAlias> </virtualHost> Default Value: WebSphere Liberty provides a default virtual host (default_host) that matches requests from any incoming host and port combination including both the JMX and the application traffic. References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-using-virtual-hosts",
    "function_names": [
      "compute_virtual_host_jmx_isolated",
      "compute_virtual_host_traffic_isolated",
      "compute_virtual_host_jmx_traffic_separated",
      "compute_virtual_host_application_traffic_separated",
      "compute_virtual_host_jmx_communication_isolated"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-using-virtual-hosts"
  },
  {
    "id": "4.4.24",
    "title": "Ensure whitelisting of virtual hosts to validate access based on originating endpoint",
    "assessment": "Automated",
    "description": "Restrict access to default and system applications based on originating endpoint.",
    "rationale": "Restrict access to default and system application based on an originating endpoint.",
    "audit": "1. Ensure that a specific httpEndpoint is defined in the Liberty configuration. grep -w -R -i 'httpEndpoint' ${server.config.dir} 2. Ensure that the allowFromEndPoint attribute is set in the virtualHost element to the httpEndpoint specified above in Liberty configuration. grep -w -R -i 'virtualHost' ${server.config.dir}",
    "remediation": "1. Configure a httpEndpoint element in the [Liberty configuration]${server.config.dir}/configDropins/overrides/*.xml. For example, <httpEndpoint id=\"localHostOnly\" host=\"localhost\" httpPort=\"9081\" httpsPort=\"9444\"/> 2. Configure the default_host virtualHost element with allowFromEndPointRef pointing to the httpEndpoint value configured above. <virtualHost id=\"default_host\" allowFromEndpointRef=\"localHostOnly\"> <hostAlias>*:9081</hostAlias> <hostAlias>*:9444</hostAlias> </virtualHost> Default Value: WebSphere Liberty provides a default virtual host (default_host) that matches requests from any incoming host and port combination. References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-using-virtual-hosts  5 Enterprise Java Beans (EJB) Applications 5.1 The CSIv2 (Common Secure Interoperability version 2) serverPolicy CSIv2 is a protocol used by the EJB (Enterprise Java Beans) clients to communicate using RMI/IIOP with the EJB applications. This protocol supports different authentication mechanisms. The following recommendations discuss all the 3 mechanisms for the CSIv2 policy on the server side. One can configure one or more of these to protect the EJB applications as per the CSIv2 specification.",
    "function_names": [
      "cloud_cdn_distribution_whitelisted_virtual_hosts",
      "cloud_cdn_endpoint_origin_restricted",
      "cloud_cdn_application_access_whitelisted",
      "cloud_cdn_virtual_host_origin_validation_enabled",
      "cloud_cdn_endpoint_whitelisted_origins",
      "cloud_cdn_application_origin_restricted",
      "cloud_cdn_virtual_host_access_control_enabled",
      "cloud_cdn_distribution_origin_whitelisted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-using-virtual-hosts  5 Enterprise Java Beans (EJB) Applications 5.1 The CSIv2 (Common Secure Interoperability version 2) serverPolicy CSIv2 is a protocol used by the EJB (Enterprise Java Beans) clients to communicate using RMI/IIOP with the EJB applications. This protocol supports different authentication mechanisms. The following recommendations discuss all the 3 mechanisms for the CSIv2 policy on the server side. One can configure one or more of these to protect the EJB applications as per the CSIv2 specification."
  },
  {
    "id": "5.1.1",
    "title": "Ensure 'sslEnabled' is set to 'true' within the CSIv2 Transport Layer",
    "assessment": "Automated",
    "description": "The CSIv2 Transport policy configures security at the transport layer when accessing EJB applications using RMI/IIOP.",
    "rationale": "Setting the configuration at the transport layer for RMI/IIOP requests will ensure that the data is passed through the IIOPS secure channel.",
    "audit": "Ensure the sslEnabled attribute in the ORB > serverPolicy.csiv2 > layers > transportLayer element is set to true in the Liberty configuration grep -w -R -i 'sslEnabled' ${server.config.dir}",
    "remediation": "Set the sslEnabled attribute in ORB > serverPolicy.csiv2 > layers > transportLayer to true in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <orb id=\"defaultOrb\"> <serverPolicy.csiv2> <layers> <transportLayer sslEnabled=\"true\"/> </layers> </serverPolicy.csiv2> </orb> Default Value: The default value of the sslEnabled attribute on csiv2 in the orb element is true. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring-inbound- csiv2-transport-layer",
    "function_names": [
      "ejb_transport_ssl_enabled",
      "ejb_transport_ssl_enabled_csi_v2",
      "ejb_transport_tls_required",
      "ejb_transport_secure_communication_enabled",
      "ejb_transport_encryption_enabled",
      "ejb_transport_rmiiop_ssl_enabled",
      "ejb_transport_security_enabled",
      "ejb_transport_tls_enabled_csi_v2"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring-inbound- csiv2-transport-layer"
  },
  {
    "id": "5.1.2",
    "title": "Ensure 'establishTrustInClient' is set to 'required' within the CSIv2 Authentication Layer",
    "assessment": "Automated",
    "description": "The CSIv2 Authentication policy configures security at the Authentication layer when accessing EJB applications using RMI/IIOP.",
    "rationale": "The establishTrustInClient option of the authentication layer is set to Required to force the client to use one of the authentication mechanisms specified.",
    "audit": "If the clients are required to use authentication layer to provide credentials, ensure the establishTrustInClient attribute in the ORB > serverPolicy.csiv2 > layers > authenticationLayer element is set to Required in the Liberty configuration grep -w -R -i 'establishTrustInClient' ${server.config.dir}",
    "remediation": "Set the establishTrustInClient attribute in ORB > serverPolicy.csiv2 > layers > authenticationLayer to Required in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <orb id=\"defaultOrb\"> <serverPolicy.csiv2> <layers> <authenticationLayer mechanisms=\"LTPA,GSSUP\" establishTrustInClient=\"Required\"/> </layers> </serverPolicy.csiv2> </orb> Default Value: The default value of the establishTrustInClient attribute on csiv2 in the orb element is Required. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring-inbound- csiv2-authentication-layer",
    "function_names": [
      "ejb_authentication_layer_establish_trust_required",
      "ejb_authentication_policy_establish_trust_in_client_required",
      "ejb_csi_v2_authentication_trust_required",
      "ejb_rmi_iiop_authentication_trust_required",
      "ejb_security_policy_establish_trust_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring-inbound- csiv2-authentication-layer"
  },
  {
    "id": "5.1.3",
    "title": "Ensure 'identityAssertionEnabled' is set to 'true' within the CSIv2 Attribute Layer",
    "assessment": "Automated",
    "description": "The CSIv2 Attribute policy configures security at the Attribute layer when accessing EJB applications using RMI/IIOP.",
    "rationale": "If identity assertion is required by the server, the identityAssertionTypes attribute of the attribute layer is set to specify the identity token types that the server supports. If other authentication mechanisms are used to validate the client, this is not required.",
    "audit": "Ensure the identityAssertionEnabled attribute in the ORB > serverPolicy.csiv2 > layers > attributeLayer element is set to true in the Liberty configuration grep -w -R -i 'identityAssertionEnabled' ${server.config.dir} And also ensure identityAssertionTypes is specified and does not include ITTAnonymous grep -w -R -i 'identityAssertionTypes' ${server.config.dir}",
    "remediation": "Set the identityAssertionEnabled attribute to true and identityAssertionTypes to ITTX509CertChain, ITTDistinguishedName in ORB > serverPolicy.csiv2 > layers > authenticationLayer in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <orb id=\"defaultOrb\"> <serverPolicy.csiv2> <layers> <attributeLayer identityAssertionEnabled=\"true\" identityAssertionTypes=\"ITTX509CertChain, ITTDistinguishedName\"/> </layers> </serverPolicy.csiv2> </orb> References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring-inbound- csiv2-attribute-layer",
    "function_names": [
      "ejb_attribute_identity_assertion_enabled",
      "ejb_attribute_identity_assertion_required",
      "ejb_csiv2_identity_assertion_enabled",
      "ejb_csiv2_identity_assertion_configured",
      "ejb_rmiiop_identity_assertion_enabled",
      "ejb_rmiiop_identity_assertion_required",
      "ejb_security_attribute_identity_assertion_enabled",
      "ejb_security_attribute_identity_assertion_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring-inbound- csiv2-attribute-layer"
  },
  {
    "id": "5.2.1",
    "title": "Ensure 'sslEnabled' is set to 'true' within the CSIv2 TransportLayer - needsReview/Zech",
    "assessment": "Manual",
    "description": "The CSIv2 Transport policy configures security at the transport layer when accessing EJB applications using RMI/IIOP.",
    "rationale": "Setting the configuration at the transport layer for RMI/IIOP requests will ensure that the data is passed through the IIOPS secure channel.",
    "audit": "Ensure the sslEnabled attribute in the ORB > clientPolicy.csiv2 > layers > transportLayer element is set to true in the Liberty configuration grep -w -R -i 'sslEnabled' ${server.config.dir}",
    "remediation": "Set the sslEnabled attribute in ORB > clientPolicy.csiv2 > layers > transportLayer to true in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <orb id=\"defaultOrb\"> <clientPolicy.csiv2> <layers> <transportLayer sslEnabled=\"true\"/> </layers> </clientPolicy.csiv2> </orb> Default Value: The default value of the sslEnabled attribute on csiv2 in the orb element is true. References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring- outbound-csiv2-transport-layer",
    "function_names": [
      "ejb_transport_layer_ssl_enabled",
      "ejb_transport_layer_secure_communication",
      "ejb_transport_layer_encryption_enabled",
      "ejb_transport_layer_tls_required",
      "ejb_transport_layer_secure_protocol_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring- outbound-csiv2-transport-layer"
  },
  {
    "id": "5.2.2",
    "title": "Ensure 'establishTrustInClient' is 'Required' for the CSIv2 Authentication Layer - needsReview/Zech",
    "assessment": "Manual",
    "description": "The CSIv2 Authentication policy configures security at the Authentication layer when accessing EJB applications using RMI/IIOP.",
    "rationale": "The establishTrustInClient option of the authentication layer is set to Required to force the client to use one of the authentication mechanisms specified.",
    "audit": "Ensure the establishTrustInClient attribute in the ORB > serverPolicy.csiv2 > layers > authenticationLayer element is set to Required in the Liberty configuration grep -w -R -i 'establishTrustInClient' ${server.config.dir}",
    "remediation": "Set the establishTrustInClient attribute in ORB > clientPolicy.csiv2 > layers > authenticationLayer to Required in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <orb id=\"defaultOrb\"> <clientPolicy.csiv2> <layers> <authenticationLayer mechanisms=\"LTPA,GSSUP\" establishTrustInClient=\"Required\"/> </layers> </clientPolicy.csiv2> </orb> References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring- outbound-csiv2-authentication-layer",
    "function_names": [
      "ejb_authentication_layer_establish_trust_required",
      "ejb_csiv2_authentication_trust_in_client_required",
      "ejb_rmi_iiop_authentication_trust_required",
      "ejb_authentication_policy_trust_in_client_required",
      "ejb_csiv2_authentication_layer_trust_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring- outbound-csiv2-authentication-layer"
  },
  {
    "id": "5.2.3",
    "title": "Ensure 'identityAssertionTypes' is specified to the correct identity tokens in CSIv2 Attribute Layer - review/Zech",
    "assessment": "Manual",
    "description": "The CSIv2 Attribute policy configures security at the Attribute layer when accessing EJB applications using RMI/IIOP.",
    "rationale": "The identityAssertionTypes attribute of the attribute layer is set to specify the identity token types that the server supports.",
    "audit": "Ensure the identityAssertionEnabled attribute in the ORB > serverPolicy.csiv2 > layers > attributeLayer element is set to true in the Liberty configuration grep -w -R -i 'identityAssertionEnabled' ${server.config.dir} And also ensure identityAssertionTypes is specified and does not include ITTAnonymous grep -w -R -i 'identityAssertionTypes' ${server.config.dir}",
    "remediation": "Set the identityAssertionEnabled attribute to true and identityAssertionTypes to ITTX509CertChain, ITTDistinguishedName in ORB > serverPolicy.csiv2 > layers > authenticationLayer in the ${server.config.dir}/configDropins/overrides/<any file name>.xml <orb id=\"defaultOrb\"> <clientPolicy.csiv2> <layers> <attributeLayer identityAssertionEnabled=\"true\" identityAssertionTypes=\"ITTX509CertChain, ITTDistinguishedName\"/> </layers> </clientPolicy.csiv2> </orb> References: 1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring- outbound-csiv2-attribute-layer",
    "function_names": [
      "ejb_attribute_identity_assertion_types_specified",
      "ejb_attribute_correct_identity_tokens_configured",
      "ejb_attribute_csi_v2_identity_assertion_valid",
      "ejb_attribute_secure_identity_tokens_required",
      "ejb_attribute_rmi_iiop_identity_assertion_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/core?topic=liberty-configuring- outbound-csiv2-attribute-layer"
  },
  {
    "id": "5.3.1",
    "title": "Ensure filters are configured for Java serialization (JEP 290)",
    "assessment": "Manual",
    "description": "Java provides configuration to allow incoming streams of object-serialization data to be filtered in order to improve both security and robustness. This allows",
    "rationale": "There have been issues with deserialization of untrusted data in Java. To mitigate this, openJDK provides a flexible mechanism using filters to restrict the classes that can be deserialized. In addition, it also provides metrics to control the filter size, depth etc. Impact: The filters to allow classes to be deserialized or deny classes to be serialized should be based on individual scenarios. They need to be done with care to mitigate any side impacts. More information in the links provided in the reference section.",
    "audit": "Check for the System property jdk.serialFilter in the ${server.config.dir}/bootstrap.properties file or the security property in $JAVA_HOME/conf/security/java,properties and confirm it has the correct filters set to restrict Java deserialization to the trusted classes. jdk.serialFilter",
    "remediation": "Set the System property jdk.serialFilter in the ${server.config.dir}/bootstrap.properties file to the correct filters to restrict classes to be deserialized. For example, jdk.serialFilter=!com.myCompany.restrictClass;com.myCompany.allowClass References: 1. https://openjdk.java.net/jeps/290 2. https://openjdk.java.net/jeps/415",
    "function_names": [
      "java_serialization_filter_configured",
      "java_serialization_jepp290_filter_enabled",
      "java_serialization_input_filtering_enabled",
      "java_serialization_secure_filtering_enabled",
      "java_serialization_deserialization_filter_configured",
      "java_serialization_security_filter_enabled",
      "java_serialization_jepp290_compliance_enabled",
      "java_serialization_secure_deserialization_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "impact": "The filters to allow classes to be deserialized or deny classes to be serialized should be based on individual scenarios. They need to be done with care to mitigate any side impacts. More information in the links provided in the reference section.",
    "references": "1. https://openjdk.java.net/jeps/290 2. https://openjdk.java.net/jeps/415"
  },
  {
    "id": "5.4.1",
    "title": "Ensure that all appropriate EJB methods are protected",
    "assessment": "Automated",
    "description": "Access to the EJB methods should be protected appropriately using roles in deployment descriptor or annotations.",
    "rationale": "Protecting the appropriate EJB methods will ensure that users have to provide the correct credentials to access them.",
    "audit": "Ensure the <method-permission> elements are specified in the ejb-jar.xml deployment descriptor file for each application. grep -w -R -i 'method-permission' ${server.config.dir} Note: If using annotations, make sure that the appropriate methods are protected using one of the @RolesAllowed/@PermitAll/@DenyAll annotations.",
    "remediation": "Set <method-permission> elements in the ejb-jar.xml deployment descriptor file of each application or use annotations. Example using method-permission: <method-permission> <role-name>teller</role-name> <method> <ejb-name>myEJB1</ejb-name> <method-name>getBalance</method-name> </method> </method-permission> Example using annotations: @RolesAllowed(\"teller\") public class myEJB1 { public void getBalance () {...} ... }",
    "function_names": [
      "ejb_method_protected_by_role",
      "ejb_method_role_based_access",
      "ejb_deployment_descriptor_roles_defined",
      "ejb_annotation_roles_configured",
      "ejb_method_access_restricted",
      "ejb_security_role_mapping_configured",
      "ejb_method_authorization_required",
      "ejb_deployment_descriptor_security_enabled",
      "ejb_annotation_security_enforced",
      "ejb_method_protection_validated"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "6.1",
    "title": "Ensure 'HttpsToken' is set in WS-Security policy",
    "assessment": "Automated",
    "description": "Protect JAX-WS Web services applications by enabling HTTPS secure transport in WS- Security policy. Enabling HTTPS secure transport in WS-Security policy protects JAX- WS web services. Enable HTTPS for secure communications.",
    "rationale": "Using TLS to protect the JAX-WS Web services applications will provide additional protection which may not be provided by SOAP message level security.",
    "audit": "Ensure the HttpsToken assertion is specified for transport binding in policy specified in wsdl or policy attachment files for each web service. grep -w -R -i 'HttpsToken' ${server.config.dir}",
    "remediation": "Add HttpsToken as seen in the example to wsdl or policy attachment files for each web service. <wsp:Policy ...> ... <sp:TransportBinding> <wsp:Policy> <sp:TransportToken> <wsp:Policy> <sp:HttpsToken /> </wsp:Policy> </sp:TransportToken> ... </wsp:Policy> </sp:TransportBinding> </wsp:Policy> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=security-web-services- https-transport-policy-assertions",
    "function_names": [
      "web_services_policy_https_token_enabled",
      "web_services_policy_https_secure_transport_enabled",
      "ws_security_policy_https_token_required",
      "ws_security_policy_https_transport_enabled",
      "jax_ws_policy_https_token_enabled",
      "jax_ws_policy_https_secure_transport_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=security-web-services- https-transport-policy-assertions"
  },
  {
    "id": "6.2",
    "title": "Ensured 'HashPassword' is set in UsernameToken WS- Security policy",
    "assessment": "Automated",
    "description": "Hashing passwords in the Username token of WS-Security policy obfuscates the password which is more secure.",
    "rationale": "Using one-way hash of password in username token instead of plaintext password prevents password leaks.",
    "audit": "Ensure the HashPassword policy assertion is specified in WS-Security policy for Username token in wsdl or policy attachment files for each web service. grep -w -R -i 'HashPassword' ${server.config.dir}",
    "remediation": "Add HashPassword as seen in the example to wsdl or policy attachment files for each web service. <sp:UsernameToken sp:IncludeToken=\"...\"> ... <wsp:Policy> <sp:WssUsernameToken11 /> <sp:HashPassword /> </wsp:Policy> .. </sp:UsernameToken> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-authentication-web- services-clients-usernametoken",
    "function_names": [
      "ws_security_username_token_hash_password_enabled",
      "ws_security_policy_password_hashing_required",
      "ws_security_username_token_password_hashed",
      "ws_security_policy_hash_password_enabled",
      "ws_security_username_token_password_obfuscation_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-authentication-web- services-clients-usernametoken"
  },
  {
    "id": "6.3",
    "title": "Ensure CallbackHandler is used to access private keys in keystore files",
    "assessment": "Manual",
    "description": "Use CallbackHandler to retrieve user password and for accessing private keys in keystore files. Using the CallbackHandler method to retrieve a user's password and access private keys in keystore files ___ (state benefit). Do not use plain text passwords in user and keystore fields for WebServices security.",
    "rationale": "Using CallbackHandler to retrieve user and keystore passwords is more secure than specifying plaintext passwords in Liberty configuration .",
    "audit": "Ensure that the org.apache.ws.security.crypto.merlin.keystore.private.password attribute is not specified in the encryptionProperties and signatureProperties element in Web Services Security client and provider configurations. grep -w -R -i 'org.apache.ws.security.crypto.merlin.keystore.private.password' ${server.config.dir} Ensure that the ws-security.password attribute is not specified in the Web Services Security client and provider configurations. grep -w -R -i 'ws-security.password' ${server.config.dir}",
    "remediation": "Ensure that the passwords are not configured in the wsSecurityClient and wsSecurityProvider elements in ${server.config.dir}/configDropins/overrides/<any file name>.xml. For more information, see the References section. \"Implement the callbackhandler method. For more information, see the References section.\" <wsSecurityClient id=\"default\" ws-security.callback- handler=\"com.myCompany.myExample.myCBH\" ...> ... </wsSecurityClient> <wsSecurityProvider id=\"default\" ws-security.callback- handler=\"com.myCompany.myExample.myCBH\" ...> ... </wsSecurityProvider> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-developing-password- callback-handler-ws-security 2. https://www.ibm.com/docs/en/was-liberty/base?topic=configuration- wssecurityclient",
    "function_names": [
      "keystore_private_key_callback_handler_used",
      "keystore_private_key_no_plaintext_passwords",
      "webservice_keystore_callback_handler_required",
      "webservice_keystore_no_plaintext_credentials",
      "keystore_private_key_access_callback_handler_enabled",
      "webservice_keystore_password_callback_handler_used"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-developing-password- callback-handler-ws-security 2. https://www.ibm.com/docs/en/was-liberty/base?topic=configuration- wssecurityclient"
  },
  {
    "id": "6.4",
    "title": "Ensure SOAP messages are Signed and encrypted with WS- Security policy",
    "assessment": "Manual",
    "description": "Signing and encrypting SOAP messages protects JAX-WS web services.",
    "rationale": "Signing and encrypting SOAP messages protects against message tampering and information disclosure.",
    "audit": "Ensure that SignedParts and EncryptedParts are specified in the WS-Security policy in wsdl or policy attachment files for each web service. grep -w -R 'SignedParts\\|EncryptedParts' ${server.config.dir}",
    "remediation": "Add SignedParts and EncryptedParts assertions to sign and encrypt SOAP Body wsdl or policy attachment files for each web service. <wsp:Policy> ... <sp:SignedParts> <sp:Body /> </sp:SignedParts> ... <sp:EncryptedParts> <sp:Body /> </sp:EncryptedParts> ... </wsp:Policy> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-protection-web- services-x509-token",
    "function_names": [
      "cloud_cdn_soap_message_signed",
      "cloud_cdn_soap_message_encrypted",
      "cloud_cdn_ws_security_policy_enabled",
      "cloud_cdn_soap_message_signed_and_encrypted",
      "cloud_cdn_jax_ws_security_enabled",
      "cloud_cdn_soap_ws_security_compliance",
      "cloud_cdn_soap_message_protection_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-protection-web- services-x509-token"
  },
  {
    "id": "6.5",
    "title": "Ensure that 2048 bit keys are used for signing and encrypting SOAP messages with WS-Security policy",
    "assessment": "Manual",
    "description": "Using keys with at least 2048 bits in length when signing and encrypting SOAP messages using WS-Security policy is more secure.",
    "rationale": "Using 2048 bit keys for signing and encrypting is more secure than using 1024 bit keys.",
    "audit": "Use a keytool to view the keys used in signing and encrypting and ensure that the key size is 2048 bits or higher. keytool -list -v -keystore <keystore file name> -storepass <store password> - storetype <store type> | grep 'Signature algorithm name\\|Subject Public Key Algorithm' ... Signature algorithm name: SHA256withRSA Subject Public Key Algorithm: 2048-bit RSA key ...",
    "remediation": "Create signing and encryption keys with key size of 2048 bits or higher.",
    "function_names": [
      "cloud_cdn_ws_security_policy_min_2048_bit_keys",
      "soap_message_ws_security_policy_key_length_2048",
      "ws_security_policy_soap_message_key_size_2048",
      "cloud_cdn_soap_message_encryption_key_2048_bit",
      "ws_security_policy_signing_encryption_key_2048_bit"
    ],
    "profile_applicability": "\u2022  Level 1"
  },
  {
    "id": "6.6",
    "title": "Ensure 'AlgorithmSuite' is set to that strong algorithms for signing and encrypting messages with WS-Security policy",
    "assessment": "Automated",
    "description": "Using strong signature and encryption algorithms when signing and encrypting SOAP messages using WS-Security policy increases security. Using strong signature and encryption algorithms when signing and encrypting SOAP messages using WS-Security policy is more secure.",
    "rationale": "Using strong signature and encryption algorithms is more secure.",
    "audit": "Ensure the AlgorithmSuite in WS-Security policy specifies SHA2 signature algorithm and strong encryption algorithm like AES 256 bits in wsdl or policy attachment files for each web service. grep -w -R -i 'AlgorithmSuite' ${server.config.dir}",
    "remediation": "Use Basic256Sha256 for Algorithm suite in WS-Security policy as seen in the example to wsdl or policy attachment files for each web service. <sp:AlgorithmSuite> <wsp:Policy> <sp:Basic256Sha256/> </wsp:Policy> </sp:AlgorithmSuite> References: 1. http://docs.oasis-open.org/ws-sx/ws-securitypolicy/v1.2/ws-securitypolicy.html",
    "function_names": [
      "api_gateway_ws_security_strong_algorithm_suite",
      "api_gateway_ws_security_signature_strong_algorithm",
      "api_gateway_ws_security_encryption_strong_algorithm",
      "api_gateway_ws_security_policy_strong_algorithm_suite",
      "api_gateway_ws_security_message_strong_algorithm_suite"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. http://docs.oasis-open.org/ws-sx/ws-securitypolicy/v1.2/ws-securitypolicy.html"
  },
  {
    "id": "6.7",
    "title": "Ensure 'http.conduit.tlsClientParameters.disableCNCheck' is set to 'false' to enable hostname verification for JAX-WS applications",
    "assessment": "Automated",
    "description": "Enable hostname verification in JAX-WS applications by setting the http.conduit.tlsClientParameters.diableCNCheck HTTP conduit property to false. or Do not disable hostname verification in JAX-WS applications by setting the http.conduit.tlsClientParameters.diableCNCheck HTTP conduit property to true. or Enable hostname verification in JAX-WS applications. or Do not disable hostname verification in JAX-WS applications. Disabling hostname verification in JAX-WS applications by setting the http.conduit.tlsClientParameters.diableCNCheck HTTP conduit property to false. Disable hostname verification in JAX-WS applications by setting the http conduit property http.conduit.tlsClientParameters.disableCNCheck to false.",
    "rationale": "Hostname verification enables the client to trust the server it is communicating with during the SSL/TLS handshake. Hostname verification mitigates the man-in-the-middle attackers which can spoof SSL/TLS servers via an arbitrary valid certificate by ensuring that SSL server hostname matches a domain name in the subject's Common Name (CN) of the X.509 certificate.",
    "audit": "Ensure the http.conduit.tlsClientParameters.diableCNCheck property is not set to true in the Liberty configuration. . Note that this can be also set in the application's ibm-ws- bnd.xml binding file. grep -w -R 'http.conduit.tlsClientParameters.disableCNCheck' ${server.config.dir}",
    "remediation": "Add the http.conduit.tlsClientParameters.disableCNCheck property to webservice- endpoint element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. Set the http.conduit.tlsClientParameters.disableCNCheck attributes value to false for both provider and client sides. The same setting can be disabled trough WEB-INF/ibm-ws-bnd.xml of the web application or META-INF/ibm-ws-bnd.xml of the EJB module. ... <!-- ***** Provider Side ***** --> <webApplication ... > <webservices-bnd ... > <webservice-endpoint ... > <properties http.conduit.tlsClientParameters.disableCNCheck=\"false\" /> </webservice-endpoint> </webservices-bnd> </webApplication> ... <!-- ***** Client Side (service-ref) ***** --> <webApplication ... > <webservices-bnd ... > <service-ref ... > <properties http.conduit.tlsClientParameters.disableCNCheck=\"false\" /> </service-ref> </webservices-bnd> </webApplication> Default Value: The http.conduit.tlsClientParameters.diableCNCheck property is set to false by default. References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-enabling-ssl- communication-web-services-access 2. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-ws-bndxml-file",
    "function_names": [
      "jaxws_conduit_hostname_verification_enabled",
      "jaxws_conduit_tls_cn_check_enabled",
      "jaxws_conduit_tls_client_parameters_cn_check_enabled",
      "jaxws_http_conduit_tls_hostname_verification_enabled",
      "jaxws_tls_client_parameters_cn_check_not_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=level-enabling-ssl- communication-web-services-access 2. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-ws-bndxml-file"
  },
  {
    "id": "7.1",
    "title": "Ensure the 'hostNameExcludeList' attribute is set to a whitelist of host names",
    "assessment": "Manual",
    "description": "Host names can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address exclude list protects against unwanted inbound connections.",
    "audit": "Ensure the hostNameExcludeList attribute is set to a list of host names in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'hostNameExcludeList' ${server.config.dir}",
    "remediation": "Add the hostNameExcludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set to comma-separated list of host names. <tcpOptions hostNameExcludeList=\"*.abc.com,sample.all.com\" /> References: 1. https://openliberty.io/docs/22.0.0.1/reference/config/wasJmsOutbound.html",
    "function_names": [
      "cloud_cdn_endpoint_hostname_whitelist_enabled",
      "cloud_cdn_endpoint_hostname_exclude_list_configured",
      "cloud_cdn_endpoint_hostname_restriction_applied",
      "cloud_cdn_endpoint_inbound_hostname_filtered",
      "cloud_cdn_endpoint_tcp_connection_whitelisted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/22.0.0.1/reference/config/wasJmsOutbound.html"
  },
  {
    "id": "7.2",
    "title": "Ensure the 'hostNameIncludeList attribute' is set to a whitelist of host names",
    "assessment": "Manual",
    "description": "Host names can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address include list allows only wanted inbound connections.",
    "audit": "Ensure the hostNameIncludeList attribute is set to a list of host names in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'hostNameIncludeList' ${server.config.dir}",
    "remediation": "Add the hostNameIncludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set to comma-separated list of host names. <tcpOptions hostNameIncludeList=\"*.def.com,sample.here.com\" /> References: 1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html",
    "function_names": [
      "cloud_cdn_endpoint_hostname_whitelisted",
      "cloud_cdn_endpoint_hostname_restricted",
      "cloud_cdn_endpoint_allowlist_enabled",
      "cloud_cdn_endpoint_hostname_filtered",
      "cloud_cdn_endpoint_inbound_hostname_whitelisted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html"
  },
  {
    "id": "7.3",
    "title": "Ensure the 'addressExcludeList' attribute is set to a whitelist of hostnames",
    "assessment": "Manual",
    "description": "IP addresses can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address exclude list protects against unwanted inbound connections.",
    "audit": "Ensure the addressExcludeList attribute is set to a list of hostnames in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'addressExcludeList' ${server.config.dir}",
    "remediation": "Add the addressExcludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set it to a comma- separated list of IP addresses. <tcpOptions addressExcludeList=\"254.1.0.9,*.1.255.0\" /> References: 1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html",
    "function_names": [
      "cloud_cdn_endpoint_address_exclude_list_whitelisted",
      "cloud_cdn_endpoint_hostname_whitelist_enabled",
      "cloud_cdn_endpoint_inbound_connection_restricted",
      "cloud_cdn_endpoint_tcp_connection_whitelisted",
      "cloud_cdn_endpoint_hostname_filter_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html"
  },
  {
    "id": "7.4",
    "title": "Ensure the 'addressIncludeList' attribute is set to a whitelist of IP addresses",
    "assessment": "Manual",
    "description": "IP addresses can be allowed or blocked from creating inbound TCP connections to different HTTP endpoints.",
    "rationale": "Defining an IP address include list allows only wanted inbound connections.",
    "audit": "Ensure the addressIncludeList attribute is set to a list of IP addresses in all tcpOptions elements in the Liberty configuration. grep -w -R -i 'addressIncludeList' ${server.config.dir}",
    "remediation": "Add the addressIncludeList attribute to all tcpOptions elements to ${server.config.dir}/configDropins/overrides/*.xml and set to comma-separated list of IP Address. <tcpOptions addressIncludeList=\"254.*.*.9,255.0.0.2\" /> References: 1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html",
    "function_names": [
      "cloud_cdn_endpoint_ip_whitelist_enabled",
      "cloud_cdn_endpoint_address_include_list_configured",
      "cloud_cdn_endpoint_restrict_inbound_connections",
      "cloud_cdn_endpoint_ip_whitelist_restricted",
      "cloud_cdn_endpoint_inbound_ip_filter_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/tcpOptions.html"
  },
  {
    "id": "7.5",
    "title": "Ensure the `useSSL` attribute is set to `true` for TLS Transport",
    "assessment": "Automated",
    "description": "Configuring TLS provides secure communication for JmsOutbound connections.",
    "rationale": "TLS provides secure communication channel.",
    "audit": "Ensure the useSSL attribute for the wasJmsOutbound element is set to true in the Liberty configuration . grep -w -R 'useSSL' ${server.config.dir}",
    "remediation": "Add the useSSL attribute to wasJmsOutbound element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. Set the useSSL attributes value to true. <wasJmsOutbound ... useSSL =\"true\" /> Default Value: The useSSL attribute is false by default. References: 1. https://openliberty.io/docs/22.0.0.1/reference/config/wasJmsOutbound.html",
    "function_names": [
      "jms_outbound_connection_use_ssl_enabled",
      "jms_outbound_connection_tls_transport_enabled",
      "jms_outbound_connection_secure_transport_required",
      "jms_outbound_connection_ssl_enforced",
      "jms_outbound_connection_tls_required"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/22.0.0.1/reference/config/wasJmsOutbound.html"
  },
  {
    "id": "8.1",
    "title": "Ensure 'authentication' is set to 'true' to protect the metrics end point",
    "assessment": "Automated",
    "description": "Protect access to the metrics end point in the MicroProfile feature so that only valid users are allowed to access it.",
    "rationale": "Enabling authentication for the metrics end point will ensure that only authenticated users can access it.",
    "audit": "Ensure the authentication attribute is set to true in the mpMetrics element in the Liberty configuration grep -w -R -i 'authentication' ${server.config.dir}",
    "remediation": "Ensure that the authentication attribute of the mpMetrics element is set to true in the ${server.config.dir}/configDropins/overrides/<any file name>.xml. <mpMetrics authentication=\"true\"/> Default Value: The default value is true. References: 1. https://openliberty.io/docs/latest/reference/config/mpMetrics.html",
    "function_names": [
      "metrics_endpoint_authentication_enabled",
      "metrics_endpoint_authentication_required",
      "metrics_endpoint_authentication_enforced",
      "metrics_endpoint_authentication_configured",
      "metrics_endpoint_authentication_protected"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/mpMetrics.html"
  },
  {
    "id": "9.1",
    "title": "Ensure 'zosSecurity-1.0' feature is 'enabled' for SAF authorization",
    "assessment": "Automated",
    "description": "The SAF role mapper should be used to perform SAF authorization checks when accessing applications.",
    "rationale": "On the z/OS platform using the native z/OS facilities like the SAF authorization is recommended for application access checks.",
    "audit": "Ensure the zosSecurity-1.0 feature is enabled and the safAuthorization element is configured in the Liberty configuration . grep -w -R 'zosSecurity-1.0' ${server.config.dir} grep -w -R 'safAuthorization' ${server.config.dir}",
    "remediation": "Configure the zosSecurity-1.0 feature and set the safAuthorization element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <feature>zosSecurity-1.0</feature> <safAuthorization id=\"saf\" /> References: 1. https://www.ibm.com/docs/en/was-liberty/zos?topic=liberty-configuring- authorization-applications-in",
    "function_names": [
      "zos_security_feature_enabled",
      "zos_security_saf_authorization_enabled",
      "zos_security_role_mapper_enabled",
      "zos_security_saf_checks_enabled",
      "zos_security_feature_saf_enabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/zos?topic=liberty-configuring- authorization-applications-in"
  },
  {
    "id": "9.2",
    "title": "Ensure the location attribute in the SSL configurations points to a valid SAF Keyring containing SSL/TLS certificates",
    "assessment": "Automated",
    "description": "The SAF Keyrings is a z/OS facility to hold the certificates that are used during the SSL/TLS communication.",
    "rationale": "On z/OS using the native z/OS facilities like the SAF Keyrings to manage the SSL/TLS certificates is recommended.",
    "audit": "Ensure the location attribute in the SSL configurations points to a valid SAF Keyring and set the fileBased attribute to false in the Liberty configuration . grep -i -R 'safkeyring:' ${server.config.dir} grep -i -R 'fileBased' ${server.config.dir}",
    "remediation": "Configure the location attribute in the keyStore elements referenced by the SSL configurations to point to a valid SAF Keyring location that contains the SSL/TLS certificates and set the fileBased attribute to false in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <keyStore id=\"DefaultKeyStore\" location=\"safkeyring:///Keyring.LIBERTY\" type=\"JCERACFKS\" fileBased=\"false\" readOnly=\"true\" /> <keyStore id=\"DefaultTrustStore\" location=\"safkeyring:///Keyring.LIBERTY\" type=\"JCERACFKS\" fileBased=\"false\" readOnly=\"true\" /> References: 1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-enabling-ssl- communication-in",
    "function_names": [
      "ssl_certificate_location_valid_saf_keyring",
      "ssl_configuration_keyring_valid",
      "saf_keyring_ssl_certificates_valid",
      "ssl_tls_certificate_keyring_configured",
      "ssl_location_saf_keyring_verified"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/en/was-liberty/base?topic=liberty-enabling-ssl- communication-in"
  },
  {
    "id": "9.3",
    "title": "Ensure 'safkeyringhw:' is set to use a hardware crypto card",
    "assessment": "Manual",
    "description": "Use hardware crypto card to store to store cryptographic keys and certificates.",
    "rationale": "Using hardware crypto card to store and load cryptographic keys and certificates. Using hardware crypto cards can provide additional security guards against theft. The keys and certificates are used during cryptographic functions like encryption/decryption and also during the SSL/TLS communication.",
    "audit": "Hardware crypto cards are external devices that can store certificates that can be used for the SSL/TLS communications. They store and protect the cryptographic keys throughout their lifecycles. The use of these devices have to be weighed against the security requirements and the additional expenses this would entail. There are two ways a hardware crypto card can be used. One can configure to use the keys contained in only the hardware crypto card or configure a hybrid provider that can handle keys in both the crypto card as well as in the software. When using just the hardware crypto card, ensure that safkeyringhw: is set correctly in the location attribute of the keyStore elements of the SSL configurations. In addition, make sure that type attribute is set to JCECCARACFKS in the Liberty configuration . grep -i -R 'safkeyringhw:' ${server.config.dir} grep -i -w -R 'type' ${server.config.dir} Also make sure that the com.ibm.crypto.hdwrCCA.provider.IBMJCECCA provider is listed in the $JAVA_HOME/jre/lib/security/java.security file. grep -w -R 'com.ibm.crypto.hdwrCCA.provider.IBMJCECCA' ${JAVA_HOME} When using the hybrid provider, ensure that safkeyringhybrid: is set correctly in the location attribute of the keyStore elements of the SSL configurations. In addition, make sure that type attribute is set to JCEHYBRIDRACFKS in the Liberty configuration . grep -i -R 'safkeyringhybrid:' ${server.config.dir} grep -i -w -R 'type' ${server.config.dir} Also make sure that both the com.ibm.crypto.ibmjcehybrid.provider.IBMJCEHYBRID and the com.ibm.crypto.hdwrCCA.provider.IBMJCECCA providers are listed in the $JAVA_HOME/jre/lib/security/java.security file. grep -w -R 'com.ibm.crypto.ibmjcehybrid.provider.IBMJCEHYBRID' ${JAVA_HOME} grep -w -R 'com.ibm.crypto.hdwrCCA.provider.IBMJCECCA' ${JAVA_HOME}",
    "remediation": "For the crypto card configuration, configure the location attribute in the keyStore elements referenced by the SSL configurations to point to a valid hardware crypto keyring configuration and set the type attribute to JCECCARACFKS in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <keyStore id=\"defaultKeyStore\" location=\"safkeyringhw:///myHWKeyring\" type=\"JCECCARACFKS\" ... /> In addition, make sure that the com.ibm.crypto.hdwrCCA.provider.IBMJCECCA provider is configured in the $JAVA_HOME/jre/lib/security/java.security file. ... security.provider.3=com.ibm.crypto.hdwrCCA.provider.IBMJCECCA ... For the hybrid crypto card configuration, configure the location attribute in the keyStore elements referenced by the SSL configurations to point to a valid hybrid hardware crypto keyring configuration and set the type attribute to JCEHYBRIDRACFKS in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <keyStore id=\"defaultKeyStore\" location=\"safkeyringhybrid:///myHybridKeyring\" type=\"JCEHYBRIDRACFKS\" .../> In addition, configure the com.ibm.crypto.ibmjcehybrid.provider.IBMJCEHYBRID and the com.ibm.crypto.hdwrCCA.provider.IBMJCECCA providers in the $JAVA_HOME/jre/lib/security/java.security file. ... security.provider.2=com.ibm.crypto.ibmjcehybrid.provider.IBMJCEHYBRID security.provider.3=com.ibm.crypto.hdwrCCA.provider.IBMJCECCA ... References: 1. https://www.ibm.com/support/pages/enabling-hardware-cryptography-liberty-zos 2. https://www.ibm.com/docs/en/was-liberty/zos?topic=liberty-enabling-jce-hybrid- provider",
    "function_names": [
      "compute_keyring_hardware_crypto_enabled",
      "compute_keyring_safkeyringhw_configured",
      "compute_crypto_card_key_storage_enabled",
      "compute_keyring_hardware_backed",
      "compute_cryptographic_key_hardware_protected"
    ],
    "profile_applicability": "\u2022  Level 2",
    "references": "1. https://www.ibm.com/support/pages/enabling-hardware-cryptography-liberty-zos 2. https://www.ibm.com/docs/en/was-liberty/zos?topic=liberty-enabling-jce-hybrid- provider"
  },
  {
    "id": "9.4",
    "title": "Ensure 'safRegistry' is configured",
    "assessment": "Automated",
    "description": "The SAF user registry in the z/OS Operating System is robust and secure.",
    "rationale": "On z/OS using the native z/OS facilities like the SAF registry for authentication is recommended.",
    "audit": "Ensure the zosSecurity-1.0 feature is enabled and the safRegistry element is configured in the Liberty configuration . grep -w -R 'zosSecurity-1.0' ${server.config.dir} grep -w -R 'safRegistry' ${server.config.dir}",
    "remediation": "Configure the zosSecurity-1.0 feature and set the safRegistry element in ${server.config.dir}/configDropins/overrides/<any file name>.xml. <feature>zosSecurity-1.0</feature> <safRegistry realm=\"myrealm\" /> References: 1. https://www.ibm.com/docs/el/was-liberty/zos?topic=liberty-activating-configuring- saf-registry-zos",
    "function_names": [
      "zos_saf_registry_configured",
      "zos_user_registry_saf_enabled",
      "zos_saf_registry_secure_settings",
      "zos_operating_system_saf_registry_enabled",
      "zos_security_saf_registry_configured"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://www.ibm.com/docs/el/was-liberty/zos?topic=liberty-activating-configuring- saf-registry-zos"
  },
  {
    "id": "10.1",
    "title": "Ensure Unused Features are Removed",
    "assessment": "Automated",
    "description": "The Websphere Liberty architecture provides developers with the option to tune their server to only the features that they need. For example, the JDBC feature only needs to be added if database access is required. If you did not want any remote administrative access to the REST interface, you would remove the REST feature.",
    "rationale": "Enabling only the necessary Liberty features minimizes the disk and memory footprint of the server as well as a faster start time. Having unused features could increase the chance of having a vulnerability due to the default settings of some features.",
    "audit": "Review the configuration for features not being used in Liberty configuration. This includes aggregated features containing multiple features. The features are listed under in the featureManager element. To review all of the individual features used in the server, review the messages.log for the CWWKF0012I message. grep -w -R -i CWWKF0012I ${server.config.dir}",
    "remediation": "Removed any unneeded features listed under the featureManager element in the Liberty configuration Default Value: The default server template enables the jsp-2.3 feature. Other templates in the ${wlp.install.dir}/templates directory add different features depending on the template theme. Example of the defaultServer template features in the server.xml file after running ${wlp.install.dir}/bin server create myServer <featureManager> <feature>jsp-2.3</feature> </featureManager> References: 1. https://openliberty.io/docs/latest/reference/feature/feature-overview.html",
    "function_names": [
      "websphere_liberty_feature_unused_removed",
      "websphere_liberty_feature_unnecessary_disabled",
      "websphere_liberty_feature_minimal_enabled",
      "websphere_liberty_feature_non_essential_removed",
      "websphere_liberty_feature_redundant_disabled",
      "websphere_liberty_feature_secure_config_enabled",
      "websphere_liberty_feature_default_removed",
      "websphere_liberty_feature_optional_disabled",
      "websphere_liberty_feature_legacy_removed",
      "websphere_liberty_feature_unused_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/feature/feature-overview.html"
  },
  {
    "id": "10.2",
    "title": "Ensure Passwords are Encrypted",
    "assessment": "Automated",
    "description": "Sensitive information is stored in the Liberty configuration and can be in clear text unless encrypted or hashed.",
    "rationale": "Passwords should be encrypted or hashed to avoid inappropriate access to user accounts or using the passwords for unauthorized logins to remote systems such as databases or LDAP servers. Password information should also be kept in separate files with limited access to avoid unauthorized access or changes to configurations. The password encryption key also needs to be customized or a default key is used to encrypt passwords.",
    "audit": "Review the passwords in the Liberty configuration and the ${wlp.user.dir}/clients/<Client Name>/client.xml files. Check the values on any password related attributes that are defined as Reversably encoded password (string) type. Some examples of password related attributes include password, bindPassword, secret, keyStoreSecret, etc. All values should be obscured using encryption or hashing. Some example greps to check for attributes containing password or secret in the name. grep -R -i 'password' ${server.config.dir} grep -R -i 'secret' ${server.config.dir} Also check for the wlp.password.encryption.key property that is used for encrypting and decrypting and where it is located. The wlp.password.encryption.key property should be set to a custom value and stored in a separate file. grep -R -i 'wlp.password.encryption.key' ${server.config.dir} If the wlp.password.encryption.key property is in a standalone file, review the permissions for accessing the file. ls -al <keyFileName.xml>",
    "remediation": "Use the Liberty provided securityUtility tool to encrypt the password. To encrypt a password with Advanced Encryption Standard (AES) encryption: securityUtility encode --encoding=aes --key=myKey passW0rd returns: {aes}AE/PrLc9wshAKURioFvxb41SrVbsWjZTZ8lv72ioH3yMlJN4RQj3A9aT3ev396oYRw== Replace the clear text password in the Liberty configuration with the encrypted password created by the securityUtility tool. In this example, the encrypted password {aes}AE/PrLc9wshAKURioFvxb41SrVbsWjZTZ8lv72ioH3yMlJN4RQj3A9aT3ev396oYRw== was returned by the securityUtility and used to update the bindPassword attribute in the ldapRegistry element. <ldapRegistry ... bindPassword=\"{aes}AE/PrLc9wshAKURioFvxb41SrVbsWjZTZ8lv72ioH3yMlJN4RQj3A9aT3e v396oYRw==\" </ldapRegistry> In WebSphere Liberty, the default key that is used for encrypting and decrypting can be overridden by setting the wlp.password.encryption.key property. Make sure that you do not set this property in main Liberty configuration. Otherwise, the file that contains the key might be included when you run the server dump or server package commands. Instead, set the wlp.password.encryption.key property in a separate configuration file and include it in the Liberty configuration, as shown in the following example: Create a file named key.xml: <server> <variable name=\"wlp.password.encryption.key\" value=\"myKey\" /> </server> Include it in the main Liberty configuration file. <server> ... <include location=\"/protected/key.xml\" /> </server> Adjust the permissions on the key.xml to only users that need to access the file. In a test or development environment where a basic registry is used, the basic registry user passwords can be hashed to be stored in the Liberty configuration securityUtility encode --encoding=hash basicRegUserPassword Default Value: Passwords are not encrypted by default in the Liberty configuration. References: 1. https://openliberty.io/docs/latest/reference/command/securityUtility-encode.html 2. https://openliberty.io/docs/latest/reference/config/ldapRegistry.html",
    "function_names": [
      "liberty_configuration_passwords_encrypted",
      "liberty_configuration_sensitive_data_hashed",
      "liberty_configuration_credentials_protected",
      "liberty_configuration_secrets_encrypted",
      "liberty_configuration_cleartext_passwords_disabled"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/command/securityUtility-encode.html 2. https://openliberty.io/docs/latest/reference/config/ldapRegistry.html"
  },
  {
    "id": "10.3",
    "title": "Ensure 'enableWelcomePage' is set to 'false'",
    "assessment": "Automated",
    "description": "The WebSphere Liberty welcome page is enabled by default and is displayed when the root context \u201c/\u201d is accessed.",
    "rationale": "For production, the Liberty welcome page should be disabled to avoid sharing unnecessary information about the server runtime.",
    "audit": "Ensure the enableWelcomePage attribute is set to false in the httpDispatcher element in the Liberty configuration: grep -w -R -i 'enableWelcomePage' ${server.config.dir}",
    "remediation": "Perform the following to prevent Websphere Liberty from serving a welcome page from context root folder. Add the enableWelcomePage attribute to the httpDispatcher element to ${server.config.dir}/configDropins/overrides/*.xml and set it to false. <httpDispatcher enableWelcomePage=\"false\" /> Default Value: The WebSphere Liberty welcome page is enabled by default, the enableWelcomePage attribute is set to true. References: 1. https://openliberty.io/docs/latest/reference/config/httpDispatcher.html",
    "function_names": [
      "websphere_liberty_welcome_page_disabled",
      "websphere_liberty_root_context_secure",
      "websphere_liberty_default_page_disabled",
      "websphere_liberty_welcome_page_config_secure",
      "websphere_liberty_root_access_restricted"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/httpDispatcher.html"
  },
  {
    "id": "10.4",
    "title": "Ensure 'keysPassword' is set to a custom password for ltpa keys",
    "assessment": "Automated",
    "description": "The LTPA keys are generated using a password, if a password is not provided, then a default password is used.",
    "rationale": "The LTPA password should be customized to avoid using the default password.",
    "audit": "Ensure the existence of a keysPassword attribute on the ltpa element in the Liberty configuration. The value should be obscured using encryption. grep -R -i 'keysPassword' ${server.config.dir}",
    "remediation": "Add a custom encrypted password to the keysPassword attribute on the ltpa element in the Liberty configuration. <ltpa keysPassword=\"{aes}AE/PrLc9wshAKURioFvxb41SrVbsWjZTZ8lv72ioH3yMlJN4RQj3A9aT3e v396oYRw==\"  > Default Value: WebSphere Liberty provides a default password for the LTPA keys. References: 1. https://openliberty.io/docs/latest/reference/config/ltpa.html 2. https://openliberty.io/docs/latest/reference/command/securityUtility-encode.html",
    "function_names": [
      "security_ltpa_keys_custom_password_set",
      "security_ltpa_keys_no_default_password",
      "security_ltpa_keys_password_configured",
      "security_ltpa_keys_non_default_password",
      "security_ltpa_keys_password_customized"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/reference/config/ltpa.html 2. https://openliberty.io/docs/latest/reference/command/securityUtility-encode.html"
  },
  {
    "id": "10.5",
    "title": "Ensure 'security-role' is defined for role based authorization checks for Web and EJB applications",
    "assessment": "Automated",
    "description": "Configuring authorization for your application is to verify whether a user or group belongs to a specified role, and whether this role has the privilege to access a resource.",
    "rationale": "Defining authorization roles ensures users cannot access resources they are not authorized to use.",
    "audit": "Ensure that security-role is defined mapping any desire roles in the Liberty configuration. grep -w -R 'security-role' ${server.config.dir}",
    "remediation": "Create the necessary role mappings for applications in the ${server.config.dir}/configDropins/overrides/<any file name>.xml Example: <application-bnd> <security-role name=\"admin\"> <group name=\"Manager\" /> <group name=\"TeamLead\" /> </security-role> <security-role name=\"user\"> <group name=\"Employee\" /> </security-role> </application-bnd> Follow steps in the Liberty Authorization Doc References: 1. https://openliberty.io/docs/latest/authorization.html",
    "function_names": [
      "web_app_security_role_defined",
      "ejb_app_security_role_defined",
      "role_based_authorization_enabled",
      "application_security_role_required",
      "web_app_role_authorization_configured",
      "ejb_app_role_authorization_configured",
      "security_role_privilege_verified",
      "application_resource_access_controlled",
      "role_based_access_security_role_defined",
      "web_ejb_app_security_role_enforced"
    ],
    "profile_applicability": "\u2022  Level 1",
    "references": "1. https://openliberty.io/docs/latest/authorization.html"
  }
]