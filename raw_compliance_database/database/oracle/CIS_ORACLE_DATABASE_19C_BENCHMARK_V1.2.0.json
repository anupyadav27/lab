[
  {
    "id": "1.1",
    "title": "Ensure the Appropriate Version/Patches for Oracle Software Is Installed",
    "assessment": "Manual",
    "description": "The Oracle installation version and patches should be the most recent that are compatible with the organization's operational needs.",
    "rationale": "Using the most recent Oracle database software, along with all applicable patches can help limit the possibilities for vulnerabilities in the software, the installation version and/or patches applied during setup should be established according to the needs of the organization. Ensure you are using a release that is covered by a level of support that includes the generation of Critical Patch Updates.",
    "audit": "To assess this recommendation, use the following example shell command as appropriate for your environment. For example, on Linux systems: opatch lsinventory | grep -e \"^.* <latest_patch_version_numer> \\s*.*$\" For example, on Windows systems: opatch lsinventory | find \" <latest_patch_version_number> \"",
    "remediation": "Perform the following step for remediation: Download and apply the latest quarterly Critical Patch Update patches. References: 1. http://www.oracle.com/us/support/assurance/fixing-policies/index.html 2. http://www.oracle.com/technetwork/topics/security/alerts-086861.html 3. http://www.oracle.com/us/support/library/lifetime-support-technology-069183.pdf",
    "function_names": [
      "oracle_database_version_current",
      "oracle_database_patches_up_to_date",
      "oracle_software_version_compatible",
      "oracle_software_patches_recent",
      "oracle_database_security_patches_applied"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. http://www.oracle.com/us/support/assurance/fixing-policies/index.html 2. http://www.oracle.com/technetwork/topics/security/alerts-086861.html 3. http://www.oracle.com/us/support/library/lifetime-support-technology-069183.pdf"
  },
  {
    "id": "2.1.1",
    "title": "Ensure 'extproc' Is Not Present in 'listener.ora'",
    "assessment": "Automated",
    "description": "extproc should be removed from the listener.ora to mitigate the risk that OS libraries can be invoked by the Oracle instance.",
    "rationale": "extproc allows the database to run procedures from OS libraries. These library calls can, in turn, run any OS command.",
    "audit": "To audit this recommendation, execute the following shell commands as appropriate for your Linux/Windows environment. Linux environment: grep -i extproc $ORACLE_HOME/network/admin/listener.ora Windows environment: find /I \"extproc\" %ORACLE_HOME%\\network\\admin\\listener.ora Ensure extproc does not exist.",
    "remediation": "To remediate this recommendation: Remove extproc from the listener.ora file. References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/netag/configuring-and-administering-oracle-net-listener.html",
    "function_names": [
      "oracle_listener_extproc_removed",
      "oracle_listener_extproc_disabled",
      "oracle_listener_extproc_not_present",
      "oracle_listener_extproc_mitigated",
      "oracle_listener_extproc_secure_config"
    ],
    "profile_applicability": "\u2022  Level 1 - Linux Host OS using Traditional Auditing \u2022  Level 1 - Windows Server Host OS using Traditional Auditing \u2022  Level 1 - Linux Host OS using Unified Auditing \u2022  Level 1 - Windows Server Host OS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/netag/configuring-and-administering-oracle-net-listener.html"
  },
  {
    "id": "2.1.2",
    "title": "Ensure 'ADMIN_RESTRICTIONS_' Is Set to 'ON'",
    "assessment": "Automated",
    "description": "The admin_restrictions_ <listener_name> setting in the listener.ora file can require that any attempted real-time alteration of the parameters in the listener via the set command file be refused unless the listener.ora file is manually altered, then restarted by a privileged user.",
    "rationale": "Blocking unprivileged users from making alterations of the listener.ora file, where remote data/service settings are specified, will help protect data confidentiality.",
    "audit": "To audit this recommendation, execute the following shell commands as appropriate for your Linux/Windows environment. Linux environment: grep -i admin_restrictions $ORACLE_HOME/network/admin/listener.ora Windows environment: find /I \"admin_restrictions\" %ORACLE_HOME%|\\network\\admin\\listener.ora Ensure admin_restrictions_ <listener_name> is set to ON for all listeners.",
    "remediation": "To remediate this recommendation: Use a text editor such as vi to set the admin_restrictions_ <listener_name> to the value ON. Default Value: Not set.  References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/netag/configuring-and-administering-oracle-net-listener.html",
    "function_names": [
      "database_listener_admin_restrictions_enabled",
      "database_listener_manual_alteration_required",
      "database_listener_set_command_restricted",
      "database_listener_privileged_restart_required",
      "database_listener_secure_parameter_control_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - Linux Host OS using Traditional Auditing \u2022  Level 1 - Windows Server Host OS using Traditional Auditing \u2022  Level 1 - Linux Host OS using Unified Auditing \u2022  Level 1 - Windows Server Host OS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/netag/configuring-and-administering-oracle-net-listener.html"
  },
  {
    "id": "2.2.1",
    "title": "Ensure 'AUDIT_SYS_OPERATIONS' Is Set to 'TRUE'",
    "assessment": "Automated",
    "description": "The AUDIT_SYS_OPERATIONS setting provides for the auditing of all user activities conducted under the SYSOPER and SYSDBA accounts. The setting should be set to TRUE to enable this auditing.",
    "rationale": "If the parameter AUDIT_SYS_OPERATIONS is FALSE, all statements except for Startup/Shutdown and Logon by SYSDBA/SYSOPER users are not audited.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME) = 'AUDIT_SYS_OPERATIONS'; Ensure VALUE is set to TRUE.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance. ALTER SYSTEM SET AUDIT_SYS_OPERATIONS = TRUE SCOPE=SPFILE; Default Value: TRUE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/AUDIT_SYS_OPERATIONS.html",
    "function_names": [
      "database_audit_sys_operations_enabled",
      "database_audit_sys_operations_true",
      "database_audit_sys_operations_set",
      "database_audit_sys_operations_configured",
      "database_audit_sys_operations_active"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/AUDIT_SYS_OPERATIONS.html"
  },
  {
    "id": "2.2.2",
    "title": "Ensure 'AUDIT_TRAIL' Is Set to 'DB', 'XML', 'OS', 'DB,EXTENDED', or 'XML,EXTENDED'",
    "assessment": "Automated",
    "description": "The audit_trail setting determines whether or not Oracle's basic audit features are enabled. It can be set to \"Operating System\"(OS); DB; DB,EXTENDED; XML; or XML,EXTENDED. The value should be set according to the needs of the organization.",
    "rationale": "Enabling the basic auditing features for the Oracle instance permits the collection of data to troubleshoot problems, as well as provides valuable forensic logs in the case of a system breach this value should be set according to the needs of the organization.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='AUDIT_TRAIL'; Ensure VALUE is set to DB or OS or XML or DB,EXTENDED or XML,EXTENDED.",
    "remediation": "To remediate this setting, execute one of the following SQL statements and restart the instance. ALTER SYSTEM SET AUDIT_TRAIL = DB, EXTENDED SCOPE = SPFILE; ALTER SYSTEM SET AUDIT_TRAIL = OS SCOPE = SPFILE; ALTER SYSTEM SET AUDIT_TRAIL = XML, EXTENDED SCOPE = SPFILE; ALTER SYSTEM SET AUDIT_TRAIL = DB SCOPE = SPFILE; ALTER SYSTEM SET AUDIT_TRAIL = XML SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/AUDIT_TRAIL.html",
    "function_names": [
      "database_audit_trail_enabled",
      "database_audit_trail_valid_format",
      "database_audit_trail_os_enabled",
      "database_audit_trail_db_enabled",
      "database_audit_trail_xml_enabled",
      "database_audit_trail_extended_enabled",
      "database_audit_trail_configured",
      "database_audit_trail_compliant_format"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/AUDIT_TRAIL.html"
  },
  {
    "id": "2.2.3",
    "title": "Ensure 'GLOBAL_NAMES' Is Set to 'TRUE'",
    "assessment": "Automated",
    "description": "The global_names setting requires that the name of a database link matches that of the remote database it will connect to. This setting should have a value of TRUE.",
    "rationale": "Not requiring database connections to match the domain that is being called remotely could allow unauthorized domain sources to potentially connect via brute-force tactics.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='GLOBAL_NAMES'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT UPPER(V.VALUE), DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE V.CON_ID = B.CON_ID)) FROM V$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'GLOBAL_NAMES'; Ensure VALUE is set to TRUE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET GLOBAL_NAMES = TRUE SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/GLOBAL_NAMES.html",
    "function_names": [
      "database_global_names_enabled",
      "database_link_name_matching_enabled",
      "database_global_names_true",
      "database_link_remote_name_consistent",
      "database_global_names_set_true"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/GLOBAL_NAMES.html"
  },
  {
    "id": "2.2.4",
    "title": "Ensure 'OS_ROLES' Is Set to 'FALSE'",
    "assessment": "Automated",
    "description": "The os_roles setting permits externally created groups to be applied to database management.",
    "rationale": "Allowing the OS to use external groups for database management could cause privilege overlaps and generally weaken security.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='OS_ROLES'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT UPPER(V.VALUE), DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE V.CON_ID = B.CON_ID)) FROM V$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'OS_ROLES'; Ensure VALUE is set to FALSE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET OS_ROLES = FALSE SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/OS_ROLES.html",
    "function_names": [
      "database_management_os_roles_disabled",
      "database_management_external_roles_disabled",
      "database_management_os_roles_false",
      "database_management_external_groups_disabled",
      "database_management_os_roles_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/OS_ROLES.html"
  },
  {
    "id": "2.2.5",
    "title": "Ensure 'REMOTE_LISTENER' Is Empty",
    "assessment": "Automated",
    "description": "The remote_listener setting determines whether or not a valid listener can be established on a system separate from the database instance. This setting should be empty unless the organization specifically needs a valid listener on a separate system or on nodes running Oracle RAC instances.",
    "rationale": "Permitting a remote listener for connections to the database instance can allow for the potential spoofing of connections and that could compromise data confidentiality and integrity.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='REMOTE_LISTENER' AND VALUE IS NOT NULL; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT UPPER(V.VALUE), DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE V.CON_ID = B.CON_ID)) FROM V$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'REMOTE_LISTENER' AND VALUE IS NOT NULL; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET REMOTE_LISTENER = '' SCOPE = SPFILE;  References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_LISTENER.html Additional Information: If set as remote_listener=true, the address/address list is taken from the TNSNAMES.ORA file.",
    "function_names": [
      "database_instance_remote_listener_empty",
      "database_instance_remote_listener_disabled",
      "database_instance_remote_listener_unset",
      "database_instance_remote_listener_no_remote_access",
      "database_instance_remote_listener_default_config"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_LISTENER.html Additional Information: If set as remote_listener=true, the address/address list is taken from the TNSNAMES.ORA file."
  },
  {
    "id": "2.2.6",
    "title": "Ensure 'REMOTE_LOGIN_PASSWORDFILE' Is Set to 'NONE'",
    "assessment": "Automated",
    "description": "The remote_login_passwordfile setting specifies whether or not Oracle checks for a password file during login and how many databases can use the password file. The setting should have a value of NONE or in the event you are running DR/Data Guard, EXCLUSIVE is an allowable value.",
    "rationale": "The use of this sort of password login file could permit unsecured, privileged connections to the database.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='REMOTE_LOGIN_PASSWORDFILE'; Ensure VALUE is set to NONE or in the event you are running DR/Data Guard, EXCLUSIVE is an allowable VALUE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET REMOTE_LOGIN_PASSWORDFILE = 'NONE' SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_LOGIN_PASSWORDFILE.html",
    "function_names": [
      "oracle_database_passwordfile_none",
      "oracle_database_passwordfile_exclusive",
      "oracle_database_remote_login_passwordfile_secure",
      "oracle_database_passwordfile_no_shared_access",
      "oracle_database_passwordfile_restricted_access"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_LOGIN_PASSWORDFILE.html"
  },
  {
    "id": "2.2.7",
    "title": "Ensure 'REMOTE_OS_AUTHENT' Is Set to 'FALSE'",
    "assessment": "Automated",
    "description": "The remote_os_authent setting determines whether or not OS 'roles' with the attendant privileges are allowed for remote client connections. This setting should have a value of FALSE. Note: This parameter has been deprecated in 12.1 and higher versions.",
    "rationale": "Permitting OS roles for database connections can allow the spoofing of connections and permit granting the privileges of an OS role to unauthorized users to make connections, this value should be restricted according to the needs of the organization.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='REMOTE_OS_AUTHENT'; Ensure VALUE is set to FALSE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET REMOTE_OS_AUTHENT = FALSE SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_OS_AUTHENT.html",
    "function_names": [
      "database_instance_remote_os_authent_disabled",
      "database_instance_remote_os_authent_false",
      "database_instance_remote_auth_disabled",
      "database_instance_os_authentication_disabled",
      "database_instance_remote_os_authent_deprecated_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_OS_AUTHENT.html"
  },
  {
    "id": "2.2.8",
    "title": "Ensure 'REMOTE_OS_ROLES' Is Set to 'FALSE'",
    "assessment": "Automated",
    "description": "The remote_os_roles setting permits remote users' OS roles to be applied to database management. This setting should have a value of FALSE.",
    "rationale": "Allowing remote clients OS roles to have permissions for database management could cause privilege overlaps and generally weaken security.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='REMOTE_OS_ROLES'; Ensure VALUE is set to FALSE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET REMOTE_OS_ROLES = FALSE SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_OS_ROLES.html",
    "function_names": [
      "database_instance_remote_os_roles_disabled",
      "database_remote_os_roles_restricted",
      "database_instance_remote_os_roles_false",
      "database_remote_os_roles_unset",
      "database_instance_remote_os_roles_secure"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/REMOTE_OS_ROLES.html"
  },
  {
    "id": "2.2.9",
    "title": "Ensure 'SEC_CASE_SENSITIVE_LOGON' Is Set to 'TRUE'",
    "assessment": "Automated",
    "description": "The SEC_CASE_SENSITIVE_LOGON information determines whether or not case-sensitivity is required for passwords during login. Note: This parameter has been deprecated in 12.1 and higher versions.",
    "rationale": "Oracle database password case-sensitivity increases the pool of characters that can be chosen for the passwords, making brute-force password attacks quite difficult.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='SEC_CASE_SENSITIVE_LOGON'; Ensure VALUE is set to TRUE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_CASE_SENSITIVE_LOGON = TRUE SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_CASE_SENSITIVE_LOGON.html",
    "function_names": [
      "security_case_sensitive_logon_enabled",
      "security_case_sensitive_logon_true",
      "security_logon_case_sensitivity_enabled",
      "security_password_case_sensitivity_required",
      "security_logon_case_sensitive_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_CASE_SENSITIVE_LOGON.html"
  },
  {
    "id": "2.2.10",
    "title": "Ensure 'SEC_MAX_FAILED_LOGIN_ATTEMPTS' Is '3' or Less",
    "assessment": "Automated",
    "description": "The SEC_MAX_FAILED_LOGIN_ATTEMPTS parameter determines how many failed login attempts are allowed before Oracle closes the login connection.",
    "rationale": "Allowing an unlimited number of login attempts for a user connection can facilitate both brute-force login attacks and the occurrence of denial-of-service.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='SEC_MAX_FAILED_LOGIN_ATTEMPTS'; Ensure VALUE is set to 3.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_MAX_FAILED_LOGIN_ATTEMPTS = 3 SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_MAX_FAILED_LOGIN_ATTEMPTS.html",
    "function_names": [
      "database_user_login_attempts_limited",
      "database_user_max_failed_logins_limited",
      "database_security_login_attempts_restricted",
      "database_user_failed_login_threshold_set",
      "database_security_max_failed_logins_enforced",
      "database_user_login_failure_limit_compliant",
      "database_security_login_attempts_controlled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_MAX_FAILED_LOGIN_ATTEMPTS.html"
  },
  {
    "id": "2.2.11",
    "title": "Ensure 'SEC_PROTOCOL_ERROR_FURTHER_ACTION' Is Set to '(DROP,3)'",
    "assessment": "Automated",
    "description": "The SEC_PROTOCOL_ERROR_FURTHER_ACTION setting determines the Oracle server's response to bad/malformed packets received from the client. This setting should have a value of (DROP,3) or (DROP, 3), which will cause a connection to be dropped after three bad/malformed packets.",
    "rationale": "Bad packets received from the client can potentially indicate packet-based attacks on the system, such as \"TCP SYN Flood\" or \"Smurf\" attacks, which could result in a denial- of-service condition, this value should be set according to the needs of the organization.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='SEC_PROTOCOL_ERROR_FURTHER_ACTION'; Ensure VALUE is set to (DROP,3) or (DROP, 3).",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_PROTOCOL_ERROR_FURTHER_ACTION = '(DROP,3)' SCOPE = SPFILE; Or ALTER SYSTEM SET SEC_PROTOCOL_ERROR_FURTHER_ACTION = '(DROP, 3)' SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_PROTOCOL_ERROR_FURTHER_ACTION.html",
    "function_names": [
      "oracle_database_network_protocol_error_action_drop_3",
      "oracle_database_security_protocol_error_drop_3",
      "oracle_network_protocol_error_action_drop_3",
      "oracle_database_connection_protocol_error_drop_3",
      "oracle_security_protocol_error_further_action_drop_3"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_PROTOCOL_ERROR_FURTHER_ACTION.html"
  },
  {
    "id": "2.2.12",
    "title": "Ensure 'SEC_PROTOCOL_ERROR_TRACE_ACTION' Is Set to 'LOG'",
    "assessment": "Automated",
    "description": "The SEC_PROTOCOL_ERROR_TRACE_ACTION setting determines the Oracle's server's logging response level to bad/malformed packets received from the client by generating ALERT, LOG, or TRACE levels of detail in the log files. This setting should have a value of LOG unless the organization has a compelling reason to use a different value because LOG should cause the necessary information to be logged. Setting the value as TRACE can generate an enormous amount of log output and should be reserved for debugging only.",
    "rationale": "Bad packets received from the client can potentially indicate packet-based attacks on the system, which could result in a denial-of-service condition.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='SEC_PROTOCOL_ERROR_TRACE_ACTION'; Ensure VALUE is set to LOG.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_PROTOCOL_ERROR_TRACE_ACTION=LOG SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_PROTOCOL_ERROR_TRACE_ACTION.html",
    "function_names": [
      "database_server_protocol_error_trace_action_log",
      "database_server_protocol_error_trace_action_not_trace",
      "database_server_protocol_error_trace_action_not_alert",
      "database_server_protocol_error_trace_action_secure_logging",
      "database_server_protocol_error_trace_action_minimal_logging"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_PROTOCOL_ERROR_TRACE_ACTION.html"
  },
  {
    "id": "2.2.13",
    "title": "Ensure 'SEC_RETURN_SERVER_RELEASE_BANNER' Is Set to 'FALSE'",
    "assessment": "Automated",
    "description": "The information about patch/update release number provides information about the exact patch/update release that is currently running on the database. This is sensitive information that should not be revealed to anyone who requests it.",
    "rationale": "Allowing the database to return information about the patch/update release number could facilitate unauthorized users' attempts to gain access based upon known patch weaknesses.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='SEC_RETURN_SERVER_RELEASE_BANNER'; Ensure VALUE is set to FALSE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_RETURN_SERVER_RELEASE_BANNER = FALSE SCOPE = SPFILE; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_RETURN_SERVER_RELEASE_BANNER.html",
    "function_names": [
      "database_instance_server_banner_disabled",
      "database_instance_release_banner_hidden",
      "database_instance_server_info_suppressed",
      "database_instance_version_banner_disabled",
      "database_instance_patch_info_hidden"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SEC_RETURN_SERVER_RELEASE_BANNER.html"
  },
  {
    "id": "2.2.14",
    "title": "Ensure 'SQL92_SECURITY' Is Set to 'TRUE'",
    "assessment": "Automated",
    "description": "The SQL92_SECURITY parameter setting TRUE requires that a user must also be granted the SELECT object privilege before being able to perform UPDATE or DELETE operations on tables that have WHERE or SET clauses. The setting should have a value of TRUE.",
    "rationale": "A user without SELECT privilege can still infer the value stored in a column by referring to that column in a DELETE or UPDATE statement. This setting prevents inadvertent information disclosure by ensuring that only users who already have SELECT privilege can execute the statements that would allow them to infer the stored values.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='SQL92_SECURITY'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT UPPER(V.VALUE), DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE V.CON_ID = B.CON_ID)) FROM V$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'SQL92_SECURITY';",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SQL92_SECURITY = TRUE SCOPE = SPFILE; Default Value: TRUE  References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SQL92_SECURITY.html",
    "function_names": [
      "rds_database_sql92_security_enabled",
      "rds_instance_sql92_security_enabled",
      "database_sql92_security_enabled",
      "sql_database_sql92_security_enabled",
      "rds_sql92_security_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/SQL92_SECURITY.html"
  },
  {
    "id": "2.2.15",
    "title": "Ensure '_trace_files_public' Is Set to 'FALSE'",
    "assessment": "Automated",
    "description": "The _trace_files_public setting determines whether or not the system's trace file is world readable. This setting should have a value of FALSE to restrict trace file access.",
    "rationale": "Making the file world readable means anyone can read the instance's trace file, which could contain sensitive information about instance operations.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT A.KSPPINM, B.KSPPSTVL FROM SYS.X_$KSPPI a, SYS.X_$KSPPCV b WHERE A.INDX=B.INDX AND A.KSPPINM LIKE '\\_%trace_files_public' escape '\\'; A VALUE equal to FALSE or lack of results implies compliance. Please note that the assessment SQL relies on X_$ views which should be created per Appendix 7. BELOW SQL NO LONGER WORKS FOR Oracle12c FOR UNDOCUMENTED PARAMETERS. SELECT VALUE FROM V$SYSTEM_PARAMETER WHERE NAME='_trace_files_public';",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET \"_trace_files_public\" = FALSE SCOPE = SPFILE; References: 1. http://asktom.oracle.com/pls/asktom/f?p=100:11:0::::P11_QUESTION_ID:429552 1746131",
    "function_names": [
      "database_instance_trace_files_public_disabled",
      "database_instance_trace_files_restricted_access",
      "database_instance_trace_files_no_public_access",
      "database_instance_trace_files_access_controlled",
      "database_instance_trace_files_secure_permissions"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. http://asktom.oracle.com/pls/asktom/f?p=100:11:0::::P11_QUESTION_ID:429552 1746131"
  },
  {
    "id": "2.2.16",
    "title": "Ensure 'RESOURCE_LIMIT' Is Set to 'TRUE'",
    "assessment": "Automated",
    "description": "RESOURCE_LIMIT determines whether resource limits are enforced in database profiles. This setting should have a value of TRUE.",
    "rationale": "If RESOURCE_LIMIT is set to FALSE, none of the system resource limits that are set in any database profiles are enforced. If RESOURCE_LIMIT is set to TRUE, the limits set in database profiles are enforced.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='RESOURCE_LIMIT'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT UPPER(V.VALUE), DECODE (V.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE V.CON_ID = B.CON_ID)) FROM V$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'RESOURCE_LIMIT'; Ensure VALUE is set to TRUE.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET RESOURCE_LIMIT = TRUE SCOPE = SPFILE; Default Value: FALSE  References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/RESOURCE_LIMIT.html",
    "function_names": [
      "database_profile_resource_limit_enabled",
      "database_profile_resource_limit_set_true",
      "database_profile_resource_limit_enforced",
      "database_profile_resource_limit_configured",
      "database_profile_resource_limit_active"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/RESOURCE_LIMIT.html"
  },
  {
    "id": "2.2.17",
    "title": "Ensure 'PDB_OS_CREDENTIAL' is NOT null",
    "assessment": "Automated",
    "description": "The pdb_os_credential setting determines what OS user will be utilized to run jobs at the OS level from within the Oracle database.",
    "rationale": "Permitting a job to run at the OS level with default credential, Oracle OS user, can allow for excessive privileges that a job should not have.",
    "audit": "Container database: To assess this recommendation, execute the following SQL statement. SELECT UPPER(VALUE) FROM V$SYSTEM_PARAMETER WHERE UPPER(NAME)='PDB_OS_CREDENTIAL' AND VALUE IS NOT NULL; For the standalone, CDB and every PDB inside of it. there should be an entry, no rows returned implies compliance.",
    "remediation": "Using the DBMS_CREDENTIAL package, ensure credentials are set for stand alone, container and pluggable databases.",
    "function_names": [
      "oracle_database_pdb_os_credential_not_null",
      "oracle_pdb_os_credential_configured",
      "database_pdb_os_credential_set",
      "oracle_pdb_os_credential_non_empty",
      "database_os_credential_defined"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "2.3.1",
    "title": "Ensure 'ENCRYPTION_SERVER' Is Set to 'REQUIRED'",
    "assessment": "Automated",
    "description": "The setting sqlnet.encryption_server=required requires that the connections to the database are encrypted through Oracle SQL*Net native encryption. The encryption setting implements data-in-transit encryption for the Oracle database connections. This setting is configured in the sqlnet.ora file on the database server.",
    "rationale": "Without this setting, malicious users could potentially eavesdrop on the database connections, compromising the confidentiality of the data. Impact: The setting sqlnet.encryption_server=required could reject/deny connection requests from those database users who don\u2019t support the Oracle native network encryption.",
    "audit": "To audit this recommendation, execute the following shell commands as appropriate for your Linux/Windows environment, and ensure that the setting is configured to required. Linux environment: grep -i \"encryption_server=required\" $ORACLE_HOME/network/admin/sqlnet.ora Windows environment: find /I \"encryption_server=required\" %ORACLE_HOME%|\\network\\admin\\ sqlnet.ora",
    "remediation": "To remediate this recommendation: Use a text editor such as vi to set the sqlnet. encryption_server = required  Additional Information: Oracle database network encryption configured through TLS/SSL is also an acceptable mechanism and may be implemented in lieu of this setting.",
    "function_names": [
      "database_sqlnet_encryption_required",
      "database_connection_encryption_required",
      "sqlnet_encryption_server_required",
      "oracle_database_encryption_required",
      "database_transit_encryption_required",
      "sqlnet_ora_encryption_required",
      "database_server_encryption_required",
      "oracle_sqlnet_encryption_required"
    ],
    "profile_applicability": "\u2022  Level 1 - Linux Host OS using Traditional Auditing \u2022  Level 1 - Windows Server Host OS using Traditional Auditing \u2022  Level 1 - Linux Host OS using Unified Auditing \u2022  Level 1 - Windows Server Host OS using Unified Auditing",
    "impact": "The setting sqlnet.encryption_server=required could reject/deny connection requests from those database users who don\u2019t support the Oracle native network encryption."
  },
  {
    "id": "2.3.2",
    "title": "Ensure 'SQLNET.CRYPTO_CHECKSUM_SERVER' Is Set to 'REQUIRED'",
    "assessment": "Automated",
    "description": "The setting sqlnet.crypto_checksum_server=required requires that the connections to the database are encrypted through Oracle SQL*Net native encryption. The encryption setting implements data-in-transit encryption for the Oracle database connections. This setting is configured in the sqlnet.ora file on the database server.",
    "rationale": "Without this setting, malicious users could potentially eavesdrop on the database connections, compromising the confidentiality of the data. Impact: The setting sqlnet.encryption_server=required could reject/deny connection requests from those database users who don\u2019t support the Oracle native network encryption.",
    "audit": "To audit this recommendation, execute the following shell commands as appropriate for your Linux/Windows environment, and ensure that the setting is configured to required. Linux environment: grep -i \"crypto_checksum_server=required\" $ORACLE_HOME/network/admin/sqlnet.ora Windows environment: find /I \"crypto_checksum_server=required\" %ORACLE_HOME%|\\network\\admin\\sqlnet.ora",
    "remediation": "To remediate this recommendation: Use a text editor such as vi to set: sqlnet.crypto_checksum_server = required  Additional Information: Oracle database network encryption configured through TLS/SSL is also an acceptable mechanism and may be implemented in lieu of this setting.",
    "function_names": [
      "oracle_database_sqlnet_crypto_checksum_server_required",
      "oracle_sqlnet_encryption_required",
      "database_sqlnet_checksum_enabled",
      "sqlnet_ora_crypto_checksum_required",
      "oracle_connection_encryption_required"
    ],
    "profile_applicability": "\u2022  Level 1 - Linux Host OS using Traditional Auditing \u2022  Level 1 - Linux Host OS using Unified Auditing \u2022  Level 1 - Windows Server Host OS using Traditional Auditing \u2022  Level 1 - Windows Server Host OS using Unified Auditing",
    "impact": "The setting sqlnet.encryption_server=required could reject/deny connection requests from those database users who don\u2019t support the Oracle native network encryption."
  },
  {
    "id": "3.1",
    "title": "Ensure 'FAILED_LOGIN_ATTEMPTS' Is Less than or Equal to '5'",
    "assessment": "Automated",
    "description": "The FAILED_LOGIN_ATTEMPTS setting determines how many failed login attempts are permitted before the system locks the user's account. While different profiles can have different and more restrictive settings, such as USERS and APPS, the minimum(s) recommended here should be set on the DEFAULT profile.",
    "rationale": "Repeated failed login attempts can indicate the initiation of a brute-force login attack, this value should be set according to the needs of the organization. (See the Notes for a warning on a known bug that can make this security measure backfire.) Impact: One concern is the possibility of this setting being exploited to craft a DDoS attack by using the row-locking delay between failed login attempts (see Oracle Bug 7715339 \u2013 Logon failures causes \u201crow cache lock\u201d waits \u2013 Allow disable of logon delay [ID 7715339.8], so the configuration of this setting depends on using the bug workaround).",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='FAILED_LOGIN_ATTEMPTS'), 'UNLIMITED','9999', P.LIMIT)) > 5 AND P.RESOURCE_NAME = 'FAILED_LOGIN_ATTEMPTS' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ) ; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='FAILED_LOGIN_ATTEMPTS' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) > 5 AND P.RESOURCE_NAME = 'FAILED_LOGIN_ATTEMPTS' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT FAILED_LOGIN_ATTEMPTS 5; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e684 Additional Information: Warning: While the setting for the FAILED_LOGIN_ATTEMPTS value can also be set in sqlnet.ora, this only applies to listed users. The similar setting used to block a DDoS, the SEC_MAX_FAILED_LOGIN_ATTEMPTS initialization parameter, can be used to protect unauthorized intruders from attacking the server processes for applications, but this setting does not protect against unauthorized attempts via valid usernames.",
    "function_names": [
      "iam_user_failed_login_attempts_limited",
      "iam_profile_failed_login_attempts_limited",
      "iam_default_profile_failed_login_attempts_limited",
      "iam_account_lockout_threshold_set",
      "iam_security_failed_login_attempts_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "impact": "One concern is the possibility of this setting being exploited to craft a DDoS attack by using the row-locking delay between failed login attempts (see Oracle Bug 7715339 \u2013 Logon failures causes \u201crow cache lock\u201d waits \u2013 Allow disable of logon delay [ID 7715339.8], so the configuration of this setting depends on using the bug workaround).",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e684 Additional Information: Warning: While the setting for the FAILED_LOGIN_ATTEMPTS value can also be set in sqlnet.ora, this only applies to listed users. The similar setting used to block a DDoS, the SEC_MAX_FAILED_LOGIN_ATTEMPTS initialization parameter, can be used to protect unauthorized intruders from attacking the server processes for applications, but this setting does not protect against unauthorized attempts via valid usernames."
  },
  {
    "id": "3.2",
    "title": "Ensure 'PASSWORD_LOCK_TIME' Is Greater than or Equal to '1'",
    "assessment": "Automated",
    "description": "The PASSWORD_LOCK_TIME setting determines how many days must pass for the user's account to be unlocked after the set number of failed login attempts has occurred. The suggested value for this is one day or greater.",
    "rationale": "Locking the user account after repeated failed login attempts can block further brute- force login attacks, but can create administrative headaches as this account unlocking process always requires DBA intervention.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_LOCK_TIME'), 'UNLIMITED','9999', P.LIMIT)) < 1 AND P.RESOURCE_NAME = 'PASSWORD_LOCK_TIME' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_LOCK_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) < 1 AND P.RESOURCE_NAME = 'PASSWORD_LOCK_TIME' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_LOCK_TIME 1; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e795",
    "function_names": [
      "iam_user_password_lock_time_min_1d",
      "iam_account_password_lock_time_min_1d",
      "security_password_lock_time_min_1d",
      "identity_password_lock_time_min_1d",
      "auth_password_lock_time_min_1d"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e795"
  },
  {
    "id": "3.3",
    "title": "Ensure 'PASSWORD_LIFE_TIME' Is Less than or Equal to '90'",
    "assessment": "Automated",
    "description": "The PASSWORD_LIFE_TIME setting determines how long a password may be used before the user is required to be change it. The suggested value for this is 90 days or less.",
    "rationale": "Allowing passwords to remain unchanged for long periods makes the success of brute- force login attacks more likely.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_LIFE_TIME'), 'UNLIMITED','9999',P.LIMIT)) > 90 AND P.RESOURCE_NAME = 'PASSWORD_LIFE_TIME' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_LIFE_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999', P.LIMIT)) > 90 AND P.RESOURCE_NAME = 'PASSWORD_LIFE_TIME' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_LIFE_TIME 90; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e694",
    "function_names": [
      "iam_user_password_lifetime_less_than_90d",
      "iam_password_policy_lifetime_compliant",
      "iam_user_credential_expiry_within_90d",
      "iam_password_lifetime_max_90d",
      "iam_user_password_rotation_required_90d"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e694"
  },
  {
    "id": "3.4",
    "title": "Ensure 'PASSWORD_REUSE_MAX' Is Greater than or Equal to '20'",
    "assessment": "Automated",
    "description": "The PASSWORD_REUSE_MAX setting determines how many different passwords must be used before the user is allowed to reuse a prior password. The suggested value for this is 20 passwords or greater.",
    "rationale": "Allowing reuse of a password within a short period of time after the password's initial use can make the success of both social-engineering and brute-force password-based attacks more likely.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_REUSE_MAX'), 'UNLIMITED','9999',P.LIMIT)) < 20 AND P.RESOURCE_NAME = 'PASSWORD_REUSE_MAX' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_REUSE_MAX' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) < 20 AND P.RESOURCE_NAME = 'PASSWORD_REUSE_MAX' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_REUSE_MAX 20; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e716 Additional Information: The above restriction should be applied along with the PASSWORD_REUSE_TIME setting.",
    "function_names": [
      "iam_password_policy_reuse_max_20",
      "iam_password_policy_reuse_minimum_20",
      "iam_password_policy_no_recent_reuse",
      "iam_password_policy_reuse_threshold_20",
      "iam_password_policy_reuse_limit_20"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e716 Additional Information: The above restriction should be applied along with the PASSWORD_REUSE_TIME setting."
  },
  {
    "id": "3.5",
    "title": "Ensure 'PASSWORD_REUSE_TIME' Is Greater than or Equal to '365'",
    "assessment": "Automated",
    "description": "The PASSWORD_REUSE_TIME setting determines the amount of time in days that must pass before the same password may be reused. The suggested value for this is 365 days or greater.",
    "rationale": "Reusing the same password after only a short period of time has passed makes the success of brute-force login attacks more likely.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_REUSE_TIME'), 'UNLIMITED','9999',P.LIMIT)) < 365 AND P.RESOURCE_NAME = 'PASSWORD_REUSE_TIME' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_REUSE_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) < 365 AND P.RESOURCE_NAME = 'PASSWORD_REUSE_TIME' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_REUSE_TIME 365; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e716 Additional Information: The above restriction should be applied along with the PASSWORD_REUSE_MAX setting.",
    "function_names": [
      "iam_password_policy_password_reuse_time_min_365d",
      "iam_account_password_reuse_time_greater_than_365",
      "iam_password_reuse_time_compliance_365d",
      "iam_user_password_reuse_time_enforced_365d",
      "iam_password_policy_reuse_time_365d_or_more"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e716 Additional Information: The above restriction should be applied along with the PASSWORD_REUSE_MAX setting."
  },
  {
    "id": "3.6",
    "title": "Ensure 'PASSWORD_GRACE_TIME' Is Less than or Equal to '5'",
    "assessment": "Automated",
    "description": "The PASSWORD_GRACE_TIME setting determines how many days can pass after the user's password expires before the user's login capability is automatically locked out. The suggested value for this is five days or less.",
    "rationale": "Locking the user account after the expiration of the password change requirement's grace period can help prevent password-based attacks against any forgotten or disused accounts, while still allowing the account and its information to be accessible by DBA intervention.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_GRACE_TIME'), 'UNLIMITED','9999',P.LIMIT)) > 5 AND P.RESOURCE_NAME = 'PASSWORD_GRACE_TIME' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_GRACE_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) > 5 AND P.RESOURCE_NAME = 'PASSWORD_GRACE_TIME' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_GRACE_TIME 5; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e806",
    "function_names": [
      "iam_account_password_grace_time_less_than_5",
      "iam_user_password_grace_time_less_than_5",
      "iam_password_policy_grace_time_less_than_5",
      "iam_password_grace_time_compliant",
      "iam_password_grace_time_within_limit"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e806"
  },
  {
    "id": "3.7",
    "title": "Ensure 'PASSWORD_VERIFY_FUNCTION' Is Set for All Profiles",
    "assessment": "Automated",
    "description": "The PASSWORD_VERIFY_FUNCTION determines password settings requirements when a user password is changed at the SQL command prompt. It should be set for all profiles. Note that this setting does not apply for users managed by the Oracle password file.",
    "rationale": "Through Oracle database profiles, password complexity rules (mixed cases with digits and special characters), blocking of simple combinations, and enforcing change/history settings can potentially thwart unauthorized logins by an unauthorized user.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE DECODE(P.LIMIT, 'DEFAULT',(SELECT LIMIT FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME = P.RESOURCE_NAME), LIMIT) = 'NULL' AND P.RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE DECODE(P.LIMIT, 'DEFAULT',(SELECT LIMIT FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME = P.RESOURCE_NAME AND CON_ID = P.CON_ID), LIMIT) = 'NULL' AND P.RESOURCE_NAME = 'PASSWORD_VERIFY_FUNCTION' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "Create a custom password verification function which fulfills the password requirements of the organization. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e824",
    "function_names": [
      "database_profile_password_verify_function_enabled",
      "database_profile_password_verify_function_set",
      "database_profile_password_verify_function_configured",
      "database_profile_password_verify_function_all_profiles",
      "database_profile_password_verify_function_required"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#d346953e824"
  },
  {
    "id": "3.8",
    "title": "Ensure 'SESSIONS_PER_USER' Is Less than or Equal to '10'",
    "assessment": "Automated",
    "description": "The SESSIONS_PER_USER setting determines the maximum number of user sessions that are allowed to be open concurrently. The suggested value for this is 10 or less.",
    "rationale": "Limiting the number of the SESSIONS_PER_USER can help prevent memory resource exhaustion by poorly formed requests or intentional denial-of-service attacks.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='SESSIONS_PER_USER'), 'UNLIMITED','9999',P.LIMIT)) > 10 AND P.RESOURCE_NAME = 'SESSIONS_PER_USER' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='SESSIONS_PER_USER' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) > 10 AND P.RESOURCE_NAME = 'SESSIONS_PER_USER' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ) ORDER BY CON_ID, PROFILE, RESOURCE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT SESSIONS_PER_USER 10; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#GUID-ABC7AE4D-64A8-4EA9-857D-BEF7300B64C3__GUID- E39008BB-092E-49B2-AAC2-3C4A98FC9A03 Additional Information: The SESSIONS_PER_USER profile management capability was created to prevent resource(s) exhaustion at a time when resource usage was very expensive. As current database design may require much higher limits on this parameter if one \"user\" handles all processing for specific types of batch/customer connections, this must be handled via a new user profile.",
    "function_names": [
      "database_user_sessions_per_user_limited",
      "database_user_max_sessions_enforced",
      "database_user_session_limit_compliant",
      "database_user_concurrent_sessions_restricted",
      "database_user_session_threshold_set"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#GUID-ABC7AE4D-64A8-4EA9-857D-BEF7300B64C3__GUID- E39008BB-092E-49B2-AAC2-3C4A98FC9A03 Additional Information: The SESSIONS_PER_USER profile management capability was created to prevent resource(s) exhaustion at a time when resource usage was very expensive. As current database design may require much higher limits on this parameter if one \"user\" handles all processing for specific types of batch/customer connections, this must be handled via a new user profile."
  },
  {
    "id": "3.9",
    "title": "Ensure 'INACTIVE_ACCOUNT_TIME' Is Less than or Equal to '120'",
    "assessment": "Automated",
    "description": "The INACTIVE_ACCOUNT_TIME setting determines the maximum number of days of inactivity (no logins at all) after which the account will be locked. The suggested value for this is 120 or less.",
    "rationale": "Setting INACTIVE_ACCOUNT_TIME can help with deactivation of \"inactive\" or \"unused\" accounts.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM DBA_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT,'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM DBA_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='INACTIVE_ACCOUNT_TIME'), 'UNLIMITED','9999', P.LIMIT)) > 120 AND P.RESOURCE_NAME = 'INACTIVE_ACCOUNT_TIME' AND EXISTS ( SELECT 'X' FROM DBA_USERS U WHERE U.PROFILE = P.PROFILE ); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT DISTINCT P.PROFILE, P.RESOURCE_NAME, P.LIMIT, DECODE (P.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE P.CON_ID = B.CON_ID)) DATABASE FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DISTINCT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='INACTIVE_ACCOUNT_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999', P.LIMIT)) > 120 AND P.RESOURCE_NAME = 'INACTIVE_ACCOUNT_TIME' AND EXISTS ( SELECT 'X' FROM CDB_USERS U WHERE U.PROFILE = P.PROFILE ); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT INACTIVE_ACCOUNT_TIME 120; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#GUID-ABC7AE4D-64A8-4EA9-857D- BEF7300B64C3__INACTIVE_ACCOUNT_TIME-585837A4 Additional Information: The SESSIONS_PER_USER profile management capability was created to prevent resource(s) exhaustion at a time when resource usage was very expensive. As current database design may require much higher limits on this parameter if one \"user\" handles all processing for specific types of batch/customer connections, this must be handled via a new user profile.",
    "function_names": [
      "iam_user_inactive_account_time_less_than_120d",
      "iam_account_inactive_lockout_enabled",
      "iam_user_inactive_lockout_threshold_compliant",
      "iam_account_inactive_time_limit_enforced",
      "iam_user_inactive_time_within_120d_limit"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/CREATE- PROFILE.html#GUID-ABC7AE4D-64A8-4EA9-857D- BEF7300B64C3__INACTIVE_ACCOUNT_TIME-585837A4 Additional Information: The SESSIONS_PER_USER profile management capability was created to prevent resource(s) exhaustion at a time when resource usage was very expensive. As current database design may require much higher limits on this parameter if one \"user\" handles all processing for specific types of batch/customer connections, this must be handled via a new user profile."
  },
  {
    "id": "4.1",
    "title": "Ensure All Default Passwords Are Changed",
    "assessment": "Automated",
    "description": "Default passwords should not be used by Oracle database users.",
    "rationale": "Default passwords should be considered \"well known\" to attackers. Consequently, if default passwords remain in place, any attacker with access to the database can authenticate as the user with that default password.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT DISTINCT A.USERNAME FROM DBA_USERS_WITH_DEFPWD A, DBA_USERS B WHERE A.USERNAME = B.USERNAME AND B.ACCOUNT_STATUS = 'OPEN'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT A.USERNAME, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_USERS_WITH_DEFPWD A, CDB_USERS C WHERE A.USERNAME = C.USERNAME AND C.ACCOUNT_STATUS = 'OPEN'; Lack of results implies compliance. The view called CDB_USERS_WITH_DEFPWD and DBA_USERS_WITH_DEFPWD shows a list of all database users making use of default passwords. Lack of results implies compliance. Note: Per Oracle Support Document 2173962.1, \"after creation of a new...database, the SYS and SYSTEM accounts [may be] listed in DBA_USERS_WITH_DEFPWD even though the accounts were created with non-default passwords. Setting the same passwords again with ALTER USER correctly recognizes that the accounts do not have default passwords.\"  Note: If you have set remote_password_file=NONE, then you won't be able to change SYS password through ALTER USER. Since remote_password_file is set to NONE, SYS account is effectively disabled. However, if you would like to change SYS password, then you will need to change remote_password_file to exclusive and then change SYS password.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. \u2022 Manually issue the following SQL statement for each USERNAME returned in the Audit Procedure: PASSWORD <username> \u2022 Execute the following SQL script to assign a randomly generated password to each account using a default password: begin for r_user in (select username from dba_users_with_defpwd where username not like '%XS$NULL%') loop DBMS_OUTPUT.PUT_LINE('Password for user '||r_user.username||' will be changed.'); execute immediate 'alter user \"'||r_user.username||'\" identified by \"'|| DBMS_RANDOM.string('a',16)||'\"account lock password expire'; end loop; end; Note: Changing the default password for the 'SYS' account may require additional procedures. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/dbseg/keeping- your-oracle-database-secure.html 2. https://support.oracle.com/epmos/faces/DocumentDisplay?id=2173962.1",
    "function_names": [
      "oracle_database_user_default_password_changed",
      "oracle_database_user_no_default_credentials",
      "oracle_database_user_password_not_default",
      "oracle_database_user_credentials_customized",
      "oracle_database_user_default_password_removed"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/dbseg/keeping- your-oracle-database-secure.html 2. https://support.oracle.com/epmos/faces/DocumentDisplay?id=2173962.1"
  },
  {
    "id": "4.2",
    "title": "Ensure All Sample Data And Users Have Been Removed",
    "assessment": "Automated",
    "description": "Oracle sample schemas can be used to create sample users (BI,HR,IX,OE,PM,SCOTT,SH), with well-known default passwords, particular views, and procedures/functions, in addition to tables and fictitious data. The sample schemas should be removed.",
    "rationale": "The sample schemas are typically not required for production operations of the database. The default users, views, and/or procedures/functions created by sample schemas could be used to launch exploits against production environments. Impact: The Oracle sample usernames may be in use on a production basis. It is important that you first verify that BI, HR, IX, OE, PM, SCOTT, and/or SH are not valid production usernames before executing the dropping SQL scripts. This may be particularly true with the HR and BI users. If any of these users are present, it is important to be cautious and confirm the schemas present are, in fact, Oracle sample schemas and not production schemas being relied upon by business operations.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT USERNAME FROM DBA_USERS WHERE USERNAME IN ('BI','HR','IX','OE','PM','SCOTT','SH'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DISTINCT A.USERNAME, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_USERS A WHERE A.USERNAME IN ('BI','HR','IX','OE','PM','SCOTT','SH'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to run the drop script. $ORACLE_HOME/demo/schema/drop_sch.sql Then, execute the following SQL statement. DROP USER SCOTT CASCADE; Note: The recyclebin is not set to OFF within the default drop script, which means that the data will still be present in your environment until the recyclebin is emptied. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/comsc/toc.htm",
    "function_names": [
      "database_sample_schemas_removed",
      "database_sample_users_removed",
      "database_sample_data_removed",
      "database_default_passwords_removed",
      "database_sample_views_removed",
      "database_sample_procedures_removed",
      "database_sample_functions_removed",
      "database_sample_tables_removed",
      "database_sample_objects_removed_all",
      "database_sample_artifacts_removed_all"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "impact": "The Oracle sample usernames may be in use on a production basis. It is important that you first verify that BI, HR, IX, OE, PM, SCOTT, and/or SH are not valid production usernames before executing the dropping SQL scripts. This may be particularly true with the HR and BI users. If any of these users are present, it is important to be cautious and confirm the schemas present are, in fact, Oracle sample schemas and not production schemas being relied upon by business operations.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/comsc/toc.htm"
  },
  {
    "id": "4.3",
    "title": "Ensure 'DBA_USERS.AUTHENTICATION_TYPE' Is Not Set to 'EXTERNAL' for Any User",
    "assessment": "Automated",
    "description": "The authentication_type='EXTERNAL' setting determines whether or not a user can be authenticated by a remote OS to allow access to the database with full authorization. This setting should not be used.",
    "rationale": "Allowing remote OS authentication of a user to the database can potentially allow supposed \"privileged users\" to connect as \"authenticated,\" even when the remote system is compromised.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT USERNAME FROM DBA_USERS WHERE AUTHENTICATION_TYPE = 'EXTERNAL'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT A.USERNAME, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_USERS A WHERE AUTHENTICATION_TYPE = 'EXTERNAL'; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke.  ALTER USER <username> IDENTIFIED BY <password> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/DBA_USERS.html#d1365273e525 Additional Information: The PASSWORD keyword (column) used in the SQL for prior Oracle versions has been deprecated from version 11.2 onward in favor of the new AUTHENTICATION_TYPE keyword (column) for the DBA_USERS table. However, the PASSWORD column has still been retained for backward compatibility.",
    "function_names": [
      "database_user_external_auth_disabled",
      "database_user_auth_type_secure",
      "database_user_no_external_auth",
      "database_user_auth_type_valid",
      "database_user_auth_type_not_external"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/refrn/DBA_USERS.html#d1365273e525 Additional Information: The PASSWORD keyword (column) used in the SQL for prior Oracle versions has been deprecated from version 11.2 onward in favor of the new AUTHENTICATION_TYPE keyword (column) for the DBA_USERS table. However, the PASSWORD column has still been retained for backward compatibility."
  },
  {
    "id": "4.4",
    "title": "Ensure No Users Are Assigned the 'DEFAULT' Profile",
    "assessment": "Automated",
    "description": "Upon creation database users are assigned to the DEFAULT profile unless otherwise specified. No users should be assigned to that profile.",
    "rationale": "Users should be created with function-appropriate profiles. The DEFAULT profile, being defined by Oracle, is subject to change at any time (e.g. by patch or version update). The DEFAULT profile has unlimited settings that are often required by the SYS user when patching; such unlimited settings should be tightly reserved and not applied to unnecessary users.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT USERNAME FROM DBA_USERS WHERE PROFILE='DEFAULT' AND ACCOUNT_STATUS='OPEN' AND ORACLE_MAINTAINED = 'N'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT A.USERNAME, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_USERS A WHERE A.PROFILE='DEFAULT' AND A.ACCOUNT_STATUS='OPEN' AND A.ORACLE_MAINTAINED = 'N'; Lack of results implies compliance.",
    "remediation": "To remediate this recommendation, execute the following SQL statement for each user returned by the audit query using a functional-appropriate profile, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. ALTER USER <username> PROFILE <appropriate_profile> ;",
    "function_names": [
      "database_user_no_default_profile",
      "database_user_profile_not_default",
      "database_user_default_profile_restricted",
      "database_user_profile_assigned_correctly",
      "database_user_profile_non_default_only"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "4.5",
    "title": "Ensure 'SYS.USER$MIG' Has Been Dropped",
    "assessment": "Automated",
    "description": "The table sys.user$mig is created during migration and contains the Oracle password hashes before the migration starts. This table should be dropped.",
    "rationale": "The table sys.user$mig is not deleted after the migration. An attacker could access the table containing the Oracle password hashes.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT OWNER, TABLE_NAME FROM DBA_TABLES WHERE TABLE_NAME='USER$MIG' AND OWNER='SYS'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT OWNER, TABLE_NAME, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TABLES A WHERE TABLE_NAME='USER$MIG' AND OWNER='SYS'; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. DROP TABLE SYS.USER$MIG;",
    "function_names": [
      "database_table_migration_removed",
      "database_table_migration_dropped",
      "database_table_migration_cleaned",
      "database_table_migration_secure",
      "database_table_migration_absent"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "4.6",
    "title": "Ensure No Public Database Links Exist",
    "assessment": "Automated",
    "description": "Public Database links are used to allow connections between databases.",
    "rationale": "Using public database links in the database can allow anyone with a connection to the database to query, update, insert, delete data on a remote database depending on the userid that is part of the link.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT DB_LINK, HOST FROM DBA_DB_LINKS WHERE OWNER = 'PUBLIC'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DB_LINK, HOST, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_DB_LINKS A WHERE OWNER = 'PUBLIC'; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. DROP PUBLIC DATABASE LINK <DB_LINK> ;",
    "function_names": [
      "database_link_public_access_disabled",
      "database_link_public_visibility_disabled",
      "database_link_no_public_endpoint",
      "database_link_private_network_only",
      "database_link_public_access_restricted",
      "database_link_public_availability_disabled",
      "database_link_public_connection_disabled",
      "database_link_public_exposure_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "5.1.1.1",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"Network\" Packages",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"Network\" packages - DBMS_LDAP, UTL_INADDR, UTL_TCP, UTL_MAIL, UTL_SMTP, UTL_DBWS, UTL_ORAMTS, UTL_HTTP and type HTTPURITYPE \u2013 provide PL/SQL APIs to interact or access remote servers. The PUBLIC should not be able to execute these packages. \u2022 The Oracle database DBMS_LDAP package contains functions and procedures that enable programmers to access data from LDAP servers. \u2022 The Oracle database UTL_INADDR package provides an API to retrieve host names and IP addresses of local and remote hosts. \u2022 The Oracle database UTL_TCP package can be used to read/write file to TCP sockets on the server where the Oracle instance is installed. \u2022 The Oracle database UTL_MAIL package can be used to send email from the server where the Oracle instance is installed. \u2022 The Oracle database UTL_SMTP package can be used to send email from the server where the Oracle instance is installed. The user PUBLIC should not be able to execute UTL_SMTP. \u2022 The Oracle database UTL_DBWS package can be used to read/write file to web- based applications on the server where the Oracle instance is installed. This package is not automatically installed for security reasons. \u2022 The Oracle database UTL_ORAMTS package can be used to perform HTTP requests. This could be used to send information to the outside. \u2022 The Oracle database UTL_HTTP package can be used to perform HTTP requests. This could be used to send information to the outside. \u2022 The Oracle database HTTPURITYPE object type can be used to perform HTTP requests.",
    "rationale": "As described below, Oracle Database PL/SQL packages - DBMS_LDAP, UTL_INADDR, UTL_TCP, UTL_MAIL, UTL_SMTP, UTL_DBWS, UTL_ORAMTS, UTL_HTTP and type HTTPURITYPE can be used by unauthorized users to create specially crafted error messages or send information to external servers. The PUBLIC should not be able to execute these packages.  \u2022 The use of the DBMS_LDAP package can be used to create specially crafted error messages or send information via DNS to the outside. \u2022 The UTL_INADDR package can be used to create specially crafted error messages or send information via DNS to the outside. \u2022 The UTL_TCP package could allow an unauthorized user to corrupt the TCP stream used to carry the protocols that communicate with the instance's external communications. \u2022 The UTL_MAIL package could allow an unauthorized user to corrupt the SMTP function to accept or generate junk mail that can result in a denial-of-service condition due to network saturation. \u2022 The UTL_SMTP package could allow an unauthorized user to corrupt the SMTP function to accept or generate junk mail that can result in a denial-of-service condition due to network saturation. \u2022 The UTL_DBWS package could allow an unauthorized user to corrupt the HTTP stream used to carry the protocols that communicate for the instance's web- based external communications. \u2022 The UTL_ORAMTS package could be used to send (sensitive) information to external websites. The use of this package should be restricted according to the needs of the organization. \u2022 The UTL_HTTP package could be used to send (sensitive) information to external websites. \u2022 The use of this package should be restricted according to the needs of the organization. \u2022 The ability to perform HTTP requests could be used to leak information from the database to an external destination.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_LDAP','UTL_INADDR','UTL_TCP','UTL_MAIL','UTL_SMTP','UTL_DBWS','UTL_ORA MTS','UTL_HTTP','HTTPURITYPE'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_LDAP','UTL_INADDR','UTL_TCP','UTL_MAIL','UTL_SMTP','UTL_DBWS','UTL_ORA MTS','UTL_HTTP','HTTPURITYPE') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_LDAP FROM PUBLIC; REVOKE EXECUTE ON UTL_INADDR FROM PUBLIC; REVOKE EXECUTE ON UTL_TCP FROM PUBLIC; REVOKE EXECUTE ON UTL_MAIL FROM PUBLIC; REVOKE EXECUTE ON UTL_SMTP FROM PUBLIC; REVOKE EXECUTE ON UTL_DBWS FROM PUBLIC; REVOKE EXECUTE ON UTL_ORAMTS FROM PUBLIC; REVOKE EXECUTE ON UTL_HTTP FROM PUBLIC; REVOKE EXECUTE ON HTTPURITYPE FROM PUBLIC;",
    "function_names": [
      "database_network_package_execute_revoked_from_public",
      "database_plsql_network_package_public_access_restricted",
      "database_dbms_ldap_public_execute_disabled",
      "database_utl_inaddr_public_execute_disabled",
      "database_utl_tcp_public_execute_disabled",
      "database_utl_mail_public_execute_disabled",
      "database_utl_smtp_public_execute_disabled",
      "database_utl_dbws_public_execute_disabled",
      "database_utl_oramts_public_execute_disabled",
      "database_utl_http_public_execute_disabled",
      "database_httpuritype_public_execute_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.1.2",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"File System\" Packages",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"File System\" packages - DBMS_ADVISOR, DBMS_LOB and UTL_FILE \u2013 provide PL/SQL APIs to access files on the servers. The user PUBLIC should not be able to execute these packages. \u2022 The Oracle database DBMS_ADVISOR package can be used to write files located on the server where the Oracle instance is installed. The user PUBLIC should not be able to execute DBMS_ADVISOR. \u2022 The Oracle database DBMS_LOB package provides subprograms that can manipulate and read/write on BLOB's, CLOB's, NCLOB's, BFILE's, and temporary LOB's. The user PUBLIC should not be able to execute DBMS_LOB. \u2022 The Oracle database UTL_FILE package can be used to read/write files located on the server where the Oracle instance is installed. The user PUBLIC should not be able to execute UTL_FILE.",
    "rationale": "As described below, Oracle Database PL/SQL \"File System\" packages - DBMS_ADVISOR, DBMS_LOB and UTL_FILE \u2013 should not be granted to PUBLIC. \u2022 Use of the DBMS_ADVISOR package could allow an unauthorized user to corrupt operating system files on the instance's host. \u2022 Use of the DBMS_LOB package could allow an unauthorized user to manipulate BLOB's, CLOB's, NCLOB's, BFILE's, and temporary LOBs on the instance, either destroying data or causing a denial-of-service condition due to corruption of disk space. \u2022 Use of the UTL_FILE package could allow a user to read OS files. These files could contain sensitive information (e.g. passwords in .bash_history)",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement.  SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_ADVISOR','DBMS_LOB','UTL_FILE'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_ADVISOR','DBMS_LOB','UTL_FILE') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_ADVISOR FROM PUBLIC; REVOKE EXECUTE ON DBMS_LOB FROM PUBLIC; REVOKE EXECUTE ON UTL_FILE FROM PUBLIC;",
    "function_names": [
      "oracle_database_plsql_package_public_execute_revoked",
      "oracle_database_dbms_advisor_public_execute_revoked",
      "oracle_database_dbms_lob_public_execute_revoked",
      "oracle_database_utl_file_public_execute_revoked",
      "oracle_database_file_system_packages_public_execute_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.1.3",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"Encryption\" Packages",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"Encryption\" packages - DBMS_CRYPTO, DBMS_OBFUSCATION_TOOLKIT and DBMS_RANDOM \u2013 provide PL/SQL APIs to perform functions related to cryptography. The PUBLIC should not be able to execute these packages. \u2022 The DBMS_CRYPTO settings provide a toolset that determines the strength of the encryption algorithm used to encrypt application data and is part of the SYS schema. The DES (56-bit key), 3DES (168-bit key), 3DES-2KEY (112-bit key), AES (128/192/256-bit keys), and RC4 are available. \u2022 The DBMS_OBFUSCATION_TOOLKIT provides one of the tools that determine the strength of the encryption algorithm used to encrypt application data and is part of the SYS schema. The DES (56-bit key) and 3DES (168-bit key) are the only two types available. \u2022 The Oracle database DBMS_RANDOM package is used for generating random numbers but should not be used for cryptographic purposes.",
    "rationale": "As described below, Oracle Database PL/SQL Encryption packages - DBMS_CRYPTO, DBMS_OBFUSCATION_TOOLKIT and DBMS_RANDOM \u2013 should not be granted to PUBLIC. \u2022 Execution of the DBMS_CRYPTO procedures by the PUBLIC can potentially endanger portions of or all of the data storage. \u2022 Allowing the PUBLIC privileges to access this capability can be potentially harm data storage. \u2022 Use of the DBMS_RANDOM package can allow the unauthorized application of the random number-generating function.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement.  SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_CRYPTO','DBMS_OBFUSCATION_TOOLKIT', 'DBMS_RANDOM'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_CRYPTO','DBMS_OBFUSCATION_TOOLKIT', 'DBMS_RANDOM') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_CRYPTO FROM PUBLIC; REVOKE EXECUTE ON DBMS_OBFUSCATION_TOOLKIT FROM PUBLIC; REVOKE EXECUTE ON DBMS_RANDOM FROM PUBLIC;",
    "function_names": [
      "database_encryption_package_public_execute_revoked",
      "database_dbms_crypto_public_execute_revoked",
      "database_dbms_obfuscation_toolkit_public_execute_revoked",
      "database_dbms_random_public_execute_revoked",
      "database_encryption_package_public_access_restricted",
      "database_plsql_encryption_public_execute_disabled",
      "database_sys_schema_encryption_public_execute_denied",
      "database_crypto_package_public_execute_prohibited"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.1.4",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"Java\" Packages",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"Java\" packages - DBMS_JAVA and DBMS_JAVA_TEST \u2013 provide APIs to run Java classes or grant Java packages. The user PUBLIC should not be able to execute these packages. \u2022 The Oracle database DBMS_JAVA package can run Java classes (e.g. OS commands) or grant Java privileges. The user PUBLIC should not be able to execute DBMS_JAVA. \u2022 The Oracle database DBMS_JAVA_TEST package can run Java classes (e.g. OS commands) or grant Java privileges. The user PUBLIC should not be able to execute DBMS_JAVA_TEST.",
    "rationale": "As described below, Oracle Database PL/SQL \"Java\" packages - DBMS_JAVA and DBMS_JAVA_TEST \u2013 should not be granted to PUBLIC. \u2022 The DBMS_JAVA package could allow an attacker to run OS commands from the database. \u2022 The DBMS_JAVA_TEST package could allow an attacker to run operating system commands from the database.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_JAVA','DBMS_JAVA_TEST'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_JAVA','DBMS_JAVA_TEST') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_JAVA FROM PUBLIC; REVOKE EXECUTE ON DBMS_JAVA_TEST FROM PUBLIC;",
    "function_names": [
      "database_java_package_execute_revoked_from_public",
      "database_dbms_java_execute_revoked_from_public",
      "database_dbms_java_test_execute_revoked_from_public",
      "database_plsql_java_execute_restricted",
      "database_java_package_public_access_denied"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.1.5",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"Job Scheduler\" Packages",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"Job Scheduler\" packages - DBMS_SCHEDULER and DBMS_JOB \u2013 provide APIs to schedule jobs. The user PUBLIC should not be able to execute these packages. \u2022 The Oracle database DBMS_SCHEDULER package schedules and manages the database and operating system jobs. The user PUBLIC should not be able to execute DBMS_SCHEDULER. \u2022 The Oracle database DBMS_JOB package schedules and manages the jobs sent to the job queue and has been superseded by the DBMS_SCHEDULER package, even though DBMS_JOB has been retained for backwards compatibility. The user PUBLIC should not be able to execute DBMS_JOB.",
    "rationale": "As described below, Oracle Database PL/SQL \"Job Scheduler\" packages - DBMS_SCHEDULER and DBMS_JOB \u2013 should not be granted to the user PUBLIC. \u2022 Use of the DBMS_SCHEDULER package could allow an unauthorized user to run database or operating system jobs. \u2022 Use of the DBMS_JOB package could allow an unauthorized user to disable or overload the job queue. It has been superseded by the DBMS_SCHEDULER package.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_SCHEDULER','DBMS_JOB'); Lack of results implies compliance. Multi-tenant in the container database:  This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_SCHEDULER','DBMS_JOB') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_JOB FROM PUBLIC; REVOKE EXECUTE ON DBMS_SCHEDULER FROM PUBLIC;",
    "function_names": [
      "database_job_scheduler_public_execute_revoked",
      "database_dbms_scheduler_public_execute_revoked",
      "database_dbms_job_public_execute_revoked",
      "database_plsql_package_public_execute_revoked",
      "database_scheduler_package_public_execute_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.1.6",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"SQL Injection Helper\" Packages",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"SQL Injection Helper Packages\" packages - DBMS_SQL, DBMS_XMLGEN, DBMS_XMLQUERY, DBMS_XLMSTORE, DBMS_XLMSAVE and DBMS_REDACT \u2013 provide APIs to schedule jobs. The user PUBLIC should not be able to execute these packages. \u2022 The Oracle database DBMS_SQL package is used for running dynamic SQL statements. \u2022 The DBMS_XMLGEN package takes an arbitrary SQL query as input, converts it to XML format, and returns the result as a CLOB. \u2022 The Oracle package DBMS_XMLQUERY takes an arbitrary SQL query, converts it to XML format, and returns the result. This package is similar to DBMS_XMLGEN. \u2022 The DBMS_XLMSTORE package provides XML functionality. It accepts a table name and XML as input to perform DML operations against the table. \u2022 The DBMS_XLMSAVE package provides XML functionality. It accepts a table name and XML as input and then inserts into or updates that table. \u2022 The DBMS_REDACT package provides an interface to Oracle Data Redaction, which enables you to mask (redact) data that is returned from queries issued by low-privileged users or an application.",
    "rationale": "As described below, Oracle Database PL/SQL \"SQL Injection Helper Packages\" packages - DBMS_SQL, DBMS_XMLGEN, DBMS_XMLQUERY, DBMS_XLMSTORE, DBMS_XLMSAVE and 'DBMS_REDACT' \u2013 should not be granted to PUBLIC. \u2022 The DBMS_SQL package could allow privilege escalation if input validation is not done properly. \u2022 The package DBMS_XMLGEN can be used to search the entire database for sensitive information like credit card numbers \u2022 The package DBMS_XMLQUERY can be used to search the entire database for sensitive information like credit card numbers. Malicious users may be able to exploit this package as an auxiliary inject function in a SQL injection attack. \u2022 Malicious users may be able to exploit the DBMS_XLMSTORE package as an auxiliary inject function in a SQL injection attack.  \u2022 Malicious users may be able to exploit the DBMS_XLMSAVE package as an auxiliary inject function in a SQL injection attack. \u2022 Malicious users may be able to exploit DBMS_REDACT as an auxiliary inject function in a SQL injection attack.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_SQL', 'DBMS_XMLGEN', 'DBMS_XMLQUERY','DBMS_XMLSTORE','DBMS_XMLSAVE','DBMS_AW','OWA_UTIL','DBMS_RED ACT'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_SQL', 'DBMS_XMLGEN', 'DBMS_XMLQUERY','DBMS_XMLSTORE','DBMS_XMLSAVE','DBMS_AW','OWA_UTIL','DBMS_RED ACT') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_SQL FROM PUBLIC; REVOKE EXECUTE ON DBMS_XMLGEN FROM PUBLIC; REVOKE EXECUTE ON DBMS_XMLQUERY FROM PUBLIC; REVOKE EXECUTE ON DBMS_XMLSAVE FROM PUBLIC; REVOKE EXECUTE ON DBMS_XMLSTORE FROM PUBLIC; REVOKE EXECUTE ON DBMS_AW FROM PUBLIC; REVOKE EXECUTE ON OWA_UTIL FROM PUBLIC; REVOKE EXECUTE ON DBMS_REDACT FROM PUBLIC;",
    "function_names": [
      "database_plsql_execute_revoked_from_public",
      "database_plsql_sql_injection_helper_no_public_execute",
      "database_package_public_execute_disabled",
      "database_plsql_package_public_access_restricted",
      "database_plsql_injection_helper_public_revoke_execute",
      "database_plsql_privilege_public_execute_removed",
      "database_plsql_secure_package_execute_restricted",
      "database_plsql_public_execute_privilege_revoked",
      "database_plsql_injection_helper_public_access_denied",
      "database_plsql_package_execute_public_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.1.7",
    "title": "Ensure 'EXECUTE' is revoked from 'PUBLIC' on \"DBMS_CREDENTIAL\" Package",
    "assessment": "Automated",
    "description": "As described below, Oracle Database PL/SQL \"DBMS_CREDENTIAL\" package \u2013 should not be granted to PUBLIC. \u2022 Use of the DBMS_CREDENTIAL package could allow an unauthorized user to add, create, drop, enable and update credentials allowing jobs to run on the operating system.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME = 'DBMS_CREDENTIAL'; Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME = 'DBMS_CREDENTIAL' ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ON DBMS_CREDENTIAL FROM PUBLIC;",
    "rationale": "",
    "function_names": [
      "oracle_dbms_credential_execute_revoked_from_public",
      "oracle_dbms_credential_public_access_restricted",
      "oracle_dbms_credential_unauthorized_execute_blocked",
      "oracle_dbms_credential_privilege_escalation_prevented",
      "oracle_dbms_credential_public_execute_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.2.1",
    "title": "Ensure 'EXECUTE' is not granted to 'PUBLIC' on \"Non- default\" Packages",
    "assessment": "Automated",
    "description": "The packages described in this control are not granted to PUBLIC by default (\"Non- default\" packages). These packages should not be granted to PUBLIC. \u2022 The Oracle database DBMS_BACKUP_RESTORE package is used for applying PL/SQL commands to the native RMAN sequences. \u2022 The Oracle database DBMS_FILE_TRANSFER package allows a user to transfer files from one database server to another. \u2022 The Oracle database DBMS_SYS_SQL,DBMS_REPCAT_SQL_UTL, INITJVMAUX, DBMS_AQADM_SYS, DBMS_STREAMS_RPC, DBMS_PRVTAQIM, LTADM and DBMS_IJOB packages are shipped as undocumented.",
    "rationale": "As described below, these \"non-default\" group of PL/SQL packages, which are not granted to PUBLIC by default, packages should not be granted to PUBLIC. \u2022 The DBMS_BACKUP_RESTORE package can allow access to OS files. \u2022 The DBMS_FILE_TRANSFER package could allow to transfer files from one database server to another without authorization to do so. \u2022 The DBMS_SYS_SQL package could allow a user to run code as a different user without entering valid credentials. \u2022 The DBMS_REPCAT_SQL_UTL package could allow an unauthorized user to run SQL commands as user SYS. \u2022 The INITJVMAUX package could allow an unauthorized user to run SQL commands as user SYS. \u2022 The DBMS_AQADM_SYS package could allow an unauthorized user to run SQL commands as user SYS. \u2022 The DBMS_STREAMS_RPC package could allow an unauthorized user to run SQL commands as user SYS. \u2022 The DBMS_PRVTAQIM package could allow an unauthorized user to escalate privileges because any SQL statements could be executed as user SYS. \u2022 The LTADM package could allow an unauthorized user to run any SQL command as user SYS. It allows privilege escalation if granted to unprivileged users.  \u2022 The DBMS_IJOB package could allow an attacker to change identities by using a different username to execute a database job. It allows a user to run database jobs in the context of another user.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE FROM DBA_TAB_PRIVS WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_BACKUP_RESTORE','DBMS_FILE_TRANSFER','DBMS_SYS_SQL','DBMS_REPCAT_SQL_U TL','INITJVMAUX', 'DBMS_AQADM_SYS','DBMS_STREAMS_RPC','DBMS_PRVTAQIM','LTADM', 'DBMS_IJOB','DBMS_PDB_EXEC_SQL'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE GRANTEE='PUBLIC' AND PRIVILEGE='EXECUTE' AND TABLE_NAME IN ('DBMS_BACKUP_RESTORE','DBMS_FILE_TRANSFER','DBMS_SYS_SQL','DBMS_REPCAT_SQL_U TL','INITJVMAUX', 'DBMS_AQADM_SYS','DBMS_STREAMS_RPC','DBMS_PRVTAQIM','LTADM', 'DBMS_IJOB','DBMS_PDB_EXEC_SQL') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke.  REVOKE EXECUTE ON DBMS_BACKUP_RESTORE FROM PUBLIC; REVOKE EXECUTE ON DBMS_FILE_TRANSFER FROM PUBLIC; REVOKE EXECUTE ON DBMS_SYS_SQL FROM PUBLIC; REVOKE EXECUTE ON DBMS_REPCAT_SQL_UTL FROM PUBLIC; REVOKE EXECUTE ON INITJVMAUX FROM PUBLIC; REVOKE EXECUTE ON DBMS_AQADM_SYS FROM PUBLIC; REVOKE EXECUTE ON DBMS_STREAMS_RPC FROM PUBLIC; REVOKE EXECUTE ON DBMS_PRVTAQIM FROM PUBLIC; REVOKE EXECUTE ON LTADM FROM PUBLIC; REVOKE EXECUTE ON DBMS_IJOB FROM PUBLIC; REVOKE EXECUTE ON DBMS_PDB_EXEC_SQL FROM PUBLIC;",
    "function_names": [
      "oracle_database_package_no_public_execute",
      "oracle_database_package_no_public_execute_non_default",
      "oracle_database_package_no_public_execute_backup_restore",
      "oracle_database_package_no_public_execute_file_transfer",
      "oracle_database_package_no_public_execute_sys_sql",
      "oracle_database_package_no_public_execute_repcat_sql_utl",
      "oracle_database_package_no_public_execute_initjvmaux",
      "oracle_database_package_no_public_execute_aqadm_sys",
      "oracle_database_package_no_public_execute_streams_rpc",
      "oracle_database_package_no_public_execute_prvtaqim",
      "oracle_database_package_no_public_execute_ltadm",
      "oracle_database_package_no_public_execute_ijob"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.1.3.1",
    "title": "Ensure 'ALL' Is Revoked from Unauthorized 'GRANTEE' on 'AUD$'",
    "assessment": "Automated",
    "description": "The Oracle database SYS.AUD$ table contains all the audit records for the database of the non-Data Manipulation Language (DML) events, such as ALTER, DROP, and CREATE, and so forth. (DML changes need trigger-based audit events to record data alterations.) Unauthorized grantees should not have full access to that table.",
    "rationale": "Permitting non-privileged users the authorization to manipulate the SYS.AUD$ table can allow distortion of the audit records, hiding unauthorized activities.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_TAB_PRIVS WHERE TABLE_NAME='AUD$' AND OWNER = 'SYS'; Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE TABLE_NAME='AUD$' AND OWNER = 'SYS'; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE ALL ON AUD$ FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/administering-the-audit-trail.html",
    "function_names": [
      "database_audit_table_no_unauthorized_all_privileges",
      "oracle_aud_table_revoke_all_unauthorized_grantees",
      "sys_aud_table_no_full_access_unauthorized_users",
      "database_audit_logs_restrict_all_privileges",
      "oracle_aud_table_no_unauthorized_all_grants"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/administering-the-audit-trail.html"
  },
  {
    "id": "5.1.3.2",
    "title": "Ensure 'ALL' Is Revoked from Unauthorized 'GRANTEE' on 'DBA_%'",
    "assessment": "Automated",
    "description": "The Oracle database DBA_ views show all information which is relevant to administrative accounts. Unauthorized grantees should not have full access to those views.",
    "rationale": "Permitting users the authorization to manipulate the DBA_ views can expose sensitive data.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE,TABLE_NAME FROM DBA_TAB_PRIVS WHERE TABLE_NAME LIKE 'DBA\\_%' ESCAPE '\\' AND OWNER = 'SYS' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SSELECT GRANTEE,TABLE_NAME, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_TAB_PRIVS A WHERE TABLE_NAME LIKE 'DBA\\_%' ESCAPE '\\' AND OWNER = 'SYS' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "Replace <Non-DBA/SYS grantee> in the query below, with the Oracle login(s) or role(s) returned from the associated audit procedure and execute, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke: REVOKE ALL ON <DBA_%> FROM <Non-DBA/SYS grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/static-data- dictionary-views.html",
    "function_names": [
      "oracle_database_dba_views_all_revoked_from_unauthorized_grantee",
      "oracle_database_dba_views_no_unauthorized_all_privileges",
      "oracle_database_dba_views_grantee_access_restricted",
      "oracle_database_dba_views_unauthorized_all_privileges_revoked",
      "oracle_database_dba_views_grantee_privileges_minimized"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/refrn/static-data- dictionary-views.html"
  },
  {
    "id": "5.1.3.3",
    "title": "Ensure 'ALL' Is Revoked on 'Sensitive' Tables",
    "assessment": "Automated",
    "description": "The Oracle database tables listed below may contain sensitive information, and should not be accessible to unauthorized users. \u2022 USER$, USER_HISTORY$, XS$VERIFIERS and DEFAULT_PWD$ may contain password hashes. \u2022 CDB_LOCAL_ADMINAUTH$ and PDB_SYNC$ may contain DDLs. \u2022 LINK$ and SCHEDULER$_CREDENTIAL may contain encrypted passwords. \u2022 ENC$ may contains encryption keys. \u2022 HISTGRM$ and HIST_HEAD$ may contain sensitive data.",
    "rationale": "Access to sensitive information such as hashed passwords may allow unauthorized users to decrypt the passwords hashes which could potentially result in complete compromise of the database.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, TABLE_NAME FROM DBA_TAB_PRIVS WHERE TABLE_NAME in ('CDB_LOCAL_ADMINAUTH$','DEFAULT_PWD$','ENC$','HISTGRM$','HIST_HEAD$','LINK$' ,'PDB_SYNC$','SCHEDULER$_CREDENTIAL','USER$','USER_HISTORY$','XS$VERIFIERS') AND OWNER = 'SYS' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance. Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT TABLE_NAME, PRIVILEGE, GRANTEE,DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) DATABASE FROM CDB_TAB_PRIVS A WHERE TABLE_NAME in ('CDB_LOCAL_ADMINAUTH$','DEFAULT_PWD$','ENC$','HISTGRM$','HIST_HEAD$','LINK$' ,'PDB_SYNC$','SCHEDULER$_CREDENTIAL','USER$','USER_HISTORY$','XS$VERIFIERS') AND OWNER = 'SYS' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y') ORDER BY CON_ID, TABLE_NAME; Lack of results implies compliance.",
    "remediation": "Execute applicable SQLs listed below to remediate: REVOKE ALL ON SYS.CDB_LOCAL_ADMINAUTH$ FROM <grantee> ; REVOKE ALL ON SYS.DEFAULT_PWD$ FROM <grantee> ; REVOKE ALL ON SYS.ENC$ FROM <grantee> ; REVOKE ALL ON SYS.HISTGRM$ FROM <grantee> ; REVOKE ALL ON SYS.HIST_HEAD$ FROM <grantee> ; REVOKE ALL ON SYS.LINK$ FROM <grantee> ; REVOKE ALL ON SYS.PDB_SYNC$ FROM <grantee> ; REVOKE ALL ON SYS.SCHEDULER$_CREDENTIAL FROM <grantee> ; REVOKE ALL ON SYS.USER$ FROM <grantee> ; REVOKE ALL ON SYS.USER_HISTORY$ FROM <grantee> ; REVOKE ALL ON SYS.XS$VERIFIERS FROM <grantee> ;",
    "function_names": [
      "database_table_sensitive_access_revoked",
      "database_table_sensitive_no_unauthorized_access",
      "database_table_sensitive_all_revoked",
      "database_table_sensitive_permissions_restricted",
      "database_table_sensitive_privileges_revoked",
      "database_table_sensitive_access_controlled",
      "database_table_sensitive_no_public_access",
      "database_table_sensitive_encryption_keys_protected",
      "database_table_sensitive_password_hashes_restricted",
      "database_table_sensitive_ddl_access_revoked"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.2.1",
    "title": "Ensure '%ANY%' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database ANY keyword provides the user the capability to alter any item in the catalog of the database. Unauthorized grantees should not have that keyword assigned to them.",
    "rationale": "Authorization to use the ANY expansion of a privilege can allow an unauthorized user to potentially change confidential data or damage the data catalog.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE LIKE '%ANY%' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE LIKE '%ANY%' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE ' <ANY Privilege> ' FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_no_any_privilege",
      "database_role_no_any_privilege",
      "database_grantee_no_any_privilege",
      "database_privilege_any_revoked",
      "database_privilege_no_any_granted",
      "database_user_any_privilege_revoked",
      "database_role_any_privilege_revoked",
      "database_grantee_any_privilege_revoked"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.2.2",
    "title": "Ensure 'DBA_SYS_PRIVS.%' Is Revoked from Unauthorized 'GRANTEE' with 'ADMIN_OPTION' Set to 'YES'",
    "assessment": "Automated",
    "description": "The Oracle database WITH_ADMIN privilege allows the designated user to grant another user the same privileges. Unauthorized grantees should not have that privilege.",
    "rationale": "Assignment of the WITH_ADMIN privilege can allow the granting of a restricted privilege to an unauthorized user.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE ADMIN_OPTION='YES' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE ADMIN_OPTION='YES' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE <privilege> FROM <grantee> ;",
    "function_names": [
      "oracle_database_privilege_admin_option_revoked",
      "oracle_database_dba_sys_privs_admin_option_disabled",
      "oracle_database_grantee_admin_privilege_restricted",
      "oracle_database_privilege_admin_option_unauthorized_revoked",
      "oracle_database_sys_privs_admin_option_secure",
      "oracle_database_privilege_admin_option_no_grantee",
      "oracle_database_dba_privs_admin_option_minimized"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.2.3",
    "title": "Ensure 'EXECUTE ANY PROCEDURE' Is Revoked from 'OUTLN'",
    "assessment": "Automated",
    "description": "Remove unneeded EXECUTE ANY PROCEDURE privileges from OUTLN.",
    "rationale": "Migrated OUTLN users have more privileges than required.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='EXECUTE ANY PROCEDURE' AND GRANTEE='OUTLN'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='EXECUTE ANY PROCEDURE' AND GRANTEE='OUTLN'; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ANY PROCEDURE FROM OUTLN;",
    "function_names": [
      "database_user_execute_any_procedure_revoked",
      "database_user_outln_no_execute_privileges",
      "database_outln_execute_any_procedure_disabled",
      "database_privilege_execute_any_procedure_restricted",
      "database_outln_unneeded_privileges_removed"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.2.4",
    "title": "Ensure 'EXECUTE ANY PROCEDURE' Is Revoked from 'DBSNMP'",
    "assessment": "Automated",
    "description": "Remove unneeded EXECUTE ANY PROCEDURE privileges from DBSNMP.",
    "rationale": "Migrated DBSNMP users have more privileges than required.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='EXECUTE ANY PROCEDURE' AND GRANTEE='DBSNMP'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='EXECUTE ANY PROCEDURE' AND GRANTEE='DBSNMP'; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE ANY PROCEDURE FROM DBSNMP;",
    "function_names": [
      "database_user_no_execute_any_procedure",
      "database_user_dbsnmp_privileges_revoked",
      "database_role_execute_any_procedure_restricted",
      "database_account_minimal_privileges",
      "database_user_dbsnmp_no_admin_privileges"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "5.2.5",
    "title": "Ensure 'SELECT ANY DICTIONARY' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database SELECT ANY DICTIONARY privilege allows the designated user to access SYS schema objects. Unauthorized grantees should not have that privilege.",
    "rationale": "SELECT ANY DICTIONARY is a powerful system privilege which would allow an unauthorized user to gather information about the database through data dictionary objects. Information collected could potentially be used to exploit the database.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='SELECT ANY DICTIONARY' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='SELECT ANY DICTIONARY' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE SELECT ANY DICTIONARY FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html 2. http://arup.blogspot.de/2011/07/difference-between-select-any.html",
    "function_names": [
      "oracle_database_user_no_select_any_dictionary",
      "oracle_database_grantee_select_any_dictionary_revoked",
      "oracle_database_privilege_select_any_dictionary_restricted",
      "oracle_database_user_select_any_dictionary_unauthorized",
      "oracle_database_grantee_select_any_dictionary_denied"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html 2. http://arup.blogspot.de/2011/07/difference-between-select-any.html"
  },
  {
    "id": "5.2.6",
    "title": "Ensure 'SELECT ANY TABLE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database SELECT ANY TABLE privilege allows the designated user to open any table, except SYS, to view it. Unauthorized grantees should not have that privilege.",
    "rationale": "Assignment of the SELECT ANY TABLE privilege can allow the unauthorized viewing of sensitive data.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='SELECT ANY TABLE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='SELECT ANY TABLE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke.  REVOKE SELECT ANY TABLE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html Additional Information: In Oracle 19c, O7_DICTIONARY_ACCESSIBILITY parameter has been de-supported. It can no longer be set. In Oracle versions before 19c, O7_DICTIONARY_ACCESSIBILITY parameter had a side effect that it allowed access to the SYS objects when the SELECT ANY TABLE privilege was granted.",
    "function_names": [
      "oracle_database_privilege_no_select_any_table",
      "oracle_database_grantee_no_select_any_table",
      "oracle_database_user_no_select_any_table",
      "oracle_database_role_no_select_any_table",
      "oracle_database_privilege_select_any_table_revoked",
      "oracle_database_grantee_select_any_table_revoked",
      "oracle_database_user_select_any_table_revoked",
      "oracle_database_role_select_any_table_revoked"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html Additional Information: In Oracle 19c, O7_DICTIONARY_ACCESSIBILITY parameter has been de-supported. It can no longer be set. In Oracle versions before 19c, O7_DICTIONARY_ACCESSIBILITY parameter had a side effect that it allowed access to the SYS objects when the SELECT ANY TABLE privilege was granted."
  },
  {
    "id": "5.2.7",
    "title": "Ensure 'AUDIT SYSTEM' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database AUDIT SYSTEM privilege allows changes to auditing activities on the system. Unauthorized grantees should not have that privilege.",
    "rationale": "The AUDIT SYSTEM privilege can allow the unauthorized alteration of system audit activities, such as disabling the creation of audit trails.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='AUDIT SYSTEM' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='AUDIT SYSTEM' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke.  REVOKE AUDIT SYSTEM FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/AUDIT- Traditional-Auditing.html",
    "function_names": [
      "database_audit_system_privilege_revoked",
      "database_audit_system_unauthorized_grantee_revoked",
      "database_audit_system_privilege_restricted",
      "database_audit_system_privilege_no_unauthorized_access",
      "database_audit_system_grantee_authorized_only"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/AUDIT- Traditional-Auditing.html"
  },
  {
    "id": "5.2.8",
    "title": "Ensure 'EXEMPT ACCESS POLICY' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database EXEMPT ACCESS POLICY keyword provides the user the capability to access all the table rows regardless of row-level security lockouts. Unauthorized grantees should not have that keyword assigned to them.",
    "rationale": "The EXEMPT ACCESS POLICY privilege can allow an unauthorized user to potentially access and change data.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='EXEMPT ACCESS POLICY' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='EXEMPT ACCESS POLICY' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXEMPT ACCESS POLICY FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "oracle_database_user_exempt_access_policy_revoked",
      "oracle_database_grantee_exempt_access_policy_disabled",
      "oracle_database_policy_unauthorized_grantee_restricted",
      "oracle_database_privilege_exempt_access_removed",
      "oracle_database_security_exempt_access_policy_denied"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "5.2.9",
    "title": "Ensure 'BECOME USER' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database BECOME USER privilege allows the designated user to inherit the rights of another user. Unauthorized grantees should not have that privilege.",
    "rationale": "The BECOME USER privilege can allow the unauthorized use of another user's privileges, this capability should be restricted according to the needs of the organization.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='BECOME USER' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='BECOME USER' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke.  REVOKE BECOME USER FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "oracle_database_user_become_user_revoked",
      "oracle_database_user_become_user_restricted",
      "oracle_database_grantee_become_user_denied",
      "oracle_database_privilege_become_user_unauthorized",
      "oracle_database_grantee_become_user_revoked",
      "oracle_database_user_become_user_unauthorized_grantee",
      "oracle_database_privilege_become_user_restricted",
      "oracle_database_grantee_become_user_unauthorized"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "5.2.10",
    "title": "Ensure 'CREATE PROCEDURE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database CREATE PROCEDURE privilege allows the designated user to create a stored procedure that will fire when given the correct command sequence. Unauthorized grantees should not have that privilege.",
    "rationale": "The CREATE PROCEDURE privilege can lead to severe problems in unauthorized hands, such as rogue procedures facilitating data theft or denial-of-service by corrupting data tables.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='CREATE PROCEDURE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='CREATE PROCEDURE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE CREATE PROCEDURE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "database_user_no_create_procedure_privilege",
      "database_grantee_no_create_procedure_privilege",
      "oracle_user_no_create_procedure_privilege",
      "oracle_grantee_no_create_procedure_privilege",
      "database_privilege_no_unauthorized_grantee",
      "oracle_privilege_no_unauthorized_grantee",
      "database_procedure_creation_restricted",
      "oracle_procedure_creation_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "5.2.11",
    "title": "Ensure 'ALTER SYSTEM' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database ALTER SYSTEM privilege allows the designated user to dynamically alter the instance's running operations. Unauthorized grantees should not have that privilege.",
    "rationale": "The ALTER SYSTEM privilege can lead to severe problems, such as the instance's session being killed or the stopping of redo log recording, which would make transactions unrecoverable.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='ALTER SYSTEM' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='ALTER SYSTEM' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE ALTER SYSTEM FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "oracle_database_user_alter_system_revoked",
      "oracle_database_grantee_alter_system_restricted",
      "oracle_database_privilege_alter_system_unauthorized_revoked",
      "oracle_database_system_privilege_grantee_authorized_only",
      "oracle_database_alter_system_privilege_minimal_grantees"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "5.2.12",
    "title": "Ensure 'CREATE ANY LIBRARY' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database CREATE ANY LIBRARY privilege allows the designated user to create objects that are associated to the shared libraries. Unauthorized grantees should not have that privilege.",
    "rationale": "The CREATE ANY LIBRARY privilege can allow the creation of numerous library-associated objects and potentially corrupt the libraries' integrity.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='CREATE ANY LIBRARY' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='CREATE ANY LIBRARY' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE CREATE ANY LIBRARY FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html Additional Information: Oracle has two identical privileges: CREATE LIBRARY and CREATE ANY LIBRARY.",
    "function_names": [
      "oracle_database_library_create_no_unauthorized_grantee",
      "oracle_privilege_library_create_restricted",
      "oracle_grantee_library_create_revoked",
      "oracle_library_create_privilege_authorized_only",
      "oracle_database_grantee_library_create_denied"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html Additional Information: Oracle has two identical privileges: CREATE LIBRARY and CREATE ANY LIBRARY."
  },
  {
    "id": "5.2.13",
    "title": "Ensure 'CREATE LIBRARY' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database CREATE LIBRARY privilege allows the designated user to create objects that are associated to the shared libraries. Unauthorized grantees should not have that privilege.",
    "rationale": "The CREATE LIBRARY privilege can allow the creation of numerous library-associated objects and potentially corrupt the libraries' integrity.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='CREATE LIBRARY' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='CREATE LIBRARY' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE CREATE LIBRARY FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html Additional Information: Oracle has two identical privileges: CREATE LIBRARY and CREATE ANY LIBRARY.",
    "function_names": [
      "oracle_database_library_create_revoked_unauthorized_grantee",
      "oracle_database_privilege_create_library_restricted",
      "oracle_database_grantee_library_create_unauthorized_revoked",
      "oracle_database_library_create_privilege_no_unauthorized_access",
      "oracle_database_unauthorized_grantee_library_create_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html Additional Information: Oracle has two identical privileges: CREATE LIBRARY and CREATE ANY LIBRARY."
  },
  {
    "id": "5.2.14",
    "title": "Ensure 'GRANT ANY OBJECT PRIVILEGE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database GRANT ANY OBJECT PRIVILEGE keyword provides the grantee the capability to grant access to any single or multiple combinations of objects to any grantee in the catalog of the database. Unauthorized grantees should not have that keyword assigned to them.",
    "rationale": "The GRANT ANY OBJECT PRIVILEGE capability can allow an unauthorized user to potentially access or change confidential data, or damage the data catalog due to potential complete instance access.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='GRANT ANY OBJECT PRIVILEGE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='GRANT ANY OBJECT PRIVILEGE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE GRANT ANY OBJECT PRIVILEGE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.2.15",
    "title": "Ensure 'GRANT ANY ROLE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database GRANT ANY ROLE keyword provides the grantee the capability to grant any single role to any grantee in the catalog of the database. Unauthorized grantees should not have that keyword assigned to them.",
    "rationale": "The GRANT ANY ROLE capability can allow an unauthorized user to potentially access or change confidential data or damage the data catalog due to potential complete instance access.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='GRANT ANY ROLE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='GRANT ANY ROLE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE GRANT ANY ROLE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_role_grant_any_role_revoked",
      "database_role_grant_any_role_restricted",
      "database_role_grant_any_role_unauthorized_revoked",
      "database_role_grant_any_role_authorized_only",
      "database_role_grant_any_role_minimal_privileges",
      "database_role_grant_any_role_least_privilege",
      "database_role_grant_any_role_no_unauthorized_grantees"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.2.16",
    "title": "Ensure 'GRANT ANY PRIVILEGE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database GRANT ANY PRIVILEGE keyword provides the grantee the capability to grant any single privilege to any item in the catalog of the database. Unauthorized grantees should not have that privilege.",
    "rationale": "The GRANT ANY PRIVILEGE capability can allow an unauthorized user to potentially access or change confidential data or damage the data catalog due to potential complete instance access.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE FROM DBA_SYS_PRIVS WHERE PRIVILEGE='GRANT ANY PRIVILEGE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, PRIVILEGE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_SYS_PRIVS A WHERE PRIVILEGE='GRANT ANY PRIVILEGE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE GRANT ANY PRIVILEGE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_grantee_no_grant_any_privilege",
      "oracle_database_privilege_grantee_authorized",
      "oracle_database_grant_any_privilege_revoked",
      "oracle_database_grantee_privilege_restricted",
      "oracle_database_privilege_grantee_audited"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.3.1",
    "title": "Ensure 'SELECT_CATALOG_ROLE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database SELECT_CATALOG_ROLE provides SELECT privileges on all data dictionary views held in the SYS schema. Unauthorized grantees should not have that role.",
    "rationale": "Permitting unauthorized access to the SELECT_CATALOG_ROLE can allow the disclosure of all dictionary data.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE='SELECT_CATALOG_ROLE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, GRANTED_ROLE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_ROLE_PRIVS A WHERE GRANTED_ROLE='SELECT_CATALOG_ROLE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE SELECT_CATALOG_ROLE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.3.2",
    "title": "Ensure 'EXECUTE_CATALOG_ROLE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database EXECUTE_CATALOG_ROLE provides EXECUTE privileges for a number of packages and procedures in the data dictionary in the SYS schema. Unauthorized grantees should not have that role.",
    "rationale": "Permitting unauthorized access to the EXECUTE_CATALOG_ROLE can allow the disruption of operations by initialization of rogue procedures, this capability should be restricted according to the needs of the organization.",
    "audit": "Non multi-tenant or pluggable database only : To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE='EXECUTE_CATALOG_ROLE' AND GRANTEE NOT IN (SELECT USERNAME FROM DBA_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM DBA_ROLES WHERE ORACLE_MAINTAINED='Y'); Multi-tenant in the container database : This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT GRANTEE, GRANTED_ROLE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_ROLE_PRIVS A WHERE GRANTED_ROLE='EXECUTE_CATALOG_ROLE' AND GRANTEE NOT IN (SELECT USERNAME FROM CDB_USERS WHERE ORACLE_MAINTAINED='Y') AND GRANTEE NOT IN (SELECT ROLE FROM CDB_ROLES WHERE ORACLE_MAINTAINED='Y'); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE EXECUTE_CATALOG_ROLE FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_execute_catalog_role_revoked",
      "oracle_database_execute_catalog_role_no_unauthorized_grantee",
      "oracle_database_execute_catalog_role_restricted",
      "oracle_database_execute_catalog_role_authorized_only",
      "oracle_database_execute_catalog_role_no_privilege_escalation"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.3.3",
    "title": "Ensure 'DBA' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database DBA role is the default database administrator role provided for the allocation of administrative privileges. Unauthorized grantees should not have that role.",
    "rationale": "Assignment of the DBA role to an ordinary user can provide a great number of unnecessary privileges to that user and open the door to data breaches, integrity violations, and denial-of-service conditions.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT 'GRANT' AS PATH, GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DBA' AND GRANTEE NOT IN ('SYS', 'SYSTEM') UNION SELECT 'PROXY', PROXY || '-' || CLIENT, 'DBA' FROM DBA_PROXIES WHERE CLIENT IN (SELECT GRANTEE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'DBA'); Multi-tenant in the container database : This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT 'GRANT' AS PATH, GRANTEE, GRANTED_ROLE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) CON FROM CDB_ROLE_PRIVS A WHERE GRANTED_ROLE='DBA' AND GRANTEE NOT IN ('SYS', 'SYSTEM') UNION SELECT 'PROXY', PROXY || '-' || CLIENT, 'DBA', DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) CON FROM CDB_PROXIES A WHERE CLIENT IN (SELECT GRANTEE FROM CDB_ROLE_PRIVS B WHERE GRANTED_ROLE = 'DBA' AND A.CON_ID = B.CON_ID); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE DBA FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_dba_revoked",
      "database_role_grantee_authorized",
      "database_privilege_dba_restricted",
      "database_user_unauthorized_dba_removed",
      "database_role_dba_no_unauthorized_grantees"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "5.3.4",
    "title": "Ensure AUDIT_ADMIN' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database AUDIT_ADMIN enables you to create unified and fine-grained audit policies, use the AUDIT and NOAUDIT SQL statements, view audit data, and manage the audit trail administration. Grant this role only to trusted users. Unauthorized grantees should not have this role.",
    "rationale": "Assignment of the AUDIT_ADMIN role to an ordinary user can provide a great number of unnecessary privileges to that user and open the door to data breaches, integrity violations, and denial-of-service conditions.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT 'GRANT' AS PATH, GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'AUDIT_ADMIN' AND GRANTEE NOT IN ('SYS', 'SYSTEM') UNION SELECT 'PROXY', PROXY || '-' || CLIENT, 'AUDIT_ADMIN' FROM DBA_PROXIES WHERE CLIENT IN (SELECT GRANTEE FROM DBA_ROLE_PRIVS WHERE GRANTED_ROLE = 'AUDIT_ADMIN'); Multi-tenant in the container database : This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  SELECT 'GRANT' AS PATH, GRANTEE, GRANTED_ROLE, DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) CON FROM CDB_ROLE_PRIVS A WHERE GRANTED_ROLE='AUDIT_ADMIN' AND GRANTEE NOT IN ('SYS', 'SYSTEM') UNION SELECT 'PROXY', PROXY || '-' || CLIENT, 'AUDIT_ADMIN', DECODE (A.CON_ID,0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) CON FROM CDB_PROXIES A WHERE CLIENT IN (SELECT GRANTEE FROM CDB_ROLE_PRIVS B WHERE GRANTED_ROLE = 'AUDIT_ADMIN' AND A.CON_ID = B.CON_ID); Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE AUDIT_ADMIN FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_audit_admin_revoked_from_unauthorized_grantee",
      "oracle_database_audit_admin_no_unauthorized_access",
      "oracle_database_audit_admin_restricted_to_trusted_users",
      "oracle_database_audit_admin_grantee_authorized_only",
      "oracle_database_audit_admin_no_unauthorized_grants"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing \u2022  Level 1 - RDBMS using Unified Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-privilege-and-role-authorization.html"
  },
  {
    "id": "6.1.1",
    "title": "Ensure the 'USER' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The USER object allows for creating accounts that can interact with the database according to the roles and privileges allotted to the account. It may also own database objects. Enabling the audit option causes auditing of all activities and requests to create, drop or alter a user, including a user changing their own password. (The latter is not audited by audit ALTER USER.)",
    "rationale": "Any unauthorized attempts to create, drop or alter a user should cause concern, whether successful or not. Auditing can also be useful in forensics if an account is compromised, and auditing is mandated by many common security initiatives. An abnormally high number of these activities in a given period might be worth investigation. Any failed attempt to drop a user or create a user may be worth further review.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='USER'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='USER';  Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT USER;",
    "function_names": [
      "database_user_audit_enabled",
      "database_user_activity_logging_enabled",
      "database_user_privilege_change_audited",
      "database_user_creation_audited",
      "database_user_modification_audited",
      "database_user_deletion_audited",
      "database_user_password_change_audited"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.2",
    "title": "Ensure the 'ROLE' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The ROLE object allows for the creation of a set of privileges that can be granted to users or other roles. Enabling the audit option causes auditing of all attempts, successful or not, to create, drop, alter or set roles.",
    "rationale": "Roles are a key database security infrastructure component. Any attempt to create, drop or alter a role should be audited. This statement auditing option also audits attempts, successful or not, to set a role in a session. Any unauthorized attempts to create, drop or alter a role may be worthy of investigation. Attempts to set a role by users without the role privilege may warrant investigation.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='ROLE'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='ROLE'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT ROLE; Additional Information: This option does not audit role grants and revokes.",
    "function_names": [
      "database_role_audit_enabled",
      "database_role_audit_logging_enabled",
      "database_role_privilege_audit_enabled",
      "database_role_creation_audit_enabled",
      "database_role_modification_audit_enabled",
      "database_role_deletion_audit_enabled",
      "database_role_operation_audit_enabled",
      "database_role_all_actions_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.3",
    "title": "Ensure the 'SYSTEM GRANT' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "Enabling the audit option for the SYSTEM GRANT object causes auditing of any attempt, successful or not, to grant or revoke any system privilege or role, regardless of privilege held by the user attempting the operation.",
    "rationale": "Logging of all grant and revokes (roles and system privileges) can provide forensic evidence about a pattern of suspect/unauthorized activities. Any unauthorized attempt may be cause for further investigation.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='SYSTEM GRANT'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='SYSTEM GRANT'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT SYSTEM GRANT;",
    "function_names": [
      "database_audit_system_grant_enabled",
      "database_audit_privilege_grant_logging_enabled",
      "database_audit_role_grant_attempts_logged",
      "database_audit_system_privilege_changes_tracked",
      "database_audit_grant_revoke_operations_monitored"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.4",
    "title": "Ensure the 'PROFILE' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The PROFILE object allows for the creation of a set of database resource limits that can be assigned to a user, so that that user cannot exceed those resource limitations. Enabling the audit option causes auditing of all attempts, successful or not, to create, drop or alter any profile.",
    "rationale": "As profiles are part of the database security infrastructure, auditing the creation, modification, and deletion of profiles is recommended.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PROFILE'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PROFILE'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT PROFILE; Additional Information: The statement auditing option audit PROFILE audits everything that the three privilege audits audit CREATE PROFILE, audit DROP PROFILE and audit ALTER PROFILE do, but also audits: 1. Attempts to create a profile by a user without the CREATE PROFILE system privilege. 2. Attempts to drop a profile by a user without the DROP PROFILE system privilege 3. Attempts to alter a profile by a user without the ALTER PROFILE system privilege.",
    "function_names": [
      "database_profile_audit_enabled",
      "database_profile_audit_logging_enabled",
      "database_profile_audit_all_actions",
      "database_profile_audit_creation_enabled",
      "database_profile_audit_modification_enabled",
      "database_profile_audit_deletion_enabled",
      "database_profile_audit_all_events_enabled",
      "database_profile_audit_comprehensive_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.5",
    "title": "Ensure the 'DATABASE LINK' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "Enabling the audit option for the DATABASE LINK object causes all activities on database links to be audited.",
    "rationale": "As the logging of user activities involving the creation or dropping of a DATABASE LINK can provide forensic evidence about a pattern of unauthorized activities, the audit capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='DATABASE LINK'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='DATABASE LINK'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT DATABASE LINK; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "database_audit_option_database_link_enabled",
      "database_audit_database_link_audit_enabled",
      "database_audit_database_link_logging_enabled",
      "database_audit_database_link_monitoring_enabled",
      "database_audit_database_link_audit_active"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "6.1.6",
    "title": "Ensure the 'PUBLIC DATABASE LINK' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The PUBLIC DATABASE LINK object allows for the creation of a public link for an application-based \"user\" to access the database for connections/session creation. Enabling the audit option causes all user activities involving the creation, alteration, or dropping of public links to be audited.",
    "rationale": "As the logging of user activities involving the creation, alteration, or dropping of a PUBLIC DATABASE LINK can provide forensic evidence about a pattern of unauthorized activities, the audit capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PUBLIC DATABASE LINK'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PUBLIC DATABASE LINK'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT PUBLIC DATABASE LINK;",
    "function_names": [
      "database_public_link_audit_enabled",
      "database_link_public_audit_enabled",
      "database_link_audit_public_enabled",
      "database_audit_public_link_enabled",
      "audit_database_public_link_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.7",
    "title": "Ensure the 'PUBLIC SYNONYM' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The PUBLIC SYNONYM object allows for the creation of an alternate description of an object. Public synonyms are accessible by all users that have the appropriate privileges to the underlying object. Enabling the audit option causes all user activities involving the creation or dropping of public synonyms to be audited.",
    "rationale": "As the logging of user activities involving the creation or dropping of a PUBLIC SYNONYM can provide forensic evidence about a pattern of unauthorized activities, the audit capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PUBLIC SYNONYM'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PUBLIC SYNONYM'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT PUBLIC SYNONYM;",
    "function_names": [
      "database_public_synonym_audit_enabled",
      "database_public_synonym_audit_logging_enabled",
      "database_public_synonym_audit_all_actions",
      "database_public_synonym_audit_creation_dropping",
      "database_public_synonym_audit_all_users"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.8",
    "title": "Ensure the 'SYNONYM' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The SYNONYM operation allows for the creation of an alternative name for a database object such as a Java class schema object, materialized view, operator, package, procedure, sequence, stored function, table, view, user-defined object type, or even another synonym. This synonym puts a dependency on its target and is rendered invalid if the target object is changed/dropped. Enabling the audit option causes all user activities involving the creation or dropping of synonyms to be audited.",
    "rationale": "As the logging of user activities involving the creation or dropping of a SYNONYM can provide forensic evidence about a pattern of suspect/unauthorized activities, the audit capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='SYNONYM'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='SYNONYM';  Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT SYNONYM; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "database_audit_option_synonym_enabled",
      "database_audit_option_synonym_logging_enabled",
      "database_audit_option_synonym_operations_enabled",
      "database_audit_option_synonym_dependency_tracking_enabled",
      "database_audit_option_synonym_activity_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "6.1.9",
    "title": "Ensure the 'DIRECTORY' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The DIRECTORY object allows for the creation of a directory object that specifies an alias for a directory on the server file system, where the external binary file LOBs (BFILEs)/ table data are located. Enabling this audit option causes all user activities involving the creation or dropping of a directory alias to be audited.",
    "rationale": "As the logging of user activities involving the creation or dropping of a DIRECTORY can provide forensic evidence about a pattern of unauthorized activities, the audit capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='DIRECTORY'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='DIRECTORY'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT DIRECTORY; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "database_directory_audit_enabled",
      "database_directory_audit_logging_enabled",
      "database_directory_audit_activity_tracked",
      "database_directory_audit_creation_dropping_logged",
      "database_directory_audit_all_operations_logged"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "6.1.10",
    "title": "Ensure the 'SELECT ANY DICTIONARY' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The SELECT ANY DICTIONARY capability allows the user to view the definitions of all schema objects in the database. Enabling the audit option causes all user activities involving this capability to be audited.",
    "rationale": "As the logging of user activities involving the capability to access the description of all schema objects in the database can provide forensic evidence about a pattern of unauthorized activities, the audit capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='SELECT ANY DICTIONARY'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='SELECT ANY DICTIONARY'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT SELECT ANY DICTIONARY; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html",
    "function_names": [
      "database_audit_select_any_dictionary_enabled",
      "database_audit_select_any_dictionary_logging_enabled",
      "database_audit_select_any_dictionary_monitoring_enabled",
      "database_audit_select_any_dictionary_tracking_enabled",
      "database_audit_select_any_dictionary_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/19/dbseg/configuring-audit-policies.html"
  },
  {
    "id": "6.1.11",
    "title": "Ensure the 'GRANT ANY OBJECT PRIVILEGE' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "GRANT ANY OBJECT PRIVILEGE allows the user to grant or revoke any object privilege, which includes privileges on tables, directories, mining models, etc. Enabling this audit option causes auditing of all uses of that privilege.",
    "rationale": "Logging of privilege grants that can lead to the creation, alteration, or deletion of critical data, the modification of objects, object privilege propagation and other such activities can be critical to forensic investigations.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='GRANT ANY OBJECT PRIVILEGE'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='GRANT ANY OBJECT PRIVILEGE'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this needs to be done in both container and pluggable database, you must connect to both places to do the audit statement. AUDIT GRANT ANY OBJECT PRIVILEGE; Additional Information: This does NOT audit all attempts to grant or revoke object privileges since this can also be done by anyone who was granted an object privilege with the grant option. Also, this never creates an audit record for anyone who does not hold the GRANT ANY OBJECT PRIVILEGE system privilege. Therefore, many attempts, successful or not, to grant and revoke object privileges are not audited by this.",
    "function_names": [
      "database_audit_grant_any_object_privilege_enabled",
      "database_audit_privilege_grant_tracking_enabled",
      "database_audit_object_privilege_changes_enabled",
      "database_audit_privilege_escalation_monitoring_enabled",
      "database_audit_sensitive_privilege_usage_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.12",
    "title": "Ensure the 'GRANT ANY PRIVILEGE' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "GRANT ANY PRIVILEGE allows a user to grant any system privilege, including the most powerful privileges typically available only to administrators - to change the security infrastructure, to drop/add/modify users and more.",
    "rationale": "Auditing the use of this privilege is part of a comprehensive auditing policy that can help in detecting issues and can be useful in forensics.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='GRANT ANY PRIVILEGE'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='GRANT ANY PRIVILEGE'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT GRANT ANY PRIVILEGE; Additional Information: This does NOT audit all attempts to grant or revoke system privileges since this can also be done by anyone who was granted a system privilege with the admin option. Also, this never creates an audit record for anyone who does not hold the GRANT ANY PRIVILEGE system privilege. Thus, many attempts, successful or not, to grant and revoke system privileges are not audited by this.",
    "function_names": [
      "database_audit_grant_any_privilege_enabled",
      "database_audit_privilege_grant_monitoring_enabled",
      "database_audit_high_risk_privilege_tracking_enabled",
      "database_audit_admin_privilege_grant_logging_enabled",
      "database_audit_privilege_escalation_monitoring_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.13",
    "title": "Ensure the 'DROP ANY PROCEDURE' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The AUDIT DROP ANY PROCEDURE command is auditing the dropping of procedures. Enabling the option causes auditing of all such activities.",
    "rationale": "Dropping procedures of another user could be part of a privilege escalation exploit and should be audited.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='DROP ANY PROCEDURE'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='DROP ANY PROCEDURE'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable.  AUDIT DROP ANY PROCEDURE;",
    "function_names": [
      "database_audit_drop_procedure_enabled",
      "database_audit_drop_any_procedure_enabled",
      "database_audit_drop_procedure_logging_enabled",
      "database_audit_drop_any_procedure_logging_enabled",
      "database_audit_drop_procedure_active",
      "database_audit_drop_any_procedure_active"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.14",
    "title": "Ensure the 'ALL' Audit Option on 'SYS.AUD$' Is Enabled",
    "assessment": "Automated",
    "description": "The logging of attempts to alter the audit trail in the SYS.AUD$ table (open for read/update/delete/view) will provide a record of any activities that may indicate unauthorized attempts to access the audit trail. Enabling the audit option will cause these activities to be audited.",
    "rationale": "As the logging of attempts to alter the SYS.AUD$ table can provide forensic evidence of the initiation of a pattern of unauthorized activities, this logging capability should be enabled.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT * FROM DBA_OBJ_AUDIT_OPTS WHERE OBJECT_NAME='AUD$' AND ALT='A/A' AND AUD='A/A' AND COM='A/A' AND DEL='A/A' AND GRA='A/A' AND IND='A/A' AND INS='A/A' AND LOC='A/A' AND REN='A/A' AND SEL='A/A' AND UPD='A/A' AND FBK='A/A'; Multi-tenant in the container database : This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement.  SELECT * FROM CDB_OBJ_AUDIT_OPTS WHERE OBJECT_NAME='AUD$' AND ALT='A/A' AND AUD='A/A' AND COM='A/A' AND DEL='A/A' AND GRA='A/A' AND IND='A/A' AND INS='A/A' AND LOC='A/A' AND REN='A/A' AND SEL='A/A' AND UPD='A/A' AND FBK='A/A'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT ALL ON SYS.AUD$ BY ACCESS;",
    "function_names": [
      "database_audit_trail_all_enabled",
      "database_audit_trail_sys_aud_enabled",
      "database_audit_trail_modification_logging_enabled",
      "database_audit_trail_read_write_logging_enabled",
      "database_audit_trail_full_access_logging_enabled",
      "database_audit_trail_all_operations_logging_enabled",
      "database_audit_trail_sys_aud_all_enabled",
      "database_audit_trail_unauthorized_access_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.15",
    "title": "Ensure the 'PROCEDURE' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "In this statement audit, PROCEDURE means any procedure, function, package or library. Enabling this audit option causes any attempt, successful or not, to create or drop any of these types of objects to be audited, regardless of privilege or lack thereof. Java schema objects (sources, classes, and resources) are considered the same as procedures for the purposes of auditing SQL statements.",
    "rationale": "Any unauthorized attempts to create or drop a procedure in another's schema should cause concern, whether successful or not. Changes to critical stored code can dramatically change the behavior of the application and produce serious security consequences, including enabling privilege escalation and introducing SQL injection vulnerabilities. Audit records of such changes can be helpful in forensics.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PROCEDURE'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='PROCEDURE';  Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT PROCEDURE; Additional Information: Not all auditing options work alike. In particular, the statement auditing option audit PROCEDURE does indeed audit create and drop library as well as all types of procedures and java schema objects. However, privilege audits do not work this way. So, for example, none of audit CREATE ANY PROCEDURE, audit DROP ANY PROCEDURE, or audit CREATE PROCEDURE will audit create or drop library activities. In statement auditing, PROCEDURE has a larger scope than in privilege auditing, where it is specific to functions, packages and procedures, but excludes libraries and perhaps other object types. Audit PROCEDURE does not audit altering procedures, either in your own schema or in another via the ALTER ANY PROCEDURE system privilege. There seems to be no statement audit that is a better replacement for Audit ALTER ANY PROCEDURE, but beware that will not create any audit records for users that do not have the privilege. Thus, attempts to alter procedures in one's own schema are never audited, and attempts to alter procedures in another's schema that fail for lack of the ALTER ANY PROCEDURE privilege are not audited. This is simply a weakness in the current state of Oracle auditing. Fortunately, though, all that the ALTER command can be used for regarding procedures, functions, packages and libraries is compile options, so the inability to comprehensively audit alter procedure activities and requests is not as bad as it would be for other object types (USER, PROFILE, etc.)",
    "function_names": [
      "database_audit_procedure_enabled",
      "database_audit_procedure_all_objects",
      "database_audit_procedure_creation_drops",
      "database_audit_procedure_java_objects_included",
      "database_audit_procedure_all_attempts_logged"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.16",
    "title": "Ensure the 'ALTER SYSTEM' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "ALTER SYSTEM allows one to change instance settings, including security settings and auditing options. Additionally, ALTER SYSTEM can be used to run operating system commands using undocumented Oracle functionality. Enabling the audit option will audit all attempts to perform ALTER SYSTEM, whether successful or not and regardless of whether or not the ALTER SYSTEM privilege is held by the user attempting the action.",
    "rationale": "Any unauthorized attempt to alter the system should be cause for concern. Alterations outside of some specified maintenance window may be of concern. In forensics, these audit records could be quite useful.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='ALTER SYSTEM'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='ALTER SYSTEM'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT ALTER SYSTEM;",
    "function_names": [
      "database_audit_alter_system_enabled",
      "database_audit_alter_system_logging_enabled",
      "database_audit_alter_system_all_actions",
      "database_audit_alter_system_privilege_check",
      "database_audit_alter_system_os_command_protection"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.17",
    "title": "Ensure the 'TRIGGER' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "A TRIGGER may be used to modify DML actions or invoke other (recursive) actions when some types of user-initiated actions occur. Enabling this audit option will cause auditing of any attempt, successful or not, to create, drop, enable or disable any schema trigger in any schema regardless of privilege or lack thereof. For enabling and disabling a trigger, it covers both ALTER TRIGGER and ALTER TABLE.",
    "rationale": "Triggers are often part of schema security, data validation and other critical constraints upon actions and data. A trigger in another schema may be used to escalate privileges, redirect operations, transform data and perform other sorts of perhaps undesired actions. Any unauthorized attempt to create, drop or alter a trigger in another schema may be cause for investigation.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='TRIGGER'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='TRIGGER';  Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT TRIGGER; Additional Information: There is no current CIS recommendation to audit the use of the system privilege CREATE TRIGGER, as there is for CREATE SYNONYM, CREATE PROCEDURE and some other types of objects, so this is actually a scope escalation also - to audit such actions in one's own schema. However, this is the only way to comprehensively audit things like attempts to create, drop or alter triggers in another's schema if the user attempting to operation does not hold the required ANY privilege - and these are exactly the sorts of things that should raise a large red flag. The statement auditing option audit TRIGGER audits almost everything that the three privilege audits audit CREATE ANY TRIGGER, audit ALTER ANY TRIGGER and audit DROP ANY TRIGGER do, but also audits: 1. Statements to create, drop, enable or disable a trigger in the user's own schema. 2. Attempts to create a trigger by a user without the CREATE TRIGGER system privilege. 3. Attempts to create a trigger in another schema by users without the CREATE ANY TRIGGER privilege. 4. Attempts to drop a trigger in another schema by users without the DROP ANY TRIGGER privilege. 5. Attempts to disable or enable a trigger in another schema by users without the ALTER ANY TRIGGER privilege. The one thing is audited by any of the three privilege audits that is not audited by this is ALTER TRIGGER ...COMPILE if the trigger is in another's schema, which is audited by audit ALTER ANY TRIGGER, but only if the user attempting the alteration actually holds the ALTER ANY TRIGGER system privilege. Audit TRIGGER only audits ALTER TABLE or ALTER TRIGGER statements used to enable or disable triggers. It does not audit ALTER TRIGGER or ALTER TABLE statements used only with compile options.",
    "function_names": [
      "database_trigger_audit_enabled",
      "database_trigger_audit_logging_enabled",
      "database_schema_trigger_audit_enabled",
      "database_dml_trigger_audit_enabled",
      "database_trigger_alter_audit_enabled",
      "database_trigger_creation_audit_enabled",
      "database_trigger_modification_audit_enabled",
      "database_trigger_all_actions_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.1.18",
    "title": "Ensure the 'CREATE SESSION' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "Enabling this audit option will cause auditing of all attempts to connect to the database, whether successful or not, as well as audit session disconnects/logoffs. The commands to audit SESSION, CONNECT or CREATE SESSION all accomplish the same thing - they initiate statement auditing of the connect statement used to create a database session.",
    "rationale": "Auditing attempts to connect to the database is basic and mandated by most security initiatives. Any attempt to logon to a locked account, failed attempts to logon to default accounts or an unusually high number of failed logon attempts of any sort, for any user, in a particular time period may indicate an intrusion attempt. In forensics, the logon record may be first in a chain of evidence and contain information found in no other type of audit record for the session. Logon and logoff in the audit trail define the period and duration of the session.",
    "audit": "Non multi-tenant or pluggable database only: To assess this recommendation, execute the following SQL statement. SELECT AUDIT_OPTION,SUCCESS,FAILURE FROM DBA_STMT_AUDIT_OPTS WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='CREATE SESSION'; Multi-tenant in the container database: This query will also give you the name of the CDB/PDB that has auditing turned on. To assess this recommendation, execute the following SQL statement.  SELECT AUDIT_OPTION,SUCCESS,FAILURE, DECODE (A.CON_ID, 0,(SELECT NAME FROM V$DATABASE), 1,(SELECT NAME FROM V$DATABASE), (SELECT NAME FROM V$PDBS B WHERE A.CON_ID = B.CON_ID)) FROM CDB_STMT_AUDIT_OPTS A WHERE USER_NAME IS NULL AND PROXY_NAME IS NULL AND SUCCESS = 'BY ACCESS' AND FAILURE = 'BY ACCESS' AND AUDIT_OPTION='CREATE SESSION'; Lack of results implies a finding.",
    "remediation": "To remediate this setting, execute the following SQL statement in either the non multi- tenant or container database, it does NOT need run in the pluggable. AUDIT SESSION; Additional Information: Although listed in the documentation as a privilege audit, audit CREATE SESSION actually audits the CONNECT statement. This is evidenced by the undocumented audit CONNECT which has the same result as audit SESSION or audit CREATE SESSION. There is no system privilege named either SESSION or CONNECT (CONNECT is a role, not a system privilege). Also, it behaves as statement auditing rather than privilege auditing in that it audits all attempts to create a session, even if the user does not hold the CREATE SESSION system privilege.",
    "function_names": [
      "database_audit_create_session_enabled",
      "database_audit_session_logging_enabled",
      "database_audit_connect_attempts_logged",
      "database_audit_disconnect_events_logged",
      "database_audit_session_statement_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Traditional Auditing"
  },
  {
    "id": "6.2.1",
    "title": "Ensure the 'CREATE USER' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "The CREATE USER statement is used to create Oracle database accounts and assign database properties to them. Enabling this unified action audit causes logging of all CREATE USER statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create user accounts, whether successful or unsuccessful, may provide clues and forensic evidences about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all activities involving CREATE USER.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('CREATE USER' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE USER' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL ; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE USER; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_user_create_audit_enabled",
      "database_audit_create_user_logging_enabled",
      "oracle_audit_user_creation_enabled",
      "database_audit_user_creation_logging_enabled",
      "oracle_user_creation_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.2",
    "title": "Ensure the 'ALTER USER' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "The ALTER USER statement is used to change database users\u2019 password, lock accounts, and expire passwords. In addition, this statement is used to change database properties of user accounts such as database profiles, default and temporary tablespaces, and tablespace quotas. This unified audit action enables logging of all ALTER USER statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to alter user accounts, whether successful or unsuccessful, may provide clues and forensic evidences about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all activities involving ALTER USER.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('ALTER USER' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER USER' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER USER; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_user_alter_action_audit_enabled",
      "database_user_alter_action_logging_enabled",
      "database_audit_alter_user_tracking_enabled",
      "database_user_modification_audit_enabled",
      "database_alter_user_action_monitoring_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.3",
    "title": "Ensure the 'DROP USER' Audit Option Is Enabled",
    "assessment": "Automated",
    "description": "The DROP USER statement is used to drop Oracle database accounts and schemas associated with them. Enabling this unified action audit enables logging of all DROP USER statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to drop user, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all activities involving DROP USER.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('DROP USER' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP USER' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP USER; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_user_drop_audit_enabled",
      "database_user_drop_audit_logging_enabled",
      "database_user_drop_audit_unified_enabled",
      "database_user_drop_audit_all_events_enabled",
      "database_user_drop_audit_success_failure_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.4",
    "title": "Ensure the 'CREATE ROLE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "An Oracle database role is a collection or set of privileges that can be granted to users or other roles. Roles may include system privileges, object privileges or other roles. Enabling this unified audit action enables logging of all CREATE ROLE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create roles, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving CREATE ROLE.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('CREATE ROLE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE ROLE' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE ROLE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_role_create_audit_enabled",
      "database_unified_audit_create_role_logging_enabled",
      "database_audit_policy_create_role_captured",
      "database_role_creation_audit_active",
      "database_audit_trail_create_role_included"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.5",
    "title": "Ensure the 'ALTER ROLE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "An Oracle database role is a collection or set of privileges that can be granted to users or other roles. Roles may include system privileges, object privileges or other roles. The ALTER ROLE statement is used to change the authorization needed to enable a role. Enabling this unified action audit causes logging of all ALTER ROLE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to alter roles, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving alteration of roles.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('ALTER ROLE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER ROLE' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL;  Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER ROLE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_role_alter_audit_enabled",
      "database_role_alter_audit_logging_enabled",
      "database_role_alter_audit_all_statements",
      "database_role_alter_audit_unified_action",
      "database_role_alter_audit_success_failure_logged"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.6",
    "title": "Ensure the 'DROP ROLE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "An Oracle database role is a collection or set of privileges that can be granted to users or other roles. Roles may include system privileges, object privileges or other roles. Enabling this unified audit action enables logging of all DROP ROLE statements, successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to drop roles, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving DROP ROLE.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('DROP ROLE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP ROLE' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP ROLE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_role_drop_audit_enabled",
      "database_unified_audit_drop_role_logging_enabled",
      "database_audit_drop_role_statement_logging_enabled",
      "database_role_privilege_drop_audit_enabled",
      "database_audit_policy_drop_role_included"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.7",
    "title": "Ensure the 'GRANT' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "GRANT statements are used to grant privileges to Oracle database users and roles, including the most powerful privileges and roles typically available to the database administrators. Enabling this unified action audit enables logging of all GRANT statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "With unauthorized grants and permissions, a malicious user may be able to change the security of the database, access/update confidential data, or compromise the integrity of the database. Logging and monitoring of all attempts to grant system privileges, object privileges or roles, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities as well as privilege escalation activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving GRANT.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('GRANT' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('GRANT' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL;  Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS GRANT; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_user_grant_audit_enabled",
      "database_role_grant_audit_enabled",
      "database_privilege_grant_audit_enabled",
      "database_unified_audit_grant_logging_enabled",
      "database_admin_privilege_grant_audit_enabled",
      "database_audit_policy_grant_actions_enabled",
      "database_security_audit_grant_statements_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.8",
    "title": "Ensure the 'REVOKE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "REVOKE statements are used to revoke privileges from Oracle database users and roles. Enabling this unified action audit enables logging of all REVOKE statements, successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to revoke system privileges, object privileges or roles, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving REVOKE.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('REVOKE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('REVOKE' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS REVOKE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_audit_revoke_action_enabled",
      "database_audit_revoke_logging_enabled",
      "database_audit_revoke_tracking_enabled",
      "database_audit_revoke_statement_enabled",
      "database_audit_revoke_privilege_enabled",
      "database_audit_revoke_unified_enabled",
      "database_audit_revoke_all_users_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.9",
    "title": "Ensure the 'CREATE PROFILE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database profiles are used to enforce resource usage limits and implement password policies such as password complexity rules and reuse restrictions. Enabling this unified action audit enables logging of all CREATE PROFILE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create profiles, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving creation of database profiles.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('CREATE PROFILE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE PROFILE') AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE PROFILE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_profile_create_audit_enabled",
      "database_audit_create_profile_logging_enabled",
      "oracle_audit_profile_creation_enabled",
      "database_unified_audit_create_profile_enabled",
      "database_profile_management_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.10",
    "title": "Ensure the 'ALTER PROFILE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database profiles are used to enforce resource usage limits and implement password policies such as password complexity rules and reuse restrictions. Enabling this unified action audit enables logging of all ALTER PROFILE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to alter profiles, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving alteration of database profiles.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('ALTER PROFILE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER PROFILE' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER PROFILE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_profile_alter_audit_enabled",
      "database_profile_alter_audit_logging_enabled",
      "database_profile_alter_audit_all_users",
      "database_profile_alter_audit_unified_action",
      "database_profile_alter_audit_success_failure_logged"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.11",
    "title": "Ensure the 'DROP PROFILE' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database profiles are used to enforce resource usage limits and implement password policies such as password complexity rules and reuse restrictions. Enabling this unified action audit enables logging of all DROP PROFILE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to drop profiles, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving dropping database profiles.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('DROP PROFILE' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP PROFILE' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP PROFILE; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_profile_drop_audit_enabled",
      "database_profile_drop_audit_logging_enabled",
      "database_unified_audit_drop_profile_enabled",
      "database_audit_drop_profile_all_users_enabled",
      "database_audit_drop_profile_statements_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.12",
    "title": "Ensure the 'CREATE DATABASE LINK' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database links are used to establish database-to-database connections to other databases. These connections are available without further authentication once the link is established. Enabling this unified action audit causes logging of all CREATE DATABASE and CREATE PUBLIC DATABASE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create database links, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving creation of database links.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('CREATE DATABASE LINK' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE DATABASE LINK' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE DATABASE LINK; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_link_create_audit_enabled",
      "database_link_audit_logging_enabled",
      "database_link_unified_audit_enabled",
      "database_link_creation_audited",
      "database_link_action_audit_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.13",
    "title": "Ensure the 'ALTER DATABASE LINK' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database links are used to establish database-to-database connections to other databases. These connections are always available without further authentication once the link is established. Enabling this unified action audit causes logging of all ALTER DATABASE and ALTER PUBLIC DATABASE statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to alter database links, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving alteration of database links.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('ALTER DATABASE LINK' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER DATABASE LINK' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL;  Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER DATABASE LINK; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_link_alter_audit_enabled",
      "database_link_unified_audit_enabled",
      "database_link_alter_action_audited",
      "database_link_alter_statement_logged",
      "database_link_audit_logging_enabled",
      "database_link_alter_privilege_audited",
      "database_link_security_audit_enabled",
      "database_link_alter_event_captured",
      "database_link_audit_policy_active",
      "database_link_alter_operation_audited"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.14",
    "title": "Ensure the 'DROP DATABASE LINK' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database links are used to establish database-to-database connections to other databases. These connections are always available without further authentication once the link is established. Enabling this unified action audit causes logging of all DROP DATABASE and DROP PUBLIC DATABASE, whether successful or unsuccessful, statements issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to drop database links, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving dropping database links.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('DROP DATABASE LINK' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP DATABASE LINK' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL;  Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP DATABASE LINK; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_link_drop_audit_enabled",
      "database_link_drop_audit_logging_enabled",
      "database_link_drop_audit_unified_action_enabled",
      "database_link_drop_audit_all_statements_enabled",
      "database_link_drop_audit_success_failure_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.15",
    "title": "Ensure the 'CREATE SYNONYM' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "An Oracle database synonym is used to create an alternative name for a database object such as table, view, procedure, java object or even another synonym, etc. Enabling this unified action audit causes logging of all CREATE SYNONYM and CREATE PUBLIC SYNONYM statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create synonyms, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving creation of synonyms or public synonyms.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'CREATE SYNONYM' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE SYNONYM' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL;  Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE SYNONYM; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_synonym_create_audit_enabled",
      "database_audit_create_synonym_logging_enabled",
      "oracle_audit_synonym_creation_logging_enabled",
      "database_audit_synonym_creation_tracking_enabled",
      "oracle_audit_create_synonym_statement_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.16",
    "title": "Ensure the 'ALTER SYNONYM' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "An Oracle database synonym is used to create an alternative name for a database object such as table, view, procedure, or java object, or even another synonym. Enabling this unified action audit causes logging of all ALTER SYNONYM and ALTER PUBLIC SYNONYM statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to alter synonyms, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving alteration of synonyms or public synonyms.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY('ALTER SYNONYM' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER SYNONYM' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL;  Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER SYNONYM; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_synonym_alter_audit_enabled",
      "oracle_audit_alter_synonym_logging_enabled",
      "database_audit_alter_synonym_tracking_enabled",
      "oracle_synonym_alter_audit_active",
      "database_audit_synonym_modification_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.17",
    "title": "Ensure the 'DROP SYNONYM' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "An Oracle database synonym is used to create an alternative name for a database object such as table, view, procedure, or java object, or even another synonym. Enabling his unified action audit causes logging of all DROP SYNONYM and DROP PUBLIC SYNONYM statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to drop synonyms, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving dropping of synonyms or public synonyms.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'DROP SYNONYM' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP SYNONYM' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP SYNONYM; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_synonym_drop_audit_enabled",
      "database_synonym_drop_public_audit_enabled",
      "database_unified_audit_drop_synonym_logging_enabled",
      "database_audit_drop_synonym_all_statements_enabled",
      "database_audit_drop_synonym_unified_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.18",
    "title": "Ensure the 'SELECT ANY DICTIONARY' Privilege Audit Is Enabled",
    "assessment": "Automated",
    "description": "The SELECT ANY DICTIONARY system privilege allows the user to view the definition of all schema objects in the database. It grants SELECT privileges on the data dictionary objects to the grantees, including SELECT on DBA_ views, V$ views, X$ views and underlying SYS tables such as TAB$ and OBJ$. This privilege also allows grantees to create stored objects such as procedures, packages and views on the underlying data dictionary objects. Please note that this privilege does not grant SELECT on tables with password hashes such as USER$, DEFAULT_PWD$, LINK$, and USER_HISTORY$. Enabling this audit causes logging of activities that exercise this privilege.",
    "rationale": "Logging and monitoring of all attempts to access a data dictionary, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving access to the database.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'SELECT ANY DICTIONARY' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('SELECT ANY DICTIONARY' ) AND AUD.AUDIT_OPTION_TYPE = 'SYSTEM PRIVILEGE' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL ; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD PRIVILEGES SELECT ANY DICTIONARY; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_privilege_select_any_dictionary_audit_enabled",
      "database_privilege_select_any_dictionary_audit_logging_enabled",
      "database_privilege_select_any_dictionary_audit_configured",
      "database_privilege_select_any_dictionary_audit_active",
      "database_privilege_select_any_dictionary_audit_monitoring_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.19",
    "title": "Ensure the 'AUDSYS.AUD$UNIFIED' Access Audit Is Enabled",
    "assessment": "Automated",
    "description": "The AUDSYS.AUD$UNIFIED holds audit trail records generated by the database. Enabling this audit action causes logging of all access attempts to the AUDSYS.AUD$UNIFIED, whether successful or unsuccessful, regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to access the AUDSYS.AUD$UNIFIED, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving access to this table.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'AUD$UNIFIED' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT OBJECT_NAME FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALL' ) AND AUD.AUDIT_OPTION_TYPE = 'OBJECT ACTION' AND AUD.OBJECT_SCHEMA = 'AUDSYS' AND AUD.OBJECT_NAME = 'AUD$UNIFIED' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.OBJECT_NAME WHERE E.OBJECT_NAME  IS NULL; Lack of results implies compliance.",
    "remediation": "For Oracle 12.2 and above, execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALL on AUDSYS.AUD$UNIFIED; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_audit_trail_access_logging_enabled",
      "database_audsys_audit_unified_access_enabled",
      "database_audit_unified_access_auditing_enabled",
      "database_audit_trail_access_auditing_enabled",
      "database_audsys_audit_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.20",
    "title": "Ensure the 'CREATE PROCEDURE/FUNCTION/PACKAGE/PACKAGE BODY' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database procedures, function, packages, and package bodies, which are stored within the database, are created to perform business functions and access database as defined by PL/SQL code and SQL statements contained within these objects. Enabling this unified action audit causes logging of all CREATE PROCEDURE, CREATE FUNCTION, CREATE PACKAGE and CREATE PACKAGE BODY statements, successful or unsuccessful, statements issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create procedures, functions, packages or package bodies, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving creation of procedures, functions, packages or package bodies.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'CREATE PROCEDURE','CREATE FUNCTION','CREATE PACKAGE','CREATE PACKAGE BODY' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE PROCEDURE','CREATE FUNCTION','CREATE PACKAGE','CREATE PACKAGE BODY' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE PROCEDURE, CREATE FUNCTION, CREATE PACKAGE, CREATE PACKAGE BODY; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_audit_create_procedure_enabled",
      "database_audit_create_function_enabled",
      "database_audit_create_package_enabled",
      "database_audit_create_package_body_enabled",
      "database_audit_plsql_actions_enabled",
      "database_audit_plsql_operations_logging_enabled",
      "database_audit_unified_action_enabled",
      "database_audit_privileged_statements_logged",
      "database_audit_all_create_statements_logged",
      "database_audit_plsql_code_execution_logged"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.21",
    "title": "Ensure the 'ALTER PROCEDURE/FUNCTION/PACKAGE/PACKAGE BODY' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database procedures, functions, packages, and package bodies, which are stored within the database, are created to carry out business functions and access database as defined by PL/SQL code and SQL statements contained within these objects. Enabling this unified action audit causes logging of all ALTER PROCEDURE, ALTER FUNCTION, ALTER PACKAGE and ALTER PACKAGE BODY statements, successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Unauthorized alteration of procedures, functions, packages or package bodies may impact critical business functions or compromise integrity of the database. Logging and monitoring of all attempts, whether successful or unsuccessful, to alter procedures, functions, packages or package bodies may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving alteration of procedures, functions, packages or package bodies.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'ALTER PROCEDURE','ALTER FUNCTION','ALTER PACKAGE','ALTER PACKAGE BODY' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER PROCEDURE','ALTER FUNCTION','ALTER PACKAGE','ALTER PACKAGE BODY' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER PROCEDURE, ALTER FUNCTION, ALTER PACKAGE, ALTER PACKAGE BODY; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "oracle_database_procedure_alter_audit_enabled",
      "oracle_database_function_alter_audit_enabled",
      "oracle_database_package_alter_audit_enabled",
      "oracle_database_package_body_alter_audit_enabled",
      "oracle_database_plsql_object_alter_audit_enabled",
      "oracle_database_unified_audit_alter_enabled",
      "oracle_database_audit_alter_statement_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.22",
    "title": "Ensure the 'DROP PROCEDURE/FUNCTION/PACKAGE/PACKAGE BODY' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database procedures, functions, packages, and package bodies, which are stored within the database, are created to carry out business functions and access database as defined by PL/SQL code and SQL statements contained within these objects. Enabling this unified action audit causes logging of all DROP PROCEDURE, DROP FUNCTION, DROP PACKAGE or DROP PACKAGE BODY statements, successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts, whether successful or unsuccessful, to drop procedures, functions, packages or package bodies may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving dropping procedures, functions, packages or package bodies.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'DROP PROCEDURE','DROP FUNCTION','DROP PACKAGE','DROP PACKAGE BODY' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP PROCEDURE','DROP FUNCTION','DROP PACKAGE','DROP PACKAGE BODY' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP PROCEDURE, DROP FUNCTION, DROP PACKAGE, DROP PACKAGE BODY; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "oracle_database_procedure_drop_audit_enabled",
      "oracle_database_function_drop_audit_enabled",
      "oracle_database_package_drop_audit_enabled",
      "oracle_database_package_body_drop_audit_enabled",
      "oracle_database_plsql_object_drop_audit_enabled_all_types"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.23",
    "title": "Ensure the 'ALTER SYSTEM' Action Audit is Enabled",
    "assessment": "Automated",
    "description": "The ALTER SYSTEM privilege allows the user to change instance settings which could impact security posture, performance or normal operation of the database. Additionally, the ALTER SYSTEM privilege may be used to run operating system commands using undocumented Oracle functionality. Enabling this unified audit action causes logging of activities that involve the exercise of this privilege, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to execute ALTER SYSTEM statements, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities that involve ALTER SYSTEM statements.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'ALTER SYSTEM' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER SYSTEM' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER SYSTEM; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_instance_alter_system_audit_enabled",
      "database_instance_alter_system_audit_logging_enabled",
      "database_instance_alter_system_audit_all_users",
      "database_instance_alter_system_audit_unified",
      "database_instance_alter_system_audit_success_failure_logged"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.24",
    "title": "Ensure the 'CREATE TRIGGER' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database triggers are executed automatically when specified conditions on the underlying objects occur. Trigger bodies contain the code, quite often to perform data validation, ensure data integrity/security or enforce critical constraints on allowable actions on data. Enabling this unified audit causes logging of all CREATE TRIGGER statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to create triggers, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving creation of triggers.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'CREATE TRIGGER' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('CREATE TRIGGER' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS CREATE TRIGGER; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "database_trigger_create_audit_enabled",
      "database_trigger_audit_logging_enabled",
      "database_trigger_creation_audit_active",
      "database_trigger_audit_unified_enabled",
      "database_trigger_audit_all_users_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.25",
    "title": "Ensure the 'ALTER TRIGGER' Action Audit IS Enabled",
    "assessment": "Automated",
    "description": "Oracle database triggers are executed automatically when specified conditions on the underlying objects occur. Trigger bodies contain the code, quite often to perform data validation, ensure data integrity/security or enforce critical constraints on allowable actions on data. Enabling this unified audit causes logging of all ALTER TRIGGER statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Unauthorized alteration of triggers may impact critical business functions or compromise integrity/security of the database. Logging and monitoring of all attempts to alter triggers, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving alteration of triggers.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'ALTER TRIGGER' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('ALTER TRIGGER' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS ALTER TRIGGER; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "oracle_database_trigger_alter_audit_enabled",
      "oracle_database_trigger_alter_audit_logging_enabled",
      "oracle_database_trigger_alter_audit_all_users",
      "oracle_database_trigger_alter_audit_unified_enabled",
      "oracle_database_trigger_alter_audit_statement_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.26",
    "title": "Ensure the 'DROP TRIGGER' Action Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database triggers are executed automatically when specified conditions on the underlying objects occur. Trigger bodies contain the code, quite often to perform data validation, ensure data integrity/security or enforce critical constraints on allowable actions on data. Enabling this unified audit causes logging of all DROP TRIGGER statements, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to drop triggers, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving dropping triggers.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'DROP TRIGGER' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('DROP TRIGGER' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS DROP TRIGGER; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "oracle_database_trigger_drop_audit_enabled",
      "oracle_database_trigger_drop_audit_logging_enabled",
      "oracle_database_trigger_drop_audit_unified_enabled",
      "oracle_database_trigger_drop_audit_all_users_enabled",
      "oracle_database_trigger_drop_audit_all_statements_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  },
  {
    "id": "6.2.27",
    "title": "Ensure the 'LOGON' AND 'LOGOFF' Actions Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database users log on to the database to perform their work. Enabling this unified audit causes logging of all LOGON actions, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to log into the database. In addition, LOGOFF action audit captures logoff activities. This audit action also captures logon/logoff to the open database by SYSDBA and SYSOPER.",
    "rationale": "Logging and monitoring of all attempts to logon to the database, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving LOGON and LOGOFF.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(AUDIT_OPTION) AS ( SELECT * FROM TABLE( DBMSOUTPUT_LINESARRAY( 'LOGON','LOGOFF' ) ) ), AUDIT_ENABLED AS ( SELECT DISTINCT AUDIT_OPTION FROM AUDIT_UNIFIED_POLICIES AUD WHERE AUD.AUDIT_OPTION IN ('LOGON','LOGOFF' ) AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT * FROM AUDIT_UNIFIED_ENABLED_POLICIES ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND  ENABLED.POLICY_NAME = AUD.POLICY_NAME) ) SELECT C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION WHERE E.AUDIT_OPTION IS NULL; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. ALTER AUDIT POLICY CIS_UNIFIED_AUDIT_POLICY ADD ACTIONS LOGON, LOGOFF; Note: If you do not have CIS_UNIFIED_AUDIT_POLICY, please create one using the CREATE AUDIT POLICY statement.",
    "function_names": [
      "oracle_database_audit_logon_enabled",
      "oracle_database_audit_logoff_enabled",
      "oracle_database_audit_logon_logoff_enabled",
      "oracle_database_audit_sysdba_logon_enabled",
      "oracle_database_audit_sysoper_logon_enabled",
      "oracle_database_audit_all_logon_actions_enabled",
      "oracle_database_audit_all_logoff_actions_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - RDBMS using Unified Auditing"
  }
]