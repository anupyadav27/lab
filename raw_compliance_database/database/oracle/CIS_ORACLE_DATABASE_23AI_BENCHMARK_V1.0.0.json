[
  {
    "id": "1.1",
    "title": "Ensure The Appropriate Version/Patches For Oracle Software Is Installed",
    "assessment": "Manual",
    "description": "The Oracle installation version and patches should be the most recent that are compatible with the organization's operational needs.",
    "rationale": "Using the most recent Oracle database software, along with all applicable patches can help limit the possibilities for vulnerabilities in the software, the installation version and/or patches applied during setup should be established according to the needs of the organization. Ensure you are using a release that is covered by a level of support that includes the generation of Critical Patch Updates.",
    "audit": "To assess this recommendation, use the following example shell command as appropriate for your environment. For example, on Linux systems: opatch lsinventory | grep -e \"^.* <latest_patch_version_numer> \\s*.*$\" For example, on Windows systems: opatch lsinventory | find \" <latest_patch_version_number> \"",
    "remediation": "Download and apply the latest quarterly Critical Patch Update patches. References: 1. http://www.oracle.com/us/support/assurance/fixing-policies/index.html 2. http://www.oracle.com/technetwork/topics/security/alerts-086861.html 3. http://www.oracle.com/us/support/library/lifetime-support-technology-069183.pdf Additional Information: The following SQL may be used to determine the patches that have been applied: select * from cdb_registry_sqlpatch order by action_time ;",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. http://www.oracle.com/us/support/assurance/fixing-policies/index.html 2. http://www.oracle.com/technetwork/topics/security/alerts-086861.html 3. http://www.oracle.com/us/support/library/lifetime-support-technology-069183.pdf Additional Information: The following SQL may be used to determine the patches that have been applied: select * from cdb_registry_sqlpatch order by action_time ;",
    "function_names": [
      "oracle_database_version_current",
      "oracle_software_patches_updated",
      "oracle_installation_version_compatible",
      "oracle_software_patches_recent",
      "oracle_database_patches_compliance",
      "oracle_software_version_approved",
      "oracle_installation_patches_validated",
      "oracle_database_version_supported",
      "oracle_software_patches_verified",
      "oracle_installation_version_secure"
    ]
  },
  {
    "id": "2.1.1",
    "title": "Ensure 'extproc' Is Not Present In 'listener.ora'",
    "assessment": "Automated",
    "description": "extproc should be removed from the listener.ora to mitigate the risk that OS libraries can be invoked by the Oracle instance.",
    "rationale": "extproc allows the database to run procedures from OS libraries. These library calls can, in turn, run any OS command.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -i extproc $ORACLE_HOME/network/admin/listener.ora On the Windows platform, execute the following command to audit this recommendation. findstr -i extproc %ORACLE_HOME%\\network\\admin\\listener.ora To be compliant with this recommendation, the output of this command should be NULL. Assumption: The audit command above assumes that listener.ora is located in the default path $ORACLE_HOME/network/admin/listener.ora. If this is not the case, please specify the correct location. For example, you may be using the TNS_ADMIN environment variable to point to the location of SQLNET.ORA and TNSNAMES.ORA.",
    "remediation": "To remediate this recommendation, remove extproc from the listener.ora file. Instead of relying on the EXTPROC feature in Oracle to access external libraries, you can use a database directory to directly access the library files stored within the database server's file system, allowing you to execute code from those libraries within your PL/SQL code without going through a separate external process. References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/netag/configuring-and-administering-oracle-net-listener.html",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/netag/configuring-and-administering-oracle-net-listener.html",
    "function_names": [
      "database_listener_extproc_removed",
      "oracle_listener_extproc_disabled",
      "database_listener_secure_configuration",
      "oracle_listener_extproc_mitigated",
      "database_listener_ora_no_extproc"
    ]
  },
  {
    "id": "2.1.2",
    "title": "Ensure 'ACCEPT_MD5_CERTS' Is Configured Correctly",
    "assessment": "Automated",
    "description": "The setting ACCEPT_MD5_CERTS specifies whether Oracle accepts certificates signed with the MD5 algorithm. Note: See Additional Information regarding the deprecation of this setting.",
    "rationale": "Weak algorithms such as MD5 and SHA1 have known vulnerabilities that make them susceptible to attacks. Allowing their use can compromise data integrity and authentication, potentially exposing systems to risks. Transitioning to stronger algorithms, such as SHA-2, is recommended. Impact: Applications that use MD5-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -i \"ACCEPT_MD5_CERTS.*=.*TRUE\" \"$ORACLE_HOME/network/admin/listener.ora\" On the Windows platform, execute the following PowerShell command to audit this recommendation. Select-String -Path $Env:ORACLE_HOME\\network\\admin\\listener.ora -Pattern \"ACCEPT_MD5_CERTS.*=.*TRUE\" -CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. The audit command above assumes that listener.ora is located in the default path $ORACLE_HOME/network/admin/listener.ora. If this is not the case, please specify the correct location. For example, you may be using the TNS_ADMIN environment variable to point to the location of SQLNET.ORA and TNSNAMES.ORA.",
    "remediation": "To remediate this recommendation, remove ACCEPT_MD5_CERTS from sqlnet.ora or set ACCEPT_MD5_CERTS to the value FALSE.  In addition to listener.ora, this parameter must also be set in sqlnet.ora. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: “Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]”",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Applications that use MD5-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: “Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]”",
    "function_names": [
      "cloud_cdn_certificate_no_md5_algorithm",
      "cloud_cdn_certificate_secure_hash_algorithm",
      "cloud_cdn_certificate_md5_deprecated",
      "cloud_cdn_certificate_strong_signature_algorithm",
      "cloud_cdn_certificate_no_weak_hash_algorithm"
    ]
  },
  {
    "id": "2.1.3",
    "title": "Ensure 'ACCEPT_SHA1_CERTS' Is Configured Correctly",
    "assessment": "Automated",
    "description": "The setting ACCEPT_SHA1_CERTS specifies whether Oracle accepts certificates signed with the SHA1 algorithm. Note: See Additional Information regarding the deprecation of this setting.",
    "rationale": "Weak algorithms such as MD5 and SHA1 have known vulnerabilities that make them susceptible to attacks. Allowing their use can compromise data integrity and authentication, potentially exposing systems to risks. Transitioning to stronger algorithms, such as SHA-2, is recommended. The SHA1 algorithm has been deprecated by NIST in 2011. Impact: Applications that use SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -i \"ACCEPT_SHA1_CERTS.*=.*TRUE\" \"$ORACLE_HOME/network/admin/listener.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path $Env:ORACLE_HOME\\network\\admin\\listener.ora -Pattern \"ACCEPT_SHA1_CERTS.*=.*TRUE\" -CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. The audit command above assumes that listener.ora is located in the default path $ORACLE_HOME/network/admin/listener.ora. If this is not the case, please specify the correct location. For example, you may be using the TNS_ADMIN environment variable to point to the location of SQLNET.ORA and TNSNAMES.ORA.",
    "remediation": "To remediate this recommendation, remove ACCEPT_SHA1_CERTS from sqlnet.ora, or set the ACCEPT_SHA1_CERTS to the value FALSE. In addition to listener.ora, this parameter must also be set to FALSE in sqlnet.ora. Default Value: The default value for ACCEPT_SHA1_CERTS is FALSE. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: “Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]”",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Applications that use SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: “Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]”",
    "function_names": [
      "cloud_cdn_ssl_certificate_sha1_rejected",
      "cloud_cdn_ssl_certificate_sha1_disabled",
      "cloud_cdn_ssl_certificate_min_tls_1_2",
      "cloud_cdn_ssl_certificate_secure_hash_algorithm",
      "cloud_cdn_ssl_certificate_strong_signature_algorithm"
    ]
  },
  {
    "id": "2.1.4",
    "title": "Ensure 'ALLOWED_WEAK_CERT_ALGORITHMS’ Is NOT Set.",
    "assessment": "Automated",
    "description": "The ALLOWED_WEAK_CERT_ALGORITHMS setting determines whether Oracle accepts certificates signed with the SHA1 or MD5 or both algorithms.",
    "rationale": "Weak algorithms such as MD5 and SHA1 have known vulnerabilities that make them susceptible to attacks. Allowing their use can compromise data integrity and authentication, potentially exposing systems to risks. Transitioning to stronger algorithms, such as SHA-2, is recommended. Impact: Applications that use MD5 or SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "audit": "To audit this recommendation: On the Linux platform, execute the following shell command to audit this recommendation. grep -i \"ALLOWED_WEAK_CERT_ALGORITHMS.*=.*TRUE\" \"$ORACLE_HOME/network/admin/listener.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path $Env:ORACLE_HOME\\network\\admin\\listener.ora -Pattern \"ALLOWED_WEAK_CERT_ALGORITHMS.*=.*TRUE\" -CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that listener.ora is located in the default path $ORACLE_HOME/network/admin/listener.ora. If this is not the case, please specify the correct location. For example, you may be using the TNS_ADMIN environment variable to point to the location of SQLNET.ORA and TNSNAMES.ORA.",
    "remediation": "To remediate this recommendation, remove the ALLOWED_WEAK_CERT_ALGORITHMS parameter. Default Value: NULL References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Applications that use MD5 or SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27",
    "function_names": [
      "cloud_cdn_ssl_certificate_weak_algorithm_disallowed",
      "cloud_cdn_ssl_certificate_sha1_disallowed",
      "cloud_cdn_ssl_certificate_md5_disallowed",
      "cloud_cdn_ssl_certificate_strong_algorithm_required",
      "cloud_cdn_ssl_certificate_allowed_weak_algorithm_disabled"
    ]
  },
  {
    "id": "2.2.1",
    "title": "Ensure 'ACCEPT_MD5_CERTS' Is NOT SET",
    "assessment": "Automated",
    "description": "The setting ACCEPT_MD5_CERTS specifies whether Oracle accepts certificates signed with the MD5 algorithm. Note: See Additional Information regarding the deprecation of this setting.",
    "rationale": "Weak algorithms such as MD5 and SHA-1 have known vulnerabilities that make them susceptible to attacks. Allowing their use can compromise data integrity and authentication, potentially exposing systems to risks. Transitioning to stronger algorithms, such as SHA-2, is recommended. Impact: Applications that use MD5-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -i \"ACCEPT_MD5_CERTS\\s*=\\s*TRUE\" \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following Powershell command to audit this recommendation. Select-String -Path $Env:ORACLE_HOME\\network\\admin\\sqlnet.ora -Pattern \"ACCEPT_MD5_CERTS\\s*=\\s*TRUE\" -CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set the ACCEPT_MD5_CERTS to the value FALSE or remove ACCEPT_MD5_CERTS from sqlnet.ora. In addition to sqlnet.ora, this parameter must also be set to FALSE in listener.ora. Default Value: FALSE References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Applications that use MD5-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]",
    "function_names": [
      "database_security_parameter_accept_md5_certs_disabled",
      "database_parameter_md5_certificate_rejection_enabled",
      "database_config_md5_certificate_acceptance_disabled",
      "database_setting_weak_certificate_algorithm_rejected",
      "database_compliance_md5_certificate_acceptance_denied"
    ]
  },
  {
    "id": "2.2.2",
    "title": "Ensure 'ACCEPT_SHA1_CERTS' Is NOT Set",
    "assessment": "Automated",
    "description": "The setting ACCEPT_SHA1_CERTS specifies whether Oracle accepts SHA-1 signed certificates. Note: See Additional Information regarding the deprecation of this setting.",
    "rationale": "Weak algorithms such as MD5 and SHA-1 have known vulnerabilities that make them susceptible to attacks. Allowing their use can compromise data integrity and authentication, potentially exposing systems to risks. Transitioning to stronger algorithms, such as SHA-2, is recommended. The SHA1 algorithm has been deprecated by NIST in 2011. Impact: Applications that use SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -i \"ACCEPT_SHA1_CERTS\\s*=\\s*TRUE\" \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path $Env:ORACLE_HOME\\network\\admin\\sqlnet.ora -Pattern \"ACCEPT_SHA1_CERTS\\s*=\\s*TRUE\" -CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set the ACCEPT_SHA1_CERTS to the value FALSE or remove ACCEPT_SHA1_CERTS from sqlnet.ora. In addition to sqlnet.ora, this parameter must also be set to FALSE in listener.ora. Default Value: FALSE References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Applications that use SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-84DC4C50-A550-4770-9210-1EECB4B5DB27 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-the- orapki-utility-to-manage-pki-elements.html#GUID-93CE62ED-97B1-43B3-8900- 64107F8F274C 3. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9240F605-720C-4C57-93E3-DD26CBEA1410 Additional Information: Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]",
    "function_names": [
      "cloud_cdn_ssl_certificate_sha1_rejected",
      "cloud_cdn_ssl_certificate_no_sha1",
      "cloud_cdn_ssl_certificate_min_tls_1_2",
      "cloud_cdn_ssl_certificate_secure_hash_algorithm",
      "cloud_cdn_ssl_certificate_strong_signature_required"
    ]
  },
  {
    "id": "2.2.3",
    "title": "Ensure 'ALLOWED_WEAK_CERT_ALGORITHMS' Is NOT Set",
    "assessment": "Automated",
    "description": "The setting ALLOWED_WEAK_CERT_ALGORITHMS determines whether Oracle accepts certificates signed with the SHA-1 or MD5 or both algorithms.",
    "rationale": "Weak algorithms such as MD5 and SHA-1 have known vulnerabilities that make them susceptible to attacks. Allowing their use can compromise data integrity and authentication, potentially exposing systems to risks. Transitioning to stronger algorithms, such as SHA-2, is recommended. Impact: Applications that use MD5 or SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "audit": "To audit this recommendation: On the Linux platform, execute the following shell command to audit this recommendation. grep -i \"ALLOWED_WEAK_CERT_ALGORITHMS\\s*=\\s*TRUE\" \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path $Env:ORACLE_HOME\\network\\admin\\sqlnet.ora -Pattern \"ALLOWED_WEAK_CERT_ALGORITHMS\\s*=\\s*TRUE\" -CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, remove the ALLOWED_WEAK_CERT_ALGORITHMS parameter. Default Value: NULL References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-B2908ADF-0973-44A9-9B34-587A3D605BED Additional Information: Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Applications that use MD5 or SHA-1-signed certificates must be updated to use certificates signed with a stronger, more secure algorithm such as SHA-2.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-B2908ADF-0973-44A9-9B34-587A3D605BED Additional Information: Starting in Oracle Database 23ai, the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS sqlnet.ora parameters are deprecated. If ALLOWED_WEAK_CERT_ALGORITHMS is set, then Oracle Database ignores ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS. If ALLOWED_WEAK_CERT_ALGORITHMS is not set, then Oracle Database checks and uses the ALLOW_MD5_CERTS and ALLOW_SHA1_CERTS settings.[1]",
    "function_names": [
      "cloud_cdn_certificate_weak_algorithms_disallowed",
      "cloud_cdn_certificate_sha1_disabled",
      "cloud_cdn_certificate_md5_disabled",
      "cloud_cdn_certificate_strong_algorithms_required",
      "cloud_cdn_certificate_allowed_weak_algorithms_empty"
    ]
  },
  {
    "id": "2.2.4",
    "title": "Ensure 'SQLNET.ALLOWED_LOGON_VERSION_CLIENT' Is Set To 12a",
    "assessment": "Automated",
    "description": "This setting SQLNET.ALLOWED_LOGON_VERSION_CLIENT configures the minimum authentication protocols clients can use to connect to database instances. Please note that the term VERSION in the parameter name refers to the version of the authentication protocol, not the version of the Oracle Database release.",
    "rationale": "Allowing deprecated or weaker authentication protocols can expose the database to security vulnerabilities, increasing the risk of unauthorized access, data loss, or breaches. Ensuring that clients use secure protocols improves the overall security posture of the database environment. Impact: Setting this parameter to 12a may prevent some clients from connecting to the database, leading to authentication failures. Specifically, clients may encounter the error ORA-28040: The database does not accept your client's authentication protocol; login denied.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?allowed_logon_version_client\\s*=\\s*(?!12a\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?allowed_logon_version_client\\s*=\\s*(?!12a\\b)\\S+' - CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.  The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.ALLOWED_LOGON_VERSION_CLIENT to 12a. Default Value: 12 References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-B2908ADF-0973-44A9-9B34-587A3D605BED",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Setting this parameter to 12a may prevent some clients from connecting to the database, leading to authentication failures. Specifically, clients may encounter the error ORA-28040: The database does not accept your client's authentication protocol; login denied.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-B2908ADF-0973-44A9-9B34-587A3D605BED",
    "function_names": [
      "database_instance_client_logon_version_min_12a",
      "database_client_auth_protocol_min_version_12a",
      "sqlnet_client_logon_version_restricted_12a",
      "database_connection_protocol_min_version_12a",
      "sqlnet_allowed_logon_version_client_12a"
    ]
  },
  {
    "id": "2.2.5",
    "title": "Ensure 'SQLNET.ALLOWED_LOGON_VERSION_SERVER' Is Set To 12a",
    "assessment": "Automated",
    "description": "This setting SQLNET.ALLOWED_LOGON_VERSION_SERVER configures the minimum authentication protocols clients can use to connect to database instances. Please note that the term VERSION in the parameter name refers to the version of the authentication protocol, not the version of the Oracle Database release.",
    "rationale": "Allowing deprecated or weaker authentication protocols can expose the database to security vulnerabilities, increasing the risk of unauthorized access, data loss, or breaches. Ensuring that clients use secure protocols improves the overall security posture of the database environment. Impact: Setting this parameter to 12a may prevent some clients from connecting to the database, leading to authentication failures. Specifically, clients may encounter the error ORA-28040: The database does not accept your client's authentication protocol; login denied",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?allowed_logon_version_server\\s*=\\s*(?!12a\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?allowed_logon_version_server\\s*=\\s*(?!12a\\b)\\S+' - CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.  The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.ALLOWED_LOGON_VERSION_SERVER to 12a. Default Value: 12 References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-B2908ADF-0973-44A9-9B34-587A3D605BED",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Setting this parameter to 12a may prevent some clients from connecting to the database, leading to authentication failures. Specifically, clients may encounter the error ORA-28040: The database does not accept your client's authentication protocol; login denied",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-B2908ADF-0973-44A9-9B34-587A3D605BED",
    "function_names": [
      "database_instance_min_auth_protocol_version_12a",
      "database_instance_allowed_logon_version_server_12a",
      "database_instance_client_auth_protocol_restricted",
      "database_instance_secure_logon_version_enabled",
      "database_instance_auth_protocol_min_version_enforced"
    ]
  },
  {
    "id": "2.2.6",
    "title": "Ensure 'SQLNET.ENCRYPTION_CLIENT Is Set To 'REQUIRED'",
    "assessment": "Automated",
    "description": "The SQLNET.ENCRYPTION_CLIENT parameter determines whether the client side of a database connection enforces network encryption. When set to REQUIRED, this parameter mandates that all data transmitted between the client and the database is encrypted, preventing the client from connecting if encryption cannot be established. This setting ensures that sensitive data remains protected during transmission. If you are using TLS, this is not a required check. Oracle database network encryption configured through TLS/SSL is also an acceptable mechanism and may be implemented in lieu of this setting.",
    "rationale": "Network encryption is crucial for safeguarding data transmitted over networks. Without encryption, data, including sensitive information like credentials, financial data, and personal details, is vulnerable to interception and potential compromise. Setting SQLNET.ENCRYPTION_CLIENT to REQUIRED ensures that all client connections to the database use encryption, aligning with best practices for data protection and regulatory compliance requirements. Impact: Clients or applications that do not support encryption will NOT be able to connect to the database, which may necessitate updates to older client configurations.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?ENCRYPTION_CLIENT\\s*=\\s*(?!REQUIRED\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?ENCRYPTION_CLIENT\\s*=\\s*(?!REQUIRED\\b)\\S+' - CaseSensitive:$false  To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.ENCRYPTION_CLIENT to REQUIRED. Default Value: ACCEPTED References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-F4A86AFC-4600-405F-88E7-DC79213FEC19",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Clients or applications that do not support encryption will NOT be able to connect to the database, which may necessitate updates to older client configurations.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-F4A86AFC-4600-405F-88E7-DC79213FEC19",
    "function_names": [
      "database_client_network_encryption_required",
      "database_sqlnet_encryption_client_required",
      "database_connection_encryption_required",
      "database_client_encryption_required",
      "database_network_encryption_required",
      "database_sqlnet_encryption_enabled",
      "database_client_encryption_enabled",
      "database_connection_encryption_enabled"
    ]
  },
  {
    "id": "2.2.7",
    "title": "Ensure 'SQLNET.ENCRYPTION_SERVER' Is Set To 'REQUIRED'",
    "assessment": "Automated",
    "description": "The SQLNET.ENCRYPTION_SERVER parameter determines whether the server side of a database connection enforces network encryption. When set to REQUIRED, this parameter mandates that all data transmitted between the client and the database is encrypted, preventing the server from connecting if encryption cannot be established. This setting ensures that sensitive data remains protected during transmission. If you are using TLS, this is not a required check. Oracle database network encryption configured through TLS/SSL is also an acceptable mechanism and may be implemented in lieu of this setting. Caution: Modifying this parameter changes how the database creates and tests password verifiers. Please refer to recommendation 4.4.",
    "rationale": "Network encryption is crucial for safeguarding data transmitted over networks. Without encryption, data, including sensitive information like credentials, financial data, and personal details, is vulnerable to interception and potential compromise. Setting SQLNET.ENCRYPTION_SERVER to REQUIRED ensures that all client connections to the database use encryption, aligning with best practices for data protection and regulatory compliance requirements. Impact: Clients or applications that do not support encryption will NOT be able to connect to the database, which may necessitate updates to older client configurations.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?ENCRYPTION_SERVER\\s*=\\s*(?!REQUIRED\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation.  Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?ENCRYPTION_SERVER\\s*=\\s*(?!REQUIRED\\b)\\S+' - CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.ENCRYPTION_SERVER to REQUIRED. Default Value: ACCEPTED References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-AADC66D0-7574-4AD4-8408-5CD7D2AABA2A",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Clients or applications that do not support encryption will NOT be able to connect to the database, which may necessitate updates to older client configurations.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-AADC66D0-7574-4AD4-8408-5CD7D2AABA2A",
    "function_names": [
      "database_network_encryption_required",
      "database_connection_encryption_enabled",
      "sqlnet_encryption_server_required",
      "database_network_encryption_enforced",
      "sqlnet_server_encryption_required",
      "database_connection_encryption_enforced",
      "sqlnet_encryption_server_enforced",
      "database_network_encryption_mandatory"
    ]
  },
  {
    "id": "2.2.8",
    "title": "Ensure 'SQLNET.ENCRYPTION_TYPES_CLIENT' Is Set To 'AES256'",
    "assessment": "Automated",
    "description": "The SQLNET.ENCRYPTION_TYPES_CLIENT parameter specifies the encryption algorithms that the client can use for database connections. This setting allows you to ensure that all data transmitted between the client and the database is encrypted using strong, secure algorithms.",
    "rationale": "Limiting the client to use only strong encryption algorithms helps to protect data integrity and confidentiality during transit. Using stronger algorithms reduces the risk of interception or tampering by unauthorized parties. Impact: If the AES256 algorithm is not available or installed on either the client or server, connections will be terminated. This may result in the error ORA-12650: No common encryption or data integrity algorithm, preventing SQL clients from connecting to the database.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?ENCRYPTION_TYPES_CLIENT\\s*=\\s*(?!AES256\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?ENCRYPTION_TYPES_CLIENT\\s*=\\s*(?!AES256\\b)\\S+' - CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in  the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.ENCRYPTION_TYPES_CLIENT to AES256. SQLNET.CRYPTO_CHECKSUM_TYPES_CLIENT=AES256 Default Value: All available algorithms References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9E9E6054-DD98-4B51-93A4-3802B5AA779F",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "If the AES256 algorithm is not available or installed on either the client or server, connections will be terminated. This may result in the error ORA-12650: No common encryption or data integrity algorithm, preventing SQL clients from connecting to the database.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-9E9E6054-DD98-4B51-93A4-3802B5AA779F",
    "function_names": [
      "database_sqlnet_encryption_types_client_aes256",
      "database_client_encryption_aes256_enabled",
      "database_connection_encryption_aes256_required",
      "sqlnet_client_encryption_types_aes256",
      "database_network_encryption_aes256_enforced"
    ]
  },
  {
    "id": "2.2.9",
    "title": "Ensure 'SQLNET.ENCRYPTION_TYPES_SERVER' Is Set To AES256",
    "assessment": "Manual",
    "description": "The SQLNET.ENCRYPTION_TYPES_SERVER parameter specifies the encryption algorithms that the server enforces for database connections. This setting allows you to ensure that all data transmitted between the client and the database is encrypted using strong, secure algorithms.",
    "rationale": "Limiting the server to use only strong encryption algorithms helps to protect data integrity and confidentiality during transit. Using stronger algorithms reduces the risk of interception or tampering by unauthorized parties. Impact: If the AES256 algorithm is not available or installed on either the client or server, connections will be terminated. This may result in the error ORA-12650: No common encryption or data integrity algorithm, preventing SQL clients from connecting to the database.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?ENCRYPTION_TYPES_SERVER\\s*=\\s*(?!AES256\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?ENCRYPTION_TYPES_SERVER\\s*=\\s*(?!AES256\\b)\\S+' - CaseSensitive:$false To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in  the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.ENCRYPTION_TYPES_SERVER to AES256. SQLNET.ENCRYPTION_TYPES_SERVER=AES256 Default Value: All available algorithms References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-5A5BFE73-BA12-4035-A600-834CA9E38427",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "If the AES256 algorithm is not available or installed on either the client or server, connections will be terminated. This may result in the error ORA-12650: No common encryption or data integrity algorithm, preventing SQL clients from connecting to the database.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-5A5BFE73-BA12-4035-A600-834CA9E38427",
    "function_names": [
      "database_sqlnet_encryption_types_server_aes256",
      "database_sqlnet_encryption_aes256_enabled",
      "database_connection_encryption_aes256_required",
      "database_network_encryption_aes256_enforced",
      "database_sqlnet_server_encryption_aes256_only"
    ]
  },
  {
    "id": "2.2.10",
    "title": "Ensure 'SQLNET.CRYPTO_CHECKSUM_CLIENT' Is Set To 'REQUIRED'",
    "assessment": "Automated",
    "description": "The SQLNET.CRYPTO_CHECKSUM_CLIENT parameter specifies the checksum behavior for the client when connecting to a server. This setting enables the client to enforce cryptographic checksums, which verify the integrity of data transmitted during client- server interactions. Oracle networking already performs checksumming, so additional cryptographic checksumming is usually of limited value. A setting of REQUIRED at the server requires that incoming connections are encrypted with AES256. Oracle database network encryption configured through TLS/SSL is also an acceptable mechanism and may be implemented in lieu of this setting.",
    "rationale": "Enabling cryptographic checksums for client connections ensures a higher degree of data integrity. Impact: If SQLNET.CRYPTO_CHECKSUM_CLIENT is set to REQUIRED, the client will be unable to connect to servers that do not require cryptographic checksums, resulting in connection failures. This may cause errors such as ORA-12650: No common encryption or data integrity algorithm if the server does not meet the client’s checksum requirements.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?CRYPTO_CHECKSUM_CLIENT\\s*=\\s*(?!REQUIRED\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?CRYPTO_CHECKSUM_CLIENT\\s*=\\s*(?!REQUIRED\\b)\\S+' - CaseSensitive:$false  To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.CRYPTO_CHECKSUM_CLIENT to REQUIRED. SQLNET.CRYPTO_CHECKSUM_CLIENT=REQUIRED Default Value: accepted References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-D76832AE-FFFA-47D1-9EF6-46D95C78004C",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "If SQLNET.CRYPTO_CHECKSUM_CLIENT is set to REQUIRED, the client will be unable to connect to servers that do not require cryptographic checksums, resulting in connection failures. This may cause errors such as ORA-12650: No common encryption or data integrity algorithm if the server does not meet the client’s checksum requirements.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-D76832AE-FFFA-47D1-9EF6-46D95C78004C",
    "function_names": [
      "database_sqlnet_crypto_checksum_client_required",
      "database_sqlnet_crypto_checksum_client_encrypted",
      "database_client_checksum_integrity_required",
      "database_client_connection_encryption_required",
      "database_sqlnet_client_checksum_enforced",
      "database_client_crypto_checksum_required",
      "database_sqlnet_checksum_client_required",
      "database_client_connection_checksum_required"
    ]
  },
  {
    "id": "2.2.11",
    "title": "Ensure 'SQLNET.CRYPTO_CHECKSUM_SERVER' Is Set To 'REQUIRED'",
    "assessment": "Automated",
    "description": "The SQLNET.CRYPTO_CHECKSUM_SERVER parameter specifies the checksum behavior for the server when connecting to a client. This setting enables the server to enforce cryptographic checksums, which verify the integrity of data transmitted during client- server interactions. Oracle networking already performs checksumming, so additional cryptographic checksumming is usually of limited value. A setting of REQUIRED at the server requires that the outgoing connections are encrypted with AES256. Oracle database network encryption configured through TLS/SSL is also an acceptable mechanism and may be implemented in lieu of this setting.",
    "rationale": "Enabling cryptographic checksums for server connections ensures a higher degree of data integrity. Impact: If SQLNET.CRYPTO_CHECKSUM_SERVER is set to REQUIRED, the client will be unable to connect to servers that do not require cryptographic checksums, resulting in connection failures. This may cause errors such as ORA-12650: No common encryption or data integrity algorithm if the server does not meet the client’s checksum requirements.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?CRYPTO_CHECKSUM_SERVER\\s*=\\s*(?!REQUIRED\\b)\\S+' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?CRYPTO_CHECKSUM_SERVER\\s*=\\s*(?!REQUIRED\\b)\\S+' - CaseSensitive:$false  If the output shows FALSE or NONE, the control is not configured correctly. To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance. The audit command above assumes that sqlnet.ora is located in the default path $ORACLE_HOME/network/admin/sqlnet.ora. If this is not the case, please specify the correct location. For example, you might be using the TNS_ADMIN environment variable to point to the location of sqlnet.ora. Alternatively, sqlnet.ora could be located in the $ORACLE_BASE_HOME/network/admin or /opt/oracle/ <release_number> /network/admin directories.",
    "remediation": "To remediate this recommendation, set SQLNET.CRYPTO_CHECKSUM_SERVER to REQUIRED. SQLNET.CRYPTO_CHECKSUM_SERVER=REQUIRED Default Value: accepted References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-FE083F54-FF01-4D2C-90E7-BEA527FF5696",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "If SQLNET.CRYPTO_CHECKSUM_SERVER is set to REQUIRED, the client will be unable to connect to servers that do not require cryptographic checksums, resulting in connection failures. This may cause errors such as ORA-12650: No common encryption or data integrity algorithm if the server does not meet the client’s checksum requirements.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-FE083F54-FF01-4D2C-90E7-BEA527FF5696",
    "function_names": [
      "database_network_crypto_checksum_server_required",
      "database_network_checksum_server_encryption_required",
      "database_network_checksum_server_aes256_required",
      "database_network_checksum_server_tls_ssl_required",
      "database_network_checksum_server_integrity_required"
    ]
  },
  {
    "id": "2.2.12",
    "title": "Ensure 'SSL_CERT_REVOCATION' Is Set To 'REQUIRED'",
    "assessment": "Automated",
    "description": "The SSL_CERT_REVOCATION parameter in Oracle's sqlnet.ora file specifies whether the system should check the revocation status of SSL certificates during authentication. This check ensures that invalid, revoked, or compromised certificates cannot be used to establish secure connections.",
    "rationale": "Enabling SSL certificate revocation checking helps maintain the integrity and security of SSL connections by ensuring that only valid certificates are accepted. Without this validation, compromised certificates could allow unauthorized entities to impersonate legitimate servers or clients, potentially exposing sensitive data to interception or attacks. Impact: Enabling this setting without proper certificate infrastructure (e.g., CRL or OCSP) could result in failed connections if the revocation status cannot be determined.",
    "audit": "On the Linux platform, execute the following shell command to audit this recommendation. grep -Pi '^\\s*(SQLNET\\.)?SSL_CERT_REVOCATION\\s*=\\s*(FALSE|NONE)' \"$ORACLE_HOME/network/admin/sqlnet.ora\" On the Windows platform, execute the following command to audit this recommendation. Select-String -Path \"$Env:ORACLE_HOME\\network\\admin\\sqlnet.ora\" -Pattern '^\\s*(SQLNET\\.)?SSL_CERT_REVOCATION\\s*=\\s*(FALSE|NONE)' -CaseSensitive:$false If the output shows FALSE or NONE, the control is not configured correctly.",
    "remediation": "To remediate this recommendation, set SSL_CERT_REVOCATION to required. SQLNET.SSL_CERT_REVOCATION=REQUIRED  Default Value: none References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-412678FF-2A41-4B92-8522-11E6A14A6671 2. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-transport-layer-security-encryption1.html#GUID- C176D190-CFF8-45C1-BAA0-34388008A56A",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS •  Level 1 - RDBMS On Windows Server Host OS",
    "impact": "Enabling this setting without proper certificate infrastructure (e.g., CRL or OCSP) could result in failed connections if the revocation status cannot be determined.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/netrf/parameters- for-the-sqlnet.ora.html#GUID-412678FF-2A41-4B92-8522-11E6A14A6671 2. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-transport-layer-security-encryption1.html#GUID- C176D190-CFF8-45C1-BAA0-34388008A56A",
    "function_names": [
      "oracle_database_ssl_cert_revocation_required",
      "oracle_sqlnet_ora_cert_revocation_required",
      "oracle_network_ssl_revocation_check_enabled",
      "oracle_authentication_cert_revocation_required",
      "oracle_ssl_cert_revocation_check_enabled"
    ]
  },
  {
    "id": "2.3.1",
    "title": "Ensure 'BACKGROUND_CORE_DUMP' Is Not Set To 'Full'",
    "assessment": "Automated",
    "description": "The BACKGROUND_CORE_DUMP parameter in Oracle's init.ora file specifies the level of detail captured in core dumps generated by background processes during an exception. Setting this parameter to FULL enables the creation of detailed SGA dumps, which may include sensitive information.",
    "rationale": "Allowing BACKGROUND_CORE_DUMP to be set to FULL increases the risk of exposing sensitive data, such as encryption keys, passwords, or other confidential information, in the core dump files. These files could be accessed by unauthorized users, leading to data breaches. Limiting the detail in core dumps reduces this risk while still providing enough information for diagnostics. The use of TDE doesn’t prevent, or encrypt the dumps generated by the background processes.",
    "audit": "o assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'BACKGROUND_CORE_DUMP' AND UPPER(VALUE) = 'FULL' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this recommendation, execute the following SQL statement. ALTER SYSTEM SET BACKGROUND_CORE_DUMP='partial' SCOPE=BOTH; Default Value: partial  References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/BACKGROUND_CORE_DUMP.html#GUID-A7118B00-4814- 453E-872E-B68E4CB192F6",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/BACKGROUND_CORE_DUMP.html#GUID-A7118B00-4814- 453E-872E-B68E4CB192F6",
    "function_names": [
      "oracle_database_init_ora_background_core_dump_not_full",
      "oracle_database_init_ora_background_core_dump_restricted",
      "oracle_database_init_ora_sensitive_dump_disabled",
      "oracle_database_init_ora_core_dump_level_secure",
      "oracle_database_init_ora_background_dump_protected"
    ]
  },
  {
    "id": "2.3.2",
    "title": "Ensure 'SHADOW_CORE_DUMP' Is Not Set To 'Full'",
    "assessment": "Automated",
    "description": "The setting SHADOW_CORE_DUMP determines whether SGA is included in the core dump for foreground(client) processes.",
    "rationale": "The non-default value of full presents a security concern due to the potential for inclusion of sensitive data in the dump file, even when TDE-tablespace is in use.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(NAME), UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'SHADOW_CORE_DUMP' AND UPPER(VALUE) = 'FULL' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this recommendation, execute the following SQL statement. ALTER SYSTEM SET SHADOW_CORE_DUMP='partial' SCOPE=BOTH; Or ALTER SYSTEM SET SHADOW_CORE_DUMP='none' SCOPE=BOTH; Default Value: On Linux platform, the default value is partial. On Windows, the default value is none. References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SHADOW_CORE_DUMP.html#GUID-9DB6F1E1-22F7-4A69- ACE6-F5865625F5B2",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SHADOW_CORE_DUMP.html#GUID-9DB6F1E1-22F7-4A69- ACE6-F5865625F5B2",
    "function_names": [
      "database_instance_shadow_core_dump_not_full",
      "database_instance_core_dump_restricted",
      "database_instance_sga_core_dump_disabled",
      "database_instance_client_core_dump_limited",
      "database_instance_core_dump_no_sga"
    ]
  },
  {
    "id": "2.3.3",
    "title": "Ensure 'MLE_PROG_LANGUAGES' Is Set To 'OFF'",
    "assessment": "Automated",
    "description": "The MLE_PROG_LANGUAGES will enable Oracle Database Multilingual Engine (MLE), which is currently supporting Java Script.",
    "rationale": "To minimize attack surface, set the parameter to OFF, if Java Script will not be running against the Oracle database system. Impact: Java Script code will not be running anymore, MLE feature will be disabled.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'MLE_PROG_LANGUAGES' AND UPPER(VALUE) != 'OFF' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this recommendation, execute the following SQL statement. ALTER SYSTEM SET MLE_PROG_LANGUAGES='OFF' SCOPE=BOTH; Default Value: ALL References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/MLE_PROG_LANGUAGES.html#GUID-22596210-9BAB- 41CF-B6B7-A95B77C0DD72",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Java Script code will not be running anymore, MLE feature will be disabled.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/MLE_PROG_LANGUAGES.html#GUID-22596210-9BAB- 41CF-B6B7-A95B77C0DD72",
    "function_names": [
      "database_mle_prog_languages_disabled",
      "database_mle_prog_languages_off",
      "database_mle_languages_disabled",
      "database_mle_languages_off",
      "database_multilingual_engine_disabled"
    ]
  },
  {
    "id": "2.3.4",
    "title": "Ensure 'ALLOW_GROUP_ACCESS_TO_SGA' Is Set To `FALSE`",
    "assessment": "Automated",
    "description": "The ALLOW_GROUP_ACCESS_TO_SGA controls Linux group access to shared memory on UNIX platforms. database shared memory is created with owner access only.",
    "rationale": "This is to minimize the attack surface, as setting ALLOW_GROUP_ACCESS_TO_SGA to true will allow linux accounts with the same group membership of the oracle software account owner to access the shared memory and thus the ability to dump data from memory. Impact: No impact on database operations, but it may impact third party software that requires access to Oracle SGA memory such as security monitoring software.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'ALLOW_GROUP_ACCESS_TO_SGA' AND UPPER(VALUE) != 'FALSE' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET ALLOW_GROUP_ACCESS_TO_SGA='FALSE' SCOPE=SPFILE; Default Value: FALSE  References: 1. https://docs.oracle.com/en//database/oracle/oracle- database/23/refrn/ALLOW_GROUP_ACCESS_TO_SGA.html#GUID- A6BABC97-7EF8-4E1A-89C9-CF81EDCFB4A2",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "No impact on database operations, but it may impact third party software that requires access to Oracle SGA memory such as security monitoring software.",
    "references": "1. https://docs.oracle.com/en//database/oracle/oracle- database/23/refrn/ALLOW_GROUP_ACCESS_TO_SGA.html#GUID- A6BABC97-7EF8-4E1A-89C9-CF81EDCFB4A2",
    "function_names": [
      "database_shared_memory_group_access_disabled",
      "linux_shared_memory_restricted_access",
      "unix_shared_memory_group_access_false",
      "oracle_sga_group_access_disabled",
      "database_shared_memory_owner_only_access"
    ]
  },
  {
    "id": "2.3.5",
    "title": "Review Undocumented (Underscore) Parameters Not Set To 'DEFAULT' Values",
    "assessment": "Manual",
    "description": "Oracle allows the use of undocumented (also known as hidden) parameters, which are primarily intended for internal or diagnostic purposes. Undocumented parameter values should not be set or changed from their default values, unless explicitly instructed by Oracle Support for internal or diagnostic purposes.",
    "rationale": "As not documented, the impact of these parameters is unknown or unpredictable. Reviewing such parameters ensures that they are not inadvertently affecting database operation, security, stability, or performance. They must be reviewed carefully to avoid unintended consequences, compliance violations, or operational issues.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(NAME), UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE SUBSTR(NAME,1,1) = '_' AND ISDEFAULT = 'FALSE'; To be compliant with this recommendation, the output of this command should be NULL. If the output of this command is not NULL, then review the output for applicability of undocumented parameters for your organization.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance if required. ALTER SYSTEM SET <undocumented_parameter> = <Default value> SCOPE=SPFILE; Default Value: Undocumented parameters do not always have officially defined default values. Oracle does not guarantee backward compatibility for them across versions.  Additional Information: Please note that some parameters such as _instance_recovery_bloom_filter_size or _dmm_blas_library could be ignored in 23.5.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "function_names": [
      "database_parameter_undocumented_default",
      "database_parameter_hidden_default",
      "database_parameter_underscore_default",
      "database_parameter_internal_default",
      "database_parameter_diagnostic_default",
      "database_parameter_unsupported_default",
      "database_parameter_undocumented_unchanged",
      "database_parameter_hidden_unchanged",
      "database_parameter_underscore_unchanged",
      "database_parameter_internal_unchanged"
    ]
  },
  {
    "id": "2.3.6",
    "title": "Ensure 'OS_ROLES' Is Set To 'FALSE'",
    "assessment": "Automated",
    "description": "The os_roles setting permits externally created groups to be applied to database management.",
    "rationale": "Allowing the OS to use external groups for database management could cause privilege overlaps and generally weaken security.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(NAME), UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'OS_ROLES' AND UPPER(VALUE) != 'FALSE' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance. ALTER SYSTEM SET OS_ROLES = FALSE SCOPE = SPFILE; Default Value: FALSE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/OS_ROLES.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/OS_ROLES.html",
    "function_names": [
      "database_instance_os_roles_disabled",
      "database_management_os_roles_false",
      "database_os_roles_external_groups_disabled",
      "database_instance_external_roles_disabled",
      "database_management_external_roles_false"
    ]
  },
  {
    "id": "2.3.7",
    "title": "Ensure 'REMOTE_OS_ROLES' Is Set To 'FALSE'",
    "assessment": "Automated",
    "description": "The remote_os_roles setting permits remote users' OS roles to be applied to database management. This setting should have a value of FALSE.",
    "rationale": "Allowing remote clients OS roles to have permissions for database management could cause privilege overlaps and generally weaken security.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(NAME), UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'REMOTE_OS_ROLES' AND UPPER(VALUE) != 'FALSE' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance. ALTER SYSTEM SET REMOTE_OS_ROLES = FALSE SCOPE = SPFILE; Default Value: FALSE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/REMOTE_OS_ROLES.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/REMOTE_OS_ROLES.html",
    "function_names": [
      "database_instance_remote_os_roles_disabled",
      "database_instance_remote_os_roles_false",
      "database_instance_remote_os_roles_restricted",
      "database_instance_remote_os_roles_unset",
      "database_instance_remote_os_roles_secure"
    ]
  },
  {
    "id": "2.3.8",
    "title": "Ensure 'SEC_MAX_FAILED_LOGIN_ATTEMPTS' Is Set To '3' Or Less",
    "assessment": "Automated",
    "description": "The SEC_MAX_FAILED_LOGIN_ATTEMPTS parameter determines how many failed login attempts are allowed before Oracle closes the login connection.",
    "rationale": "Allowing an unlimited number of login attempts for a user connection can facilitate both brute-force login attacks and the occurrence of denial-of-service.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(NAME),UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME)='SEC_MAX_FAILED_LOGIN_ATTEMPTS' AND TO_NUMBER(DECODE(VALUE,'1',1,'2',2,'3',3,9999)) > 3 ; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance. ALTER SYSTEM SET SEC_MAX_FAILED_LOGIN_ATTEMPTS = 3 SCOPE = SPFILE; Default Value: 3 References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_MAX_FAILED_LOGIN_ATTEMPTS.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_MAX_FAILED_LOGIN_ATTEMPTS.html",
    "function_names": [
      "database_profile_max_failed_login_attempts_less_than_or_equal_3",
      "oracle_security_max_failed_login_attempts_limited",
      "database_authentication_failed_login_threshold_compliant",
      "oracle_profile_login_attempts_restricted",
      "database_security_max_failed_logins_enforced"
    ]
  },
  {
    "id": "2.3.9",
    "title": "Ensure 'SEC_PROTOCOL_ERROR_FURTHER_ACTION' Is Set To '(DROP,3)'",
    "assessment": "Automated",
    "description": "The SEC_PROTOCOL_ERROR_FURTHER_ACTION setting determines the Oracle server's response to bad/malformed packets received from the client. This setting should have a value of (DROP,3) or (DROP, 3), which will cause a connection to be dropped after three bad/malformed packets.",
    "rationale": "Bad packets received from the client can potentially indicate packet-based attacks on the system, such as \"TCP SYN Flood\" or \"Smurf\" attacks, which could result in a denial- of-service condition. This value should be set according to the needs of the organization.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'SEC_PROTOCOL_ERROR_FURTHER_ACTION' AND UPPER(VALUE) NOT IN ('(DROP,3)','(DROP, 3)' ) ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_PROTOCOL_ERROR_FURTHER_ACTION = '(DROP,3)' SCOPE=BOTH; Default Value: (DROP,3) References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_PROTOCOL_ERROR_FURTHER_ACTION.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_PROTOCOL_ERROR_FURTHER_ACTION.html",
    "function_names": [
      "oracle_database_network_protocol_error_action_drop_3",
      "oracle_database_connection_protocol_error_drop_3",
      "oracle_network_protocol_error_action_drop_3",
      "oracle_database_protocol_error_further_action_drop_3",
      "oracle_network_protocol_error_further_action_drop_3"
    ]
  },
  {
    "id": "2.3.10",
    "title": "Ensure 'SEC_PROTOCOL_ERROR_TRACE_ACTION' Is Set To 'LOG'",
    "assessment": "Automated",
    "description": "The SEC_PROTOCOL_ERROR_TRACE_ACTION setting determines the Oracle's server's logging response level to bad/malformed packets received from the client by generating ALERT, LOG, or TRACE levels of detail in the log files. This setting should have a value of LOG unless the organization has a compelling reason to use a different value because LOG should cause the necessary information to be logged. Setting the value as TRACE can generate an enormous amount of log output and should be reserved for debugging only.",
    "rationale": "Bad packets received from the client can potentially indicate packet-based attacks on the system, which could result in a denial-of-service condition.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'SEC_PROTOCOL_ERROR_TRACE_ACTION' AND UPPER(VALUE) != 'LOG' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET SEC_PROTOCOL_ERROR_TRACE_ACTION=LOG SCOPE = BOTH; Default Value: TRACE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_PROTOCOL_ERROR_TRACE_ACTION.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_PROTOCOL_ERROR_TRACE_ACTION.html",
    "function_names": [
      "database_security_protocol_error_trace_action_log_enabled",
      "database_security_protocol_error_trace_action_log",
      "database_protocol_error_trace_action_log",
      "database_protocol_error_trace_action_log_enabled",
      "database_security_protocol_error_trace_action_log_set",
      "database_protocol_error_trace_action_log_set",
      "database_security_protocol_error_trace_action_log_only",
      "database_protocol_error_trace_action_log_only"
    ]
  },
  {
    "id": "2.3.11",
    "title": "Ensure 'SEC_RETURN_SERVER_RELEASE_BANNER' Is Set To 'FALSE'",
    "assessment": "Automated",
    "description": "The information about patch/update release number provides information about the exact patch/update release that is currently running on the database. This is sensitive information that should not be revealed to anyone who requests it.",
    "rationale": "Allowing the database to return information about the patch/update release number could facilitate unauthorized users' attempts to gain access based upon known patch weaknesses.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'SEC_RETURN_SERVER_RELEASE_BANNER' AND UPPER(VALUE) != 'FALSE' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance. ALTER SYSTEM SET SEC_RETURN_SERVER_RELEASE_BANNER = FALSE SCOPE = SPFILE; Default Value: FALSE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_RETURN_SERVER_RELEASE_BANNER.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/SEC_RETURN_SERVER_RELEASE_BANNER.html",
    "function_names": [
      "database_instance_return_server_release_banner_disabled",
      "database_instance_server_banner_hidden",
      "database_instance_release_info_suppressed",
      "database_instance_sensitive_info_protected",
      "database_instance_banner_setting_false"
    ]
  },
  {
    "id": "2.3.12",
    "title": "Ensure 'REMOTE_LOGIN_PASSWORDFILE' Is Set To 'NONE'",
    "assessment": "Automated",
    "description": "The remote_login_passwordfile setting specifies whether or not Oracle checks for a password file during login and how many databases can use the password file. The setting should have a value of NONE or in the event you are running DR/Data Guard, EXCLUSIVE is an allowable value.",
    "rationale": "The use of this sort of password login file could permit unsecured, privileged connections to the database.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'REMOTE_LOGIN_PASSWORDFILE' and 'DG' != (SELECT 'DG' FROM V$DATABASE where database_role in ('PRIMARY','PHYSICAL STANDBY','LOGICAL STANDBY','SNAPSHOT STANDBY')) AND UPPER(VALUE) != 'NONE' union SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'REMOTE_LOGIN_PASSWORDFILE' and 'DG' = (SELECT 'DG' FROM V$DATABASE where database_role in ('PRIMARY','PHYSICAL STANDBY','LOGICAL STANDBY','SNAPSHOT STANDBY')) AND UPPER(VALUE) != 'EXCLUSIVE'; Ensure VALUE is set to NONE or, in the event you are running DR/Data Guard, EXCLUSIVE is an allowable VALUE. To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement and restart the instance. ALTER SYSTEM SET REMOTE_LOGIN_PASSWORDFILE = 'NONE' SCOPE = SPFILE; Default Value: EXCLUSIVE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/REMOTE_LOGIN_PASSWORDFILE.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/REMOTE_LOGIN_PASSWORDFILE.html",
    "function_names": [
      "database_instance_remote_login_passwordfile_none",
      "database_instance_remote_login_passwordfile_exclusive",
      "database_instance_remote_login_passwordfile_secure",
      "database_instance_passwordfile_none_or_exclusive",
      "database_instance_remote_login_passwordfile_restricted"
    ]
  },
  {
    "id": "2.3.13",
    "title": "Ensure 'REMOTE_LISTENER' Is Empty",
    "assessment": "Automated",
    "description": "The remote_listener setting determines whether or not a valid listener can be established on a system separate from the database instance. This setting should be empty unless the organization specifically needs a valid listener on a separate system or on nodes running Oracle RAC instances.",
    "rationale": "Permitting a remote listener for connections to the database instance can allow for the potential spoofing of connections and that could compromise data confidentiality and integrity.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'REMOTE_LISTENER' AND VALUE IS NOT NULL ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET REMOTE_LISTENER = '' SCOPE = BOTH; Default Value: There is no default value. References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/REMOTE_LISTENER.html  Additional Information: If set as remote_listener=true, the address/address list is taken from the TNSNAMES.ORA file.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/REMOTE_LISTENER.html  Additional Information: If set as remote_listener=true, the address/address list is taken from the TNSNAMES.ORA file.",
    "function_names": [
      "database_instance_remote_listener_empty",
      "database_instance_remote_listener_unset",
      "database_instance_remote_listener_disabled",
      "database_instance_remote_listener_no_remote_access",
      "database_instance_remote_listener_default_config"
    ]
  },
  {
    "id": "2.3.14",
    "title": "Ensure 'RESOURCE_LIMIT' Is Set To 'TRUE'",
    "assessment": "Automated",
    "description": "RESOURCE_LIMIT determines whether resource limits are enforced in database profiles. This setting should have a value of TRUE.",
    "rationale": "If RESOURCE_LIMIT is set to FALSE, none of the system resource limits that are set in any database profiles are enforced. If RESOURCE_LIMIT is set to TRUE, the limits set in database profiles are enforced.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, UPPER(V.VALUE) FROM GV$SYSTEM_PARAMETER V WHERE UPPER(NAME) = 'RESOURCE_LIMIT' AND UPPER(VALUE) != 'TRUE' ORDER BY CON_ID; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. ALTER SYSTEM SET RESOURCE_LIMIT = TRUE SCOPE = BOTH; Default Value: FALSE References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/RESOURCE_LIMIT.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/RESOURCE_LIMIT.html",
    "function_names": [
      "database_profile_resource_limit_enabled",
      "database_profile_resource_limit_true",
      "database_profile_resource_limit_enforced",
      "database_profile_resource_limit_set_true",
      "database_profile_resource_limit_required"
    ]
  },
  {
    "id": "3.1",
    "title": "Ensure 'FAILED_LOGIN_ATTEMPTS' Is Less Than Or Equal To '5'",
    "assessment": "Automated",
    "description": "The FAILED_LOGIN_ATTEMPTS setting defines the number of consecutive failed login attempts allowed before a user's account is locked. While different profiles can have customized settings based on organizational needs, a minimum recommended value of 5 should be enforced. Organizations may choose a higher value for specific use cases, such as application data source accounts, to prevent unnecessary lockouts while maintaining security. However, increasing this threshold should be carefully reviewed to ensure that the system's security posture is maintained and accounts are protected against unauthorized or brute-force login attempts.",
    "rationale": "Repeated failed login attempts may indicate the initiation of a brute-force attack. Therefore, this value should be configured based on the organization's security requirements, balancing account protection with operational needs.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(P.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM CDB_PROFILES P WHERE P.RESOURCE_NAME = 'FAILED_LOGIN_ATTEMPTS' AND TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT', (SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='FAILED_LOGIN_ATTEMPTS' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) > 5 ORDER BY CON_ID, PROFILE, RESOURCE_NAME; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT FAILED_LOGIN_ATTEMPTS 5; Default Value: 10 References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e851 Additional Information: The similar setting used to block a DDoS, the SEC_MAX_FAILED_LOGIN_ATTEMPTS initialization parameter, can be used to protect unauthorized intruders from attacking the server processes for applications, but this setting does not protect against unauthorized attempts via valid usernames. The SEC_MAX_FAILED_LOGIN_ATTEMPTS prevents multiple failed login attempts by a single connection. The parameter differs from the limit set on user profiles and applied to failed login attempts to a single user account. Limiting failed authentication attempts by a single connection helps protect against Denial of Service (DoS) attacks and authentication attempts against multiple user accounts.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e851 Additional Information: The similar setting used to block a DDoS, the SEC_MAX_FAILED_LOGIN_ATTEMPTS initialization parameter, can be used to protect unauthorized intruders from attacking the server processes for applications, but this setting does not protect against unauthorized attempts via valid usernames. The SEC_MAX_FAILED_LOGIN_ATTEMPTS prevents multiple failed login attempts by a single connection. The parameter differs from the limit set on user profiles and applied to failed login attempts to a single user account. Limiting failed authentication attempts by a single connection helps protect against Denial of Service (DoS) attacks and authentication attempts against multiple user accounts.",
    "function_names": [
      "iam_account_failed_login_attempts_less_than_or_equal_to_5",
      "iam_user_failed_login_attempts_less_than_or_equal_to_5",
      "iam_profile_failed_login_attempts_less_than_or_equal_to_5",
      "iam_policy_failed_login_attempts_less_than_or_equal_to_5",
      "iam_settings_failed_login_attempts_less_than_or_equal_to_5",
      "iam_security_failed_login_attempts_less_than_or_equal_to_5",
      "iam_lockout_failed_login_attempts_less_than_or_equal_to_5",
      "iam_brute_force_failed_login_attempts_less_than_or_equal_to_5"
    ]
  },
  {
    "id": "3.2",
    "title": "Ensure 'PASSWORD_LOCK_TIME' Is Greater Than Or Equal To '1'",
    "assessment": "Automated",
    "description": "The PASSWORD_LOCK_TIME setting determines how many days must pass for the user's account to be unlocked after the set number of failed login attempts has occurred. The suggested value for this is one day or greater.",
    "rationale": "Locking the user account after repeated failed login attempts can block further brute- force login attacks but can create administrative headaches as this account unlocking process always requires DBA intervention.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(P.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_LOCK_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) < 1 ORDER BY CON_ID, PROFILE, RESOURCE_NAME; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_LOCK_TIME 1; Default Value: 1  References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e968",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e968",
    "function_names": [
      "iam_user_password_lock_time_min_1d",
      "iam_account_password_lock_time_min_1d",
      "iam_password_policy_lock_time_min_1d",
      "iam_security_password_lock_time_min_1d",
      "iam_identity_password_lock_time_min_1d"
    ]
  },
  {
    "id": "3.3",
    "title": "Ensure 'PASSWORD_LIFE_TIME + PASSWORD_GRACE_TIME' Is Less Than Or Equal To '365'",
    "assessment": "Automated",
    "description": "The PASSWORD_LIFE_TIME setting determines how long a password may be used before the user is required to change it. The suggested value is 365 days or less. Note that recent NIST guidelines recommend using longer lifetimes for human actor passwords.",
    "rationale": "Allowing passwords to remain unchanged for long periods makes the success of attacks leveraging stolen passwords more likely.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH PWD_LIFE_TIME AS (SELECT CON_ID, DECODE(P.CON_ID,0,'ENTIRE- '||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_LIFE_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999', P.LIMIT)) LIMIT FROM CDB_PROFILES P WHERE P.RESOURCE_NAME = 'PASSWORD_LIFE_TIME'), PWD_GRACE_TIME AS (SELECT CON_ID, DECODE(P.CON_ID,0,'ENTIRE- '||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_GRACE_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED','9999', P.LIMIT)) LIMIT FROM CDB_PROFILES P WHERE P.RESOURCE_NAME = 'PASSWORD_GRACE_TIME') SELECT L.CONTAINERNAME, L.PROFILE, L.RESOURCE_NAME, L.LIMIT, G.RESOURCE_NAME, G.LIMIT FROM PWD_LIFE_TIME L, PWD_GRACE_TIME G WHERE L.CON_ID = G.CON_ID AND L.PROFILE = G.PROFILE AND L.LIMIT + G.LIMIT > 365 ORDER BY L.CON_ID, L.PROFILE, L.RESOURCE_NAME; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_LIFE_TIME 365; OR ALTER PROFILE <profile_name> LIMIT PASSWORD_GRACE_TIME <NEW_VALUE>; Default Value: 180  References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e861",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e861",
    "function_names": [
      "iam_password_policy_lifetime_grace_within_365d",
      "iam_password_policy_lifetime_grace_combined_valid",
      "iam_password_policy_lifetime_grace_compliance_check",
      "iam_password_policy_lifetime_grace_max_365d",
      "iam_password_policy_lifetime_grace_valid_duration"
    ]
  },
  {
    "id": "3.4",
    "title": "Ensure 'PASSWORD_REUSE_MAX' Is Set To 'UNLIMITED'",
    "assessment": "Automated",
    "description": "The PASSWORD_REUSE_MAX setting determines how many different passwords must be used before the user is allowed to reuse a prior password. The suggested value for this is UNLIMITED.",
    "rationale": "Allowing reuse of a password within a short period of time after the password's initial use can make the success of both social-engineering and brute-force password-based attacks more likely.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(P.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM CDB_PROFILES P WHERE TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_REUSE_MAX' AND CON_ID = P.CON_ID), 'UNLIMITED','9999',P.LIMIT)) < 9999 AND P.RESOURCE_NAME = 'PASSWORD_REUSE_MAX' ORDER BY CON_ID, PROFILE, RESOURCE_NAME; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE <profile_name> LIMIT PASSWORD_REUSE_MAX 'UNLIMITED'; Default Value: UNLIMITED  References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e891 Additional Information: The above restriction should be applied along with the PASSWORD_REUSE_TIME setting, which should also be set to UNLIMITED.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e891 Additional Information: The above restriction should be applied along with the PASSWORD_REUSE_TIME setting, which should also be set to UNLIMITED.",
    "function_names": [
      "iam_password_policy_reuse_unlimited",
      "iam_password_policy_no_reuse",
      "iam_password_policy_max_reuse_unlimited",
      "iam_password_policy_reuse_restricted",
      "iam_password_policy_reuse_disabled"
    ]
  },
  {
    "id": "3.5",
    "title": "Ensure 'PASSWORD_VERIFY_FUNCTION' Is Set For All Profiles",
    "assessment": "Automated",
    "description": "The PASSWORD_VERIFY_FUNCTION enforces password complexity checks when a database account's password is changed. It should be set for all profiles. Note that this setting does not apply to administrative roles (like SYSDBA, SYSDG or SYSOPER) authenticated by the Oracle password file. From 12.2, Oracle provides password complexity rules for password file users (Doc 2294754.1)",
    "rationale": "Through Oracle Database profiles, password complexity rules (mixed cases with digits and special characters), blocking of simple combinations, and enforcing change/history settings can potentially thwart unauthorized logins by an unauthorized user.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(P.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM SYS.CDB_PROFILES P WHERE  RESOURCE_NAME='PASSWORD_VERIFY_FUNCTION' AND P.LIMIT = 'NULL' ORDER BY CON_ID, PROFILE, RESOURCE_NAME; To be compliant with this recommendation, the output of this command should be NULL. Lack of results indicates compliance.",
    "remediation": "Use the password verification function, or create a custom password verification function which fulfills the password requirements of the organization. Oracle supplies two password verification functions with the database ora12c_verify_function and ora12c_strong_verify_function. You may also create your own function if your organization's standards are different from the functions Oracle supplies. For a sample of a password verification function that you can customize to meet your needs, see $ORACLE_HOME/rdbms/admin/catpvf.sql. In most cases, we recommend that ora12c_strong_verify_function be used.  References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e997",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e997",
    "function_names": [
      "database_profile_password_verify_function_enabled",
      "database_profile_password_verify_function_set_all",
      "database_profile_password_complexity_enabled",
      "database_profile_password_verify_function_configured",
      "database_profile_password_policy_enforced"
    ]
  },
  {
    "id": "3.6",
    "title": "Ensure 'PASSWORD_VERIFY_FUNCTION' Is Configured Correctly",
    "assessment": "Manual",
    "description": "The setting PASSWORD_VERIFY_FUNCTION is used to enable password complexity verification. If using a custom verification function, it's important to ensure that the complexity function meets your organization's policy for password complexity. Review the code to ensure that the password verification function meets the password complexity rules that have been set for your organization.",
    "rationale": "Having strong password management for users will protect against attackers' brute force techniques. This is important especially if external authentication is not possible to implement due to application requirements or restrictions.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(CON_ID)) AS CONTAINERNAME, LINE, TEXT FROM CDB_SOURCE WHERE (CON_ID,NAME) IN ( SELECT DISTINCT CON_ID, LIMIT FROM SYS.CDB_PROFILES WHERE RESOURCE_NAME='PASSWORD_VERIFY_FUNCTION' AND (LIMIT IS NOT NULL OR LIMIT != 'DEFAULT')) ORDER BY CON_ID, NAME, LINE ; To be compliant with this recommendation, review the code to ensure that the function meets your organization's password complexity requirements..",
    "remediation": "If you discover profiles using verification functions that do not meet your organization's standards, you may remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. This will cause accounts assigned those profiles to use the ora12c_strong_verify_function. The next time that account's password is changed, the new function will validate that they meet standards. ALTER PROFILE <profile_name> LIMIT PASSWORD_VERIFY_FUNCTION ORA12C_STRONG_VERIFY_FUNCTION;  Default Value: NULL References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-authentication.html#GUID-F48598E4-2D72- 4A3B-8904-AD6D2C67D715 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e997",
    "profile_applicability": "•  Level 1 - RDBMS On Linux Host OS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-authentication.html#GUID-F48598E4-2D72- 4A3B-8904-AD6D2C67D715 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- PROFILE.html#d387296e997",
    "function_names": [
      "iam_password_policy_password_verify_function_configured",
      "iam_password_policy_complexity_requirements_met",
      "iam_password_policy_custom_verification_function_valid",
      "iam_password_policy_minimum_complexity_enforced",
      "iam_password_policy_organization_requirements_compliant"
    ]
  },
  {
    "id": "3.7",
    "title": "Ensure 'PASSWORD_ROLLOVER_TIME' Is set to '0'",
    "assessment": "Automated",
    "description": "This setting PASSWORD_ROLLOVER_TIME enables the gradual database password rollover time allowing both the new and old password to be used for a set period of time after a password is changed. This capability is not normally appropriate for human actors, but is frequently valuable for application and batch processing service accounts.",
    "rationale": "With the need to change passwords at some frequency and the goal to limit downtime for applications operating across multiple tiers it is necessary to have an overlap period where both the new and old passwords are accepted. This allows time for all tiers supporting the application to be updated to use the new password. Impact: Configuring this setting could result in application account lockouts which may impact the service(s) provided by the application. To minimize the impact, you may set this setting to a sufficiently higher value for you to update applications and batch processes to use new passwords after a password change.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(P.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM SYS.CDB_PROFILES P WHERE  TO_NUMBER(DECODE(P.LIMIT,'DEFAULT',(SELECT LIMIT FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='PASSWORD_ROLLOVER_TIME' AND CON_ID = P.CON_ID), P.LIMIT)) > 0 AND RESOURCE_NAME='PASSWORD_ROLLOVER_TIME' ORDER BY CON_ID, PROFILE, RESOURCE_NAME;",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE DEFAULT LIMIT PASSWORD_ROLLOVER_TIME 0;  Default Value: 0 or NULL References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-authentication.html#d23067e2021",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Configuring this setting could result in application account lockouts which may impact the service(s) provided by the application. To minimize the impact, you may set this setting to a sufficiently higher value for you to update applications and batch processes to use new passwords after a password change.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-authentication.html#d23067e2021"
  },
  {
    "id": "3.8",
    "title": "Ensure 'INACTIVE_ACCOUNT_TIME' Is Less than or Equal to '120'",
    "assessment": "Automated",
    "description": "The INACTIVE_ACCOUNT_TIME parameter in Oracle specifies the number of days an account can remain inactive before it is automatically locked. This setting helps mitigate security risks by reducing the exposure of unused accounts, which could be exploited for unauthorized access.",
    "rationale": "Inactive user accounts pose security risks as they can be potentially targeted by the attackers for unauthorized access. Setting a reasonable threshold for inactivity helps enforce security best practices by ensuring that unused accounts are locked before they can be potentially targeted for unauthorized access. A value of 120 days or less strikes a balance between security and operational flexibility. Impact: If an account is locked due to inactivity, administrators may need to manually unlock it when required. Organizations should communicate this policy to users to avoid disruptions.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT DECODE(P.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(P.CON_ID)) AS CONTAINERNAME, P.PROFILE, P.RESOURCE_NAME, P.LIMIT FROM SYS.CDB_PROFILES P WHERE RESOURCE_NAME='INACTIVE_ACCOUNT_TIME' AND TO_NUMBER(DECODE(P.LIMIT, 'DEFAULT',(SELECT DECODE(LIMIT,'UNLIMITED',9999,LIMIT) FROM CDB_PROFILES WHERE PROFILE='DEFAULT' AND RESOURCE_NAME='INACTIVE_ACCOUNT_TIME' AND CON_ID = P.CON_ID), 'UNLIMITED',9999, P.LIMIT)) > 120 ORDER BY CON_ID, PROFILE, RESOURCE_NAME;",
    "remediation": "Remediate this setting by executing the following SQL statement for each PROFILE returned by the audit procedure. ALTER PROFILE DEFAULT LIMIT INACTIVE_ACCOUNT_TIME 120 Default Value: The default value may vary based on Oracle versions and configurations. References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-authentication.html#d23067e2021",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "If an account is locked due to inactivity, administrators may need to manually unlock it when required. Organizations should communicate this policy to users to avoid disruptions.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-authentication.html#d23067e2021",
    "function_names": [
      "oracle_database_account_inactive_lock_threshold",
      "oracle_database_account_inactive_lock_max_120d",
      "oracle_database_account_inactive_lock_enabled",
      "oracle_database_account_inactive_lock_compliance",
      "oracle_database_account_inactive_lock_time_limit"
    ]
  },
  {
    "id": "4.1",
    "title": "Ensure All Default Passwords Are Changed",
    "assessment": "Automated",
    "description": "Default passwords should not be used by Oracle database users. Leaving default passwords unchanged can create significant security vulnerabilities by allowing unauthorized access to the database.",
    "rationale": "Default passwords are widely known and documented. If left unchanged, any malicious user with database access can authenticate using these default credentials, potentially leading to unauthorized data access, privilege escalation, or database compromise.",
    "audit": "To check for accounts still using default passwords, execute the following SQL statement: SELECT DECODE(C.CON_ID,0,'ENTIRE-'||SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(C.CON_ID)) AS CONTAINERNAME, A.USERNAME, C.ACCOUNT_STATUS FROM CDB_USERS_WITH_DEFPWD A, CDB_USERS C WHERE A.USERNAME = C.USERNAME ORDER BY C.CON_ID; Lack of results implies compliance.",
    "remediation": "To reset the account with NO AUTHENTICATION, execute the following SQL statement in CDB: ALTER USER <USERNAME> NO AUTHENTICATION; Notes: • As per Oracle Support Document 2173962.1, newly created database may list SYS and SYSTEM in CBA_USERS_WITH_DEFPWD even if they were set with non- default passwords. Running ALTER USER with the same password will correctly recognize these accounts as non-default. • If remote_password_file is set to NONE, changing the SYS password via ALTER USER is not possible. In this case, update remote_password_file to EXCLUSIVE before modifying the SYS password.  References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html 2. https://support.oracle.com/epmos/faces/DocumentDisplay?id=2173962.1",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html 2. https://support.oracle.com/epmos/faces/DocumentDisplay?id=2173962.1",
    "function_names": [
      "oracle_database_user_default_password_changed",
      "oracle_database_user_no_default_passwords",
      "oracle_database_user_password_not_default",
      "oracle_database_user_default_credentials_removed",
      "oracle_database_user_password_changed_from_default"
    ]
  },
  {
    "id": "4.2",
    "title": "Ensure No Custom 'ORACLE_MAINTAINED' Users Exist",
    "assessment": "Automated",
    "description": "Oracle-maintained accounts should not be created. The ORACLE_MAINTAINED flag is used to identify such accounts. Only users provided by Oracle should have this flag set to Y. Custom database users should not be assigned this designation.",
    "rationale": "Oracle-maintained accounts are used by internal tools, database packages, procedures, and third-party software to make critical decisions. For example: • Data Pump often excludes objects marked as ORACLE_MAINTAINED. • Oracle upgrades and patches may modify or delete objects marked with this flag. • Custom schemas should not use this flag, as it can lead to unintended system behavior, including unauthorized modifications during maintenance activities. Some organizations attempt to create custom ORACLE_MAINTAINED users to bypass the C##-prefix requirement for common users. However, misusing this flag can introduce security risks and operational issues. It can impact proper functioning and integrity of Oracle databases. Impact: Dropping a user may result in data loss or impact application availability, requiring thorough assessment before taking action. You may need to export all objects owned by common users in the CDB and all PDBs before making changes.",
    "audit": "To assess this recommendation, execute the following SQL statement:  SELECT CON_ID_TO_CON_NAME(C.CON_ID) AS CONTAINERNAME,USERNAME, FROM CDB_USERS C WHERE ORACLE_MAINTAINED = 'Y' AND USERNAME NOT IN ( 'ANONYMOUS', 'APEX_LISTENER', 'APEX_PUBLIC_USER','APEX_REST_PUBLIC_USER', 'APEX_230200', 'APEX_240100', 'APEX_PUBLIC_ROUTER', 'APPQOSSYS','AUDSYS', 'CTXSYS', 'DBSFWUSER', 'DBSNMP', 'DGPDB_INT', 'DIP', 'DVF', 'DVSYS', 'FLOWS_FILES', 'GGSHAREDCAP', 'GGSYS', 'GSMADMIN_INTERNAL', 'GSMCATUSER', 'GSMROOTUSER', 'GSMUSER', 'LBACSYS', 'MDDATA', 'MDSYS', 'OJVMSYS', 'OLAPSYS', 'OUTLN', 'REMOTE_SCHEDULER_AGENT', 'SYS', 'SYSBACKUP', 'SYSDG', 'SYSKM', 'SYSRAC', 'SYSTEM', 'SYS$UMF', 'VECSYS', 'WMSYS', 'XDB', 'XS$NULL' ) ORDER BY 1; A lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement. DROP USER <USERNAME> ;",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Dropping a user may result in data loss or impact application availability, requiring thorough assessment before taking action. You may need to export all objects owned by common users in the CDB and all PDBs before making changes.",
    "function_names": [
      "database_user_no_oracle_maintained_flag",
      "database_user_oracle_maintained_standard_only",
      "database_user_custom_no_oracle_maintained",
      "database_user_oracle_maintained_default_only"
    ]
  },
  {
    "id": "4.3",
    "title": "Review The Users Created Through Real Application Security",
    "assessment": "Manual",
    "description": "Oracle Real Application Security (RAS) introduces an alternative user model that allows users to log in directly (e.g., with SQL*Plus) when DIRECT_LOGON = YES. RAS users do not appear in the DBA_USERS or CDB_USERS views and are not created using the standard CREATE USER command, making them difficult to detect. To ensure proper security monitoring, the CDB_XS_USERS view should be reviewed regularly.",
    "rationale": "RAS users are not visible in traditional DBA_USERS or CDB_USERS views. Privileges for RAS users are stored and displayed separately from standard database users. Without regular monitoring, unauthorized or unintended RAS users may remain undetected. Security assessments must include RAS-related views, such as CDB_XS_USERS and DBA_XS_USERS, to analyze users and their authorizations. Impact: Dropping a RAS user may result in data loss or impact application availability, requiring thorough assessment before taking action. Some applications or scripts may rely on RAS users for specific tasks. Removing it may break these applications, requiring modifications or redesign.",
    "audit": "To assess this recommendation, execute the following statement: SELECT DECODE(C.CON_ID,0,'ENTIRE-'|| SYS_CONTEXT('USERENV','DB_NAME'), 1,'ROOTONLY-'||SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(C.CON_ID)) AS CONTAINERNAME, C.NAME, C.DIRECT_LOGON_USER, C.STATUS, ACCOUNT_STATUS FROM CDB_XS_USERS C WHERE C.NAME NOT IN ('XSGUEST'); Review the list of RAS users. If any unauthorized user exists, this is a fail.",
    "remediation": "Remove RAS-Users that are not needed. BEGIN SYS.XS_PRINCIPAL.DELETE_PRINCIPAL(' <rasuser> '); END;  Default Value: Empty References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbfsg/predefined- objects-in-real-application-security.html#GUID-7B011292-C771-4B88-8CFA- 0CA30782773C 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbfsg/real- application-security-hr-demo.html#GUID-FA992EC6-83D5-4465-86D8- 334EAA195C41",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Dropping a RAS user may result in data loss or impact application availability, requiring thorough assessment before taking action. Some applications or scripts may rely on RAS users for specific tasks. Removing it may break these applications, requiring modifications or redesign.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbfsg/predefined- objects-in-real-application-security.html#GUID-7B011292-C771-4B88-8CFA- 0CA30782773C 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbfsg/real- application-security-hr-demo.html#GUID-FA992EC6-83D5-4465-86D8- 334EAA195C41",
    "function_names": [
      "oracle_ras_user_direct_logon_disabled",
      "oracle_ras_user_regular_review_required",
      "oracle_ras_user_cdb_xs_users_monitored",
      "oracle_ras_user_standard_creation_enforced",
      "oracle_ras_user_non_standard_detection_enabled"
    ]
  },
  {
    "id": "4.4",
    "title": "Ensure Old Password Versions Are Not Used",
    "assessment": "Automated",
    "description": "No password versions (hashes) prior to 12c should be allowed for user authentication.",
    "rationale": "Oracle 12c and later versions enforce stronger password hashing algorithms and complexity policies, enhancing security. Older password versions (pre-12c) are considered weak and do not meet modern security standards.Using outdated password versions increases the risk of password compromise. Impact: Resetting user passwords without proper migration planning may result in application downtime or loss of access. Users with passwords hashed in an older format will be required to reset their passwords. Limiting authentication to 12c password versions may impact connectivity from older clients that rely on deprecated authentication mechanisms. Applications using pre-12c authentication methods must be updated to support 12c or later password hashing mechanisms.",
    "audit": "To assess this recommendation, execute the following SQL statement: SELECT DECODE(C.CON_ID, 0, 'ENTIRE-' || SYS_CONTEXT('USERENV','DB_NAME'), 1, 'ROOTONLY-' || SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(C.CON_ID)) AS CONTAINERNAME, C.USERNAME, C.PASSWORD_VERSIONS FROM CDB_USERS C WHERE C.PASSWORD_VERSIONS NOT IN ('12C') ORDER BY C.CON_ID; A lack of results implies compliance.",
    "remediation": "Follow the process \"Finding and Resetting User Passwords That Use the 10G Password Version\" as outlined in the Oracle Database Upgrade Guide to reset affected user passwords and enforce 12c password versioning. • Identify users with old password versions. • Ensure that SQLNET.ALLOWED_LOGON_VERSION_SERVER is set to 12.  • Reset their passwords using the ALTER USER command. References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/upgrd/recommended-and-best-practices-complete-upgrading- oracle-database.html#GUID-D7B09DFE-F55D-449A-8F8A-174D89936304",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Resetting user passwords without proper migration planning may result in application downtime or loss of access. Users with passwords hashed in an older format will be required to reset their passwords. Limiting authentication to 12c password versions may impact connectivity from older clients that rely on deprecated authentication mechanisms. Applications using pre-12c authentication methods must be updated to support 12c or later password hashing mechanisms.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/upgrd/recommended-and-best-practices-complete-upgrading- oracle-database.html#GUID-D7B09DFE-F55D-449A-8F8A-174D89936304",
    "function_names": [
      "iam_user_password_no_old_versions",
      "database_user_password_no_old_hashes",
      "authentication_password_no_legacy_versions",
      "user_password_no_pre_12c_hashes",
      "identity_password_no_old_versions"
    ]
  },
  {
    "id": "4.5",
    "title": "Ensure The Latest Version of The Password File Is Used",
    "assessment": "Automated",
    "description": "The database password file is used to authenticate users with administrative privileges (SYSDBA, SYSOPER, etc.) from a remote machine. It enables secure remote database management and contains a list of privileged users with their corresponding encrypted passwords. Starting with Oracle 12.2, Oracle enforces stronger password hashing algorithms in password files to improve security. It is recommended to ensure that the password file format is updated to 12.2 to leverage enhanced security mechanisms.",
    "rationale": "Ensuring that the password file format is 12.2 provides the following benefits: • Enhanced security: Passwords are stored using a stronger hashing algorithm. • Compliance with best practices: The latest format ensures compatibility with the recommended security settings. • Ability to grant administrative privileges (SYSOPER, SYSBACKUP, etc.) to global users securely. Impact: In environments using ASM, RAC, or RMAN, upgrading the password file format may require additional considerations. Existing users in the password file must already have passwords that comply with 12.2 format before upgrading. Any changes to the password file format should be thoroughly tested in a non- production environment before implementation.",
    "audit": "To assess this recommendation, execute the following statement: SELECT inst_id,format FROM GV$PASSWORDFILE_INFO WHERE FORMAT !='12.2'; A lack of results implies compliance.",
    "remediation": "To update the password file to the latest format (12.2), follow these steps: • Ensure that all users in the password file have passwords meeting 12.2 complexity requirements. • Use the orapwd utility to create a new password file in 12.2 format: orapwd file=orapwd122 FORMAT=12.2 • If the password file name or location has recently changed and the changes are not reflected, refresh the metadata cache: ALTER SYSTEM FLUSH PASSWORDFILE_METADATA_CACHE; • Validate the password file format using the audit query again. Default Value: 12.2 References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/refrn/V- PASSWORDFILE_INFO.html#GUID-726CF0F6-14A4-465B-B46B- E2AC8CFFD27A",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "In environments using ASM, RAC, or RMAN, upgrading the password file format may require additional considerations. Existing users in the password file must already have passwords that comply with 12.2 format before upgrading. Any changes to the password file format should be thoroughly tested in a non- production environment before implementation.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/refrn/V- PASSWORDFILE_INFO.html#GUID-726CF0F6-14A4-465B-B46B- E2AC8CFFD27A",
    "function_names": [
      "database_password_file_latest_version_used",
      "database_password_file_format_12_2",
      "database_password_file_strong_hashing_enabled",
      "database_password_file_secure_format",
      "database_password_file_updated_format"
    ]
  },
  {
    "id": "4.6",
    "title": "Ensure That Users In Different RAC Instances Are Identical In PW Files",
    "assessment": "Manual",
    "description": "In Oracle Real Application Clusters (RAC) environments, each instance maintains its own password file for authenticating users with administrative privileges (SYSDBA, SYSOPER, SYSBACKUP, etc.). If password files are not synchronized across all RAC nodes, certain administrative users may exist on only one node, causing authentication failures when attempting to log in from other nodes. To ensure seamless remote administration and high availability, all RAC instances must have identical password files.",
    "rationale": "Maintaining identical password files across all RAC nodes ensures consistent authentication for administrative users across all nodes and remote management of the database without login failures. Impact: If password files are not synchronized, privileged users may be unable to authenticate on certain RAC nodes.",
    "audit": "To assess this recommendation, execute the following SQL statement: SELECT * FROM GV$PWFILE_USERS; If any users are not identical across RAC Instances, this is a fail.",
    "remediation": "After changes to the password file, all nodes should be synchronized. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/refrn/V- PWFILE_USERS.html#GUID-C8D29599-13BD-493A-BE23-0F16BDDA7725",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "If password files are not synchronized, privileged users may be unable to authenticate on certain RAC nodes.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/refrn/V- PWFILE_USERS.html#GUID-C8D29599-13BD-493A-BE23-0F16BDDA7725",
    "function_names": [
      "rac_password_file_users_identical",
      "rac_instance_password_file_synced",
      "rac_user_credentials_consistent",
      "rac_password_file_uniformity",
      "rac_admin_users_synchronized",
      "rac_password_file_identical_all_nodes",
      "rac_instance_user_credentials_matched",
      "rac_password_file_consistency",
      "rac_admin_privileges_uniform",
      "rac_password_file_synchronization"
    ]
  },
  {
    "id": "4.7",
    "title": "Ensure No Public Database Links Exist",
    "assessment": "Automated",
    "description": "Public database links provide a mechanism for establishing connections between databases, enabling data access across multiple environments.",
    "rationale": "Public database links pose a security risk because they allow any database user to execute queries or modify data on a remote database, depending on the credentials stored in the link. This can lead to unauthorized access, data breaches, and compliance violations. Impact: Applications relying on public database links may fail after removal. Alternative connection methods (e.g., private database links) may need to be implemented.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement. SELECT DECODE(V.CON_ID, 0, 'ENTIRE-' || SYS_CONTEXT('USERENV','DB_NAME'), 1, 'ROOTONLY-' || SYS_CONTEXT('USERENV','DB_NAME'), CON_ID_TO_CON_NAME(V.CON_ID)) AS CONTAINERNAME, DB_LINK, HOST FROM CDB_DB_LINKS V WHERE OWNER = 'PUBLIC'; Lack of results implies compliance.",
    "remediation": "To remove a public database link, execute the following SQL command:  DROP PUBLIC DATABASE LINK <DB_LINK> ;",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Applications relying on public database links may fail after removal. Alternative connection methods (e.g., private database links) may need to be implemented.",
    "function_names": [
      "database_link_public_access_disabled",
      "database_link_public_visibility_disabled",
      "database_link_no_public_endpoint",
      "database_link_private_network_only",
      "database_link_public_sharing_disabled",
      "database_link_external_access_restricted",
      "database_link_public_ip_disabled",
      "database_link_network_isolation_enabled"
    ]
  },
  {
    "id": "4.8",
    "title": "Ensure That Database Link Passwords Are Using The Latest Encryption",
    "assessment": "Automated",
    "description": "In Oracle databases prior to version 23ai, encrypted passwords for database links are stored in the PASSWORDX column, which can be decrypted. Oracle 23ai enhances security by storing encrypted database link passwords in the SPARE1 column, making decryption significantly more difficult.",
    "rationale": "Using the latest encryption method for database link passwords reduces the risk of credential exposure. Attackers who gain access to PASSWORDX can potentially decrypt and misuse stored credentials for unauthorized access. Impact: If a database link password is stored using an older encryption method, it could be decrypted and exploited, posing a security risk.",
    "audit": "To verify if database link passwords are still using the PASSWORDX column for encryption, execute the following SQL statement: SELECT DECODE(v.con_id, 0, 'Entire-' || SYS_CONTEXT('USERENV', 'DB_NAME'), 1, 'RootOnly-' || SYS_CONTEXT('USERENV', 'DB_NAME'), CON_ID_TO_CON_NAME(v.con_id)) AS container_name, name AS db_link, host, userid FROM CONTAINERS(\"SYS\".\"LINK$\") v WHERE passwordx IS NOT NULL; Lack of results implies compliance.",
    "remediation": "After upgrading to Oracle 23ai, drop and recreate the database link to ensure that passwords are encrypted using the latest method.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "If a database link password is stored using an older encryption method, it could be decrypted and exploited, posing a security risk.",
    "function_names": [
      "database_link_password_encrypted_latest",
      "database_link_password_encrypted_spare1",
      "database_link_password_no_passwordx",
      "database_link_password_encrypted_oracle_23ai",
      "database_link_password_encrypted_min_version_23ai"
    ]
  },
  {
    "id": "5.1",
    "title": "Ensure All Auditable System Actions Commands Are Audited",
    "assessment": "Automated",
    "description": "Oracle defines (*) the various command categories such as DDL, DML, TCL, etc. partly deviating from the ANSI standard. However, these command categories are incomplete and only represent a part of the auditable commands. For this reason, the term “Auditable System Actions” is used in the following. This type of definition allows a flexible and future-oriented possibility to add new commands and commands that will be added to future patch sets. According to the Oracle definition* of Data Definition Language (DDL) statements, these tasks can be performed by definition: • Create, modify and delete schema object • Granting and revoking privileges and roles • Analyze information about a table, index or cluster • Setting up auditing options • Adding comments to the data dictionary https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/Types-of- SQL-Statements.html Enabling this unified action audit causes logging of all DDL commands, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to issue such statements.",
    "rationale": "Logging and monitoring of all attempts to perform these DDL commands, whether successful or unsuccessful, may provide clues and forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all activities involving these DDL commands. Impact: Auditing all DDL can result in rapid growth of the audit trail, particularly in active or dynamic environments. This may lead to storage management challenges and require regular maintenance (e.g., purging or archiving old audit records). The audit trail may consume excessive space, leading to issues such as system slowdowns or errors when storage limits are reached if it is not carefully managed.",
    "audit": "To assess this recommendation, execute the following SQL statement: WITH PRIVS(PRIVILEGE) AS ( SELECT DISTINCT A.PRIVILEGE AS NAME FROM DBA_SYS_PRIVS A WHERE A.PRIVILEGE NOT IN (SELECT NAME FROM AUDITABLE_SYSTEM_ACTIONS WHERE COMPONENT='Standard') AND PRIVILEGE NOT IN ('INHERIT ANY PRIVILEGES') UNION SELECT A.NAME FROM AUDITABLE_SYSTEM_ACTIONS A WHERE COMPONENT='Standard' AND A.NAME NOT IN ('ALL','SELECT','DELETE','INSERT','UPDATE','EXECUTE','LOGON','LOGOFF') ), CIS_AUDIT(CONTAINERNAME, CON_ID, AUDIT_OPTION) AS( SELECT C.NAME, C.CON_ID, LL.PRIVILEGE FROM V$CONTAINERS C, PRIVS LL WHERE C.OPEN_MODE='READ WRITE' ), AUDIT_ENABLED AS ( SELECT DISTINCT AUD.CON_ID, AUDIT_OPTION FROM CONTAINERS(AUDIT_UNIFIED_POLICIES) AUD WHERE AUD.AUDIT_OPTION IN (SELECT PRIVILEGE FROM PRIVS ) AND AUD.AUDIT_OPTION_TYPE IN ('SYSTEM PRIVILEGE','STANDARD ACTION') AND EXISTS (SELECT ENABLED.* FROM CONTAINERS(AUDIT_UNIFIED_ENABLED_POLICIES) ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND ENABLED.POLICY_NAME = AUD.POLICY_NAME AND ENABLED.CON_ID = AUD.CON_ID) ) SELECT C.CONTAINERNAME, C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION AND E.CON_ID = C.CON_ID WHERE E.AUDIT_OPTION IS NULL ORDER BY 1, 2; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this recommendation: ALTER AUDIT POLICY CIS_LOCAL_SYSTEM_ACTIONS ADD ACTIONS <DDL> ; or  ALTER AUDIT POLICY CIS_LOCAL_SYSTEM_ACTIONS ADD PRIVILEGES <DDL> ; Note: If you do not have CIS_LOCAL_SYSTEM_ACTIONS, please create one using the CREATE AUDIT POLICY statement. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/Types-of- SQL-Statements.html#GUID-FD9A8CB4-6B9A-44E5-B114-EFB8DA76FC88 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/AUDIT- Unified-Auditing.html Additional Information: Check for EXCEPTION, as it may disable auditing for certain users. SELECT POLICY_NAME, ENABLED_OPTION, ENTITY_NAME FROM AUDIT_UNIFIED_ENABLED_POLICIES WHERE ENABLED_OPTION = 'EXCEPT USER';",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Auditing all DDL can result in rapid growth of the audit trail, particularly in active or dynamic environments. This may lead to storage management challenges and require regular maintenance (e.g., purging or archiving old audit records). The audit trail may consume excessive space, leading to issues such as system slowdowns or errors when storage limits are reached if it is not carefully managed.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/Types-of- SQL-Statements.html#GUID-FD9A8CB4-6B9A-44E5-B114-EFB8DA76FC88 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/AUDIT- Unified-Auditing.html Additional Information: Check for EXCEPTION, as it may disable auditing for certain users. SELECT POLICY_NAME, ENABLED_OPTION, ENTITY_NAME FROM AUDIT_UNIFIED_ENABLED_POLICIES WHERE ENABLED_OPTION = 'EXCEPT USER';",
    "function_names": [
      "database_audit_all_system_actions_enabled",
      "database_audit_ddl_commands_logged",
      "database_audit_dml_commands_logged",
      "database_audit_tcl_commands_logged",
      "database_audit_privilege_changes_logged",
      "database_audit_schema_modifications_logged",
      "database_audit_failed_commands_logged",
      "database_audit_unified_action_audit_enabled",
      "database_audit_future_commands_included",
      "database_audit_data_dictionary_comments_logged"
    ]
  },
  {
    "id": "5.2",
    "title": "Ensure the 'LOGON' AND 'LOGOFF' Actions Audit Is Enabled",
    "assessment": "Automated",
    "description": "Oracle database users log on to the database to perform their work. Enabling this unified audit causes logging of all LOGON actions, whether successful or unsuccessful, issued by the users regardless of the privileges held by the users to log into the database. In addition, LOGOFF and LOGOFF BY CLEANUP action audit captures logoff activities. This audit action also captures logon/logoff to the open database by SYSDBA and SYSOPER.",
    "rationale": "Logging and monitoring of all attempts to logon to the database, whether successful or unsuccessful, may provide forensic evidence about potential suspicious/unauthorized activities. Any such activities may be a cause for further investigation. In addition, organization security policies and industry/government regulations may require logging of all user activities involving LOGON, LOGOFF and LOGOFF BY CLEANUP.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(CONTAINERNAME, CON_ID, AUDIT_OPTION) AS( SELECT C.NAME, C.CON_ID, LL.* FROM V$CONTAINERS C, TABLE(DBMSOUTPUT_LINESARRAY('LOGON','LOGOFF')) LL WHERE C.OPEN_MODE='READ WRITE' ), AUDIT_ENABLED AS ( SELECT DISTINCT AUD.CON_ID, AUDIT_OPTION FROM CONTAINERS(AUDIT_UNIFIED_POLICIES) AUD WHERE AUD.AUDIT_OPTION IN ('LOGON','LOGOFF') AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND EXISTS (SELECT ENABLED.* FROM CONTAINERS(AUDIT_UNIFIED_ENABLED_POLICIES) ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND ENABLED.POLICY_NAME = AUD.POLICY_NAME AND ENABLED.CON_ID = AUD.CON_ID) ) SELECT C.CONTAINERNAME, C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION AND E.CON_ID = C.CON_ID WHERE E.AUDIT_OPTION IS NULL ORDER BY 1, 2; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this setting. Run the following query in the CDB and in each PDB: CREATE AUDIT POLICY CIS_CDB_LOGON_LOGOFF ACTIONS LOGON, LOGOFF ACTIONS COMPONENT=PROTOCOL HTTP, FTP, AUTHENTICATION; AUDIT POLICY CIS_CDB_LOGON_LOGOFF; Note: If you do not have CIS_CDB_LOGON_LOGOFF, please create one using the CREATE AUDIT POLICY statement. Refer to Section 8.2 where a PL/SQL block is provided to help create or modify the audit policy to remediate this item in both container and pluggable database.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "function_names": [
      "database_audit_logon_enabled",
      "database_audit_logoff_enabled",
      "database_audit_logon_logoff_enabled",
      "database_audit_sysdba_logon_enabled",
      "database_audit_sysoper_logon_enabled",
      "database_audit_unified_logon_enabled",
      "database_audit_unified_logoff_enabled",
      "database_audit_unified_logon_logoff_enabled"
    ]
  },
  {
    "id": "5.3",
    "title": "Ensure Critical Packages Are Audited",
    "assessment": "Automated",
    "description": "Auditing critical packages in Oracle is essential to ensure database security, maintain accountability, and support compliance with regulatory requirements. These packages provide powerful functionality, such as scheduling jobs, performing cryptographic operations, or handling web-based utilities where, if misused or exploited, can compromise the integrity, confidentiality, and availability of the database. Auditing these critical packages is recommended; however, it should be enabled based on the specific needs and requirements of the organization: • SYS.DBMS_AW • SYS.DBMS_CRYPTO • SYS.DBMS_FGA • SYS.DBMS_JAVA_TEST • SYS.DBMS_JOB • SYS.DBMS_LOGMNR • SYS.DBMS_NETWORK_ACL_ADMIN • SYS.DBMS_REDACT • SYS.DBMS_REDEFINITION • SYS.DBMS_RLS • SYS.DBMS_SCHEDULER • SYS.DBMS_SQL_TRANSLATOR • SYS.DBMS_SYS_SQL • SYS.DBMS_TSDP_MANAGE • SYS.DBMS_TSDP_PROTECT • SYS.DBMS_XMLGEN • SYS.DBMS_XMLSTORE • SYS.OWA_UTIL",
    "rationale": "Auditing these packages helps monitor their usage, detect unauthorized access, and prevent potential misuse or security breaches. This practice also supports incident response and forensic investigations by maintaining a detailed record of package invocation, ensuring that critical operations are tracked and controlled in high-security environments.  Impact: Auditing system packages generates additional logs, which can impact system performance, especially in high-transaction environments. Auditing can introduce slight delays in query execution due to the extra logging steps.",
    "audit": "To assess this recommendation, execute the following SQL statement. WITH CIS_AUDIT(NAME, CON_ID, AUDIT_OBJECT_NAME) AS( SELECT C.NAME, C.CON_ID, LL.* FROM V$CONTAINERS C, TABLE(DBMSOUTPUT_LINESARRAY('DBMS_AW','DBMS_CRYPTO','DBMS_FGA', 'DBMS_JAVA_TEST','DBMS_JOB','DBMS_LOGMNR', 'DBMS_NETWORK_ACL_ADMIN','DBMS_REDACT','DBMS_REDEFINITION','DBMS_RLS', 'DBMS_SCHEDULER','DBMS_SQL_TRANSLATOR','DBMS_SYS_SQL','DBMS_TSDP_MANAGE', 'DBMS_TSDP_PROTECT','DBMS_XMLGEN','DBMS_XMLSTORE','OWA_UTIL') ) LL WHERE C.OPEN_MODE='READ WRITE' ), AUDIT_ENABLED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(AUD.CON_ID) AS CONTAINERNAME, AUDIT_OPTION, AUD.OBJECT_NAME, AUD.POLICY_NAME, AUD.CON_ID FROM CONTAINERS(AUDIT_UNIFIED_POLICIES) AUD WHERE AUD.OBJECT_NAME IN ('DBMS_AW','DBMS_CRYPTO','DBMS_FGA','DBMS_JAVA_TEST','DBMS_JOB','DBMS_LOGMNR' , 'DBMS_NETWORK_ACL_ADMIN','DBMS_REDACT','DBMS_REDEFINITION','DBMS_RLS', 'DBMS_SCHEDULER','DBMS_SQL_TRANSLATOR','DBMS_SYS_SQL','DBMS_TSDP_MANAGE', 'DBMS_TSDP_PROTECT','DBMS_XMLGEN','DBMS_XMLSTORE','OWA_UTIL') AND AUD.AUDIT_OPTION_TYPE = 'OBJECT ACTION' AND EXISTS (SELECT CON_ID_TO_CON_NAME(ENABLED.CON_ID) AS CONTAINERNAME, ENABLED.* FROM CONTAINERS(AUDIT_UNIFIED_ENABLED_POLICIES) ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND ENABLED.POLICY_NAME = AUD.POLICY_NAME AND ENABLED.CON_ID = AUD.CON_ID) ) SELECT C.NAME, C.AUDIT_OBJECT_NAME FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OBJECT_NAME = E.OBJECT_NAME AND E.CON_ID = C.CON_ID WHERE E.OBJECT_NAME IS NULL ORDER BY 1, 2; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement to remediate this recommendation:  CREATE AUDIT POLICY DRVADMIN_MIGHTY_PACKAGES ACTIONS EXECUTE ON SYS.DBMS_AW, EXECUTE ON SYS.DBMS_CRYPTO, EXECUTE ON SYS.DBMS_FGA, EXECUTE ON SYS.DBMS_JAVA_TEST, EXECUTE ON SYS.DBMS_JOB, EXECUTE ON SYS.DBMS_LOGMNR, EXECUTE ON SYS.DBMS_NETWORK_ACL_ADMIN, EXECUTE ON SYS.DBMS_OBFUSCATION_TOOLKIT, EXECUTE ON SYS.DBMS_REDACT, EXECUTE ON SYS.DBMS_REDEFINITION, EXECUTE ON SYS.DBMS_RLS, EXECUTE ON SYS.DBMS_SCHEDULER, EXECUTE ON SYS.DBMS_SQL_TRANSLATOR, EXECUTE ON SYS.DBMS_SYS_SQL, EXECUTE ON SYS.DBMS_TSDP_MANAGE, EXECUTE ON SYS.DBMS_TSDP_PROTECT, EXECUTE ON SYS.DBMS_XMLGEN, EXECUTE ON SYS.DBMS_XMLSTORE, EXECUTE ON SYS.OWA_UTIL ONLY TOPLEVEL; Default Value: These packages are not audited by default.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Auditing system packages generates additional logs, which can impact system performance, especially in high-transaction environments. Auditing can introduce slight delays in query execution due to the extra logging steps.",
    "function_names": [
      "oracle_database_critical_packages_audited",
      "oracle_database_critical_packages_audit_enabled",
      "oracle_database_dbms_aw_audited",
      "oracle_database_dbms_crypto_audited",
      "oracle_database_dbms_fga_audited",
      "oracle_database_dbms_java_test_audited",
      "oracle_database_dbms_job_audited",
      "oracle_database_dbms_logmnr_audited",
      "oracle_database_dbms_network_acl_admin_audited",
      "oracle_database_dbms_redact_audited",
      "oracle_database_dbms_redefinition_audited",
      "oracle_database_dbms_rls_audited",
      "oracle_database_dbms_scheduler_audited",
      "oracle_database_dbms_sql_translator_audited",
      "oracle_database_dbms_sys_sql_audited",
      "oracle_database_dbms_tsdp_manage_audited",
      "oracle_database_dbms_tsdp_protect_audited",
      "oracle_database_dbms_xmlgen_audited",
      "oracle_database_dbms_xmlstore_audited",
      "oracle_database_owa_util_audited"
    ]
  },
  {
    "id": "5.4",
    "title": "Ensure All Export Activities Are Audited",
    "assessment": "Automated",
    "description": "Auditing all export activities in Oracle is crucial for several security and compliance reasons such as data leakage prevention, accountability and traceability as well as compliance with regulations.",
    "rationale": "Auditing export activities helps to detect unauthorized use of export tools or RMAN to exfiltrate sensitive data during a security breach. Comprehensive auditing of these activities can help detect and mitigate such threats promptly. By implementing detailed auditing for export and RMAN activities, organizations can strengthen their security posture, safeguard sensitive data, and ensure compliance with regulatory and internal policies. Impact: Auditing export operations can introduce additional I/O and CPU usage, especially in large-volume exports.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(NAME, CON_ID, AUDIT_OPTION) AS( SELECT C.NAME, C.CON_ID, 'EXPORT' AS AUDIT_OPTION FROM V$CONTAINERS C WHERE C.OPEN_MODE='READ WRITE' ), AUDIT_ENABLED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(AUD.CON_ID) AS CONTAINERNAME, AUDIT_OPTION, AUD.POLICY_NAME, AUD.CON_ID FROM CONTAINERS(AUDIT_UNIFIED_POLICIES) AUD WHERE AUD.AUDIT_OPTION IN ('EXPORT') AND AUD.AUDIT_OPTION_TYPE = 'DATAPUMP ACTION' AND EXISTS (SELECT CON_ID_TO_CON_NAME(ENABLED.CON_ID) AS CONTAINERNAME, ENABLED.* FROM CONTAINERS(AUDIT_UNIFIED_ENABLED_POLICIES) ENABLED WHERE ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME = 'ALL USERS' AND ENABLED.POLICY_NAME = AUD.POLICY_NAME AND ENABLED.CON_ID = AUD.CON_ID) ) SELECT C.NAME, C.AUDIT_OPTION FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION AND E.CON_ID = C.CON_ID WHERE E.AUDIT_OPTION IS NULL ORDER BY 1, 2; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement in the CDB and in each PDB to remediate this recommendation: ALTER AUDIT POLICY CIS_CDB_EXPORT ADD ACTIONS COMPONENT=datapump EXPORT; Note: If you do not have CIS_CDB_EXPORT, please create one using the CREATE AUDIT POLICY statement. Refer to Section 8.4 where a PL/SQL block is provided to help create or modify the audit policy to remediate this item in both container and pluggable database. Default Value: Export datapump activities are not audited by default.  References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-audit-policies.html#GUID-AA781864-5756-464E- AFB6-675625AF0EF5 Additional Information: RMAN activities are subject to mandatory auditing as part of the ORA$MANDATORY audit policy, which is listed in the UNIFIED_AUDIT_POLITICES column of the UNIFIED_AUDIT_TRAIL data dictionary view. This policy cannot be disabled.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "Auditing export operations can introduce additional I/O and CPU usage, especially in large-volume exports.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-audit-policies.html#GUID-AA781864-5756-464E- AFB6-675625AF0EF5 Additional Information: RMAN activities are subject to mandatory auditing as part of the ORA$MANDATORY audit policy, which is listed in the UNIFIED_AUDIT_POLITICES column of the UNIFIED_AUDIT_TRAIL data dictionary view. This policy cannot be disabled.",
    "function_names": [
      "database_export_audit_enabled",
      "database_export_logging_enabled",
      "database_export_activity_monitored",
      "database_export_audit_all_operations",
      "database_export_audit_retention_enabled",
      "database_export_audit_logs_encrypted",
      "database_export_audit_logs_immutable",
      "database_export_audit_logs_centralized",
      "database_export_audit_logs_retained_over_90d",
      "database_export_audit_logs_access_restricted"
    ]
  },
  {
    "id": "5.5",
    "title": "Ensure The Use Of SYS* Privileges Is Audited",
    "assessment": "Automated",
    "description": "The usage of the SYS* (SYS, SYSKM, SYSBACKUP, SYSRAC, SYSDG, PUBLICSYS, SYSKM, SYSBACKUP, SYSRAC, SYSDG, PUBLIC) privileges should always be audited. Under Oracle classic auditing, this was the case with the parameter AUDIT_SYS_OPERATIONS = TRUE. To achieve the same behavior with Unified Auditing, it is necessary to audit all users who use SYS* privileges. As the SYS* privileges have the special feature of being used first, it is necessary to audit them separately, as otherwise they will not be taken into account by the other audit policies. Example: A user with SYSDBA privileges accesses a table (e.g. HR.EMP). In this case, not the SELECT ANY TABLE privilege, but the SYSDBA privilege is used. As a result, audit rule 5.1 does not fire. With unified auditing, it must always be ensured that the privileges are used for object access in the following order (if available): 1. SYS* privileges (e.g. SYSDBA) 2. Direct access rights (e.g. direct object grant or public grant) 3. ANY rights",
    "rationale": "All users using the SYS*-Privilege should be audited to avoid that the highest privileged user is not audited. Impact: SYS* performs critical system-level operations, and auditing every action can add considerable performance overhead. SYS operations generate a large volume of audit logs, especially in high-transaction environments. Too much logging can make it difficult to identify critical security events among routine activities especially in Oracle Dataguard environments.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH CIS_AUDIT(CONTAINERNAME, CON_ID, AUDIT_OPTION, ENTITY_NAME) AS( SELECT C.NAME, C.CON_ID, 'ALL' AS AUDIT_OPTION, LL.* FROM V$CONTAINERS C, TABLE(DBMSOUTPUT_LINESARRAY('SYS','SYSBACKUP','SYSDG','SYSKM','SYSRAC','PUBLI C')) LL WHERE C.OPEN_MODE='READ WRITE' ), AUDIT_ENABLED AS ( SELECT DISTINCT AUD.CON_ID, AUD.AUDIT_OPTION, ENABLED.ENTITY_NAME FROM CONTAINERS(AUDIT_UNIFIED_POLICIES) AUD, CONTAINERS(AUDIT_UNIFIED_ENABLED_POLICIES) ENABLED WHERE ENABLED.CON_ID = AUD.CON_ID AND ENABLED.POLICY_NAME = AUD.POLICY_NAME AND AUD.AUDIT_OPTION IN ('ALL') AND AUD.AUDIT_OPTION_TYPE = 'STANDARD ACTION' AND ENABLED.SUCCESS = 'YES' AND ENABLED.FAILURE = 'YES' AND ENABLED.ENABLED_OPTION = 'BY USER' AND ENABLED.ENTITY_NAME IN ('SYS','SYSBACKUP','SYSDG','SYSKM','SYSRAC','PUBLIC') ) SELECT C.CONTAINERNAME, C.AUDIT_OPTION, C.ENTITY_NAME FROM CIS_AUDIT C LEFT JOIN AUDIT_ENABLED E ON C.AUDIT_OPTION = E.AUDIT_OPTION AND C.ENTITY_NAME = E.ENTITY_NAME AND E.CON_ID = C.CON_ID WHERE E.AUDIT_OPTION IS NULL ORDER BY 1, 2, 3; Lack of results implies compliance.",
    "remediation": "Execute the following SQL statement in the CDB and in each PDB to remediate this recommendation: CREATE AUDIT POLICY CIS_CDB_ALL_ACTIONS_BY_PRIVILEGED_USERS ACTIONS ALL WHEN q'! (SYS_CONTEXT('USERENV','CLIENT_PROGRAM_NAME') NOT IN ('emagent') AND INSTR(UPPER(SYS_CONTEXT('USERENV','CLIENT_PROGRAM_NAME')),'PERL') = 0  AND INSTR(UPPER(SYS_CONTEXT('USERENV','CLIENT_PROGRAM_NAME')),'RMAN') = 0  AND INSTR(UPPER(SYS_CONTEXT('USERENV','CLIENT_PROGRAM_NAME')),'OMS') = 0)!' EVALUATE PER SESSION ONLY TOPLEVEL; AUDIT POLICY CIS_CDB_ALL_ACTIONS_BY_PRIVILEGED_USERS BY SYS, SYSKM, SYSBACKUP, SYSRAC, SYSDG, PUBLIC; Note: If you do not have CIS_CDB_ALL_ACTIONS_BY_PRIVILEGED_USERS, please create one using the CREATE AUDIT POLICY statement. Refer to Section 8.5 where a PL/SQL block is provided to help create or modify the audit policy to remediate this item in both container and pluggable database.  For legacy reasons the SYSOPER privilege is using the name PUBLIC. The used privilege in the unified audit log is SYSOPR. Emagent, OMS, RMAN and Perl have been excluded to prevent an excessive number of events and issues with spillover files. Default Value: Empty References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- AUDIT-POLICY-Unified-Auditing.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "impact": "SYS* performs critical system-level operations, and auditing every action can add considerable performance overhead. SYS operations generate a large volume of audit logs, especially in high-transaction environments. Too much logging can make it difficult to identify critical security events among routine activities especially in Oracle Dataguard environments.",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- AUDIT-POLICY-Unified-Auditing.html",
    "function_names": [
      "database_privilege_sys_audit_enabled",
      "database_user_sys_privilege_audited",
      "database_audit_policy_sys_operations_enabled",
      "database_audit_unified_sys_privileges_enabled",
      "database_audit_sys_privilege_order_enforced",
      "database_audit_sys_privilege_usage_logged",
      "database_audit_sys_privilege_all_users_audited",
      "database_audit_sys_privilege_priority_configured"
    ]
  },
  {
    "id": "6.1.1",
    "title": "Ensure '%ANY%' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database ANY keyword provides the user the capability to alter any item in the catalog of the database. Unauthorized grantees should not have that keyword assigned to them.",
    "rationale": "Authorization to use the ANY expansion of a privilege can allow an unauthorized user to potentially change confidential data or damage the data catalog.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE LIKE '%ANY%' ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE LIKE '%ANY%' AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE <ANY Privilege> FROM <grantee> ; In the case of a grant via a role : REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_any_privilege_revoked",
      "database_grantee_any_privilege_restricted",
      "database_privilege_any_unauthorized_grantee_blocked",
      "database_any_privilege_unauthorized_grantee_removed",
      "database_grantee_any_privilege_unassigned",
      "database_any_privilege_authorized_only",
      "database_grantee_any_privilege_audit",
      "database_any_privilege_grantee_validation"
    ]
  },
  {
    "id": "6.1.2",
    "title": "Ensure Admin Privileges Are Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database WITH_ADMIN privilege allows the designated user to grant another user the same privileges. Unauthorized grantees should not have that privilege.",
    "rationale": "Assignment of the WITH_ADMIN privilege can allow the granting of a restricted privilege to an unauthorized user.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE ADMIN_OPTION = 'YES' ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.ADMIN_OPTION = 'Y' AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE <SYSTEM PRIVILEGE> FROM <grantee> ; If needed, grant the privilege to user without admin option: GRANT <SYSTEM PRIVILEGE> TO <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400",
    "function_names": [
      "database_user_no_admin_privileges",
      "database_grantee_admin_privileges_revoked",
      "database_grantee_with_admin_privileges_removed",
      "database_user_admin_privileges_restricted",
      "database_grantee_admin_privileges_unauthorized_removed"
    ]
  },
  {
    "id": "6.1.3",
    "title": "Ensure 'IMPORT' And 'EXPORT' 'FULL DATABASE' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The EXPORT FULL DATABASE and IMPORT FULL DATABASE privileges in Oracle Database allow users to perform full database exports and imports, which can lead to data exfiltration, unauthorized modifications, and compliance violations if granted to unauthorized users.",
    "rationale": "An unauthorized user with EXPORT FULL DATABASE privilege could create a full backup of the database and move it to another location. An unauthorized user with IMPORT FULL DATABASE privilege can overwrite, inject, or alter critical database data.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('IMPORT FULL DATABASE','EXPORT FULL DATABASE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('IMPORT FULL DATABASE','EXPORT FULL DATABASE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE IMPORT FULL DATABASE FROM <grantee> ; REVOKE EXPORT FULL DATABASE FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html#GUID- 58D04BBE-A40D-4699-A2D7-1AB40F532A6D",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html#GUID- 58D04BBE-A40D-4699-A2D7-1AB40F532A6D",
    "function_names": [
      "oracle_database_grantee_import_revoked",
      "oracle_database_grantee_export_revoked",
      "oracle_database_grantee_full_database_revoked",
      "oracle_database_grantee_unauthorized_revoked",
      "oracle_database_privilege_import_export_restricted",
      "oracle_database_privilege_full_database_restricted",
      "oracle_database_privilege_unauthorized_grantee_restricted"
    ]
  },
  {
    "id": "6.1.4",
    "title": "Ensure 'CREATE EXTERNAL JOB' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The CREATE EXTERNAL JOB privilege in Oracle allows a user to create external jobs that run at the OS level using Oracle Scheduler.",
    "rationale": "If this privilege is granted to unauthorized users, it can lead to privilege escalation, system compromise, and security risks. It allows unauthorized users to perform actions like modifying system files, executing scripts, or starting/stopping services.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('CREATE EXTERNAL JOB') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('CREATE EXTERNAL JOB') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE CREATE EXTERNAL JOB FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html",
    "function_names": [
      "oracle_database_user_no_create_external_job",
      "oracle_database_grantee_no_create_external_job",
      "oracle_database_privilege_create_external_job_revoked",
      "oracle_database_privilege_create_external_job_restricted",
      "oracle_database_privilege_create_external_job_authorized_only"
    ]
  },
  {
    "id": "6.1.5",
    "title": "Ensure 'BECOME USER' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The BECOME USER system privilege allows a user to switch identities to another database user during the execution of a session, which can lead to serious security risks if granted to unauthorized users.",
    "rationale": "A user with the BECOME USER system privilege can impersonate another user and access data they are not authorized to see, bypassing access controls and security policies. Oracle Data Pump Import utilities impdp and imp uses BECOME USER system privilege to assume the identity of another user to perform operations that cannot be directly performed by a third party (for example, loading objects such as object privilege grants). In an Oracle Database Vault environment, Database Vault provides several levels of required authorization that affect grants of BECOME USER. This capability should be restricted according to the needs of the organization.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('BECOME USER') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('BECOME USER') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE BECOME USER FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html",
    "function_names": [
      "database_user_become_privilege_revoked",
      "database_user_become_privilege_restricted",
      "database_grantee_become_user_disabled",
      "database_privilege_become_user_unauthorized_revoked",
      "database_grantee_become_privilege_removed"
    ]
  },
  {
    "id": "6.1.6",
    "title": "Ensure 'TEXT DATASTORE ACCESS' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The TEXT DATASTORE ACCESS system privilege should be restricted due to the potential security risks associated with Oracle Text and its ability to access external files and data sources.",
    "rationale": "Granting TEXT DATASTORE ACCESS gives the user the privilege to index either an arbitrary file in the file system in the case of FILE datastore and an arbitrary URL in the case of URL datastore and is not recommended.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('TEXT DATASTORE ACCESS') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('TEXT DATASTORE ACCESS') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE TEXT DATASTORE ACCESS FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/ccref/oracle-text- indexing-elements.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/ccref/oracle-text- indexing-elements.html",
    "function_names": [
      "database_privilege_text_datastore_access_revoked",
      "database_grantee_text_datastore_access_restricted",
      "database_privilege_grantee_text_access_revoked",
      "database_privilege_unauthorized_text_datastore_denied",
      "database_grantee_text_datastore_privilege_disabled"
    ]
  },
  {
    "id": "6.1.7",
    "title": "Ensure 'CREATE', 'ALTER', And 'DROP' 'PUBLIC DATABASE LINK' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "Public database links in Oracle allow database users to connect to remote databases without needing explicit credentials each time.",
    "rationale": "If an unauthorized user creates a public database link, all users in the database can use it to connect to the remote database. This can lead to data exposure and unauthorized access to sensitive information. Likewise, if an unauthorized user modifies or drops a public database link, this can result in pointing an existing database link to a malicious remote database, queries could return manipulated or incorrect data, leading to data corruption.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('CREATE PUBLIC DATABASE LINK','ALTER PUBLIC DATABASE LINK','DROP PUBLIC DATABASE LINK') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('CREATE PUBLIC DATABASE LINK','ALTER PUBLIC DATABASE LINK','DROP PUBLIC DATABASE LINK') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE CREATE PUBLIC DATABASE LINK FROM <grantee> ; REVOKE ALTER PUBLIC DATABASE LINK FROM <grantee> ; REVOKE DROP PUBLIC DATABASE LINK FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-5167857B-7CEC-423B-8A6F- 64569B3A661D",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-5167857B-7CEC-423B-8A6F- 64569B3A661D",
    "function_names": [
      "oracle_database_link_create_revoked_unauthorized_grantee",
      "oracle_database_link_alter_revoked_unauthorized_grantee",
      "oracle_database_link_drop_revoked_unauthorized_grantee",
      "oracle_database_link_public_revoked_unauthorized_grantee",
      "oracle_database_link_privileges_restricted_authorized_only"
    ]
  },
  {
    "id": "6.1.8",
    "title": "Ensure 'LOGMINING' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The LOGMINING system privilege in Oracle Database is a powerful privilege that allows users to query online and archived database redo log files through a SQL interface.",
    "rationale": "Redo log files contain information about the history of activity on a database, including sensitive data like credit card numbers or passwords. Allowing unauthorized access to log mining could expose this sensitive data.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('LOGMINING') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('LOGMINING') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE LOGMINING FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sutil/oracle- logminer-utility.html#GUID-D857AF96-AC24-4CA1-B620-8EA3DF30D72E",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sutil/oracle- logminer-utility.html#GUID-D857AF96-AC24-4CA1-B620-8EA3DF30D72E",
    "function_names": [
      "oracle_database_privilege_logmining_revoked",
      "oracle_database_grantee_logmining_restricted",
      "oracle_database_privilege_unauthorized_revoked",
      "oracle_database_grantee_privilege_secure",
      "oracle_database_logmining_privilege_audited"
    ]
  },
  {
    "id": "6.1.9",
    "title": "Ensure 'ALTER SYSTEM' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database ALTER SYSTEM privilege allows the designated user to dynamically alter the instance's running operations. Unauthorized grantees should not have that privilege.",
    "rationale": "The ALTER SYSTEM privilege can lead to severe problems, such as the instance's session being killed or the stopping of redo log recording, which would make transactions unrecoverable.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('ALTER SYSTEM') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('ALTER SYSTEM') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. REVOKE ALTER SYSTEM FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400",
    "function_names": [
      "database_user_alter_system_revoked",
      "database_user_alter_system_restricted",
      "database_privilege_alter_system_unauthorized_revoked",
      "database_grantee_alter_system_privilege_denied",
      "database_privilege_alter_system_no_unauthorized_access",
      "database_user_alter_system_privilege_audited",
      "database_grantee_alter_system_privilege_restricted",
      "database_privilege_alter_system_grantee_validated"
    ]
  },
  {
    "id": "6.1.10",
    "title": "Ensure 'CREATE LIBRARY' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database CREATE LIBRARY privilege allows the designated user to create objects that are associated with the shared libraries. Unauthorized grantees should not have that privilege.",
    "rationale": "The CREATE LIBRARY privilege can allow the creation of numerous library-associated objects and potentially corrupt the libraries' integrity.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS WHERE PRIVILEGE IN ('CREATE LIBRARY') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.PRIVILEGE IN ('CREATE LIBRARY') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE CREATE LIBRARY FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400 Additional Information: Oracle has two identical privileges: CREATE LIBRARY and CREATE ANY LIBRARY.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400 Additional Information: Oracle has two identical privileges: CREATE LIBRARY and CREATE ANY LIBRARY.",
    "function_names": [
      "oracle_database_library_create_revoked_unauthorized_grantee",
      "oracle_privilege_library_create_restricted",
      "oracle_grantee_library_create_privilege_revoked",
      "oracle_database_privilege_library_create_unauthorized_denied",
      "oracle_library_create_privilege_no_unauthorized_access"
    ]
  },
  {
    "id": "6.1.11",
    "title": "Ensure All `SYSTEM` Privileges Are Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "System privileges grant access to sensitive operations, such as creating or modifying database structures, managing user accounts, and accessing sensitive data.",
    "rationale": "Unauthorized users with system privileges can perform actions that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "System privileges in Oracle can be granted directly to users or roles, and can also be inherited through role hierarchies, either directly or recursively. To remediate and revoke system privileges from unauthorized users or roles, it is essential to trace the chain of privilege grants by examining the Granted Privilege and How Granted columns. This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, PRIVILEGE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_SYS_PRIVS ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_SYS_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE <SYSTEM PRIVILEGE> FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/keeping- your-oracle-database-secure.html#GUID-1574C821-528C-4874-AD6B- 92762DBEB400",
    "function_names": [
      "database_user_no_system_privileges",
      "database_grantee_system_privileges_revoked",
      "database_role_system_privileges_restricted",
      "database_user_system_privileges_audited",
      "database_grantee_system_privileges_minimized",
      "database_privilege_system_access_denied",
      "database_grantee_system_privileges_monitored",
      "database_user_system_privileges_reviewed",
      "database_privilege_system_operations_blocked",
      "database_grantee_system_privileges_removed"
    ]
  },
  {
    "id": "6.2.1",
    "title": "Ensure 'DBA' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DBA role provides full administrative privileges over the database, allowing grantees to perform any operation. Unauthorized users with this role can access and modify critical database configurations and objects.",
    "rationale": "Granting DBA privileges to unauthorized users increases the risk of data breaches, unauthorized modifications, and privilege escalation attacks. Access to this role should be limited to authorized administrators.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DBA') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DBA') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DBA FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_dba_revoked_from_unauthorized_grantee",
      "database_role_dba_no_unauthorized_grantees",
      "database_privilege_dba_restricted_to_authorized_users",
      "database_access_dba_granted_only_to_authorized_entities",
      "database_grantee_dba_privileges_revoked_from_unauthorized",
      "database_security_dba_role_no_unauthorized_assignments",
      "database_compliance_dba_privileges_authorized_only",
      "database_iam_dba_role_no_unauthorized_grantees"
    ]
  },
  {
    "id": "6.2.2",
    "title": "Ensure 'EXP_FULL_DATABASE' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The EXP_FULL_DATABASE privilege allows a user to export all objects in the database using Oracle export utility. Unauthorized access to this privilege may result in data leakage.",
    "rationale": "Unauthorized users with this privilege can perform full database exports , leading to potential data breaches .",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('EXP_FULL_DATABASE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('EXP_FULL_DATABASE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE EXP_FULL_DATABASE FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_exp_full_database_revoked",
      "database_grantee_exp_full_database_revoked",
      "database_privilege_exp_full_database_restricted",
      "database_export_privilege_unauthorized_grantee_revoked",
      "database_privilege_exp_full_database_no_unauthorized_access"
    ]
  },
  {
    "id": "6.2.3",
    "title": "Ensure 'IMP_FULL_DATABASE' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The IMP_FULL_DATABASE privilege allows users to import database objects using Oracle Import utility . Unauthorized access to this privilege can lead to data corruption .",
    "rationale": "A user with IMP_FULL_DATABASE can restore data, potentially leading to data corruption or security violations.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('IMP_FULL_DATABASE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('IMP_FULL_DATABASE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE IMP_FULL_DATABASE FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_imp_full_database_revoked",
      "database_grantee_imp_full_database_restricted",
      "database_privilege_imp_full_database_authorized",
      "database_role_imp_full_database_denied",
      "database_access_imp_full_database_limited"
    ]
  },
  {
    "id": "6.2.4",
    "title": "Ensure 'DATAPUMP_EXP_FULL_DATABASE' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DATAPUMP_EXP_FULL_DATABASE privilege allows a user to export all objects in the database using Oracle data pump export utility. Unauthorized access to this privilege may result in data leakage.",
    "rationale": "Users with this privilege can perform full database exports, leading to potential data breaches .",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DATAPUMP_EXP_FULL_DATABASE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DATAPUMP_EXP_FULL_DATABASE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DATAPUMP_EXP_FULL_DATABASE FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_datapump_revoked_unauthorized",
      "database_privilege_datapump_exp_full_revoked",
      "database_grantee_datapump_export_restricted",
      "database_privilege_export_full_revoked_unauthorized",
      "database_user_datapump_export_full_disabled_unauthorized"
    ]
  },
  {
    "id": "6.2.5",
    "title": "Ensure 'DATAPUMP_IMP_FULL_DATABASE' is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DATAPUMP_IMP_FULL_DATABASE privilege allows users to import database objects using Oracle Data Pump Import utility . Unauthorized access to this privilege can lead to data corruption .",
    "rationale": "A user with DATAPUMP_IMP_FULL_DATABASE can restore data, potentially leading to data corruption or security violations.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DATAPUMP_IMP_FULL_DATABASE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DATAPUMP_IMP_FULL_DATABASE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DATAPUMP_IMP_FULL_DATABASE FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_privilege_datapump_imp_full_database_revoked",
      "database_privilege_datapump_imp_full_database_no_unauthorized_grantee",
      "database_privilege_datapump_imp_full_database_restricted",
      "database_privilege_datapump_imp_full_database_authorized_only",
      "database_privilege_datapump_imp_full_database_no_public_access"
    ]
  },
  {
    "id": "6.2.6",
    "title": "Ensure 'DV_ADMIN’ Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DV_ADMIN role allows users to configure Database Vault policies and manage security controls. Unauthorized access can weaken security .",
    "rationale": "This role should be restricted to authorized administrators, as unauthorized use can lead to alteration or deletion of established security policies .",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DV_ADMIN') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DV_ADMIN') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DV_ADMIN FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "iam_role_dv_admin_revoked_from_unauthorized_grantee",
      "iam_role_dv_admin_no_unauthorized_grantees",
      "iam_role_dv_admin_restricted_access",
      "iam_role_dv_admin_authorized_grantees_only",
      "iam_role_dv_admin_no_unauthorized_assignments"
    ]
  },
  {
    "id": "6.2.7",
    "title": "Ensure 'DV_AUDIT_CLEANUP’ Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DV_AUDIT_CLEANUP role allows grantees to delete or purge data vault audit records. Unauthorized users with this role can temper with audit records, resulting in violation of security compliance policies.",
    "rationale": "Unauthorized deletion of audit records compromises security policies and violates compliance requirements. Unauthorized deletion can also be used to hide unauthorized activities.",
    "audit": "Run the following query to check for unauthorized grants:  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DV_AUDIT_CLEANUP') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DV_AUDIT_CLEANUP') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DV_AUDIT_CLEANUP FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "iam_role_dv_audit_cleanup_revoked",
      "iam_role_grantee_unauthorized_revoked",
      "iam_role_audit_cleanup_restricted",
      "iam_grantee_dv_audit_cleanup_denied",
      "iam_audit_role_unauthorized_grantee_revoked"
    ]
  },
  {
    "id": "6.2.8",
    "title": "Ensure 'OLAP_DBA' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The OLAP_DBA role allows grantees to perform Oracle OLAP administration tasks. Unauthorized access can impact analytical workspaces.",
    "rationale": "Users with this role can alter OLAP settings , potentially impacting business intelligence applications.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('OLAP_DBA') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('OLAP_DBA') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE OLAP_DBA FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "iam_role_olap_dba_revoked_unauthorized_grantee",
      "iam_role_olap_dba_no_unauthorized_access",
      "iam_grantee_olap_dba_revoked",
      "iam_olap_dba_role_restricted_access",
      "iam_unauthorized_grantee_olap_dba_revoked"
    ]
  },
  {
    "id": "6.2.9",
    "title": "Ensure 'LBAC_DBA' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The LBAC_DBA role allows users to administer Label-Based Access Control (LBAC) . Unauthorized users can modify security labels.",
    "rationale": "Granting this role to unauthorized users can impact data access restrictions through security labels.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('LBAC_DBA') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('LBAC_DBA') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE LBAC_DBA FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "iam_role_lbac_dba_revoked_from_unauthorized_grantee",
      "iam_role_no_unauthorized_lbac_dba_grantees",
      "iam_lbac_dba_restricted_to_authorized_grantees",
      "iam_unauthorized_grantee_lbac_dba_revoked",
      "iam_lbac_dba_no_unauthorized_access"
    ]
  },
  {
    "id": "6.2.10",
    "title": "Ensure 'JAVA_ADMIN' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The JAVA_ADMIN role allows users to manage Java objects within the database. Unauthorized users with this role may leverage this role to compromise Java-based security mechanisms.",
    "rationale": "A user with this role can alter, modify, or execute Java objects , potentially introducing security risks.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('JAVA_ADMIN') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('JAVA_ADMIN') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE JAVA_ADMIN FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_no_java_admin_privileges",
      "database_role_java_admin_revoked",
      "database_grantee_java_admin_restricted",
      "database_privilege_java_admin_unauthorized_grantee",
      "database_security_java_admin_role_revoked"
    ]
  },
  {
    "id": "6.2.11",
    "title": "Ensure 'JAVASYSPRIVS' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The JAVASYSPRIV privilege grants Java system-level permissions within the database. Unauthorized access could allow unrestricted Java execution.",
    "rationale": "A user with this role can run Java programs that may compromise database security and integrity.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('JAVAUSERPRIV') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('JAVAUSERPRIV') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE JAVAUSERPRIV FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_javasysprivs_revoked",
      "database_grantee_javasysprivs_revoked",
      "database_privilege_javasysprivs_restricted",
      "database_user_privilege_javasysprivs_denied",
      "database_grantee_privilege_javasysprivs_removed"
    ]
  },
  {
    "id": "6.2.12",
    "title": "Ensure 'LOGSTDBY_ADMINISTRATOR' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The LOGSTDBY_ADMINISTRATOR role provides privileges to administer logical standby databases. Unauthorized grantees can perform operations that can disrupt logical standby database.",
    "rationale": "Unauthorized changes may impact logical standby database replication and lead to data inconsistency .",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('LOGSTDBY_ADMINISTRATOR') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('LOGSTDBY_ADMINISTRATOR') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE LOGSTDBY_ADMINISTRATOR FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_role_grantee_revoked",
      "database_logstby_administrator_authorized",
      "database_role_unauthorized_grantee_removed",
      "database_logstby_administrator_privileges_restricted",
      "database_role_privilege_revoked_unauthorized",
      "database_logstby_administrator_access_controlled",
      "database_role_grantee_authorized_only",
      "database_logstby_administrator_grantee_validated"
    ]
  },
  {
    "id": "6.2.13",
    "title": "Ensure 'SQL_FIREWALL_ADMIN' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The SQL_FIREWALL_ADMIN role grants administrative privileges to the SQL Firewall, allowing grantees to configure security policies through firewall rules. Unauthorized users can bypass firewall rules, potentially allowing execution of malicious code, including SQL injection attacks.",
    "rationale": "An unauthorized user with this role can modify or disable firewall rules , exposing the database to SQL injection or unauthorized access.",
    "audit": "To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('SQL_FIREWALL_ADMIN') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('SQL_FIREWALL_ADMIN') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE SQL_FIREWALL_ADMIN FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-sql- firewall.html#GUID-47339B36-F95A-4371-AC87-F8EF2C799455",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html 2. https://docs.oracle.com/en/database/oracle/oracle-database/23/dbseg/using-sql- firewall.html#GUID-47339B36-F95A-4371-AC87-F8EF2C799455",
    "function_names": [
      "sql_firewall_admin_revoked_from_unauthorized_grantee",
      "sql_firewall_admin_no_unauthorized_grantees",
      "sql_firewall_admin_grantee_authorized_only",
      "sql_firewall_admin_privileges_restricted",
      "sql_firewall_admin_role_no_unauthorized_access"
    ]
  },
  {
    "id": "6.2.14",
    "title": "Ensure 'MAINTPLAN_APP' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The MAINTPLAN_APP role grants access to database maintenance plans. Unauthorized use can lead to disruptions in Oracle database operation and service.",
    "rationale": "This role should only be assigned to database administrators to prevent accidental or intentional maintenance plan modifications. A user with this role can alter or remove scheduled maintenance jobs, affecting database availability.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('MAINTPLAN_APP') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('MAINTPLAN_APP') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE MAINTPLAN_APP FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "iam_role_maintenance_plan_revoked_from_unauthorized_grantee",
      "iam_role_maintenance_plan_no_unauthorized_grantee",
      "iam_role_maintenance_plan_authorized_grantees_only",
      "iam_role_maintenance_plan_grantee_access_restricted",
      "iam_role_maintenance_plan_grantee_revoked"
    ]
  },
  {
    "id": "6.2.15",
    "title": "Ensure 'JAVADEBUGPRIV' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The JAVADEBUGPRIV privilege allows debugging of Java stored procedures within the Oracle database. Debugging privileges can potentially be exploited to inspect or alter Java code execution. Revoking this privilege from unauthorized users helps prevent unauthorized debugging of Java stored procedures and reduces the risk of exposing internal Java code logic.",
    "rationale": "Unauthorized granting of the JAVADEBUGPRIV privilege may expose Java procedures to unintended debugging, which can lead to security risks such as unauthorized access or code manipulation.",
    "audit": "Run the following query to check for unauthorized grants:  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('JAVADEBUGPRIV') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('JAVADEBUGPRIV') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE JAVADEBUGPRIV FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_java_debug_priv_revoked_from_unauthorized_grantee",
      "database_java_debug_priv_no_unauthorized_access",
      "database_grantee_java_debug_priv_revoked",
      "database_java_debug_priv_restricted",
      "database_privilege_java_debug_revoked",
      "database_unauthorized_grantee_java_debug_priv_disabled",
      "database_java_debug_priv_no_grantee_access",
      "database_grantee_java_debug_priv_disabled"
    ]
  },
  {
    "id": "6.2.16",
    "title": "Ensure 'DV_PATCH_ADMIN' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DV_PATCH_ADMIN privilege allows users to apply patches to the database vault component of the Oracle database. This privilege grants the ability to update/upgrade a critical component of the database.",
    "rationale": "Users with DV_PATCH_ADMIN can modify or apply patches that may impact the Data Vault component and hence the security of the database. Restricting this privilege helps maintain database security.",
    "audit": "Run the following query to check for unauthorized grants:  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DV_PATCH_ADMIN') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DV_PATCH_ADMIN') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DV_PATCH_ADMIN FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_no_dv_patch_admin_privilege",
      "database_grantee_no_dv_patch_admin",
      "database_vault_patch_admin_revoked",
      "database_privilege_no_unauthorized_grantee",
      "database_user_no_unauthorized_patch_admin"
    ]
  },
  {
    "id": "6.2.17",
    "title": "Ensure 'DV_POLICY_OWNER' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The DV_POLICY_OWNER privilege allows a user to own and manage security policies within Oracle Database Vault. This role provides control over security policies and rules governing database access.",
    "rationale": "Users with DV_POLICY_OWNER can modify security policies, potentially weakening database security. Revoking this privilege from unauthorized users ensures that only security administrators manage security policies.",
    "audit": "Run the following query to check for unauthorized grants:  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('DV_POLICY_OWNER') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('DV_POLICY_OWNER') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE DV_POLICY_OWNER FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_vault_policy_owner_revoked_from_unauthorized_grantee",
      "oracle_database_vault_policy_owner_no_unauthorized_grantees",
      "oracle_database_vault_policy_owner_restricted_to_authorized_grantees",
      "oracle_database_vault_policy_owner_grantee_authorization_required",
      "oracle_database_vault_policy_owner_grantee_access_controlled"
    ]
  },
  {
    "id": "6.2.18",
    "title": "Ensure AUDIT_ADMIN' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The AUDIT_ADMIN privilege allows a user to manage database auditing policies and audit records. This role grants control over auditing configurations and access to audit trails.",
    "rationale": "Users with AUDIT_ADMIN can modify audit settings or delete audit records, potentially concealing unauthorized activities. Revoking this privilege from unauthorized users ensures that only designated administrators control audit policies, preventing audit log tampering.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('AUDIT_ADMIN') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('AUDIT_ADMIN') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE AUDIT_ADMIN FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "database_user_audit_admin_revoked",
      "database_role_audit_admin_restricted",
      "database_grantee_audit_admin_denied",
      "database_privilege_audit_admin_unauthorized",
      "database_audit_policy_admin_revoked",
      "database_audit_trail_admin_restricted",
      "database_audit_config_admin_denied",
      "database_audit_privilege_unauthorized_revoked"
    ]
  },
  {
    "id": "6.2.19",
    "title": "Ensure 'AUDIT_VIEWER' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The AUDIT_VIEWER privilege allows users to view audit records without modifying them. This role is designed for read-only access to audit logs.",
    "rationale": "Unauthorized access to audit logs can expose sensitive information and compromise audit integrity. Revoking this privilege from unauthorized users prevents unnecessary exposure of audit records and enhances data security.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('AUDIT_VIEWER') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('AUDIT_VIEWER') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE AUDIT_VIEWER FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "iam_role_audit_viewer_revoked",
      "iam_grantee_audit_viewer_revoked",
      "iam_privilege_audit_viewer_restricted",
      "iam_audit_logs_access_restricted",
      "iam_role_unauthorized_grantee_revoked",
      "iam_audit_viewer_privilege_revoked",
      "iam_grantee_audit_access_revoked",
      "iam_audit_viewer_no_unauthorized_access"
    ]
  },
  {
    "id": "6.2.20",
    "title": "Ensure 'PDB_DBA' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The PDB_DBA privilege allows users to manage Pluggable Databases (PDBs) within a Container Database (CDB). This privilege grants the ability to create, drop, and modify PDBs.",
    "rationale": "Users with PDB_DBA can modify or delete PDBs, impacting database availability and security. Revoking this privilege from unauthorized users ensures that only authorized administrators manage PDBs, ensuring database security.",
    "audit": "Run the following query to check for unauthorized grants: WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('PDB_DBA') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('PDB_DBA') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE;  Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE PDB_DBA FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_user_no_pdb_dba_privilege",
      "oracle_database_grantee_no_pdb_dba_privilege",
      "oracle_database_pdb_dba_revoked_unauthorized",
      "oracle_database_privilege_no_unauthorized_pdb_dba",
      "oracle_database_grantee_pdb_dba_restricted"
    ]
  },
  {
    "id": "6.2.21",
    "title": "Ensure 'SELECT_CATALOG_ROLE' Is Revoked From Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database SELECT_CATALOG_ROLE provides SELECT privileges on two-thirds of data dictionary views held in the SYS schema. Unauthorized grantees should not have that role.",
    "rationale": "Permitting unauthorized access to the SELECT_CATALOG_ROLE can allow the disclosure of multiple but not all dictionary data.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('SELECT_CATALOG_ROLE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('SELECT_CATALOG_ROLE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE SELECT_CATALOG_ROLE FROM <grantee> In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_role_no_unauthorized_grantees",
      "oracle_database_select_catalog_role_revoked",
      "oracle_database_role_privileges_restricted",
      "oracle_database_sys_schema_protected",
      "oracle_database_dictionary_views_access_controlled"
    ]
  },
  {
    "id": "6.2.22",
    "title": "Ensure 'EXECUTE_CATALOG_ROLE' Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Automated",
    "description": "The Oracle database EXECUTE_CATALOG_ROLE provides EXECUTE privileges for a number of packages and procedures in the data dictionary in the SYS schema. Unauthorized grantees should not have that role.",
    "rationale": "Permitting unauthorized access to the EXECUTE_CATALOG_ROLE can allow the disruption of operations by initialization of rogue procedures.",
    "audit": "This query will also give you the name of the CDB/PDB that has the issue. To assess this recommendation, execute the following SQL statement.  WITH GRANTEES_NOT_ORACLEMAINTAINED AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, ROLE AS GRANTEE FROM CDB_ROLES WHERE ORACLE_MAINTAINED = 'N' UNION SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, USERNAME AS GRANTEE FROM CDB_USERS WHERE ORACLE_MAINTAINED = 'N' ), DIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Direct Grant' AS HOW_GRANTED FROM CDB_ROLE_PRIVS WHERE GRANTED_ROLE IN ('EXECUTE_CATALOG_ROLE') ), INDIRECT_PRIVS AS ( SELECT DISTINCT CON_ID_TO_CON_NAME(CON_ID) AS CONTAINERNAME, GRANTEE, GRANTED_ROLE AS GRANTED_PRIVILEGE, 'Privileges Through Role' AS HOW_GRANTED FROM CDB_ROLE_PRIVS START WITH GRANTED_ROLE IN ( SELECT DISTINCT P.GRANTEE FROM SYS.CDB_ROLE_PRIVS P, SYS.CDB_ROLES R WHERE P.GRANTED_ROLE IN ('EXECUTE_CATALOG_ROLE') AND P.GRANTEE = R.ROLE) CONNECT BY PRIOR GRANTEE = GRANTED_ROLE ) SELECT CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE, HOW_GRANTED FROM ( SELECT * FROM DIRECT_PRIVS UNION SELECT * FROM INDIRECT_PRIVS ) COMBINED_PRIVS WHERE GRANTEE IN (SELECT GRANTEE FROM GRANTEES_NOT_ORACLEMAINTAINED) ORDER BY CONTAINERNAME, GRANTEE, GRANTED_PRIVILEGE; Lack of results implies compliance.",
    "remediation": "To remediate this setting, execute the following SQL statement, keeping in mind if this is granted in both container and pluggable database, you must connect to both places to revoke. Please ensure proper impact analysis is done before revoking the privilege from a role. REVOKE EXECUTE_CATALOG_ROLE FROM <grantee> ; In the case of a grant via a role: REVOKE <rolename> FROM <grantee> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html",
    "function_names": [
      "oracle_database_execute_catalog_role_revoked",
      "oracle_database_execute_catalog_role_no_unauthorized_grantees",
      "oracle_database_execute_catalog_role_restricted",
      "oracle_database_execute_catalog_role_authorized_only",
      "oracle_database_execute_catalog_role_no_privilege_escalation"
    ]
  },
  {
    "id": "6.3.1",
    "title": "Ensure 'CDB_SCHEMA_PRIVS' Does Not Have Unauthorized Privileges",
    "assessment": "Manual",
    "description": "In Oracle 23ai, the new Schema Privileges provide fine-grained control over which users can create objects in a particular schema without requiring extensive system privileges such as CREATE ANY TABLE. This improves security by allowing administrators to specifically grant CREATE, ALTER, DROP and SELECT privileges at the schema level instead of granting global access.",
    "rationale": "The use of Schema privileges improves security by simplifying authorization for database objects, especially for schemas that frequently add new objects. Instead of granting broad system-level (* ANY) privileges that apply to the entire database, privileges can now be granted at the individual schema level. Schema privileges may inadvertently grant a technical database user excessive rights, potentially violating the principle of least privilege.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(c.con_id) AS containername, c.* FROM CDB_SCHEMA_PRIVS c; Review the results for any unauthorized privileges. If any unauthorized privileges exist, this is a fail.",
    "remediation": "To remediate this recommendation, revoke privileges that are no longer required by executing the following SQL statement. REVOKE <SCHEMA_PRIVILEGE> ON SCHEMA <USERNAME> FROM <GRANTEE> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html#GUID- 483D04AF-BC5B-4B3D-9D9A-1D2C3CE8F12F  6.4 Excessive Object Privileges The recommendations within this section intend to revoke powerful object privileges where they are likely not needed.",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/dbseg/configuring-privilege-and-role-authorization.html#GUID- 483D04AF-BC5B-4B3D-9D9A-1D2C3CE8F12F  6.4 Excessive Object Privileges The recommendations within this section intend to revoke powerful object privileges where they are likely not needed.",
    "function_names": [
      "oracle_schema_privs_no_unauthorized_privileges",
      "oracle_schema_privs_least_privilege_enforced",
      "oracle_schema_privs_create_restricted",
      "oracle_schema_privs_alter_restricted",
      "oracle_schema_privs_drop_restricted",
      "oracle_schema_privs_select_restricted",
      "oracle_schema_privs_no_global_access",
      "oracle_schema_privs_fine_grained_control_enabled"
    ]
  },
  {
    "id": "6.4.1",
    "title": "Ensure 'ALL' Is Revoked On 'Sensitive' Tables",
    "assessment": "Automated",
    "description": "Some tables contain critical information such as password hashes, encrypted passwords, etc. No user other than SYS should have table privileges on these tables.",
    "rationale": "Unauthorized users with access to these tables can perform actions at the operating system level that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(c.con_id) AS containername, c.* FROM CDB_TAB_PRIVS c WHERE c.owner='SYS' AND c.table_name IN ('CDB_LOCAL_ADMINAUTH$','DEFAULT_PWD$','ENC$','HISTGRM$','HIST_HEAD$','LINK$' ,'PDB_SYNC$','SCHEDULER$_CREDENTIAL','USER$','USER_HISTORY$','XS$VERIFIERS'); If any sensitive tables have users with ALL privileges, this is a fail.",
    "remediation": "To remediate this recommendation, revoke privileges that are no longer required by executing the following SQL statement. REVOKE <privilege> ON <table> <directory_name> ;",
    "profile_applicability": "•  Level 1 - RDBMS",
    "function_names": [
      "database_table_sensitive_revoke_all",
      "database_table_sensitive_no_user_privileges",
      "database_table_sensitive_sys_only_access",
      "database_table_sensitive_no_non_sys_privileges",
      "database_table_sensitive_privileges_restricted",
      "database_table_sensitive_all_revoked",
      "database_table_sensitive_no_unauthorized_access"
    ]
  },
  {
    "id": "6.5.1",
    "title": "Ensure ‘DBA_COL_PRIVS’ Is Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Manual",
    "description": "The DBA_COL_PRIVS view provides DBAs a view to manage all column level privileges granted to users and roles.",
    "rationale": "Granting DBA_COL_PRIVS privileges to unauthorized users increases the risk of data breaches, unauthorized modifications, and privilege escalation attacks. Access to this should be limited to authorized DBAs.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(C.CON_ID) AS CONTAINERNAME,O.ORACLE_MAINTAINED, C.* FROM CDB_COL_PRIVS C JOIN CDB_OBJECTS O ON C.CON_ID = O.CON_ID AND C.OWNER=C.OWNER AND O.OBJECT_NAME=C.TABLE_NAME AND O.ORACLE_MAINTAINED='N'; If any unauthorized users are granted DBA_COL_PRIVS, this is a fail.",
    "remediation": "To remediate this recommendation, execute the following SQL statement. REVOKE UPDATE ON <TABLE> FROM <GRANTEE> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/DBA_COL_PRIVS.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/DBA_COL_PRIVS.html",
    "function_names": [
      "database_column_privileges_unauthorized_grantee_revoked",
      "database_dba_col_privs_unauthorized_access_removed",
      "database_column_privileges_restricted_to_authorized_grantees",
      "database_dba_col_privs_grantee_authorization_enforced",
      "database_column_privileges_unauthorized_grantee_denied"
    ]
  },
  {
    "id": "6.6.1",
    "title": "Ensure Proxy User Privileges Are Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Manual",
    "description": "Oracle Database supports proxy user authentication, which allows a client user to connect to the database as a proxy user.",
    "rationale": "An Oracle user with the right to connect to the database as a proxy user inherits the authorizations and roles of the client. For example, the user DUMMYUSER can log on as SYSTEM and then use its DBA role: ALTER USER SYSTEM GRANT CONNECT THROUGH DUMMYUSER;",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(J.CON_ID) AS CONTAINERNAME,J.* FROM CDB_PROXIES J If any unauthorized users are granted proxy user privileges, this is a fail.",
    "remediation": "To remediate this recommendation, execute the following SQL statement. ALTER USER <CLIENT_USER> REVOKE CONNECT THROUGH <PROXY_USER> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/DBA_PROXIES.html#GUID-1F0BFB9F-8A91-41CD-953F- B3EADB17E0AD",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle- database/23/refrn/DBA_PROXIES.html#GUID-1F0BFB9F-8A91-41CD-953F- B3EADB17E0AD",
    "function_names": [
      "database_proxy_user_unauthorized_grantee_revoked",
      "database_proxy_user_privileges_restricted",
      "database_proxy_user_authorized_grantee_only",
      "database_proxy_user_privileges_revoked",
      "database_proxy_user_grantee_access_controlled"
    ]
  },
  {
    "id": "6.7.1",
    "title": "Ensure Custom Java Privileges Are Revoked from Unauthorized 'GRANTEE'",
    "assessment": "Manual",
    "description": "Oracle supports Java embedded in the database. Privileges exist for this Java, which are maintained in separate privilege tables.",
    "rationale": "Unauthorized users with certain Java privileges can perform actions at the operating system level that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "To assess this recommendation, execute the following SQL statement.  SELECT CON_ID_TO_CON_NAME(J.CON_ID) AS CONTAINERNAME, 'CUSTOM JAVA PRIVILEGE' AS \"JAVA PRIVILEGE\", J.* FROM  CDB_JAVA_POLICY J WHERE DBMS_UTILITY.GET_HASH_VALUE( (KIND||GRANTEE||TYPE_SCHEMA||TYPE_NAME||NAME||ACTION||ENABLED), 2, 2010304050) NOT IN ( 800515347, 151129288, 976537527, 30494973, 1937158100, 364905785, 1985378421, 1309631600, 1029870508, 1546167066, 184142192, 859260823,  1514899866, 1402070492, 470712301, 856789430, 152768586, 1516266150, 742382950, 835887237, 27519048,  127800042, 585523424, 116384647, 595031329, 519425340, 565011516, 104142482, 365736720, 105705833,  382398907, 71790781, 62579200, 202664153, 1299118788, 105413428, 545541759, 1119910297, 1712531359,  950804353, 809152653, 63495589, 1621785741, 888624743, 1298694530, 1094834124, 1254650837, 1289482879,  236689110, 449271147, 356128445, 1546786406, 374027524, 1161638561, 1892729955, 972739099, 539210486,  1634287789, 2000803097, 741404310, 1879138467, 623589740, 498687020, 782135231, 1194762317, 884905623,  1896250536, 970596985, 1082897628, 448525273, 1242306455, 23750295, 1550194092, 1772592918, 1603737720,  142136119, 289269359, 1315794462, 96990011, 1095201623, 20727542, 1973515175, 540292561, 343336248,  179666672, 9440468, 1825382930, 1855646886, 598800695, 631787483, 1467839181, 665909584, 1461437618, 1030723320, 311348090, 1398805244, 179119810, 72116459, 1979563728, 57733337, 54818063, 1367689664,  1508476194, 1523274446, 313964240, 1328352206, 689371984, 1299489851, 121628881, 696051281, 1374172231,  42876420, 1612485481, 1577690416, 551128519, 1695954190, 826909143, 983212206, 1658826990, 1414117567,  980793982, 742010474, 230612329, 245501173, 424452954, 1700638178, 1789496901, 1202501131, 1731444159,  335317020, 253453448, 1936475065, 777837297, 462854008, 368852509, 129848269, 549321505, 301832111, 1323272794,  92418107, 715497686, 1854322866, 1423215774, 1973681135, 375128879, 553190962, 907068071, 638021877,  1788624774, 1662401506, 1362996185, 478866415, 1598256716, 1469155910, 334914317, 870540049, 768584438,  1885395547, 755918725, 350200414, 134114043, 43446111, 486709639, 83488831, 139365274, 1260703408, 467391551,  701952766, 230475370, 736630396, 112581665, 376052929, 471626899, 542637624, 680632989, 1103049052, 1347282494,  1559487896, 1592685230, 1654109637, 1735090119, 1831375678, 1886462769, 1912735089, 1959933679,  1234282401, 1772747954, 1514447620, 201492720, 167207852, 434486659, 1169110020, 1649953039, 2008561561, 1333987409, 1192825952, 1740977823, 1501827236, 934263545, 1081144386, 310891775, 1279875884, 1539747260, 1630393794, 1764828081, 336339792, 503085247, 639778710, 764636870, 919569250, 993349195, 124317783, 426721579, 632709131, 703662335, 866241111, 1367484647, 1523591677, 1902848780); If any unauthorized users are granted Java privileges, this is a fail.",
    "remediation": "To remediate this recommendation, execute the following SQL statement. begin DBMS_JAVA.disable_permission( <number> ); DBMS_JAVA.delete_permission( <number> ); end; Note: Custom Java Privileges can be revoked via the SEQ(uence) number. References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/jjdev/DBMS- JAVA-package.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/jjdev/DBMS- JAVA-package.html",
    "function_names": [
      "database_java_privilege_revoked_unauthorized_grantee",
      "database_java_privilege_no_unauthorized_access",
      "database_java_privilege_restricted_grantee",
      "database_java_privilege_grantee_authorized_only",
      "database_java_privilege_unauthorized_grantee_removed"
    ]
  },
  {
    "id": "6.8.1",
    "title": "Ensure Directory Object Access Is Revoked From Unauthorized ‘GRANTEE’",
    "assessment": "Manual",
    "description": "A directory object specifies an alias for a directory on the server file system where external files and data are located.",
    "rationale": "Users with access to these directories can perform actions at the operating system level that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(C.CON_ID) AS CONTAINERNAME,O.ORACLE_MAINTAINED, C.OWNER, C.DIRECTORY_NAME, C.DIRECTORY_PATH FROM CDB_DIRECTORIES C JOIN CDB_OBJECTS O ON C.CON_ID = O.CON_ID AND C.OWNER=C.OWNER AND O.OBJECT_NAME=C.DIRECTORY_NAME AND OBJECT_TYPE='DIRECTORY'; If any unauthorized users are granted directory object access, this is a fail. Note: The flag oracle_maintained='N' indicates whether the directory object was created by Oracle or someone else.",
    "remediation": "To remediate this recommendation, execute the following SQL statement to delete directories which are no longer required. DROP DIRECTORY <DIRECTORY_NAME> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "function_names": [
      "directory_object_grantee_revoked",
      "directory_object_unauthorized_access_revoked",
      "directory_object_access_restricted",
      "directory_object_grantee_permissions_revoked",
      "directory_object_unauthorized_grantee_removed"
    ]
  },
  {
    "id": "6.8.2",
    "title": "Review Directory Objects Privileges",
    "assessment": "Manual",
    "description": "A directory object specifies an alias for a directory on the server file system where external files and data are located.",
    "rationale": "Unauthorized users with access to these directories can perform actions at the operating system level that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(D.CON_ID) AS CONTAINERNAME,O.ORACLE_MAINTAINED, D.DIRECTORY_NAME,D.DIRECTORY_PATH, T.GRANTEE, T.GRANTOR, T.PRIVILEGE, T.GRANTABLE, T.HIERARCHY, T.COMMON, T.INHERITED, D.CON_ID --T.GRANTEE, T.PRIVILEGE, T.GRANTABLE FROM CDB_DIRECTORIES D LEFT JOIN CDB_TAB_PRIVS T ON D.CON_ID = T.CON_ID AND D.OWNER=T.OWNER AND D.DIRECTORY_NAME=T.TABLE_NAME AND T.TYPE='DIRECTORY' JOIN CDB_OBJECTS O ON D.CON_ID = O.CON_ID AND D.OWNER=O.OWNER AND O.OBJECT_NAME=D.DIRECTORY_NAME AND O.OBJECT_TYPE='DIRECTORY'; The flag oracle_maintained='N' indicates whether the directory object was created by Oracle or someone else. The non-Oracle objects should be checked carefully for possible problems.",
    "remediation": "Delete directories that are no longer required DROP DIRECTORY <DIRECTORY_NAME> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "function_names": [
      "directory_object_no_admin_privileges",
      "directory_object_least_privilege_access",
      "directory_object_no_public_access",
      "directory_object_secure_permissions",
      "directory_object_no_write_all_access",
      "directory_object_no_execute_all_access",
      "directory_object_no_anonymous_access",
      "directory_object_no_unauthenticated_access",
      "directory_object_no_privilege_escalation",
      "directory_object_no_insecure_permissions"
    ]
  },
  {
    "id": "6.8.3",
    "title": "Review External Tables With Preprocessor",
    "assessment": "Manual",
    "description": "A directory object specifies an alias for a directory on the server file system where external files and data are located.",
    "rationale": "Unauthorized users with access to these directories can perform actions at the operating system level that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(C.CON_ID) AS CONTAINERNAME,O.ORACLE_MAINTAINED, REGEXP_SUBSTR(SUBSTR(ACCESS_PARAMETERS, INSTR(ACCESS_PARAMETERS, 'PREPROCESSOR ')), '''(.**)''', 1, 1, NULL, 1) AS FILENAME, C.* FROM CDB_EXTERNAL_TABLES C JOIN CDB_OBJECTS O ON C.CON_ID = O.CON_ID AND C.OWNER=C.OWNER AND O.OBJECT_NAME=C.TABLE_NAME AND OBJECT_TYPE='TABLE'; The flag oracle_maintained='N' indicates whether the directory object was created by Oracle or someone else. The non-Oracle objects should be checked carefully for possible problems.",
    "remediation": "Delete directories that are no longer required DROP DIRECTORY <DIRECTORY_NAME> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "function_names": [
      "storage_directory_object_external_files_secure",
      "storage_external_table_preprocessor_enabled",
      "storage_directory_object_access_restricted",
      "storage_external_table_data_encrypted",
      "storage_directory_object_path_validated",
      "storage_external_table_preprocessor_configured",
      "storage_directory_object_permissions_audited",
      "storage_external_table_data_integrity_verified"
    ]
  },
  {
    "id": "6.8.4",
    "title": "Review External Tables",
    "assessment": "Manual",
    "description": "A directory object specifies an alias for a directory on the server file system where external files and data are located.",
    "rationale": "Unauthorized users with access to these directories can perform actions at the operating system level that bypass normal security controls, potentially leading to data breaches, tampering, or destruction.",
    "audit": "To assess this recommendation, execute the following SQL statement. SELECT CON_ID_TO_CON_NAME(C.CON_ID) AS CONTAINERNAME,O.ORACLE_MAINTAINED, C.* FROM CDB_EXTERNAL_TABLES C JOIN CDB_OBJECTS O ON C.CON_ID = O.CON_ID AND C.OWNER=C.OWNER AND O.OBJECT_NAME=C.TABLE_NAME AND OBJECT_TYPE='TABLE'; The flag oracle_maintained='N' indicates whether the directory object was created by Oracle or someone else. The non-Oracle objects should be checked carefully for possible problems.",
    "remediation": "Delete directories that are no longer required DROP DIRECTORY <DIRECTORY_NAME> ; References: 1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "profile_applicability": "•  Level 1 - RDBMS",
    "references": "1. https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/CREATE- DIRECTORY.html",
    "function_names": [
      "database_external_table_directory_secure",
      "database_external_table_access_restricted",
      "database_external_table_encryption_enabled",
      "database_external_table_logging_enabled",
      "database_external_table_alias_validated",
      "database_external_table_path_restricted",
      "database_external_table_permissions_audited",
      "database_external_table_secure_location"
    ]
  }
]