[
  {
    "id": "1.1",
    "title": "Place Databases on Non-System Partitions",
    "assessment": "Manual",
    "description": "It is generally accepted that host operating systems should include different filesystem partitions for different purposes. One set of filesystems is typically called system partitions, and these are generally reserved for host system/application operation. The other set of filesystems is typically called \"non-system partitions\", and such locations are generally reserved for storing data.",
    "rationale": "Moving the database off the system partition will reduce the probability of denial of service caused by exhaustion of available disk space to the operating system. Impact: Moving database files and directories to a non-system partition may be difficult depending on whether there was only a single partition when the operating system was set up and whether there are additional non-system partitions available.",
    "audit": "Execute the following steps to assess this recommendation: • Obtain the location of the datadir and other MariaDB database files by executing the following SQL statement: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE (VARIABLE_NAME LIKE '%dir' or VARIABLE_NAME LIKE '%file') and (VARIABLE_NAME NOT LIKE '%core%' AND VARIABLE_NAME <> 'local_infile' AND VARIABLE_NAME <> 'relay_log_info_file') order by VARIABLE_NAME; • Using the value returned for the datadir, and other results from the above query, execute the following in a system terminal: df -h <directory> The output returned from the df command above should not include root (/), /var, or /usr.",
    "remediation": "Perform the following steps to remediate this setting for the datadir: 1. Backup the database. 2. Choose a non-system partition new location for MariaDB data. 3. Stop mariadbd using a command like: service mariadb stop. 4. Copy the data using a command like: cp -rp <datadir Value> <new location> . 5. Set the datadir location to the new location in the MariaDB configuration file. 6. Start mariadbd using a command like: service mariadb start Note: On some Linux distributions you may need to additionally modify apparmor settings. For example, on a Ubuntu 14.04.1 system edit the file /etc/apparmor.d/usr.sbin.mariadbd so that the datadir access is appropriate. The original might look like this: # Allow data dir access /var/lib/mysql/ r, /var/lib/mysql/** rwk, Alter those two paths to be the new location you chose above. For example, if that new location were /media/mysql, then the /etc/apparmor.d/usr.sbin.mysqld file should include something like this: # Allow data dir access /media/mysql/ r, /media/mysql/** rwk, Default Value: Not Applicable. References: 1. https://mariadb.com/kb/en/specifying-permissions-for-schema-data-directories- and-tables/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Moving database files and directories to a non-system partition may be difficult depending on whether there was only a single partition when the operating system was set up and whether there are additional non-system partitions available.",
    "references": "1. https://mariadb.com/kb/en/specifying-permissions-for-schema-data-directories- and-tables/",
    "function_names": [
      "compute_database_non_system_partition",
      "compute_instance_data_partition_separated",
      "compute_volume_system_data_segregated",
      "compute_disk_non_system_mount_required",
      "compute_storage_system_partition_isolated",
      "compute_database_system_partition_restricted",
      "compute_instance_non_system_data_partition",
      "compute_volume_system_partition_excluded"
    ]
  },
  {
    "id": "1.2",
    "title": "Use Dedicated Least Privileged Account for MariaDB Daemon/Service",
    "assessment": "Automated",
    "description": "As with any service installed on a host, it can be provided with its own user context. Providing a dedicated user to the service provides the ability to precisely constrain the service within the larger host context.",
    "rationale": "Utilizing a least privilege account for MariaDB to execute as needed may reduce the impact of a MariaDB-born vulnerability. A restricted account will be unable to access resources unrelated to MariaDB, such as operating system configurations.",
    "audit": "Execute the following command at a terminal prompt to assess this recommendation: ps -ef | egrep \"^mysql.*$\" If no lines are returned, then this is a fail. Note: It is assumed that the MariaDB user is mysql. Additionally, you may consider running sudo -l as the MariaDB user or to check the sudoers file.",
    "remediation": "Create a user which is only used for running MariaDB and directly related processes. This user must not have administrative rights to the system. Additionally, it's best to avoid providing shell access to such an account. Shell access can be removed using the following command at a terminal prompt: /usr/sbin/groupadd -g 27 -o -r mysql >/dev/null 2>&1 || : /usr/sbin/useradd -M -N -g mysql -o -r -d /var/lib/mysql -s /bin/false \\ -c \"MariaDB Server\" -u 27 mysql >/dev/null 2>&1 || : References: 1. https://mariadb.com/kb/en/running-mysqld-as-root/ Additional Information: The root user may be used to start the MariaDB service on Linux/UNIX, but then it must be configured to drop privileges by specifying a service specific user in the mariadb.cnf or my.ini file.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/running-mysqld-as-root/ Additional Information: The root user may be used to start the MariaDB service on Linux/UNIX, but then it must be configured to drop privileges by specifying a service specific user in the mariadb.cnf or my.ini file.",
    "function_names": [
      "compute_mariadb_service_dedicated_user",
      "compute_mariadb_service_least_privilege",
      "compute_mariadb_daemon_non_root_user",
      "compute_mariadb_service_user_restricted",
      "compute_mariadb_daemon_dedicated_account"
    ]
  },
  {
    "id": "1.3",
    "title": "Disable MariaDB Command History",
    "assessment": "Automated",
    "description": "On Unix, the mysql client writes a record of executed statements to a history file. By default, this file is named .mysql_history and is created in your home directory. To specify a different file, set the value of the MYSQL_HISTFILE environment variable. The .mysql_history file should be protected with a restrictive access mode because sensitive information might be written to it, such as the text of SQL statements that contain passwords.",
    "rationale": "Disabling the MariaDB Client and MariaDB Shell command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or other sensitive data or information.",
    "audit": "Execute the following commands to assess this recommendation: find /home -name \".mysql_history\" find /root -name \".mysql_history\" For each file returned determine whether that file is symbolically linked to /dev/null.",
    "remediation": "For MariaDB Client perform the following steps to remediate this setting: 1. Remove .mysql_history if it exists. 2. Use either of the techniques below to prevent it from being created again: o Set the MYSQL_HISTFILE environment variable to /dev/null. This will need to be placed in the shell's startup script. o Create .mysql_history as a symbolic to /dev/null. > ln -s /dev/null $HOME/.mysql_history Default Value: By default, the MariaDB command history file is located in /root/.mysql_history. References: 1. https://mariadb.com/kb/en/mysql-command-line-client/#the-mysql_history-file 2. https://mariadb.com/kb/en/mysqld-options/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/mysql-command-line-client/#the-mysql_history-file 2. https://mariadb.com/kb/en/mysqld-options/",
    "function_names": [
      "mariadb_command_history_disabled",
      "mariadb_history_file_restricted_access",
      "mariadb_history_file_custom_path_configured",
      "mariadb_history_file_no_sensitive_data",
      "mariadb_history_file_protected_mode",
      "mariadb_history_file_environment_variable_set",
      "mariadb_history_file_home_directory_restricted"
    ]
  },
  {
    "id": "1.4",
    "title": "Verify That the MYSQL_PWD Environment Variable is Not in Use",
    "assessment": "Automated",
    "description": "MariaDB can read a default database password from an environment variable called MYSQL_PWD. Avoiding use of this environment variable can better safeguard the confidentiality of MariaDB credentials.",
    "rationale": "Using the MYSQL_PWD environment variable implies MariaDB credentials are stored as clear text.",
    "audit": "To assess this recommendation, use the /proc filesystem to determine if MYSQL_PWD is currently set for any process: grep MYSQL_PWD /proc/*/environ This may return one entry for the process which is executing the grep command.",
    "remediation": "Check which users and/or scripts are setting MYSQL_PWD and change them to use a more secure method. For unattended logins, you should consider 2) Different authentication methods (e.g., X509 certificate verification) Default Value: Not set. References: 1. https://mariadb.com/kb/en/mariadb-environment-variables/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/mariadb-environment-variables/",
    "function_names": [
      "compute_mariadb_mysql_pwd_unused",
      "compute_mariadb_environment_variable_restricted",
      "compute_mariadb_credential_confidentiality_enforced",
      "compute_mariadb_default_password_protected",
      "compute_mariadb_environment_variable_disabled"
    ]
  },
  {
    "id": "1.5",
    "title": "Ensure Interactive Login is Disabled",
    "assessment": "Automated",
    "description": "When created, the MariaDB user may have interactive access to the operating system, which means that the MariaDB user could login to the host as any other user would.",
    "rationale": "Preventing the MariaDB user from logging in interactively may reduce the impact of a compromised MariaDB account. There is also more accountability, as accessing the operating system where the MariaDB server lies will require the user's own account. Interactive access by the MariaDB user is unnecessary and should be disabled. Impact: This setting will prevent the MariaDB administrator from interactively logging into the operating system using the MariaDB user. Instead, the administrator will need to log in using one's own account.",
    "audit": "Execute the following command to assess this recommendation: getent passwd mysql | egrep \"^.*[\\/bin\\/false|\\/sbin\\/nologin]$\" Lack of output implies a fail.",
    "remediation": "Execute one of the following commands in a terminal: usermod -s /bin/false mysql Or usermod -s /sbin/nologin mysql References: 1. https://mariadb.com/kb/en/mysql-command-line-client/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux",
    "impact": "This setting will prevent the MariaDB administrator from interactively logging into the operating system using the MariaDB user. Instead, the administrator will need to log in using one's own account.",
    "references": "1. https://mariadb.com/kb/en/mysql-command-line-client/",
    "function_names": [
      "mariadb_user_interactive_login_disabled",
      "mariadb_user_os_access_restricted",
      "mariadb_user_shell_access_disabled",
      "mariadb_user_system_login_blocked",
      "mariadb_user_remote_access_disabled"
    ]
  },
  {
    "id": "1.6",
    "title": "Verify That 'MYSQL_PWD' is Not Set in Users' Profiles",
    "assessment": "Automated",
    "description": "MariaDB can read a default database password from an environment variable called MYSQL_PWD.",
    "rationale": "Use of the MYSQL_PWD environment variable implies MariaDB credentials are stored as clear text. Avoiding the use of this environment variable may increase assurance that the confidentiality of MariaDB credentials is preserved.",
    "audit": "To assess this recommendation, check if MYSQL_PWD is set in login scripts using the following command: grep MYSQL_PWD /home/*/.{bashrc,profile,bash_profile}",
    "remediation": "Check which users and/or scripts are setting MYSQL_PWD and change them to use a more secure method. Default Value: Not set. References: 1. https://mariadb.com/kb/en/mariadb-environment-variables/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/mariadb-environment-variables/",
    "function_names": [
      "compute_user_mysql_pwd_unset",
      "compute_profile_mysql_pwd_absent",
      "compute_environment_mysql_pwd_restricted",
      "compute_user_environment_no_mysql_pwd",
      "compute_profile_no_mysql_pwd_defined"
    ]
  },
  {
    "id": "1.7",
    "title": "Ensure MariaDB is Run Under a Sandbox Environment",
    "assessment": "Manual",
    "description": "Use of the chroot() system call at startup, Systemd with settings to achieve isolation, or docker will put MariaDB in a Sandbox environment.",
    "rationale": "Running MariaDB in a Sandbox environment may reduce the impact of a MariaDB-born vulnerability by making portions of the file system inaccessible to the MariaDB instance. Impact: Use of the chroot option somewhat limits LOAD DATA INFILE and SELECT ... INTO OUTFILE.",
    "audit": "Perform the following steps for each MariaDB instance to assess this recommendation: 1. Execute the following SQL statement to determine the value of chroot cat /etc/mysql | egrep '(?<=^chroot=).+$' The returned value should specify a valid path which differs from the datadir. No results implies 'chroot' is not in use. 2. Perform the following to check systemd: systemctl status <mariadb>.service If something other than (root) is listed beside the PID, e.g. Main PID: <PID> (root), this is a pass. No results implies MariaDB is not managed by systemd. 3. Perform the following to determine if Docker is installed and a MariaDB container is in use: 1. To check for docker installation, execute this command: $ docker -v If a message stating the version of docker which is installed proceed to the next steps, otherwise no further action is needed as docker must be installed for MariaDB to be run in docker. 2. To check if a MariaDB image exists in docker run this command: $ sudo docker images REPOSITORY           TAG       IMAGE ID       CREATED       SIZE mariadb              latest    5c284e5e8296   2 weeks ago   384MB If a MariaDB image is listed proceed to the next steps, otherwise, no further action is needed as a MariaDB image is required for MariaDB to be run in docker. 3. Check if a MariaDB container is running: $ sudo docker ps CONTAINER ID   IMAGE            COMMAND                  CREATED STATUS         PORTS      NAMES 525f7777a0e8   mariadb:latest   \"docker-entrypoint.s…\"   2 minutes ago   Up 2 minutes   3306/tcp   mariadb-server If a mariadb container is listed then MariaDB is running in docker and this is a pass. If MariaDB does not use chroot, systemd, or docker, this is a fail.",
    "remediation": "Perform one of the following steps to remediate this setting: • Configure MariaDB to use chroot: 1. Choose a non-system partition <chroot location> for MariaDB 2. Add chroot= <chroot_location> to the my.cnf option file • Configure MariaDB to run under systemd: 1. If MariaDB is managed by systemd and running, stop the service: $ sudo systemctl stop <mysqld>.service 2. If a mysql user and group do not already exist, create them: $ sudo groupadd mysql $ sudo useradd -r -g mysql -s /bin/false mysql 3. Set the ownership of the base directory: $ sudo chown -R mysql:mysql /usr/local/mysql/ 4. Create or modify the <mysqld> .service file in /lib/systemd/system to include the following entries, if not already present: [Unit] Description=MariaDB Server [Install] WantedBy=multi-user.target [Service] User=mysql Group=mysql 5. If MariaDB was not already already managed by systemd execute this command: $ sudo systemctl daemon-reload 6. Start the MariaDB server: $ sudo systemctl start <mariadb>.service 7. If you would like MariaDB to automatically run at startup execute this command: $ sudo systemctl enable <mariadb>.service • Follow documentation in the references for standing up MariaDB in a Docker container. During setup, follow the special notes below. o Do not set MARIADB_ALLOW_EMPTY_ROOT_PASSWORD or MYSQL_ALLOW_EMPTY_PASSWORD to a non-empty value. o Ensure that passwords are not set as values of any environment variables being passed to the Docker container. For example, do not orchestrate your container by passing MARIADB_ROOT_PASSWORD= as an environment attribute. Instead, securely set MARIADB_ROOT_PASSWORD within your environment, then simply tell Docker to pass MARIADB_ROOT_PASSWORD (without setting the value) to the container. References: 1. https://mariadb.com/docs/reference/mdb/cli/mariadbd/chroot/ 2. https://mariadb.com/kb/en/installing-and-using-mariadb-via-docker/ 3. https://hub.docker.com/_/mariadb 4. https://mariadb.com/kb/en/mariadb-docker-environment-variables/ 5. https://mariadb.com/kb/en/mariadb-container-cheat-sheet/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "impact": "Use of the chroot option somewhat limits LOAD DATA INFILE and SELECT ... INTO OUTFILE.",
    "references": "1. https://mariadb.com/docs/reference/mdb/cli/mariadbd/chroot/ 2. https://mariadb.com/kb/en/installing-and-using-mariadb-via-docker/ 3. https://hub.docker.com/_/mariadb 4. https://mariadb.com/kb/en/mariadb-docker-environment-variables/ 5. https://mariadb.com/kb/en/mariadb-container-cheat-sheet/",
    "function_names": [
      "mariadb_instance_sandboxed",
      "mariadb_instance_chroot_enabled",
      "mariadb_instance_systemd_isolated",
      "mariadb_instance_docker_containerized",
      "mariadb_instance_secure_environment",
      "mariadb_instance_isolation_enabled",
      "mariadb_instance_sandbox_configured",
      "mariadb_instance_chroot_configured",
      "mariadb_instance_systemd_sandboxed",
      "mariadb_instance_containerized_deployment"
    ]
  },
  {
    "id": "2.1.1",
    "title": "Backup Policy in Place",
    "assessment": "Manual",
    "description": "A backup policy should be in place.",
    "rationale": "Backing up MariaDB databases, including mysql, will help ensure the availability of data in the event of an incident. Without backups, it might be hard to recover from an incident.",
    "audit": "Check with crontab -l if there is a backup schedule.",
    "remediation": "Create a backup policy and backup schedule. References: 1. https://mariadb.com/kb/en/backup-and-restore-overview/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/backup-and-restore-overview/",
    "function_names": [
      "backup_policy_exists",
      "backup_policy_enabled",
      "backup_policy_retention_configured",
      "backup_policy_frequency_configured",
      "backup_policy_encryption_enabled",
      "backup_policy_cross_region_enabled",
      "backup_policy_versioning_enabled",
      "backup_policy_recovery_point_configured",
      "backup_policy_immutable_enabled",
      "backup_policy_monitoring_enabled"
    ]
  },
  {
    "id": "2.1.2",
    "title": "Verify Backups are Good",
    "assessment": "Manual",
    "description": "Backups should be validated on a regular basis.",
    "rationale": "Verifying that backups are occurring appropriately will help ensure data availability in the event of an incident. Without a well-tested backup, it might be hard to recover from an incident if the backup procedure contains errors or doesn't include all required data.",
    "audit": "Check reports of backup validation tests.",
    "remediation": "Implement regular backup checks and document each check. References: 1. https://mariadb.com/kb/en/full-backup-and-restore-with-mariabackup/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/full-backup-and-restore-with-mariabackup/",
    "function_names": [
      "backup_recovery_validation_periodic",
      "backup_integrity_verified_recently",
      "backup_restore_test_successful",
      "backup_validation_schedule_active",
      "backup_data_consistency_ensured",
      "backup_recovery_point_objective_met",
      "backup_recovery_time_objective_met",
      "backup_validation_logs_available",
      "backup_recovery_procedure_documented",
      "backup_validation_automated"
    ]
  },
  {
    "id": "2.1.3",
    "title": "Secure Backup Credentials",
    "assessment": "Manual",
    "description": "A database user with the least amount of privileges required to perform backup is needed. The credentials for this user should be protected. The password, certificate, and any other credentials should be protected.",
    "rationale": "When the backup credentials are not properly secured, then they might be abused to gain access to the server. The backup user needs an account with many privileges, so an attacker might potentially gain (almost) complete access to the server.",
    "audit": "Check permissions of files containing passwords and/or SSL keys.",
    "remediation": "Change file permissions.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "function_names": [
      "database_user_backup_credentials_encrypted",
      "database_user_backup_credentials_rotated",
      "database_user_backup_credentials_least_privilege",
      "database_user_backup_password_protected",
      "database_user_backup_certificate_protected",
      "database_user_backup_credentials_secure_storage",
      "database_user_backup_credentials_access_restricted",
      "database_user_backup_credentials_audit_logged"
    ]
  },
  {
    "id": "2.1.4",
    "title": "The Backups Should be Properly Secured",
    "assessment": "Manual",
    "description": "The backup files will contain all data in the databases. Filesystem permissions and/or encryption should be used to prevent unauthorized users from gaining access to the backups.",
    "rationale": "Backups should be considered sensitive information. If an unauthorized user can access backups, then they have access to all data in the database. This is true for unencrypted backups and for encrypted backups if the encryption key is stored along with the backup.",
    "audit": "Check who has access to the backup files. • Are the files world-readable (e.g., rw-r--r-) o Are they stored in a world readable directory? • Is the group MySQL and/or backup specific? o If not: the file and directory must not be group readable • Are the backups stored offsite? o Who has access to the backups? • Are the backups encrypted? o Where is the encryption key stored? o Does the encryption key consist of a guessable password?",
    "remediation": "Implement encryption, properly restrict filesystem permissions, protect and backup encryption keys. $ mariabackup --defaults-file=/home/dbadmin/my.cnf --backup --stream=xbstream \\ | openssl  enc -aes-256-cbc -k mypass > backup.xb.enc The example above creates an AES-encrypted backup, protected with the password \"mypass\" and stores it in a file \"backup.xb.enc\": References: 1. https://mariadb.com/kb/en/using-encryption-and-compression-tools-with- mariabackup/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/using-encryption-and-compression-tools-with- mariabackup/",
    "function_names": [
      "backup_storage_encryption_enabled",
      "backup_storage_permissions_restricted",
      "backup_storage_access_logging_enabled",
      "backup_storage_retention_policy_configured",
      "backup_storage_versioning_enabled",
      "backup_storage_immutable_backups_enabled",
      "backup_storage_cross_region_replication_enabled",
      "backup_storage_min_tls_1_2",
      "backup_storage_public_access_blocked",
      "backup_storage_encryption_key_rotation_enabled"
    ]
  },
  {
    "id": "2.1.5",
    "title": "Point-in-Time Recovery",
    "assessment": "Automated",
    "description": "With binlogs it is possible to implement point-in-time recovery. This makes it possible to restore the changes between the last full backup and the point-in-time. Enabling binlogs is not sufficient. The binlogs need to be backed up to separate media. The restore procedure should be created and tested. The data in the binlog files may contain sensitive information which needs be stored in the proper location with restrictive permissions and may require encryption.",
    "rationale": "Using binlogs can reduce the amount of information lost when recovering from a backup. Impact: Binlogs can grow quite large and take up a large amount of space so auto remove needs to be put into place.",
    "audit": "Check if binlogs are enabled and if there is a restore procedure. Check to see if -- binlog-expire-logs-seconds is set. SELECT VARIABLE_NAME, VARIABLE_VALUE, 'BINLOG - Log Expiration' as Note FROM information_schema.global_variables where variable_name = 'binlog_expire_logs_seconds'; Ensure this value is not set to 0.",
    "remediation": "Enable binlogs, then create and test a restore procedure. Default Value: 0 References: 1. https://mariadb.com/kb/en/replication-and-binary-log-system-variables/ 2. https://mariadb.com/kb/en/overview-of-the-binary-log/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "impact": "Binlogs can grow quite large and take up a large amount of space so auto remove needs to be put into place.",
    "references": "1. https://mariadb.com/kb/en/replication-and-binary-log-system-variables/ 2. https://mariadb.com/kb/en/overview-of-the-binary-log/",
    "function_names": [
      "database_instance_binlog_backup_enabled",
      "database_instance_binlog_backup_encrypted",
      "database_instance_binlog_backup_separate_media",
      "database_instance_binlog_backup_restrictive_permissions",
      "database_instance_point_in_time_recovery_enabled",
      "database_instance_restore_procedure_defined",
      "database_instance_restore_procedure_tested"
    ]
  },
  {
    "id": "2.1.6",
    "title": "Disaster Recovery (DR) Plan",
    "assessment": "Manual",
    "description": "A disaster recovery plan should be created. MariaDB Galera Cluster (group replication), MariaDB Replication (asynchronous replication) or both may be used. A replica in a different data center and offsite backups may be used. There should be information regarding the Recovery Time Objective (RTO), i.e., how long recovery will take, and if the recovery site has the same capacity. Additionally, delayed replicas can be a valuable part of a DR plan. Network (default) and at rest encryption should be used to protect data.",
    "rationale": "A disaster recovery strategy should be planned and formalized. Without a well-tested disaster recovery plan, it might not be possible to recover in time.",
    "audit": "Check if there is a disaster recovery plan.",
    "remediation": "Create a disaster recovery plan. References: 1. https://mariadb.com/kb/en/setting-up-replication/ 2. https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/setting-up-replication/ 2. https://mariadb.com/kb/en/getting-started-with-mariadb-galera-cluster/",
    "function_names": [
      "mariadb_cluster_replication_enabled",
      "mariadb_replication_asynchronous_enabled",
      "mariadb_replica_different_datacenter",
      "mariadb_backup_offsite_enabled",
      "mariadb_recovery_time_objective_defined",
      "mariadb_recovery_site_capacity_matched",
      "mariadb_replica_delayed_enabled",
      "mariadb_network_encryption_enabled",
      "mariadb_at_rest_encryption_enabled"
    ]
  },
  {
    "id": "2.1.7",
    "title": "Backup of Configuration and Related Files",
    "assessment": "Manual",
    "description": "It is important to include configuration, log, key, certificates, and customized files in backups.",
    "rationale": "Including all configuration, log, key, certificates, and customized files in any backup will ensure the backup can fully restore an instance.",
    "audit": "Check if these files are in use and are saved in the backup. • Edited Configuration files (mariadb.cnf and included files) • Files related to Key Management and Keyring (KMIP, other Key Management Services) • Audit Log Files (if not handled by other methods) • SSL files (certificates, keys) • User Defined Functions (UDFs) • Source code for customizations",
    "remediation": "Add any omitted files to the backup. References: 1. https://mariadb.com/kb/en/configuring-mariadb-with-option-files/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/configuring-mariadb-with-option-files/",
    "function_names": [
      "backup_configuration_files_included",
      "backup_log_files_included",
      "backup_key_files_included",
      "backup_certificate_files_included",
      "backup_customized_files_included",
      "backup_all_critical_files_included",
      "backup_configuration_logs_keys_included",
      "backup_essential_files_included"
    ]
  },
  {
    "id": "2.2",
    "title": "Dedicate the Machine Running MariaDB",
    "assessment": "Manual",
    "description": "It is recommended that MariaDB Server software be installed on a dedicated server. This architectural consideration affords flexibility in that the database server can be placed on a separate zone allowing access only from particular hosts and over particular protocols.",
    "rationale": "The attack surface is reduced on a server with only the underlying operating system, MariaDB server software, and any security or operational tooling that may be additionally installed. A smaller attack surface reduces the probability of the data within MariaDB being compromised. Impact: Care must be taken that applications or services that are required for proper operation of the operating system are not removed. Custom applications may need to be modified to accommodate database connections over the network rather than on the use (e.g., using TCP/IP connections). Additional hardware and operating system licenses may be required to make the architectural change.",
    "audit": "Verify there are no other roles enabled for the underlying operating system and that no additional applications or services unrelated to the proper operation of the MariaDB server software are installed.",
    "remediation": "Remove excess applications or services and/or remove unnecessary roles from the underlying operating system.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Care must be taken that applications or services that are required for proper operation of the operating system are not removed. Custom applications may need to be modified to accommodate database connections over the network rather than on the use (e.g., using TCP/IP connections). Additional hardware and operating system licenses may be required to make the architectural change.",
    "function_names": [
      "compute_instance_dedicated_mariadb",
      "mariadb_instance_dedicated_host",
      "mariadb_server_dedicated_environment",
      "compute_mariadb_no_shared_resources",
      "mariadb_instance_isolated_host",
      "mariadb_server_single_tenant",
      "compute_instance_mariadb_only",
      "mariadb_host_no_other_services"
    ]
  },
  {
    "id": "2.3",
    "title": "Do Not Specify Passwords in the Command Line",
    "assessment": "Manual",
    "description": "When a command is executed on the command line, for example mariadb -u admin -p password, the password may be visible in the user's shell/command history or in the process list.",
    "rationale": "If the password is visible in the process list or user's shell/command history, an attacker will be able to access the MariaDB database using the stolen credentials. Impact: Depending on the remediation chosen, additional steps may need to be undertaken like: • Entering a password when prompted. • Ensuring the file permissions on .mariadb.cnf is restricted yet accessible by the user. • Use a pluggable secure password store, e.g., a keychain. Additionally, not all scripts/applications may be able to use .mariadb.cnf.",
    "audit": "Check the process or task list if the password is visible. Check the shell or command history if the password is visible.",
    "remediation": "MariaDB Client: Use -p without password and then enter the password when prompted, use a properly secured .mariadb.cnf file, or store authentication information in encrypted format in .mylogin.cnf. References: 1. https://mariadb.com/kb/en/mysql-command-line-client/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Depending on the remediation chosen, additional steps may need to be undertaken like: • Entering a password when prompted. • Ensuring the file permissions on .mariadb.cnf is restricted yet accessible by the user. • Use a pluggable secure password store, e.g., a keychain. Additionally, not all scripts/applications may be able to use .mariadb.cnf.",
    "references": "1. https://mariadb.com/kb/en/mysql-command-line-client/",
    "function_names": [
      "compute_command_line_passwords_prohibited",
      "compute_command_line_credentials_prohibited",
      "compute_command_line_sensitive_data_prohibited",
      "compute_command_line_passwords_not_specified",
      "compute_command_line_credentials_not_specified",
      "compute_command_line_sensitive_data_not_specified",
      "compute_command_line_passwords_avoided",
      "compute_command_line_credentials_avoided",
      "compute_command_line_sensitive_data_avoided",
      "compute_command_line_passwords_restricted"
    ]
  },
  {
    "id": "2.4",
    "title": "Do Not Reuse Usernames",
    "assessment": "Manual",
    "description": "Database user accounts should not be reused for multiple applications or users.",
    "rationale": "Utilizing unique database accounts across applications will reduce the impact of a compromised MySQL account. If a user is reused, then a compromise of this user will compromise multiple parts of the system and/or application.",
    "audit": "Each user (excluding mysql reserved users) should be linked to one of these: • system accounts • a person • an application To list users (and exclude mysql reserved users): SELECT host, user, plugin, IF(plugin = 'mysql_native_password', 'WEAK SHA1', 'STRONG SHA2') AS HASHTYPE FROM mysql.user WHERE user NOT IN ('mysql.infoschema', 'mysql.session', 'mysql.sys') AND plugin NOT LIKE 'auth%' AND plugin <> 'mysql_no_login' AND LENGTH(authentication_string) > 0 ORDER BY plugin;",
    "remediation": "Add/Remove users so that each user is only used for one specific purpose.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "function_names": [
      "database_user_unique_names",
      "database_user_no_reuse",
      "database_user_distinct_identifiers",
      "database_user_unique_credentials",
      "database_user_exclusive_usage"
    ]
  },
  {
    "id": "2.5",
    "title": "Ensure Non-Default, Unique Cryptographic Material is in Use",
    "assessment": "Manual",
    "description": "The cryptographic material used by MariaDB, such as digital certificates and encryption keys, should be used only for MariaDB and only for one instance. Default cryptographic material should not be used since it is not unique to the instance.",
    "rationale": "If a cryptographic material is used on multiple MariaDB instances and/or systems, then a compromise of one may lead to the network traffic of all servers being compromised that use the same cryptographic material. If an attacker gains access to shared cryptographic material, including default material, the attacker can reuse that material to impersonate the MariaDB server or otherwise compromise its operations.",
    "audit": "Review all cryptographic material. If it is default, used for other MariaDB instances and/or for purposes other than MariaDB then this is a finding. Review the server certificate by running: cd <data_dir and/or ssl_cert> sudo openssl x509 -in server-cert.pem -subject -noout | grep Auto_Generated_Server_Certificate The output for the auto generated pem will look something like: subject= /CN=MariaDB_Server_10.6.8_Auto_Generated_Server_Certificate If no rows return, the check is a pass since the certificate is not MariaDB auto- generated.",
    "remediation": "Generate new certificates, keys, and other cryptographic material as needed for each affected MariaDB instance. References: 1. https://mariadb.com/kb/en/securing-connections-for-client-and-server/ 2. https://mariadb.com/kb/en/secure-connections-overview/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/securing-connections-for-client-and-server/ 2. https://mariadb.com/kb/en/secure-connections-overview/",
    "function_names": [
      "mariadb_instance_unique_cryptographic_material",
      "mariadb_instance_no_default_cryptographic_material",
      "mariadb_certificate_unique_per_instance",
      "mariadb_key_non_default",
      "mariadb_encryption_unique_keys",
      "mariadb_tls_certificate_instance_specific",
      "mariadb_crypto_material_instance_unique",
      "mariadb_instance_dedicated_cryptographic_material"
    ]
  },
  {
    "id": "2.6",
    "title": "Ensure 'password_lifetime' is Less Than or Equal to '365'",
    "assessment": "Automated",
    "description": "Password expiration provides users with a unique time bounded password lifetime.",
    "rationale": "Allows additional security factors pertinent to a specific user to provide further password security; predetermined by varying security needs and usability requirements in a system or organization.",
    "audit": "The global password lifetime is set using default_password_lifetime. If the value of default_password_lifetime is greater than 0, it indicates the permitted password lifetime. Execute the following command to check the global password lifetime: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables where VARIABLE_NAME like 'default_password_lifetime'; A value greater than 365 implies a fail. When the global password lifetime is less than or equal to 365, or not configured, each user account shall be checked by executing the following command: WITH password_expiration_info AS ( SELECT User, Host, IF( IFNULL(JSON_EXTRACT(Priv, '$.password_lifetime'), -1) = -1, @@global.default_password_lifetime, JSON_EXTRACT(Priv, '$.password_lifetime') ) AS password_lifetime, JSON_EXTRACT(Priv, '$.password_last_changed') AS password_last_changed FROM mysql.global_priv ) SELECT pei.User, pei.Host, pei.password_lifetime, FROM_UNIXTIME(pei.password_last_changed) AS password_last_changed_datetime, FROM_UNIXTIME( pei.password_last_changed + (pei.password_lifetime * 60 * 60 * 24) ) AS password_expiration_datetime FROM password_expiration_info pei WHERE pei.password_lifetime != 0 AND pei.password_last_changed IS NOT NULL UNION SELECT pei.User, pei.Host, pei.password_lifetime, FROM_UNIXTIME(pei.password_last_changed) AS password_last_changed_datetime, 0 AS password_expiration_datetime FROM password_expiration_info pei WHERE pei.password_lifetime = 0 OR pei.password_last_changed IS NULL; Note: A value of 0 implies the password never expires.",
    "remediation": "To configure the global password lifetime to 365 by executing the following command: SET GLOBAL default_password_lifetime=365; Alternatively, configure the password lifetime for each user returned by the audit procedure by executing the following command: ALTER USER ' <username> '@' <localhost> ' PASSWORD EXPIRE INTERVAL 365 DAY; Default Value: 0 References: 1. https://csrc.nist.gov/csrc/media/publications/sp/800-118/archive/2009-04- 21/documents/draft-sp800-118.pdf 2. https://mariadb.com/docs/reference/mdb/system- variables/default_password_lifetime/ 3. https://mariadb.com/kb/en/user-password-expiry/ Additional Information: When a user's password_lifetime is set to NULL it takes on the value set in global default_password_lifetime variable.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://csrc.nist.gov/csrc/media/publications/sp/800-118/archive/2009-04- 21/documents/draft-sp800-118.pdf 2. https://mariadb.com/docs/reference/mdb/system- variables/default_password_lifetime/ 3. https://mariadb.com/kb/en/user-password-expiry/ Additional Information: When a user's password_lifetime is set to NULL it takes on the value set in global default_password_lifetime variable.",
    "function_names": [
      "iam_user_password_lifetime_max_365d",
      "iam_password_policy_lifetime_compliant",
      "iam_credential_expiration_within_1y",
      "iam_user_password_expiry_enforced",
      "iam_password_lifetime_limit_365d",
      "iam_account_password_age_restricted",
      "iam_user_password_rotation_required",
      "iam_password_policy_max_age_365d"
    ]
  },
  {
    "id": "2.7",
    "title": "Lock Out Accounts if Not Currently in Use",
    "assessment": "Manual",
    "description": "If users with accounts will not be using their account for some time, to reduce the risk of attacks or inappropriate account usage or if suspicions exist that an account might be under attack, disabling the account will secure it and once it's ready to resume use it can easily be re-enabled.",
    "rationale": "Only have active accounts that will be used.",
    "audit": "Review the locked status of accounts: SELECT CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)) FROM mysql.global_priv ; Accounts not in use and MariaDB Reserved accounts should show as account_locked:true",
    "remediation": "To lock accounts - example: ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK; To unlock accounts - example ALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK; Note: Works for CREATE as well. It is good practice to LOCK an account if created ahead of time. Default Value: Accounts are unlocked by default. References: 1. https://mariadb.com/kb/en/account-locking/ Additional Information: When a client attempts to connect to a locked account, the attempt fails. Access denied for user 'user_name'@'host_name'. Account is locked. The server increments the Locked_connects status variable that indicates the number of attempts to connect to a locked account. To view the Locked_conects execute this query: show global status like 'Locked_connects'; The error log will contain the message ER_ACCOUNT_HAS_BEEN_LOCKED.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/account-locking/ Additional Information: When a client attempts to connect to a locked account, the attempt fails. Access denied for user 'user_name'@'host_name'. Account is locked. The server increments the Locked_connects status variable that indicates the number of attempts to connect to a locked account. To view the Locked_conects execute this query: show global status like 'Locked_connects'; The error log will contain the message ER_ACCOUNT_HAS_BEEN_LOCKED.",
    "function_names": [
      "iam_user_account_locked_unused",
      "iam_user_account_locked_inactive",
      "iam_user_account_locked_suspicious",
      "iam_user_account_locked_over_90d",
      "iam_user_account_locked_over_180d",
      "iam_user_account_locked_over_365d",
      "iam_user_account_locked_no_recent_activity",
      "iam_user_account_locked_no_login_recent",
      "iam_user_account_locked_no_api_activity",
      "iam_user_account_locked_no_console_activity"
    ]
  },
  {
    "id": "2.8",
    "title": "Ensure Socket Peer-Credential Authentication is Used Appropriately",
    "assessment": "Manual",
    "description": "The server-side unix_socket authentication plugin authenticates clients that connect to the MariaDB server from the local host through the Unix socket file. Users authenticated using unix_socket need not specify a password when connecting to the server. However, users authenticated by the unix_socket plugin are restricted from connecting remotely; they can only connect from the local host through the Unix socket file. This method is only suitable in situations where the server administrator OS account access is restricted.",
    "rationale": "This method may be desirable in specific cases, including: • The Linux system where MariaDB is running is dedicated to the MariaDB server and only the MariaDB DBA and OS Admin have access. • When control over user authentication is centralized in the operating system. • It is desirable that audit trails in the database and operating system can use the same user names. • For certain other narrow installation use cases unix_socket may be desirable. • Only local connections for a user. Impact: Things to consider when using the operating system to authenticate users: • The user must have an operating system account on the computer which must be accessed. • If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem. • When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for unix_socket. • This will not work where distributed connections are required.",
    "audit": "To determine if the unix_socket plugin is enabled, run: SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME = 'unix_socket'; If PLUGIN_STATUS is ACTIVE and the organization does not allow use of this feature, this is a fail. To determine users who can use unix_socket, run: SELECT CONCAT(user, '@', host, ' => ', JSON_DETAILED(priv)) FROM mysql.global_priv where JSON_CONTAINS(priv, '{\"plugin\":\"unix_socket\"}', '$.auth_or'); If host is not the localhost or an unauthorized user is listed, this is a fail.",
    "remediation": "If the plugin is active and you need to disable it in your environment, add the following option under the [mysqld] option group in your MariaDB configuration file, then restart MariaDB: unix_socket=OFF If the plugin is disabled but you seek to use it, ensure the following option is set under the [mysqld] option group in your MariaDB configuration file, then restart MariaDB: unix_socket=ON To enable an OS user to login to MariaDB using unix_socket, include 'unix_socket' as an authentication plugin in your IDENTIFIED VIA clause of CREATE USER commands. For example, run: CREATE USER ' <user> '@'localhost' IDENTIFIED VIA unix_socket; The user can then login using: mysql -u <user> Default Value: The unix_socket plugin is ON by default. References: 1. https://mariadb.com/kb/en/authentication-plugin-unix-socket/ 2. https://mariadb.com/kb/en/create-user/#identified-viawith-authentication_plugin Additional Information: You cannot dynamically install or uninstall the unix_socket plugin in MariaDB 10.6.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "impact": "Things to consider when using the operating system to authenticate users: • The user must have an operating system account on the computer which must be accessed. • If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem. • When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for unix_socket. • This will not work where distributed connections are required.",
    "references": "1. https://mariadb.com/kb/en/authentication-plugin-unix-socket/ 2. https://mariadb.com/kb/en/create-user/#identified-viawith-authentication_plugin Additional Information: You cannot dynamically install or uninstall the unix_socket plugin in MariaDB 10.6.",
    "function_names": [
      "mariadb_unix_socket_authentication_restricted",
      "mariadb_unix_socket_no_remote_access",
      "mariadb_unix_socket_passwordless_auth_disabled",
      "mariadb_unix_socket_localhost_only",
      "mariadb_unix_socket_peer_credential_enabled",
      "mariadb_unix_socket_admin_restricted",
      "mariadb_unix_socket_remote_connection_blocked",
      "mariadb_unix_socket_auth_plugin_configured"
    ]
  },
  {
    "id": "2.9",
    "title": "Ensure MariaDB is Bound to an IP Address",
    "assessment": "Automated",
    "description": "By default, the MariaDB server accepts TCP/IP connections from MariaDB user accounts on all server host IPv6 and IPv4 interfaces. You can make this configuration more restrictive by setting the bind_address configuration option to a specific IPv4 or IPv6 address so that the server only accepts TCP/IP connections on that address.",
    "rationale": "Limiting the IP address provides additional controls and restrictions on how client applications can connect to MariaDB. If not configured to a specific IP all IPs for this server can be used to connect to MariaDB.",
    "audit": "Run the following statement: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'bind_address'; A VARIABLE_VALUE that is empty, is \"*\", or is \"::\" implies a fail.",
    "remediation": "For example, to have the MariaDB server only accept connections on a specific IPv4 address, add an entry similar to this under the [mysqld] option group in MariaDB configuration files: bind_address=192.0.2.24 This setting typically appears in /etc/mysql/mariadb.conf.d/50-server.cnf. In the case above, clients can connect to the server using --host=192.0.2.24. Connections on other server host addresses are not permitted. Default Value: Not set. On some linux variants (Ubuntu, Debian), bind_address is set to 127.0.0.1. References: 1. https://mariadb.com/kb/en/server-system-variables/#bind_address",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/server-system-variables/#bind_address",
    "function_names": [
      "mariadb_instance_bind_address_restricted",
      "mariadb_instance_ip_binding_enabled",
      "mariadb_instance_network_access_restricted",
      "mariadb_instance_specific_ip_bound",
      "mariadb_instance_default_binding_disabled",
      "mariadb_instance_interface_restricted",
      "mariadb_instance_tcp_binding_limited",
      "mariadb_instance_ipv4_binding_enabled",
      "mariadb_instance_ipv6_binding_disabled",
      "mariadb_instance_external_access_restricted"
    ]
  },
  {
    "id": "2.10",
    "title": "Limit Accepted Transport Layer Security (TLS) Versions",
    "assessment": "Automated",
    "description": "MariaDB supports multiple versions of TLS. The higher the version the stronger the security and/or better the performance.",
    "rationale": "Requiring clients attempting to connect to MariaDB to use higher versions of TLS to better protect data in transit. Impact: Connections attempting to use an unsupported version of TLS will fail.",
    "audit": "To list the versions of TLS the server accepts, run the following statement: select @@tls_version; If the list includes TLSv1 and/or TLSv1.1, this is a fail. MariaDB negotiates to the highest version of TLS. If connections are using older TLS versions, those clients will need to be upgraded to newer MariaDB Connectors or community drivers that support newer versions of TLS.",
    "remediation": "Set the version(s) of TLS you wish to accept by setting the tls_version option to a comma-separated (no whitespace) string in MariaDB configuration files. For example, to only accept TLS 1.2 or 1.3 connections, set tls_version likeso: tls_version=TLSv1.2,TLSv1.3 Note: with this setting, only clients that support the specified TLS version(s) are able to establish an encrypted connection to the server. Default Value: TLSv1.1,TLSv1.2,TLSv1.3 References: 1. https://mariadb.com/kb/en/secure-connections-overview/ 2. https://mariadb.com/kb/en/ssltls-system-variables/#tls_version",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "impact": "Connections attempting to use an unsupported version of TLS will fail.",
    "references": "1. https://mariadb.com/kb/en/secure-connections-overview/ 2. https://mariadb.com/kb/en/ssltls-system-variables/#tls_version",
    "function_names": [
      "mariadb_instance_tls_version_restricted",
      "mariadb_instance_tls_min_version_enforced",
      "mariadb_instance_tls_1_2_or_higher_required",
      "mariadb_instance_weak_tls_versions_disabled",
      "mariadb_instance_tls_version_compliance_check",
      "mariadb_instance_tls_protocol_restricted",
      "mariadb_instance_secure_tls_config_enabled",
      "mariadb_instance_tls_version_limited",
      "mariadb_instance_tls_1_0_and_1_1_disabled",
      "mariadb_instance_tls_security_version_enforced"
    ]
  },
  {
    "id": "2.11",
    "title": "Require Client-Side Certificates (X.509)",
    "assessment": "Automated",
    "description": "Client-side certificates may be used as proof of identity.",
    "rationale": "Requiring client-side certificates provides additional validation of a user's identity.",
    "audit": "Run the following statement select user, host, ssl_type from mysql.user where user not in ('mysql', 'root', 'mariadb.sys'); If ssl_type returns X509, client-side certificate details must be provided to connect.",
    "remediation": "Create or Alter users using the REQUIRE X509. For example: CREATE USER 'newuser2'@'%' IDENTIFIED BY <password> require x509; For accounts created with a REQUIRE X509 clause, clients must specify at least --ssl- cert and --ssl-key. In addition, --ssl-ca (or --ssl-capath) is recommended so that the public certificate provided by the server can be verified. For example: mysql --ssl-ca=ca.pem \\ --ssl-cert=client-cert.pem \\ --ssl-key=client-key.pem References: 1. https://mariadb.com/kb/en/certificate-creation-with-openssl/ Additional Information: The audit procedure excludes these internal user accounts from evaluation because, by default, they are created with an invalid password and/or are locked to disallow access. • ‘mysql’@’localhost’ • ‘root’@’localhost’ • ‘mariadb.sys’@’localhost’",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/certificate-creation-with-openssl/ Additional Information: The audit procedure excludes these internal user accounts from evaluation because, by default, they are created with an invalid password and/or are locked to disallow access. • ‘mysql’@’localhost’ • ‘root’@’localhost’ • ‘mariadb.sys’@’localhost’",
    "function_names": [
      "cloud_cdn_load_balancer_client_certificate_required",
      "cloud_cdn_load_balancer_x509_authentication_enabled",
      "compute_load_balancer_client_certificate_required",
      "compute_load_balancer_x509_authentication_enabled",
      "network_load_balancer_client_certificate_required",
      "network_load_balancer_x509_authentication_enabled",
      "api_gateway_client_certificate_required",
      "api_gateway_x509_authentication_enabled",
      "cloudfront_distribution_client_certificate_required",
      "cloudfront_distribution_x509_authentication_enabled"
    ]
  },
  {
    "id": "2.12",
    "title": "Ensure Only Approved Ciphers are Used",
    "assessment": "Automated",
    "description": "MariaDB supports multiple encryption ciphers. Ciphers can vary in strength, speed and overhead.",
    "rationale": "Requiring clients attempting to connect to MariaDB to use strong ciphers protects data in transit. Impact: Connections attempting to use an unsupported cipher will fail.",
    "audit": "Run the following statement: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'ssl_cipher'; If VARIABLE_VALUE is empty, or includes unapproved ciphers, this is a fail.",
    "remediation": "Set ssl_cipher to one or more approved cipher suites in your MariaDB configuration file, then restart MariaDB. For example, set: ssl_cipher='ECDHE-ECDSA-AES128-GCM-SHA256' Default Value: None References: 1. https://mariadb.com/kb/en/ssltls-system-variables/#ssl_cipher 2. https://mariadb.com/kb/en/secure-connections-overview/ Additional Information: The ssl_cipher option implies the ssl option, so you must have SSL/TLS setup to utilize this option. ssl_cipher is not a dynamic variable, so it cannot be set once MariaDB is running.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "impact": "Connections attempting to use an unsupported cipher will fail.",
    "references": "1. https://mariadb.com/kb/en/ssltls-system-variables/#ssl_cipher 2. https://mariadb.com/kb/en/secure-connections-overview/ Additional Information: The ssl_cipher option implies the ssl option, so you must have SSL/TLS setup to utilize this option. ssl_cipher is not a dynamic variable, so it cannot be set once MariaDB is running.",
    "function_names": [
      "mariadb_server_approved_ciphers_enabled",
      "mariadb_connection_strong_ciphers_required",
      "mariadb_tls_secure_cipher_suites",
      "mariadb_encryption_weak_ciphers_disabled",
      "mariadb_network_approved_cipher_list",
      "mariadb_tls_cipher_suite_compliance",
      "mariadb_security_strong_ciphers_only",
      "mariadb_connection_cipher_strength_enforced"
    ]
  },
  {
    "id": "3.1",
    "title": "Ensure 'datadir' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "The data directory is the location of the MariaDB databases.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB database. If someone other than the MariaDB user is allowed to read files from the data directory, it may be possible to read data from the mysql.user table which contains passwords. Additionally, the ability to create files can lead to denial of service, or might otherwise allow someone to gain access to specific data by manually creating a file with a view definition.",
    "audit": "Perform the following steps to assess this recommendation: • Execute the following SQL statement to determine the Value of datadir show variables where variable_name = 'datadir'; Or SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME LIKE 'datadir'; • Execute the following command at a terminal prompt sudo ls -ld <datadir> | grep \"drwxr-x---.*mysql.*mysql\" Lack of output implies a fail.",
    "remediation": "Execute the following commands at a terminal prompt: chmod 750 <datadir> chown mysql:mysql <datadir>",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "function_names": [
      "mariadb_data_directory_permissions_restricted",
      "mariadb_datadir_secure_permissions",
      "mariadb_data_directory_owner_correct",
      "mariadb_datadir_group_permissions_restricted",
      "mariadb_data_directory_world_writable_disabled",
      "mariadb_datadir_strict_permissions",
      "mariadb_data_directory_no_public_access",
      "mariadb_datadir_owner_root_required"
    ]
  },
  {
    "id": "3.2",
    "title": "Ensure 'log_bin_basename' Files Have Appropriate Permissions",
    "assessment": "Automated",
    "description": "MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB logs. Impact: Changing the permissions and ownership of the relay logs and binary log files might have impact on external tools. If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MariaDB service, then this might break replication. The binary log file can be used for point-in-time recovery so this can also affect backup, restore, and disaster recovery procedures.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of log_bin_basename: show variables like 'log_bin_basename'; 2. Execute the following command at a terminal prompt to list all non-compliant log_bin_basename.* file permissions: ls -l | egrep '^-(?![r|w]{2}-[r|w]{2}---- .*mysql\\s*mysql).* <log_bin_basename> .*$' Lack of output implies compliance.",
    "remediation": "Execute the following command for each log file location requiring corrected permissions and ownership: chmod 660 <log file> chown mysql:mysql <log file>",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Changing the permissions and ownership of the relay logs and binary log files might have impact on external tools. If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MariaDB service, then this might break replication. The binary log file can be used for point-in-time recovery so this can also affect backup, restore, and disaster recovery procedures.",
    "function_names": [
      "mariadb_log_file_permissions_restricted",
      "mariadb_log_bin_basename_secure_permissions",
      "mariadb_log_file_ownership_correct",
      "mariadb_log_file_access_controlled",
      "mariadb_log_file_encryption_enabled",
      "mariadb_log_file_secure_key_management",
      "mariadb_log_file_at_rest_encryption_enabled",
      "mariadb_log_file_non_admin_access_restricted",
      "mariadb_log_file_permissions_audit_compliant",
      "mariadb_log_file_secure_ownership_enforced"
    ]
  },
  {
    "id": "3.3",
    "title": "Ensure 'log_error' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users. Much of the information about the state of MariaDB exists in MariaDB, the MariaDB performance_schema or informations_schema. In cases where the information you need is within a running MariaDB, use these methods as they are more secure as they do not require OS login and access.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB logs. Impact: Changing the permissions of the error log files might have impact on monitoring tools which use an error log file adapter.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of log_error: show variables like 'log_error'; 2. Execute the following command at a terminal prompt to list all non-compliant <log_error> .* file permissions: ls -l /var/log/mysql/mariadb.err | grep '^-rw-------.*mysql.*mysql.*$' Lack of output implies a fail.",
    "remediation": "Execute the following command for each log file location requiring corrected permissions and ownership: chmod 600 <log file> chown mysql:mysql <log file> References: 1. https://mariadb.com/kb/en/error-log/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Changing the permissions of the error log files might have impact on monitoring tools which use an error log file adapter.",
    "references": "1. https://mariadb.com/kb/en/error-log/",
    "function_names": [
      "mariadb_log_error_restricted_permissions",
      "mariadb_log_error_secure_ownership",
      "mariadb_log_error_no_world_access",
      "mariadb_log_error_encrypted_at_rest",
      "mariadb_log_error_secure_key_management",
      "mariadb_log_error_performance_schema_access",
      "mariadb_log_error_information_schema_access",
      "mariadb_log_error_no_os_login_required"
    ]
  },
  {
    "id": "3.4",
    "title": "Ensure 'slow_query_log' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users. Much of the information about the state of MariaDB exists in MariaDB, the MariaDB performance_schema or informations_schema. If you can get the information you need from within MariaDB that is more secure as it does not require OS access. If you are not going to use log files it is best to first disable (don’t enable) and remove any prior logs.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB logs. Impact: Changing the permissions of the log files may impact monitoring tools which use a log file adapter. Also, the slow query log can be used for performance analysis by application developers. The information about the performance exists in MariaDB performance_schema or sys schema views. In cases where the information you need is within a running MariaDB, disable the slow query log and instead use these methods as they are more secure and do not require OS login and access.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of slow_query_log: show variables like 'slow_query_log'; Best for the slow query log to be disabled indicated by OFF. 2. Execute the following SQL statement to determine the location of slow_query_log_file: show variables like 'slow_query_log_file'; 3. Execute the following command at a terminal prompt to list non-compliant <slow_query_log_file>.* file permissions: ls -l | egrep '^-(?![r|w]{2}-[r|w]{2}---- .*mysql\\s*mysql).* <slow_query_log_file> .*$' If the slow query log is enabled, lack of output implies compliance. If the slow query log is disabled, remove any old slow query log files.",
    "remediation": "Set slow query log to OFF (instead use SYS schema views or query Performance_Schema) SET PERSIST slow_query_log = OFF; If slow query is enabled, execute the following command to correct permissions and ownership: chmod 660 <log file> chown mysql:mysql <log file> Default Value: Slow query log is off by default. References: 1. https://mariadb.com/kb/en/slow-query-log-overview/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Changing the permissions of the log files may impact monitoring tools which use a log file adapter. Also, the slow query log can be used for performance analysis by application developers. The information about the performance exists in MariaDB performance_schema or sys schema views. In cases where the information you need is within a running MariaDB, disable the slow query log and instead use these methods as they are more secure and do not require OS login and access.",
    "references": "1. https://mariadb.com/kb/en/slow-query-log-overview/",
    "function_names": [
      "mariadb_log_file_permissions_restricted",
      "mariadb_slow_query_log_secure_permissions",
      "mariadb_log_file_ownership_correct",
      "mariadb_log_file_access_limited",
      "mariadb_log_file_encryption_enabled",
      "mariadb_log_file_removal_required",
      "mariadb_log_file_disable_unused",
      "mariadb_log_file_permissions_audited",
      "mariadb_log_file_secure_key_management",
      "mariadb_log_file_at_rest_encryption_enabled"
    ]
  },
  {
    "id": "3.5",
    "title": "Ensure 'relay_log_basename' Files Have Appropriate Permissions",
    "assessment": "Automated",
    "description": "MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log (which can be encrypted), general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB logs. Impact: If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MariaDB service, then this might break replication. The binary log file can be used for point in time recovery so this can also affect backup, restore and disaster recovery procedures.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of relay_log_basename: show variables like 'relay_log_basename'; 2. Execute the following command at a terminal prompt to list non-compliant <relay_log_basename>.* file permissions: ls -l | egrep '^-(?![r|w]{2}-[r|w]{2}---- .*mysql\\s*mysql).* <relay_log_basename> .*$' Lack of output implies compliance.",
    "remediation": "Execute the following command for each log file location requiring corrected permissions and ownership: chmod 660 <log file> chown mysql:mysql <log file> Default Value: <datadir> + '/' + <hostname> + '-relay-bin' References: 1. https://mariadb.com/kb/en/mariadb-10-1-6-release-notes/ 2. https://mariadb.com/kb/en/relay-log/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MariaDB service, then this might break replication. The binary log file can be used for point in time recovery so this can also affect backup, restore and disaster recovery procedures.",
    "references": "1. https://mariadb.com/kb/en/mariadb-10-1-6-release-notes/ 2. https://mariadb.com/kb/en/relay-log/",
    "function_names": [
      "mariadb_log_file_permissions_secure",
      "mariadb_relay_log_basename_permissions_secure",
      "mariadb_binary_log_encryption_enabled",
      "mariadb_relay_log_encryption_enabled",
      "mariadb_audit_log_encryption_enabled",
      "mariadb_log_file_ownership_correct",
      "mariadb_log_file_access_restricted",
      "mariadb_secure_key_management_enabled"
    ]
  },
  {
    "id": "3.6",
    "title": "Ensure 'general_log_file' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log (which can be encrypted), general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MariaDB user. Additionally, using secure key management and at rest MariaDB encryption can further protect data from OS users. Much of the information about the state of MariaDB exists in MariaDB, the MariaDB performance_schema or informations_schema. If you can get the information you need from within MySQL that is more secure as it does not require OS access. If you are not going to use log files it is best to first disable (don’t enable) and remove any prior logs.",
    "rationale": "Limiting the accessibility, or existence, of these log files will protect the confidentiality, integrity, and availability of the MariaDB logs. Impact: Changing the permissions of the general log files may impact monitoring tools which use a log file adapter.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Values of general_log and general_log_file: select @@general_log, @@general_log_file; With a general_log value of 0 or OFF, indicates the log is disabled. If 1 or ON it is enabled. 2. Whether the value is 0, OFF, 1 or ON execute the following command at a terminal prompt to list non-compliant <general_log_file>.* file permissions: ls -l <general_log_file> If general_log is 0 or OFF (disabled) and the log file exists, remove the old general log file. If general_log is 1 or ON (enabled) review the permissions ls -l <general_log_file> grep '^-rw-------.*mysql.*mysql' Lack of output implies compliance.",
    "remediation": "If you can, use MariaDB SYS, PERFORMANCE_SCHEMA, or MariaDBL Auditing as these are more secure options. By default the general_log is disabled (0 or OFF). It's most secure to disable the general_log. To disable the general_log_file: SET PERSIST @@GENERAL_LOG=OFF; If you must use general_log then assure the permissions are correct. Execute the following command for each log file location requiring corrected permissions and ownership: chmod 600 <general_log_file> chown mysql:mysql <general_log_file> Default Value: The variable general_log is set to OFF by default. The variable general_log_file is set to <host_name> .log by default. References: 1. https://mariadb.com/kb/en/general-query-log/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Changing the permissions of the general log files may impact monitoring tools which use a log file adapter.",
    "references": "1. https://mariadb.com/kb/en/general-query-log/",
    "function_names": [
      "mariadb_log_file_secure_permissions",
      "mariadb_general_log_file_restricted_access",
      "mariadb_log_file_encryption_enabled",
      "mariadb_log_file_ownership_correct",
      "mariadb_log_file_disabled_unused",
      "mariadb_log_file_removed_unused",
      "mariadb_log_file_permissions_audit",
      "mariadb_log_file_secure_key_management",
      "mariadb_log_file_at_rest_encryption_enabled"
    ]
  },
  {
    "id": "3.7",
    "title": "Ensure SSL Key Files Have Appropriate Permissions",
    "assessment": "Automated",
    "description": "When configured to use SSL/TLS, MariaDB relies on Secure Sockets Layer (SSL) key files, which are stored on the host's filesystem. These SSL key files are subject to the host's permissions and ownership structure. MariaDB provides ways to create the SSL certificate, SSL key files and RSA key-pair files required to support encrypted connections using SSL and secure password exchange using RSA over unencrypted connections, if those files are missing the server will attempt to autogenerate these files at startup if compiled with OpenSSL.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB database and the communication with the client. If the contents of the SSL key file are known to an attacker, he or she might impersonate the server. This can be used for a man-in-the-middle attack. Depending on the SSL cipher suite, the key might also be used to decipher previously captured network traffic. Impact: If the permissions or ownership for the SSL key file are configured incorrectly, this can cause SSL to be disabled when MariaDB is restarted or can cause MariaDB not to start at all. If other applications are using the same key pair, then changing the permissions or ownership of the SSL key file will affect this application. If this were to occur a new key pair must be generated for MariaDB.",
    "audit": "Perform the following steps to assess this recommendation: 1. Locate the SSL keys and certs in use by executing the following SQL statement. To show all ssl variables: MariaDB [(none)]> SELECT * FROM information_schema.global_variables WHERE REGEXP_INSTR(VARIABLE_NAME,'^.*ssl_(ca|capath|cert|crl|crlpath|key)$') AND VARIABLE_VALUE <> ''; 2. Execute the following commands at a terminal prompt to list non-compliant <ssl_file> file permissions: ls -l <ssl_file> | egrep '^-(?!r-{8}.*mysql\\s*mysql).*$' Lack of output implies compliance",
    "remediation": "Execute the following commands at a terminal prompt to remediate these settings using the Value from the audit procedure: chown mysql:mysql <ssl_file> chmod 400 <ssl_file> References: 1. https://mariadb.com/kb/en/secure-connections-overview/ Additional Information: If SSL is not configured this recommendation is not applicable. By default MariaDB enables SSL. Using SSL is highly recommended.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "If the permissions or ownership for the SSL key file are configured incorrectly, this can cause SSL to be disabled when MariaDB is restarted or can cause MariaDB not to start at all. If other applications are using the same key pair, then changing the permissions or ownership of the SSL key file will affect this application. If this were to occur a new key pair must be generated for MariaDB.",
    "references": "1. https://mariadb.com/kb/en/secure-connections-overview/ Additional Information: If SSL is not configured this recommendation is not applicable. By default MariaDB enables SSL. Using SSL is highly recommended.",
    "function_names": [
      "mariadb_ssl_key_files_restrictive_permissions",
      "mariadb_ssl_key_files_secure_ownership",
      "mariadb_ssl_key_files_no_world_readable",
      "mariadb_ssl_key_files_no_group_writable",
      "mariadb_ssl_key_files_no_other_permissions",
      "mariadb_ssl_key_files_autogenerated_secure",
      "mariadb_ssl_key_files_encrypted_connections_only",
      "mariadb_ssl_key_files_rsa_key_pair_protected"
    ]
  },
  {
    "id": "3.8",
    "title": "Ensure Plugin Directory Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "The plugin directory is the location of the MariaDB plugins. Plugins are storage engines or user defined functions (UDFs).",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB database. If someone can modify plugins then these plugins might be loaded when the server starts and the code will get executed. Impact: Users other than the MariaDB user will no longer be able to update and add/remove plugins unless they're able to switch to the MariaDB user.",
    "audit": "To assess this recommendation, execute the following SQL statement to discover the Value of plugin_dir: show variables where variable_name = 'plugin_dir'; Then, execute the following command at a terminal prompt (using the discovered plugin_dir Value) to determine the permissions and ownership. ls -ld <plugin_dir Value> | grep \"dr-xr-x---\\|dr-xr-xr--\" | grep \"plugin\" Lack of output implies a fail. Note: Permissions are intended to be either 550 or 554.",
    "remediation": "To remediate these settings, execute the following commands at a terminal prompt using the plugin_dir Value from the audit procedure. MariaDB server must not be allowed to write to this location. chmod 550 <plugin_dir Value> #(or use 554) chown mysql:mysql <plugin_dir Value> References: 1. https://mariadb.com/kb/en/show-plugins-soname/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Users other than the MariaDB user will no longer be able to update and add/remove plugins unless they're able to switch to the MariaDB user.",
    "references": "1. https://mariadb.com/kb/en/show-plugins-soname/",
    "function_names": [
      "mariadb_plugin_directory_permissions_restricted",
      "mariadb_plugin_directory_owner_correct",
      "mariadb_plugin_directory_group_correct",
      "mariadb_plugin_directory_world_writable_disabled",
      "mariadb_plugin_directory_strict_mode_enabled",
      "mariadb_plugin_directory_no_unauthorized_access",
      "mariadb_plugin_directory_secure_ownership",
      "mariadb_plugin_directory_no_execute_permissions",
      "mariadb_plugin_directory_read_only_for_others",
      "mariadb_plugin_directory_no_suid_sgid"
    ]
  },
  {
    "id": "3.9",
    "title": "Ensure 'server_audit_file_path' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MariaDB can operate using a variety of log files, each used for different purposes. These are the binary log, error log, slow query log, relay log, audit log and general log. Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the mysql user.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MariaDB logs. Impact: Changing the permissions and ownership of the audit log file may have an impact on who can access and edit the audit log. Such changes can affect monitoring tools which maybe using a log file adapter or scripted alternatives. Also, the audit log may be used for alerting by infrastructure teams which can affect real-time audit capability.",
    "audit": "To assess this recommendation, execute the following SQL statement to discover the server_audit_file_path value: show global variables where variable_name='server_audit_file_path'; If no value is returned, auditing is not installed, and this is a fail. Note: If you see the audit file name but no path, the default path will be the path assigned to the datadir variable. Then, execute the following command at a terminal prompt (using the discovered server_audit_file_path value): ls -l <server_audit_file_path> | egrep \"^-([rw-]{2}-){2}---[ \\t]*[0-9][ \\t]*mysql[ \\t]*mysql.*$\" No results implies a fail.",
    "remediation": "Execute the following commands for the server_audit_file_path discovered in the audit procedure: chmod 660 <server_audit_file_path> chown mysql:mysql <server_audit_file_path>",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "Changing the permissions and ownership of the audit log file may have an impact on who can access and edit the audit log. Such changes can affect monitoring tools which maybe using a log file adapter or scripted alternatives. Also, the audit log may be used for alerting by infrastructure teams which can affect real-time audit capability.",
    "function_names": [
      "mariadb_audit_log_file_permissions_restricted",
      "mariadb_audit_log_file_ownership_correct",
      "mariadb_audit_log_file_access_controlled",
      "mariadb_audit_log_file_group_restricted",
      "mariadb_audit_log_file_world_readable_disabled",
      "mariadb_audit_log_file_world_writable_disabled",
      "mariadb_audit_log_file_user_owned",
      "mariadb_audit_log_file_permissions_secure"
    ]
  },
  {
    "id": "3.10",
    "title": "Ensure File Key Management Encryption Plugin files have appropriate permissions",
    "assessment": "Automated",
    "description": "Certain Key Management Encryption plugins must store sensitive information in files for later retrieval. Such files should have proper permissions.",
    "rationale": "Limiting the accessibility of these files will protect the confidentiality, integrity, and availability of MariaDB plugin information and the data they protect.",
    "audit": "Perform the following steps applicable to the plugin in use to assess this recommendation: File Key Management Plugin 1. Find the file_key_management_filename value by executing the following statement: grep -Po '(?<=file_key_management_filename=).+$' /etc/mysql/mariadb.cnf 2. Verify permissions are 750 for mysql:mysql (or more restrictive) for file_key_management_filename 3. Find the file_key_management_filekey value by executing the following statement: grep -Po '(?<=file_key_management_filekey=).+$' /etc/mysql/mariadb.cnf 4. Verify permissions are 750 for mysql:mysql (or more restrictive) for file_key_management_filekey Additionally, if the File Key Management Encryption plugin is not configured (if there are no such files from steps 1 and 3 above), this is a fail.",
    "remediation": "If the File Key Management plugin is not configured, first implement recommendation 4.10 from this benchmark. Execute the following command for each file location requiring corrected permissions: chmod 750 <file> chown mysql:mysql <file> References: 1. https://mariadb.com/kb/en/data-at-rest-encryption-overview/ 2. https://mariadb.com/kb/en/file-key-management-encryption-plugin/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/kb/en/data-at-rest-encryption-overview/ 2. https://mariadb.com/kb/en/file-key-management-encryption-plugin/",
    "function_names": [
      "kms_plugin_file_permissions_restricted",
      "kms_encryption_plugin_file_owner_valid",
      "kms_plugin_file_group_access_restricted",
      "kms_plugin_file_world_readable_disabled",
      "kms_plugin_file_world_writable_disabled",
      "kms_plugin_file_strict_permissions_enforced",
      "kms_plugin_file_sensitive_data_protected",
      "kms_plugin_file_secure_ownership_required"
    ]
  },
  {
    "id": "4.1",
    "title": "Ensure the Latest Security Patches are Applied",
    "assessment": "Manual",
    "description": "Periodically, updates to MariaDB server are released to resolve bugs, mitigate vulnerabilities, and provide new features. It is recommended that MariaDB installations are up to date with the latest security updates.",
    "rationale": "Maintaining currency with MariaDB patches will help reduce risk associated with known vulnerabilities present in the MariaDB server. Without the latest security patches MariaDB might have known vulnerabilities which could be used by an attacker to gain access. Impact: To update the MariaDB server a restart is required.",
    "audit": "Execute the following SQL statement to identify the MariaDB server version: SHOW VARIABLES WHERE Variable_name LIKE \"version\"; Now compare the version with the security announcements from MariaDB and/or the OS if the OS packages are used.",
    "remediation": "Install the latest patches for your version or upgrade to the latest version. References: 1. https://mariadb.com/kb/en/security/ 2. https://mariadb.com/kb/en/mariadb-1060-release-notes/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "To update the MariaDB server a restart is required.",
    "references": "1. https://mariadb.com/kb/en/security/ 2. https://mariadb.com/kb/en/mariadb-1060-release-notes/",
    "function_names": [
      "mariadb_server_security_patches_up_to_date",
      "mariadb_server_latest_security_patches_applied",
      "mariadb_server_patches_current",
      "mariadb_server_security_updates_installed",
      "mariadb_server_version_up_to_date"
    ]
  },
  {
    "id": "4.2",
    "title": "Ensure Example or Test Databases are Not Installed on Production Servers",
    "assessment": "Automated",
    "description": "The default MariaDB installation does not contain any example or test databases. However, it is a good idea to review for common example databases and ensure they have been removed from production systems.",
    "rationale": "Dropping example databases will reduce the attack surface of the MariaDB server.",
    "audit": "Execute the following SQL statement to determine if the test database is present: SELECT * FROM information_schema.SCHEMATA where SCHEMA_NAME not in ('mysql','information_schema', 'sys', 'performance_schema'); If this is a production system, and a database name includes an example database this is a finding.",
    "remediation": "Execute the following SQL statement to drop an example database: DROP DATABASE <database name> ; Default Value: By default, MariaDB 10.6 does not contain any example or test databases. References: 1. https://mariadb.com/docs/server/deploy/community-primary-cs10-6/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/deploy/community-primary-cs10-6/",
    "function_names": [
      "database_mariadb_example_removed",
      "database_mariadb_test_removed",
      "database_mariadb_production_clean",
      "database_mariadb_default_removed",
      "database_mariadb_non_prod_absent"
    ]
  },
  {
    "id": "4.3",
    "title": "Ensure 'allow-suspicious-udfs' is Set to 'OFF'",
    "assessment": "Automated",
    "description": "This option prevents attaching arbitrary shared library functions as user-defined functions by checking for at least one corresponding method named _init, _deinit, _reset, _clear, or _add.",
    "rationale": "Preventing shared libraries that do not contain user-defined functions from loading will reduce the attack surface of the server.",
    "audit": "Perform the following to determine if the recommended state is in place: • Ensure --allow-suspicious-udfs is not specified in the the mariadbd start up command line. • Ensure allow-suspicious-udfs is set to OFF in the MariaDB configuration: my_print_defaults mysqld | grep allow-suspicious-udfs No results returned is a pass.",
    "remediation": "Perform the following to establish the recommended state: • Remove --allow-suspicious-udfs from the mariadbd start up command line. • Remove allow-suspicious-udfs from the MariaDB option file. Default Value: OFF References: 1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/allow-suspicious-udfs/ 2. https://mariadb.com/kb/en/user-defined-functions-security/ Additional Information: This option has no corresponding state in SHOW VARIABLES.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/allow-suspicious-udfs/ 2. https://mariadb.com/kb/en/user-defined-functions-security/ Additional Information: This option has no corresponding state in SHOW VARIABLES.",
    "function_names": [
      "bigquery_dataset_allow_suspicious_udfs_disabled",
      "bigquery_dataset_suspicious_udfs_blocked",
      "bigquery_dataset_udf_validation_enabled",
      "bigquery_dataset_unsafe_udfs_restricted",
      "bigquery_dataset_udf_security_check_enabled"
    ]
  },
  {
    "id": "4.4",
    "title": "Harden Usage for 'local_infile' on MariaDB Clients",
    "assessment": "Automated",
    "description": "The local_infile parameter dictates whether files located on the MariaDB client's computer can be loaded or selected via LOAD DATA INFILE or SELECT local_file.",
    "rationale": "For MariaDB client programs and connectors prior to 10.2.0, disabling local_infile reduces an attacker's ability to read sensitive files off the affected server via an SQL injection vulnerability. Impact: Disabling local_infile will impact the functionality of solutions that rely on it.",
    "audit": "Check the version of MariaDB clients and connectors. For example: $ mariadb --version The version should be 10.2.0 or higher. For connectors inspect the library in use. Most connectors provide functions which return version information. For C - libmysqlclient has: const char *mysql_get_client_info(void) If clients have not been upgraded to 10.2.0 check the value of local_infile. Execute the following SQL statement: SHOW VARIABLES WHERE Variable_name = 'local_infile'; If clients are older than 10.2.0 or if local_infile is not in use, ensure the value returned is 0.",
    "remediation": "Upgrade all MariaDB clients and connectors to 10.2.0 or higher. In the case where using local_infile is needed, the following changes further harden security: On client side, secure by: Limiting the location from where data can be read using --load-data-local-dir. mariadb --local-infile=0 --load-data-local-dir=/my/local/data Adding TLS connection to assure server identity by requiring verification. mariadb --local-infile=0 --load-data-local-dir=/my/local/data --ssl- mode=VERIFY_IDENTITY If local_infile is not in use or if clients are not upgraded - add the following line to the [mariadbd] section of the MySQL configuration file and restart the MariaDB service: local-infile=0 Default Value: 0 (OFF) References: 1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/local-infile/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Disabling local_infile will impact the functionality of solutions that rely on it.",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/local-infile/",
    "function_names": [
      "mariadb_client_local_infile_disabled",
      "mariadb_client_local_infile_restricted",
      "mariadb_client_local_infile_hardened",
      "mariadb_client_local_infile_secure_config",
      "mariadb_client_local_infile_access_controlled"
    ]
  },
  {
    "id": "4.5",
    "title": "Ensure mariadb is Not Started With 'skip-grant-tables'",
    "assessment": "Automated",
    "description": "This option causes mariadbd to start without using the privilege system.",
    "rationale": "If this option is used, all clients of the affected server will have unrestricted access to all databases.",
    "audit": "Perform the following to determine if the recommended state is in place: • Open the MariaDB configuration (e.g., mariadb.cnf) file and search for skip- grant-tables and skip_grant_tables • Ensure all occurrences of skip-grant-tables or skip_grant_tables are set to FALSE",
    "remediation": "Perform the following to establish the recommended state: • Open the MariaDB configuration (e.g., mariadb.cnf) file and set: skip-grant-tables = FALSE • If there are any occurrences of skip_grant_tables, also set that to FALSE or remove it. References: 1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/skip-grant-tables/ 2. https://mariadb.com/kb/en/server-system-variables/#skip_grant_tables 3. https://mariadb.com/kb/en/mysqld-options/#option-prefixes Additional Information: This option has no SHOW VARIABLES counterpart.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/skip-grant-tables/ 2. https://mariadb.com/kb/en/server-system-variables/#skip_grant_tables 3. https://mariadb.com/kb/en/mysqld-options/#option-prefixes Additional Information: This option has no SHOW VARIABLES counterpart.",
    "function_names": [
      "mariadb_instance_skip_grant_tables_disabled",
      "mariadb_config_secure_privilege_system",
      "mariadb_database_privilege_validation_enabled",
      "mariadb_service_secure_startup_config",
      "mariadb_grant_tables_integrity_enabled"
    ]
  },
  {
    "id": "4.6",
    "title": "Ensure Symbolic Links are Disabled",
    "assessment": "Automated",
    "description": "The symbolic-links and skip-symbolic-links options for MariaDB determine whether symbolic link support is available. When use of symbolic links is enabled, they have different effects depending on the host platform. When symbolic links are disabled, then symbolic links stored in files or entries in tables are not used by the database.",
    "rationale": "Prevents symbolic links from being used for database files. This is especially important when MariaDB is executing as root as arbitrary files may be overwritten. The symbolic- links option might allow someone to direct actions by the MariaDB server to other files and/or directories.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW variables LIKE 'have_symlink'; Ensure the Value returned is DISABLED.",
    "remediation": "Perform the following actions to remediate this setting: • Open the MariaDB configuration file (mariadb.cnf) • Locate skip-symbolic-links in the configuration • Set the skip-symbolic-links to YES Note: If skip-symbolic-links does not exist, add it to the configuration file in the mariadbd section. References: 1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/symbolic-links/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/symbolic-links/",
    "function_names": [
      "mariadb_symbolic_links_disabled",
      "mariadb_config_symbolic_links_disabled",
      "mariadb_skip_symbolic_links_enabled",
      "mariadb_storage_symbolic_links_disabled",
      "mariadb_tables_symbolic_links_disabled"
    ]
  },
  {
    "id": "4.7",
    "title": "Ensure the 'secure_file_priv' is Configured Correctly",
    "assessment": "Automated",
    "description": "The secure_file_priv option restricts to paths used by LOAD DATA INFILE or SELECT local_file. It is recommended that this option be set to a file system location that contains only resources expected to be loaded by MariaDB. Even better, if data import/export using LOAD DATA INFILE or SELECT local_file is not used, the functionality should be disabled entirely by setting --secure-file-priv to NULL.",
    "rationale": "Setting secure_file_priv reduces an attacker's ability to read sensitive files off the affected server via a SQL injection vulnerability. Impact: Solutions that rely on loading data from various sub-directories may be negatively impacted by this change. Consider consolidating load directories under a common parent directory. The server checks the value of secure_file_priv at startup and writes a warning to the error log if the value is insecure. A non-NULL value is considered insecure if it is empty, or the value is the data directory or a subdirectory of it, or a directory that is accessible by all users.",
    "audit": "Execute the following SQL statement and ensure one row is returned: SHOW GLOBAL VARIABLES WHERE Variable_name = 'secure_file_priv'; The Value should either contain NULL (thus is disabled entirely) or a valid path. If set to an empty string this is a fail.",
    "remediation": "If you are not going to use this feature, remove secure_file_priv from the [mariadbd] section of the MariaDB configuration file and restart the MariaDB service. If you need this feature add the following line to the [mariadbd] section of the MariaDB configuration file and restart the MariaDB service: secure_file_priv= <path_to_load_directory> Default Value: No value set. References: 1. https://mariadb.com/docs/server/ref/mdb/system-variables/secure_file_priv/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Solutions that rely on loading data from various sub-directories may be negatively impacted by this change. Consider consolidating load directories under a common parent directory. The server checks the value of secure_file_priv at startup and writes a warning to the error log if the value is insecure. A non-NULL value is considered insecure if it is empty, or the value is the data directory or a subdirectory of it, or a directory that is accessible by all users.",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/system-variables/secure_file_priv/",
    "function_names": [
      "mariadb_secure_file_priv_restricted",
      "mariadb_secure_file_priv_disabled",
      "mariadb_secure_file_priv_no_null",
      "mariadb_secure_file_priv_valid_path",
      "mariadb_secure_file_priv_no_default"
    ]
  },
  {
    "id": "4.8",
    "title": "Ensure 'sql_mode' Contains 'STRICT_ALL_TABLES'",
    "assessment": "Automated",
    "description": "When data changing statements are made (i.e., INSERT, UPDATE), MariaDB can handle invalid or missing values differently depending on whether strict SQL mode is enabled. When strict SQL mode is enabled, data may not be truncated or otherwise \"adjusted\" to make the data changing statement work.",
    "rationale": "Without strict mode the server tries to proceed with the action when an error might have been a more secure choice. For example, by default MariaDB will truncate data if it does not fit in a field, which can lead to unknown behavior, or be leveraged by an attacker to circumvent data validation. Impact: Applications relying on the MariaDB database should be aware that STRICT_ALL_TABLES is in use, such that error conditions are handled appropriately.",
    "audit": "To audit for this recommendation, execute the following query: SHOW VARIABLES LIKE 'sql_mode'; +---------------+-----------------------------------------------------------+ | Variable_name | Value                                                     | +---------------+-----------------------------------------------------------+ | sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,   | |               | NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,                  | |               | NO_ENGINE_SUBSTITUTION                                    | +---------------+-----------------------------------------------------------+ If STRICT_ALL_TABLES is not in the list returned, this is a fail.",
    "remediation": "Set STRICT_ALL_TABLES to the sql_mode in the server's global configuration, for example: SET GLOBAL sql_mode ='STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO _ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'; Default Value: STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_ SUBSTITUTION References: 1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/sql-mode/ 2. https://mariadb.com/docs/server/ref/mdb/sql-modes/STRICT_ALL_TABLES/ 3. https://mariadb.com/kb/en/sql-mode/ Additional Information: The sql_mode is a set and might contain more elements than just STRICT_ALL_TABLES. There is a global sql_mode and a per session sql_mode. The per session sql_mode is based on the global sql_mode on initialization and might be changed by the application.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "impact": "Applications relying on the MariaDB database should be aware that STRICT_ALL_TABLES is in use, such that error conditions are handled appropriately.",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/sql-mode/ 2. https://mariadb.com/docs/server/ref/mdb/sql-modes/STRICT_ALL_TABLES/ 3. https://mariadb.com/kb/en/sql-mode/ Additional Information: The sql_mode is a set and might contain more elements than just STRICT_ALL_TABLES. There is a global sql_mode and a per session sql_mode. The per session sql_mode is based on the global sql_mode on initialization and might be changed by the application.",
    "function_names": [
      "database_instance_sql_mode_strict_all_tables_enabled",
      "mariadb_instance_sql_mode_strict_all_tables_enabled",
      "sql_instance_sql_mode_strict_all_tables_enabled",
      "database_config_sql_mode_strict_all_tables_enabled",
      "mariadb_config_sql_mode_strict_all_tables_enabled",
      "sql_config_sql_mode_strict_all_tables_enabled",
      "database_parameter_sql_mode_strict_all_tables_enabled",
      "mariadb_parameter_sql_mode_strict_all_tables_enabled",
      "sql_parameter_sql_mode_strict_all_tables_enabled"
    ]
  },
  {
    "id": "4.9",
    "title": "Enable data-at-rest encryption in MariaDB",
    "assessment": "Automated",
    "description": "Data-at-rest encryption protects the privacy of your information, prevents data breaches and helps meet regulatory requirements.",
    "rationale": "File system based encryption does a good job of protecting against data theft on devices unable to limit physical access. It does not, however, protect against users who have or gain access to the operating system, backups, over the network copies, etc. Encrypting data from MariaDB adds an additional layer of data protection.",
    "audit": "Check for the types of at-rest encryption enabled. SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables where  variable_name like '%ENCRYPT%' ; OFF indicates at-rest encryption is not enabled. To check which tablespaces are encrypted SELECT SPACE,NAME FROM INFORMATION_SCHEMA.INNODB_TABLESPACES_ENCRYPTION; If no data is returned or if your database has tables that are not included in this response, this is a fail. Backup data should be encrypted at rest as well. For example: mariabackup --user=root --backup --stream=xbstream  | openssl  enc -aes-256- cbc -k mypass > backup.xb.enc If no encryption tool is included in the backup command, this is a fail.",
    "remediation": "MariaDB's data-at-rest encryption requires the use of a key management and encryption plugin. Create the key file: $ sudo mkdir -p /etc/mysql/encryption && (echo -n \"1;\" ; openssl rand -hex 32 ) | sudo tee -a  /etc/mysql/encryption/keyfile Generate a random encryption password: $ sudo openssl rand -hex 128 | sudo tee -a /etc/mysql/encryption/keyfile.key Encrypt the key file: $ sudo openssl enc -aes-256-cbc -md sha1 \\ -pass file:/etc/mysql/encryption/keyfile.key \\ -in /etc/mysql/encryption/keyfile \\ -out /etc/mysql/encryption/keyfile.enc Delete the unencrypted key file: $ sudo rm /etc/mysql/encryption/keyfile Set permissions and ownership on the keyfile and key: $ sudo chown mysql:mysql -R /etc/mysql/encryption $ sudo chmod 640 /etc/mysql/encryption/keyfile* Edit mariadb.cnf to resemble the following block, optionally uncommenting file_key_management_encryption_algorithm = AES_CTR: [mariadb] ... plugin_load_add = file_key_management file_key_management_filename = /etc/mysql/encryption/keyfile.enc file_key_management_filekey = FILE:/etc/mysql/encryption/keyfile.key # Binary Log Encryption encrypt_binlog = ON # Redo Log Encryption innodb_encrypt_log = ON # Encrypting Temporary Files encrypt_tmp_files = ON # Encrypt Temporary Tables innodb_encrypt_temporary_tables = ON # You can configure InnoDB encryption to automatically have all new InnoDB tables automatically encrypted, or specify encrypt per table. innodb_encrypt_tables = ON # Uncomment the line below if utilizing MariaDB built with OpenSSL # file_key_management_encryption_algorithm = AES_CTR If needed, see References for information about file_key_management_encryption_algorithm and OpenSSL usage. Restart MariaDB: $ sudo systemctl restart mariadb.service Run ALTER to enable encryption ( Note: This will lock the table as table is encrypted). ALTER TABLE tab1 ENCRYPTED=YES ENCRYPTION_KEY_ID=1; Revisit recommendation 3.10 after completing remediation. Default Value: At rest encryption is off by default. When innodb_encrypt_tables is set to ON, InnoDB tables are automatically encrypted by default. mariadb.cnf. innodb_encrypt_tables=ON References: 1. https://mariadb.com/resources/blog/mariadb-encryption-tde-using-mariadbs-file- key-management-encryption-plugin/ 2. https://mariadb.com/kb/en/data-at-rest-encryption-overview/ 3. https://mariadb.com/kb/en/encrypting-binary-logs/ 4. https://mariadb.com/kb/en/innodb-encryption-overview/ 5. https://mariadb.com/kb/en/using-encryption-and-compression-tools-with- mariabackup/ 6. https://mariadb.com/kb/en/encryption-key-management/ 7. https://mariadb.com/kb/en/innodb-enabling-encryption/ 8. https://mariadb.com/kb/en/file-key-management-encryption-plugin/#choosing-an- encryption-algorithm 9. https://mariadb.com/kb/en/tls-and-cryptography-libraries-used-by-mariadb/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/resources/blog/mariadb-encryption-tde-using-mariadbs-file- key-management-encryption-plugin/ 2. https://mariadb.com/kb/en/data-at-rest-encryption-overview/ 3. https://mariadb.com/kb/en/encrypting-binary-logs/ 4. https://mariadb.com/kb/en/innodb-encryption-overview/ 5. https://mariadb.com/kb/en/using-encryption-and-compression-tools-with- mariabackup/ 6. https://mariadb.com/kb/en/encryption-key-management/ 7. https://mariadb.com/kb/en/innodb-enabling-encryption/ 8. https://mariadb.com/kb/en/file-key-management-encryption-plugin/#choosing-an- encryption-algorithm 9. https://mariadb.com/kb/en/tls-and-cryptography-libraries-used-by-mariadb/",
    "function_names": [
      "mariadb_instance_encryption_enabled",
      "mariadb_storage_encryption_enabled",
      "mariadb_data_at_rest_encrypted",
      "mariadb_volume_encryption_enabled",
      "mariadb_database_encryption_enabled"
    ]
  },
  {
    "id": "5.1",
    "title": "Ensure Only Administrative Users Have Full Database Access",
    "assessment": "Manual",
    "description": "The mysql.user, mysql.db, and other mysql tables ending in _priv list a variety of privileges that can be granted (or denied) to MariaDB users. Some of the privileges of concern include: Select_priv, Insert_priv, Update_priv, Delete_priv, Drop_priv, and so on. Typically, these privileges should not be available to every MySQL user and often are reserved for administrative use only. The information_schema.user_privileges provides a consolidated view of all user privileges.",
    "rationale": "Limiting the accessibility of the mysql database will protect the confidentiality, integrity, and availability of the data housed within MariaDB. A user which has direct access to mysql.* might view password hashes, change permissions, or alter or destroy information intentionally or unintentionally.",
    "audit": "Execute the following SQL statement(s) to assess this recommendation: select * from information_schema.user_privileges where grantee not like ('\\'mysql.%localhost\\''); Ensure all users returned are administrative users with minimal privileges required. The above query ignores MariaDB internal reserved accounts.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate non-administrative users resulting from the audit procedure. 2. For each non-administrative user, use the REVOKE statement to remove privileges as appropriate. References: 1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ Additional Information: Consideration should be made for which privileges are required by each user requiring interactive database access.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS •  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ Additional Information: Consideration should be made for which privileges are required by each user requiring interactive database access.",
    "function_names": [
      "database_user_no_full_access",
      "database_user_admin_privileges_only",
      "database_user_privileges_restricted",
      "database_user_no_select_priv",
      "database_user_no_insert_priv",
      "database_user_no_update_priv",
      "database_user_no_delete_priv",
      "database_user_no_drop_priv",
      "database_user_privileges_consolidated",
      "database_user_privileges_audited"
    ]
  },
  {
    "id": "5.2",
    "title": "Ensure 'FILE' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The FILE privilege is used to allow or disallow a user from reading and writing files on the server host. Any user with the FILE right granted has the ability to: • Read files from the local file system that are readable by the MariaDB server (this includes world-readable files). • Write files to the local file system where the MariaDB server has write access.",
    "rationale": "The FILE right allows MariaDB users to read files from disk and to write files to disk. This may be leveraged by an attacker to further compromise MariaDB. It should be noted that the MariaDB server should not overwrite existing files.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'FILE'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure. 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE FILE ON *.* FROM ' <user> '; References: 1. https://mariadb.com/docs/server/ref/mdb/system-variables/secure_file_priv/ 2. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/secure-file-priv/ Additional Information: See also: secure_file_priv system settings.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS •  Level 1 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/system-variables/secure_file_priv/ 2. https://mariadb.com/docs/server/ref/mdb/cli/mariadbd/secure-file-priv/ Additional Information: See also: secure_file_priv system settings.",
    "function_names": [
      "mariadb_user_no_file_privilege",
      "mariadb_user_no_file_privilege_non_admin",
      "mariadb_user_file_privilege_restricted",
      "mariadb_user_file_privilege_admin_only",
      "mariadb_user_file_access_disabled_non_admin",
      "mariadb_user_file_privilege_secure",
      "mariadb_user_file_privilege_limited",
      "mariadb_user_file_privilege_admin_restricted"
    ]
  },
  {
    "id": "5.3",
    "title": "Ensure 'PROCESS' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The PROCESS privilege found in the mysql.user table determines whether a given user can see statement execution information for all sessions.",
    "rationale": "The PROCESS privilege allows principals to view currently executing MariaDB statements beyond their own, including statements used to manage passwords. This may be leveraged by an attacker to compromise MariaDB or to gain access to potentially sensitive data. Impact: Users denied the PROCESS privilege may also be denied use of SHOW ENGINE.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'PROCESS'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE PROCESS ON *.* FROM ' <user> '; References: 1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "impact": "Users denied the PROCESS privilege may also be denied use of SHOW ENGINE.",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "function_names": [
      "mysql_user_no_process_privilege",
      "mysql_user_process_privilege_restricted",
      "mysql_user_admin_only_process_privilege",
      "mysql_user_process_privilege_disabled",
      "mysql_user_non_admin_process_privilege_denied"
    ]
  },
  {
    "id": "5.4",
    "title": "Ensure 'SUPER' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The SUPER privilege is a powerful and far-reaching privilege and should not be granted lightly. In MariaDB, SUPER is deprecated and will be removed in a future version of MariaDB. The SUPER privilege shown in the INFORMATION_SCHEMA.USER_PRIVILEGES table governs the use of a variety of MariaDB features. These features include, CHANGE MASTER TO, KILL, mysqladmin kill option, PURGE BINARY LOGS, SET GLOBAL, mysqladmin debug option, logging control, and more. In MariaDB, SUPER is deprecated and will be removed in a future version of MariaDB. Migrating Accounts from SUPER to Dynamic Privileges is recommended.",
    "rationale": "The SUPER privilege allows principals to perform many actions, including view and terminate currently executing MariaDB statements (including statements used to manage passwords). This privilege also provides the ability to configure MariaDB, such as enable/disable logging, alter data, disable/enable features. Limiting the accounts that have the SUPER privilege reduces the chances that an attacker can exploit these capabilities. It is more secure to migrate administrative users off SUPER and instead assign the specific and minimal set of mysql Dynamic Privileges needed to perform their tasks. Impact: When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SUPER'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE SUPER ON *.* FROM ' <user> '; Next minimize administrator rights 1. Assess the minimal set of Dynamic Permissions needed by a user to perform their duties. 2. For each user assign the appropriate Dynamic Permission and then revoke that <user> SUPER capability. For example, if administrator 'u1'@'localhost' requires SUPER for binary log purging and system variable modification, these statements make the required changes to the account thus limiting rights to what is needed: GRANT BINLOG_ADMIN, SYSTEM_VARIABLES_ADMIN ON *.* TO 'u1'@'localhost'; REVOKE SUPER ON *.* FROM 'u1'@'localhost'; References: 1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "function_names": [
      "database_user_no_super_privilege",
      "mariadb_user_no_super_privilege",
      "database_user_deprecated_privilege_removed",
      "mariadb_user_deprecated_privilege_removed",
      "database_user_privilege_migration_required",
      "mariadb_user_privilege_migration_required",
      "database_user_no_admin_privileges",
      "mariadb_user_no_admin_privileges"
    ]
  },
  {
    "id": "5.5",
    "title": "Ensure 'SHUTDOWN' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The SHUTDOWN privilege simply enables use of the shutdown option to the mysqladmin command, which allows a user with the SHUTDOWN privilege the ability to shut down the MariaDB server.",
    "rationale": "The SHUTDOWN privilege allows principals to shutdown MariaDB. This may be leveraged by an attacker to negatively impact the availability of MariaDB.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SHUTDOWN'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure. 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE SHUTDOWN ON *.* FROM ' <user> '; References: 1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "function_names": [
      "database_user_no_shutdown_privilege",
      "database_user_non_admin_no_shutdown",
      "mariadb_user_no_shutdown_granted",
      "database_user_restrict_shutdown_privilege",
      "mariadb_user_non_admin_no_shutdown",
      "database_user_shutdown_privilege_restricted",
      "mariadb_user_shutdown_privilege_denied",
      "database_user_admin_only_shutdown_privilege"
    ]
  },
  {
    "id": "5.6",
    "title": "Ensure 'CREATE USER' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The CREATE USER privilege governs the right of a given user to add or remove users, change existing users' names, or revoke existing users' privileges.",
    "rationale": "Reducing the number of users granted the CREATE USER right minimizes the number of users able to add/drop users, alter existing users' names, and manipulate existing users' privileges. Impact: Users that are denied the CREATE USER privilege will not only be unable to create a user, but they may be unable to drop a user, rename a user, or otherwise revoke a given user's privileges.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'CREATE USER'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE CREATE USER ON *.* FROM ' <user> '; References: 1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Users that are denied the CREATE USER privilege will not only be unable to create a user, but they may be unable to drop a user, rename a user, or otherwise revoke a given user's privileges.",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "function_names": [
      "iam_user_no_create_user_privilege",
      "iam_user_no_admin_privileges",
      "iam_user_privilege_restricted",
      "iam_user_privilege_no_create_user",
      "iam_user_privilege_minimal",
      "iam_user_privilege_non_admin_restricted",
      "iam_user_privilege_no_user_management",
      "iam_user_privilege_no_privilege_escalation"
    ]
  },
  {
    "id": "5.7",
    "title": "Ensure 'GRANT OPTION' is Not Granted to Non- Administrative Users",
    "assessment": "Manual",
    "description": "The GRANT OPTION privilege exists in different contexts (mysql.user, mysql.db) for the purpose of governing the ability of a privileged user to manipulate the privileges of other users.",
    "rationale": "The GRANT OPTION privilege allows a principal to grant other principals additional privileges. This may be used by an attacker to compromise MariaDB.",
    "audit": "Execute the following SQL statements to audit this setting: SELECT DISTINCT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE IS_GRANTABLE = 'YES'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result sets of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE GRANT OPTION ON *.* FROM ' <user> '; References: 1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/ 2. https://mariadb.com/kb/en/show-privileges/",
    "function_names": [
      "rds_user_no_grant_option",
      "rds_user_no_grant_option_non_admin",
      "database_user_no_grant_option",
      "database_user_no_grant_option_non_admin",
      "mysql_user_no_grant_option",
      "mysql_user_no_grant_option_non_admin",
      "mysql_db_no_grant_option",
      "mysql_db_no_grant_option_non_admin"
    ]
  },
  {
    "id": "5.8",
    "title": "Ensure 'REPLICATION SLAVE' is Not Granted to Non- Administrative Users",
    "assessment": "Manual",
    "description": "The REPLICATION SLAVE privilege governs whether a given user (in the context of the source server) can request updates that have been made on the source server.",
    "rationale": "The REPLICATION SLAVE privilege allows a principal to fetch binlog files containing all data changing statements and/or changes to table data from the source. This may be used by an attacker to read/fetch sensitive data from MariaDB.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'REPLICATION SLAVE'; Ensure only accounts designated for replica users are granted this privilege.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-replica users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- replica user): REVOKE REPLICATION SLAVE ON *.* FROM ' <user> '; Use the REVOKE statement to remove the REPLICATION SLAVE privilege from users who shouldn't have it. References: 1. https://mariadb.com/docs/server/ref/mdb/privileges/REPLICATION_SLAVE/ 2. https://mariadb.com/kb/en/show-privileges/ 3. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/privileges/REPLICATION_SLAVE/ 2. https://mariadb.com/kb/en/show-privileges/ 3. https://mariadb.com/docs/server/ref/mdb/information- schema/USER_PRIVILEGES/",
    "function_names": [
      "mysql_user_no_replication_slave_privilege",
      "mysql_user_replication_slave_admin_only",
      "database_user_replication_slave_restricted",
      "mysql_privilege_replication_slave_denied_non_admin",
      "database_privilege_replication_slave_admin_restricted"
    ]
  },
  {
    "id": "5.9",
    "title": "Ensure DML/DDL Grants are Limited to Specific Databases and Users",
    "assessment": "Manual",
    "description": "DML/DDL includes the set of privileges used to modify or create data structures. This includes INSERT, SELECT, UPDATE, DELETE, DROP, CREATE, and ALTER privileges.",
    "rationale": "INSERT, SELECT, UPDATE, DELETE, DROP, CREATE, and ALTER are powerful privileges in any database. Such privileges should be limited only to those users requiring such rights. By limiting the users with these rights and ensuring that they are limited to specific databases, the attack surface of the database is reduced.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT User,Host,Db FROM mysql.db WHERE Select_priv='Y' OR Insert_priv='Y' OR Update_priv='Y' OR Delete_priv='Y' OR Create_priv='Y' OR Drop_priv='Y' OR Alter_priv='Y'; Ensure all users returned are permitted to have these privileges on the indicated databases.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the unauthorized users, hosts, and databases returned in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the unauthorized user, <host> with host name, and <database> with the database name): REVOKE SELECT ON <host>.<database> FROM <user> ; REVOKE INSERT ON <host>.<database> FROM <user> ; REVOKE UPDATE ON <host>.<database> FROM <user> ; REVOKE DELETE ON <host>.<database> FROM <user> ; REVOKE CREATE ON <host>.<database> FROM <user> ; REVOKE DROP ON <host>.<database> FROM <user> ; REVOKE ALTER ON <host>.<database> FROM <user> ; References: 1. https://mariadb.com/kb/en/data-manipulation/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/data-manipulation/",
    "function_names": [
      "database_user_dml_ddl_restricted",
      "database_user_privileges_limited",
      "database_user_grants_specific",
      "database_user_dml_ddl_scoped",
      "database_user_privileges_targeted",
      "database_user_grants_restricted",
      "database_user_dml_ddl_minimal",
      "database_user_privileges_explicit"
    ]
  },
  {
    "id": "5.10",
    "title": "Securely Define Stored Procedures and Functions DEFINER and INVOKER",
    "assessment": "Manual",
    "description": "Stored procedure and stored function declarations include a definition of permissions which can be used to escalate permissions. It's important to inspect these settings to ensure they do not unnecessarily escalate privileges.",
    "rationale": "A stored procedure or function that improperly escalates privileges may provide unintended access rights which can be improperly used.",
    "audit": "Run the following: SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS; Inspect Definer and Invoker security types. If DEFINER is a powerful user consider that user's permissions. If INVOKER then the rights for the stored procedure or function are that of the user executing these. Review code using SHOW CREATE PROCEDURE <name> ; SHOW CREATE FUNCTION <name> ; For more details on Procedures and Functions SELECT * FROM information_schema.routines; For more details on Procedures and Functions input and output parameters. SELECT * FROM information_schema.parameters;",
    "remediation": "Drop and recreate stored procedures and functions using proper DEFINER and INVOKER settings, or other code changes. References: 1. https://mariadb.com/kb/en/create-procedure/ 2. https://mariadb.com/kb/en/create-function/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/create-procedure/ 2. https://mariadb.com/kb/en/create-function/",
    "function_names": [
      "database_stored_procedure_definer_secure",
      "database_stored_function_definer_secure",
      "database_stored_procedure_invoker_secure",
      "database_stored_function_invoker_secure",
      "database_stored_procedure_no_privilege_escalation",
      "database_stored_function_no_privilege_escalation",
      "database_stored_procedure_definer_restricted",
      "database_stored_function_definer_restricted"
    ]
  },
  {
    "id": "6.1",
    "title": "Ensure 'log_error' is configured correctly",
    "assessment": "Automated",
    "description": "The error log contains information about events such as mariadbd starting and stopping, when a table needs to be checked or repaired, and, depending on the host operating system, stack traces when mariadbd fails.",
    "rationale": "Enabling error logging can increase the ability to detect malicious attempts against MariaDB, and other critical messages. For example, if the error log is not enabled then a connection error could go unnoticed. When configured to stderr MariaDB will send log data to the console. Logging to the console is useful, but remember it is ephemeral. This is not recommended due to the fact that logging to console does not provide a means to force restricted access via permissions strictly to MariaDB and dedicated MariaDB audit accounts. This may compromise the confidentiality of the MariaDB log data. Furthermore use caution if co- mingling log data from multiple sources as that can complicate log inspection. Additionally from a security auditing perspective, it’s difficult and error prone to verify logging is correct using stderr or redirected stderr.",
    "audit": "Execute the following SQL statement to audit this setting: SHOW variables LIKE 'log_error'; Ensure the Value returned is a path to a file and not ./stderr.err.",
    "remediation": "Perform the following actions to remediate this setting: 1. Open the MariaDB configuration file (mariadb.cnf). 2. Set the log_error option to the path for the error log. Default Value: ./stderr.err References: 1. https://mariadb.com/docs/server/ref/mdb/system-variables/log_error/ 2. https://mariadb.com/kb/en/error-log/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/system-variables/log_error/ 2. https://mariadb.com/kb/en/error-log/",
    "function_names": [
      "mariadb_instance_log_error_enabled",
      "mariadb_instance_log_error_path_configured",
      "mariadb_instance_log_error_permissions_restricted",
      "mariadb_instance_log_error_retention_configured",
      "mariadb_instance_log_error_rotation_enabled",
      "mariadb_instance_log_error_size_limited",
      "mariadb_instance_log_error_writes_allowed",
      "mariadb_instance_log_error_encryption_enabled"
    ]
  },
  {
    "id": "6.2",
    "title": "Ensure Log Files are Stored on a Non-System Partition",
    "assessment": "Automated",
    "description": "MariaDB log files can be set in the MariaDB configuration to exist anywhere on the filesystem. It is common practice to ensure that the system filesystem is left uncluttered by application logs. System filesystems include the root (/), /var, or /usr.",
    "rationale": "Moving the MariaDB logs off the system partition will reduce the probability of denial of service via the exhaustion of available disk space to the operating system.",
    "audit": "Execute the following SQL statement to assess this recommendation: SELECT @@global.log_bin_basename; Ensure the value returned does not indicate root (/), /var, or /usr.",
    "remediation": "Perform the following actions to remediate this setting: 1. Open the MariaDB configuration file (mariadb.cnf) 2. Locate the log_bin entry and set it to a file not on root (/), /var, or /usr References: 1. https://mariadb.com/docs/server/ref/mdb/system-variables/log_bin/ 2. https://mariadb.com/kb/en/binary-log/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/system-variables/log_bin/ 2. https://mariadb.com/kb/en/binary-log/",
    "function_names": [
      "mariadb_log_files_non_system_partition",
      "mariadb_log_files_system_partition_excluded",
      "mariadb_log_files_root_partition_excluded",
      "mariadb_log_files_var_partition_excluded",
      "mariadb_log_files_usr_partition_excluded",
      "mariadb_log_files_custom_partition_required",
      "mariadb_log_files_system_directories_restricted"
    ]
  },
  {
    "id": "6.3",
    "title": "Ensure 'log_warnings' is Set to '2'",
    "assessment": "Automated",
    "description": "The log_warnings system variable, set to 2 by default, specifies the verbosity of events sent to the MariaDB error log. A value of 2 enables logging of error and warning messages, a value of 3 also includes informational logging, a value of 1 logs only errors.",
    "rationale": "This might help to detect malicious behavior by logging communication errors and aborted connections.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW GLOBAL VARIABLES LIKE 'log_warnings'; Ensure the Value returned equals 2.",
    "remediation": "Perform the following actions to remediate this setting: • Open the MySQL configuration file (mariadb.cnf) • Ensure the following line is found in the mariadbd section log_warnings = 2 Default Value: The option is enabled (2) - errors and warning events are logged - by default. References: 1. https://mariadb.com/docs/server/ref/mdb/system-variables/log_warnings/ 2. https://mariadb.com/kb/en/error-log/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS •  Level 2 - MariaDB RDBMS on Linux",
    "references": "1. https://mariadb.com/docs/server/ref/mdb/system-variables/log_warnings/ 2. https://mariadb.com/kb/en/error-log/",
    "function_names": [
      "mariadb_server_log_warnings_enabled",
      "mariadb_server_log_warnings_minimum_level_2",
      "mariadb_server_log_warnings_verbose_disabled",
      "mariadb_server_log_warnings_default_set",
      "mariadb_server_log_warnings_error_and_warning_only"
    ]
  },
  {
    "id": "6.4",
    "title": "Ensure Audit Logging Is Enabled",
    "assessment": "Automated",
    "description": "Enabling audit logging is an important consideration for a production environment, and MariaDB plugin exist to help with this. Enable audit logging for • Connect events • Query and Table events (optional)",
    "rationale": "Audit logging helps to identify who changed what and when. The audit log might be used as evidence in investigations. It might also help to identify what an attacker was able to accomplish.",
    "audit": "Verify that MariaDB Audit is installed and configured to enable logging for connect events and (optionally) query and table events. SHOW VARIABLES LIKE '%audit%' ;",
    "remediation": "Although the plugin's shared library is distributed with MariaDB, the plugin is not actually installed by default. Add the following to MariaDB’s config file. [mariadb] ... #MariaDB plugin plugin_load_add = server_audit server_audit_logging=ON server_audit_events=CONNECT Reboot the instance. References: 1. https://mariadb.com/kb/en/mariadb-audit-plugin/ 2. https://mariadb.com/kb/en/mariadb-audit-plugin-installation/ 3. https://mariadb.com/kb/en/mariadb-audit-plugin-configuration/ 4. https://mariadb.com/kb/en/mariadb-audit-plugin-log-settings/",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/mariadb-audit-plugin/ 2. https://mariadb.com/kb/en/mariadb-audit-plugin-installation/ 3. https://mariadb.com/kb/en/mariadb-audit-plugin-configuration/ 4. https://mariadb.com/kb/en/mariadb-audit-plugin-log-settings/",
    "function_names": [
      "mariadb_audit_log_connect_events_enabled",
      "mariadb_audit_log_query_events_enabled",
      "mariadb_audit_log_table_events_enabled",
      "mariadb_audit_log_all_events_enabled",
      "mariadb_audit_log_plugin_installed",
      "mariadb_audit_log_plugin_configured"
    ]
  },
  {
    "id": "6.5",
    "title": "Ensure the Audit Plugin Can't be Unloaded",
    "assessment": "Automated",
    "description": "Set server_audit to FORCE_PLUS_PERMANENT",
    "rationale": "This disables unloading on the plugin. Impact: If someone can unload the plugin it would be possible to perform actions on the database without audit events being logged to the audit log. If the audit log plugin can be unloaded the audit log can be temporarily or permanently disabled.",
    "audit": "To assess this recommendation, execute the following SQL statement: SELECT LOAD_OPTION FROM information_schema.plugins WHERE PLUGIN_NAME='SERVER_AUDIT'; The result must be FORCE_PLUS_PERMANENT",
    "remediation": "To remediate this setting, follow these steps: 1. Open the MariaDB configuration file (mariadb.cnf) 2. Ensure the following line is found in the mariadbd section server_audit=FORCE_PLUS_PERMANENT References: 1. https://mariadb.com/kb/en/mariadb-audit-plugin-installation/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "If someone can unload the plugin it would be possible to perform actions on the database without audit events being logged to the audit log. If the audit log plugin can be unloaded the audit log can be temporarily or permanently disabled.",
    "references": "1. https://mariadb.com/kb/en/mariadb-audit-plugin-installation/",
    "function_names": [
      "mysql_audit_plugin_unload_protected",
      "mysql_server_audit_force_plus_permanent",
      "mysql_audit_plugin_permanent_enabled",
      "mysql_audit_logging_unload_prevented",
      "mysql_server_audit_immutable_enabled"
    ]
  },
  {
    "id": "6.6",
    "title": "Ensure Binary and Relay Logs are Encrypted",
    "assessment": "Automated",
    "description": "The encrypt_binlog system variable may be used to configure encryption of the binary and relay logs. This may be configured to ON even if binary logging is not enabled in order to encrypt relay log files.",
    "rationale": "The database, and thus the binary and relay logs, may contain sensitive information. Encrypting the binary and relay logs protects all data stored in these logs from internal and external threats.",
    "audit": "To audit this setting, run the following command: SELECT VARIABLE_NAME, VARIABLE_VALUE, 'BINLOG - At Rest Encryption' as Note FROM information_schema.global_variables where variable_name like '%ENCRYPT_LOG%'; Ensure it is set to ON.",
    "remediation": "Encryption of binary logs is configured by the encrypt_binlog system variable. To remediate misconfiguration, add encrypt_binlog and restart MariaDB. [mariadb] ... # Binary Log Encryption encrypt_binlog=ON Default Value: The default Default Value: OFF References: 1. https://mariadb.com/kb/en/encrypting-binary-logs/ 2. https://mariadb.com/kb/en/activating-the-binary-log/ 3. https://mariadb.com/kb/en/key-management-and-encryption-plugins/ 4. https://mariadb.com/kb/en/purge-binary-logs/ 5. https://mariadb.com/kb/en/reset-master/ Additional Information: It is necessary to install a Key Management Encryption plugin prior to configuring encryption. After enabling encryption, consider also deleting old, unencrypted logs, using the PURGE BINARY LOGS and RESET MASTER commands.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/encrypting-binary-logs/ 2. https://mariadb.com/kb/en/activating-the-binary-log/ 3. https://mariadb.com/kb/en/key-management-and-encryption-plugins/ 4. https://mariadb.com/kb/en/purge-binary-logs/ 5. https://mariadb.com/kb/en/reset-master/ Additional Information: It is necessary to install a Key Management Encryption plugin prior to configuring encryption. After enabling encryption, consider also deleting old, unencrypted logs, using the PURGE BINARY LOGS and RESET MASTER commands.",
    "function_names": [
      "database_instance_encrypt_binlog_enabled",
      "database_instance_relay_log_encryption_enabled",
      "database_instance_log_encryption_enabled",
      "database_instance_binlog_encryption_enabled",
      "database_instance_secure_log_encryption_enabled"
    ]
  },
  {
    "id": "7.1",
    "title": "Disable use of the mysql_old_password plugin",
    "assessment": "Automated",
    "description": "The mysql_old_password plugin uses a cracked password routine with several flaws. It is present but not used by default in MariaDB. Steps should be taken to ensure that passwords will not be created with this plugin and that clients will not be able to authenticate to the MariaDB server using this plugin. The old_passwords system variable controls whether MariaDB server uses the mysql_old_password plugin (instead of the stronger mysql_native_password plugin) when creating passwords. The secure_auth system variable, when enabled, will block client connections that utilize the mysql_old_password plugin.",
    "rationale": "Use of the mysql_old_password plugin risks disclosure of users' passwords and also permits Pass-the-Hash attacks.",
    "audit": "To ensure new passwords are not created using the mysql_old_password plugin, run: SHOW VARIABLES WHERE Variable_name = 'old_passwords'; Ensure the Value field is set to OFF. To ensure connections that use the mysql_old_password plugin are blocked, run: SHOW VARIABLES WHERE Variable_name = 'secure_auth'; Ensure the Value field is set to ON.",
    "remediation": "If old_passwords was ON, add the following line to the [mariadbd] section in mariadb.cnf: old_passwords=0 If 'secure_authwasOFF, add the following line to the [mariadbd]section inmariadb.cnf`: secure_auth=ON Restart MariaDB. Default Value: old_passwords is OFF by default. secure_auth is ON by default. References: 1. https://mariadb.org/history-of-mysql-mariadb-authentication-protocols/ 2. https://mariadb.com/kb/en/pluggable-authentication-overview/#default-server- authentication-plugin",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.org/history-of-mysql-mariadb-authentication-protocols/ 2. https://mariadb.com/kb/en/pluggable-authentication-overview/#default-server- authentication-plugin",
    "function_names": [
      "mariadb_plugin_mysql_old_password_disabled",
      "mariadb_password_plugin_secure_auth_enabled",
      "mariadb_system_variable_old_passwords_disabled",
      "mariadb_client_auth_mysql_old_password_blocked"
    ]
  },
  {
    "id": "7.2",
    "title": "Ensure Passwords are Not Stored in the Global Configuration",
    "assessment": "Automated",
    "description": "The [client] section of the MariaDB configuration file allows setting a user and password to be used. Verify the password option is not used in the global configuration file (mariadb.cnf).",
    "rationale": "Using the password parameter may negatively impact the confidentiality of the user's password. Impact: The global configuration is by default readable for all users on the system. This is needed for global defaults (prompt, port, socket, etc.). If a password is present in this file then all users on the system may be able to access it.",
    "audit": "To assess this recommendation, perform the following steps: • Open the MariaDB configuration file (e.g., mariadb.cnf) • Examine the [client] section of the MariaDB configuration file and ensure password is not employed.",
    "remediation": "Use the user-specific options file, .mariadb.cnf., and restricting file access permissions to the user identity. References: 1. https://mariadb.com/kb/en/mysql_config_editor-compatibility/ Additional Information: There must not be a password in any of the sections of the global configuration.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS on Linux",
    "impact": "The global configuration is by default readable for all users on the system. This is needed for global defaults (prompt, port, socket, etc.). If a password is present in this file then all users on the system may be able to access it.",
    "references": "1. https://mariadb.com/kb/en/mysql_config_editor-compatibility/ Additional Information: There must not be a password in any of the sections of the global configuration.",
    "function_names": [
      "mariadb_client_password_not_stored",
      "mariadb_global_config_password_absent",
      "mariadb_config_client_no_password",
      "mariadb_global_config_no_credentials",
      "mariadb_client_credentials_not_stored"
    ]
  },
  {
    "id": "7.3",
    "title": "Ensure strong authentication is utilized for all accounts",
    "assessment": "Automated",
    "description": "The mysql_native_password and mysql_old_password plugins utilize weak cryptography and/or weak password routines. In particular, the mysql_old_password plugin utilizes cracked password routines and is subject to Pass-the-Hash attacks. The mysql_native_password plugin relies on the Secure Hash Algorithm 1 (SHA-1) algorithm. The National Institute of Standards and Technology (NIST) recommends against use of SHA-1. Additionally, these plugins allow users to set blank passwords, which allow authentication without providing a password. All users should be using alternative, stronger plugins or be configured with invalid passwords. See Default Value section and References for more details on specific account configurations.",
    "rationale": "Without a password, only knowing the username and the list of allowed hosts will allow someone to connect to the server and assume the identity of the user. This, in effect, bypasses authentication mechanisms. Acquisition of user password hashes exposes users to password cracking and Pass- the-Hash attacks. Setting a root password exposes password-based root access to remote users and to non-root linux users. Impact: Using the ed25519 plugin will require installation of the plugin, and some clients may need to be configured to utilize the client_ed25519 plugin.",
    "audit": "Execute the following SQL query to find any users utilizing these plugins and to find special accounts that have been configured with a password: SELECT User,host FROM mysql.user WHERE (plugin IN('mysql_native_password', 'mysql_old_password','') AND NOT (User = 'root' AND authentication_string = 'invalid') AND NOT (User = 'mysql' and authentication_string = 'invalid')); No rows will be returned if all accounts are using strong authentication mechanisms.",
    "remediation": "If the root user is returned in the audit procedure results, set that account to utilize only the unix_socket plugin by running the following mariadb command: alter user 'root'@'localhost' identified via 'unix_socket'; If the mysql user is returned in the audit procedure results, set that account to use an invalid password by running the following mariadb command: set password for 'mysql'@'localhost' = 'invalid'; If the mariadb.sys user is returned in the audit procedure results, set that account to use an invalid password by running the following mariadb command: set password for 'mariadb.sys'@'localhost' = 'invalid'; For every other user identified by the audit procedure, use the ALTER USER command to configure the account to utilize one of the following authentication plugins as appropriate: • ed25519 • gssapi • pam • unix_socket Notes: Some of these plugins will require installation if not already in use. Changing a user to utilize the ed25519 plugin but without providing a password will make the account inaccessible. For service accounts, set a new password in MariaDB and where the service account is used. For human user accounts, set a temporary password and notify the user to change the password immediately. If password validation plugins are already implemented, strict_password_validation may need to be temporarily disabled to reset mysql and mariadb.sys accounts to use invalid passwords. To do so, run set global strict_password_validation=0; before and set global strict_password_validation=1; after the set password commands. Default Value: root is configured to use the unix_socket plugin but to fallback to the mysql_native_password plugin. root and mysql users are created with an invalid password string, preventing password-based authentication. mariadb.sys is a locked account without a password set. If the account becomes unlocked, authentication without a password can occur. By default, all new users are created using the mysql_native_password plugin and without a password unless otherwise specified. This allows authentication without a password. References: 1. https://mariadb.com/kb/en/pluggable-authentication-overview/ 2. https://mariadb.com/kb/en/authentication-from-mariadb-104/ 3. https://mariadb.com/kb/en/set-password/ 4. https://mariadb.com/kb/en/alter-user/ 5. https://mariadb.com/kb/en/create-user/ 6. https://mariadb.org/history-of-mysql-mariadb-authentication-protocols/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Using the ed25519 plugin will require installation of the plugin, and some clients may need to be configured to utilize the client_ed25519 plugin.",
    "references": "1. https://mariadb.com/kb/en/pluggable-authentication-overview/ 2. https://mariadb.com/kb/en/authentication-from-mariadb-104/ 3. https://mariadb.com/kb/en/set-password/ 4. https://mariadb.com/kb/en/alter-user/ 5. https://mariadb.com/kb/en/create-user/ 6. https://mariadb.org/history-of-mysql-mariadb-authentication-protocols/",
    "function_names": [
      "database_user_strong_authentication_enabled",
      "database_user_weak_auth_plugin_disabled",
      "database_user_sha1_auth_disabled",
      "database_user_blank_password_disabled",
      "database_user_native_password_plugin_disabled",
      "database_user_old_password_plugin_disabled",
      "database_user_secure_auth_plugin_required",
      "database_user_nist_compliant_auth_enabled"
    ]
  },
  {
    "id": "7.4",
    "title": "Ensure Password Complexity Policies are in Place",
    "assessment": "Automated",
    "description": "Passwords should be configured with a minimum length of 14 characters and should be checked against dictionaries of common, known, and expected passwords.",
    "rationale": "Long passwords help mitigate dictionary, brute forcing, and other password attacks. Comparing passwords to password dictionaries prevents users from choosing known and easily guessable passwords. Impact: Users will not be able to directly set password hashes directly (e.g. SET PASSWORD = '') since this bypasses password validation.",
    "audit": "Review your mariadb configuration files for the following entries: plugin_load_add = simple_password_check simple_password_check = FORCE_PLUS_PERMANENT plugin_load_add = cracklib_password_check cracklib_password_check = FORCE_PLUS_PERMANENT Ensure mariadb is currently running with the plugin enabled: SHOW PLUGINS; Verify that simple_password_check and cracklib_password_check both show ACTIVE status. Execute the following SQL statements to assess password policy settings: SHOW VARIABLES LIKE '%pass%'; The result set from the above statement should show: • simple_password_check_minimal_length should be 14 or more • strict_password_validation should be ON • cracklib_password_check_dictionary set to an appropriate dictionary file The dictionary file should contain values known to be commonly-used, expected, or compromised. For example, the list should include, but is not limited to: • Passwords obtained from previous breaches • Dictionary words • Repetitive or sequential characters (e.g., aaaaaa, 1234abcd) • Passwords specific to times of year (e.g. seasons, months) • Passwords specific to organization interest (e.g. organization or business names, entities, or products) • Passwords matching usernames",
    "remediation": "Install the password check plugins: INSTALL SONAME 'simple_password_check'; INSTALL SONAME 'cracklib_password_check'; Note A supporting linux distribution package may need to be installed before installing the cracklib plugin. Follow installation guidance on the Cracklib Password Check Plugin page in the References section. Add the following lines to MariaDB configuration files: plugin_load_add = simple_password_check simple_password_check = FORCE_PLUS_PERMANENT simple_password_check_minimal_length = 14 plugin_load_add = cracklib_password_check cracklib_password_check = FORCE_PLUS_PERMANENT strict_password_validation = ON Consider customizing the password dictionary to include usernames of all MariaDB users and any other risky passwords patterns noted in the Audit Procedure. Set cracklib_password_check_dictionary if using a customized password dictionary. Default Value: Simple Password Check Plugin and Cracklib Password Check Plugin are not installed by default. strict_password_validation is ON by default. References: 1. https://mariadb.com/kb/en/password-validation-plugins/ 2. https://mariadb.com/kb/en/simple-password-check-plugin/ 3. https://mariadb.com/kb/en/cracklib-password-check-plugin/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Users will not be able to directly set password hashes directly (e.g. SET PASSWORD = '') since this bypasses password validation.",
    "references": "1. https://mariadb.com/kb/en/password-validation-plugins/ 2. https://mariadb.com/kb/en/simple-password-check-plugin/ 3. https://mariadb.com/kb/en/cracklib-password-check-plugin/",
    "function_names": [
      "iam_password_policy_min_length_14",
      "iam_password_policy_no_common_passwords",
      "iam_password_policy_complexity_enabled",
      "iam_password_policy_dictionary_check_enabled",
      "iam_password_policy_strong_requirements"
    ]
  },
  {
    "id": "7.5",
    "title": "Ensure No Users Have Wildcard Hostnames",
    "assessment": "Automated",
    "description": "MariaDB can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to ' <user> '@'%'.",
    "rationale": "Avoiding the use of wildcards within hostnames helps control the specific locations from which a given user may connect to and interact with the database.",
    "audit": "Execute the following SQL statement to assess this recommendation: SELECT user, host FROM mysql.user WHERE host = '%'; Ensure no rows are returned.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate all users returned after running the audit procedure. 2. Either ALTER the user's host to be specific or DROP the user.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "function_names": [
      "mariadb_user_no_wildcard_hostnames",
      "mariadb_user_hostname_restricted",
      "mariadb_user_hostname_specific",
      "mariadb_user_hostname_no_wildcards",
      "mariadb_user_hostname_explicit"
    ]
  },
  {
    "id": "7.6",
    "title": "Ensure No Anonymous Accounts Exist",
    "assessment": "Automated",
    "description": "Anonymous accounts are users with empty usernames (''). Anonymous accounts have no passwords, so anyone can use them to connect to the MariaDB server.",
    "rationale": "Removing anonymous accounts will help ensure that only identified and trusted principals are capable of interacting with MariaDB. Impact: Any applications relying on anonymous database access will be adversely affected by this change.",
    "audit": "Execute the following SQL query to identify anonymous accounts: SELECT user,host FROM mysql.user WHERE user = ''; The above query will return zero rows if no anonymous accounts are present.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate the anonymous users returned from executing the audit procedure. 2. For each anonymous user, DROP or assign them a name. Note: As an alternative, you may execute the mariadb-secure-installation utility. References: 1. https://mariadb.com/kb/en/mysql_secure_installation/",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Any applications relying on anonymous database access will be adversely affected by this change.",
    "references": "1. https://mariadb.com/kb/en/mysql_secure_installation/",
    "function_names": [
      "mariadb_user_no_anonymous_accounts",
      "mariadb_user_anonymous_accounts_removed",
      "mariadb_user_empty_username_disabled",
      "mariadb_user_authentication_required",
      "mariadb_user_secure_credentials_enabled"
    ]
  },
  {
    "id": "8.1",
    "title": "Ensure 'require_secure_transport' is Set to 'ON' and 'have_ssl' is Set to 'YES'",
    "assessment": "Automated",
    "description": "All network traffic must use SSL/TLS when traveling over untrusted networks.",
    "rationale": "Enabling SSL/TLS will allow clients to encrypt network traffic and verify the identity of the server. SSL/TLS helps to prevent eavesdropping and man-in-the-middle attacks. Impact: Enabling SSL/TLS could have impact on network traffic inspection.",
    "audit": "Execute the following SQL statements to assess this recommendation: Ensure the Value returned is '1' to guarantee insecure connections are rejected: select @@require_secure_transport; Ensure the Value returned is YES to guarantee that TLS is enabled: SHOW variables WHERE variable_name = 'have_ssl'; Note: In MariaDB 10.0.1 and later, have_openssl is NOT an alias for have_ssl. In these releases, this variable simply indicates if MariaDB is using OpenSSL instead of MariaDB's bundled TLS library.",
    "remediation": "Follow the procedures as documented in the MariaDB KnowledgeBase to setup TLS. In your MariaDB configuration file, enable require_secure_transport: require_secure_transport=ON; Default Value: require_secure_transport is disabled (OFF, 0) by default. have_ssl defaults to DISABLED. References: 1. https://mariadb.com/kb/en/secure-connections-overview/ 2. https://mariadb.com/kb/en/securing-connections-for-client-and-server/ 3. https://mariadb.com/kb/en/server-system-variables/#require_secure_transport 4. https://mariadb.com/kb/en/ssltls-system-variables/#have_openssl",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "Enabling SSL/TLS could have impact on network traffic inspection.",
    "references": "1. https://mariadb.com/kb/en/secure-connections-overview/ 2. https://mariadb.com/kb/en/securing-connections-for-client-and-server/ 3. https://mariadb.com/kb/en/server-system-variables/#require_secure_transport 4. https://mariadb.com/kb/en/ssltls-system-variables/#have_openssl",
    "function_names": [
      "cloudsql_instance_require_secure_transport_enabled",
      "cloudsql_instance_have_ssl_enabled",
      "cloudsql_instance_secure_transport_and_ssl_enabled",
      "cloudsql_instance_encryption_in_transit_enabled",
      "cloudsql_instance_tls_required",
      "cloudsql_instance_ssl_enforced",
      "cloudsql_instance_secure_connection_required",
      "cloudsql_instance_transport_security_enabled"
    ]
  },
  {
    "id": "8.2",
    "title": "Ensure 'ssl_type' is Set to 'ANY', 'X509', or 'SPECIFIED' for All Remote Users",
    "assessment": "Automated",
    "description": "All network traffic must use SSL/TLS when traveling over untrusted networks. SSL/TLS should be enforced on a per-user basis for users which enter the system through the network.",
    "rationale": "SSL/TLS helps to prevent eavesdropping and man-in-the-middle attacks. Impact: When SSL/TLS is enforced then clients which do not use SSL will not be able to connect. If the server is not configured for SSL/TLS then accounts for which SSL/TLS is mandatory will not be able to connect.",
    "audit": "Execute the following SQL statements to assess this recommendation: SELECT user, host, ssl_type FROM mysql.user WHERE NOT HOST IN ('::1', '127.0.0.1', 'localhost'); Ensure the ssl_type for each user returned is equal to ANY, X509, or SPECIFIED. Note: ANY means the account must be using TLS but does not require a valid X509 certificate.",
    "remediation": "Use the ALTER USER statement to require the use of SSL/TLS: ALTER USER 'my_user'@'app1.example.com' REQUIRE SSL; Note: REQUIRE SSL only enforces TLS. There are additional options REQUIRE X509, REQUIRE ISSUER, REQUIRE SUBJECT and REQUIRE CIPHER which can be used to further restrict the connection. Default Value: The Value of ssl_type defaults to an empty string, the equivalent result of using REQUIRE NONE with an ALTER USER statement. References: 1. https://mariadb.com/kb/en/secure-connections-overview/ 2. https://mariadb.com/kb/en/ssltls-system-variables/ 3. https://mariadb.com/kb/en/alter-user/#tls-options",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "When SSL/TLS is enforced then clients which do not use SSL will not be able to connect. If the server is not configured for SSL/TLS then accounts for which SSL/TLS is mandatory will not be able to connect.",
    "references": "1. https://mariadb.com/kb/en/secure-connections-overview/ 2. https://mariadb.com/kb/en/ssltls-system-variables/ 3. https://mariadb.com/kb/en/alter-user/#tls-options",
    "function_names": [
      "compute_remote_user_ssl_type_configured",
      "compute_remote_user_ssl_type_valid",
      "compute_remote_user_ssl_type_restricted",
      "compute_remote_user_ssl_type_enforced",
      "compute_remote_user_ssl_type_compliant"
    ]
  },
  {
    "id": "8.3",
    "title": "Set Maximum Connection Limits for Server and per User",
    "assessment": "Manual",
    "description": "Limiting concurrent connections to a MariaDB server can be used to reduce risk of Denial of Service (DoS) attacks performed by exhausting connection resources.",
    "rationale": "Limiting the number of concurrent sessions at the server and per user level helps to reduce the risk of DoS attacks. MariaDB provides mechanisms to limit the number of simultaneous connections that can be made at the server level or by any given account.",
    "audit": "To check global (default) concurrent-sessions settings in the MariaDB database server, run the query: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME LIKE 'max_%connections'; If the value of max_user_connections is 0 this means there is “no limit”. If the value of max_connections is not set, there is no limit. To check user-specific settings, run the following: select user, host, max_connections, max_user_connections from mysql.user where user not like 'mysql.%' and user not like 'root'; A value of 0 means there is no user-specific limit, that the corresponding global setting applies. If no limits are configured, this is a fail.",
    "remediation": "To persist changes to global settings, you must set these variables within MariaDB configuration files. • To set the global default per-user connection limit, set the max_user_connections variable to a numeric value. • To set the maximum number of clients the server permits to simultaneously connect, set the max_connections variable to a numeric value. You may also set these variables dynamically (and only temporarily) for a running instance of MariaDB by connecting as an administrator and utilizing the commands below. SET GLOBAL max_user_connections= <desired numeric value> ; SET GLOBAL max_connections= <desired numeric value> ; Additionally, connections limits can be set distinctly for each user using CREATE or ALTER commands. For example: ALTER USER 'fred'@'localhost' WITH MAX_CONNECTIONS_PER_HOUR 5 MAX_USER_CONNECTIONS 2; Default Value: The default value of max_connections is 151, max_user_connections is 0 (unlimited, thus limited by max_connections). By default, users are created without their own distinct connection limits. References: 1. https://mariadb.com/kb/en/server-system-variables/#max_connections 2. https://mariadb.com/kb/en/server-system-variables/#max_user_connections 3. https://mariadb.com/kb/en/handling-too-many-connections/ 4. https://mariadb.com/kb/en/create-user/#resource-limit-options 5. https://mariadb.com/kb/en/configuring-mariadb-with-option-files/ Additional Information: Global connection limits do not apply to users with SUPER or CONNECTION ADMIN privileges. max_user_connections cannot be set globally if MariaDB is already running with it set to 0. You can also limit connections to be available only for users with SUPER or CONNECTION ADMIN privilege by setting max_user_connections to -1. max_connections and max_user_connections can only be set within specific ranges of values. MariaDB will accept values out of range but silently set them to the closest in- range value. For example: MariaDB [(none)]> set global max_connections=0; Query OK, 0 rows affected, 1 warning (0.000 sec) MariaDB [(none)]> SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'max_connections'; +-----------------+----------------+ | VARIABLE_NAME   | VARIABLE_VALUE | +-----------------+----------------+ | MAX_CONNECTIONS | 10             | +-----------------+----------------+ 1 row in set (0.001 sec) MariaDB [(none)]> set global max_connections=999999; Query OK, 0 rows affected, 1 warning (0.000 sec) MariaDB [(none)]> SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'max_connections'; +-----------------+----------------+ | VARIABLE_NAME   | VARIABLE_VALUE | +-----------------+----------------+ | MAX_CONNECTIONS | 100000         | +-----------------+----------------+ 1 row in set (0.001 sec) 9 Replication Everything related to replicating data from one server to another. Note that you may see the following terms used interchangeably throughout this section: primary (or master ) and replica (or slave ). MariaDB has historically used master and slave in replication commands and documentation, but primary and replica are now preferred terminology for MariaDB. MariaDB has begun but has not completed transitioning terminology. Where possible, this section utilizes primary and replica , but master and slave may appear in commands yet to be transitioned. More details on MariaDB's renaming initiative can be found at MDEV-18777.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "references": "1. https://mariadb.com/kb/en/server-system-variables/#max_connections 2. https://mariadb.com/kb/en/server-system-variables/#max_user_connections 3. https://mariadb.com/kb/en/handling-too-many-connections/ 4. https://mariadb.com/kb/en/create-user/#resource-limit-options 5. https://mariadb.com/kb/en/configuring-mariadb-with-option-files/ Additional Information: Global connection limits do not apply to users with SUPER or CONNECTION ADMIN privileges. max_user_connections cannot be set globally if MariaDB is already running with it set to 0. You can also limit connections to be available only for users with SUPER or CONNECTION ADMIN privilege by setting max_user_connections to -1. max_connections and max_user_connections can only be set within specific ranges of values. MariaDB will accept values out of range but silently set them to the closest in- range value. For example: MariaDB [(none)]> set global max_connections=0; Query OK, 0 rows affected, 1 warning (0.000 sec) MariaDB [(none)]> SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'max_connections'; +-----------------+----------------+ | VARIABLE_NAME   | VARIABLE_VALUE | +-----------------+----------------+ | MAX_CONNECTIONS | 10             | +-----------------+----------------+ 1 row in set (0.001 sec) MariaDB [(none)]> set global max_connections=999999; Query OK, 0 rows affected, 1 warning (0.000 sec) MariaDB [(none)]> SELECT VARIABLE_NAME, VARIABLE_VALUE FROM information_schema.global_variables WHERE VARIABLE_NAME = 'max_connections'; +-----------------+----------------+ | VARIABLE_NAME   | VARIABLE_VALUE | +-----------------+----------------+ | MAX_CONNECTIONS | 100000         | +-----------------+----------------+ 1 row in set (0.001 sec) 9 Replication Everything related to replicating data from one server to another. Note that you may see the following terms used interchangeably throughout this section: primary (or master ) and replica (or slave ). MariaDB has historically used master and slave in replication commands and documentation, but primary and replica are now preferred terminology for MariaDB. MariaDB has begun but has not completed transitioning terminology. Where possible, this section utilizes primary and replica , but master and slave may appear in commands yet to be transitioned. More details on MariaDB's renaming initiative can be found at MDEV-18777.",
    "function_names": [
      "mariadb_server_connection_limit_set",
      "mariadb_user_connection_limit_set",
      "mariadb_server_max_connections_configured",
      "mariadb_user_max_connections_configured",
      "mariadb_server_dos_protection_enabled",
      "mariadb_connection_limit_per_user_enforced",
      "mariadb_server_connection_threshold_defined",
      "mariadb_user_connection_threshold_defined"
    ]
  },
  {
    "id": "9.1",
    "title": "Ensure Replication Traffic is Secured",
    "assessment": "Manual",
    "description": "The replication traffic between servers should be secured. Security measures should include ensuring the confidentiality and integrity of the traffic and performing mutual authentication between the servers before performing replication.",
    "rationale": "The replication traffic should be secured as it gives access to all transferred information and might leak passwords. Impact: When the replication traffic is not secured someone might be able to capture passwords and other sensitive information when sent to the replica.",
    "audit": "Check if the replication traffic is using one or more of the following to provide confidentiality and integrity for the traffic and mutual authentication for the servers: • A private network • A VPN • SSL/TLS • A SSH Tunnel If using SSL/TLS, run the following MariaDB command to ensure the REPLICA is utilizing TLS: show replica status\\G; Verify Master_SSL_Allowed is set to Yes. SSL/TLS mutual authentication is audited in subsequent recommendations. For other implementation options, audit mutual authentication as part of this recommendation.",
    "remediation": "Secure the network traffic using one or more technologies to provide confidentiality and integrity for the traffic and mutual authentication for the servers. If using SSL/TLS, run the following commands on the REPLICA server(s): STOP REPLICA; -- required if replication was already running CHANGE MASTER TO MASTER_SSL=1; START REPLICA; -- required if you want to restart replication Note: The PRIMARY and REPLICA servers must already have SSL/TLS enabled and have each others' CA certificates in their trusted CA certificates files. SSL/TLS mutual authentication procedures are provided in subsequent recommendations. For other implementation options, remediate mutual authentication issues as part of this recommendation. Default Value: By default, replication traffic is not secured with encryption or other protections. References: 1. https://mariadb.com/kb/en/replication-with-secure-connections/ Additional Information: MariaDB provides the ability to secure replication traffic with SSL/TLS. Other security measures would be implemented outside MariaDB, either by adding technology to MariaDB servers or by implementing controls in the broader network environment.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "When the replication traffic is not secured someone might be able to capture passwords and other sensitive information when sent to the replica.",
    "references": "1. https://mariadb.com/kb/en/replication-with-secure-connections/ Additional Information: MariaDB provides the ability to secure replication traffic with SSL/TLS. Other security measures would be implemented outside MariaDB, either by adding technology to MariaDB servers or by implementing controls in the broader network environment."
  },
  {
    "id": "9.2",
    "title": "Ensure 'MASTER_SSL_VERIFY_SERVER_CERT' is enabled",
    "assessment": "Automated",
    "description": "On the MariaDB REPLICA, the setting MASTER_SSL_VERIFY_SERVER_CERT indicates whether the REPLICA should perform server certificate verification of the PRIMARY's certificate.",
    "rationale": "When establishing TLS connections, clients use certificate verification to authenticate the server as their intended peer in the connection. In this case, the REPLICA (client) should verify the PRIMARY's (server's) certificate to authenticate the PRIMARY prior to continuing the connection. Impact: When using CHANGE MASTER TO, be aware of the following: • REPLICA processes need to be stopped by running STOP REPLICA prior to executing CHANGE MASTER TO • Use of CHANGE MASTER TO starts new relay logs without keeping the old ones unless explicitly told to keep them • When CHANGE MASTER TO is invoked, some information is dumped to the error log (previous values for MASTER_HOST, MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS) • Invoking CHANGE MASTER TO will implicitly commit any ongoing transactions in the session where the CHANGE MASTER TO was run, but not all ongoing transactions on the database.",
    "audit": "This audit procedure only needs to be run if replication traffic is being secured with SSL/TLS. To assess this recommendation, issue the following statement: show replica status\\G; Verify the value of Master_SSL_Verify_Server_Cert is Yes.",
    "remediation": "To remediate this setting, you must use the CHANGE MASTER TO command. STOP REPLICA; -- required if replication was already running CHANGE MASTER TO MASTER_SSL_VERIFY_SERVER_CERT=1; START REPLICA; -- required if you want to restart replication Default Value: Disabled. References: 1. https://mariadb.com/kb/en/change-master-to/#master_ssl_verify_server_cert 2. https://mariadb.com/kb/en/secure-connections-overview/#server-certificate- verification Additional Information: Note that this recommendation only applies if you are utilizing TLS to secure MariaDB replication traffic.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "When using CHANGE MASTER TO, be aware of the following: • REPLICA processes need to be stopped by running STOP REPLICA prior to executing CHANGE MASTER TO • Use of CHANGE MASTER TO starts new relay logs without keeping the old ones unless explicitly told to keep them • When CHANGE MASTER TO is invoked, some information is dumped to the error log (previous values for MASTER_HOST, MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS) • Invoking CHANGE MASTER TO will implicitly commit any ongoing transactions in the session where the CHANGE MASTER TO was run, but not all ongoing transactions on the database.",
    "references": "1. https://mariadb.com/kb/en/change-master-to/#master_ssl_verify_server_cert 2. https://mariadb.com/kb/en/secure-connections-overview/#server-certificate- verification Additional Information: Note that this recommendation only applies if you are utilizing TLS to secure MariaDB replication traffic.",
    "function_names": [
      "mariadb_replica_ssl_server_cert_verification_enabled",
      "mariadb_replica_master_ssl_cert_verification_enabled",
      "mariadb_replica_primary_cert_verification_enabled",
      "mariadb_replica_ssl_verify_server_cert_enabled",
      "mariadb_replica_secure_ssl_cert_validation_enabled"
    ]
  },
  {
    "id": "9.3",
    "title": "Ensure 'super_priv' is Not Set to 'Y' for Replication Users",
    "assessment": "Automated",
    "description": "The SUPER privilege found in the mysql.user table governs the use of a variety of MariaDB features. These features include, CHANGE MASTER TO, KILL, mysqladmin kill option, PURGE BINARY LOGS, SET GLOBAL, mysqladmin debug option, logging control, and more.",
    "rationale": "The SUPER privilege allows principals to perform many actions, including view and terminate currently executing MariaDB statements (including statements used to manage passwords). This privilege also provides the ability to configure MariaDB, such as enable/disable logging, alter data, disable/enable features. Limiting the accounts that have the SUPER privilege reduces the chances that an attacker can exploit these capabilities. Impact: When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "audit": "Execute the following SQL statement to audit this setting: select user, host from mysql.user where user='repl' and Super_priv = 'Y'; No rows should be returned. NOTE: Substitute your replication user's name for repl in the above query If you wish to validate permissions in more detail: select * from mysql.user where user='repl'\\G The following columns should return Y. *************************** 1. row *************************** Select_priv: Y Reload_priv: Y Shutdown_priv: Y Process_priv: Y File_priv: Y Grant_priv: Y Execute_priv: Y Repl_slave_priv: Y Repl_client_priv: Y Create_user_priv: Y 1 row in set (0.0007 sec) Check Dynamic Privileges : select PRIV from mysql.global_grants where user like 'repl'\\G Expected results are: BACKUP_ADMIN CLONE_ADMIN PERSIST_RO_VARIABLES_ADMIN REPLICATION_SLAVE_ADMIN SYSTEM_VARIABLES_ADMIN Note: Substitute your replication user's name for repl in the above queries.",
    "remediation": "Execute the following steps to remediate this setting: 1. Enumerate the replication users found in the result set of the audit procedure 2. For each replication user, issue the following SQL statement (replace repl with your replication user's name): REVOKE SUPER ON *.* FROM 'repl'; References: 1. https://mariadb.com/kb/en/grant/#super",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "references": "1. https://mariadb.com/kb/en/grant/#super",
    "function_names": [
      "database_user_no_super_privilege",
      "database_replication_user_super_priv_disabled",
      "mariadb_user_super_priv_not_set",
      "database_user_super_privilege_restricted",
      "replication_user_super_privilege_removed"
    ]
  },
  {
    "id": "9.4",
    "title": "Ensure only approved ciphers are used for Replication",
    "assessment": "Manual",
    "description": "MariaDB supports multiple encryption ciphers that can be used for TLS connections during replication. Ciphers can vary in strength, speed and overhead.",
    "rationale": "Requiring REPLICA servers to utilize strong ciphers when connecting to a PRIMARY server protects data in transit. Impact: If the PRIMARY and REPLICA servers don't support common cipher suites, replication will fail.",
    "audit": "This audit procedure only needs to be run if replication traffic is being secured with SSL/TLS. To audit this recommendation, run the following command: SHOW REPLICA STATUS\\G; Verify that Master_SSL_Cipher is set to a list of approved ciphers and/or cipher suites. If this setting is empty or includes unapproved ciphers or cipher suites, this recommendation has been failed.",
    "remediation": "To remediate this setting, you must use the CHANGE MASTER TO command with MASTER_SSL_CIPHER. For example, run: STOP REPLICA; -- required if replication was already running CHANGE MASTER TO MASTER_SSL_CIPHER='ECDHE-ECDSA-AES128-GCM-SHA256'; START REPLICA; -- required if you want to restart replication Default Value: Empty References: 1. https://mariadb.com/kb/en/replication-with-secure-connections 2. https://mariadb.com/kb/en/change-master-to/#master_ssl_cipher 3. https://mariadb.com/kb/en/alter-user/#tls-options Additional Information: Note that this recommendation only applies if you are utilizing TLS to secure MariaDB replication traffic. Note also that you may also be able to restrict the cipher suites accepted by the PRIMARY for your replication users than you have set more globally via the ssl_ciphers variable to support all clientscipher suite needs. To do this, run theALTER USERcommand on yourPRIMARY, utilizing the REQUIRE CIPHERoption with value(s) supported by yourREPLICA` as implemented in this recommendation.",
    "profile_applicability": "•  Level 2 - MariaDB RDBMS on Linux •  Level 2 - MariaDB RDBMS",
    "impact": "If the PRIMARY and REPLICA servers don't support common cipher suites, replication will fail.",
    "references": "1. https://mariadb.com/kb/en/replication-with-secure-connections 2. https://mariadb.com/kb/en/change-master-to/#master_ssl_cipher 3. https://mariadb.com/kb/en/alter-user/#tls-options Additional Information: Note that this recommendation only applies if you are utilizing TLS to secure MariaDB replication traffic. Note also that you may also be able to restrict the cipher suites accepted by the PRIMARY for your replication users than you have set more globally via the ssl_ciphers variable to support all clientscipher suite needs. To do this, run theALTER USERcommand on yourPRIMARY, utilizing the REQUIRE CIPHERoption with value(s) supported by yourREPLICA` as implemented in this recommendation.",
    "function_names": [
      "mariadb_replication_approved_ciphers",
      "mariadb_replication_tls_ciphers_secure",
      "mariadb_replication_ciphers_restricted",
      "mariadb_replication_encryption_ciphers_compliant",
      "mariadb_replication_tls_ciphers_approved_only"
    ]
  },
  {
    "id": "9.5",
    "title": "Ensure mutual TLS is enabled",
    "assessment": "Manual",
    "description": "Mutual TLS (a.k.a. Two-Way TLS) enhances TLS by requiring that both parties authenticate each other when establishing a connection. Mutual TLS adds a requirement (over TLS) that the client provide its certificate so the server can authenticate the client.",
    "rationale": "By requiring the client to authenticate to the server (in this case, the REPLICA to authenticate to the PRIMARY), the server (PRIMARY) prevents unauthorized clients (REPLICAs) from performing replication. Impact: The REPLICA will need to have TLS enabled to support mutual TLS.",
    "audit": "This audit procedure only needs to be run if replication traffic is being secured with SSL/TLS. To audit this recommendation, ensure that the REPLICA is configured to provide a client certificate, and that the PRIMARY requires certificates for any replication users. Run the following command on the REPLICA: SHOW REPLICA STATUS\\G; Verify that Master_SSL_Cert is set to the filename where the REPLICA's certificate is stored, and verify that Master_SSL_Key is set to the filename where the REPLICA's corresponding private key is stored. On the PRIMARY, run the following command for all replication users, replacing which each such username: select ssl_type from mysql.user where user=' <replication user> '; Verify that all replication users have ssl_type X509.",
    "remediation": "To remediate this setting, you must run the CHANGE MASTER TO command on the REPLICA with MASTER_SSL_CERT and MASTER_SSL_KEY set to the paths for the REPLICA's certificate and private key files. For example, run: STOP REPLICA; -- required if replication was already running CHANGE MASTER TO MASTER_SSL_CERT='/etc/mysql/mariadb.conf.d/certificates/server-cert.pem', MASTER_SSL_KEY='/etc/mysql/mariadb.conf.d/certificates/server-key.pem'; START REPLICA; -- required if you want to restart replication If the PRIMARY does not require your replication users to provide X.509 certificates, use the ALTER USER command with REQUIRE X509 (and/or optionally REQUIRE SUBJECT and/or REQUIRE ISSUER) for the user accounts needing remediation. For example, run: ALTER USER <replication user> REQUIRE X509; Default Value: Disabled. References: 1. https://mariadb.com/kb/en/replication-with-secure-connections/#enabling-two- way-tls-with-change-master 2. https://mariadb.com/kb/en/change-master-to/ 3. https://mariadb.com/kb/en/alter-user/#tls-options Additional Information: Note that this recommendation only applies if you are utilizing TLS to secure MariaDB replication traffic. Although the MASTER_SSL_CERT and MASTER_SSL_KEY options imply that a certificate and key owned by the PRIMARY should be used, these options should actually be set to use the REPLICA's certificate and key. When running ALTER USER, the REQUIRE SUBJECT and REQUIRE ISSUER options enforce stronger requirements around the client certificates that a user may utilize.",
    "profile_applicability": "•  Level 1 - MariaDB RDBMS",
    "impact": "The REPLICA will need to have TLS enabled to support mutual TLS.",
    "references": "1. https://mariadb.com/kb/en/replication-with-secure-connections/#enabling-two- way-tls-with-change-master 2. https://mariadb.com/kb/en/change-master-to/ 3. https://mariadb.com/kb/en/alter-user/#tls-options Additional Information: Note that this recommendation only applies if you are utilizing TLS to secure MariaDB replication traffic. Although the MASTER_SSL_CERT and MASTER_SSL_KEY options imply that a certificate and key owned by the PRIMARY should be used, these options should actually be set to use the REPLICA's certificate and key. When running ALTER USER, the REQUIRE SUBJECT and REQUIRE ISSUER options enforce stronger requirements around the client certificates that a user may utilize.",
    "function_names": [
      "cloud_cdn_load_balancer_mtls_enabled",
      "compute_load_balancer_client_certificate_required",
      "network_load_balancer_mtls_authentication_enabled",
      "api_gateway_endpoint_mtls_required",
      "cloud_cdn_ssl_certificate_client_auth_enabled",
      "compute_ssl_certificate_mtls_enabled",
      "network_ssl_certificate_client_auth_required",
      "api_gateway_mtls_authentication_enabled"
    ]
  }
]