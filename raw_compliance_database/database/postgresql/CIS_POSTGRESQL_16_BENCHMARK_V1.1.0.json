[
  {
    "id": "1.1",
    "title": "Ensure packages are obtained from authorized repositories",
    "assessment": "Manual",
    "description": "Standard Linux distributions, although possessing the requisite packages, often do not have PostgreSQL pre-installed. The installation process includes installing the binaries and the means to generate a data cluster. Package installation should include both the server and client packages. Contribution modules are optional depending upon one's architectural requirements (they are recommended though). When obtaining and installing software packages (typically via dnf or apt), it's imperative that packages are sourced only from valid and authorized repositories. For PostgreSQL, the canonical repositories are the official PostgreSQL YUM repository (yum.postgresql.org) and the official PostgreSQL APT repository (apt.postgresql.org). Your chosen PostgreSQL vendor may offer its own software repositories as well.",
    "rationale": "Being open-source, PostgreSQL packages are widely available across the internet through package aggregators and providers. However, using invalid or unauthorized sources for packages can lead to implementing untested, defective, or malicious software. Many organizations choose to implement a local software repository within their organization. Care must be taken to ensure that only valid and authorized packages are downloaded and installed into such local repositories. From a security perspective, it's imperative to verify the PostgreSQL binary packages are sourced from a valid software repository. For a complete listing of all PostgreSQL binaries available via configured repositories inspect the output from dnf provides '*libpq.so' or apt-file search /usr/pgsql-16/lib/libpq.so.5.",
    "audit": "Identify and inspect configured repositories to ensure they are all valid and authorized sources of packages. The following is an example of a simple RHEL 9 install illustrating the use of the dnf repolist all command. # whoami root # dnf repolist all | grep -E 'enabled$' rhel-9-for-x86_64-appstream-rpms                   Red Hat Enterprise enabled rhel-9-for-x86_64-baseos-rpms                      Red Hat Enterprise enabled #  Ensure the list of configured repositories only includes organization-approved repositories. If any unapproved repositories are listed, this is a fail. To inspect what versions of PostgreSQL packages are currently installed, we can query using the rpm commands. As illustrated below, no PostgreSQL packages are installed: # whoami root # rpm -qa | grep postgres # If packages were returned in the above, we can determine from which repo they came by combining dnf and rpm: # whoami root # dnf info $(rpm -qa|grep postgres) | grep -E '^Name|^Version|^From' Name        : postgresql16 Version     : 16.0 From repo   : pgdg16 Name        : postgresql16-contrib Version     : 16.0 From repo   : pgdg16 Name        : postgresql16-libs Version     : 16.0 From repo   : pgdg16 Name        : postgresql16-server Version     : 16.0 From repo   : pgdg16 If the expected binary packages are not installed, are not the expected versions, or did not come from an appropriate repo, this is a fail.",
    "remediation": "Alter the configured repositories so they only include valid and authorized sources of packages. As an example of adding an authorized repository, we will install the PGDG repository RPM from 'yum.postgresql.org': # whoami root # dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9- x86_64/pgdg-redhat-repo-latest.noarch.rpm Last metadata expiration check: 0:01:35 ago on Mon 03 Oct 2022 01:19:37 PM EDT. [snip] Installed: pgdg-redhat-repo-42.0-50.noarch Complete! # whoami root # dnf repolist all | egrep 'enabled$' pgdg-common                                        PostgreSQL common  enabled  pgdg13                                             PostgreSQL 13 for  enabled pgdg14                                             PostgreSQL 14 for  enabled pgdg15                                             PostgreSQL 15 for  enabled pgdg16                                             PostgreSQL 16 for  enabled pgdg17                                             PostgreSQL 17 for  enabled rhel-9-for-x86_64-appstream-rpms                   Red Hat Enterprise enabled rhel-9-for-x86_64-baseos-rpms                      Red Hat Enterprise enabled If the version of PostgreSQL installed is not 16.x or they did not come from a valid repository, the packages may be uninstalled using this command: # whoami root # dnf remove $(rpm -qa|grep postgres) To install the PGDG RPMs for PostgreSQL 16.x, run: # whoami root # dnf install -y postgresql16-{server,contrib} <snip> Installed: <snip> postgresql16-16.9-3PGDG.rhel9.x86_64        postgresql16-contrib-16.9- 3PGDG.rhel9.x86_64 postgresql16-libs-16.9-3PGDG.rhel9.x86_64   postgresql16-server-16.9- 3PGDG.rhel9.x86_64 Complete! References: 1. https://en.wikipedia.org/wiki/DNF_(software) 2. https://en.wikipedia.org/wiki/APT_(software) 3. https://yum.postgresql.org 4. https://apt.postgresql.org",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://en.wikipedia.org/wiki/DNF_(software) 2. https://en.wikipedia.org/wiki/APT_(software) 3. https://yum.postgresql.org 4. https://apt.postgresql.org",
    "function_names": [
      "package_repository_authorized",
      "package_repository_postgresql_valid",
      "package_repository_postgresql_official",
      "package_source_authorized_only",
      "package_installation_repository_approved",
      "package_repository_yum_postgresql_valid",
      "package_repository_apt_postgresql_valid",
      "package_repository_vendor_authorized",
      "package_installation_repository_trusted",
      "package_repository_postgresql_canonical"
    ]
  },
  {
    "id": "1.2",
    "title": "Install only required packages",
    "assessment": "Manual",
    "description": "Depending on the distribution, several other packages next to the mandatory postgresql might have been installed upon a system. Typical add-on packages are: • postgresql-doc: PostgreSQL documentation. • phppgadmin: PostgreSQL web-based administration tool. • ...",
    "rationale": "Unused packages can increase the potential attack surface of the system.",
    "audit": "On Debian, one can use the following command to see a complete list of the available packages. apt search postgresql RHEL: dnf search postgresql",
    "remediation": "Examine the installed packages: Debian: dpkg -l $(apt-cache search postgresql --names-only| awk '{print $1}') 2>&1 | grep -v 'no packages found' RHEL: rpm -q $(dnf search postgresql | cut -d: -f1 | cut -d. -f1) 2>&1 | grep -Ev 'package.*is not installed' Remove any identified packages that are undesired: Debian: apt purge <pkg> RHEL: dnf erase <pkg>",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "function_names": [
      "package_manager_installed_packages_required_only",
      "package_manager_postgresql_addons_removed",
      "package_manager_postgresql_doc_disabled",
      "package_manager_phppgadmin_disabled",
      "package_manager_unnecessary_packages_uninstalled",
      "package_manager_postgresql_dependencies_minimized",
      "package_manager_system_packages_audited",
      "package_manager_postgresql_default_packages_only"
    ]
  },
  {
    "id": "1.3",
    "title": "Ensure systemd Service Files Are Enabled",
    "assessment": "Automated",
    "description": "Confirm, and correct if necessary, the PostgreSQL systemd service is enabled.",
    "rationale": "Enabling the systemd service on the OS ensures the database service is active when a change of state occurs as in the case of a system startup or reboot.",
    "audit": "Confirm the PostgreSQL service is enabled by executing the following: $ whoami root $ systemctl is-enabled postgresql-16.service enabled If the intended PostgreSQL service is not registered as a dependency (or \"want\") of the default target (anything other than 'enabled' is returned), this is a failure.",
    "remediation": "Irrespective of package source, PostgreSQL services can be identified because it typically includes the text string \"postgresql\". PGDG installs do not automatically register the service as a \"want\" of the default systemd target. Multiple instances of PostgreSQL services often distinguish themselves using a version number. # whoami root # systemctl enable postgresql-16 Created symlink /etc/systemd/system/multi-user.target.wants/postgresql- 16.service → /usr/lib/systemd/system/postgresql-16.service. # systemctl is-enabled postgresql-16.service enabled References: 1. https://man7.org/linux/man-pages/man1/systemctl.1.html 2. https://www.freedesktop.org/software/systemd/man/systemd.special.html",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://man7.org/linux/man-pages/man1/systemctl.1.html 2. https://www.freedesktop.org/software/systemd/man/systemd.special.html",
    "function_names": [
      "systemd_service_postgresql_enabled",
      "systemd_service_postgresql_configured",
      "systemd_service_postgresql_active",
      "systemd_service_postgresql_boot_enabled",
      "systemd_service_postgresql_autostart_enabled"
    ]
  },
  {
    "id": "1.4",
    "title": "Ensure Data Cluster Initialized Successfully",
    "assessment": "Automated",
    "description": "First-time installs of a given PostgreSQL major release require the instantiation of the database cluster. A database cluster is a collection of databases that are managed by a single server instance.",
    "rationale": "For the purposes of security, PostgreSQL enforces ownership and permissions of the data cluster such that: • An initialized data cluster is owned by the UNIX account that created it. • The data cluster cannot be accessed by other UNIX user accounts. • The data cluster cannot be created or owned by root • The PostgreSQL process cannot be invoked by root nor any UNIX user account other than the owner of the data cluster. Incorrectly instantiating the data cluster will result in a failed installation.",
    "audit": "Assuming you are installing the PostgreSQL binary package from the PGDG repository, the standard method, as root, is to instantiate the cluster thusly: # whoami root # PGSETUP_INITDB_OPTIONS=\"-k\" /usr/pgsql-16/bin/postgresql-16-setup initdb Initializing database ... OK Note that we enabled checksumming in the above command by setting PGSETUP_INITDB_OPTIONS=\"-k\". A correctly installed data cluster possesses directory permissions similar to the following example. Otherwise, the service will fail to start: # whoami root # ls -la ~postgres/16 total 8 drwx------.  4 postgres postgres   51 Oct  3 14:01 . drwx------.  3 postgres postgres   37 Oct  3 13:54 .. drwx------.  2 postgres postgres    6 Oct  3 06:18 backups drwx------. 20 postgres postgres 4096 Oct  3 14:01 data -rw-------.  1 postgres postgres  923 Oct  3 14:01 initdb.log You can verify the PGDATA has sane permissions and attributes by running:  # whoami postgres # /usr/pgsql-16/bin/postgresql-16-check-db-dir ~postgres/16/data # echo $? 0 As long as the return code is zero(0), as shown, everything is fine.",
    "remediation": "Attempting to instantiate a data cluster to an existing non-empty directory will fail: # whoami root # PGSETUP_INITDB_OPTIONS=\"-k\" /usr/pgsql-16/bin/postgresql-16-setup initdb Data directory is not empty! In the case of a cluster instantiation failure, one must delete/remove the entire data cluster directory and repeat the initdb command: # whoami root # rm -rf ~postgres/16 # PGSETUP_INITDB_OPTIONS=\"-k\" /usr/pgsql-16/bin/postgresql-16-setup initdb Initializing database ... OK References: 1. https://www.postgresql.org/docs/current/app-initdb.html",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://www.postgresql.org/docs/current/app-initdb.html",
    "function_names": [
      "postgres_cluster_initialized",
      "postgres_cluster_initialized_successfully",
      "postgres_cluster_initialized_first_time",
      "postgres_cluster_initialized_major_release",
      "postgres_cluster_initialized_valid",
      "postgres_cluster_initialized_healthy",
      "postgres_cluster_initialized_operational",
      "postgres_cluster_initialized_ready"
    ]
  },
  {
    "id": "1.5",
    "title": "Ensure the Latest Security Patches are Applied",
    "assessment": "Manual",
    "description": "PostgreSQL updates are released to resolve bugs, and mitigate vulnerabilities quarterly (or sooner for drastic CVEs). It is recommended that PostgreSQL installations are kept up to date with the latest security updates. The PostgreSQL development group guarantees that point releases (or \"minor releases\") will not change the behavior of an existing install and as such are \"safe\" to install without fear of changes to your application's behavior.",
    "rationale": "Maintaining parity with PostgreSQL patches will help reduce the risk associated with known vulnerabilities present in the PostgreSQL server. Without the latest security patches, PostgreSQL might have known vulnerabilities which could be used by an attacker to gain access. Impact: To update the PostgreSQL server a restart is required which will cause a momentary service outage.",
    "audit": "Execute the following SQL statement as low-privileged user to identify the PostgreSQL server version: SHOW server_version; Now compare the version returned with the security announcements shown on the PostgreSQL news page. For convenience, the latest PostgreSQL release versions are always shown in a banner at the top of that page along with the release date.",
    "remediation": "Install the latest patches available for your version: RHEL: sudo dnf update $(rpm -qa | grep '^postgresql') Debian: sudo apt-get install --only-upgrade $(dpkg-query -W -f '${db:Status-Status} ${Package}\\n' 'postgresql*' | awk '$1 != \"not-installed\" {print $NF}')  References: 1. https://www.postgresql.org/support/security/ 2. https://www.postgresql.org/support/versioning/",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "To update the PostgreSQL server a restart is required which will cause a momentary service outage.",
    "references": "1. https://www.postgresql.org/support/security/ 2. https://www.postgresql.org/support/versioning/",
    "function_names": [
      "postgres_database_security_patches_latest",
      "postgres_database_security_patches_up_to_date",
      "postgres_database_security_patches_installed",
      "postgres_database_security_patches_current",
      "postgres_database_security_patches_applied"
    ]
  },
  {
    "id": "1.6",
    "title": "Verify That 'PGPASSWORD' is Not Set in Users' Profiles",
    "assessment": "Automated",
    "description": "PostgreSQL can read a default database password from an environment variable called PGPASSWORD.",
    "rationale": "Use of the PGPASSWORD environment variable implies PostgreSQL credentials are stored as clear text. Avoiding this may increase assurance that the confidentiality of PostgreSQL credentials is preserved.",
    "audit": "To assess this recommendation check if PGPASSWORD is set in login scripts using the following terminal command as privileged user: grep PGPASSWORD --no-messages /home/*/.{bashrc,profile,bash_profile} grep PGPASSWORD --no-messages /root/.{bashrc,profile,bash_profile} grep PGPASSWORD --no-messages /etc/environment Note that the above only covers Bash as the login shell. If OS users are configured to use Zsh, Csh, or other login shells, the list of files would need adjusted appropriately.",
    "remediation": "Check which users and/or scripts are setting PGPASSWORD and change them to use a more secure method. References: 1. https://www.postgresql.org/docs/current/libpq-envars.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/libpq-envars.html",
    "function_names": [
      "compute_user_pgpassword_unset",
      "compute_profile_pgpassword_absent",
      "compute_environment_pgpassword_disabled",
      "compute_user_environment_no_pgpassword",
      "compute_profile_no_pgpassword_variable"
    ]
  },
  {
    "id": "1.7",
    "title": "Verify That the 'PGPASSWORD' Environment Variable is Not in Use",
    "assessment": "Automated",
    "description": "PostgreSQL can read a default database password from an environment variable called PGPASSWORD.",
    "rationale": "Using the PGPASSWORD environment variable implies PostgreSQL credentials are stored as clear text. Avoiding use of this environment variable can better safeguard the confidentiality of PostgreSQL credentials.",
    "audit": "To assess this recommendation, use the /proc filesystem and the following terminal command as privileged root user to determine if PGPASSWORD is currently set for any process. sudo grep PGPASSWORD /proc/*/environ This may return one false-positive entry for the process which is executing the grep command.",
    "remediation": "Check which users and/or scripts are setting PGPASSWORD and change them to use a more secure method. References: 1. https://www.postgresql.org/docs/15/libpq-envars.html Additional Information: I copied/adjusted this rule from CIS MySQL, rule 1.4",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/15/libpq-envars.html Additional Information: I copied/adjusted this rule from CIS MySQL, rule 1.4",
    "function_names": [
      "compute_database_pgpassword_unused",
      "database_postgresql_pgpassword_disabled",
      "postgresql_environment_pgpassword_absent",
      "database_connection_pgpassword_prohibited",
      "postgresql_credentials_pgpassword_unset"
    ]
  },
  {
    "id": "2.1",
    "title": "Ensure the file permissions mask is correct",
    "assessment": "Manual",
    "description": "Files are always created using a default set of permissions. File permissions can be restricted by applying a permissions mask called the umask . The postgres user account should use a umask of 0077 to deny file access to all user accounts except the owner.",
    "rationale": "The Linux OS defaults the umask to 0022, which means the owner and primary group can read and write the file, and other accounts are permitted to read the file. Not explicitly setting the umask to a value as restrictive as 0077 allows other users to read, write, or even execute files and scripts created by the postgres user account. The alternative to using a umask is explicitly updating file permissions after file creation using the command line utility chmod (a manual and error-prone process that is not advised).",
    "audit": "To view the mask's current setting, execute the following commands: # whoami root # su - postgres # whoami postgres # umask 0022 The umask must be 0077 or more restrictive for the postgres user, otherwise, this is a fail.",
    "remediation": "Depending upon the postgres user's environment, the umask is typically set in the initialization file .bash_profile, but may also be set in .profile or .bashrc. To set the umask, add the following to the appropriate profile file: # whoami postgres # cd ~ # ls -ld .{bash_profile,profile,bashrc} ls: cannot access .profile: No such file or directory ls: cannot access .bashrc: No such file or directory -rwx------. 1 postgres postgres 267 Aug 14 12:59 .bash_profile # echo \"umask 077\" >> .bash_profile  # source .bash_profile # umask 0077 Default Value: 0022 References: 1. https://man7.org/linux/man-pages/man2/umask.2.html 2. https://man7.org/linux/man-pages/man1/umask.1p.html",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://man7.org/linux/man-pages/man2/umask.2.html 2. https://man7.org/linux/man-pages/man1/umask.1p.html",
    "function_names": [
      "postgres_user_umask_0077",
      "postgres_file_permissions_mask_correct",
      "postgres_user_file_access_restricted",
      "postgres_user_umask_restrictive",
      "postgres_file_permissions_secure",
      "postgres_user_umask_configured",
      "postgres_file_access_owner_only",
      "postgres_user_umask_deny_all_except_owner"
    ]
  },
  {
    "id": "2.2",
    "title": "Ensure extension directory has appropriate ownership and permissions",
    "assessment": "Automated",
    "description": "The extension directory is the location of the PostgreSQL extensions. Extensions are storage engines or user defined functions (UDFs).",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the PostgreSQL database. If someone can modify extensions, then these extensions can be used to execute illicit instructions.",
    "audit": "Determine the PostgreSQL share directory: sudo /usr/pgsql-16/bin/pg_config --sharedir /usr/pgsql-16/share The extension directory, lives under that share directory: sudo export ext_dir=/usr/pgsql-16/share/extension sudo ls -ld $ext_dir This should return: drwxr-xr-x 1 root root 7826 Feb  9 14:27 /usr/pgsql-16/share/extension Any differences in permissions (the first field) is a failure.",
    "remediation": "If needed, correct the permissions on the extension dir by eecuting: sudo chown root:root $ext_dir sudo chmod 0755 $ext_dir If the permissions needed correct, it is imperative that all extensions found in $ext_dir are evaluated to ensure they have not been modified!",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "function_names": [
      "postgresql_extension_directory_secure_ownership",
      "postgresql_extension_directory_restrictive_permissions",
      "postgresql_extension_directory_no_world_writable",
      "postgresql_extension_directory_no_group_writable",
      "postgresql_extension_directory_secure_mode"
    ]
  },
  {
    "id": "2.3",
    "title": "Disable PostgreSQL Command History",
    "assessment": "Automated",
    "description": "On Linux/UNIX, the PostgreSQL client logs most interactive statements to a history file. The default PostgreSQL history file is named .psql_history in the user's home directory. The PostgreSQL command history should be disabled.",
    "rationale": "Disabling the PostgreSQL command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or sensitive data.",
    "audit": "Execute the following command as privileged user to assess this recommendation: sudo find /home -name \".psql_history\" -exec ls -la {} \\; sudo find /root -name \".psql_history\" -exec ls -la {} \\; For each file returned, determine whether that file is symbolically linked to /dev/null: lrwxrwxrwx 1 doug doug 9 Feb 26 18:18 /home/doug/.psql_history -> /dev/null lrwxrwxrwx 1 jim  jim  9 Feb 26 18:18 /home/jim/.psql_history In the above, Jim's history file is a finding, while Doug's is not.",
    "remediation": "For each OS user on the PostgreSQL server, perform the following steps to implement this setting: 1. Remove .psql_history if it exists. rm -f ~ <user> /.psql_history || true 2. Use either of the techniques below to prevent it from being created again: 1. Set the HISTFILE variable to /dev/null in ~<user>/.psqlrc cat << EOF >> ~ <user> /.psqlrc \\set HISTFILE /dev/null EOF 2. Create ~ <user> /.psql_history as a symbolic to /dev/null. ln -s /dev/null $HOME/.psql_history  3. Set the PSQL_HISTORY variable for all users: sudo echo 'PSQL_HISTORY=/dev/null' >> /etc/environment References: 1. https://www.postgresql.org/docs/current/app-psql.html#APP-PSQL-VARIABLES- HISTFILE",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/app-psql.html#APP-PSQL-VARIABLES- HISTFILE",
    "function_names": [
      "postgres_client_history_disabled",
      "postgres_user_history_disabled",
      "postgres_psql_history_disabled",
      "postgres_interactive_statements_disabled",
      "postgres_home_directory_history_disabled",
      "postgres_default_history_disabled",
      "postgres_linux_history_disabled",
      "postgres_unix_history_disabled"
    ]
  },
  {
    "id": "2.4",
    "title": "Ensure Passwords are Not Stored in the service file",
    "assessment": "Manual",
    "description": "One can set a password in a PostgreSQL connection service file. Verify the password option is not used in a connection service file.",
    "rationale": "Using the password parameter may negatively impact the confidentiality of the user's password. Impact: The global configuration is by default readable for all users on the system. This is needed for global defaults (prompt, port, socket, etc.). If a password is present in this file then all users on the system may be able to access it.",
    "audit": "To assess this recommendation, perform the following steps: sudo find / -name .pg_service.conf -type f -exec cat {} \\; 2>/dev/null | grep password sudo grep password /root/.pg_service.conf grep password \"${PGSERVICEFILE}\" grep password \"${PGSYSCONFDIR}/pg_service.conf\" If any of the commands above returns a line password=..., this is a finding.",
    "remediation": "Delete every password entry in the file(s) previously identified. References: 1. https://www.postgresql.org/docs/current/libpq-pgservice.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "The global configuration is by default readable for all users on the system. This is needed for global defaults (prompt, port, socket, etc.). If a password is present in this file then all users on the system may be able to access it.",
    "references": "1. https://www.postgresql.org/docs/current/libpq-pgservice.html",
    "function_names": [
      "postgres_service_file_password_not_stored",
      "postgres_connection_service_password_absent",
      "postgres_service_file_password_disabled",
      "postgres_connection_service_password_removed",
      "postgres_service_file_password_protected"
    ]
  },
  {
    "id": "3.1.2",
    "title": "Ensure the log destinations are set correctly",
    "assessment": "Automated",
    "description": "PostgreSQL supports several methods for logging server messages, including stderr, csvlog, syslog, and jsonlog. On Windows, eventlog is also supported. One or more of these destinations should be set for server log output.",
    "rationale": "If log_destination is not set, then any log messages generated by the core PostgreSQL processes will be lost.",
    "audit": "Execute the following SQL statement to view the currently active log destinations: postgres=# show log_destination; log_destination ----------------- stderr (1 row) The log destinations should comply with your organization's policies on logging. If all the expected log destinations are not set, this is a fail.",
    "remediation": "Execute the following SQL statements to remediate this setting (in this example, setting the log destination to csvlog): postgres=# alter system set log_destination = 'csvlog'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Note: If more than one log destination is to be used, set this parameter to a list of desired log destinations separated by commas (e.g. 'csvlog, stderr'). Default Value: stderr References: 1. https://www.postgresql.org/docs/current/runtime-config-logging.html  Additional Information: logging_collector (detailed in the next section) must be enabled to generate CSV- format log output.",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/runtime-config-logging.html  Additional Information: logging_collector (detailed in the next section) must be enabled to generate CSV- format log output.",
    "function_names": [
      "postgresql_logging_stderr_enabled",
      "postgresql_logging_csvlog_enabled",
      "postgresql_logging_syslog_enabled",
      "postgresql_logging_jsonlog_enabled",
      "postgresql_logging_eventlog_enabled",
      "postgresql_logging_destinations_configured"
    ]
  },
  {
    "id": "3.1.3",
    "title": "Ensure the logging collector is enabled",
    "assessment": "Automated",
    "description": "The logging collector is a background process that captures log messages sent to stderr and redirects them into log files. The logging_collector setting must be enabled in order for this process to run. It can only be set at the server start.",
    "rationale": "The logging collector approach is often more useful than logging to syslog, since some types of messages might not appear in syslog output. One common example is dynamic-linker failure message; another may be error messages produced by scripts such as archive_command. Note: This setting must be enabled when log_destination is either stderr or csvlog or logs will be lost . Certain other logging parameters require it as well.",
    "audit": "Execute the following SQL statement and confirm that the logging_collector is enabled (on): postgres=# show logging_collector; logging_collector ------------------- on (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set logging_collector = 'on'; ALTER SYSTEM Unfortunately, this setting can only be changed at the server (re)start. As root, restart the PostgreSQL service for this change to take effect: # whoami root # systemctl restart postgresql-16 # systemctl status postgresql-16|grep 'ago$' Active: active (running) since <date> ; <count> s ago Default Value: on  References: 1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "function_names": [
      "compute_instance_logging_collector_enabled",
      "compute_vm_logging_collector_enabled",
      "compute_server_logging_collector_enabled",
      "logging_collector_enabled",
      "compute_logging_collector_enabled",
      "server_logging_collector_enabled",
      "instance_logging_collector_enabled",
      "vm_logging_collector_enabled"
    ]
  },
  {
    "id": "3.1.4",
    "title": "Ensure the log file destination directory is set correctly",
    "assessment": "Automated",
    "description": "The log_directory setting specifies the destination directory for log files when log_destination is stderr or csvlog. It can be specified as relative to the cluster data directory ($PGDATA) or as an absolute path. log_directory should be set according to your organization's logging policy.",
    "rationale": "If log_directory is not set, it is interpreted as the absolute path '/' and PostgreSQL will attempt to write its logs there (and typically fail due to a lack of permissions to that directory). This parameter should be set to direct the logs into the appropriate directory location as defined by your organization's logging policy.",
    "audit": "Execute the following SQL statement to confirm that the expected logging directory is specified: postgres=# show log_directory; log_directory --------------- log (1 row) Note: This shows a path relative to the cluster's data directory. An absolute path would start with a / like the following: /var/log/pg_log",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set log_directory='/var/log/postgres'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) postgres=# show log_directory; log_directory --------------- /var/log/postgres (1 row)  Note: The use of /var/log/postgres, above, is an example. This should be set to an appropriate path as defined by your organization's logging requirements. Having said that, it is a good idea to have the logs outside of your PGDATA directory so that they are not included by things like pg_basebackup or pgBackRest. Default Value: log which is relative to the cluster's data directory (e.g. /var/lib/pgsql/ <pgmajorversion> /data/log) References: 1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "function_names": [
      "postgres_log_directory_relative_to_pgdata",
      "postgres_log_directory_absolute_path_set",
      "postgres_log_directory_secure_path",
      "postgres_log_directory_compliant_location",
      "postgres_log_directory_custom_policy",
      "postgres_log_directory_valid_path",
      "postgres_log_directory_configured_correctly"
    ]
  },
  {
    "id": "3.1.5",
    "title": "Ensure the filename pattern for log files is set correctly",
    "assessment": "Automated",
    "description": "The log_filename setting specifies the filename pattern for log files. The value for log_filename should match your organization's logging policy. The value is treated as a strftime pattern, so %-escapes can be used to specify time- varying file names. The supported %-escapes are similar to those listed in the Open Group's strftime specification. If you specify a file name without escapes, you should plan to use a log rotation utility to avoid eventually filling the partition that contains log_directory. If there are any time-zone-dependent %-escapes, the computation is done in the zone specified by log_timezone. Also, the system's strftime is not used directly, so platform-specific (nonstandard) extensions do not work. If CSV-format output is enabled in log_destination, .csv will be appended to the log filename. (If log_filename ends in .log, the suffix is replaced instead.)",
    "rationale": "If log_filename is not set, then the value of log_directory is appended to an empty string and PostgreSQL will fail to start as it will try to write to a directory instead of a file.",
    "audit": "Execute the following SQL statement to confirm that the desired pattern is set: postgres=# show log_filename; log_filename ------------------- postgresql-%a.log (1 row) Note: This example shows the use of the strftime %a escape. This creates seven log files, one for each day of the week (e.g. postgresql-Mon.log, postgresql-Tue.log, et al)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set log_filename='postgresql-%Y%m%d.log'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t  (1 row) postgres=# show log_filename; log_filename ------------------- postgresql-%Y%m%d.log (1 row) Note: In this example, a new log file will be created for each day (e.g. postgresql- 20200804.log) Default Value: The default is postgresql-%a.log, which creates a new log file for each day of the week (e.g. postgresql-Mon.log, postgresql-Tue.log). References: 1. https://man7.org/linux/man-pages/man3/strftime.3.html 2. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://man7.org/linux/man-pages/man3/strftime.3.html 2. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "function_names": [
      "logging_log_filename_pattern_valid",
      "logging_log_filename_strftime_compliant",
      "logging_log_filename_timezone_aware",
      "logging_log_filename_csv_suffix_handled",
      "logging_log_filename_rotation_required",
      "logging_log_filename_partition_safe",
      "logging_log_filename_standard_escapes_only"
    ]
  },
  {
    "id": "3.1.6",
    "title": "Ensure the log file permissions are set correctly",
    "assessment": "Automated",
    "description": "The log_file_mode setting determines the file permissions for log files when logging_collector is enabled. The parameter value is expected to be a numeric mode specification in the form accepted by the chmod and umask system calls. (To use the customary octal format, the number must start with a 0 (zero).) The permissions should be set to allow only the necessary access to authorized personnel. In most cases, the best setting is 0600, so that only the server owner can read or write the log files. The other commonly useful setting is 0640, allowing members of the owner's group to read the files, although to make use of that, you will need to either alter the log_directory setting to store the log files outside the cluster data directory or use PGSETUP_INITDB_OPTIONS=\"-k -g\" when initializing the cluster.",
    "rationale": "Log files often contain sensitive data. Allowing unnecessary access to log files may inadvertently expose sensitive data to unauthorized personnel.",
    "audit": "Execute the following SQL statement to verify that the setting is consistent with organizational logging policy: postgres=# show log_file_mode; log_file_mode --------------- 0600 (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting (with the example assuming the desired value of 0600): postgres=# alter system set log_file_mode = '0600'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) postgres=# show log_file_mode; log_file_mode  --------------- 0600 (1 row) Default Value: 0600 References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_log_file_permissions_correct",
      "postgres_log_file_mode_secure",
      "postgres_log_file_mode_no_group_access",
      "postgres_log_file_mode_no_world_access",
      "postgres_log_file_mode_0600",
      "postgres_log_file_mode_0640",
      "postgres_log_file_mode_restricted",
      "postgres_log_file_permissions_authorized_only"
    ]
  },
  {
    "id": "3.1.7",
    "title": "Ensure 'log_truncate_on_rotation' is enabled",
    "assessment": "Automated",
    "description": "Enabling the log_truncate_on_rotation setting when logging_collector is enabled causes PostgreSQL to truncate (overwrite) existing log files with the same name during log rotation instead of appending to them. For example, using this setting in combination with a log_filename setting value like postgresql-%H.log would result in generating 24 hourly log files and then cyclically overwriting them: postgresql-00.log postgresql-01.log [...] postgresql-23.log Note: Truncation will occur only when a new file is being opened due to time-based rotation, not during server startup or size-based rotation (see later in this benchmark for size-based rotation details).",
    "rationale": "If this setting is disabled, pre-existing log files will be appended to if log_filename is configured in such a way that static or recurring names are generated. Enabling or disabling the truncation should only be decided when also considering the value of log_filename and log_rotation_age/log_rotation_size. Some examples to illustrate the interaction between these settings: # truncation is moot, as each rotation gets a unique filename (postgresql- 20180605.log) log_truncate_on_rotation = on log_filename = 'postgresql-%Y%m%d.log' log_rotation_age = '1d' log_rotation_size = 0 # truncation every hour, losing log data every hour until the date changes log_truncate_on_rotation = on log_filename = 'postgresql-%Y%m%d.log' log_rotation_age = '1h' log_rotation_size = 0 # no truncation if the date changed before generating 100M of log data, truncation otherwise log_truncate_on_rotation = on log_filename = 'postgresql-%Y%m%d.log' log_rotation_age = '0' log_rotation_size = '100M'",
    "audit": "Execute the following SQL statement to verify how log_truncate_on_rotation is set:  postgres=# show log_truncate_on_rotation; log_truncate_on_rotation -------------------------- on (1 row) If it is not set to on, this is a fail (depending on your organization's logging policy).",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set log_truncate_on_rotation = 'on'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) postgres=# show log_truncate_on_rotation; log_truncate_on_rotation -------------------------- on (1 row) Default Value: on References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html Additional Information: Be sure to consider your organization's logging retention policies and the use of any external log consumption tools before deciding if truncation should be enabled or disabled.",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html Additional Information: Be sure to consider your organization's logging retention policies and the use of any external log consumption tools before deciding if truncation should be enabled or disabled.",
    "function_names": [
      "postgresql_logging_truncate_on_rotation_enabled",
      "postgresql_logging_collector_truncate_enabled",
      "postgresql_log_rotation_truncate_enabled",
      "postgresql_logging_truncate_on_rotation_active",
      "postgresql_logging_truncate_on_rotation_configured"
    ]
  },
  {
    "id": "3.1.8",
    "title": "Ensure the maximum log file lifetime is set correctly",
    "assessment": "Automated",
    "description": "When logging_collector is enabled, the log_rotation_age parameter determines the maximum lifetime of an individual log file (depending on the value of log_filename). After this many minutes have elapsed, a new log file will be created via automatic log file rotation. Current best practices advise log rotation at least daily, but your organization's logging policy should dictate your rotation schedule.",
    "rationale": "Log rotation is a standard best practice for log management.",
    "audit": "Execute the following SQL statement to verify the log rotation age is set to an acceptable value: postgres=# show log_rotation_age; log_rotation_age ------------------ 1d",
    "remediation": "Execute the following SQL statement(s) to remediate this setting (in this example, setting it to one hour): postgres=# alter system set log_rotation_age='1h'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: 1d (one day) References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "logging_collector_log_rotation_age_daily",
      "logging_collector_log_rotation_age_within_policy",
      "logging_collector_log_rotation_age_less_than_1440m",
      "logging_collector_log_rotation_age_compliant",
      "logging_collector_log_rotation_age_configured"
    ]
  },
  {
    "id": "3.1.9",
    "title": "Ensure the maximum log file size is set correctly",
    "assessment": "Automated",
    "description": "The log_rotation_size setting determines the maximum size of an individual log file. Once the maximum size is reached, automatic log file rotation will occur.",
    "rationale": "If this is set to zero, the size-triggered creation of new log files is disabled. This will prevent automatic log file rotation when files become too large, which could put log data at increased risk of loss (unless age-based rotation is configured).",
    "audit": "Execute the following SQL statement to verify that log_rotation_size is set in compliance with the organization's logging policy: postgres=# show log_rotation_size; log_rotation_size ------------------- 0 (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting (in this example, setting it to 1GB): postgres=# alter system set log_rotation_size = '1GB'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: 0 References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "cloudtrail_trail_log_rotation_size_set",
      "cloudtrail_trail_log_file_size_limited",
      "cloudtrail_trail_max_log_size_configured",
      "cloudtrail_trail_rotation_size_correct",
      "cloudtrail_trail_log_size_threshold_set"
    ]
  },
  {
    "id": "3.1.10",
    "title": "Ensure the correct syslog facility is selected",
    "assessment": "Manual",
    "description": "The syslog_facility setting specifies the syslog \"facility\" to be used when logging to syslog is enabled. You can choose from any of the 'local' facilities: • LOCAL0 • LOCAL1 • LOCAL2 • LOCAL3 • LOCAL4 • LOCAL5 • LOCAL6 • LOCAL7 Your organization's logging policy should dictate which facility to use based on the syslog daemon in use.",
    "rationale": "If not set to the appropriate facility, the PostgreSQL log messages may be intermingled with other applications' log messages, incorrectly routed, or potentially dropped (depending on your syslog configuration).",
    "audit": "Execute the following SQL statement and verify that the correct facility is selected: postgres=# show syslog_facility; syslog_facility ----------------- local0 (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting (in this example, setting it to the LOCAL1 facility): postgres=# alter system set syslog_facility = 'LOCAL1'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row)  Default Value: LOCAL0 References: 1. https://tools.ietf.org/html/rfc3164#section-4.1.1 2. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://tools.ietf.org/html/rfc3164#section-4.1.1 2. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "syslog_facility_correctly_configured",
      "syslog_facility_local_selected",
      "syslog_facility_valid_range",
      "syslog_facility_org_policy_compliant"
    ]
  },
  {
    "id": "3.1.11",
    "title": "Ensure syslog messages are not suppressed",
    "assessment": "Automated",
    "description": "When logging to Syslog and syslog_sequence_numbers is on, then each message will be prefixed by an increasing sequence number (such as [2]).",
    "rationale": "Many modern Syslog implementations perform a log optimization and suppress repeated log entries while emitting “--- last message repeated N times ---”. In more modern Syslog implementations, repeated message suppression can be configured (for example, $RepeatedMsgReduction in rsyslog). Impact: If disabled, messages sent to Syslog could be suppressed and not logged. While a message is emitted stating that a given message was repeated and suppressed, the timestamp associated with these suppressed messages is lost, potentially damaging the recreation of an incident timeline.",
    "audit": "Execute the following SQL statement and confirm that the syslog_sequence_numbers is enabled (on): postgres=# show syslog_sequence_numbers; syslog_sequence_numbers ------------------------- on (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set syslog_sequence_numbers = 'on'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: on  References: 1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "If disabled, messages sent to Syslog could be suppressed and not logged. While a message is emitted stating that a given message was repeated and suppressed, the timestamp associated with these suppressed messages is lost, potentially damaging the recreation of an incident timeline.",
    "references": "1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "function_names": [
      "logging_syslog_sequence_numbers_enabled",
      "logging_syslog_messages_unsuppressed",
      "logging_syslog_sequence_numbers_not_disabled",
      "logging_syslog_sequence_numbers_active",
      "logging_syslog_sequence_numbers_required"
    ]
  },
  {
    "id": "3.1.12",
    "title": "Ensure syslog messages are not lost due to size",
    "assessment": "Automated",
    "description": "PostgreSQL log messages can exceed 1024 bytes, which is a typical size limit for traditional Syslog implementations. When syslog_split_messages is off, PostgreSQL server log messages are delivered to the Syslog service as is, and it is up to the Syslog service to cope with the potentially bulky messages. When syslog_split_messages is on, messages are split by lines, and long lines are split so that they will fit into 1024 bytes. If syslog is ultimately logging to a text file, then the effect will be the same either way, and it is best to leave the setting on, since most syslog implementations either cannot handle large messages or would need to be specially configured to handle them. But if syslog is ultimately writing into some other medium, it might be necessary or more useful to keep messages logically together.",
    "rationale": "Impact: Depending on the Syslog server in use, log messages exceeding 1024 bytes may be lost or, potentially, cause the Syslog server processes to abort.",
    "audit": "Execute the following SQL statement to confirm that long log messages are split when logging to Syslog: postgres=# show syslog_split_messages; syslog_split_messages ----------------------- on (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set syslog_split_messages = 'on'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row)  Default Value: on References: 1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "Depending on the Syslog server in use, log messages exceeding 1024 bytes may be lost or, potentially, cause the Syslog server processes to abort.",
    "references": "1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "function_names": [
      "postgresql_log_syslog_split_messages_enabled",
      "postgresql_log_message_size_within_limits",
      "postgresql_syslog_message_truncation_prevented",
      "postgresql_log_syslog_split_messages_on",
      "postgresql_syslog_message_fragmentation_enabled",
      "postgresql_log_syslog_message_size_compliant",
      "postgresql_syslog_split_messages_for_large_logs",
      "postgresql_log_syslog_message_handling_optimized"
    ]
  },
  {
    "id": "3.1.13",
    "title": "Ensure the program name for PostgreSQL syslog messages is correct",
    "assessment": "Automated",
    "description": "The syslog_ident setting specifies the program name used to identify PostgreSQL messages in syslog logs. An example of a possible program name is postgres.",
    "rationale": "If this is not set correctly, it may be difficult or impossible to distinguish PostgreSQL messages from other messages in Syslog logs.",
    "audit": "Execute the following SQL statement to verify the program name is set correctly: postgres=# show syslog_ident; syslog_ident -------------- postgres (1 row)",
    "remediation": "Execute the following SQL statement(s) to remediate this setting (in this example, assuming a program name of proddb): postgres=# alter system set syslog_ident = 'proddb'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) postgres=# show syslog_ident; syslog_ident -------------- proddb (1 row) Default Value: postgres References: 1. https://tools.ietf.org/html/rfc3164#section-4.1.3  2. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://tools.ietf.org/html/rfc3164#section-4.1.3  2. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_database_syslog_ident_correct",
      "postgres_database_syslog_program_name_valid",
      "postgres_database_syslog_ident_configured",
      "postgres_database_syslog_ident_matches_program_name",
      "postgres_database_syslog_ident_compliant"
    ]
  },
  {
    "id": "3.1.14",
    "title": "Ensure the correct messages are written to the server log",
    "assessment": "Automated",
    "description": "The log_min_messages setting specifies the message levels that are written to the server log. Each level includes all the levels that follow it. The lower the level (vertically, below), the fewer messages are logged. Valid values are: • DEBUG5 <-- exceedingly chatty • DEBUG4 • DEBUG3 • DEBUG2 • DEBUG1 • INFO • NOTICE • WARNING <-- default • ERROR • LOG • FATAL • PANIC <-- practically mute WARNING is considered the best practice unless indicated otherwise by your organization's logging policy.",
    "rationale": "If this is not set to the correct value, too many or too few messages may be written to the server log.",
    "audit": "Execute the following SQL statement to confirm the setting is correct: postgres=# show log_min_messages; log_min_messages ------------------ warning (1 row) If logging is not configured to at least warning, this is a fail.",
    "remediation": "Execute the following SQL statement(s) as superuser to remediate this setting (in this example, to set it to warning): postgres=# alter system set log_min_messages = 'warning'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: WARNING References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_server_log_min_messages_warning",
      "postgres_server_log_min_messages_notice",
      "postgres_server_log_min_messages_error",
      "postgres_server_log_min_messages_log",
      "postgres_server_log_min_messages_fatal",
      "postgres_server_log_min_messages_panic",
      "postgres_server_log_min_messages_debug_disabled",
      "postgres_server_log_min_messages_info_disabled",
      "postgres_server_log_min_messages_custom_policy"
    ]
  },
  {
    "id": "3.1.15",
    "title": "Ensure the correct SQL statements generating errors are recorded",
    "assessment": "Automated",
    "description": "The log_min_error_statement setting causes all SQL statements generating errors at or above the specified severity level to be recorded in the server log. Each level includes all the levels that follow it. The lower the level (vertically, below), the fewer messages are recorded. Valid values are: • DEBUG5 <-- exceedingly chatty • DEBUG4 • DEBUG3 • DEBUG2 • DEBUG1 • INFO • NOTICE • WARNING • ERROR <-- default • LOG • FATAL • PANIC <-- practically mute ERROR is considered the best practice setting. Changes should only be made in accordance with your organization's logging policy. Note: To effectively turn off logging of failing statements, set this parameter to PANIC.",
    "rationale": "If this is not set to the correct value, too many erring or too few erring SQL statements may be written to the server log.",
    "audit": "Execute the following SQL statement to verify the setting is correct: postgres=# show log_min_error_statement; log_min_error_statement ------------------------- error (1 row) If not configured to at least error, this is a fail.",
    "remediation": "Execute the following SQL statement(s) as superuser to remediate this setting (in the example, to error): postgres=# alter system set log_min_error_statement = 'error'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: ERROR References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "rds_instance_log_min_error_statement_set",
      "rds_instance_log_min_error_statement_error_level",
      "rds_instance_log_min_error_statement_not_panic",
      "rds_instance_log_min_error_statement_compliance",
      "rds_instance_log_min_error_statement_valid_level",
      "rds_instance_log_min_error_statement_not_debug",
      "rds_instance_log_min_error_statement_not_info",
      "rds_instance_log_min_error_statement_not_notice",
      "rds_instance_log_min_error_statement_not_warning",
      "rds_instance_log_min_error_statement_not_log",
      "rds_instance_log_min_error_statement_not_fatal"
    ]
  },
  {
    "id": "3.1.16",
    "title": "Ensure 'debug_print_parse' is disabled",
    "assessment": "Automated",
    "description": "The debug_print_parse setting enables printing the resulting parse tree for each executed query. These messages are emitted at the LOG message level. Unless directed otherwise by your organization's logging policy, it is recommended this setting be disabled by setting it to off.",
    "rationale": "Enabling any of the DEBUG printing variables may cause the logging of sensitive information that would otherwise be omitted based on the configuration of the other logging settings.",
    "audit": "Execute the following SQL statement to confirm the setting is correct: postgres=# show debug_print_parse; debug_print_parse ------------------- off (1 row) If not configured to off, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set debug_print_parse='off'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: off References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_configuration_debug_print_parse_disabled",
      "postgres_setting_debug_print_parse_off",
      "database_configuration_debug_print_parse_disabled",
      "postgres_logging_debug_print_parse_disabled",
      "database_logging_debug_print_parse_off"
    ]
  },
  {
    "id": "3.1.17",
    "title": "Ensure 'debug_print_rewritten' is disabled",
    "assessment": "Automated",
    "description": "The debug_print_rewritten setting enables printing the query rewriter output for each executed query. These messages are emitted at the LOG message level. Unless directed otherwise by your organization's logging policy, it is recommended this setting be disabled by setting it to off.",
    "rationale": "Enabling any of the DEBUG printing variables may cause the logging of sensitive information that would otherwise be omitted based on the configuration of the other logging settings.",
    "audit": "Execute the following SQL statement to confirm the setting is disabled: postgres=# show debug_print_rewritten; debug_print_rewritten ----------------------- off (1 row) If not configured to off, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to disable this setting: postgres=# alter system set debug_print_rewritten = 'off'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: off References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_database_debug_print_rewritten_disabled",
      "postgres_config_debug_print_rewritten_off",
      "postgres_query_rewriter_logging_disabled",
      "postgres_setting_debug_print_rewritten_off"
    ]
  },
  {
    "id": "3.1.18",
    "title": "Ensure 'debug_print_plan' is disabled",
    "assessment": "Automated",
    "description": "The debug_print_plan setting enables printing the execution plan for each executed query. These messages are emitted at the LOG message level. Unless directed otherwise by your organization's logging policy, it is recommended this setting be disabled by setting it to off.",
    "rationale": "Enabling any of the DEBUG printing variables may cause the logging of sensitive information that would otherwise be omitted based on the configuration of the other logging settings.",
    "audit": "Execute the following SQL statement to verify the setting is disabled: postgres=# show debug_print_plan; debug_print_plan ------------------ off (1 row) If not configured to off, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to disable this setting: postgres=# alter system set debug_print_plan = 'off'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: off References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "bigquery_query_debug_print_plan_disabled",
      "bigquery_query_debug_logging_disabled",
      "bigquery_query_execution_plan_logging_disabled",
      "bigquery_query_plan_debugging_disabled",
      "bigquery_query_logging_debug_disabled"
    ]
  },
  {
    "id": "3.1.19",
    "title": "Ensure 'debug_pretty_print' is enabled",
    "assessment": "Automated",
    "description": "Enabling debug_pretty_print indents the messages produced by debug_print_parse, debug_print_rewritten, or debug_print_plan making them significantly easier to read.",
    "rationale": "If this setting is disabled, the \"compact\" format is used instead, significantly reducing the readability of the DEBUG statement log messages. Impact: Be advised that the aforementioned DEBUG printing options are disabled , but if your organizational logging policy requires them to be on then this option comes into play.",
    "audit": "Execute the following SQL statement to confirm the setting is enabled: postgres=# show debug_pretty_print; debug_pretty_print -------------------- on (1 row) If not configured to on, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to enable this setting: postgres=# alter system set debug_pretty_print = 'on'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: on References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "Be advised that the aforementioned DEBUG printing options are disabled , but if your organizational logging policy requires them to be on then this option comes into play.",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "cloud_cdn_logging_debug_pretty_print_enabled",
      "cloud_cdn_logging_debug_pretty_print_configured",
      "cloud_cdn_logging_debug_pretty_print_active",
      "cloud_cdn_logging_debug_pretty_print_set",
      "cloud_cdn_logging_debug_pretty_print_indented"
    ]
  },
  {
    "id": "3.1.20",
    "title": "Ensure 'log_connections' is enabled",
    "assessment": "Automated",
    "description": "Enabling the log_connections setting causes each attempted connection to the server to be logged, as well as successful completion of client authentication. This parameter cannot be changed after the session start.",
    "rationale": "PostgreSQL does not maintain an internal record of attempted connections to the database for later auditing. It is only by enabling the logging of these attempts that one can determine if unexpected attempts are being made. Note that enabling this without also enabling log_disconnections provides little value. Generally, you would enable/disable the pair together.",
    "audit": "Execute the following SQL statement to verify the setting is enabled: postgres=# show log_connections; log_connections ----------------- on (1 row) If not configured to on, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to enable this setting: postgres=# alter system set log_connections = 'on'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Then, in a new connection to the database, verify the change: postgres=# show log_connections; log_connections ----------------- on (1 row) Note that you cannot verify this change in the same connection in which it was changed; a new connection is needed.  Default Value: off References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_database_log_connections_enabled",
      "postgres_instance_log_connections_enabled",
      "postgres_server_log_connections_enabled",
      "rds_postgres_log_connections_enabled",
      "aurora_postgres_log_connections_enabled",
      "cloudsql_postgres_log_connections_enabled",
      "postgres_cluster_log_connections_enabled"
    ]
  },
  {
    "id": "3.1.21",
    "title": "Ensure 'log_disconnections' is enabled",
    "assessment": "Automated",
    "description": "Enabling the log_disconnections setting logs the end of each session, including session duration. This parameter cannot be changed after the session start.",
    "rationale": "PostgreSQL does not maintain the beginning or ending of a connection internally for later review. It is only by enabling the logging of these that one can examine connections for failed attempts, 'over long' duration, or other anomalies. Note that enabling this without also enabling log_connections provides little value. Generally, you would enable/disable the pair together.",
    "audit": "Execute the following SQL statement to verify the setting is enabled: postgres=# show log_disconnections; log_disconnections -------------------- on (1 row) If not configured to on, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to enable this setting: postgres=# alter system set log_disconnections = 'on'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: off References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "cloudtrail_trail_log_disconnections_enabled",
      "cloudtrail_trail_session_logging_enabled",
      "cloudtrail_trail_disconnection_logging_enabled",
      "cloudtrail_trail_session_duration_logging_enabled",
      "cloudtrail_trail_log_disconnections_active"
    ]
  },
  {
    "id": "3.1.22",
    "title": "Ensure 'log_error_verbosity' is set correctly",
    "assessment": "Automated",
    "description": "The log_error_verbosity setting specifies the verbosity (amount of detail) of logged messages. Valid values are: • TERSE • DEFAULT • VERBOSE with each containing the fields of the level above it as well as additional fields. TERSE excludes the logging of DETAIL, HINT, QUERY, and CONTEXT error information. VERBOSE output includes the SQLSTATE, error code, and the source code file name, function name, and line number that generated the error. The appropriate value should be set based on your organization's logging policy.",
    "rationale": "If this is not set to the correct value, too many details or too few details may be logged.",
    "audit": "Execute the following SQL statement to verify the setting is correct: postgres=# show log_error_verbosity; log_error_verbosity --------------------- default (1 row) If not configured to verbose, this is a fail.",
    "remediation": "pricelExecute the following SQL statement(s) as superuser to remediate this setting (in this example, to verbose): postgres=# alter system set log_error_verbosity = 'verbose'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row)  Default Value: DEFAULT References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_database_log_error_verbosity_configured",
      "postgres_database_log_error_verbosity_not_default",
      "postgres_database_log_error_verbosity_not_verbose",
      "postgres_database_log_error_verbosity_not_terse",
      "postgres_database_log_error_verbosity_minimum_terse",
      "postgres_database_log_error_verbosity_maximum_verbose",
      "postgres_database_log_error_verbosity_custom_set",
      "postgres_database_log_error_verbosity_secure_baseline"
    ]
  },
  {
    "id": "3.1.23",
    "title": "Ensure 'log_hostname' is set correctly",
    "assessment": "Automated",
    "description": "Enabling the log_hostname setting causes the hostname of the connecting host to be logged in addition to the host's IP address for connection log messages. Disabling the setting causes only the connecting host's IP address to be logged, and not the hostname. Unless your organization's logging policy requires hostname logging, it is best to disable this setting so as not to incur the overhead of DNS resolution for each statement that is logged.",
    "rationale": "Depending on your hostname resolution setup, enabling this setting might impose a non-negligible performance penalty. Additionally, the IP addresses that are logged can be resolved to their DNS names when reviewing the logs (unless dynamic hostnames are being used as part of your DHCP setup).",
    "audit": "Execute the following SQL statement to verify the setting is correct: postgres=# show log_hostname; log_hostname -------------- off (1 row) If not configured to off, this is a fail.",
    "remediation": "Execute the following SQL statement(s) to remediate this setting (in this example, to off): postgres=# alter system set log_hostname='off'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: off  References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_database_log_hostname_disabled",
      "postgres_instance_log_hostname_disabled",
      "postgres_server_log_hostname_disabled",
      "postgres_connection_log_hostname_disabled",
      "postgres_audit_log_hostname_disabled",
      "postgres_security_log_hostname_disabled",
      "postgres_config_log_hostname_disabled",
      "postgres_logging_log_hostname_disabled"
    ]
  },
  {
    "id": "3.1.24",
    "title": "Ensure 'log_line_prefix' is set correctly",
    "assessment": "Automated",
    "description": "The log_line_prefix setting specifies a printf-style string that is prefixed to each log line. If blank, no prefix is used. You should configure this as recommended by the pgBadger development team unless directed otherwise by your organization's logging policy. % characters begin \"escape sequences\" that are replaced with status information as outlined below. Unrecognized escapes are ignored. Other characters are copied straight to the logline. Some escapes are only recognized by session processes and will be treated as empty by background processes such as the main server process. Status information may be aligned either left or right by specifying a numeric literal after the % and before the option. A negative value will cause the status information to be padded on the right with spaces to give it a minimum width, whereas a positive value will pad on the left. Padding can be useful to aid human readability in log files. Any of the following escape sequences can be used: %a = application name %u = user name %d = database name %r = remote host and port %h = remote host %b = backend type %p = process ID %P = process ID of parallel group leader %t = timestamp without milliseconds %m = timestamp with milliseconds %n = timestamp with milliseconds (as a Unix epoch) %Q = query ID (0 if none or not computed) %i = command tag %e = SQL state %c = session ID %l = session line number %s = session start timestamp %v = virtual transaction ID %x = transaction ID (0 if none) %q = stop here in non-session processes %% = '%'",
    "rationale": "Properly setting log_line_prefix allows for adding additional information to each log entry (such as the user, or the database). Said information may then be of use in auditing or security reviews.",
    "audit": "Execute the following SQL statement to verify the setting is correct: postgres=# show log_line_prefix; log_line_prefix ----------------- < %m > (1 row) If the prefix does not at a minimum include %m [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h (for non-Syslog logging), this is a fail. For Syslog logging, the prefix should include user=%u,db=%d,app=%a,client=%h .",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set log_line_prefix = '%m [%p]: [%l-1] db=%d,user=%u,app=%a,client=%h '; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: %m [%p] References: 1. https://pgbadger.darold.net/ 2. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://pgbadger.darold.net/ 2. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_log_line_prefix_configured",
      "postgres_log_line_prefix_contains_escapes",
      "postgres_log_line_prefix_contains_timestamp",
      "postgres_log_line_prefix_contains_user_info",
      "postgres_log_line_prefix_contains_process_id",
      "postgres_log_line_prefix_contains_session_id",
      "postgres_log_line_prefix_contains_query_id",
      "postgres_log_line_prefix_contains_remote_host",
      "postgres_log_line_prefix_contains_database_name",
      "postgres_log_line_prefix_contains_application_name",
      "postgres_log_line_prefix_contains_command_tag",
      "postgres_log_line_prefix_contains_sql_state",
      "postgres_log_line_prefix_contains_transaction_id",
      "postgres_log_line_prefix_contains_virtual_transaction_id",
      "postgres_log_line_prefix_contains_session_line_number",
      "postgres_log_line_prefix_contains_session_start_timestamp",
      "postgres_log_line_prefix_contains_backend_type",
      "postgres_log_line_prefix_contains_parallel_group_leader",
      "postgres_log_line_prefix_contains_unix_epoch_timestamp",
      "postgres_log_line_prefix_contains_milliseconds_timestamp",
      "postgres_log_line_prefix_contains_non_session_stop",
      "postgres_log_line_prefix_contains_percent_escape",
      "postgres_log_line_prefix_contains_minimum_padding",
      "postgres_log_line_prefix_contains_left_padding",
      "postgres_log_line_prefix_contains_right_padding"
    ]
  },
  {
    "id": "3.1.25",
    "title": "Ensure 'log_statement' is set correctly",
    "assessment": "Automated",
    "description": "The log_statement setting specifies the types of SQL statements that are logged. Valid values are: • none (off) • ddl • mod • all (all statements) It is recommended this be set to ddl unless otherwise directed by your organization's logging policy. ddl logs all data definition statements: • CREATE • ALTER • DROP mod logs all ddl statements, plus data-modifying statements: • INSERT • UPDATE • DELETE • TRUNCATE • COPY FROM (PREPARE, EXECUTE, and EXPLAIN ANALYZE statements are also logged if their contained command is of an appropriate type.) For clients using extended query protocol, logging occurs when an Execute message is received, and values of the Bind parameters are included (with any embedded single- quote marks doubled).",
    "rationale": "Setting log_statement to align with your organization's security and logging policies facilitates later auditing and review of database activities.",
    "audit": "Execute the following SQL statement to verify the setting is correct:  postgres=# show log_statement; log_statement --------------- none (1 row) If log_statement is set to none then this is a fail.",
    "remediation": "Execute the following SQL statement(s) as superuser to remediate this setting: postgres=# alter system set log_statement='ddl'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: none References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html",
    "function_names": [
      "postgres_database_log_statement_ddl_enabled",
      "postgres_database_log_statement_none_disabled",
      "postgres_database_log_statement_mod_restricted",
      "postgres_database_log_statement_all_restricted",
      "postgres_database_log_statement_secure_config",
      "postgres_database_log_statement_policy_compliant"
    ]
  },
  {
    "id": "3.1.26",
    "title": "Ensure 'log_timezone' is set correctly",
    "assessment": "Automated",
    "description": "The log_timezone setting specifies the time zone to use in timestamps within log messages. This value is cluster-wide, so that all sessions will report timestamps consistently. Unless directed otherwise by your organization's logging policy, set this to either GMT or UTC.",
    "rationale": "Log entry timestamps should be configured for an appropriate time zone as defined by your organization's logging policy to ensure a lack of confusion around when a logged event occurred. Note that this setting affects only the timestamps present in the logs. It does not affect the time zone in use by the database itself (for example, select now()), nor does it affect the host's time zone.",
    "audit": "Execute the following SQL statement: postgres=# show log_timezone; log_timezone -------------- US/Eastern (1 row) If log_timezone is not set to GMT, UTC, or as defined by your organization's logging policy this is a fail.",
    "remediation": "Execute the following SQL statement(s) to remediate this setting: postgres=# alter system set log_timezone = 'GMT'; ALTER SYSTEM postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) Default Value: By default, the PGDG packages will set this to match the server's timezone in the Operating System.  References: 1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html 2. https://en.wikipedia.org/wiki/Time_zone",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-logging.html 2. https://en.wikipedia.org/wiki/Time_zone",
    "function_names": [
      "postgres_cluster_log_timezone_utc",
      "postgres_cluster_log_timezone_gmt",
      "postgres_cluster_log_timezone_standardized"
    ]
  },
  {
    "id": "3.2",
    "title": "Ensure the PostgreSQL Audit Extension (pgAudit) is enabled",
    "assessment": "Automated",
    "description": "The PostgreSQL Audit Extension (pgAudit) provides detailed session and/or object audit logging via the standard PostgreSQL logging facility. The goal of pgAudit is to provide PostgreSQL users with the capability to produce audit logs often required to comply with government, financial, or ISO certifications.",
    "rationale": "Basic statement logging can be provided by the standard logging facility with log_statement = all. This is acceptable for monitoring and other uses but does not provide the level of detail generally required for an audit. It is not enough to have a list of all the operations performed against the database, it must also be possible to find particular statements that are of interest to an auditor. The standard logging facility shows what the user requested, while pgAudit focuses on the details of what happened while the database was satisfying the request. When logging SELECT and DML statements, pgAudit can be configured to log a separate entry for each relation referenced in a statement. No parsing is required to find all statements that touch a particular table. In fact, the goal is that the statement text is provided primarily for deep forensics and should not be required for an audit. Impact: Depending on settings, it is possible for pgAudit to generate an enormous volume of logging . Be careful to determine exactly what needs to be audit logged in your environment to avoid logging too much.",
    "audit": "First, as the database administrator (shown here as \"postgres\"), verify pgAudit is enabled by running the following commands: postgres=# show shared_preload_libraries; shared_preload_libraries -------------------------- pgaudit (1 row) If the output does not contain \"pgaudit\", this is a fail. Next, verify that desired auditing components are enabled:  postgres=# show pgaudit.log; ERROR:  unrecognized configuration parameter \"pgaudit.log\" If the output does not contain the desired auditing components, this is a fail. The list below summarizes pgAudit.log components: • READ: SELECT and COPY when the source is a relation or a query. • WRITE: INSERT, UPDATE, DELETE, TRUNCATE, and COPY when the destination is a relation. • FUNCTION: Function calls and DO blocks. • ROLE: Statements related to roles and privileges: GRANT, REVOKE, CREATE/ALTER/DROP ROLE. • DDL: All DDL that is not included in the ROLE class. • MISC: Miscellaneous commands, e.g. DISCARD, FETCH, CHECKPOINT, VACUUM.",
    "remediation": "To install and enable pgAudit, simply install the appropriate rpm from the PGDG repo: # whoami root # dnf -y install pgaudit_16 [snip] Installed: pgaudit_16-16.1-1PGDG.rhel9.x86_64 Complete! pgAudit is now installed and ready to be configured. Next, we need to alter the postgresql.conf configuration file to: • enable pgAudit as an extension in the shared_preload_libraries parameter • indicate which classes of statements we want to log via the pgaudit.log parameter and, finally, restart the PostgreSQL service: $ vi ${PGDATA}/postgresql.conf Find the shared_preload_libraries entry, and add 'pgaudit' to it (preserving any existing entries): shared_preload_libraries = 'pgaudit' OR shared_preload_libraries = 'pgaudit,somethingelse' Now, add a new pgaudit-specific entry: # for this example we are logging the ddl and write operations pgaudit.log='ddl,write' Restart the PostgreSQL server for changes to take affect:  # whoami root # systemctl restart postgresql-16 # systemctl status postgresql-16|grep 'ago$' Active: active (running) since [date] 10s ago References: 1. https://www.pgaudit.org/ Additional Information: pgAudit versions relate to PostgreSQL major versions; ensure you install the pgAudit package that matches your PostgreSQL version.",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "Depending on settings, it is possible for pgAudit to generate an enormous volume of logging . Be careful to determine exactly what needs to be audit logged in your environment to avoid logging too much.",
    "references": "1. https://www.pgaudit.org/ Additional Information: pgAudit versions relate to PostgreSQL major versions; ensure you install the pgAudit package that matches your PostgreSQL version.",
    "function_names": [
      "postgres_database_pgaudit_enabled",
      "postgres_database_audit_logging_enabled",
      "postgres_extension_pgaudit_installed",
      "postgres_extension_audit_logging_configured",
      "postgres_database_session_audit_enabled",
      "postgres_database_object_audit_enabled",
      "postgres_extension_compliance_logging_enabled",
      "postgres_database_audit_logs_generated"
    ]
  },
  {
    "id": "4.1",
    "title": "Ensure Interactive Login is Disabled",
    "assessment": "Manual",
    "description": "When created, the PostgreSQL user may have interactive access to the operating system, which means that the PostgreSQL user could login to the host as any other user would.",
    "rationale": "Preventing the PostgreSQL user from logging in interactively may reduce the impact of a compromised PostgreSQL account. There is also more accountability, as accessing the operating system where the PostgreSQL server lies will require the user's own account and the apprpriate sudo configuration. Interactive access by the PostgreSQL user is unnecessary and should be disabled. Impact: This setting will prevent the PostgreSQL administrator from interactively logging into the operating system using the PostgreSQL user. Instead, the administrator will need to log in using one's own account and then sudo to the PostgreSQL administrator account.",
    "audit": "Execute the following terminal command as low-privileged user to assess this recommendation: sudo grep postgres /etc/shadow | cut -d: -f1-2 If this output is not postgres:!<something> then this is a failure.",
    "remediation": "Execute the following command: sudo passwd -l postgres",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "This setting will prevent the PostgreSQL administrator from interactively logging into the operating system using the PostgreSQL user. Instead, the administrator will need to log in using one's own account and then sudo to the PostgreSQL administrator account.",
    "function_names": [
      "postgres_user_interactive_login_disabled",
      "postgres_user_no_interactive_access",
      "postgres_user_shell_access_disabled",
      "postgres_user_os_login_disabled",
      "postgres_user_non_interactive_only"
    ]
  },
  {
    "id": "4.2",
    "title": "Ensure sudo is configured correctly",
    "assessment": "Manual",
    "description": "It is common to have more than one authorized individual administering the PostgreSQL service at the Operating System level. It is also quite common to permit login privileges to individuals on a PostgreSQL host who otherwise are not authorized to access the server's data cluster and files. Administering the PostgreSQL data cluster, as opposed to its data, is to be accomplished via a localhost login of a regular UNIX user account. Access to the postgres superuser account is restricted in such a manner as to interdict unauthorized access. sudo satisfies the requirements by escalating ordinary user account privileges as the PostgreSQL RDBMS superuser.",
    "rationale": "Without sudo, there would be no capabilities to strictly control access to the superuser account nor to securely and authoritatively audit its use.",
    "audit": "Log in as an Operating System user authorized to escalate privileges and test the sudo invocation by executing the following: # whoami user1 # groups user1 # sudo -iu postgres [sudo] password for user1: user1 is not in the sudoers file. This incident will be reported. As shown above, user1 has not been added to the /etc/sudoers file or made a member of any group listed in the /etc/sudoers file. Whereas: # whoami user2 # groups user2 dba # sudo -iu postgres [sudo] password for user2: # whoami postgres This shows that the user2 user is configured properly for sudo access by being a member of the dba group.",
    "remediation": "As superuser root, execute the following commands:  # echo '%dba ALL=(postgres) PASSWD: ALL' > /etc/sudoers.d/postgres # chmod 600 /etc/sudoers.d/postgres This grants any Operating System user that is a member of the dba group the ability to use sudo -iu postgres to become the postgres user. Ensure that all Operating System user's that need such access are members of the group. References: 1. https://www.sudo.ws/man/1.8.15/sudo.man.html 2. https://www.sudo.ws/man/1.8.17/visudo.man.html",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://www.sudo.ws/man/1.8.15/sudo.man.html 2. https://www.sudo.ws/man/1.8.17/visudo.man.html",
    "function_names": [
      "sudo_config_no_password_auth",
      "sudo_config_require_tty",
      "sudo_config_secure_path",
      "sudo_config_logfile_enabled",
      "sudo_config_no_wildcard_commands",
      "sudo_config_restrict_postgres_superuser",
      "sudo_config_localhost_only_access",
      "sudo_config_no_unauthorized_users",
      "sudo_config_min_uid_restriction",
      "sudo_config_no_duplicate_entries"
    ]
  },
  {
    "id": "4.3",
    "title": "Ensure excessive administrative privileges are revoked",
    "assessment": "Manual",
    "description": "With respect to PostgreSQL administrative SQL commands, only superusers should have elevated privileges. PostgreSQL regular, or application, users should not possess the ability to create roles, create new databases, manage replication, or perform any other action deemed privileged. Typically, regular users should only be granted the minimal set of privileges commensurate with managing the application: • DDL (create table, create view, create index, etc.) • DML (select, insert, update, delete) Further, it has become best practice to create separate roles for DDL and DML. Given an application called 'payroll', one would create the following users: • payroll_owner • payroll_user Any DDL privileges would be granted to the payroll_owner account only, while DML privileges would be given to the payroll_user account only. This prevents accidental creation/altering/dropping of database objects by application code that runs as the payroll_user account.",
    "rationale": "By not restricting global administrative commands to superusers only, regular users granted excessive privileges may execute administrative commands with unintended and undesirable results.",
    "audit": "First, inspect the privileges granted to the database superuser (identified here as postgres) using the display command psql -c \"\\du postgres\" to establish a baseline for granted administrative privileges. Based on the output below, the postgres superuser can create roles, create databases, manage replication, and bypass row- level security (RLS):  # whoami postgres # psql -c \"\\du+ postgres\" List of roles Role name |                    Attributes                   | Description ----------+-------------------------------------------------+----------- postgres  | Superuser, Create role, Create DB, Replication, | | Bypass RLS                                      | Now, let's inspect the same information for a mock regular user called appuser using the display command psql -c \"\\du+ appuser\". The output confirms that regular user appuser has the same elevated privileges as system administrator user postgres. This is a fail. # whoami postgres # psql -c \"\\du+ appuser\" List of roles Role name |                    Attributes                   | Description ----------+-------------------------------------------------+----------- appuser   | Superuser, Create role, Create DB, Replication, | | Bypass RLS                                      | While this example demonstrated excessive administrative privileges granted to a single user, a comprehensive audit should be conducted to inspect all database users for excessive administrative privileges. This can be accomplished via either of the commands below. # whoami postgres # psql -c \"\\du+ *\" # psql -c \"select * from pg_user order by usename\" Note: Using \\du+ * will show all the default PostgreSQL roles (e.g. pg_monitor) as well as any 'normal' roles. This is expected, and should not be cause for alarm.",
    "remediation": "If any regular or application users have been granted excessive administrative rights, those privileges should be removed immediately via the PostgreSQL ALTER ROLE SQL command. Using the same example above, the following SQL statements revoke all unnecessary elevated administrative privileges from the regular user appuser:  # whoami postgres # psql -c \"ALTER ROLE appuser NOSUPERUSER;\" ALTER ROLE # psql -c \"ALTER ROLE appuser NOCREATEROLE;\" ALTER ROLE # psql -c \"ALTER ROLE appuser NOCREATEDB;\" ALTER ROLE # psql -c \"ALTER ROLE appuser NOREPLICATION;\" ALTER ROLE # psql -c \"ALTER ROLE appuser NOBYPASSRLS;\" ALTER ROLE # psql -c \"ALTER ROLE appuser NOINHERIT;\" ALTER ROLE Verify the appuser now passes your check by having no defined Attributes: # whoami postgres # psql -c \"\\du+ appuser\" List of roles Role name | Attributes | Description ----------+------------+----------- appuser   |            | References: 1. https://www.postgresql.org/docs/current/static/sql-revoke.html 2. https://www.postgresql.org/docs/current/static/sql-createrole.html 3. https://www.postgresql.org/docs/current/static/sql-alterrole.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/sql-revoke.html 2. https://www.postgresql.org/docs/current/static/sql-createrole.html 3. https://www.postgresql.org/docs/current/static/sql-alterrole.html",
    "function_names": [
      "postgres_user_no_admin_privileges",
      "postgres_user_minimal_privileges",
      "postgres_user_ddl_privileges_separated",
      "postgres_user_dml_privileges_separated",
      "postgres_user_no_role_creation",
      "postgres_user_no_database_creation",
      "postgres_user_no_replication_management",
      "postgres_user_privileges_restricted",
      "postgres_role_ddl_only",
      "postgres_role_dml_only"
    ]
  },
  {
    "id": "4.4",
    "title": "Lock Out Accounts if Not Currently in Use",
    "assessment": "Manual",
    "description": "If users with database accounts will not be using the database for some time, disabling the account will reduce the risk of attacks or inappropriate account usage.",
    "rationale": "Only actively used database accounts should be allowed to login to the database.",
    "audit": "Review the status of all database accounts: SELECT rolname FROM pg_catalog.pg_roles WHERE rolname !~ '^pg_' AND rolcanlogin; Inactive accounts should not be shown in the output.",
    "remediation": "To lock accounts, as a superuser, run: ALTER ROLE <account> NOLOGIN; To unlock accounts, as a superuser, runL ALTER ROLE <account> LOGIN; Default Value: Accounts created by CREATE ROLE are NOLOGIN by default. Accounts created by CREATE USER are LOGIN by default. Additional Information: It is possible to specify NOLOGIN when using both CREATE ROLE and CREATE USER: CREATE ROLE <account> NOLOGIN; CREATE USER <account> NOLOGIN;",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "function_names": [
      "database_user_account_disabled_unused",
      "database_user_account_lockout_inactive",
      "database_user_account_inactive_disabled",
      "database_user_account_unused_locked",
      "database_user_account_disable_after_inactivity"
    ]
  },
  {
    "id": "4.5",
    "title": "Ensure excessive function privileges are revoked",
    "assessment": "Automated",
    "description": "In certain situations, to provide the required functionality, PostgreSQL needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by their organization. This is known as privilege elevation. Privilege elevation must be utilized only where necessary. Execute privileges for application functions should be restricted to authorized users only.",
    "rationale": "Ideally, all application source code should be vetted to validate interactions between the application and the logic in the database, but this is usually not possible or feasible with available resources even if the source code is available. The DBA should attempt to obtain assurances from the development organization that this issue has been addressed and should document what has been discovered. The DBA should also inspect all application logic stored in the database (in the form of functions, rules, and triggers) for excessive privileges.",
    "audit": "Functions in PostgreSQL can be created with the SECURITY DEFINER option. When SECURITY DEFINER functions are executed by a user, said function is run with the privileges of the user who created it, not the user who is running it. To list all functions that have SECURITY DEFINER, run the following SQL: # whoami root # sudo -iu postgres # psql -c \"SELECT nspname, proname, proargtypes, prosecdef, rolname, proconfig FROM pg_proc p JOIN pg_namespace n ON p.pronamespace = n.oid JOIN pg_authid a ON a.oid = p.proowner WHERE proname NOT LIKE 'pgaudit%' AND (prosecdef OR NOT proconfig IS NULL);\" In the query results, a prosecdef value of 't' on a row indicates that that function uses privilege elevation. If elevation privileges are utilized which are not required or are expressly forbidden by organizational guidance, this is a fail.",
    "remediation": "Where possible, revoke SECURITY DEFINER on PostgreSQL functions. To change a SECURITY DEFINER function to SECURITY INVOKER, run the following SQL: # whoami root # sudo -iu postgres # psql -c \"ALTER FUNCTION [functionname] SECURITY INVOKER;\" If it is not possible to revoke SECURITY DEFINER, ensure the function can be executed by only the accounts that absolutely need such functionality: postgres=# SELECT proname, proacl FROM pg_proc WHERE proname = 'delete_customer'; proname     |                         proacl -----------------+-------------------------------------------------------- delete_customer | {=X/postgres,postgres=X/postgres,appreader=X/postgres} (1 row) postgres=# REVOKE EXECUTE ON FUNCTION delete_customer(integer,boolean) FROM appreader; REVOKE postgres=# SELECT proname, proacl FROM pg_proc WHERE proname = 'delete_customer'; proname     |                         proacl -----------------+-------------------------------------------------------- delete_customer | {=X/postgres,postgres=X/postgres} (1 row) Based on the output above, appreader=X/postgres no longer exists in the proacl column results returned from the query and confirms appreader is no longer granted execute privilege on the function. References: 1. https://www.postgresql.org/docs/current/static/catalog-pg-proc.html 2. https://www.postgresql.org/docs/current/static/sql-grant.html 3. https://www.postgresql.org/docs/current/static/sql-revoke.html 4. https://www.postgresql.org/docs/current/static/sql-createfunction.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/catalog-pg-proc.html 2. https://www.postgresql.org/docs/current/static/sql-grant.html 3. https://www.postgresql.org/docs/current/static/sql-revoke.html 4. https://www.postgresql.org/docs/current/static/sql-createfunction.html",
    "function_names": [
      "postgres_function_excessive_privileges_revoked",
      "postgres_function_privilege_elevation_restricted",
      "postgres_function_execute_privileges_authorized_only",
      "postgres_function_privileges_minimized",
      "postgres_function_elevated_privileges_removed",
      "postgres_function_privileges_least_access",
      "postgres_function_execute_permissions_restricted",
      "postgres_function_privileges_no_elevation"
    ]
  },
  {
    "id": "4.6",
    "title": "Ensure excessive DML privileges are revoked",
    "assessment": "Manual",
    "description": "DML (insert, update, delete) operations at the table level should be restricted to only authorized users. PostgreSQL manages table-level DML permissions via the GRANT statement.",
    "rationale": "Excessive DML grants can lead to unprivileged users changing or deleting information without proper authorization.",
    "audit": "To audit excessive DML privileges, take an inventory of all users defined in the cluster using the \\du+ * SQL command, as well as all tables defined in the database using the \\dt *.* SQL command. Furthermore, the intersection matrix of tables and user grants can be obtained by querying system catalogs pg_tables and pg_user. Note that in PostgreSQL, users can be defined cluster-wide across all databases or for a specific database, while schemas and tables are specific to a particular database. Therefore, the commands below should be executed for each defined database in the cluster. With this information, inspect database table grants and determine if any are excessive for defined database users. postgres=# -- display all users defined in the cluster postgres=# \\x Expanded display is on. postgres=# \\du+ * List of roles -[ RECORD 1 ]----------------------------------------------------------- Role name   | appuser Attributes  | Description | -[ RECORD 2 ]----------------------------------------------------------- Role name   | pg_checkpoint Attributes  | Cannot login Description | -[ RECORD 3 ]----------------------------------------------------------- Role name   | pg_create_subscription Attributes  | Cannot login Description | -[ RECORD 4 ]----------------------------------------------------------- Role name   | pg_database_owner Attributes  | Cannot login Description | -[ RECORD 5 ]----------------------------------------------------------- Role name   | pg_execute_server_program  Attributes  | Cannot login Description | -[ RECORD 6 ]----------------------------------------------------------- Role name   | pg_monitor Attributes  | Cannot login Description | -[ RECORD 7 ]----------------------------------------------------------- Role name   | pg_read_all_data Attributes  | Cannot login Description | -[ RECORD 8 ]----------------------------------------------------------- Role name   | pg_read_all_settings Attributes  | Cannot login Description | -[ RECORD 9 ]----------------------------------------------------------- Role name   | pg_read_all_stats Attributes  | Cannot login Description | -[ RECORD 10 ]---------------------------------------------------------- Role name   | pg_read_server_files Attributes  | Cannot login Description | -[ RECORD 11 ]---------------------------------------------------------- Role name   | pg_signal_backend Attributes  | Cannot login Description | -[ RECORD 12 ]---------------------------------------------------------- Role name   | pg_stat_scan_tables Attributes  | Cannot login Description | -[ RECORD 13 ]---------------------------------------------------------- Role name   | pg_use_reserved_connections Attributes  | Cannot login Description | -[ RECORD 14 ]---------------------------------------------------------- Role name   | pg_write_all_data Attributes  | Cannot login Description | -[ RECORD 15 ]---------------------------------------------------------- Role name   | pg_write_server_files Attributes  | Cannot login Description | -[ RECORD 16 ]---------------------------------------------------------- Role name   | postgres Attributes  | Superuser, Create role, Create DB, Replication, Bypass RLS Description | postgres=# \\x Expanded display is off. postgres=# \\dt+ *.* List of relations Schema       |           Name           |    Type     |  Owner   | Persistence | Access method |    Size    | Description --------------------+--------------------------+-------------+----------+---- ---------+-------------- -+------------+-------------  information_schema | sql_features             | table       | postgres | permanent   | heap | 104 kB     | information_schema | sql_implementation_info  | table       | postgres | permanent   | heap | 48 kB      | information_schema | sql_parts                | table       | postgres | permanent   | heap | 48 kB      | information_schema | sql_sizing               | table       | postgres | permanent   | heap | 48 kB      | <snip> postgres=# -- query all tables and user grants in the current database postgres=# -- the system catalogs 'information_schema' and 'pg_catalog' are excluded postgres=# select t.schemaname, t.tablename, u.usename, has_table_privilege(u.usename, t.tablename, 'select') as select, has_table_privilege(u.usename, t.tablename, 'insert') as insert, has_table_privilege(u.usename, t.tablename, 'update') as update, has_table_privilege(u.usename, t.tablename, 'delete') as delete from  pg_tables t, pg_user u where t.schemaname not in ('information_schema','pg_catalog'); schemaname | tablename | usename | select | insert | update | delete ------------+-----------+---------+--------+--------+--------+-------- (0 rows) For the example below, we illustrate using a single table customer, and two application users appwriter and appreader. The intention is for appwriter to have full select, insert, update, and delete rights and for appreader to only have select rights. We can query these privileges with the example below using the has_table_privilege function and filtering for just the table and roles in question. postgres=# select t.tablename, u.usename, has_table_privilege(u.usename, t.tablename, 'select') as select, has_table_privilege(u.usename, t.tablename, 'insert') as insert, has_table_privilege(u.usename, t.tablename, 'update') as update, has_table_privilege(u.usename, t.tablename, 'delete') as delete from   pg_tables t, pg_user u where  t.tablename = 'customer' and    u.usename in ('appwriter','appreader'); tablename |  usename  | select | insert | update | delete ----------+-----------+--------+--------+--------+-------- customer  | appwriter | t      | t      | t      | t customer  | appreader | t      | t      | t      | t (2 rows) As depicted, both users have full privileges for the customer table. This is a fail. When inspecting database-wide results for all users and all table grants, employ a comprehensive approach. Collaboration with application developers is paramount to collectively determine only those database users that require specific DML privileges and on which tables.",
    "remediation": "If a given database user has been granted excessive DML privileges for a given database table, those privileges should be revoked immediately using the REVOKE SQL command. Continuing with the example above, remove unauthorized grants for appreader user using the REVOKE statement and verify the Boolean values are now false. postgres=# REVOKE INSERT, UPDATE, DELETE ON TABLE customer FROM appreader; REVOKE postgres=# select t.tablename, u.usename, has_table_privilege(u.usename, t.tablename, 'select') as select, has_table_privilege(u.usename, t.tablename, 'insert') as insert, has_table_privilege(u.usename, t.tablename, 'update') as update, has_table_privilege(u.usename, t.tablename, 'delete') as delete from   pg_tables t, pg_user u where  t.tablename = 'customer' and    u.usename in ('appwriter','appreader'); tablename |  usename  | select | insert | update | delete ----------+-----------+--------+--------+--------+-------- customer  | appwriter | t      | t      | t      | t customer  | appreader | t      | f      | f      | f (2 rows) Note: For versions of PostgreSQL prior to version 15, CVE-2018-1058 is applicable and it is recommended that all privileges be revoked from the public schema for all users on all databases. If you have upgraded from one of these earlier releases, this CVE is not fixed for you during an upgrade. You can correct this CVE by issuing: postgres=# REVOKE CREATE ON SCHEMA public FROM PUBLIC; REVOKE Default Value: The table owner/creator has full privileges; all other users must be explicitly granted access. References: 1. https://www.postgresql.org/docs/current/static/sql-grant.html 2. https://www.postgresql.org/docs/current/static/sql-revoke.html 3. https://www.postgresql.org/docs/current/static/functions-info.html#functions-info- access-table 4. https://wiki.postgresql.org/wiki/A_Guide_to_CVE-2018- 1058:_Protect_Your_Search_Path 5. https://nvd.nist.gov/vuln/detail/CVE-2018-1058",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/sql-grant.html 2. https://www.postgresql.org/docs/current/static/sql-revoke.html 3. https://www.postgresql.org/docs/current/static/functions-info.html#functions-info- access-table 4. https://wiki.postgresql.org/wiki/A_Guide_to_CVE-2018- 1058:_Protect_Your_Search_Path 5. https://nvd.nist.gov/vuln/detail/CVE-2018-1058",
    "function_names": [
      "database_table_dml_privileges_restricted",
      "database_table_dml_privileges_revoked",
      "database_table_dml_privileges_authorized_only",
      "database_table_dml_privileges_minimized",
      "database_table_dml_privileges_no_excessive_access"
    ]
  },
  {
    "id": "4.7",
    "title": "Ensure Row Level Security (RLS) is configured correctly",
    "assessment": "Manual",
    "description": "In addition to the SQL-standard privilege system available through GRANT, tables can have row security policies that restrict, on a per-user basis, which individual rows can be returned by normal queries or inserted, updated, or deleted by data modification commands. This feature is also known as Row Level Security (RLS). By default, tables do not have any policies, so if a user has access privileges to a table according to the SQL privilege system, all rows within it are equally available for querying or updating. Row security policies can be specific to commands, to roles, or to both. A policy can be specified to apply to ALL commands, or to any combination of SELECT, INSERT, UPDATE, or DELETE. Multiple roles can be assigned to a given policy, and normal role membership and inheritance rules apply. If you use RLS and apply restrictive policies to certain users, it is important that the Bypass RLS privilege not be granted to any unauthorized users. This privilege overrides RLS-enabled tables and associated policies. Generally, only superusers and elevated users should possess this privilege.",
    "rationale": "If RLS policies and privileges are not configured correctly, users could perform actions on tables that they are not authorized to perform, such as inserting, updating, or deleting rows.",
    "audit": "The first step for an organization is to determine which, if any, database tables require RLS. This decision is a matter of business processes and is unique to each organization. To discover which, if any, database tables have RLS enabled, execute the following query. If any table(s) should have RLS policies applied, but do not appear in this query's results, then this is a fail. postgres=# SELECT oid, relname, relrowsecurity FROM pg_class WHERE relrowsecurity IS TRUE; For the purpose of this illustration, we will demonstrate the standard example from the PostgreSQL documentation using the passwd table and policy example. As of PostgreSQL 9.5, the catalog table pg_class provides column relrowsecurity to query and determine whether a relation has RLS enabled. Based on the results below we can see RLS is not enabled. Assuming this table should be RLS enabled, this is a fail.  postgres=# CREATE TABLE passwd ( user_name             text UNIQUE NOT NULL, pwhash                text, uid                   int  PRIMARY KEY, gid                   int  NOT NULL, real_name             text NOT NULL, home_phone            text, extra_info            text, home_dir              text NOT NULL, shell                 text NOT NULL ); postgres=# SELECT oid, relname, relrowsecurity FROM pg_class WHERE relname = 'passwd'; oid  | relname | relrowsecurity -------+---------+---------------- 24679 | passwd  | f (1 row) Further inspection of RLS policies is provided via the system catalog pg_policy, which records policy details including table OID, policy name, applicable commands, the roles assigned to a policy, and the USING and WITH CHECK clauses. Finally, RLS and associated policies (if implemented) may also be viewed using the standard psql display command \\d+ schema.table which lists RLS information as part of the table description. Should you implement Row Level Security and apply restrictive policies to certain users, it's imperative that you check each user's role definition via the psql display command \\du and ensure unauthorized users have not been granted Bypass RLS privilege as this would override any RLS enabled tables and associated policies. If unauthorized users do have Bypass RLS granted then resolve this using the ALTER ROLE <user> NOBYPASSRLS; command.",
    "remediation": "Again, we are using the example from the PostgreSQL documentation using the example passwd table. We will create three database roles to illustrate the workings of RLS: postgres=# CREATE USER admin; CREATE USER postgres=# CREATE USER bob; CREATE USER postgres=# CREATE USER alice; CREATE USER Now, we will insert known data into the passwd table:  postgres=# INSERT INTO passwd VALUES ('admin','xxx',0,0,'Admin','111-222-3333',null,'/root','/bin/dash'); INSERT 0 1 postgres=# INSERT INTO passwd VALUES ('bob','xxx',1,1,'Bob','123-456-7890',null,'/home/bob','/bin/zsh'); INSERT 0 1 postgres=# INSERT INTO passwd VALUES ('alice','xxx',2,1,'Alice','098-765-4321',null,'/home/alice','/bin/zsh'); INSERT 0 1 And we will enable RLS on the table: postgres=# ALTER TABLE passwd ENABLE ROW LEVEL SECURITY; ALTER TABLE postgres=# SELECT oid, relname, relrowsecurity FROM pg_class WHERE relname = 'passwd'; oid  | relname | relrowsecurity -------+---------+---------------- 24679 | passwd  | t (1 row) Now that RLS is enabled, we need to define one or more policies. Create the administrator policy and allow it access to all rows: postgres=# CREATE POLICY admin_all ON passwd TO admin USING (true) WITH CHECK (true); CREATE POLICY Create a policy for normal users to view all rows: postgres=# CREATE POLICY all_view ON passwd FOR SELECT USING (true); CREATE POLICY Create a policy for normal users that allows them to update only their own rows and to limit what values can be set for their login shell: postgres=# CREATE POLICY user_mod ON passwd FOR UPDATE USING (current_user = user_name) WITH CHECK ( current_user = user_name AND shell IN ('/bin/bash','/bin/sh','/bin/dash','/bin/zsh','/bin/tcsh') ); CREATE POLICY Grant all the normal rights on the table to the admin user: postgres=# GRANT SELECT, INSERT, UPDATE, DELETE ON passwd TO admin; GRANT Grant only select access on non-sensitive columns to everyone: postgres=# GRANT SELECT (user_name, uid, gid, real_name, home_phone, extra_info, home_dir, shell) ON passwd TO public; GRANT Grant update to only the sensitive columns:  postgres=# GRANT UPDATE (pwhash, real_name, home_phone, extra_info, shell) ON passwd TO public; GRANT Ensure that no one has been granted Bypass RLS inadvertently, by running the psql display command \\du+. If unauthorized users do have Bypass RLS granted then resolve this using the ALTER ROLE <user> NOBYPASSRLS; command. You can now verify that 'admin', 'bob', and 'alice' are properly restricted by querying the passwd table as each of these roles. postgres=# set role admin; SET postgres=# table passwd; user_name | pwhash | uid | gid | real_name |  home_phone  | extra_info | home_dir    |   shell -----------+--------+-----+-----+-----------+--------------+------------+---- ---------+----------- admin     | xxx    |   0 |   0 | Admin     | 111-222-3333 |            | /root       | /bin/dash bob       | xxx    |   1 |   1 | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh alice     | xxx    |   2 |   1 | Alice     | 098-765-4321 |            | /home/alice | /bin/zsh (3 rows) postgres=# set role alice; SET postgres=# table passwd; ERROR:  permission denied for table passwd postgres=# select user_name,real_name,home_phone,extra_info,home_dir,shell from passwd; user_name | real_name |  home_phone  | extra_info | home_dir    |   shell -----------+-----------+--------------+------------+-------------+----------- admin     | Admin     | 111-222-3333 |            | /root       | /bin/dash bob       | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh alice     | Alice     | 098-765-4321 |            | /home/alice | /bin/zsh (3 rows) postgres=# update passwd set user_name = 'joe'; ERROR:  permission denied for table passwd -- Alice is allowed to change her own real_name, but no others postgres=# update passwd set real_name = 'Alice Doe'; UPDATE 1 postgres=# update passwd set real_name = 'John Doe' where user_name = 'admin'; UPDATE 0 postgres=# select user_name,real_name,home_phone,extra_info,home_dir,shell from passwd; user_name | real_name |  home_phone  | extra_info |  home_dir   |   shell -----------+-----------+--------------+------------+-------------+----------- admin     | Admin     | 111-222-3333 |            | /root       | /bin/dash bob       | Bob       | 123-456-7890 |            | /home/bob   | /bin/zsh alice     | Alice Doe | 098-765-4321 |            | /home/alice | /bin/zsh (3 rows) postgres=# update passwd set shell = '/bin/xx'; ERROR:  new row violates WITH CHECK OPTION for \"passwd\"  postgres=# delete from passwd; ERROR:  permission denied for table passwd postgres=# insert into passwd (user_name) values ('xxx'); ERROR:  permission denied for table passwd -- Alice can change her own password; RLS silently prevents updating other rows postgres=# update passwd set pwhash = 'abc'; UPDATE 1 References: 1. https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html 2. https://www.postgresql.org/docs/current/static/sql-alterrole.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/ddl-rowsecurity.html 2. https://www.postgresql.org/docs/current/static/sql-alterrole.html",
    "function_names": [
      "postgres_table_row_security_enabled",
      "postgres_table_row_security_no_bypass_privilege",
      "postgres_table_row_security_policy_assigned",
      "postgres_table_row_security_command_specific",
      "postgres_table_row_security_role_specific",
      "postgres_table_row_security_all_commands",
      "postgres_table_row_security_select_policy",
      "postgres_table_row_security_insert_policy",
      "postgres_table_row_security_update_policy",
      "postgres_table_row_security_delete_policy",
      "postgres_table_row_security_restrictive_policy",
      "postgres_table_row_security_unauthorized_bypass_denied"
    ]
  },
  {
    "id": "4.8",
    "title": "Ensure the set_user extension is installed",
    "assessment": "Automated",
    "description": "PostgreSQL access to the superuser database role must be controlled and audited to prevent unauthorized access. Note: Prior to performing this audit you must create a roletree view. Here are the procedures to create this view: postgres=# DROP VIEW IF EXISTS roletree; CREATE OR REPLACE VIEW roletree AS WITH RECURSIVE roltree AS ( SELECT u.rolname AS rolname, u.oid AS roloid, u.rolcanlogin, u.rolsuper, '{}'::name[] AS rolparents, NULL::oid AS parent_roloid, NULL::name AS parent_rolname FROM pg_catalog.pg_authid u LEFT JOIN pg_catalog.pg_auth_members m on u.oid = m.member LEFT JOIN pg_catalog.pg_authid g on m.roleid = g.oid WHERE g.oid IS NULL UNION ALL SELECT u.rolname AS rolname, u.oid AS roloid, u.rolcanlogin, u.rolsuper, t.rolparents || g.rolname AS rolparents, g.oid AS parent_roloid, g.rolname AS parent_rolname FROM pg_catalog.pg_authid u JOIN pg_catalog.pg_auth_members m on u.oid = m.member JOIN pg_catalog.pg_authid g on m.roleid = g.oid JOIN roltree t on t.roloid = g.oid ); SELECT r.rolname, r.roloid, r.rolcanlogin, r.rolsuper, r.rolparents FROM roltree r ORDER BY 1;",
    "rationale": "Even when reducing and limiting the access to the superuser role as described earlier in this benchmark, it is still difficult to determine who accessed the superuser role and what actions were taken using that role. As such, it is ideal to prevent anyone from logging in as the superuser and forcing them to escalate their role. This model is used at the OS level by the use of sudo and should be emulated in the database. The set_user extension allows for this setup. Impact: Much like the venerable sudo does for the OS, set_user manages superuser access for PostgreSQL. To complete configuration of set_user is documented at the extension's website and should be reviewed to ensure the logging entries that your organization cares about are properly configured. Note that some external tools assume they can connect as the postgres user by default and this is no longer true when set_user is deployed. You may find some tools need different options, reconfigured, or even abandoned to compensate for this.",
    "audit": "Check if the extension is available by querying the pg_available_extensions table: postgres=# select * from pg_available_extensions where name = 'set_user'; name | default_version | installed_version | comment ------+-----------------+-------------------+--------- (0 rows) If the extension is not listed this is a fail. Identify roles that are superusers and can still login: postgres=# SELECT rolname FROM pg_authid WHERE rolsuper and rolcanlogin; rolname --------- postgres (1 rows) Identify any unprivileged roles that can log in directly that are granted a superuser role even if it is multiple layers removed: Note: If you have not done so already, follow the procedures in the description to create a roletree view.  -- Verify there are no unexpected unprivileged roles that can login directly SELECT r.rolname, r.roloid, r.rolcanlogin, r.rolsuper, r.rolparents FROM roletree r ORDER BY 1; -- Verify there are no roles granted a superuser role even if it is multiple layers -- removed SELECT ro.rolname, ro.roloid, ro.rolcanlogin, ro.rolsuper, ro.rolparents FROM roletree ro WHERE (ro.rolcanlogin AND ro.rolsuper) OR ( ro.rolcanlogin AND EXISTS ( SELECT TRUE FROM roletree ri WHERE ri.rolname = ANY (ro.rolparents) AND ri.rolsuper ) ); rolname | roloid | rolcanlogin | rolsuper | rolparents ----------+--------+-------------+----------+------------ postgres |     10 | t           | t        | {} (1 row) A lack of results is a pass.",
    "remediation": "We will install the set_user extension: # whoami root # dnf -y install set_user_16 [snip] Installed: set_user_16-4.1.0-1.rhel9.1.x86_64 Complete! Now that set_user is installed, we need to tell PostgreSQL to load its library: # whoami root # vi ~postgres/16/data/postgresql.conf  Find the shared_preload_libraries entry, and add 'set_user' to it (preserving any existing entries): shared_preload_libraries = 'set_user' OR shared_preload_libraries = 'set_user,pgaudit,somethingelse' Restart the PostgreSQL server for changes to take effect: # systemctl restart postgresql-16 # systemctl status postgresql-16|grep 'ago$' Active: active (running) since [timestamp]; 1s ago And now, we can install the extension with SQL: # su - postgres # psql postgres=# select * from pg_available_extensions where name = 'set_user'; name   | default_version | installed_version |                  comment ---------+-----------------+-------------------+----------------------------- set_user | 4.1.0           |                   | similar to SET ROLE but with |                 |                   | added logging (1 row) postgres=# create extension set_user; CREATE EXTENSION postgres=# select * from pg_available_extensions where name = 'set_user'; name   | default_version | installed_version |                  comment ---------+-----------------+-------------------+----------------------------- set_user | 4.1.0           | 4.1.0             | similar to SET ROLE but with |                 |                   | added logging (1 row) Now, we use GRANT to configure each DBA role to allow it to use the set_user functions. In the example below, we will configure my db user doug. (You would do this for each DBA's normal user role.) postgres=# grant execute on function set_user(text) to doug; GRANT postgres=# grant execute on function set_user_u(text) to doug; GRANT Connect to PostgreSQL as yourself and verify it works as expected:  # whoami psql # psql -U doug -d postgres -h 127.0.0.1 postgres=> select set_user('postgres'); ERROR:  switching to superuser not allowed HINT:  Use 'set_user_u' to escalate. postgres=> select set_user_u('postgres'); set_user_u ------------ OK (1 row) postgres=# select current_user, session_user; current_user | session_user --------------+-------------- postgres     | doug (1 row) postgres=# select reset_user(); reset_user ------------ OK (1 row) postgres=> select current_user, session_user; current_user | session_user --------------+-------------- doug         | doug (1 row) Once all DBA's normal user accounts have been GRANTed permission, revoke the ability to login as the postgres (superuser) user: postgres=# ALTER USER postgres NOLOGIN; ALTER ROLE Which results in: $ psql psql: FATAL:  role \"postgres\" is not permitted to log in $ psql -U doug -d postgres -h 127.0.0.1 psql (16.0) Revoke SUPERUSER and/or LOGIN from any other roles that were previously identified: postgres=# ALTER USER usera NOSUPERUSER; -- revoke superuser ALTER ROLE postgres=# ALTER USER usera NOLOGIN; -- revoke login ALTER ROLE postgres=# ALTER USER usera NOSUPERUSER NOLOGIN; -- revoke both at once ALTER ROLE Note that we show dropping the privileges both individually and as one. Pick an appropriate version based on your application/business needs. Remove any escalated privileges on users granted indirectly that were previously identified using the roletree view:  postgres=# REVOKE name_of_granting_role FROM bob; -- an example only REVOKE ROLE References: 1. https://github.com/pgaudit/set_user",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "Much like the venerable sudo does for the OS, set_user manages superuser access for PostgreSQL. To complete configuration of set_user is documented at the extension's website and should be reviewed to ensure the logging entries that your organization cares about are properly configured. Note that some external tools assume they can connect as the postgres user by default and this is no longer true when set_user is deployed. You may find some tools need different options, reconfigured, or even abandoned to compensate for this.",
    "references": "1. https://github.com/pgaudit/set_user",
    "function_names": [
      "postgres_extension_set_user_installed",
      "postgres_extension_set_user_enabled",
      "postgres_extension_set_user_audit_enabled",
      "postgres_extension_set_user_configured",
      "postgres_extension_set_user_roltree_view_created"
    ]
  },
  {
    "id": "4.9",
    "title": "Make use of predefined roles",
    "assessment": "Manual",
    "description": "PostgreSQL provides a set of predefined roles that provide access to certain commonly needed privileged capabilities and information. Administrators can GRANT these roles to users and/or other roles in their environment, providing those users with access to the specified capabilities and information.",
    "rationale": "In keeping with the principle of least privilege, judicious use of the PostgreSQL predefined roles can greatly limit the access to privileged, or superuser, access.",
    "audit": "Review the list of all database roles that have superuser access and determine if one or more of the predefined roles would suffice for the needs of that role: # whoami postgres # psql postgres=# select rolname from pg_roles where rolsuper is true; rolname ---------- postgres doug (2 rows)",
    "remediation": "If you've determined that one or more of the predefined roles can be used, simply GRANT it: postgres=# GRANT pg_monitor TO doug; GRANT ROLE And then remove superuser from the account: postgres=# ALTER ROLE doug NOSUPERUSER; ALTER ROLE postgres=# select rolname from pg_roles where rolsuper is true; rolname ---------- postgres (1 row) Default Value: The following predefined roles exist in PostgreSQL 1*.x:  • pg_read_all_data Read all data (tables, views, sequences), as if having SELECT rights on those objects, and USAGE rights on all schemas, even without having it explicitly. This role does not have the role attribute BYPASSRLS set. If RLS is being used, an administrator may wish to set BYPASSRLS on roles which this role is GRANTed to. • pg_write_all_data Write all data (tables, views, sequences), as if having INSERT, UPDATE, and DELETE rights on those objects, and USAGE rights on all schemas, even without having it explicitly. This role does not have the role attribute BYPASSRLS set. If RLS is being used, an administrator may wish to set BYPASSRLS on roles which this role is GRANTed to. • pg_read_all_settings Read all configuration variables, even those normally visible only to superusers. • pg_read_all_stats Read all pg_stat_* views and use various statistics related extensions, even those normally visible only to superusers. • pg_stat_scan_tables Execute monitoring functions that may take ACCESS SHARE locks on tables, potentially for a long time. • pg_monitor Read/execute various monitoring views and functions. This role is a member of pg_read_all_settings, pg_read_all_stats and pg_stat_scan_tables. • pg_database_owner None. Membership consists, implicitly, of the current database owner. • pg_signal_backend Signal another backend to cancel a query or terminate its session. • pg_read_server_files Allow reading files from any location the database can access on the server with COPY and other file-access functions.  • pg_write_server_files Allow writing to files in any location the database can access on the server with COPY and other file-access functions. • pg_execute_server_program Allow executing programs on the database server as the user the database runs as with COPY and other functions which allow executing a server-side program. • pg_checkpoint Allow executing the CHECKPOINT command. • pg_use_reserved_connections Allow use of connection slots reserved via reserved_connections. • pg_create_subscription Allow users with CREATE permission on the database to issue CREATE SUBSCRIPTION. Administrators can grant access to these roles to users using the GRANT command. References: 1. https://www.postgresql.org/docs/current/predefined-roles.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/predefined-roles.html",
    "function_names": [
      "postgres_role_predefined_usage",
      "postgres_role_privilege_grant",
      "postgres_role_common_privilege_assigned",
      "postgres_role_environment_privilege_granted",
      "postgres_role_privilege_standardized",
      "postgres_role_privilege_predefined_only",
      "postgres_role_privilege_custom_restricted",
      "postgres_role_privilege_common_usage",
      "postgres_role_privilege_standard_usage",
      "postgres_role_privilege_default_assigned"
    ]
  },
  {
    "id": "5.1",
    "title": "Do Not Specify Passwords in the Command Line",
    "assessment": "Manual",
    "description": "When a command is executed on the command line, for example • psql postgresql://postgres:PASSWORD@host the password may be visible in the user's shell/command history or in the process list, thus exposing the password to other entities on the server.",
    "rationale": "If the password is visible in the process list or user's shell/command history, an attacker will be able to access the PostgreSQL database using the stolen credentials.",
    "audit": "• Check the process or task list if the password is visible. sudo ps -few • Check the shell or command history if the password is visible. history",
    "remediation": "1. Use the --password or -W terminal parameter without directly specifying the password and then enter the password when prompted. Substitute <user> with your username, e.g., root: psql -u <user> --password 2. Do not use a Connection URI with password included, e.g. psql postgresql://postgres:PASSWORD@host 3. If desired, configure a .pgpass file with the proper credentials and secure the file appropriately. References: 1. https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT- PASSWORD",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNECT- PASSWORD",
    "function_names": [
      "compute_command_password_prohibited",
      "compute_command_line_no_passwords",
      "compute_process_no_password_exposure",
      "compute_shell_history_password_protected",
      "compute_command_no_plaintext_passwords",
      "compute_process_list_password_hidden",
      "compute_command_line_password_restricted",
      "compute_shell_no_password_logging"
    ]
  },
  {
    "id": "5.2",
    "title": "Ensure PostgreSQL is Bound to an IP Address",
    "assessment": "Manual",
    "description": "By default, listen_addresses is set to localhost which prevents any and all remote TCP connections to the PostgreSQL port. Some Docker images may set listen_addesses to *. * corresponds to all available IP interfaces; thus, the PostgreSQL server then accepts TCP connections on all the server's IPv6 and IPv4 interfaces. (The same is true for a setting of 0.0.0.0.) You can make this configuration more restrictive by setting the listen_addresses configuration option to a specific list of IPv4 or IPv6 address so that the server only accepts TCP connections on those addresses. This parameter can only be set at server start.",
    "rationale": "Limiting the IP addresses that PostgreSQL listens on provides additional restrictions on where client applications/users can connect from.",
    "audit": "Run the following statement: SHOW listen_addresses; If * or 0.0.0.0 is returned, this is a failure.",
    "remediation": "To have the PostgreSQL server only accept connections on a specific IP address, add an entry similar to this in the PostgreSQL configuration file postgresql.conf: listen_addresses = ' <your IP> ' To listen on multiple addresses, a comma-separated list may be used: listen_addresses = ' <your first IP> , <your second IP> ' In this case, clients can connect to the server using --host= <your IP> , while connections on other server host addresses are not possible.",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "function_names": [
      "postgresql_instance_ip_bound",
      "postgresql_instance_listen_addresses_restricted",
      "postgresql_instance_no_wildcard_bind",
      "postgresql_instance_specific_ip_bind",
      "postgresql_instance_localhost_bind_only",
      "postgresql_instance_remote_access_restricted",
      "postgresql_instance_network_bind_limited"
    ]
  },
  {
    "id": "5.3",
    "title": "Ensure login via \"local\" UNIX Domain Socket is configured correctly",
    "assessment": "Manual",
    "description": "A remote host login, via SSH, is arguably the most secure means of remotely accessing and administering the PostgreSQL server. Once connected to the PostgreSQL server, using the psql client, via UNIX DOMAIN SOCKETS, while using the peer authentication method is the most secure mechanism available for local database connections. Provided a database user account of the same name of the UNIX account has already been defined in the database, even ordinary user accounts can access the cluster in a similarly highly secure manner.",
    "rationale": "",
    "audit": "Newly created data clusters are empty of data and have only one user account, the superuser (postgres). By default, the data cluster superuser is named after the UNIX account. Login authentication is tested via UNIX DOMAIN SOCKETS by the UNIX user account postgres, the default account, and set_user has not yet been configured: # whoami postgres # psql postgres postgres=# Login attempts by another UNIX user account as the superuser should be denied: # su - user1 # whoami user1 # psql -U postgres -d postgres psql: FATAL:  Peer authentication failed for user \"postgres\" # exit This test demonstrates that not only is logging in as the superuser blocked, but so is logging in as another user: # su - user2 # whoami user2 # psql -U postgres -d postgres psql: FATAL: Peer authentication failed for user \"postgres\" # psql -U user1 -d postgres psql: FATAL: Peer authentication failed for user \"user1\" # psql -U user2 -d postgres postgres=>",
    "remediation": "Creation of a database account that matches the local account allows PEER authentication: # psql -c \"CREATE ROLE user1 WITH LOGIN;\" CREATE ROLE Execute the following as the UNIX user account, the default authentication rules should now permit the login: # su - user1 # whoami user1 # psql -u user1 -d postgres postgres=> As per the host-based authentication rules in $PGDATA/pg_hba.conf, all login attempts via UNIX DOMAIN SOCKETS are processed on the line beginning with local. This is the minimal rule that must be in place allowing PEER connections: # TYPE  DATABASE        USER            ADDRESS                 METHOD local   all             all                                     peer Once edited, the server process must reload the authentication file before it can take effect. Improperly configured rules cannot update i.e. the old rules remain in place. The PostgreSQL logs will report the outcome of the SIGHUP: postgres=# select pg_reload_conf(); pg_reload_conf ---------------- t (1 row) The following examples illustrate other possible configurations. The resultant \"rule\" of success/failure depends upon the first matching line: # allow only postgres user logins locally via UNIX socket # TYPE  DATABASE        USER            ADDRESS                 METHOD local   all             postgres                                peer # allow all local users via UNIX socket # TYPE  DATABASE        USER            ADDRESS                 METHOD local   all             all                                     peer # allow all local users, via UNIX socket, only if they are connecting to a db named the same as their username # e.g. if user 'bob' is connecting to a db named 'bob' # TYPE  DATABASE        USER                                    METHOD local   samerole        all                                     peer # allow only local users, via UNIX socket, who are members of the 'rw' role in the db # TYPE  DATABASE        USER            ADDRESS                 METHOD local   all             +rw                                     peer  References: 1. https://www.postgresql.org/docs/current/static/client-authentication.html 2. https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://www.postgresql.org/docs/current/static/client-authentication.html 2. https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html",
    "function_names": [
      "postgresql_local_socket_peer_auth_enabled",
      "postgresql_unix_socket_login_restricted",
      "postgresql_remote_ssh_login_required",
      "postgresql_peer_auth_method_enforced",
      "postgresql_socket_connection_user_matching_enabled"
    ]
  },
  {
    "id": "5.4",
    "title": "Ensure login via \"host\" TCP/IP Socket is configured correctly",
    "assessment": "Manual",
    "description": "A large number of authentication METHODs are available for hosts connecting using TCP/IP sockets, including: • trust • reject • md5 • scram-sha-256 • password • gss • sspi • ident • pam • ldap • radius • cert METHODs trust, password, and ident are not to be used for remote logins. METHOD md5 is the most popular and can be used in both encrypted and unencrypted sessions, however, it is vulnerable to packet replay attacks . It is recommended that scram-sha-256 be used instead of md5. Use of the gss, sspi, pam, ldap, radius, and cert METHODs are dependent upon the availability of external authenticating processes/services and thus are not covered in this benchmark.",
    "rationale": "",
    "audit": "Newly created data clusters are empty of data and have only one user account, the superuser. By default, the data cluster superuser is named after the UNIX account postgres. Login authentication can be tested via TCP/IP SOCKETS by any UNIX user account from the local host. A password must be assigned to each login ROLE: postgres=# ALTER ROLE postgres WITH PASSWORD 'secret_password'; ALTER ROLE  Test an unencrypted session: # psql 'host=localhost user=postgres sslmode=disable' Password: Test an encrypted session: # psql 'host=localhost user=postgres sslmode=require' Password: Remote logins repeat the previous invocations but, of course, from the remote host: Test unencrypted session: # psql 'host=server-name-or-IP user=postgres sslmode=disable' Password: Test encrypted sessions: # psql 'host=server-name-or-IP user=postgres sslmode=require' Password:",
    "remediation": "Confirm a login attempt has been made by looking for a logged error message detailing the nature of the authenticating failure. In the case of failed login attempts, whether encrypted or unencrypted, check the following: • The server should be sitting on a port exposed to the remote connecting host i.e. NOT ip address 127.0.0.1 listen_addresses = '*' • An authenticating rule must exist in the file pg_hba.conf This example permits encrypted sessions for the postgres role and denies all unencrypted sessions for the postgres role: # TYPE    DATABASE           USER            ADDRESS           METHOD hostssl    all             postgres         0.0.0.0/0          scram-sha-256 hostnossl  all             postgres         0.0.0.0/0          reject The following examples illustrate other possible configurations. The resultant \"rule\" of success/failure depends upon the first matching line .  # allow 'postgres' user only from 'localhost/loopback' connections # and only if you know the password # (accepts both SSL and non-SSL connections) # TYPE    DATABASE        USER            ADDRESS                 METHOD host      all             postgres        127.0.0.1/32            scram-sha- 256 # allow users to connect remotely only to the database named after them, # with the correct user password: # (accepts both SSL and non-SSL connections) # TYPE    DATABASE        USER            ADDRESS                 METHOD host      samerole        all             0.0.0.0/0               scram-sha- 256 # allow only those users who are a member of the 'rw' role to connect # only to the database named after them, with the correct user password: # (accepts both SSL and non-SSL connections) # TYPE    DATABASE        USER            ADDRESS                 METHOD host      samerole        +rw             0.0.0.0/0               scram-sha- 256 Default Value: The availability of the different password-based authentication methods depends on how a user's password on the server is encrypted (or hashed, more accurately). This is controlled by the configuration parameter password_encryption at the time the password is set. If a password was encrypted using the scram-sha-256 setting, then it can be used for the authentication methods scram-sha-256, md5, and password (but password transmission will be in plain text in the latter case). If a password was encrypted using the md5 setting, then it can be used only for the md5 and password authentication method specifications (again, with the password transmitted in plain text in the latter case). Previous PostgreSQL releases supported storing the password on the server in plain text. This is no longer possible. To check the currently stored password hashes, see the system catalog pg_authid. To upgrade an existing installation from md5 to scram-sha-256, after having ensured that all client libraries in use are new enough to support SCRAM, set password_encryption = 'scram-sha-256' in postgresql.conf, reload the postmaster, make all users set new passwords, and change the authentication method specifications in pg_hba.conf to scram-sha-256. References: 1. https://www.postgresql.org/docs/current/static/client-authentication.html 2. https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html 3. https://tools.ietf.org/html/rfc7677  Additional Information: 1. Use TYPE hostssl when administrating the database cluster as a superuser. 2. Use TYPE hostnossl for performance purposes and when DML operations are deemed safe without SSL connections. 3. No examples have been given for ADDRESS, i.e., CIDR, hostname, domain names, etc. 4. Only three (3) types of METHOD have been documented; there are many more.",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://www.postgresql.org/docs/current/static/client-authentication.html 2. https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html 3. https://tools.ietf.org/html/rfc7677  Additional Information: 1. Use TYPE hostssl when administrating the database cluster as a superuser. 2. Use TYPE hostnossl for performance purposes and when DML operations are deemed safe without SSL connections. 3. No examples have been given for ADDRESS, i.e., CIDR, hostname, domain names, etc. 4. Only three (3) types of METHOD have been documented; there are many more.",
    "function_names": [
      "postgres_host_auth_methods_secure",
      "postgres_host_auth_no_trust",
      "postgres_host_auth_no_password",
      "postgres_host_auth_no_ident",
      "postgres_host_auth_no_md5",
      "postgres_host_auth_scram_sha_256_enabled",
      "postgres_host_auth_encrypted_sessions_only"
    ]
  },
  {
    "id": "5.5",
    "title": "Ensure per-account connection limits are used",
    "assessment": "Automated",
    "description": "Limiting concurrent connections to a PostgreSQL server can be used to reduce the risk of Denial of Service (DoS) attacks.",
    "rationale": "Limiting the number of concurrent sessions at the user level helps to reduce the risk of DoS attacks.",
    "audit": "To check the connection limits for all users, run the following: SELECT rolname, rolconnlimit FROM pg_roles WHERE rolname NOT LIKE 'pg_%';; Any user with a connection limit of -1 should be considered a failure.",
    "remediation": "Set a per-user connection limit by running: ALTER USER <dbuser> CONNECTION LIMIT <reasonable concurrent connection count> ; Default Value: -1",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "function_names": [
      "postgres_instance_connection_limit_enabled",
      "postgres_instance_connection_limit_configured",
      "postgres_instance_connection_limit_per_account",
      "postgres_instance_dos_protection_enabled",
      "postgres_instance_max_connections_set",
      "postgres_instance_connection_threshold_configured",
      "postgres_instance_account_based_connection_limit",
      "postgres_instance_concurrent_connection_restricted"
    ]
  },
  {
    "id": "5.6",
    "title": "Ensure Password Complexity is configured",
    "assessment": "Manual",
    "description": "Password complexity configuration is crucial to restrict unauthorized access to data. By default, PostgreSQL doesn’t provide for password complexity. Moreover, many compliance frameworks such as PCI DSS, and HIPPA require both password complexity and length. It is worth stating that the NIST 800-63B Password Guidelines publication is a good reference of authentication management.",
    "rationale": "Having strong password management for your locally-authenticated PostgreSQL accounts will protect against attackers' brute force techniques. This is important especially if external authentication is not possible to implement due to application requirements or restrictions.",
    "audit": "Check parameter values of both shared_preload_libraries and dynamic_library_path postgres=# SHOW shared_preload_libraries; shared_preload_libraries -------------------------- set_user,pgaudit (1 row) postgres=# SHOW dynamic_library_path; dynamic_library_path ---------------------- $libdir (1 row) If $libdir/passwordcheck is not listed in shared_preload_libraries this is a failure (based on $libdir being returned for dynamic_library_path).",
    "remediation": "Alter the postgresql.conf configuration file to enable passwordcheck as an extension in the shared_preload_libraries parameter and restart the PostgreSQL service: $ vi ${PGDATA}/postgresql.conf Find the shared_preload_libraries entry, and add passwordcheck to it (preserving any existing entries): shared_preload_libraries = '$libdir/passwordcheck' OR  shared_preload_libraries = 'pgaudit,$libdir/passwordcheck,somethingelse' Restart the PostgreSQL server for changes to take affect: # whoami root # systemctl restart postgresql-16 # systemctl status postgresql-16|grep 'ago$' Active: active (running) since [date] 10s ago References: 1. https://www.postgresql.org/docs/current/passwordcheck.html Additional Information: Note that the passwordcheck functionality is actually of little value. Please see the 'caution' notice in the documentation.",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/passwordcheck.html Additional Information: Note that the passwordcheck functionality is actually of little value. Please see the 'caution' notice in the documentation.",
    "function_names": [
      "postgres_user_password_complexity_enabled",
      "postgres_user_password_min_length",
      "postgres_user_password_special_char_required",
      "postgres_user_password_uppercase_required",
      "postgres_user_password_lowercase_required",
      "postgres_user_password_digit_required",
      "postgres_user_password_reuse_prevention",
      "postgres_user_password_expiration_enabled",
      "postgres_user_password_complexity_nist_compliant"
    ]
  },
  {
    "id": "6.1",
    "title": "Understanding attack vectors and runtime parameters",
    "assessment": "Manual",
    "description": "Understanding the vulnerability of PostgreSQL runtime parameters by the particular delivery method, or attack vector.",
    "rationale": "There are as many ways of compromising a server as there are runtime parameters. A combination of any one or more of them executed at the right time under the right conditions has the potential to compromise the RDBMS. Mitigating risk is dependent upon one's understanding of the attack vectors and includes: 1. Via user session: includes those runtime parameters that can be set by a ROLE that persists for the life of a server-client session. 2. Via attribute: includes those runtime parameters that can be set by a ROLE during a server-client session that can be assigned as an attribute for an entity such as a table, index, database, or role. 3. Via server reload: includes those runtime parameters that can be set by the superuser using a SIGHUP or configuration file reload command and affects the entire cluster. 4. Via server restart: includes those runtime parameters that can be set and effected by restarting the server process and affects the entire cluster. Impact: It can be difficult to totally eliminate risk. Once changed, detecting a miscreant parameter can become problematic.",
    "audit": "Review all configuration settings. Configure PostgreSQL logging to record all modifications and changes to the RDBMS.",
    "remediation": "In the case of a changed parameter, the value is returned back to its default value. In the case of a successful exploit of an already set runtime parameter then an analysis must be carried out to determine the best approach in mitigating the risk to prevent future exploitation.  References: 1. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "It can be difficult to totally eliminate risk. Once changed, detecting a miscreant parameter can become problematic.",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "function_names": [
      "postgres_runtime_parameters_secure_config",
      "postgres_attack_vectors_analyzed",
      "postgres_runtime_parameters_attack_vectors_mitigated",
      "postgres_runtime_parameters_vulnerability_assessed",
      "postgres_runtime_parameters_secure_defaults",
      "postgres_runtime_parameters_attack_surface_reduced",
      "postgres_runtime_parameters_hardened",
      "postgres_runtime_parameters_secure_values",
      "postgres_runtime_parameters_attack_vectors_monitored",
      "postgres_runtime_parameters_secure_baseline"
    ]
  },
  {
    "id": "6.2",
    "title": "Ensure 'backend' runtime parameters are configured correctly",
    "assessment": "Automated",
    "description": "In order to serve multiple clients efficiently, the PostgreSQL server launches a new \"backend\" process for each client. The runtime parameters in this benchmark section are controlled by the backend process. The server's performance, in the form of slow queries causing a denial of service, and the RDBM's auditing abilities for determining root cause analysis can be potentially compromised via these parameters.",
    "rationale": "A denial of service is possible by denying the use of indexes and by slowing down client access to an unreasonable level. Unsanctioned behavior can be introduced by introducing rogue libraries which can then be called in a database session. Logging can be altered and obfuscated inhibiting root cause analysis. Impact: All changes made on this level will affect the overall behavior of the server. These changes can only be affected by a server restart after the parameters have been altered in the configuration files.",
    "audit": "Issue the following command to verify the backend runtime parameters are configured correctly: postgres=# SELECT name, setting FROM pg_settings WHERE context IN ('backend','superuser-backend') ORDER BY 1; name          | setting -----------------------+--------- ignore_system_indexes | off jit_debugging_support | off jit_profiling_support | off log_connections       | on log_disconnections    | on post_auth_delay       | 0 (6 rows) Note: Effecting changes to these parameters can only be made at server start. Therefore, a successful exploit may not be detected until after a server restart, e.g., during a maintenance window.",
    "remediation": "Once detected, the unauthorized/undesired change can be corrected by altering the configuration file and executing a server restart. In the case where the parameter has been specified on the command-line invocation of pg_ctl the restart invocation is insufficient and an explicit stop and start must instead be made. 1. Query the view pg_settings and compare with previous query outputs for any changes. 2. Review configuration files postgresql.conf and postgresql.auto.conf and compare them with previously archived file copies for any changes. 3. Examine the process output and look for parameters that were used at server startup: ps -few | grep -E -- '[p]ost.*-[D]' 4. Examine the contents of $PGDATA/postmaster.opts References: 1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "All changes made on this level will affect the overall behavior of the server. These changes can only be affected by a server restart after the parameters have been altered in the configuration files.",
    "references": "1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "function_names": [
      "postgres_backend_runtime_parameters_configured",
      "postgres_backend_max_connections_limited",
      "postgres_backend_statement_timeout_set",
      "postgres_backend_idle_in_transaction_timeout_set",
      "postgres_backend_lock_timeout_set",
      "postgres_backend_log_statement_enabled",
      "postgres_backend_log_min_duration_statement_set",
      "postgres_backend_log_connections_enabled",
      "postgres_backend_log_disconnections_enabled",
      "postgres_backend_log_hostname_enabled",
      "postgres_backend_log_lock_waits_enabled",
      "postgres_backend_log_temp_files_set",
      "postgres_backend_log_autovacuum_min_duration_set",
      "postgres_backend_log_error_verbosity_set",
      "postgres_backend_log_line_prefix_configured",
      "postgres_backend_log_timezone_set",
      "postgres_backend_shared_buffers_configured",
      "postgres_backend_work_mem_set",
      "postgres_backend_maintenance_work_mem_set",
      "postgres_backend_random_page_cost_set"
    ]
  },
  {
    "id": "6.3",
    "title": "Ensure 'Postmaster' Runtime Parameters are Configured",
    "assessment": "Manual",
    "description": "PostgreSQL runtime parameters that are executed by the postmaster process.",
    "rationale": "The postmaster process is the supervisory process that assigns a backend process to an incoming client connection. The postmaster manages key runtime parameters that are either shared by all backend connections or needed by the postmaster process itself to run. Impact: All changes made on this level will affect the overall behavior of the server. These changes can be effected by editing the PostgreSQL configuration files and by either executing a server SIGHUP from the command line or, as superuser postgres, executing the SQL command select pg_reload_conf(). A denial of service is possible by the over-allocating of limited resources, such as RAM. Data can be corrupted by allowing damaged pages to load or by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Client messages can be altered in such a way as to interfere with the application logic. Logging can be altered and obfuscated inhibiting root cause analysis.",
    "audit": "The following parameters can only be set at server start by the owner of the PostgreSQL server process and cluster, typically the UNIX user account postgres. Therefore, all exploits require the successful compromise of either that UNIX account or the postgres superuser account itself. postgres=# SELECT name, setting FROM pg_settings WHERE context = 'postmaster' ORDER BY 1; name                 |                setting -------------------------------------+--------------------------------------- - archive_mode                        | off autovacuum_freeze_max_age           | 200000000 autovacuum_max_workers              | 3 autovacuum_multixact_freeze_max_age | 400000000 bonjour                             | off bonjour_name                        | cluster_name                        | config_file                         | /var/lib/pgsql/16/data/postgresql.conf data_directory                      | /var/lib/pgsql/16/data  data_sync_retry                     | off debug_io_direct                     | dynamic_shared_memory_type          | posix event_source                        | PostgreSQL external_pid_file                   | hba_file                            | /var/lib/pgsql/16/data/pg_hba.conf hot_standby                         | on huge_pages                          | try huge_page_size                      | 0 ident_file                          | /var/lib/pgsql/16/data/pg_ident.conf ignore_invalid_pages                | off jit_provider                        | llvmjit listen_addresses                    | localhost logging_collector                   | on max_connections                     | 100 max_files_per_process               | 1000 max_locks_per_transaction           | 64 max_logical_replication_workers     | 4 max_pred_locks_per_transaction      | 64 max_prepared_transactions           | 0 max_replication_slots               | 10 max_wal_senders                     | 10 max_worker_processes                | 8 min_dynamic_shared_memory           | 0 old_snapshot_threshold              | -1 port                                | 5432 recovery_target                     | recovery_target_action              | pause recovery_target_inclusive           | on recovery_target_lsn                 | recovery_target_name                | recovery_target_time                | recovery_target_timeline            | latest recovery_target_xid                 | reserved_connections                | 0 shared_buffers                      | 16384 shared_memory_type                  | mmap shared_preload_libraries            | set_user,pgaudit superuser_reserved_connections      | 3 track_activity_query_size           | 1024 track_commit_timestamp              | off unix_socket_directories             | /var/run/postgresql, /tmp unix_socket_group                   | unix_socket_permissions             | 0777 wal_buffers                         | 512 wal_decode_buffer_size              | 524288 wal_level                           | replica wal_log_hints                       | off (57 rows)",
    "remediation": "Once detected, the unauthorized/undesired change can be corrected by editing the altered configuration file and executing a server restart. In the case where the parameter has been specified on the command-line invocation of pg_ctl the restart invocation is insufficient and an explicit stop and start must instead be made.  Detecting a change is possible by one of the following methods: 1. Query the view pg_settings and compare with previous query outputs for any changes 2. Review the configuration files postgresql.conf and postgresql.auto.conf and compare with previously archived file copies for any changes 3. Examine the process output and look for parameters that were used at server startup: ps -few | grep -E -- '[p]ost.*-[D]' 4. Examine the contents of $PGDATA/postmaster.opts References: 1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "All changes made on this level will affect the overall behavior of the server. These changes can be effected by editing the PostgreSQL configuration files and by either executing a server SIGHUP from the command line or, as superuser postgres, executing the SQL command select pg_reload_conf(). A denial of service is possible by the over-allocating of limited resources, such as RAM. Data can be corrupted by allowing damaged pages to load or by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Client messages can be altered in such a way as to interfere with the application logic. Logging can be altered and obfuscated inhibiting root cause analysis.",
    "references": "1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "function_names": [
      "postgresql_postmaster_runtime_parameters_configured",
      "postgresql_postmaster_secure_parameters_enabled",
      "postgresql_postmaster_default_parameters_set",
      "postgresql_postmaster_custom_parameters_configured",
      "postgresql_postmaster_essential_parameters_defined",
      "postgresql_postmaster_security_parameters_enforced",
      "postgresql_postmaster_required_parameters_present",
      "postgresql_postmaster_optimized_parameters_set",
      "postgresql_postmaster_recommended_parameters_configured",
      "postgresql_postmaster_compliance_parameters_valid"
    ]
  },
  {
    "id": "6.4",
    "title": "Ensure 'SIGHUP' Runtime Parameters are Configured",
    "assessment": "Manual",
    "description": "PostgreSQL runtime parameters that are executed by the SIGHUP signal.",
    "rationale": "In order to define server behavior and optimize server performance, the server's superuser has the privilege of setting these parameters which are found in the configuration files postgresql.conf and pg_hba.conf. Alternatively, those parameters found in postgresql.conf can also be changed using a server login session and executing the SQL command ALTER SYSTEM which writes its changes in the configuration file postgresql.auto.conf. Impact: All changes made on this level will affect the overall behavior of the server. These changes can be effected by editing the PostgreSQL configuration files and by either executing a server SIGHUP from the command line or, as superuser postgres, executing the SQL command select pg_reload_conf(). A denial of service is possible by the over-allocating of limited resources, such as RAM. Data can be corrupted by allowing damaged pages to load or by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Client messages can be altered in such a way as to interfere with the application logic. Logging can be altered and obfuscated inhibiting root cause analysis.",
    "audit": "The following parameters can be set at any time, without interrupting the server, by the owner of the postmaster server process and cluster (typically UNIX user account postgres). postgres=# SELECT name, setting FROM pg_settings WHERE context = 'sighup' ORDER BY 1; name                       |                setting ---------------------------------------------+------------------------------- ------ archive_cleanup_command                     | archive_command                             | (disabled) archive_library                             | archive_timeout                             | 0 authentication_timeout                      | 60 autovacuum                                  | on autovacuum_analyze_scale_factor             | 0.1  autovacuum_analyze_threshold                | 50 autovacuum_naptime                          | 60 autovacuum_vacuum_cost_delay                | 2 autovacuum_vacuum_cost_limit                | -1 autovacuum_vacuum_insert_scale_factor       | 0.2 autovacuum_vacuum_insert_threshold          | 1000 autovacuum_vacuum_scale_factor              | 0.2 autovacuum_vacuum_threshold                 | 50 autovacuum_work_mem                         | -1 bgwriter_delay                              | 200 bgwriter_flush_after                        | 64 bgwriter_lru_maxpages                       | 100 bgwriter_lru_multiplier                     | 2 checkpoint_completion_target                | 0.9 checkpoint_flush_after                      | 32 checkpoint_timeout                          | 300 checkpoint_warning                          | 30 db_user_namespace                           | off fsync                                       | on full_page_writes                            | on gss_accept_delegation                       | off hot_standby_feedback                        | off krb_caseins_users                           | off krb_server_keyfile                          | FILE:/etc/sysconfig/pgsql/krb5.keytab log_autovacuum_min_duration                 | 600000 log_checkpoints                             | on log_destination                             | stderr log_directory                               | log log_file_mode                               | 0600 log_filename                                | postgresql-%a.log log_hostname                                | off log_line_prefix                             | %m [%p] log_recovery_conflict_waits                 | off log_rotation_age                            | 1440 log_rotation_size                           | 0 log_startup_progress_interval               | 10000 log_timezone                                | UTC log_truncate_on_rotation                    | on max_parallel_apply_workers_per_subscription | 2 max_pred_locks_per_page                     | 2 max_pred_locks_per_relation                 | -2 max_slot_wal_keep_size                      | -1 max_standby_archive_delay                   | 30000 max_standby_streaming_delay                 | 30000 max_sync_workers_per_subscription           | 2 max_wal_size                                | 1024 min_wal_size                                | 80 pre_auth_delay                              | 0 primary_conninfo                            | primary_slot_name                           | recovery_end_command                        | recovery_init_sync_method                   | fsync recovery_min_apply_delay                    | 0 recovery_prefetch                           | try remove_temp_files_after_crash               | on restart_after_crash                         | on  restore_command                             | send_abort_for_crash                        | off send_abort_for_kill                         | off set_user.block_alter_system                 | on set_user.block_copy_program                 | on set_user.block_log_statement                | on set_user.exit_on_error                      | on set_user.nosuperuser_target_allowlist       | * set_user.superuser_allowlist                | * set_user.superuser_audit_tag                | AUDIT ssl                                         | off ssl_ca_file                                 | ssl_cert_file                               | server.crt ssl_ciphers                                 | HIGH:MEDIUM:+3DES:!aNULL ssl_crl_dir                                 | ssl_crl_file                                | ssl_dh_params_file                          | ssl_ecdh_curve                              | prime256v1 ssl_key_file                                | server.key ssl_max_protocol_version                    | ssl_min_protocol_version                    | TLSv1.2 ssl_passphrase_command                      | ssl_passphrase_command_supports_reload      | off ssl_prefer_server_ciphers                   | on synchronous_standby_names                   | syslog_facility                             | local0 syslog_ident                                | postgres syslog_sequence_numbers                     | on syslog_split_messages                       | on trace_recovery_messages                     | log wal_keep_size                               | 0 wal_receiver_create_temp_slot               | off wal_receiver_status_interval                | 10 wal_receiver_timeout                        | 60000 wal_retrieve_retry_interval                 | 5000 wal_sync_method                             | fdatasync wal_writer_delay                            | 200 wal_writer_flush_after                      | 128 (101 rows)",
    "remediation": "Restore all values in the PostgreSQL configuration files and invoke the server to reload the configuration files. References: 1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "All changes made on this level will affect the overall behavior of the server. These changes can be effected by editing the PostgreSQL configuration files and by either executing a server SIGHUP from the command line or, as superuser postgres, executing the SQL command select pg_reload_conf(). A denial of service is possible by the over-allocating of limited resources, such as RAM. Data can be corrupted by allowing damaged pages to load or by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Client messages can be altered in such a way as to interfere with the application logic. Logging can be altered and obfuscated inhibiting root cause analysis.",
    "references": "1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "function_names": [
      "postgres_instance_sighup_parameters_configured",
      "postgres_database_runtime_parameters_secure",
      "postgres_config_sighup_signal_handling_enabled",
      "postgres_runtime_sighup_reload_parameters_set",
      "postgres_parameter_sighup_trigger_validation_active"
    ]
  },
  {
    "id": "6.5",
    "title": "Ensure 'Superuser' Runtime Parameters are Configured",
    "assessment": "Manual",
    "description": "PostgreSQL runtime parameters that can only be executed by the server's superuser, postgres.",
    "rationale": "In order to improve and optimize server performance, the server's superuser has the privilege of setting these parameters which are found in the configuration file postgresql.conf. Alternatively, they can be changed in a PostgreSQL login session via the SQL command ALTER SYSTEM which writes its changes in the configuration file postgresql.auto.conf. Impact: All changes made on this level will affect the overall behavior of the server. These changes can only be affected by a server restart after the parameters have been altered in the configuration files. A denial of service is possible by the over-allocating of limited resources, such as RAM. Data can be corrupted by allowing damaged pages to load or by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Client messages can be altered in such a way as to interfere with the application logic. Logging can be altered and obfuscated inhibiting root cause analysis.",
    "audit": "The following parameters can only be set at server start by the owner of the PostgreSQL server process and cluster i.e. typically UNIX user account postgres. Therefore, all exploits require the successful compromise of either that UNIX account or the postgres superuser account itself. postgres=# SELECT name, setting FROM pg_settings WHERE context = 'superuser' ORDER BY 1; name              |   setting --------------------------------+------------- allow_in_place_tablespaces     | off allow_system_table_mods        | off backtrace_functions            | commit_delay                   | 0 compute_query_id               | auto deadlock_timeout               | 1000 debug_discard_caches           | 0 dynamic_library_path           | $libdir ignore_checksum_failure        | off jit_dump_bitcode               | off  lc_messages                    | en_US.UTF-8 lo_compat_privileges           | off log_duration                   | off log_error_verbosity            | default log_executor_stats             | off log_lock_waits                 | off log_min_duration_sample        | -1 log_min_duration_statement     | -1 log_min_error_statement        | error log_min_messages               | warning log_parameter_max_length       | -1 log_parser_stats               | off log_planner_stats              | off log_replication_commands       | off log_statement                  | none log_statement_sample_rate      | 1 log_statement_stats            | off log_temp_files                 | -1 log_transaction_sample_rate    | 0 max_stack_depth                | 2048 pgaudit.log                    | ddl,write pgaudit.log_catalog            | on pgaudit.log_client             | off pgaudit.log_level              | log pgaudit.log_parameter          | off pgaudit.log_parameter_max_size | 0 pgaudit.log_relation           | off pgaudit.log_rows               | off pgaudit.log_statement          | on pgaudit.log_statement_once     | off pgaudit.role                   | session_preload_libraries      | session_replication_role       | origin temp_file_limit                | -1 track_activities               | on track_counts                   | on track_functions                | none track_io_timing                | off track_wal_io_timing            | off update_process_title           | on wal_compression                | off wal_consistency_checking       | wal_init_zero                  | on wal_recycle                    | on zero_damaged_pages             | off (55 rows)",
    "remediation": "The exploit is made in the configuration files. These changes are effected upon server restart. Once detected, the unauthorized/undesired change can be made by editing the altered configuration file and executing a server restart. In the case where the parameter has been set on the command-line invocation of pg_ctl the restart invocation is insufficient and an explicit stop and start must instead be made.  Detecting a change is possible by one of the following methods: 1. Query the view pg_settings and compare with previous query outputs for any changes. 2. Review the configuration files postgreql.conf and postgreql.auto.conf and compare with previously archived file copies for any changes 3. Examine the process output and look for parameters that were used at server startup: ps aux | grep -E -- '[p]ost.*-[D]' 4. Examine the contents of $PGDATA/postmaster.opts References: 1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "All changes made on this level will affect the overall behavior of the server. These changes can only be affected by a server restart after the parameters have been altered in the configuration files. A denial of service is possible by the over-allocating of limited resources, such as RAM. Data can be corrupted by allowing damaged pages to load or by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Client messages can be altered in such a way as to interfere with the application logic. Logging can be altered and obfuscated inhibiting root cause analysis.",
    "references": "1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "function_names": [
      "postgres_runtime_superuser_parameters_configured",
      "postgres_runtime_superuser_privileges_restricted",
      "postgres_runtime_superuser_access_controlled",
      "postgres_runtime_superuser_commands_disabled",
      "postgres_runtime_superuser_operations_limited",
      "postgres_runtime_superuser_functions_restricted",
      "postgres_runtime_superuser_settings_enforced",
      "postgres_runtime_superuser_execution_blocked"
    ]
  },
  {
    "id": "6.6",
    "title": "Ensure 'User' Runtime Parameters are Configured",
    "assessment": "Manual",
    "description": "These PostgreSQL runtime parameters are managed at the user account (ROLE) level.",
    "rationale": "In order to improve performance and optimize features, a ROLE has the privilege of setting numerous parameters in a transaction, session, or entity attribute. Any ROLE can alter any of these parameters. Impact: A denial of service is possible by the over-allocating of limited resources, such as RAM. Changing VACUUM parameters can force a server shutdown which is standard procedure preventing data corruption from transaction ID wraparound. Data can be corrupted by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Logging can be altered and obfuscated to inhibit root cause analysis.",
    "audit": "The method used to analyze the state of ROLE runtime parameters and to determine if they have been compromised is to inspect all catalogs and list attributes for database entities such as ROLEs and databases: postgres=# SELECT name, setting FROM pg_settings WHERE context = 'user' ORDER BY 1; name                 |      setting -------------------------------------+-------------------- application_name                    | psql array_nulls                         | on backend_flush_after                 | 0 backslash_quote                     | safe_encoding bytea_output                        | hex check_function_bodies               | on client_connection_check_interval    | 0 client_encoding                     | UTF8 client_min_messages                 | notice commit_siblings                     | 5 constraint_exclusion                | partition cpu_index_tuple_cost                | 0.005 cpu_operator_cost                   | 0.0025 cpu_tuple_cost                      | 0.01 createrole_self_grant               | cursor_tuple_fraction               | 0.1 DateStyle                           | ISO, MDY debug_logical_replication_streaming | buffered debug_parallel_query                | off  debug_pretty_print                  | on debug_print_parse                   | off debug_print_plan                    | off debug_print_rewritten               | off default_statistics_target           | 100 default_table_access_method         | heap default_tablespace                  | default_text_search_config          | pg_catalog.english default_toast_compression           | pglz default_transaction_deferrable      | off default_transaction_isolation       | read committed default_transaction_read_only       | off effective_cache_size                | 524288 effective_io_concurrency            | 1 enable_async_append                 | on enable_bitmapscan                   | on enable_gathermerge                  | on enable_hashagg                      | on enable_hashjoin                     | on enable_incremental_sort             | on enable_indexonlyscan                | on enable_indexscan                    | on enable_material                     | on enable_memoize                      | on enable_mergejoin                    | on enable_nestloop                     | on enable_parallel_append              | on enable_parallel_hash                | on enable_partition_pruning            | on enable_partitionwise_aggregate      | off enable_partitionwise_join           | off enable_presorted_aggregate          | on enable_seqscan                      | on enable_sort                         | on enable_tidscan                      | on escape_string_warning               | on exit_on_error                       | off extra_float_digits                  | 1 from_collapse_limit                 | 8 geqo                                | on geqo_effort                         | 5 geqo_generations                    | 0 geqo_pool_size                      | 0 geqo_seed                           | 0 geqo_selection_bias                 | 2 geqo_threshold                      | 12 gin_fuzzy_search_limit              | 0 gin_pending_list_limit              | 4096 hash_mem_multiplier                 | 2 icu_validation_level                | warning idle_in_transaction_session_timeout | 0 idle_session_timeout                | 0 IntervalStyle                       | postgres jit                                 | on jit_above_cost                      | 100000 jit_expressions                     | on jit_inline_above_cost               | 500000  jit_optimize_above_cost             | 500000 jit_tuple_deforming                 | on join_collapse_limit                 | 8 lc_monetary                         | en_US.UTF-8 lc_numeric                          | en_US.UTF-8 lc_time                             | en_US.UTF-8 local_preload_libraries             | lock_timeout                        | 0 logical_decoding_work_mem           | 65536 log_parameter_max_length_on_error   | 0 maintenance_io_concurrency          | 10 maintenance_work_mem                | 65536 max_parallel_maintenance_workers    | 2 max_parallel_workers                | 8 max_parallel_workers_per_gather     | 2 min_parallel_index_scan_size        | 64 min_parallel_table_scan_size        | 1024 parallel_leader_participation       | on parallel_setup_cost                 | 1000 parallel_tuple_cost                 | 0.1 password_encryption                 | scram-sha-256 plan_cache_mode                     | auto quote_all_identifiers               | off random_page_cost                    | 4 recursive_worktable_factor          | 10 row_security                        | on scram_iterations                    | 4096 search_path                         | \"$user\", public seq_page_cost                       | 1 standard_conforming_strings         | on statement_timeout                   | 0 stats_fetch_consistency             | cache synchronize_seqscans                | on synchronous_commit                  | on tcp_keepalives_count                | 0 tcp_keepalives_idle                 | 0 tcp_keepalives_interval             | 0 tcp_user_timeout                    | 0 temp_buffers                        | 1024 temp_tablespaces                    | TimeZone                            | UTC timezone_abbreviations              | Default trace_notify                        | off trace_sort                          | off transaction_deferrable              | off transaction_isolation               | read committed transaction_read_only               | off transform_null_equals               | off vacuum_buffer_usage_limit           | 256 vacuum_cost_delay                   | 0 vacuum_cost_limit                   | 200 vacuum_cost_page_dirty              | 20 vacuum_cost_page_hit                | 1 vacuum_cost_page_miss               | 2 vacuum_failsafe_age                 | 1600000000 vacuum_freeze_min_age               | 50000000 vacuum_freeze_table_age             | 150000000  vacuum_multixact_failsafe_age       | 1600000000 vacuum_multixact_freeze_min_age     | 5000000 vacuum_multixact_freeze_table_age   | 150000000 wal_sender_timeout                  | 60000 wal_skip_threshold                  | 2048 work_mem                            | 4096 xmlbinary                           | base64 xmloption                           | content (141 rows)",
    "remediation": "In the matter of a user session, the login sessions must be validated that it is not executing undesired parameter changes. In the matter of attributes that have been changed in entities, they must be manually reverted to their default value(s). References: 1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "A denial of service is possible by the over-allocating of limited resources, such as RAM. Changing VACUUM parameters can force a server shutdown which is standard procedure preventing data corruption from transaction ID wraparound. Data can be corrupted by changing parameters to reinterpret values in an unexpected fashion, e.g. changing the time zone. Logging can be altered and obfuscated to inhibit root cause analysis.",
    "references": "1. https://www.postgresql.org/docs/current/static/view-pg-settings.html 2. https://www.postgresql.org/docs/current/static/runtime-config.html",
    "function_names": [
      "postgres_user_runtime_parameters_configured",
      "postgres_user_role_parameters_configured",
      "postgres_user_runtime_settings_configured",
      "postgres_user_role_settings_configured",
      "postgres_user_parameter_restrictions_configured",
      "postgres_user_runtime_parameter_compliance",
      "postgres_user_role_parameter_compliance"
    ]
  },
  {
    "id": "6.7",
    "title": "Ensure FIPS 140-2 OpenSSL Cryptography Is Used",
    "assessment": "Automated",
    "description": "Install, configure, and use OpenSSL on a platform that has a NIST certified FIPS 140-2 installation of OpenSSL. This provides PostgreSQL instances the ability to generate and validate cryptographic hashes to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owner's requirements.",
    "rationale": "Federal Information Processing Standard (FIPS) Publication 140-2 is a computer security standard developed by a U.S. Government and industry working group for validating the quality of cryptographic modules. Use of weak, or untested, encryption algorithms undermines the purposes of utilizing encryption to protect data. PostgreSQL uses OpenSSL for the underlying encryption layer. The database and application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated. It is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards. For detailed information, refer to NIST FIPS Publication 140-2, Security Requirements for Cryptographic Modules . Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant. The security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A. Currently, only Red Hat Enterprise Linux is certified as a FIPS 140-2 distribution of OpenSSL. For other operating systems, users must obtain or build their own FIPS 140- 2 OpenSSL libraries.",
    "audit": "If PostgreSQL is not installed on Red Hat Enterprise Linux (RHEL), CentOS, or Rocky Linux then FIPS cannot be enabled natively. Otherwise, the deployment must incorporate a custom build of the operating system. As the system administrator: 1. Run the following to see if FIPS is enabled: # fips-mode-setup --check Installation of FIPS modules is not completed. FIPS mode is disabled.  If FIPS mode is enabled is not displayed, then the system is not FIPS enabled and this is a fail. 2. Run the following (your results and version may vary): # openssl version OpenSSL 3.0.7 1 Nov 2022 (Library: OpenSSL 3.0.7 1 Nov 2022) If fips is not included in the OpenSSL version, then the system is not FIPS capable and this is a fail.",
    "remediation": "Configure OpenSSL to be FIPS compliant as PostgreSQL uses OpenSSL for cryptographic modules. To configure OpenSSL to be FIPS 140-2 compliant, see the official RHEL Documentation. Below is a general summary of the steps required: To switch the system to FIPS mode in RHEL 9: # fips-mode-setup --enable Kernel initramdisks are being regenerated. This might take some time. Setting system policy to FIPS Note: System-wide crypto policies are applied on application start-up. It is recommended to restart the system for the change of policies to fully take place. FIPS mode will be enabled. Please reboot the system for the setting to take effect. Restart your system to allow the kernel to switch to FIPS mode: # reboot After the restart, you can check the current state of FIPS mode: # fips-mode-setup --check FIPS mode is enabled. References: 1. https://access.redhat.com/documentation/en- us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide- cryptographic-policies_security-hardening#switching-the-system-to-fips- mode_using-the-system-wide-cryptographic-policies 2. https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation- program/documents/security-policies/140sp1758.pdf 3. https://csrc.nist.gov/publications/fips",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://access.redhat.com/documentation/en- us/red_hat_enterprise_linux/9/html/security_hardening/using-the-system-wide- cryptographic-policies_security-hardening#switching-the-system-to-fips- mode_using-the-system-wide-cryptographic-policies 2. https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation- program/documents/security-policies/140sp1758.pdf 3. https://csrc.nist.gov/publications/fips",
    "function_names": [
      "compute_instance_fips_openssl_enabled",
      "compute_instance_openssl_fips_140_2_compliant",
      "compute_instance_cryptography_fips_enabled",
      "compute_instance_openssl_certified_cryptography",
      "compute_instance_fips_140_2_openssl_used",
      "compute_instance_openssl_fips_mode_enabled",
      "compute_instance_fips_compliant_openssl_installed",
      "compute_instance_openssl_fips_validation_enabled"
    ]
  },
  {
    "id": "6.8",
    "title": "Ensure TLS is enabled and configured correctly",
    "assessment": "Automated",
    "description": "TLS on a PostgreSQL server should be enabled and configured to encrypt TCP traffic to and from the server.",
    "rationale": "If TLS is not enabled and configured correctly, this increases the risk of data being compromised in transit. Impact: A self-signed certificate can be used for testing, but a certificate signed by a certificate authority (CA) (either one of the global CAs or a local one) should be used in production so that clients can verify the server's identity. If all the database clients are local to the organization, using a local CA is recommended. To ultimately enable and enforce TLS authentication for the server, appropriate hostssl records must be added to the pg_hba.conf file. Be sure to reload PostgreSQL after any changes (restart not required). Note: The hostssl record matches connection attempts made using TCP/IP, but only when the connection is made with TLS encryption. The host record matches attempts made using TCP/IP, but allows both TLS and non-TLS connections. The hostnossl record matches attempts made using TCP/IP, but only those without TLS. Care should be taken to enforce TLS as appropriate.",
    "audit": "To determine whether TLS is enabled, simply query the parameter value while logged into the database using either the SHOW ssl command or SELECT from system catalog view pg_settings as illustrated below. In both cases, ssl is off; this is a fail. postgres=# SHOW ssl; ssl ----- off (1 row) postgres=# SELECT name, setting, source FROM pg_settings WHERE name = 'ssl'; name | setting |       source -----+---------+-------------------- ssl  | off     | default (1 row)",
    "remediation": "For this example, and ease of illustration, we will be using a self-signed certificate (generated via openssl) for the server, and the PostgreSQL defaults for file naming and location in the PostgreSQL $PGDATA directory. # whoami postgres # # create new certificate and enter details at prompts # openssl req -new -text -out server.req Generating a 2048 bit RSA private key .....................+++ ..................................................................+++ writing new private key to 'privkey.pem' Enter PEM pass phrase: Verifying - Enter PEM pass phrase: ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [XX]:US State or Province Name (full name) []:Ohio Locality Name (eg, city) [Default City]:Columbus Organization Name (eg, company) [Default Company Ltd]:Me Inc Organizational Unit Name (eg, section) []:IT Common Name (eg, your name or your server's hostname) []:my.me.inc Email Address []:me@meinc.com Please enter the following 'extra' attributes to be sent with your certificate request A challenge password []: An optional company name []: # # remove passphrase (required for automatic server start up, if not using `ssl_passphrase_command`) # openssl rsa -in privkey.pem -out server.key && rm privkey.pem Enter pass phrase for privkey.pem: writing RSA key # # modify certificate to self signed, generate .key and .crt files # openssl req -x509 -in server.req -text -key server.key -out server.crt # # copy .key and .crt files to appropriate location, here default $PGDATA $ cp server.key server.crt $PGDATA # # restrict file mode for server.key $ chmod og-rwx server.key Edit the PostgreSQL configuration file postgresql.conf to ensure the following items are set. Again, we are using defaults. Note that altering these parameters will require restarting the cluster.  # (change requires restart) ssl = on # force clients to use TLS v1.3 or newer ssl_min_protocol_version = 'TLSv1.3' # (change requires restart) ssl_cert_file = 'server.crt' # (change requires restart) ssl_key_file = 'server.key' Finally, restart PostgreSQL and confirm ssl using commands outlined in Audit Procedures: postgres=# show ssl; ssl ----- on (1 row) Default Value: Note that server.crt and server.key are the default names used by PostgreSQL. These files can be named otherwise, just ensure you update the postgresql.conf to use these new names. The current names can be found via SQL: postgres=# select name, setting from pg_settings where name like 'ssl%file'; ┌────────────────────┬────────────┐ │        name        │  setting   │ ├────────────────────┼────────────┤ │ ssl_ca_file        │            │ │ ssl_cert_file      │ server.crt │ │ ssl_crl_file       │            │ │ ssl_dh_params_file │            │ │ ssl_key_file       │ server.key │ └────────────────────┴────────────┘ (5 rows) References: 1. https://www.postgresql.org/docs/current/static/ssl-tcp.html 2. https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf 3. https://www.postgresql.org/docs/current/static/libpq-ssl.html 4. https://www.postgresql.org/docs/current/runtime-config-connection.html Additional Information: It is possible to leave the passphrase on privkey.pem for additional security if desired. Simply configure postgresql.conf to set: ssl_passphrase_command = 'your_command_here'  This sets an external command to be invoked when a passphrase for decrypting an SSL file such as a private key needs to be obtained. By default, this parameter is empty, which means the built-in prompting mechanism is used. The command must print the passphrase to the standard output and exit with code 0. In the parameter value, %p is replaced by a prompt string. (Write %% for a literal %.) Note that the prompt string will probably contain whitespace, so be sure to quote adequately. A single newline is stripped from the end of the output if present. The command does not actually have to prompt the user for a passphrase. It can read it from a file, obtain it from a keychain facility, or similar. It is up to the user to make sure the chosen mechanism is adequately secure.",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "A self-signed certificate can be used for testing, but a certificate signed by a certificate authority (CA) (either one of the global CAs or a local one) should be used in production so that clients can verify the server's identity. If all the database clients are local to the organization, using a local CA is recommended. To ultimately enable and enforce TLS authentication for the server, appropriate hostssl records must be added to the pg_hba.conf file. Be sure to reload PostgreSQL after any changes (restart not required). Note: The hostssl record matches connection attempts made using TCP/IP, but only when the connection is made with TLS encryption. The host record matches attempts made using TCP/IP, but allows both TLS and non-TLS connections. The hostnossl record matches attempts made using TCP/IP, but only those without TLS. Care should be taken to enforce TLS as appropriate.",
    "references": "1. https://www.postgresql.org/docs/current/static/ssl-tcp.html 2. https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf 3. https://www.postgresql.org/docs/current/static/libpq-ssl.html 4. https://www.postgresql.org/docs/current/runtime-config-connection.html Additional Information: It is possible to leave the passphrase on privkey.pem for additional security if desired. Simply configure postgresql.conf to set: ssl_passphrase_command = 'your_command_here'  This sets an external command to be invoked when a passphrase for decrypting an SSL file such as a private key needs to be obtained. By default, this parameter is empty, which means the built-in prompting mechanism is used. The command must print the passphrase to the standard output and exit with code 0. In the parameter value, %p is replaced by a prompt string. (Write %% for a literal %.) Note that the prompt string will probably contain whitespace, so be sure to quote adequately. A single newline is stripped from the end of the output if present. The command does not actually have to prompt the user for a passphrase. It can read it from a file, obtain it from a keychain facility, or similar. It is up to the user to make sure the chosen mechanism is adequately secure.",
    "function_names": [
      "postgresql_server_tls_enabled",
      "postgresql_server_tls_configured_correctly",
      "postgresql_server_tcp_encryption_enabled",
      "postgresql_server_tls_min_version_enforced",
      "postgresql_server_tls_cipher_suite_secure",
      "postgresql_server_tls_certificate_valid",
      "postgresql_server_tls_client_auth_required",
      "postgresql_server_tls_strong_protocols_only"
    ]
  },
  {
    "id": "6.9",
    "title": "Ensure the TLSv1.0 and TLSv1.1 Protocols are Disabled",
    "assessment": "Automated",
    "description": "Transport Layer Security (TLS), and its predecessor Secure Sockets Layer (SSL) are cryptographic protocols which can be used to encrypt data sent between client and server.",
    "rationale": "The TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and therefore not recommended. Therefore, it is recommended that the TLSv1.0 protocol is disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity. All major up-to-date browsers support TLSv1.2, and most recent versions of Firefox and Chrome support the newer TLSv1.3 protocol, since 2017. IETF deprecated TLSv1.0 and TLSv1.1 in March 2021 (see RFC 8996 ).",
    "audit": "1. Execute the following command SHOW ssl_min_protocol_version; 2. Check the output to verify that the ssl_min_protocol_version directive is set to either TLSv1.2 or TLSv1.3 (preferred).",
    "remediation": "Adjust the ssl_min_protocol_version to at least TLSv1.2: ALTER SYSTEM SET ssl_min_protocol_version = 'TLSv1.2'; or (preferred): ALTER SYSTEM SET ssl_min_protocol_version = 'TLSv1.3'; In either case, make the change active: SELECT pg_reload_conf(); SHOW ssl_min_protocol_version;  References: 1. https://ssl-config.mozilla.org/",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://ssl-config.mozilla.org/",
    "function_names": [
      "cloud_cdn_distribution_tls_1_0_disabled",
      "cloud_cdn_distribution_tls_1_1_disabled",
      "load_balancer_tls_1_0_disabled",
      "load_balancer_tls_1_1_disabled",
      "cloudfront_distribution_tls_1_0_disabled",
      "cloudfront_distribution_tls_1_1_disabled",
      "ssl_certificate_tls_1_0_disabled",
      "ssl_certificate_tls_1_1_disabled",
      "compute_instance_tls_1_0_disabled",
      "compute_instance_tls_1_1_disabled"
    ]
  },
  {
    "id": "6.10",
    "title": "Ensure Weak SSL/TLS Ciphers Are Disabled",
    "assessment": "Automated",
    "description": "The PostgreSQL ssl_ciphers directive specifies which Cipher Suites are allowed in the negotiation with the client. In cryptography, perfect forward secrecy (PFS), also known as forward secrecy (FS), is a feature of specific key exchange protocols that give assurance that the session keys will not be compromised even if the private key of the server is compromised. For instance, RSA does not provide PFS, while the ECDHE (Elliptic-Curve Diffie-Hellman Ephemeral) and DHE (Diffie-Hellman Ephemeral) provides PFS. ECDHE is the stronger protocol and should be preferred, while DHE may be allowed for greater compatibility with older clients. Only Cipher Suites with either the ECDHE or the DHE key exchange are allowed.",
    "rationale": "The SSL/TLS protocols support a large number of Cipher Suites including many weak and medium strength algorithms that are subject to man-in-the middle attacks and information disclosure. Some implementations even support the NULL Cipher Suite which allows a TLS connection without any cryptographic protection. Therefore, it is critical to ensure the configuration only allows strong algorithms greater than or equal to 128-bit to be negotiated with the client. Stronger 256-bit algorithms should be allowed and preferred. Furthermore, during the TLS handshake, after the initial Client Hello and Server Hello , there is a pre-master secret generated, which is used to generate the master secret, and in turn generates the session key. When using protocols that do not provide forward secrecy, such as RSA, the pre-master secret is encrypted by the client with the server's public key and sent over the network. However, with protocols such as ECDHE (Elliptic- Curve Diffie-Hellman Ephemeral) the pre-master secret is not sent over the wire, even in encrypted format. The key exchange arrives at the shared secret in the clear using ephemeral keys that are not stored or used again. With forward secrecy, each session has a unique key exchange, so that future sessions are protected. Note This recommendation is primarily targeted at those installs that cannot run in FIPS-mode, or need to further refine the allowable cipher list.",
    "audit": "1. Execute the following command  grep --extended-regexp \"^[^#]*ssl_ciphers\" $PGDATA/postgresql.conf | cut -d ' ' -f 3 |sed \"s/'//g\" | tr \":\" \"\\n\" 2. Check the output to verify that the ssl_ciphers directive is set to a subset of the following values in the PostgreSQL configuration file (postgresql.conf) TLS_AES_256_GCM_SHA384 TLS_AES_128_GCM_SHA256 TLS_AES_128_CCM_SHA256 TLS_CHACHA20_POLY1305_SHA256 ECDHE-ECDSA-AES256-CCM ECDHE-ECDSA-AES128-CCM DHE-RSA-AES256-CCM DHE-RSA-AES128-CCM ECDHE-RSA-AES256-GCM-SHA384 ECDHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-AES256-GCM-SHA384 ECDHE-ECDSA-AES128-GCM-SHA256 DHE-DSS-AES256-GCM-SHA384 DHE-DSS-AES128-GCM-SHA256 DHE-RSA-AES256-GCM-SHA384 DHE-RSA-AES128-GCM-SHA256 ECDHE-ECDSA-CHACHA20-POLY1305 ECDHE-RSA-CHACHA20-POLY1305 DHE-RSA-CHACHA20-POLY1305",
    "remediation": "Add or modify the ssl_ciphers directive to the following value in the PostgreSQL configuration file (postgresql.conf): ssl_ciphers = 'TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_AES_128_CCM_SHA256,TLS_CHA CHA20_POLY1305_SHA256,ECDHE-ECDSA-AES256-CCM,ECDHE-ECDSA-AES128-CCM,DHE-RSA- AES256-CCM,DHE-RSA-AES128-CCM,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128- GCM-SHA256,ECDHE-ECDSA-AES256-GCM-SHA384,ECDHE-ECDSA-AES128-GCM-SHA256,DHE- DSS-AES256-GCM-SHA384,DHE-DSS-AES128-GCM-SHA256,DHE-RSA-AES256-GCM- SHA384,DHE-RSA-AES128-GCM-SHA256' References: 1. https://ssl-config.mozilla.org/",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://ssl-config.mozilla.org/",
    "function_names": [
      "postgresql_ssl_ciphers_strong_only",
      "postgresql_ssl_ciphers_pfs_enabled",
      "postgresql_ssl_ciphers_no_weak_protocols",
      "postgresql_ssl_ciphers_ecdhe_required",
      "postgresql_ssl_ciphers_dhe_allowed",
      "postgresql_ssl_ciphers_rsa_disabled",
      "postgresql_ssl_ciphers_tls_secure_config"
    ]
  },
  {
    "id": "6.11",
    "title": "Ensure the pgcrypto extension is installed and configured correctly",
    "assessment": "Manual",
    "description": "PostgreSQL must implement cryptographic mechanisms to prevent unauthorized disclosure or modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.",
    "rationale": "PostgreSQL instances handling data that requires \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to PostgreSQL or implemented via additional software or operating system/file system settings, as appropriate to the situation. Information at rest refers to the state of information when it is located on a secondary storage device (e.g. disk drive, tape drive) within an organizational information system. The selection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e. full disk encryption) or encrypt specific data structures (e.g. files, records, or fields). Organizations may also optionally choose to implement both to implement layered security. The decision of whether, and what, to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protection, as appropriate. If the confidentiality and integrity of application data are not protected, the data will be open to compromise and unauthorized modification. The PostgreSQL pgcrypto extension provides cryptographic functions for PostgreSQL and is intended to address the confidentiality and integrity of user and system information at rest in non-mobile devices.  Impact: When considering or undertaking any form of encryption, it is critical to understand the state of the encrypted data at all stages of the data lifecycle. The use of pgcrypto ensures that the data at rest in the tables (and therefore on disk) is encrypted, but for the data to be accessed by any users or applications, said users/applications will, by necessity, have access to the encrypt and decrypt keys and the data in question will be encrypted/decrypted in memory and then transferred to/from the user/application in that form.",
    "audit": "One possible way to encrypt data within PostgreSQL is to use the pgcrypto extension. To check if pgcrypto is installed on PostgreSQL, as a database administrator run the following commands: postgres=# SELECT * FROM pg_available_extensions WHERE name='pgcrypto'; name      | default_version | installed_version |         comment ----------+-----------------+-------------------+------------------------- pgcrypto  | 1.3             |                   | cryptographic functions (1 row) If data in the database requires encryption and pgcrypto is not available, this is a fail. If disk or filesystem requires encryption, ask the system owner, DBA, and SA to demonstrate the use of disk-level encryption. If this is required and is not found, this is a fail. If controls do not exist or are not enabled, this is also a fail.",
    "remediation": "The pgcrypto extension is included with the PostgreSQL contrib package. Although included, it needs to be created in the database. As the database administrator, run the following: postgres=# CREATE EXTENSION pgcrypto; CREATE EXTENSION Verify pgcrypto is installed: postgres=# SELECT * FROM pg_available_extensions WHERE name='pgcrypto'; name   | default_version | installed_version |         comment ----------+-----------------+-------------------+------------------------- pgcrypto | 1.3             | 1.3               | cryptographic functions (1 row) References: 1. http://www.postgresql.org/docs/current/static/pgcrypto.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "impact": "When considering or undertaking any form of encryption, it is critical to understand the state of the encrypted data at all stages of the data lifecycle. The use of pgcrypto ensures that the data at rest in the tables (and therefore on disk) is encrypted, but for the data to be accessed by any users or applications, said users/applications will, by necessity, have access to the encrypt and decrypt keys and the data in question will be encrypted/decrypted in memory and then transferred to/from the user/application in that form.",
    "references": "1. http://www.postgresql.org/docs/current/static/pgcrypto.html",
    "function_names": [
      "postgres_database_pgcrypto_extension_installed",
      "postgres_database_pgcrypto_extension_configured",
      "postgres_database_pgcrypto_extension_encrypted_data_at_rest",
      "postgres_database_pgcrypto_extension_protected_pii",
      "postgres_database_pgcrypto_extension_minimum_security_standards"
    ]
  },
  {
    "id": "7.1",
    "title": "Ensure a replication-only user is created and used for streaming replication",
    "assessment": "Manual",
    "description": "Create a new user specifically for use by streaming replication instead of using the superuser account.",
    "rationale": "As it is not necessary to be a superuser to initiate a replication connection, it is proper to create an account specifically for replication. This allows further 'locking down' the uses of the superuser account and follows the general principle of using the least privileges necessary.",
    "audit": "Check which users currently have the replication permission: postgres=# select rolname from pg_roles where rolreplication is true; rolname ---------- postgres (1 row) In a default PostgreSQL cluster, only the postgres user will have this permission.",
    "remediation": "It will be necessary to create a new role for replication purposes: postgres=# create user replication_user REPLICATION encrypted password 'XXX'; CREATE ROLE postgres=# select rolname from pg_roles where rolreplication is true; rolname ------------------ postgres replication_user (2 rows) When using pg_basebackup (or other replication tools) on your standby server, you would use the replication_user (and its password). Ensure you allow the new user via your pg_hba.conf file: # note that 'replication' in the 2nd column is required and is a special # keyword, not a real database hostssl replication     replication_user    0.0.0.0/0         scram-sha-256  References: 1. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html 2. https://www.postgresql.org/docs/current/high-availability.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html 2. https://www.postgresql.org/docs/current/high-availability.html",
    "function_names": [
      "postgres_user_replication_only",
      "postgres_user_no_superuser_privileges",
      "postgres_replication_user_exists",
      "postgres_replication_user_used_for_streaming",
      "postgres_superuser_not_used_for_replication"
    ]
  },
  {
    "id": "7.2",
    "title": "Ensure logging of replication commands is configured",
    "assessment": "Manual",
    "description": "Enabling the log_replication_commands setting causes each attempted replication from the server to be logged.",
    "rationale": "A successful replication connection allows for a complete copy of the data stored within the data cluster to be offloaded to another, potentially insecure, host. As such, it is advisable to log all replication commands that are executed in your database cluster to ensure the data is not off-loaded to an unexpected/undesired location.",
    "audit": "Check the current value of log_replication_commands: postgres=# show log_replication_commands; log_replication_commands -------------------------- off (1 row)",
    "remediation": "To enable the logging of replication commands, execute the following: postgres=# ALTER SYSTEM SET log_replication_commands = 'on'; ALTER SYSTEM postgres=# SELECT pg_reload_conf(); pg_reload_conf ---------------- t (1 row) postgres=# show log_replication_commands ; log_replication_commands -------------------------- on (1 row) References: 1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/runtime-config-logging.html",
    "function_names": [
      "postgres_server_log_replication_commands_enabled",
      "postgres_database_log_replication_commands_enabled",
      "postgres_instance_log_replication_commands_enabled",
      "postgres_cluster_log_replication_commands_enabled",
      "postgres_replication_logging_enabled"
    ]
  },
  {
    "id": "7.3",
    "title": "Ensure base backups are configured and functional",
    "assessment": "Manual",
    "description": "A 'base backup' is a copy of the PRIMARY host's data cluster ($PGDATA) and is used to create STANDBY hosts and for Point In Time Recovery (PITR) mechanisms. Base backups should be copied across networks in a secure manner using an encrypted transport mechanism. The PostgreSQL CLI pg_basebackup can be used, however, TLS encryption should be enabled on the server as per section 6.8 of this benchmark. The pgBackRest tool detailed in section 8.2 of this benchmark can also be used to create a 'base backup'.",
    "audit": "Manually confirm that backups exist and are updated on a regular basis.",
    "remediation": "Executing base backups using pg_basebackup requires the following steps on the standby server: $ whoami postgres $ pg_basebackup --host=name_or_IP_of_master \\ --port=5432 \\ --username=replication_user \\ --pgdata=~postgres/16/data \\ --progress --verbose --write-recovery-conf --wal-method=stream References: 1. https://www.postgresql.org/docs/current/static/functions- admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE 2. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html",
    "rationale": "",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/functions- admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE 2. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html",
    "function_names": [
      "postgres_instance_base_backup_configured",
      "postgres_instance_base_backup_functional",
      "postgres_instance_base_backup_encrypted_transport",
      "postgres_instance_base_backup_tls_enabled",
      "postgres_instance_base_backup_pg_basebackup_configured",
      "postgres_instance_base_backup_pgbackrest_configured",
      "postgres_instance_base_backup_pitr_enabled",
      "postgres_instance_base_backup_standby_host_configured"
    ]
  },
  {
    "id": "7.4",
    "title": "Ensure WAL archiving is configured and functional",
    "assessment": "Automated",
    "description": "Write Ahead Log (WAL) Archiving, or Log Shipping, is the process of sending transaction log files from the PRIMARY host either to one or more STANDBY hosts or to be archived on a remote storage device for later use, e.g. PITR. There are several utilities that can copy WALs including, but not limited to, cp, scp, sftp, and rynsc. Basically, the server follows a set of runtime parameters which define when the WAL should be copied using one of the aforementioned utilities.",
    "rationale": "Unless the server has been correctly configured, one runs the risk of sending WALs in an unsecured, unencrypted fashion.",
    "audit": "Review the following parameters: postgres=# SELECT name, setting FROM pg_settings WHERE name in ('archive_mode','archive_command','archive_library') AND setting IS NOT NULL AND setting <> 'off' AND setting <> '(disabled)' AND setting <> ''; name | setting ------+--------- (o rows) If no rows are returned, as shown, this is a failure. If rows are returned, note that archive_mode must be 'on' and either archive_command or archive_library must be set for WAL archiving to be fully enabled. To verify that WAL archiving is functioning successfully, one can: postgres=# SELECT * FROM pg_stat_archiver; \\watch And ensure that archived_count, last_archived_wal, and last_archived_time are changing while failed_count, last_failed_wal, and last_failed_time are not changing.",
    "remediation": "Change parameters and restart the server as required.  References: 1. https://www.postgresql.org/docs/current/static/runtime-config- wal.html#RUNTIME-CONFIG-WAL-ARCHIVING",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config- wal.html#RUNTIME-CONFIG-WAL-ARCHIVING",
    "function_names": [
      "postgres_instance_wal_archiving_enabled",
      "postgres_instance_wal_archiving_functional",
      "postgres_instance_wal_archiving_configured",
      "postgres_instance_wal_archiving_remote_storage",
      "postgres_instance_wal_archiving_utilities_configured",
      "postgres_instance_wal_archiving_runtime_parameters_set",
      "postgres_instance_wal_archiving_pitr_enabled",
      "postgres_instance_wal_archiving_standby_hosts_configured"
    ]
  },
  {
    "id": "7.5",
    "title": "Ensure streaming replication parameters are configured correctly",
    "assessment": "Manual",
    "description": "Streaming replication from a PRIMARY host transmits DDL, DML, passwords, and other potentially sensitive activities and data. These connections should be protected with Secure Sockets Layer (SSL).",
    "rationale": "Unencrypted transmissions could reveal sensitive information to unauthorized parties. Unauthenticated connections could enable man-in-the-middle attacks.",
    "audit": "Confirm a dedicated and non-superuser role with replication permission exists: postgres=> select rolname from pg_roles where rolreplication is true; rolname ------------------ postgres replication_user (2 rows) On the target/STANDBY host, execute a psql invocation similar to the following, confirming that SSL communications are possible: $ whoami postgres $ psql 'host=mySrcHost dbname=postgres user=replication_user password=mypassword sslmode=require' -c 'select 1;'",
    "remediation": "Review prior sections in this benchmark regarding TLS certificates, replication user, and WAL archiving. Confirm the file $PGDATA/standby.signal is present on the STANDBY host and $PGDATA/postgresql.auto.conf contains lines similar to the following: primary_conninfo = 'user=replication_user password=mypassword host=mySrcHost port=5432 sslmode=require sslcompression=1' References: 1. https://www.postgresql.org/docs/current/static/runtime-config- connection.html#RUNTIME-CONFIG-CONNECTION-SECURITY  2. https://www.postgresql.org/docs/current/static/functions- admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE 3. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html 4. https://www.postgresql.org/docs/current/static/runtime-config- wal.html#RUNTIME-CONFIG-WAL-ARCHIVING 5. https://linux.die.net/man/1/openssl",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config- connection.html#RUNTIME-CONFIG-CONNECTION-SECURITY  2. https://www.postgresql.org/docs/current/static/functions- admin.html#FUNCTIONS-ADMIN-BACKUP-TABLE 3. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html 4. https://www.postgresql.org/docs/current/static/runtime-config- wal.html#RUNTIME-CONFIG-WAL-ARCHIVING 5. https://linux.die.net/man/1/openssl",
    "function_names": [
      "database_replication_ssl_enabled",
      "database_replication_encryption_required",
      "database_replication_secure_connection",
      "database_replication_tls_enabled",
      "database_replication_ssl_certificate_valid",
      "database_replication_ssl_protocol_min_tls_1_2",
      "database_replication_ssl_cipher_strong",
      "database_replication_ssl_authentication_enabled",
      "database_replication_ssl_peer_verification_enabled",
      "database_replication_ssl_no_self_signed_certificates"
    ]
  },
  {
    "id": "8.1",
    "title": "Ensure PostgreSQL subdirectory locations are outside the data cluster",
    "assessment": "Manual",
    "description": "The PostgreSQL cluster is organized to carry out specific tasks in subdirectories. For the purposes of performance, reliability, and security some of these subdirectories should be relocated outside the data cluster.",
    "rationale": "Some subdirectories contain information, such as logs, which can be of value to others such as developers. Other subdirectories can gain a performance benefit when placed on fast storage devices. Other subdirectories contain temporary files created and used during processing. Finally, relocating a subdirectory to a separate and distinct partition mitigates denial of service and involuntary server shutdown when excessive writes fill the data cluster's partition, e.g. pg_wal, pg_log, and temp_tablespaces.",
    "audit": "Execute the following SQL statement to verify the configuration is correct. Alternatively, inspect the parameter settings in the postgresql.conf configuration file. postgres=# select name, setting from pg_settings where (name ~ '_directory$' or name ~ '_tablespace'); name            |         setting ----------------------------+------------------------- allow_in_place_tablespaces | off data_directory             | /var/lib/pgsql/16/data default_tablespace         | log_directory              | log temp_tablespaces           | (5 rows) Inspect the file and directory permissions for all returned values. Only superusers and authorized users should have access control rights for these files and directories. If permissions are not highly restrictive, this is a fail. If temp_tablespaces is undefined and temp_file_limit has not been set, this is a fail.",
    "remediation": "Perform the following steps to remediate the subdirectory locations and permissions:  • Determine appropriate data, log, and tablespace directories and locations based on your organization's security policies. If necessary, relocate all listed directories outside the data cluster. • If not relocating temp_tablespaces, the temp_file_limit parameter must be changed from its default value. • Ensure file permissions are restricted as much as possible, i.e. only superuser read access. • When directories are relocated to other partitions, ensure that they are of sufficient size to mitigate against excessive space utilization. • Lastly, change the settings accordingly in the postgresql.conf configuration file and restart the database cluster for changes to take effect. To relocate temp_tablespaces to an existing mount point outside the data cluster is accomplished by: postgres=# CREATE TABLESPACE temp_tablespc LOCATION '/path/to/existing/desired/mount/point'; postgres=# ALTER SYSTEM SET temp_tablespaces = 'temp_tablespc'; postgres=# SELECT pg_reload_conf(); Default Value: The default for data_directory is ConfigDir and the default for log_directory is log (based on absolute path of data_directory). The defaults for tablespace settings are null, or not set, upon cluster creation. References: 1. https://www.postgresql.org/docs/current/static/runtime-config-file-locations.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-file-locations.html",
    "function_names": [
      "postgresql_cluster_subdirectories_relocated_outside_data",
      "postgresql_cluster_subdirectories_separated_from_data",
      "postgresql_cluster_subdirectories_external_to_data",
      "postgresql_cluster_subdirectories_non_data_location",
      "postgresql_cluster_subdirectories_isolated_from_data"
    ]
  },
  {
    "id": "8.2",
    "title": "Ensure the backup and restore tool, 'pgBackRest', is installed and configured",
    "assessment": "Automated",
    "description": "pgBackRest aims to be a simple, reliable backup and restore system that can seamlessly scale up to the largest databases and workloads. Instead of relying on traditional backup tools like tar and rsync, pgBackRest implements all backup features internally and uses a custom protocol for communicating with remote systems. Removing reliance on tar and rsync allows for better solutions to database-specific backup challenges. The custom remote protocol allows for more flexibility and limits the types of connections that are required to perform a backup which increases security.",
    "rationale": "The native PostgreSQL backup facility pg_dump provides adequate logical backup operations but does not provide for Point In Time Recovery (PITR). The PostgreSQL facility pg_basebackup performs a physical backup of the database files and does provide for PITR, but it is constrained by single threading. Both of these methodologies are standard in the PostgreSQL ecosystem and appropriate for particular backup/recovery needs. pgBackRest offers another option with much more robust features and flexibility. pgBackRest is open-source software developed to perform efficient backups on PostgreSQL databases that measure in tens of terabytes and greater. It supports per- file checksums, compression, partial/failed backup resume, high-performance parallel transfer, asynchronous archiving, tablespaces, expiration, full/differential/incremental backups, local/remote operation via SSH or TLS, hard-linking, restore, backup encryption , and more. pgBackRest is written in C and does not depend on rsync or tar but instead performs its own deltas which give it maximum flexibility. Finally, pgBackRest provides an easy-to-use internal repository listing backup details accessible via the pgbackrest info command, as illustrated below.  $ pgbackrest info stanza: proddb01 status: ok db (current) wal archive min/max (1*.0-1): 000000010000000000000012 / 000000010000000000000017 full backup: 20231012-153106F timestamp start/stop: 2023-10-12 15:31:06 / 2023-10-12 15:31:49 wal start/stop: 000000010000000000000012 / 000000010000000000000012 database size: 29.4MB, backup size: 29.4MB repository size: 3.4MB, repository backup size: 3.4MB diff backup: 20231012-153106F_20231012-173109D timestamp start/stop: 2023-10-12 17:31:09 / 2023-10-12 17:31:19 wal start/stop: 000000010000000000000015 / 000000010000000000000015 database size: 29.4MB, backup size: 2.6MB repository size: 3.4MB, repository backup size: 346.8KB backup reference list: 20231012-153106F incr backup: 20231012-153106F_20231012-183114I timestamp start/stop: 2023-10-12 18:31:14 / 2023-10-12 18:31:22 wal start/stop: 000000010000000000000017 / 000000010000000000000017 database size: 29.4MB, backup size: 8.2KB repository size: 3.4MB, repository backup size: 519B backup reference list: 20231012-153106F, 20231012-153106F_20231012- 173109D",
    "audit": "If installed, invoke it without arguments to see the help: # not installed $ pgbackrest -bash: pgbackrest: command not found # installed $ pgbackrest pgBackRest 2.55.1 - General help Usage: pgbackrest [options] [command] <snip> If pgBackRest is not installed, this is (potentially) a fail.",
    "remediation": "pgBackRest is not installed nor configured for PostgreSQL by default, but instead is maintained as a GitHub project. Fortunately, it is a part of the PGDG repository and can be easily installed:  # whoami root # dnf -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest- 9.noarch.rpm <snip> Installed: epel-release-9-7.el9.noarch Complete! # dnf -y install pgbackrest <snip> Installed: libssh2-1.10.0-1.el9.x86_64                          pgbackrest-2.55.1- 1PGDG.rhel9.x86_64 Complete! Once installed, pgBackRest must be configured for things like stanza name, backup location, retention policy, logging, etc. Please consult the configuration guide. If employing pgBackRest for your backup/recovery solution, ensure the repository, base backups, and WAL archives are stored on a reliable file system separate from the database server. Further, the external storage system where backups reside should have limited access to only those system administrators as necessary. Finally, as with any backup/recovery solution, stringent testing must be conducted. A backup is only good if it can be restored successfully. References: 1. https://pgbackrest.org/ 2. https://github.com/pgbackrest/pgbackrest 3. https://www.postgresql.org/docs/current/static/app-pgdump.html 4. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html",
    "profile_applicability": "•  Level 1 - PostgreSQL on Linux",
    "references": "1. https://pgbackrest.org/ 2. https://github.com/pgbackrest/pgbackrest 3. https://www.postgresql.org/docs/current/static/app-pgdump.html 4. https://www.postgresql.org/docs/current/static/app-pgbasebackup.html",
    "function_names": [
      "compute_database_pgbackrest_installed",
      "compute_database_pgbackrest_configured",
      "compute_database_pgbackrest_backup_enabled",
      "compute_database_pgbackrest_restore_enabled",
      "compute_database_pgbackrest_remote_protocol_enabled",
      "compute_database_pgbackrest_custom_protocol_configured",
      "compute_database_pgbackrest_no_tar_dependency",
      "compute_database_pgbackrest_no_rsync_dependency",
      "compute_database_pgbackrest_scalable_backup",
      "compute_database_pgbackrest_secure_connections"
    ]
  },
  {
    "id": "8.3",
    "title": "Ensure miscellaneous configuration settings are correct",
    "assessment": "Manual",
    "description": "This recommendation covers non-regular, special files, and dynamic libraries. PostgreSQL permits local logins via the UNIX DOMAIN SOCKET and, for the most part, anyone with a legitimate Unix login account can make the attempt. Limiting PostgreSQL login attempts can be made by relocating the UNIX DOMAIN SOCKET to a subdirectory with restricted permissions. The creation and implementation of user-defined dynamic libraries is an extraordinary powerful capability. In the hands of an experienced DBA/programmer, it can significantly enhance the power and flexibility of the RDBMS; but new and unexpected behavior can also be assigned to the RDBMS, resulting in a very dangerous environment in what should otherwise be trusted.",
    "rationale": "",
    "audit": "Execute the following SQL statement to verify the configuration is correct. Alternatively, inspect the parameter settings in the postgresql.conf configuration file. postgres=# select name, setting from pg_settings where name in ('external_pid_file', 'unix_socket_directories','shared_preload_libraries','dynamic_library_path',' local_preload_libraries','session_preload_libraries'); name            |          setting ---------------------------+--------------------------- dynamic_library_path      | $libdir external_pid_file         | local_preload_libraries   | session_preload_libraries | shared_preload_libraries  | pgaudit, set_user unix_socket_directories   | /var/run/postgresql, /tmp (6 rows) Inspect the file and directory permissions for all returned values. Only superusers should have access control rights for these files and directories. If permissions are not highly restricted, this is a fail.",
    "remediation": "Follow these steps to remediate the configuration: • Determine permissions based on your organization's security policies.  • Relocate all files and ensure their permissions are restricted as much as possible, i.e. only superuser read access. • Ensure all directories where these files are located have restricted permissions such that the superuser can read but not write. • Lastly, change the settings accordingly in the postgresql.conf configuration file and restart the database cluster for changes to take effect. Default Value: The dynamic_library_path default is $libdir and unix_socket_directories default is /var/run/postgresql, /tmp. The default for external_pid_file and all library parameters are initially null, or not set, upon cluster creation. References: 1. https://www.postgresql.org/docs/current/static/runtime-config-file-locations.html 2. https://www.postgresql.org/docs/current/static/runtime-config-connection.html 3. https://www.postgresql.org/docs/current/static/runtime-config-client.html",
    "profile_applicability": "•  Level 1 - PostgreSQL",
    "references": "1. https://www.postgresql.org/docs/current/static/runtime-config-file-locations.html 2. https://www.postgresql.org/docs/current/static/runtime-config-connection.html 3. https://www.postgresql.org/docs/current/static/runtime-config-client.html",
    "function_names": [
      "postgresql_socket_permissions_restricted",
      "postgresql_unix_socket_relocated",
      "postgresql_dynamic_libraries_restricted",
      "postgresql_user_defined_libraries_disabled",
      "postgresql_local_login_attempts_limited",
      "postgresql_socket_directory_permissions_secure",
      "postgresql_custom_libraries_usage_audited",
      "postgresql_socket_location_secure",
      "postgresql_dynamic_library_creation_restricted",
      "postgresql_unix_socket_access_controlled"
    ]
  }
]