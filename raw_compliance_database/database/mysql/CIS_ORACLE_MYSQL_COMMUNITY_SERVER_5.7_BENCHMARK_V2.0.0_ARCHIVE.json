[
  {
    "id": "1.1",
    "title": "Place Databases on Non-System Partitions",
    "assessment": "Manual",
    "description": "It is generally accepted that host operating systems should include different filesystem partitions for different purposes. One set of filesystems is typically called system partitions, and these are generally reserved for host system/application operation. The other set of filesystems is typically called \"non-system partitions\", and such locations are generally reserved for storing data.",
    "rationale": "Moving the database off the system partition will reduce the probability of denial of service caused by exhaustion of available disk space to the operating system. Impact: Moving database files and directories to a non-system partition may be difficult depending on whether there was only a single partition when the operating system was set up and whether there are additional non-system partitions available.",
    "audit": "Execute the following steps to assess this recommendation: \u2022 Obtain the location of the datadir and other MySQL database files by executing the following SQL statement: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE (VARIABLE_NAME LIKE '%dir' or VARIABLE_NAME LIKE '%file') and (VARIABLE_NAME NOT LIKE '%core%' AND VARIABLE_NAME <> 'local_infile' AND VARIABLE_NAME <> 'relay_log_info_file') order by VARIABLE_NAME; \u2022 Using the value returned for the datadir, and other results from the above query, execute the following in a system terminal: df -h <directory> The output returned from the df command above should not include root (/), /var, or /usr.",
    "remediation": "Perform the following steps to remediate this setting for the datadir: 1. Backup the database. 2. Choose a non-system partition new location for MySQL data. 3. Stop mysqld using a command like: service mysql stop. 4. Copy the data using a command like: cp -rp <datadir Value> <new location> . 5. Set the datadir location to the new location in the MySQL configuration file. 6. Start mysqld using a command like: service mysql start Note: On some Linux distributions you may need to additionally modify apparmor settings. For example, on a Ubuntu 14.04.1 system edit the file /etc/apparmor.d/usr.sbin.mysqld so that the datadir access is appropriate. The original might look like this: # Allow data dir access /var/lib/mysql/ r, /var/lib/mysql/** rwk, Alter those two paths to be the new location you chose above. For example, if that new location were /media/mysql, then the /etc/apparmor.d/usr.sbin.mysqld file should include something like this: # Allow data dir access /media/mysql/ r, /media/mysql/** rwk, Default Value: Not Applicable. References: 1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html",
    "function_names": [
      "compute_database_non_system_partition",
      "compute_instance_data_partition_separated",
      "compute_volume_system_data_segregated",
      "compute_disk_non_os_partition_required",
      "compute_storage_system_data_isolated",
      "compute_partition_system_data_separated",
      "compute_ebs_non_root_volume_used",
      "compute_instance_non_system_disk_attached",
      "compute_volume_data_partition_enforced",
      "compute_disk_system_data_segregation"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Moving database files and directories to a non-system partition may be difficult depending on whether there was only a single partition when the operating system was set up and whether there are additional non-system partitions available.",
    "references": "1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html"
  },
  {
    "id": "1.2",
    "title": "Use Dedicated Least Privileged Account for MySQL Daemon/Service",
    "assessment": "Automated",
    "description": "As with any service installed on a host, it can be provided with its own user context. Providing a dedicated user to the service provides the ability to precisely constrain the service within the larger host context.",
    "rationale": "Utilizing a least privilege account for MySQL to execute as needed may reduce the impact of a MySQL-born vulnerability. A restricted account will be unable to access resources unrelated to MySQL, such as operating system configurations.",
    "audit": "Execute the following command at a terminal prompt to assess this recommendation: ps -ef | egrep \"^mysql.*$\" If no lines are returned, then this is a fail. Note: It is assumed that the MySQL user is mysql. Additionally, you may consider running sudo -l as the MySQL user or to check the sudoers file.",
    "remediation": "Create a user which is only used for running MySQL and directly related processes. This user must not have administrative rights to the system. Additionally, it's best to avoid providing shell access to such an account. Shell access can be removed using the following command at a terminal prompt: /usr/sbin/groupadd -g 27 -o -r mysql >/dev/null 2>&1 || : /usr/sbin/useradd -M -N -g mysql -o -r -d /var/lib/mysql -s /bin/false \\ -c \"MySQL Server\" -u 27 mysql >/dev/null 2>&1 || : References: 1. https://dev.mysql.com/doc/refman/5.7/en/changing-mysql-user.html 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_user  Additional Information: The root user may be used to start the MySQL service on Linux/UNIX, but then it must be configured to drop privileges by specifying a service specific user in the my.cnf or my.ini file.",
    "function_names": [
      "compute_mysql_service_least_privilege_account",
      "compute_mysql_daemon_dedicated_user",
      "compute_service_account_least_privilege",
      "compute_daemon_user_dedicated",
      "compute_mysql_service_user_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/changing-mysql-user.html 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_user  Additional Information: The root user may be used to start the MySQL service on Linux/UNIX, but then it must be configured to drop privileges by specifying a service specific user in the my.cnf or my.ini file."
  },
  {
    "id": "1.3",
    "title": "Disable MySQL Command History",
    "assessment": "Automated",
    "description": "On Linux/UNIX, the MySQL client and MySQL Shell log statements executed interactively to a history file. The default MySQL Client file is named .mysql_history in the user's home directory. The files are split by language and named history.sql, history.js and history.py. Most interactive commands run in the MySQL client application are saved to a history file. The MySQL command history should be disabled. By default, the MySQL Shell does not save history between sessions.",
    "rationale": "Disabling the MySQL Client and MySQL Shell command history reduces the probability of exposing sensitive information, such as passwords, encryption keys, or other sensitive data or information.",
    "audit": "Execute the following commands to assess this recommendation: find /home -name \".mysql_history\" find /root -name \".mysql_history\" For MySQL Shell ls -d .??*/* | egrep history | grep mysql For each file returned determine whether that file is symbolically linked to /dev/null.",
    "remediation": "Perform the following steps to remediate this setting: 1. Remove .mysql_history if it exists. 2. Use either of the techniques below to prevent it from being created again: o Set the MYSQL_HISTFILE environment variable to /dev/null. This will need to be placed in the shell's startup script. o Create $HOME/.mysql_history as a symbolic to /dev/null. > ln -s /dev/null $HOME/.mysql_history Another way to prevent history from being recorded is to use --batch option. Default Value: By default, the MySQL command history file is located in $HOME/.mysql_history.  References: 1. https://dev.mysql.com/doc/refman/5.7/en/mysql-logging.html 2. https://bugs.mysql.com/bug.php?id=72158",
    "function_names": [
      "mysql_client_history_disabled",
      "mysql_shell_history_disabled",
      "mysql_user_history_file_removed",
      "mysql_history_file_permissions_restricted",
      "mysql_history_file_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/mysql-logging.html 2. https://bugs.mysql.com/bug.php?id=72158"
  },
  {
    "id": "1.4",
    "title": "Verify That the MYSQL_PWD Environment Variable Is Not In Use",
    "assessment": "Automated",
    "description": "MySQL can read a default database password from an environment variable called MYSQL_PWD. Avoiding use of this environment variable can better safeguard the confidentiality of MySQL credentials.",
    "rationale": "Using the MYSQL_PWD environment variable implies MySQL credentials are stored as clear text.",
    "audit": "To assess this recommendation, use the /proc filesystem to determine if MYSQL_PWD is currently set for any process: grep MYSQL_PWD /proc/*/environ This may return one entry for the process which is executing the grep command.",
    "remediation": "Check which users and/or scripts are setting MYSQL_PWD and change them to use a more secure method. For unattended logins you should consider: 1. MySQL Configuration Editor 2. Different authentication methods (e.g., X509 certificate verification) 3. Use MySQL Enterprise LDAP plugin with Kerberos or SASL tokens. Default Value: Not set. References: 1. https://dev.mysql.com/doc/refman/5.7/en/environment-variables.html 2. https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html 3. https://dev.mysql.com/doc/refman/5.7/en/pluggable-authentication.html",
    "function_names": [
      "compute_mysql_environment_no_mysql_pwd",
      "compute_mysql_credential_no_environment_variable",
      "compute_mysql_credential_no_hardcoded_password",
      "compute_mysql_environment_no_password_exposure",
      "compute_mysql_credential_no_default_password_variable"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/environment-variables.html 2. https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html 3. https://dev.mysql.com/doc/refman/5.7/en/pluggable-authentication.html"
  },
  {
    "id": "1.5",
    "title": "Ensure Interactive Login is Disabled",
    "assessment": "Automated",
    "description": "When created, the MySQL user may have interactive access to the operating system, which means that the MySQL user could login to the host as any other user would.",
    "rationale": "Preventing the MySQL user from logging in interactively may reduce the impact of a compromised MySQL account. There is also more accountability, as accessing the operating system where the MySQL server lies will require the user's own account. Interactive access by the MySQL user is unnecessary and should be disabled. Impact: This setting will prevent the MySQL administrator from interactively logging into the operating system using the MySQL user. Instead, the administrator will need to log in using one's own account.",
    "audit": "Execute the following command to assess this recommendation: getent passwd mysql | egrep \"^.*[\\/bin\\/false|\\/sbin\\/nologin]$\" Lack of output implies a fail.",
    "remediation": "Execute one of the following commands in a terminal: usermod -s /bin/false mysql Or  usermod -s /sbin/nologin mysql",
    "function_names": [
      "database_user_interactive_login_disabled",
      "mysql_user_interactive_login_disabled",
      "database_account_interactive_login_disabled",
      "mysql_account_interactive_login_disabled",
      "database_user_shell_access_disabled",
      "mysql_user_shell_access_disabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux",
    "impact": "This setting will prevent the MySQL administrator from interactively logging into the operating system using the MySQL user. Instead, the administrator will need to log in using one's own account."
  },
  {
    "id": "1.6",
    "title": "Verify That 'MYSQL_PWD' is Not Set in Users' Profiles",
    "assessment": "Automated",
    "description": "MySQL can read a default database password from an environment variable called MYSQL_PWD.",
    "rationale": "The use of the MYSQL_PWD environment variable implies the clear text storage of MySQL credentials. Avoiding this may increase assurance that the confidentiality of MySQL credentials is preserved.",
    "audit": "To assess this recommendation check if MYSQL_PWD is set in login scripts using the following command: grep MYSQL_PWD /home/*/.{bashrc,profile,bash_profile}",
    "remediation": "Check which users and/or scripts are setting MYSQL_PWD and change them to use a more secure method. References: 1. https://dev.mysql.com/doc/refman/5.7/en/environment-variables.html",
    "function_names": [
      "mysql_user_no_mysql_pwd_env_var",
      "mysql_user_profile_no_mysql_pwd",
      "mysql_user_environment_no_mysql_pwd",
      "mysql_user_credentials_no_env_var",
      "mysql_user_no_hardcoded_password_env"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/environment-variables.html"
  },
  {
    "id": "2.1.1",
    "title": "Backup Policy in Place",
    "assessment": "Manual",
    "description": "A backup policy should be in place.",
    "rationale": "Backing up MySQL databases, including mysql, will help ensure the availability of data in the event of an incident. Without backups it might be hard to recover from an incident.",
    "audit": "Check with crontab -l if there is a backup schedule.",
    "remediation": "Create a backup policy and backup schedule.",
    "function_names": [
      "backup_policy_exists",
      "backup_policy_enabled",
      "backup_policy_retention_configured",
      "backup_policy_frequency_configured",
      "backup_policy_encryption_enabled",
      "backup_policy_versioning_enabled",
      "backup_policy_cross_region_enabled",
      "backup_policy_recovery_point_configured",
      "backup_policy_min_retention_30d",
      "backup_policy_daily_snapshots_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS"
  },
  {
    "id": "2.1.2",
    "title": "Verify Backups are Good",
    "assessment": "Manual",
    "description": "Backups should be validated on a regular basis.",
    "rationale": "Verifying that backups are occurring appropriately will help ensure the availability of data in the event of an incident. Without a well-tested backup it might be hard to recover from an incident if the backup procedure contains errors or doesn't include all required data.",
    "audit": "Check reports of backup validation tests.",
    "remediation": "Implement regular backup checks and document each check.",
    "function_names": [
      "backup_recovery_validation_periodic",
      "backup_integrity_verified_recently",
      "backup_restore_test_successful",
      "backup_validation_schedule_active",
      "backup_data_consistency_checked",
      "backup_recovery_point_objective_met",
      "backup_recovery_time_objective_met",
      "backup_validation_logs_available",
      "backup_automated_validation_enabled",
      "backup_validation_frequency_compliant"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS"
  },
  {
    "id": "2.1.3",
    "title": "Secure Backup Credentials",
    "assessment": "Manual",
    "description": "A database user with the least amount of privileges required to perform backup is needed for backup. The credentials for this user should be protected. The password, certificate and any other credentials should be protected.",
    "rationale": "When the backup credentials are not properly secured then they might be abused to gain access to the server. The backup user needs an account with many privileges, so the attacker can gain (almost) complete access to the server.",
    "audit": "Check permissions of files containing passwords and/or ssl keys.",
    "remediation": "Change file permissions.",
    "function_names": [
      "database_user_backup_credentials_encrypted",
      "database_user_backup_credentials_secure_storage",
      "database_user_backup_credentials_rotation_enabled",
      "database_user_backup_credentials_least_privilege",
      "database_user_backup_credentials_access_restricted",
      "database_user_backup_credentials_no_public_access",
      "database_user_backup_credentials_strong_password_policy",
      "database_user_backup_credentials_certificate_protected",
      "database_user_backup_credentials_audit_logging_enabled",
      "database_user_backup_credentials_secure_transfer_required"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS"
  },
  {
    "id": "2.1.4",
    "title": "The Backups Should be Properly Secured",
    "assessment": "Manual",
    "description": "The backup files will contain all data in the databases. Filesystem permissions and/or encryption should be used to prevent unauthorized users from gaining access to the backups.",
    "rationale": "Backups should be considered sensitive information. If an unauthorized user can access backups, then they have access to all data in the database. This is true for unencrypted backups and for encrypted backups if the encryption key is stored along with the backup.",
    "audit": "Check who has access to the backup files. \u2022 Are the files world-readable (e.g. rw-r--r-) o Are they stored in a world readable directory? \u2022 Is the group MySQL and/or backup specific? o If not: the file and directory must not be group readable \u2022 Are the backups stored offsite? o Who has access to the backups? \u2022 Are the backups encrypted? o Where is the encryption key stored? o Does the encryption key consist of a guessable password?",
    "remediation": "Implement encryption, properly restrict filesystem permissions, protect and backup encryption keys. References: 1. https://dev.mysql.com/doc/refman/5.7/en/innodb-backup.html",
    "function_names": [
      "database_backup_encryption_enabled",
      "database_backup_filesystem_permissions_restricted",
      "database_backup_access_control_enabled",
      "database_backup_unauthorized_access_prevented",
      "database_backup_secure_storage_enabled",
      "database_backup_immutable_retention_enabled",
      "database_backup_rotation_enabled",
      "database_backup_min_tls_1_2"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/innodb-backup.html"
  },
  {
    "id": "2.1.5",
    "title": "Point-in-Time Recovery",
    "assessment": "Manual",
    "description": "With binlogs it is possible to implement point-in-time recovery. This makes it possible to restore the changes between the last full backup and the point-in-time. Enabling binlogs is not sufficient. The binlogs need to be backed up to separate media. The restore procedure should be created and tested. The data in the binlog files may contain sensitive information which needs be stored in the proper location with restrictive permissions and may require encryption.",
    "rationale": "Using binlogs can reduce the amount of information lost when recovering from a backup. Impact: Binlogs can grow quite large and take up a large amount of space so auto remove needs to be put into place.",
    "audit": "Check if binlogs are enabled and if there is a restore procedure.",
    "remediation": "Enable binlogs and create and test a restore procedure.",
    "function_names": [
      "database_instance_binlog_backup_enabled",
      "database_instance_binlog_backup_encrypted",
      "database_instance_binlog_backup_separate_media",
      "database_instance_binlog_backup_restrictive_permissions",
      "database_instance_binlog_restore_procedure_defined",
      "database_instance_binlog_restore_procedure_tested",
      "database_instance_binlog_sensitive_data_protected"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "impact": "Binlogs can grow quite large and take up a large amount of space so auto remove needs to be put into place."
  },
  {
    "id": "2.1.6",
    "title": "Disaster Recovery (DR) Plan",
    "assessment": "Manual",
    "description": "A disaster recovery plan should be created. MySQL Cluster (group replication), MySQL Replica Sets (asynchronous replication) or both may be used. A slave in a different data center and offsite backups may be used. There should be information regarding the Recovery Time Objective (RTO), i.e., how long recovery will take, and if the recovery site has the same capacity. Additionally, delayed replicas can be a valuable part of a DR plan. Network (default) and at rest encryption should be used to protect data.",
    "rationale": "A disaster recovery strategy should be planned and formalized. Without a well tested disaster recovery plan it might not be possible to recover in time.",
    "audit": "Check if there is a disaster recovery plan",
    "remediation": "Create a disaster recovery plan References: 1. https://dev.mysql.com/doc/refman/5.7/en/group-replication-security.html",
    "function_names": [
      "mysql_cluster_group_replication_enabled",
      "mysql_replica_set_async_replication_enabled",
      "mysql_slave_different_datacenter_enabled",
      "mysql_offsite_backups_enabled",
      "mysql_recovery_time_objective_defined",
      "mysql_recovery_site_same_capacity",
      "mysql_delayed_replica_enabled",
      "mysql_network_encryption_enabled",
      "mysql_at_rest_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/group-replication-security.html"
  },
  {
    "id": "2.1.7",
    "title": "Backup of Configuration and Related Files",
    "assessment": "Manual",
    "description": "It is important to include configuration, log, key, certificates, and customized files in backups.",
    "rationale": "Including all configuration, log, key, certificates, and customized files in any backup will ensure the backup can fully restore an instance.",
    "audit": "Check if these files are in use and are saved in the backup. \u2022 Edited Configuration files (my.cnf and included files) \u2022 Files related to Key Management and Keyring (KMIP, other Key Management Services) \u2022 Audit Log Files (if not handled by other methods) \u2022 SSL files (certificates, keys) \u2022 User Defined Functions (UDFs) \u2022 Source code for customizations",
    "remediation": "Add any omitted files to the backup.",
    "function_names": [
      "backup_configuration_files_included",
      "backup_log_files_included",
      "backup_key_files_included",
      "backup_certificate_files_included",
      "backup_customized_files_included",
      "backup_all_critical_files_included",
      "backup_configuration_logs_keys_included",
      "backup_essential_files_included",
      "backup_security_files_included",
      "backup_compliance_files_included"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS"
  },
  {
    "id": "2.2",
    "title": "Dedicate the Machine Running MySQL",
    "assessment": "Manual",
    "description": "It is recommended that MySQL Server software be installed on a dedicated server. This architectural consideration affords flexibility in that the database server can be placed on a separate zone allowing access only from particular hosts and over particular protocols.",
    "rationale": "The attack surface is reduced on a server with only the underlying operating system, MySQL server software, and any security or operational tooling that may be additionally installed. A smaller attack surface reduces the probability of the data within MySQL being compromised. Impact: Care must be taken that to ensure applications or services that are required for proper operation of the operating system are not removed. Custom applications may need to be modified to accommodate database connections over the network rather than on the use (e.g., using TCP/IP connections). Additional hardware and operating system licenses may be required to make the architectural change.",
    "audit": "Verify there are no other roles enabled for the underlying operating system and that no additional applications or services unrelated to the proper operation of the MySQL server software are installed.",
    "remediation": "Remove excess applications or services and/or remove unnecessary roles from the underlying operating system.",
    "function_names": [
      "compute_instance_mysql_dedicated",
      "compute_instance_mysql_no_shared_resources",
      "compute_instance_mysql_isolated_host",
      "compute_instance_mysql_restricted_access",
      "compute_instance_mysql_single_purpose",
      "compute_instance_mysql_no_cohosted_services",
      "compute_instance_mysql_exclusive_usage",
      "compute_instance_mysql_segregated_environment"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "impact": "Care must be taken that to ensure applications or services that are required for proper operation of the operating system are not removed. Custom applications may need to be modified to accommodate database connections over the network rather than on the use (e.g., using TCP/IP connections). Additional hardware and operating system licenses may be required to make the architectural change."
  },
  {
    "id": "2.3",
    "title": "Do Not Specify Passwords in Command Line",
    "assessment": "Manual",
    "description": "When a command is executed on the command line, for example mysql -u admin -p password, the password may be visible in the user's shell/command history or in the process list.",
    "rationale": "If the password is visible in the process list or user's shell/command history, an attacker will be able to access the MySQL database using the stolen credentials. Impact: Depending on the remediation chosen, additional steps may need to be undertaken like: \u2022 Entering a password when prompted. \u2022 Ensuring the file permissions on .my.cnf is restricted yet accessible by the user. \u2022 Using mysql_config_editor to encrypt the authentication credentials in .mylogin.cnf. Additionally, not all scripts/applications may be able to use .mylogin.cnf.",
    "audit": "Check the process or task list if the password is visible. Check the shell or command history if the password is visible.",
    "remediation": "Use -p without password and then enter the password when prompted, use a properly secured .my.cnf file, or store authentication information in encrypted format in .mylogin.cnf. References: 1. https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html 2. https://dev.mysql.com/doc/refman/5.7/en/password-security-user.html",
    "function_names": [
      "compute_command_line_passwords_prohibited",
      "compute_process_passwords_exposed",
      "compute_shell_history_passwords_prohibited",
      "compute_command_passwords_visible",
      "compute_process_list_passwords_prohibited"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Depending on the remediation chosen, additional steps may need to be undertaken like: \u2022 Entering a password when prompted. \u2022 Ensuring the file permissions on .my.cnf is restricted yet accessible by the user. \u2022 Using mysql_config_editor to encrypt the authentication credentials in .mylogin.cnf. Additionally, not all scripts/applications may be able to use .mylogin.cnf.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html 2. https://dev.mysql.com/doc/refman/5.7/en/password-security-user.html"
  },
  {
    "id": "2.4",
    "title": "Do Not Reuse Usernames",
    "assessment": "Manual",
    "description": "Database user accounts should not be reused for multiple applications or users.",
    "rationale": "Utilizing unique database accounts across applications will reduce the impact of a compromised MySQL account. If a user is reused, then a compromise of this user will compromise multiple parts of the system and/or application.",
    "audit": "Each user (excluding mysql reserved users) should be linked to one of these: \u2022 system accounts \u2022 a person \u2022 an application To list users (and exclude mysql reserved users) SELECT host, user, plugin, IF(plugin = 'mysql_native_password', 'WEAK SHA1', 'STRONG SHA2') AS HASHTYPE FROM mysql.user WHERE user NOT IN ('mysql.infoschema', 'mysql.session', 'mysql.sys') AND plugin NOT LIKE 'auth%' AND plugin <> 'mysql_no_login' AND LENGTH(authentication_string) > 0 ORDER BY plugin;",
    "remediation": "Add/Remove users so that each user is only used for one specific purpose.",
    "function_names": [
      "database_user_unique_names",
      "database_user_no_reuse",
      "database_user_distinct_identifiers",
      "database_user_single_assignment",
      "database_user_exclusive_credentials"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS"
  },
  {
    "id": "2.5",
    "title": "Ensure Non-Default, Unique Cryptographic Material is in Use",
    "assessment": "Manual",
    "description": "The cryptographic material used by MySQL, such as digital certificates and encryption keys, should be used only for MySQL and only for one instance. Default cryptographic material should not be used since it is not unique to the instance.",
    "rationale": "If a cryptographic material is used on multiple MySQL instances and/or systems then a compromise of one may lead to the compromise of the network traffic of all servers which use the same cryptographic material. If an attacker gains access to shared cryptographic material, including default material, the attacker can reuse that material to impersonate the MySQL server or otherwise compromise its operations.",
    "audit": "Review all cryptographic material. If it is default, used for other MySQL instances and/or for purposes other than MySQL then this is a finding. Review the server certificate by running cd <data_dir and/or ssl_cert> sudo openssl x509 -in server-cert.pem -subject -noout | grep Auto_Generated_Server_Certificate The output for the auto generated pem will look something like: subject= /CN=MySQL_Server_5.7.36_Auto_Generated_Server_Certificate If no rows return, the check is a pass since the certificate is not MySQL auto-generated.",
    "remediation": "Generate new certificates, keys, and other cryptographic material as needed for each affected MySQL instance. References: 1. https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html",
    "function_names": [
      "mysql_instance_unique_cryptographic_material",
      "mysql_certificate_non_default",
      "mysql_key_unique_per_instance",
      "mysql_tls_certificate_unique",
      "mysql_encryption_key_non_default",
      "mysql_instance_dedicated_crypto_material",
      "mysql_certificate_instance_specific",
      "mysql_key_non_shared"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html"
  },
  {
    "id": "2.6",
    "title": "Ensure 'password_lifetime' is Less Than or Equal to '365'",
    "assessment": "Automated",
    "description": "Ensure 'password_lifetime' is Less Than or Equal to '365'",
    "rationale": "Allows additional security factors pertinent to a specific user to provide further password security; predetermined by varying security needs and usability requirements in a system or organization.",
    "audit": "The global password lifetime is set using default_password_lifetime. If the value of default_password_lifetime is greater than 0, it indicates the permitted password lifetime. Execute the following command to check the global password lifetime: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables where VARIABLE_NAME like 'default_password_lifetime'; A value greater than 365 implies a fail. When the global password lifetime is less than or equal to 365, or not configured, each user account shall be checked by executing the following command: SELECT user, host, password_lifetime from mysql.user where password_lifetime = 0 OR password_lifetime >= 365; A lack of results implies compliance. Note: A value of 0 implies the password never expires.",
    "remediation": "To configure the global password lifetime to 365 by executing the following command: set global default_password_lifetime = 365; Alternatively, configure the password lifetime for each user returned by the audit procedure by executing the following command:  ALTER USER ' <username> '@' <localhost> ' PASSWORD EXPIRE INTERVAL 365 DAY; Default Value: NULL References: 1. https://csrc.nist.gov/csrc/media/publications/sp/800-118/archive/2009-04- 21/documents/draft-sp800-118.pdf 2. https://dev.mysql.com/doc/refman/5.7/en/validate-password.html Additional Information: When a user's password_lifetime is set to NULL it takes on the value set in global default_password_lifetime variable.",
    "function_names": [
      "iam_user_password_lifetime_max_365d",
      "iam_account_password_policy_lifetime_max_365d",
      "iam_password_lifetime_compliance_365d",
      "iam_user_credentials_lifetime_max_365d",
      "iam_password_expiration_lifetime_max_365d"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://csrc.nist.gov/csrc/media/publications/sp/800-118/archive/2009-04- 21/documents/draft-sp800-118.pdf 2. https://dev.mysql.com/doc/refman/5.7/en/validate-password.html Additional Information: When a user's password_lifetime is set to NULL it takes on the value set in global default_password_lifetime variable."
  },
  {
    "id": "2.7",
    "title": "Ensure Password Complexity is Configured",
    "assessment": "Automated",
    "description": "Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. In addition, composition requirements provide no defense against common attack types such as social engineering or insecure password storage. In keeping with the overall goal of having users create a password that is not overly weak, it's best to have at least 14 characters for a password only account.",
    "rationale": "Malicious actors regularly attempt to compromise databases by attacking or guessing passwords. Stolen credentials may be used to gain access to steal information, engage in financial fraud, and more. By enforcing practical and secure policies, end user cooperation grows. In general, longer passwords are better (harder to crack), but a forced password length requirement can cause user behavior that is predictable and undesirable. Having a reasonable minimum length with no maximum character limit increases the resulting average password length used and thus increases the security of that password. Impact: Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords.",
    "audit": "Inspect the password policy settings. SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME like 'valid%password%'; Compare the results to the table below.  +--------------------------------------+---------------------------------+ | Variable_name                        | Value                           | +--------------------------------------+---------------------------------+ | validate_password_check_user_name    | ON                              | | validate_password_dictionary_file    | ' <FILENAME OF DICTIONARY FILE> ' | | validate_password_length             | 14                              | | validate_password_mixed_case_count   | 1                               | | validate_password_number_count       | 1                               | | validate_password_policy             | STRONG                          | | validate_password_special_char_count | 1                               | +--------------------------------------+---------------------------------+",
    "remediation": "If not already present in the my.cnf, add this line: plugin-load=validate_password.so Set password policies in accordance with the organizationally defined policy and security best practices: set global validate_password_check_user_name='ON'; set global validate_password_dictionary_file=' <FILENAME OF DICTIONARY FILE> '; set global validate_password_length=14; set global validate_password_policy='STRONG'; Use with care. Passwords that are too complex in nature make it harder for users to remember, leading to bad practices. set global validate_password_mixed_case_count=1; set global validate_password_special_char_count=1; set global validate_password_number_count=1; Default Value: The MySQL validate password complexity plugin is not used by default. References: 1. https://dev.mysql.com/doc/refman/5.7/en/validate-password.html",
    "function_names": [
      "iam_password_policy_min_length_14",
      "iam_password_policy_no_complexity_requirements",
      "iam_password_policy_no_reuse",
      "iam_password_policy_no_expiration",
      "iam_password_policy_no_character_requirements",
      "iam_password_policy_min_length_only",
      "iam_password_policy_no_composition_rules",
      "iam_password_policy_allow_long_passwords"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "impact": "Enforcing too much complexity or length may be difficult for users to memorize. This may cause users to use predictable patterns or other bad practices, resulting in weaker passwords.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/validate-password.html"
  },
  {
    "id": "2.8",
    "title": "Lock Out Accounts if Not Currently in Use",
    "assessment": "Manual",
    "description": "If users with accounts will not be using their account for some time, to reduce the risk of attacks or inappropriate account usage or if suspicions exist that an account might be under attack, disabling the account will secure it and once it's ready to resume use it can easily be re-enabled.",
    "rationale": "Only have active accounts that will be used.",
    "audit": "Review the locked status of accounts: select user, host, account_locked from mysql.user; Accounts not in use and MySQL Reserved accounts should show as locked (Y).",
    "remediation": "To lock accounts - example: ALTER USER 'jeffrey'@'localhost' ACCOUNT LOCK; To unlock accounts - example ALTER USER 'jeffrey'@'localhost' ACCOUNT UNLOCK; Note: Works for CREATE as well. It is good practice to LOCK an account if created ahead of time. Default Value: Accounts are unlocked by default. References: 1. https://dev.mysql.com/doc/refman/5.7/en/account-locking.html Additional Information: When a client attempts to connect to a locked account, the attempt fails.  Access denied for user 'user_name'@'host_name'. Account is locked. The server increments the Locked_connects status variable that indicates the number of attempts to connect to a locked account. To view the Locked_conects execute this query: show global status like 'Locked_connects'; The error log will contain the message ER_ACCOUNT_HAS_BEEN_LOCKED. The Oracle MySQL documentation, at the referenced link, provides this additional information: \"The account-locking capability depends on the presence of the account_locked column in the mysql.user system table. For upgrades from MySQL versions older than 5.7.6, perform the MySQL upgrade procedure to ensure that this column exists. See Section 2.11, \u201cUpgrading MySQL\u201d. For nonupgraded installations that have no account_locked column, the server treats all accounts as unlocked, and using the ACCOUNT LOCK or ACCOUNT UNLOCK clauses produces an error.\"",
    "function_names": [
      "iam_user_account_locked_unused",
      "iam_user_inactive_lockout_enabled",
      "iam_user_unused_account_disabled",
      "iam_user_dormant_account_locked",
      "iam_user_inactive_account_secure",
      "iam_user_account_lockout_policy_enabled",
      "iam_user_unused_account_protected",
      "iam_user_inactive_account_disabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/account-locking.html Additional Information: When a client attempts to connect to a locked account, the attempt fails.  Access denied for user 'user_name'@'host_name'. Account is locked. The server increments the Locked_connects status variable that indicates the number of attempts to connect to a locked account. To view the Locked_conects execute this query: show global status like 'Locked_connects'; The error log will contain the message ER_ACCOUNT_HAS_BEEN_LOCKED. The Oracle MySQL documentation, at the referenced link, provides this additional information: \"The account-locking capability depends on the presence of the account_locked column in the mysql.user system table. For upgrades from MySQL versions older than 5.7.6, perform the MySQL upgrade procedure to ensure that this column exists. See Section 2.11, \u201cUpgrading MySQL\u201d. For nonupgraded installations that have no account_locked column, the server treats all accounts as unlocked, and using the ACCOUNT LOCK or ACCOUNT UNLOCK clauses produces an error.\""
  },
  {
    "id": "2.9",
    "title": "Ensure AES Encryption Mode for AES_ENCRYPT/AES_DECRYPT is Configured Correctly",
    "assessment": "Automated",
    "description": "A block encryption mode with a Cipher Block Chaining (CBC) mode value and key length of 256 is recommended when using the AES_ENCRYPT() and AES_DECRYPT() functions for encryption.",
    "rationale": "The default for backward compatibility on upgraded MySQL databases is aes-128-ecb. Using 128-bit keys does not provide sufficient security. Regardless of whether breaking the lowest level is beyond existing technology, larger key sizes are needed to better protect data and satisfy regulations. Impact: Configuring a key length of 256 may impact backwards compatibility.",
    "audit": "Run the following statement: select @@block_encryption_mode; A value other than aes-256-* is a fail. Where * is one of the following - ECB, CBC, CFB1, CFB8, CFB128, OFB",
    "remediation": "Add the following lines to the MySQL server's /etc/my.cnf: For example, if Block Encryption Mode for aes-256 CBC block_encryption_mode=aes-256-cbc Default Value: aes-128-ecb  References: 1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-block-encryption-mode.html",
    "function_names": [
      "database_function_aes_encryption_mode_cbc",
      "database_function_aes_key_length_256",
      "database_function_aes_encryption_configured_correctly",
      "database_function_aes_cbc_mode_enabled",
      "database_function_aes_encryption_min_key_length_256"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "impact": "Configuring a key length of 256 may impact backwards compatibility.",
    "references": "1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-block-encryption-mode.html"
  },
  {
    "id": "2.10",
    "title": "Ensure Socket Peer-Credential Authentication is Used Appropriately",
    "assessment": "Manual",
    "description": "The server-side auth_socket authentication plugin, authenticates clients that connect to the MySQL server from the local host through the Unix socket file. Users authenticated by the auth_socket need not specify a password when connecting to the server. However, users authenticated by the auth_socket plugin are restricted from connecting remotely; they can only connect from the local host through the Unix socket file. This method is only suitable in situations where the server administrator OS account access is restricted.",
    "rationale": "This method may be desirable in specific cases, including: \u2022 The Linux system where MySQL is running is dedicated to the MySQL server and only the MySQL DBA and OS Admin have access. \u2022 When control over user authentication is centralized in the operating system. \u2022 It is desirable that audit trails in the database and operating system can use the same user names. \u2022 For certain other narrow installation use cases auth_socket may be desirable. \u2022 Only local connections for a user. Impact: Things to consider when using the operating system to authenticate users: \u2022 The user must have an operating system account on the computer which must be accessed. \u2022 If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem. \u2022 When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for auth_socket. \u2022 This will not work where distributed connections are required.",
    "audit": "To assess this recommendation run the following: SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'auth%'; To determine users who can use auth socket: select user, host, plugin from mysql.user where plugin = 'auth_socket'; If this is enabled and the organization does not allow use of this feature, this is a fail. If host is not the localhost or an unauthorized user is listed, this is a fail.",
    "remediation": "Add these options under the [mysqld] option group in the MySQL /etc/my.cnf: plugin-load-add=auth_socket.so auth_socket=FORCE_PLUS_PERMANENT For example: For an OS user which can login to MySQL using auth_socket: CREATE USER '  i'@'localhost' IDENTIFIED WITH auth_socket; The user can then login using: mysql -u <user> References: 1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-configure-authentication.html#secure-deployment-auth-socket",
    "function_names": [
      "mysql_user_auth_socket_enabled",
      "mysql_user_no_remote_auth_socket",
      "mysql_auth_socket_localhost_only",
      "mysql_auth_socket_passwordless_restricted",
      "mysql_auth_socket_unix_socket_required",
      "mysql_auth_socket_admin_account_restricted"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "impact": "Things to consider when using the operating system to authenticate users: \u2022 The user must have an operating system account on the computer which must be accessed. \u2022 If a user has logged in using this method and steps away from the terminal, another user could easily log in because this user does not need any passwords or credentials. This could pose a serious security problem. \u2022 When an operating system is used to authenticate database users, managing distributed database environments and database links requires special care. Special care must also be taken not to leave such a terminal unlocked and unattended. Hence, we recommend that you carefully evaluate your requirements before opting for auth_socket. \u2022 This will not work where distributed connections are required.",
    "references": "1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-configure-authentication.html#secure-deployment-auth-socket"
  },
  {
    "id": "2.11",
    "title": "Ensure MySQL is Bound to an IP Address",
    "assessment": "Automated",
    "description": "By default, the MySQL server accepts TCP/IP connections from MySQL user accounts on all server host IPv6 and IPv4 interfaces. You can make this configuration more restrictive by setting the bind_address configuration option to a specific IPv4 or IPv6 address so that the server only accepts TCP/IP connections on that address.",
    "rationale": "Limiting the IP address provides additional controls and restrictions on how client applications can connect to MySQL. If not configured to a specific IP all IPs for this server can be used to connect to MySQL.",
    "audit": "Run the following statement: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME = 'bind_address'; No rows returned implies a fail.",
    "remediation": "For example, to have the MySQL server only accept connections on a specific IPv4 address, add an entry similar to this under the [mysqld] option group in the MySQL /etc/my.cnf: bind_address=192.0.2.24 In this case, clients can connect to the server using --host=192.0.2.24. Connections on other server host addresses are not permitted. Default Value: Not set. References: 1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-secure-connections.html",
    "function_names": [
      "mysql_instance_ip_bound",
      "mysql_instance_bind_address_restricted",
      "mysql_instance_network_restricted",
      "mysql_instance_ipv4_bound",
      "mysql_instance_ipv6_bound",
      "mysql_instance_no_wildcard_bind",
      "mysql_instance_specific_ip_bound",
      "mysql_instance_interface_restricted"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-secure-connections.html"
  },
  {
    "id": "2.12",
    "title": "Limit Accepted Transport Layer Security (TLS) Versions",
    "assessment": "Automated",
    "description": "MySQL supports multiple protocols of TLS. The higher the version the stronger the security and/or better the performance.",
    "rationale": "Requiring clients attempting to connect to MySQL to use higher versions of TLS to better protect data in transit. Impact: Connections attempting to use an unsupported version of TLS or Cipher will fail.",
    "audit": "To list the versions of TLS the server accepts, run the following statement: select @@tls_version; If the list includes TLSv1 and/or TLSv1.1, this is a fail. To view current connections and the version of SSL in use run: select * from performance_schema.status_by_thread where VARIABLE_NAME like 'ssl_version'; If the list includes, TLSv1 and/or TLSv1.1, this is a fail. MySQL negotiates to the highest version of TLS, if connections are using older TLS versions, those clients will need to be upgraded to newer MySQL Connectors or community drivers that support newer versions of TLS.",
    "remediation": "Set the version(s) of TLS you wish to accept in mysql.conf specify TLS and Ciphers. For example to only accept TLS 1.3 set tls_version in my.conf: tls_version=TLSv1.3 If TLS 1.3 is not supported on the Operating System then set to TLS 1.2:  tls_version=TLSv1.2 Note: with this setting, only clients that support the specified TLS version(s) are able to establish an encrypted connection to the server. Default Value: All TLS and cipher versions are enabled by default. References: 1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-secure-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols- ciphers.html#encrypted-connection-protocol-configuration",
    "function_names": [
      "mysql_instance_tls_min_version",
      "mysql_instance_tls_1_2_enabled",
      "mysql_instance_weak_tls_disabled",
      "mysql_instance_tls_versions_restricted",
      "mysql_instance_tls_1_3_required",
      "mysql_instance_insecure_tls_protocols_blocked",
      "mysql_instance_tls_version_compliance",
      "mysql_instance_tls_1_0_1_1_disabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "impact": "Connections attempting to use an unsupported version of TLS or Cipher will fail.",
    "references": "1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-secure-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols- ciphers.html#encrypted-connection-protocol-configuration"
  },
  {
    "id": "2.13",
    "title": "Require Client-Side Certificates (X.509)",
    "assessment": "Automated",
    "description": "Client-side certificates may be used as proof of identity as well as to encrypt data in transit.",
    "rationale": "Requiring client-side certificates provides additional validation of a user's identity, thus increasing the level of security, while also providing strong encryption.",
    "audit": "Run the following statement select user, host, ssl_type from mysql.user; If ssl_type returns X509 or SSL, client-side certificate details must be provided to connect.",
    "remediation": "Create or Alter users using the REQUIRE X509. For example: CREATE USER 'newuser2'@'%' IDENTIFIED BY <password> require x509; For accounts created with a REQUIRE X509 clause, clients must specify at least --ssl- cert and --ssl-key. In addition, --ssl-ca (or --ssl-capath) is recommended so that the public certificate provided by the server can be verified. For example: mysql --ssl-ca=ca.pem \\ --ssl-cert=client-cert.pem \\ --ssl-key=client-key.pem Additional Information: The audit procedure excludes these internal user accounts from evaluation because, by default, they are created with an invalid password and are locked to disallow access. \u2022 \u2018mysql.infoschema\u2019@\u2019localhost\u2019 \u2022 \u2018mysql.session\u2019@\u2019localhost\u2019 \u2022 \u2018mysql.sys\u2019@\u2019localhost\u2019",
    "function_names": [
      "cloud_cdn_distribution_client_certificate_required",
      "cloud_cdn_distribution_client_certificate_auth_enabled",
      "cloud_cdn_distribution_client_certificate_tls_enabled",
      "cloud_cdn_distribution_client_certificate_x509_required",
      "cloud_cdn_distribution_client_certificate_auth_min_tls_1_2",
      "cloud_cdn_distribution_client_certificate_auth_all_regions",
      "cloud_cdn_distribution_client_certificate_auth_over_90d",
      "cloud_cdn_distribution_client_certificate_auth_enabled_all_endpoints"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS"
  },
  {
    "id": "2.14",
    "title": "Ensure Only Approved Ciphers are Used",
    "assessment": "Automated",
    "description": "MySQL supports multiple encryption ciphers. Ciphers can vary in strength, speed and overhead.",
    "rationale": "Requiring clients attempting to connect to MySQL to use strong ciphers protects data in transit. Impact: Connections attempting to use an unsupported cipher will fail.",
    "audit": "Run the following statement: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME='ssl_cipher'; If ssl_cipher is not set to ECDHE-ECDSA-AES128-GCM-SHA256, this is a fail.",
    "remediation": "Set ssl_cipher in the my.cnf to an approved cipher suite: ssl_cipher='ECDHE-ECDSA-AES128-GCM-SHA256' References: 1. https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols- ciphers.html#encrypted-connection-cipher-configuration",
    "function_names": [
      "mysql_instance_approved_ciphers_used",
      "mysql_database_approved_ciphers_used",
      "mysql_connection_approved_ciphers_used",
      "mysql_server_approved_ciphers_used",
      "mysql_tls_approved_ciphers_used",
      "mysql_ssl_approved_ciphers_used",
      "mysql_network_approved_ciphers_used",
      "mysql_encryption_approved_ciphers_used"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "impact": "Connections attempting to use an unsupported cipher will fail.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-protocols- ciphers.html#encrypted-connection-cipher-configuration"
  },
  {
    "id": "2.15",
    "title": "Implement Connection Delays to Limit Failed Login Attempts",
    "assessment": "Automated",
    "description": "MySQL Server can enable administrators to introduce an increasing delay in server response to clients after a certain number of consecutive failed connection attempts.",
    "rationale": "Delaying connection attempts provides a deterrent that slows down brute force attacks that attempt to access MySQL user accounts.",
    "audit": "Determine if the plugins for delaying connections are installed. SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS WHERE PLUGIN_NAME LIKE 'connection%'; Two rows should be returned showing ACTIVE status. CONNECTION_CONTROL                       | ACTIVE CONNECTION_CONTROL_FAILED_LOGIN_ATTEMPTS | ACTIVE If both plugins are not active, this is a fail. Next assess the setting for the connection controls by running SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'connection_control%'; Time doubling throttling (in minutes) between each retry (0, 1, 2, 4, 8, etc.) with a permanent account lockout (IT reset required) after 12 retries. If connection_control_failed_connections_threshold is less than 5 (attempts), this is a fail. If connection_control_min_connection_delay is less than 60000 (ms - 1 minute), this is a fail. Max delay connection_control_max_connection_delay is 0 or less than 1920000 (ms, 32 minutes) a, this is a fail. Finally, assess the failed login attempts.  select host, user, JSON_EXTRACT(user_attributes, '$.Password_locking.failed_login_attempts') as failed_login_attempts from mysql.user; If failed login attempts is less than 12 this is a fail.",
    "remediation": "Add the following lines to my.cnf: [mysqld] plugin-load-add=connection_control.so connection-control=FORCE_PLUS_PERMANENT connection-control-failed-login-attempts=FORCE_PLUS_PERMANENT connection_control_failed_connections_threshold=5 connection_control_min_connection_delay=60000 connection_control_max_connection_delay=1920000 Delays are in milliseconds for server response to failed connection attempt. \u2022 60000 (ms - 1 minute) \u2022 1920000 (ms, 32 minutes) For each user set ALTER USER <user> FAILED_LOGIN_ATTEMPTS 12; References: 1. https://dev.mysql.com/doc/refman/5.7/en/connection-control.html",
    "function_names": [
      "mysql_server_connection_failed_attempt_delay_enabled",
      "mysql_server_connection_failed_attempt_delay_configured",
      "mysql_server_connection_failed_attempt_delay_min_threshold",
      "mysql_server_connection_failed_attempt_delay_max_threshold",
      "mysql_server_connection_failed_attempt_delay_incremental",
      "mysql_server_connection_failed_attempt_delay_lockout_enabled",
      "mysql_server_connection_failed_attempt_delay_lockout_duration",
      "mysql_server_connection_failed_attempt_delay_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/connection-control.html"
  },
  {
    "id": "3.1",
    "title": "Ensure 'datadir' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "The data directory is the location of the MySQL databases.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL database. If someone other than the MySQL user is allowed to read files from the data directory, it may be possible to read data from the mysql.user table which contains passwords. Additionally, the ability to create files can lead to denial of service, or might otherwise allow someone to gain access to specific data by manually creating a file with a view definition.",
    "audit": "Perform the following steps to assess this recommendation: \u2022 Execute the following SQL statement to determine the Value of datadir show variables where variable_name = 'datadir'; Or SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'datadir'; \u2022 Execute the following command at a terminal prompt sudo ls -ld <datadir> | grep \"drwxr-x---.*mysql.*mysql\" Lack of output implies a fail.",
    "remediation": "Execute the following commands at a terminal prompt:  chmod 750 <datadir> chown mysql:mysql <datadir> References: 1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html",
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html"
  },
  {
    "id": "3.2",
    "title": "Ensure 'log_bin_basename' Files Have Appropriate Permissions",
    "assessment": "Automated",
    "description": "MySQL can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MySQL user. Additionally, using secure key management and at rest MySQL encryption can further protect data from OS users.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL logs. Impact: Changing the permissions and ownership of the relay logs and binary log files might have impact on external tools. If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MySQL service, then this might break replication. The binary log file can be used for point-in-time recovery so this can also affect backup, restore, and disaster recovery procedures.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of log_bin_basename show variables like 'log_bin_basename'; 2. Execute the following command at a terminal prompt to list all non-compliant log_bin_basename.* file permissions  ls -l | egrep \"^-(?![r|w]{2}-[r|w]{2}---- .\\*mysql\\s\\*mysql).\\*<log_bin_basename>.\\*$ Lack of output implies compliance.",
    "remediation": "Execute the following command for each log file location requiring corrected permissions and ownership: chmod 660 <log file> chown mysql:mysql <log file> References: 1. https://dev.mysql.com/doc/refman/5.7/en/password-logging.html 2. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html",
    "function_names": [
      "mysql_log_file_permissions_restricted",
      "mysql_log_bin_basename_permissions_secure",
      "mysql_log_file_ownership_correct",
      "mysql_log_file_encryption_enabled",
      "mysql_log_file_access_controlled",
      "mysql_log_file_secure_key_management",
      "mysql_log_file_at_rest_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Changing the permissions and ownership of the relay logs and binary log files might have impact on external tools. If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MySQL service, then this might break replication. The binary log file can be used for point-in-time recovery so this can also affect backup, restore, and disaster recovery procedures.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/password-logging.html 2. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html"
  },
  {
    "id": "3.3",
    "title": "Ensure 'log_error' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MySQL can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MySQL user. Additionally, using secure key management and at rest MySQL encryption can further protect data from OS users. Much of the information about the state of MySQL exists in MySQL, the MySQL performance_schema or informations_schema. In cases where the information you need is within a running MySQL, use these methods as they are more secure as do not require OS login and access.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL logs. Impact: Changing the permissions of the error log files might have impact on monitoring tools which use an error log file adapter.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of log_error: show variables like 'log_error'; 2. Execute the following command at a terminal prompt to list all non-compliant <log_error> .* file permissions: ls -l /usr/local/mysql/data/mysqld.local.err | grep '^-rw------- .*mysql.*mysql.*$' Lack of output implies a fail.",
    "remediation": "Execute the following command for each log file location requiring corrected permissions and ownership: chmod 600 <log file> chown mysql:mysql <log file> References: 1. https://dev.mysql.com/doc/refman/5.7/en/error-log.html 2. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html",
    "function_names": [
      "mysql_log_error_permissions_restricted",
      "mysql_log_error_ownership_secure",
      "mysql_log_error_access_controlled",
      "mysql_log_error_os_permissions_secure",
      "mysql_log_error_file_protected",
      "mysql_log_error_encryption_enabled",
      "mysql_log_error_key_management_secure",
      "mysql_log_error_at_rest_encrypted",
      "mysql_log_error_os_access_minimized",
      "mysql_log_error_information_schema_used"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Changing the permissions of the error log files might have impact on monitoring tools which use an error log file adapter.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/error-log.html 2. https://dev.mysql.com/doc/mysql-secure-deployment-guide/5.7/en/secure- deployment-permissions.html"
  },
  {
    "id": "3.4",
    "title": "Ensure 'slow_query_log' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MySQL can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log, general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MySQL user. Additionally, using secure key management and at rest MySQL encryption can further protect data from OS users. Much of the information about the state of MySQL exists in MySQL, the MySQL performance_schema or informations_schema. If you can get the information you need from within MySQL that is more secure as it does not require OS access. If you are not going to use log files it is best to first disable (don\u2019t enable) and remove any prior logs.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL logs. Impact: Changing the permissions of the log files may impact monitoring tools which use a log file adapter. Also, the slow query log can be used for performance analysis by application developers. The information about the performance exists in MySQL performance_schema or sys schema views. In cases where the information you need is within a running MySQL, disable the slow query log and instead use these methods as they are more secure and do not require OS login and access.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of slow_query_log: show variables like 'slow_query_log'; Best for the slow query log to be disabled indicated by OFF.  2. Execute the following SQL statement to determine the location of slow_query_log_file: show variables like 'slow_query_log_file'; 3. Execute the following command at a terminal prompt to list non-compliant <slow_query_log_file>.* file permissions: ls -l | egrep \"^-(?![r|w]{2}-[r|w]{2}---- .*mysql\\s*mysql).*<slow_query_log_file>.*$ If the slow query log is enabled, lack of output implies compliance. If the slow query log is disabled, remove any old slow query log files.",
    "remediation": "Set slow query log to OFF (instead use SYS schema views or query Performance_Schema) SET @@GLOBAL.slow_query_log = OFF; If slow query is enabled, execute the following command to correct permissions and ownership: chmod 660 <log file> chown mysql:mysql <log file> Default Value: Slow query log is off by default. References: 1. https://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html",
    "function_names": [
      "mysql_slow_query_log_restricted_permissions",
      "mysql_log_file_secure_ownership",
      "mysql_slow_query_log_disabled_unused",
      "mysql_log_file_encryption_enabled",
      "mysql_log_file_os_access_restricted",
      "mysql_log_file_secure_key_management",
      "mysql_log_file_removed_unused",
      "mysql_log_file_performance_schema_used",
      "mysql_log_file_information_schema_used",
      "mysql_log_file_os_access_minimized"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Changing the permissions of the log files may impact monitoring tools which use a log file adapter. Also, the slow query log can be used for performance analysis by application developers. The information about the performance exists in MySQL performance_schema or sys schema views. In cases where the information you need is within a running MySQL, disable the slow query log and instead use these methods as they are more secure and do not require OS login and access.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html"
  },
  {
    "id": "3.5",
    "title": "Ensure 'relay_log_basename' Files Have Appropriate Permissions",
    "assessment": "Automated",
    "description": "MySQL can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log (which can be encrypted), general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MySQL user. Additionally, using secure key management and at rest MySQL encryption can further protect data from OS users.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL logs. Impact: If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MySQL service, then this might break replication. The binary log file can be used for point in time recovery so this can also affect backup, restore and disaster recovery procedures.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Value of relay_log_basename: show variables like 'relay_log_basename'; 2. Execute the following command at a terminal prompt to list non-compliant <relay_log_basename>.* file permissions: ls -l | egrep \"^-(?![r|w]{2}-[r|w]{2}---- .*mysql\\s*mysql).*<relay_log_basename>.*$ Lack of output implies compliance.",
    "remediation": "Execute the following command for each log file location requiring corrected permissions and ownership: chmod 660 <log file> chown mysql:mysql <log file> Default Value: <datadir> + '/' + <hostname> + '-relay-bin'",
    "function_names": [
      "mysql_log_file_permissions_secure",
      "mysql_relay_log_basename_permissions_secure",
      "mysql_log_file_ownership_correct",
      "mysql_log_file_encryption_enabled",
      "mysql_log_file_access_restricted",
      "mysql_relay_log_encryption_enabled",
      "mysql_log_file_key_management_secure"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "If the permissions on the relay logs and binary log files are accidentally changed to exclude the user account which is used to run the MySQL service, then this might break replication. The binary log file can be used for point in time recovery so this can also affect backup, restore and disaster recovery procedures."
  },
  {
    "id": "3.6",
    "title": "Ensure 'general_log_file' Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "MySQL can operate using a variety of log files, each used for different purposes. These are the binary log (which can be encrypted), error log, slow query log, relay log (which can be encrypted), general log, and in the enterprise edition, the audit log (which can be encrypted). Because these are files on the host operating system, they are subject to the permissions and ownership structure provided by the host and may be accessible by users other than the MySQL user. Additionally, using secure key management and at rest MySQL encryption can further protect data from OS users. Much of the information about the state of MySQL exists in MySQL, the MySQL performance_schema or informations_schema. If you can get the information you need from within MySQL that is more secure as it does not require OS access. If you are not going to use log files it is best to first disable (don\u2019t enable) and remove any prior logs.",
    "rationale": "Limiting the accessibility, or existence, of these log files will protect the confidentiality, integrity, and availability of the MySQL logs. Impact: Changing the permissions of the general log files may impact monitoring tools which use a log file adapter.",
    "audit": "Perform the following steps to assess this recommendation: 1. Execute the following SQL statement to determine the Values of general_log and general_log_file: select @@general_log, @@general_log_file; With a general_log value of 0 or OFF, indicates the log is disabled. If 1 or ON it is enabled. 2. Whether the value is 0, OFF, 1 or ON execute the following command at a terminal prompt to list non-compliant <general_log_file>.* file permissions:  ls -l <general_log_file> If general_log is 0 or OFF (disabled) and the log file exists, remove the old general log file. If general_log is 1 or ON (enabled) review the permissions ls -l <general_log_file> grep '^-rw-------.*mysql.*mysql' Lack of output implies compliance.",
    "remediation": "If you can, use MySQL SYS, PERFORMANCE_SCHEMA, or MySQL Auditing as these are more secure options. By default the general_log is disabled (0 or OFF). It's most secure to disable the general_log. To disable the general_log_file: SET @@GLOBAL.GENERAL_LOG=OFF; If you must use general_log then assure the permissions are correct. Execute the following command for each log file location requiring corrected permissions and ownership: chmod 600 <general_log_file> chown mysql:mysql <general_log_file> Default Value: The variable general_log is set to OFF by default. The variable general_log_file is set to <host_name> .log by default. References: 1. https://dev.mysql.com/doc/refman/5.7/en/query-log.html",
    "function_names": [
      "mysql_log_file_secure_permissions",
      "mysql_general_log_file_restricted_access",
      "mysql_log_file_ownership_valid",
      "mysql_log_file_encryption_enabled",
      "mysql_log_file_os_access_disabled",
      "mysql_log_file_removed_if_unused",
      "mysql_log_file_performance_schema_used",
      "mysql_log_file_information_schema_used",
      "mysql_log_file_secure_key_management",
      "mysql_log_file_at_rest_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Changing the permissions of the general log files may impact monitoring tools which use a log file adapter.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/query-log.html"
  },
  {
    "id": "3.7",
    "title": "Ensure SSL Key Files Have Appropriate Permissions",
    "assessment": "Automated",
    "description": "When configured to use SSL/TLS, MySQL relies on Secure Sockets Layer (SSL) key files, which are stored on the host's filesystem. These SSL key files are subject to the host's permissions and ownership structure. MySQL 5.7 provides ways to create the SSL certificate, SSL key files and RSA key-pair files required to support encrypted connections using SSL and secure password exchange using RSA over unencrypted connections, if those files are missing the server will attempt to autogenerate these files at startup if compiled with OpenSSL.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL database and the communication with the client. If the contents of the SSL key file are known to an attacker, he or she might impersonate the server. This can be used for a man-in-the-middle attack. Depending on the SSL cipher suite, the key might also be used to decipher previously captured network traffic. Impact: If the permissions or ownership for the SSL key file are configured incorrectly, this can cause SSL to be disabled when MySQL is restarted or can cause MySQL not to start at all. If other applications are using the same key pair, then changing the permissions or ownership of the SSL key file will affect this application. If this were to occur a new key pair must be generated for MySQL.",
    "audit": "Perform the following steps to assess this recommendation: 1. Locate the SSL keys and certs in use by executing the following SQL statement. To show all ssl variables:  SELECT VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME RLIKE '^.*ssl_(ca|capath|cert|crl|crlpath|key)$' AND VARIABLE_VALUE <> ''; Note: Any mysqlx_% values that are null default to the classic protocols equivalent value. 2. Execute the following commands at a terminal prompt to list non-compliant <ssl_file> file permissions: ls -l | egrep \"^-(?!r-{8}.*mysql\\s*mysql).* <ssl_file> .*$\" Lack of output implies compliance",
    "remediation": "Execute the following commands at a terminal prompt to remediate these settings using the Value from the audit procedure: chown mysql:mysql <ssl_file> chmod 400 <ssl_file> References: 1. https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/creating-ssl-rsa-files-using-mysql.html Additional Information: If SSL is not configured this recommendation is not applicable. By default MySQL enables SSL. Using SSL is highly recommended.",
    "function_names": [
      "mysql_ssl_key_file_permissions_restricted",
      "mysql_ssl_key_file_ownership_correct",
      "mysql_ssl_certificate_file_permissions_restricted",
      "mysql_rsa_key_file_permissions_restricted",
      "mysql_ssl_key_file_auto_generation_disabled",
      "mysql_ssl_key_file_secure_ownership",
      "mysql_ssl_key_file_read_write_restricted",
      "mysql_ssl_key_file_group_access_restricted",
      "mysql_ssl_key_file_world_access_restricted",
      "mysql_ssl_key_file_permissions_configured"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "If the permissions or ownership for the SSL key file are configured incorrectly, this can cause SSL to be disabled when MySQL is restarted or can cause MySQL not to start at all. If other applications are using the same key pair, then changing the permissions or ownership of the SSL key file will affect this application. If this were to occur a new key pair must be generated for MySQL.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/encrypted-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/creating-ssl-rsa-files-using-mysql.html Additional Information: If SSL is not configured this recommendation is not applicable. By default MySQL enables SSL. Using SSL is highly recommended."
  },
  {
    "id": "3.8",
    "title": "Ensure Plugin Directory Has Appropriate Permissions",
    "assessment": "Automated",
    "description": "The plugin directory is the location of the MySQL plugins. Plugins are storage engines or user defined functions (UDFs).",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of the MySQL database. If someone can modify plugins then these plugins might be loaded when the server starts and the code will get executed. Impact: Users other than the MySQL user will no longer be able to update and add/remove plugins unless they're able to switch to the MySQL user.",
    "audit": "To assess this recommendation, execute the following SQL statement to discover the Value of plugin_dir: show variables where variable_name = 'plugin_dir'; Then, execute the following command at a terminal prompt (using the discovered plugin_dir Value) to determine the permissions and ownership. ls -ld <plugin_dir Value> | grep \"dr-xr-x---\\|dr-xr-xr--\" | grep \"plugin\" Lack of output implies a fail. Note: Permissions are intended to be either 550 or 554.",
    "remediation": "To remediate these settings, execute the following commands at a terminal prompt using the plugin_dir Value from the audit procedure. MySQL server must not be allowed to write to this location. chmod 550 <plugin_dir Value> #(or use 554) chown mysql:mysql <plugin_dir Value> References: 1. http://dev.mysql.com/doc/refman/5.7/en/install-plugin.html",
    "function_names": [
      "mysql_plugin_directory_permissions_restricted",
      "mysql_plugin_directory_owner_root",
      "mysql_plugin_directory_group_root",
      "mysql_plugin_directory_mode_750",
      "mysql_plugin_directory_no_world_writable",
      "mysql_plugin_directory_no_world_readable",
      "mysql_plugin_directory_no_world_executable",
      "mysql_plugin_directory_no_unauthorized_users"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Users other than the MySQL user will no longer be able to update and add/remove plugins unless they're able to switch to the MySQL user.",
    "references": "1. http://dev.mysql.com/doc/refman/5.7/en/install-plugin.html"
  },
  {
    "id": "3.9",
    "title": "Secure MySQL Keyring",
    "assessment": "Automated",
    "description": "When configured to use a Keyring plugin, internal MySQL components and plugins may securely store sensitive information for later retrieval. Associated files for the selected keyring type should have proper permissions.",
    "rationale": "Limiting the accessibility of these objects will protect the confidentiality, integrity, and availability of internal MySQL component and plugin information.",
    "audit": "Perform the following steps applicable to the plugin in use to assess this recommendation: Keyring File Plugin (Least Secure - for pre-production testing) 1. Find the keyring_file_data value ( <keyring_file_data_path> ) by executing the following statement: grep -Po '(?<=^keyring_file_data=).+$' /etc/mysql/my.cnf 2. Verify permissions are 750 for mysql:mysql for <keyring_file_data_path> Keyring Encrypted File Plugin 1. Find the keyring_encrypted_file_data value ( <keyring_encrypted_file_data_path> ) by executing the following statement: grep -Po '(?<=^keyring_encrypted_file_data=).+$' /etc/mysql/my.cnf 2. Verify permissions are 750 for mysql:mysql for <keyring_encrypted_file_data_path> 3. Verify a secure method for provisioning the passphrase for the keyring_encrypted_file_data is in place. Keyring OKV / KMIP compatible Plugin 1. Find the keyring_okv value ( <keyring_okv_path> ) by executing the following statement:  grep -Po '(?<=^keyring_okv=).+$' /etc/mysql/my.cnf 2. Verify permissions are 750 for mysql:mysql for <keyring_okv_path> AWS Key Management Service 1. Find the keyring_aws_conf_file and keyring_aws_data_file values by executing the following statement: grep -Po '(?<=^keyring_aws.*=).+$' /etc/mysql/my.cnf 2. Verify permissions are 750 for mysql:mysql for keyring_aws_conf_file and keyring_aws_data_file Additionally, if no keyring plugin or keyring file plugin is configured, this is a fail.",
    "remediation": "If no keyring plugin or keyring file plugin is configured, instructions for configuring a keyring plugin or keyring file plugin may found at: \u2022 KMIP - https://dev.mysql.com/doc/refman/5.7/en/keyring-okv- plugin.html#keyring-okv-configuration \u2022 AWS - https://dev.mysql.com/doc/refman/5.7/en/keyring-aws- plugin.html#keyring-aws-plugin-configuration Execute the following command for each Keyring file location requiring corrected permissions: chmod 750 <keyring file> chown mysql:mysql <keyring file> References: 1. https://dev.mysql.com/doc/refman/5.7/en/keyring-system-variables.html Additional Information: Use of keyring_file is intended for development and testing and will not pass most security regulatory requirements.",
    "function_names": [
      "mysql_keyring_permissions_secure",
      "mysql_keyring_plugin_enabled",
      "mysql_keyring_files_protected",
      "mysql_keyring_encryption_enabled",
      "mysql_keyring_access_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/keyring-system-variables.html Additional Information: Use of keyring_file is intended for development and testing and will not pass most security regulatory requirements."
  },
  {
    "id": "4.1",
    "title": "Ensure Latest Security Patches Are Applied",
    "assessment": "Manual",
    "description": "Periodically, updates to MySQL server are released to resolve bugs, mitigate vulnerabilities, and provide new features. It is recommended that MySQL installations are up to date with the latest security updates.",
    "rationale": "Maintaining currency with MySQL patches will help reduce risk associated with known vulnerabilities present in the MySQL server. Without the latest security patches MySQL might have known vulnerabilities which might be used by an attacker to gain access. Impact: To update the MySQL server a restart is required.",
    "audit": "Execute the following SQL statement to identify the MySQL server version: SHOW VARIABLES WHERE Variable_name LIKE \"version\"; Now compare the version with the security announcements from Oracle and/or the OS if the OS packages are used.",
    "remediation": "Install the latest patches for your version or upgrade to the latest version. References: 1. http://www.oracle.com/technetwork/topics/security/alerts-086861.html 2. https://dev.mysql.com/doc/relnotes/mysql/5.7/en/ 3. https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=over view&search_type=all&cpe_vendor=cpe%3A%2F%3Aoracle&cpe_product=cpe %3A%2F%3Aoracle%3Amysql&cpe_version=cpe%3A%2F%3Aoracle%3Amysql %3A5.7.0",
    "function_names": [
      "mysql_server_security_patches_latest",
      "mysql_server_security_patches_up_to_date",
      "mysql_server_security_patches_installed",
      "mysql_server_security_patches_current",
      "mysql_server_security_patches_recent"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "To update the MySQL server a restart is required.",
    "references": "1. http://www.oracle.com/technetwork/topics/security/alerts-086861.html 2. https://dev.mysql.com/doc/relnotes/mysql/5.7/en/ 3. https://nvd.nist.gov/vuln/search/results?form_type=Advanced&results_type=over view&search_type=all&cpe_vendor=cpe%3A%2F%3Aoracle&cpe_product=cpe %3A%2F%3Aoracle%3Amysql&cpe_version=cpe%3A%2F%3Aoracle%3Amysql %3A5.7.0"
  },
  {
    "id": "4.2",
    "title": "Ensure Example or Test Databases are Not Installed on Production Servers",
    "assessment": "Automated",
    "description": "The default MySQL installation does not contain any example or test databases. However, it is a good idea to review for common example databases and ensure they have been removed from production systems.",
    "rationale": "Dropping example databases will reduce the attack surface of the MySQL server.",
    "audit": "Execute the following SQL statement to determine if the test database is present: SELECT * FROM information_schema.SCHEMATA where SCHEMA_NAME not in ('mysql','information_schema', 'sys', 'performance_schema'); If this is a production system, and a database name includes an example or test database this is a finding. Common example database names are: \u2022 employees \u2022 world \u2022 world_x \u2022 sakila \u2022 airportdb \u2022 menagerie",
    "remediation": "Execute the following SQL statement to drop an example database: DROP DATABASE <database name> ; Default Value: By default, MySQL 5.7 does not contain any example or test databases. References: 1. http://dev.mysql.com/doc/refman/5.7/en/mysql-secure-installation.html",
    "function_names": [
      "compute_database_example_removed",
      "compute_database_test_removed",
      "compute_database_production_only",
      "mysql_database_example_removed",
      "mysql_database_test_removed",
      "mysql_database_production_only",
      "database_example_removed_production",
      "database_test_removed_production",
      "database_production_no_example",
      "database_production_no_test"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. http://dev.mysql.com/doc/refman/5.7/en/mysql-secure-installation.html"
  },
  {
    "id": "4.3",
    "title": "Ensure 'allow-suspicious-udfs' Is Set to 'OFF'",
    "assessment": "Manual",
    "description": "This option prevents attaching arbitrary shared library functions as user-defined functions by checking for at least one corresponding method named _init, _deinit, _reset, _clear, or _add.",
    "rationale": "Preventing shared libraries that do not contain user-defined functions from loading will reduce the attack surface of the server.",
    "audit": "Perform the following to determine if the recommended state is in place: \u2022 Ensure --allow-suspicious-udfs is not specified in the the mysqld start up command line. \u2022 Ensure allow-suspicious-udfs is set to OFF in the MySQL configuration: my_print_defaults mysqld | grep allow-suspicious-udfs No results returned would be a pass.",
    "remediation": "Perform the following to establish the recommended state: \u2022 Remove --allow-suspicious-udfs from the mysqld start up command line. \u2022 Remove allow-suspicious-udfs from the MySQL option file. Default Value: OFF References: 1. https://dev.mysql.com/doc/extending-mysql/5.7/en/adding-loadable- function.html#loadable-function-security 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_allow-suspicious-udfs  Additional Information: This option has no corresponding state in SHOW VARIABLES.",
    "function_names": [
      "bigquery_dataset_allow_suspicious_udfs_disabled",
      "bigquery_dataset_suspicious_udfs_blocked",
      "bigquery_dataset_udf_restrictions_enabled",
      "bigquery_dataset_unsafe_udfs_prohibited",
      "bigquery_dataset_udf_security_enabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/extending-mysql/5.7/en/adding-loadable- function.html#loadable-function-security 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_allow-suspicious-udfs  Additional Information: This option has no corresponding state in SHOW VARIABLES."
  },
  {
    "id": "4.4",
    "title": "Harden Usage for 'local_infile' on MySQL Clients",
    "assessment": "Automated",
    "description": "The local_infile parameter dictates whether files located on the MySQL client's computer can be loaded or selected via LOAD DATA INFILE or SELECT local_file.",
    "rationale": "Disabling local_infile reduces an attacker's ability to read sensitive files off the affected server via an SQL injection vulnerability. Impact: Disabling local_infile will impact the functionality of solutions that rely on it.",
    "audit": "Execute the following SQL statement: SHOW VARIABLES WHERE Variable_name = 'local_infile'; Ensure the value returned is OFF.",
    "remediation": "Add the following line to the [mysqld] section of the MySQL configuration file and restart the MySQL service: local_infile=OFF Default Value: ON References: 1. https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_load-file 2. https://dev.mysql.com/doc/refman/5.7/en/load-data.html",
    "function_names": [
      "mysql_client_local_infile_disabled",
      "mysql_client_local_infile_restricted",
      "mysql_client_local_infile_hardened",
      "mysql_client_local_infile_secure_config",
      "mysql_client_local_infile_access_controlled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Disabling local_infile will impact the functionality of solutions that rely on it.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_load-file 2. https://dev.mysql.com/doc/refman/5.7/en/load-data.html"
  },
  {
    "id": "4.5",
    "title": "Ensure 'mysqld' is Not Started with '--skip-grant-tables'",
    "assessment": "Manual",
    "description": "This option causes mysqld to start without using the privilege system.",
    "rationale": "If this option is used, all clients of the affected server will have unrestricted access to all databases.",
    "audit": "Perform the following to determine if the recommended state is in place: \u2022 Open the MySQL configuration (e.g. my.cnf) file and search for skip-grant- tables \u2022 Ensure skip-grant-tables is set to FALSE",
    "remediation": "Perform the following to establish the recommended state: \u2022 Open the MySQL configuration (e.g. my.cnf) file and set: skip-grant-tables = FALSE References: 1. http://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_skip- grant-tables Additional Information: This option has no SHOW VARIABLES counterpart.",
    "function_names": [
      "mysql_server_skip_grant_tables_disabled",
      "mysql_server_privilege_system_enabled",
      "mysql_server_secure_boot_config",
      "mysql_server_authentication_required",
      "mysql_server_privilege_validation_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. http://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_skip- grant-tables Additional Information: This option has no SHOW VARIABLES counterpart."
  },
  {
    "id": "4.6",
    "title": "Ensure Symbolic Links are Disabled",
    "assessment": "Automated",
    "description": "The symbolic-links and skip-symbolic-links options for MySQL determine whether symbolic link support is available. When use of symbolic links is enabled, they have different effects depending on the host platform. When symbolic links are disabled, then symbolic links stored in files or entries in tables are not used by the database.",
    "rationale": "Prevents symbolic links from being used for database files. This is especially important when MySQL is executing as root as arbitrary files may be overwritten. The symbolic- links option might allow someone to direct actions by the MySQL server to other files and/or directories.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW variables LIKE 'have_symlink'; Ensure the Value returned is DISABLED.",
    "remediation": "Perform the following actions to remediate this setting: \u2022 Open the MySQL configuration file (my.cnf) \u2022 Locate skip-symbolic-links in the configuration \u2022 Set the skip-symbolic-links to YES Note: If skip-symbolic-links does not exist, add it to the configuration file in the mysqld section. References: 1. http://dev.mysql.com/doc/refman/5.7/en/symbolic-links.html 2. http://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_symbolic-links",
    "function_names": [
      "mysql_database_symbolic_links_disabled",
      "mysql_database_skip_symbolic_links_enabled",
      "mysql_config_symbolic_links_disabled",
      "mysql_config_skip_symbolic_links_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. http://dev.mysql.com/doc/refman/5.7/en/symbolic-links.html 2. http://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_symbolic-links"
  },
  {
    "id": "4.7",
    "title": "Ensure the 'daemon_memcached' Plugin Is Disabled",
    "assessment": "Automated",
    "description": "The InnoDB memcached Plugin allows users to access data stored in InnoDB with the memcached protocol.",
    "rationale": "By default, the plugin doesn't do authentication, which means that anyone with access to the TCP/IP port of the plugin can access and modify the data. However, not all data is exposed by default.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW DATABASES LIKE 'innodb_memcache'; Ensure that no rows are returned.",
    "remediation": "To remediate this setting, issue the following command in the MySQL command-line client: uninstall plugin daemon_memcached; This uninstalls the memcached plugin from the MySQL server. Default Value: disabled References: 1. http://dev.mysql.com/doc/refman/5.7/en/innodb-memcached-security.html",
    "function_names": [
      "rds_instance_daemon_memcached_disabled",
      "database_plugin_memcached_disabled",
      "rds_daemon_memcached_plugin_disabled",
      "rds_memcached_plugin_disabled",
      "database_memcached_plugin_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. http://dev.mysql.com/doc/refman/5.7/en/innodb-memcached-security.html"
  },
  {
    "id": "4.8",
    "title": "Ensure the 'secure_file_priv' is Configured Correctly",
    "assessment": "Automated",
    "description": "The secure_file_priv option restricts to paths used by LOAD DATA INFILE or SELECT local_file. It is recommended that this option be set to a file system location that contains only resources expected to be loaded by MySQL. Even better, if data import/export using LOAD DATA INFILE or SELECT local_file is not used, the functionality should be disabled entirely by setting --secure-file-priv to NULL.",
    "rationale": "Setting secure_file_priv reduces an attacker's ability to read sensitive files off the affected server via a SQL injection vulnerability. Impact: Solutions that rely on loading data from various sub-directories may be negatively impacted by this change. Consider consolidating load directories under a common parent directory. The server checks the value of secure_file_priv at startup and writes a warning to the error log if the value is insecure. A non-NULL value is considered insecure if it is empty, or the value is the data directory or a subdirectory of it, or a directory that is accessible by all users.",
    "audit": "Execute the following SQL statement and ensure one row is returned: SHOW GLOBAL VARIABLES WHERE Variable_name = 'secure_file_priv'; The Value should either contain NULL (thus is disabled entirely) or a valid path. If set to an empty string this is a fail.",
    "remediation": "If you are not going to use this feature, remove secure_file_priv from the [mysqld] section of the MySQL configuration file and restart the MySQL service. If you need this feature add the following line to the [mysqld] section of the MySQL configuration file and restart the MySQL service:  secure_file_priv= <path_to_load_directory> Default Value: No value set. References: 1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_secure_file_priv",
    "function_names": [
      "mysql_server_secure_file_priv_restricted",
      "mysql_server_secure_file_priv_disabled",
      "mysql_server_secure_file_priv_path_validated",
      "mysql_server_secure_file_priv_no_null_path",
      "mysql_server_secure_file_priv_no_default_path"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Solutions that rely on loading data from various sub-directories may be negatively impacted by this change. Consider consolidating load directories under a common parent directory. The server checks the value of secure_file_priv at startup and writes a warning to the error log if the value is insecure. A non-NULL value is considered insecure if it is empty, or the value is the data directory or a subdirectory of it, or a directory that is accessible by all users.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_secure_file_priv"
  },
  {
    "id": "4.9",
    "title": "Ensure 'sql_mode' Contains 'STRICT_ALL_TABLES'",
    "assessment": "Automated",
    "description": "When data changing statements are made (i.e., INSERT, UPDATE), MySQL can handle invalid or missing values differently depending on whether strict SQL mode is enabled. When strict SQL mode is enabled, data may not be truncated or otherwise \"adjusted\" to make the data changing statement work.",
    "rationale": "Without strict mode the server tries to proceed with the action when an error might have been a more secure choice. For example, by default MySQL will truncate data if it does not fit in a field, which can lead to unknown behavior, or be leveraged by an attacker to circumvent data validation. Impact: Applications relying on the MySQL database should be aware that STRICT_ALL_TABLES is in use, such that error conditions are handled appropriately.",
    "audit": "To audit for this recommendation, execute the following query: SHOW VARIABLES LIKE 'sql_mode'; +---------------+-----------------------------------------------------------+ | Variable_name | Value                                                     | +---------------+-----------------------------------------------------------+ | sql_mode      | ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,   | |               | NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,                  | |               | NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION                | +---------------+-----------------------------------------------------------+ If STRICT_ALL_TABLES is not in the list returned, this is a fail.",
    "remediation": "Set STRICT_ALL_TABLES to the sql_mode in the server's global configuration, for example:  SET GLOBAL sql_mode ='STRICT_ALL_TABLES,ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO _ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUT ION'; Default Value: ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR _DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION References: 1. https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html Additional Information: The sql_mode is a set and might contain more elements than just STRICT_ALL_TABLES. There is a global sql_mode and a per session sql_mode. The per session sql_mode is based on the global sql_mode on initialization and might be changed by the application.",
    "function_names": [
      "rds_instance_sql_mode_strict_all_tables",
      "mysql_database_sql_mode_strict_all_tables",
      "cloudsql_instance_sql_mode_strict_all_tables",
      "database_sql_mode_strict_all_tables_enabled",
      "sql_instance_sql_mode_strict_all_tables_enabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS \u2022  Level 2 - MySQL RDBMS on Linux",
    "impact": "Applications relying on the MySQL database should be aware that STRICT_ALL_TABLES is in use, such that error conditions are handled appropriately.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html Additional Information: The sql_mode is a set and might contain more elements than just STRICT_ALL_TABLES. There is a global sql_mode and a per session sql_mode. The per session sql_mode is based on the global sql_mode on initialization and might be changed by the application."
  },
  {
    "id": "5.1",
    "title": "Ensure Only Administrative Users Have Full Database Access",
    "assessment": "Manual",
    "description": "The mysql.user, mysql.db, and other mysql tables ending in _priv list a variety of privileges that can be granted (or denied) to MySQL users. Some of the privileges of concern include: Select_priv, Insert_priv, Update_priv, Delete_priv, Drop_priv, and so on. Typically, these privileges should not be available to every MySQL user and often are reserved for administrative use only. The information_schema.user_privileges provides a consolidated view of all user privileges.",
    "rationale": "Limiting the accessibility of the mysql database will protect the confidentiality, integrity, and availability of the data housed within MySQL. A user which has direct access to mysql.* might view password hashes, change permissions, or alter or destroy information intentionally or unintentionally.",
    "audit": "Execute the following SQL statement(s) to assess this recommendation: select * from information_schema.user_privileges where grantee not like ('\\'mysql.%localhost\\''); Ensure all users returned are administrative users with minimal privileges required. Note: The above query ignores MySQL internal reserved accounts.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate non-administrative users resulting from the audit procedure. 2. For each non-administrative user, use the REVOKE statement to remove privileges as appropriate. References: 1. https://dev.mysql.com/doc/refman/5.7/en/information-schema-user-privileges- table.html 2. https://dev.mysql.com/doc/refman/5.7/en/reserved-accounts.html  Additional Information: Consideration should be made for which privileges are required by each user requiring interactive database access.",
    "function_names": [
      "mysql_user_no_full_access",
      "mysql_user_admin_only_privileges",
      "mysql_db_restrict_privileges",
      "mysql_privileges_admin_only",
      "mysql_user_privileges_no_select",
      "mysql_user_privileges_no_insert",
      "mysql_user_privileges_no_update",
      "mysql_user_privileges_no_delete",
      "mysql_user_privileges_no_drop",
      "mysql_user_privileges_no_grant",
      "mysql_user_privileges_no_alter",
      "mysql_user_privileges_no_create",
      "mysql_user_privileges_no_shutdown",
      "mysql_user_privileges_no_process",
      "mysql_user_privileges_no_file",
      "mysql_user_privileges_no_index",
      "mysql_user_privileges_no_reload",
      "mysql_user_privileges_no_replication",
      "mysql_user_privileges_no_show_db",
      "mysql_user_privileges_no_super"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/information-schema-user-privileges- table.html 2. https://dev.mysql.com/doc/refman/5.7/en/reserved-accounts.html  Additional Information: Consideration should be made for which privileges are required by each user requiring interactive database access."
  },
  {
    "id": "5.2",
    "title": "Ensure 'FILE' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The FILE privilege is used to allow or disallow a user from reading and writing files on the server host. Any user with the FILE right granted has the ability to: \u2022 Read files from the local file system that are readable by the MySQL server (this includes world-readable files). \u2022 Write files to the local file system where the MySQL server has write access.",
    "rationale": "The FILE right allows MySQL users to read files from disk and to write files to disk. This may be leveraged by an attacker to further compromise MySQL. It should be noted that the MySQL server should not overwrite existing files.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'FILE'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure. 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE FILE ON *.* FROM ' <user> '; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_file 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary  Additional Information: See also: secure_file_priv system settings.",
    "function_names": [
      "mysql_user_no_file_privilege",
      "mysql_user_no_file_privilege_non_admin",
      "database_user_no_file_privilege",
      "database_user_no_file_privilege_non_admin",
      "sql_user_no_file_privilege",
      "sql_user_no_file_privilege_non_admin"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_file 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary  Additional Information: See also: secure_file_priv system settings."
  },
  {
    "id": "5.3",
    "title": "Ensure 'PROCESS' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The PROCESS privilege found in the mysql.user table determines whether a given user can see statement execution information for all sessions.",
    "rationale": "The PROCESS privilege allows principals to view currently executing MySQL statements beyond their own, including statements used to manage passwords. This may be leveraged by an attacker to compromise MySQL or to gain access to potentially sensitive data. Impact: Users denied the PROCESS privilege may also be denied use of SHOW ENGINE.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'PROCESS\u2019; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE PROCESS ON *.* FROM ' <user> '; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_process 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary",
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS \u2022  Level 2 - MySQL RDBMS on Linux",
    "impact": "Users denied the PROCESS privilege may also be denied use of SHOW ENGINE.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_process 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary"
  },
  {
    "id": "5.4",
    "title": "Ensure 'SUPER' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The SUPER privilege is a powerful and far-reaching privilege and should not be granted lightly. The SUPER privilege shown in the INFORMATION_SCHEMA.USER_PRIVILEGES table governs the use of a variety of MySQL features. These features include, CHANGE MASTER TO, KILL, mysqladmin kill option, PURGE BINARY LOGS, SET GLOBAL, mysqladmin debug option, logging control, and more.",
    "rationale": "The SUPER privilege allows principals to perform many actions, including view and terminate currently executing MySQL statements (including statements used to manage passwords). This privilege also provides the ability to configure MySQL, such as enable/disable logging, alter data, disable/enable features. Limiting the accounts that have the SUPER privilege reduces the chances that an attacker can exploit these capabilities. It is more secure to migrate administrative users off SUPER and instead assign the specific and minimal set of mysql Dynamic Privileges needed to perform their tasks. Impact: When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SUPER\u2019; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 2. Enumerate the non-administrative users found in the result set of the audit procedure  3. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE SUPER ON *.* FROM ' <user> '; Next minimize administrator rights 1. Assess the minimal set of Dynamic Permissions needed by a user to perform their duties. 2. For each user assign the appropriate Dynamic Permission and then revoke that <user> SUPER capability. For example, if administrator 'u1'@'localhost' requires SUPER for binary log purging and system variable modification, these statements make the required changes to the account thus limiting rights to what is needed: GRANT BINLOG_ADMIN, SYSTEM_VARIABLES_ADMIN ON *.* TO 'u1'@'localhost'; REVOKE SUPER ON *.* FROM 'u1'@'localhost'; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_super 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary",
    "function_names": [
      "rds_user_no_super_privilege",
      "database_user_no_super_privilege",
      "mysql_user_no_super_privilege",
      "sql_user_no_admin_privileges",
      "db_user_no_super_privilege",
      "rds_user_no_admin_privileges",
      "database_user_no_high_privileges",
      "mysql_user_no_super_privilege_non_admin"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_super 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary"
  },
  {
    "id": "5.5",
    "title": "Ensure 'SHUTDOWN' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The SHUTDOWN privilege simply enables use of the shutdown option to the mysqladmin command, which allows a user with the SHUTDOWN privilege the ability to shut down the MySQL server.",
    "rationale": "The SHUTDOWN privilege allows principals to shutdown MySQL. This may be leveraged by an attacker to negatively impact the availability of MySQL.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'SHUTDOWN\u2019; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure. 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE SHUTDOWN ON *.* FROM ' <user> '; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_shutdown 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary",
    "function_names": [
      "rds_instance_shutdown_not_granted",
      "rds_user_shutdown_privilege_restricted",
      "rds_database_shutdown_admin_only",
      "rds_privilege_shutdown_non_admin_denied",
      "rds_permission_shutdown_privilege_limited"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_shutdown 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary"
  },
  {
    "id": "5.6",
    "title": "Ensure 'CREATE USER' is Not Granted to Non-Administrative Users",
    "assessment": "Manual",
    "description": "The CREATE USER privilege governs the right of a given user to add or remove users, change existing users' names, or revoke existing users' privileges.",
    "rationale": "Reducing the number of users granted the CREATE USER right minimizes the number of users able to add/drop users, alter existing users' names, and manipulate existing users' privileges. Impact: Users that are denied the CREATE USER privilege will not only be unable to create a user, but they may be unable to drop a user, rename a user, or otherwise revoke a given user's privileges.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'CREATE USER'; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE CREATE USER ON *.* FROM ' <user> '; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create- user  2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary",
    "function_names": [
      "iam_user_no_create_user_privilege",
      "iam_user_non_admin_no_create_user",
      "iam_privilege_create_user_restricted",
      "iam_non_admin_user_no_create_user",
      "iam_user_create_user_privilege_denied"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Users that are denied the CREATE USER privilege will not only be unable to create a user, but they may be unable to drop a user, rename a user, or otherwise revoke a given user's privileges.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_create- user  2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary"
  },
  {
    "id": "5.7",
    "title": "Ensure 'GRANT OPTION' is Not Granted to Non- Administrative Users",
    "assessment": "Manual",
    "description": "The GRANT OPTION privilege exists in different contexts (mysql.user, mysql.db) for the purpose of governing the ability of a privileged user to manipulate the privileges of other users.",
    "rationale": "The GRANT OPTION privilege allows a principal to grant other principals additional privileges. This may be used by an attacker to compromise MySQL.",
    "audit": "Execute the following SQL statements to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'GRANT OPTION\u2019; Ensure only administrative users are returned in the result set.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-administrative users found in the result sets of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- administrative user): REVOKE GRANT OPTION ON *.* FROM <user> ; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_grant- option 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary",
    "function_names": [
      "mysql_user_no_grant_option",
      "mysql_db_no_grant_option",
      "database_user_no_admin_privileges",
      "database_user_no_grant_privilege",
      "mysql_privilege_no_grant_option",
      "database_privilege_no_admin_grant",
      "mysql_user_privilege_restricted",
      "database_user_privilege_no_grant_option"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_grant- option 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary"
  },
  {
    "id": "5.8",
    "title": "Ensure 'REPLICATION SLAVE' is Not Granted to Non- Administrative Users",
    "assessment": "Manual",
    "description": "The REPLICATION SLAVE privilege governs whether a given user (in the context of the source server) can request updates that have been made on the source server.",
    "rationale": "The REPLICATION SLAVE privilege allows a principal to fetch binlog files containing all data changing statements and/or changes in table data from the master. This may be used by an attacker to read/fetch sensitive data from MySQL.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT GRANTEE FROM INFORMATION_SCHEMA.USER_PRIVILEGES WHERE PRIVILEGE_TYPE = 'REPLICATION SLAVE\u2019; Ensure only accounts designated for slave users are granted this privilege.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the non-replica users found in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the non- replica user): REVOKE REPLICATION SLAVE ON *.* FROM <user>; Use the REVOKE statement to remove the REPLICATION SLAVE privilege from users who shouldn't have it. References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges- provided.html#priv_replication-slave 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary",
    "function_names": [
      "rds_user_no_replication_slave_privilege",
      "database_user_no_replication_slave_privilege",
      "mysql_user_no_replication_slave_privilege",
      "postgres_user_no_replication_slave_privilege",
      "sql_user_no_replication_slave_privilege",
      "db_user_no_replication_slave_privilege",
      "rds_instance_user_no_replication_slave_privilege",
      "cloudsql_user_no_replication_slave_privilege"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges- provided.html#priv_replication-slave 2. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#privileges- provided-summary"
  },
  {
    "id": "5.9",
    "title": "Ensure DML/DDL Grants Are Limited to Specific Databases and Users",
    "assessment": "Manual",
    "description": "DML/DDL includes the set of privileges used to modify or create data structures. This includes INSERT, SELECT, UPDATE, DELETE, DROP, CREATE, and ALTER privileges.",
    "rationale": "INSERT, SELECT, UPDATE, DELETE, DROP, CREATE, and ALTER are powerful privileges in any database. Such privileges should be limited only to those users requiring such rights. By limiting the users with these rights and ensuring that they are limited to specific databases, the attack surface of the database is reduced.",
    "audit": "Execute the following SQL statement to audit this setting: SELECT User,Host,Db FROM mysql.db WHERE Select_priv='Y' OR Insert_priv='Y' OR Update_priv='Y' OR Delete_priv='Y' OR Create_priv='Y' OR Drop_priv='Y' OR Alter_priv='Y'; Ensure all users returned are permitted to have these privileges on the indicated databases.",
    "remediation": "Perform the following steps to remediate this setting: 1. Enumerate the unauthorized users, hosts, and databases returned in the result set of the audit procedure 2. For each user, issue the following SQL statement (replace <user> with the unauthorized user, <host> with host name, and <database> with the database name):  REVOKE SELECT ON <host> . <database> FROM <user> ; REVOKE INSERT ON <host> . <database> FROM <user> ; REVOKE UPDATE ON <host> . <database> FROM <user> ; REVOKE DELETE ON <host> . <database> FROM <user> ; REVOKE CREATE ON <host> . <database> FROM <user> ; REVOKE DROP ON <host> . <database> FROM <user> ; REVOKE ALTER ON <host> . <database> FROM <user> ;",
    "function_names": [
      "rds_database_dml_ddl_grants_restricted",
      "rds_database_privileges_limited_to_specific_users",
      "rds_database_privileges_no_wildcard_grants",
      "rds_user_dml_ddl_privileges_restricted",
      "rds_user_privileges_no_wildcard_grants",
      "rds_database_privileges_specific_to_users",
      "rds_user_privileges_limited_to_databases",
      "rds_database_grants_no_broad_access",
      "rds_user_grants_no_broad_privileges",
      "rds_database_privileges_no_public_access"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux"
  },
  {
    "id": "5.10",
    "title": "Securely Define Stored Procedures and Functions DEFINER and INVOKER",
    "assessment": "Manual",
    "description": "Stored procedure and stored function declarations include a definition of permissions which can be used to escalate permissions. It's important to inspect these settings to ensure they do not unnecessarily escalate privileges.",
    "rationale": "A stored procedure or function that improperly escalates privileges may provide unintended access rights which can be improperly used.",
    "audit": "Run the following: SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS; Inspect Definer and Invoker security types. If DEFINER is a powerful user consider that user's permissions. If INVOKER then the rights for the stored procedure or function are that of the user executing these. Review code using SHOW CREATE PROCEDURE <name> ; SHOW CREATE FUNCTION <name> ; For more details on Procedures and Functions SELECT * FROM information_schema.routines; For more details on Procedures and Functions input and output parameters. SELECT * FROM information_schema.parameters;",
    "remediation": "Drop and recreate stored procedures and functions using proper DEFINER and INVOKER settings, or other code changes.  References: 1. https://dev.mysql.com/doc/refman/5.7/en/create-procedure.html",
    "function_names": [
      "database_stored_procedure_definer_secure",
      "database_stored_procedure_invoker_secure",
      "database_stored_function_definer_secure",
      "database_stored_function_invoker_secure",
      "database_procedure_permissions_no_escalation",
      "database_function_permissions_no_escalation",
      "database_stored_procedure_privilege_restricted",
      "database_stored_function_privilege_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/create-procedure.html"
  },
  {
    "id": "6.1",
    "title": "Ensure 'log_error' is configured correctly",
    "assessment": "Automated",
    "description": "The error log contains information about events such as mysqld starting and stopping, when a table needs to be checked or repaired, and, depending on the host operating system, stack traces when mysqld fails.",
    "rationale": "Enabling error logging can increase the ability to detect malicious attempts against MySQL, and other critical messages. For example, if the error log is not enabled then a connection error could go unnoticed. When configured to stderr MySQL will send log data to the console. Logging to the console is useful, but remember it is ephemeral. This is not recommended due to the fact that logging to console does not provide a means to force restricted access via permissions strictly to MySQL and dedicated MySQL audit accounts. This may compromise the confidentiality of the MySQL log data. Furthermore use caution if co- mingling log data from multiple sources as that can complicate log inspection. Additionally from a security auditing perspective, it\u2019s difficult and error prone to verify logging is correct using stderr or redirected stderr.",
    "audit": "Execute the following SQL statement to audit this setting: SHOW variables LIKE 'log_error'; Ensure the Value returned is a path to a file and not stderr.",
    "remediation": "Perform the following actions to remediate this setting: 1. Open the MySQL configuration file (my.cnf or my.ini). 2. Set the log-error option to the path for the error log. Default Value: stderr References: 1. https://dev.mysql.com/doc/refman/5.7/en/error-log.html",
    "function_names": [
      "database_instance_log_error_enabled",
      "database_instance_log_error_retention_over_30d",
      "database_instance_log_error_path_secure",
      "database_instance_log_error_permissions_restricted",
      "database_instance_log_error_rotation_enabled",
      "database_instance_log_error_size_limited",
      "database_instance_log_error_format_json",
      "database_instance_log_error_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/error-log.html"
  },
  {
    "id": "6.2",
    "title": "Ensure Log Files Are Stored on a Non-System Partition",
    "assessment": "Automated",
    "description": "MySQL log files can be set in the MySQL configuration to exist anywhere on the filesystem. It is common practice to ensure that the system filesystem is left uncluttered by application logs. System filesystems include the root (/), /var, or /usr.",
    "rationale": "Moving the MySQL logs off the system partition will reduce the probability of denial of service via the exhaustion of available disk space to the operating system.",
    "audit": "Execute the following SQL statement to assess this recommendation: SELECT @@global.log_bin_basename; Ensure the value returned does not indicate root (/), /var, or /usr.",
    "remediation": "Perform the following actions to remediate this setting: 1. Open the MySQL configuration file (my.cnf) 2. Locate the log-bin entry and set it to a file not on root (/), /var, or /usr References: 1. https://dev.mysql.com/doc/refman/5.7/en/binary-log.html 2. https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html",
    "function_names": [
      "mysql_log_files_non_system_partition",
      "mysql_log_files_system_partition_avoided",
      "mysql_log_files_storage_location_valid",
      "mysql_log_files_system_disk_excluded",
      "mysql_log_files_partition_compliance",
      "mysql_log_files_system_volume_restricted",
      "mysql_log_files_non_root_partition",
      "mysql_log_files_system_path_protected"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/binary-log.html 2. https://dev.mysql.com/doc/refman/5.7/en/replication-options-binary-log.html"
  },
  {
    "id": "6.3",
    "title": "Ensure 'log_error_verbosity' is Set to '2'",
    "assessment": "Automated",
    "description": "The log_error_verbosity system variable, set to 2 by default, specifies the verbosity of events sent to the MySQL error log. A value of 2 enables logging of error and warning messages, a value of 3 also includes informational logging, a value of 1 logs only errors.",
    "rationale": "This might help to detect malicious behavior by logging communication errors and aborted connections.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW GLOBAL VARIABLES LIKE 'log_error_verbosity'; Ensure the Value returned equals 2.",
    "remediation": "Perform the following actions to remediate this setting: \u2022 Open the MySQL configuration file (my.cnf) \u2022 Ensure the following line is found in the mysqld section log_error_verbosity = 2 Default Value: The option is enabled (3) - errors, warning, and information messages are logged - by default. References: 1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_log_error_verbosity 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_log-warnings  Additional Information: log_warnings has been deprecated as of MySQL 5.7.2. Setting log_warnings will also cause log_error_verbosity to be set.The variable scope for log_warnings is global.",
    "function_names": [
      "mysql_database_log_error_verbosity_set_to_2",
      "mysql_database_log_error_verbosity_minimum_level_2",
      "mysql_database_log_error_verbosity_not_verbose",
      "mysql_database_log_error_verbosity_restricted",
      "mysql_database_log_error_verbosity_secure_level"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS \u2022  Level 2 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_log_error_verbosity 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_log-warnings  Additional Information: log_warnings has been deprecated as of MySQL 5.7.2. Setting log_warnings will also cause log_error_verbosity to be set.The variable scope for log_warnings is global."
  },
  {
    "id": "6.4",
    "title": "Ensure 'log-raw' is Set to 'OFF'",
    "assessment": "Automated",
    "description": "The log-raw MySQL option determines whether passwords are rewritten by the server so as not to appear in log files as plain text. If log-raw is enabled, then passwords are written to the various log files (general query log, slow query log, and binary log) in plain text.",
    "rationale": "With raw logging of passwords enabled someone with access to the log files might see plain text passwords.",
    "audit": "Perform the following actions to assess this recommendation: \u2022 Open the MySQL configuration file (my.cnf) \u2022 Ensure the log-raw entry is present \u2022 Ensure the log-raw entry is set to OFF",
    "remediation": "Perform the following actions to remediate this setting: \u2022 Open the MySQL configuration file (my.cnf) \u2022 Find the log-raw entry and set it as follows log-raw = OFF Default Value: OFF References: 1. https://dev.mysql.com/doc/refman/5.7/en/password-logging.html 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_log-raw",
    "function_names": [
      "rds_instance_log_raw_disabled",
      "database_mysql_log_raw_off",
      "mysql_configuration_log_raw_secure",
      "rds_logging_log_raw_protected",
      "database_instance_sensitive_logging_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/password-logging.html 2. https://dev.mysql.com/doc/refman/5.7/en/server- options.html#option_mysqld_log-raw"
  },
  {
    "id": "6.5",
    "title": "Ensure Audit Logging Is Enabled",
    "assessment": "Manual",
    "description": "Audit logging is not really included in the Community Edition of MySQL - only the general log. Using the general log is possible, but not practical, because it grows quickly and has an adverse impact on server performance. Nevertheless, enabling audit logging is an important consideration for a production environment, and third-party tools do exist to help with this. Enable audit logging for \u2022 Interactive user sessions \u2022 Application sessions (optional)",
    "rationale": "Audit logging helps to identify who changed what and when. The audit log might be used as evidence in investigations. It might also help to identify what an attacker was able to accomplish.",
    "audit": "Verify that a third-party tool is installed and configured to enable logging for interactive user sessions and (optionally) applications sessions.",
    "remediation": "Acquire a third-party MySQL logging solution as available from a variety of sources including, but not necessarily limited to, the following: \u2022 The General Query Log \u2022 MySQL Enterprise Audit \u2022 MariaDB Audit Plugin for MySQL \u2022 McAfee MySQL Audit References: 1. https://dev.mysql.com/doc/refman/5.7/en/query-log.html 2. https://dev.mysql.com/doc/refman/5.7/en/mysql-enterprise-audit.html 3. https://mariadb.com/kb/en/mariadb-audit-plugin/ 4. https://github.com/mcafee/mysql-audit",
    "function_names": [
      "mysql_server_audit_logging_enabled",
      "mysql_server_general_log_disabled",
      "mysql_server_interactive_sessions_audited",
      "mysql_server_application_sessions_audited",
      "mysql_server_audit_log_retention_configured",
      "mysql_server_audit_log_performance_optimized"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS on Linux \u2022  Level 2 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/query-log.html 2. https://dev.mysql.com/doc/refman/5.7/en/mysql-enterprise-audit.html 3. https://mariadb.com/kb/en/mariadb-audit-plugin/ 4. https://github.com/mcafee/mysql-audit"
  },
  {
    "id": "7.1",
    "title": "Ensure default_authentication_plugin is Set to a Secure Option",
    "assessment": "Automated",
    "description": "The \u2013default-authentication-plugin system variable governs two things: \u2022 Authentication plugin used by a new user account if a plugin is not specified explicitly through CREATE USER statement \u2022 Initial authentication data payload generated by server in case of a new connection.",
    "rationale": "MySQL Native Authentication relies on the Secure Hash Algorithm 1 (SHA1) algorithm and the National Institute of Standards and Technology (NIST) has suggested to stop using it. The MySQL Native Authentication plugin leverages this weak hashing algorithm that can be quickly brute forced.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW VARIABLES WHERE Variable_name = 'default_authentication_plugin'; Ensure the Value field is not set to mysql_native_password.",
    "remediation": "Configure mysql to default to the sha256_password plugin. Require sha256_password plugin to be used by default for new accounts. Edit my.cnf, in the section [mysqld] add: default_authentication_plugin= sha256_password Determine if any users are using mysql_native_password. select host, user, plugin from mysql.user; Migrate these users from mysql_native_password.  ALTER USER user IDENTIFIED WITH sha256_password IDENTIFIED BY RANDOM PASSWORD PASSWORD EXPIRE; Provide users the random password value through a secure mechanism - on next login they will be forced to change the password. Default Value: mysql_native_password References: 1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_default_authentication_plugin 2. https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html",
    "function_names": [
      "mysql_instance_default_authentication_plugin_secure",
      "mysql_instance_auth_plugin_no_insecure_default",
      "mysql_server_auth_plugin_secure_option",
      "mysql_user_auth_plugin_default_secure",
      "mysql_connection_auth_plugin_secure_payload"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_default_authentication_plugin 2. https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html"
  },
  {
    "id": "7.2",
    "title": "Ensure Passwords are Not Stored in the Global Configuration",
    "assessment": "Automated",
    "description": "The [client] section of the MySQL configuration file allows setting a user and password to be used. Verify the password option is not used in the global configuration file (my.cnf).",
    "rationale": "Using the password parameter may negatively impact the confidentiality of the user's password.",
    "audit": "To assess this recommendation, perform the following steps: \u2022 Open the MySQL configuration file (e.g., my.cnf) \u2022 Examine the [client] section of the MySQL configuration file and ensure password is not employed.",
    "remediation": "Use the mysql_config_editor to store authentication credentials in .mylogin.cnf in encrypted form. If not possible, use the user-specific options file, .my.cnf., and restricting file access permissions to the user identity. References: 1. https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html Additional Information: There must not be a password in any of the sections of the global configuration. The global configuration is by default readable for all users on the system. This is needed for global defaults (prompt, port, socket, etc.). If a password is present in this file then all users on the system may be able to access it.",
    "function_names": [
      "mysql_config_password_not_stored",
      "mysql_global_config_credentials_absent",
      "mysql_config_file_password_protected",
      "mysql_client_section_password_disabled",
      "mysql_config_no_plaintext_passwords"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/mysql-config-editor.html Additional Information: There must not be a password in any of the sections of the global configuration. The global configuration is by default readable for all users on the system. This is needed for global defaults (prompt, port, socket, etc.). If a password is present in this file then all users on the system may be able to access it."
  },
  {
    "id": "7.3",
    "title": "Ensure 'sql_mode' Contains 'NO_AUTO_CREATE_USER'",
    "assessment": "Automated",
    "description": "NO_AUTO_CREATE_USER is an option for sql_mode that prevents a GRANT statement from automatically creating a user when authentication information is not provided.",
    "rationale": "Blank passwords negate the benefits provided by authentication mechanisms. Without this setting an administrative user might accidentally create a user without a password.",
    "audit": "Execute the following SQL statements to assess this recommendation: SELECT @@global.sql_mode; SELECT @@session.sql_mode; Ensure that each result contains NO_AUTO_CREATE_USER.",
    "remediation": "Perform the following actions to remediate this setting: 1. Open the MySQL configuration file (my.cnf) 2. Find the sql_mode setting in the [mysqld] area 3. Add the NO_AUTO_CREATE_USER to the sql_mode setting Default Value: ONLY_FULL_GROUP_BY STRICT_TRANS_TABLES NO_ZERO_IN_DATE NO_ZERO_DATE ERROR_FOR_DIVISION_BY_ZERO NO_AUTO_CREATE_USER NO_ENGINE_SUBSTITUTION References: 1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_sql_mode 2. https://dev.mysql.com/doc/refman/5.7/en/sql- mode.html#sqlmode_no_auto_create_user  Additional Information: NO_AUTO_CREATE_USER is deprecated and it is included in the default SQL mode. The documentation for this mode states: Previously, before NO_AUTO_CREATE_USER was deprecated, one reason not to enable it was that it was not replication safe. Now it can be enabled and replication-safe user management performed with CREATE USER IF NOT EXISTS, DROP USER IF EXISTS, and ALTER USER IF EXISTS rather than GRANT. These statements enable safe replication when replicas may have different grants than those on the source.",
    "function_names": [
      "rds_instance_sql_mode_no_auto_create_user",
      "database_sql_mode_no_auto_create_user",
      "mysql_instance_sql_mode_no_auto_create_user",
      "mariadb_instance_sql_mode_no_auto_create_user",
      "sql_server_sql_mode_no_auto_create_user",
      "aurora_mysql_sql_mode_no_auto_create_user",
      "aurora_postgresql_sql_mode_no_auto_create_user",
      "cloudsql_instance_sql_mode_no_auto_create_user"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_sql_mode 2. https://dev.mysql.com/doc/refman/5.7/en/sql- mode.html#sqlmode_no_auto_create_user  Additional Information: NO_AUTO_CREATE_USER is deprecated and it is included in the default SQL mode. The documentation for this mode states: Previously, before NO_AUTO_CREATE_USER was deprecated, one reason not to enable it was that it was not replication safe. Now it can be enabled and replication-safe user management performed with CREATE USER IF NOT EXISTS, DROP USER IF EXISTS, and ALTER USER IF EXISTS rather than GRANT. These statements enable safe replication when replicas may have different grants than those on the source."
  },
  {
    "id": "7.4",
    "title": "Ensure Passwords are Set for All MySQL Accounts",
    "assessment": "Automated",
    "description": "Blank passwords allow a user to login without using a password.",
    "rationale": "Without a password only knowing the username and the list of allowed hosts will allow someone to connect to the server and assume the identity of the user. This, in effect, bypasses authentication mechanisms.",
    "audit": "Execute the following SQL query to determine if any users have a blank password: For versions prior to 5.7.6: SELECT User,host FROM mysql.user WHERE (plugin IN('mysql_native_password', 'mysql_old_password','') AND (LENGTH(Password) = 0 OR Password IS NULL)) OR (plugin='sha256_password' AND LENGTH(authentication_string) = 0); For versions 5.7.6, or later: SELECT User,host FROM mysql.user WHERE (plugin IN('mysql_native_password', 'mysql_old_password','') AND (LENGTH(authentication_string) = 0 OR authentication_string IS NULL)); No rows will be returned if all accounts have a password set.",
    "remediation": "For each row returned from the audit procedure, reset the password for the given user using the following statement (as an example): ALTER USER <user> @ <host> IDENTIFIED BY RANDOM PASSWORD PASSWORD EXPIRE; This resets the password temporarily to a RANDOM string and returns that temporary password as a result. The user can then use this temporary password to login and is forced to set the password to one of their choosing upon login.  Note: Replace <user> , <host> with appropriate values. References: 1. https://dev.mysql.com/doc/refman/5.7/en/assigning-passwords.html 2. https://dev.mysql.com/doc/refman/5.7/en/upgrading-from-previous- series.html#upgrade-system-table-changes",
    "function_names": [
      "mysql_user_password_required",
      "mysql_account_password_set",
      "mysql_user_no_blank_password",
      "mysql_account_credentials_configured",
      "mysql_user_authentication_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/assigning-passwords.html 2. https://dev.mysql.com/doc/refman/5.7/en/upgrading-from-previous- series.html#upgrade-system-table-changes"
  },
  {
    "id": "7.5",
    "title": "Set 'default_password_lifetime' to Require a Yearly Password Change",
    "assessment": "Automated",
    "description": "Password expiry provides passwords with a time bounded lifetime.",
    "rationale": "The 'default_password_lifetime' global variable prevents a password being set for an indefinite period. Excessive password expiration requirements do more harm than good, because these requirements make users select predictable passwords, composed of sequential words and numbers that are closely related to each other. More importantly, when events occur that could compromise password security account passwords should be expired immediately. Impact: Scripted clients or users dependent on automated login in a controlled environment will need to consider their authentication procedures. The server will accept the user but the user is placed in restricted mode. In restricted mode, operations performed within the session result in an error until the user establishes a new account password.",
    "audit": "Execute the following SQL statements to assess this recommendation: SHOW VARIABLES LIKE 'default_password_lifetime'; The result should not be 0 and less than or equal to 365.",
    "remediation": "To remediate this recommendation, execute the following command: SET GLOBAL default_password_lifetime=365; Default Value: From 5.7.11 on: 0 Prior to 5.7.11: 360 References: 1. https://dev.mysql.com/doc/refman/5.7/en/password-management.html  2. https://dev.mysql.com/doc/refman/5.7/en/expired-password-handling.html",
    "function_names": [
      "iam_password_policy_default_lifetime_yearly",
      "iam_password_policy_require_yearly_rotation",
      "iam_user_password_expiry_yearly",
      "iam_password_lifetime_max_365d",
      "iam_password_policy_expiry_yearly",
      "iam_user_password_rotation_yearly",
      "iam_password_lifetime_yearly_enforced"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Scripted clients or users dependent on automated login in a controlled environment will need to consider their authentication procedures. The server will accept the user but the user is placed in restricted mode. In restricted mode, operations performed within the session result in an error until the user establishes a new account password.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/password-management.html  2. https://dev.mysql.com/doc/refman/5.7/en/expired-password-handling.html"
  },
  {
    "id": "7.6",
    "title": "Ensure Password Complexity Policies are in Place",
    "assessment": "Automated",
    "description": "Password complexity includes password characteristics such as length, case, numerical, and character sets.",
    "rationale": "Complex passwords help mitigate dictionary, brute forcing, and other password attacks. This recommendation prevents users from choosing weak passwords which can easily be guessed. Impact: Remediation for this recommendation requires a server restart.",
    "audit": "Execute the following SQL statements to assess this recommendation: SHOW VARIABLES LIKE 'validate_password%'; The result set from the above statement should show: \u2022 validate_password_length should be 14 or more \u2022 validate_password_check_user_name should be ON \u2022 validate_password_policy should be STRONG - checks length; numeric, lowercase/uppercase, and special characters; dictionary file New passwords should be checked against a dictionary file that contains values known to be commonly-used, expected, or compromised. For example, the list should include, but is not limited to: \u2022 Passwords obtained from previous breaches \u2022 Dictionary words \u2022 Repetitive or sequential characters (e.g., aaaaaa, 1234abcd) \u2022 Context-specific words, such as the name of the service, the username, and derivatives thereof \u2022 validate_password.dictionary_file should point to a dictionary file of common words used in passwords. The following may make the password complexity too difficult, use sparingly.  \u2022 validate_password_mixed_case_count not more than 1 \u2022 validate_password_number_count not more than 1 \u2022 validate_password_special_char_count not more than 1 The following lines should be present in the global configuration: plugin-load=validate_password.so validate-password=FORCE_PLUS_PERMANENT",
    "remediation": "Add to the global configuration: plugin-load=validate_password.so validate-password=FORCE_PLUS_PERMANENT validate_password_length=14 validate_password_check_user_name=ON validate_password_dictionary_file= <path to dictionary file> validate_password_policy=STRONG Optionally set one or more of these - ensuring complexity is not overly onerous validate_password_mixed_case_count=1 validate_password_number_count=1 validate_password_special_char_count=1 And change passwords for users which have passwords which are identical to their username. Default Value: Default component_validate_password is not installed. validate_password_length=8 validate_password_mixed_case_count=1 validate_password_number_count=1 validate_password_policy=MEDIUM validate_password_special_char_count=1 References: 1. https://dev.mysql.com/doc/refman/5.7/en/validate-password.html Additional Information: The system variable validate_password_check_user_name is exposed by validate_password starting with MySQL 5.7.15.",
    "function_names": [
      "iam_password_policy_min_length",
      "iam_password_policy_require_uppercase",
      "iam_password_policy_require_lowercase",
      "iam_password_policy_require_numbers",
      "iam_password_policy_require_symbols",
      "iam_password_policy_no_reuse",
      "iam_password_policy_max_age",
      "iam_password_policy_expiration_enabled",
      "iam_password_policy_min_complexity"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Remediation for this recommendation requires a server restart.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/validate-password.html Additional Information: The system variable validate_password_check_user_name is exposed by validate_password starting with MySQL 5.7.15."
  },
  {
    "id": "7.7",
    "title": "Ensure No Users Have Wildcard Hostnames",
    "assessment": "Automated",
    "description": "MySQL can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to ' <user> '@'%'.",
    "rationale": "Avoiding the use of wildcards within hostnames helps control the specific locations from which a given user may connect to and interact with the database.",
    "audit": "Execute the following SQL statement to assess this recommendation: SELECT user, host FROM mysql.user WHERE host = '%'; Ensure no rows are returned.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate all users returned after running the audit procedure. 2. Either ALTER the user's host to be specific or DROP the user.",
    "function_names": [
      "mysql_user_no_wildcard_hostnames",
      "mysql_user_hostname_restricted",
      "mysql_user_hostname_specific",
      "mysql_user_no_hostname_wildcards",
      "mysql_user_hostname_explicit"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux"
  },
  {
    "id": "7.8",
    "title": "Ensure No Anonymous Accounts Exist",
    "assessment": "Automated",
    "description": "Anonymous accounts are users with empty usernames (''). Anonymous accounts have no passwords, so anyone can use them to connect to the MySQL server.",
    "rationale": "Removing anonymous accounts will help ensure that only identified and trusted principals are capable of interacting with MySQL. Impact: Any applications relying on anonymous database access will be adversely affected by this change.",
    "audit": "Execute the following SQL query to identify anonymous accounts: SELECT user,host FROM mysql.user WHERE user = ''; The above query will return zero rows if no anonymous accounts are present.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate the anonymous users returned from executing the audit procedure. 2. For each anonymous user, DROP or assign them a name. Note: As an alternative, you may execute the mysql_secure_installation utility. References: 1. https://dev.mysql.com/doc/refman/5.7/en/mysql-secure-installation.html 2. https://dev.mysql.com/doc/refman/5.7/en/default-privileges.html 3. https://dev.mysql.com/doc/refman/5.7/en/proxy-users.html#proxy-users-conflicts Additional Information: Using the standard installation script, mysql_install_db, it will create two anonymous accounts: one for the host 'localhost' and the other for the network interface's IP address.",
    "function_names": [
      "mysql_user_no_anonymous_accounts",
      "mysql_user_no_empty_username",
      "mysql_user_anonymous_accounts_disabled",
      "mysql_user_username_not_empty",
      "mysql_user_anonymous_login_disabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Any applications relying on anonymous database access will be adversely affected by this change.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/mysql-secure-installation.html 2. https://dev.mysql.com/doc/refman/5.7/en/default-privileges.html 3. https://dev.mysql.com/doc/refman/5.7/en/proxy-users.html#proxy-users-conflicts Additional Information: Using the standard installation script, mysql_install_db, it will create two anonymous accounts: one for the host 'localhost' and the other for the network interface's IP address."
  },
  {
    "id": "8.1",
    "title": "Ensure 'require_secure_transport' is Set to 'ON' and/or 'have_ssl' is Set to 'YES'",
    "assessment": "Automated",
    "description": "All network traffic must use SSL/TLS when traveling over untrusted networks.",
    "rationale": "Enabling Secure Sockets Layer (SSL) will allow clients to encrypt network traffic and verify the identity of the server. The SSL/TLS-protected MySQL protocol helps to prevent eavesdropping and man-in-the-middle attacks. Impact: Enabling SSL could have impact on network traffic inspection.",
    "audit": "Execute the following SQL statements to assess this recommendation: Check the global default. select @@require_secure_transport; Ensure the returned Value is ON or '1' SHOW variables WHERE variable_name = 'have_ssl'; Or if MySQL is built with OpenSSL: SHOW variables WHERE variable_name = 'have_openssl'; Ensure the Value returned is YES. Note: have_openssl is an alias for have_ssl when MySQL is built with OpenSSL.",
    "remediation": "Follow the procedures as documented in the MySQL 5.7 Reference Manual to setup SSL. Set global policy to force SSL for all connections: set require_secure_transport=ON; Default Value: DISABLED  References: 1. https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_require_secure_transport 3. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_have_openssl",
    "function_names": [
      "cloudsql_instance_require_secure_transport_enabled",
      "cloudsql_instance_have_ssl_enabled",
      "cloudsql_instance_ssl_enforced",
      "cloudsql_instance_secure_transport_required",
      "cloudsql_instance_tls_required",
      "cloudsql_instance_encrypted_connections_enabled",
      "cloudsql_instance_secure_connection_enabled",
      "cloudsql_instance_transport_security_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "Enabling SSL could have impact on network traffic inspection.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_require_secure_transport 3. https://dev.mysql.com/doc/refman/5.7/en/server-system- variables.html#sysvar_have_openssl"
  },
  {
    "id": "8.2",
    "title": "Ensure 'ssl_type' is Set to 'ANY', 'X509', or 'SPECIFIED' for All Remote Users",
    "assessment": "Automated",
    "description": "All network traffic must use SSL/TLS when traveling over untrusted networks. SSL/TLS should be enforced on a per-user basis for users which enter the system through the network.",
    "rationale": "The SSL/TLS-protected MySQL protocol helps to prevent eavesdropping and man-in- the-middle attacks. Impact: When SSL/TLS is enforced then clients which do not use SSL will not be able to connect. If the server is not configured for SSL/TLS then accounts for which SSL/TLS is mandatory will not be able to connect.",
    "audit": "Execute the following SQL statements to assess this recommendation: SELECT user, host, ssl_type FROM mysql.user WHERE NOT HOST IN ('::1', '127.0.0.1', 'localhost'); Ensure the ssl_type for each user returned is equal to X509, or SPECIFIED. Note: ANY means the connection must be using TLS and could optionally provide a client-side certificate.",
    "remediation": "Use the ALTER USER statement to require the use of SSL: ALTER USER 'my_user'@'app1.example.com' REQUIRE X509; Note: REQUIRE SSL only enforces SSL. There are additional options REQUIRE ISSUER, REQUIRE SUBJECT which can be used to further restrict the connection. Default Value: On the server-side SSL is ON by default --ssl (permits but does not require secure connections) and require_secure_transport is OFF (turning ON allows only secure connections)  References: 1. https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/alter-user.html#alter-user-tls 3. https://dev.mysql.com/doc/refman/5.7/en/connection- options.html#option_general_ssl",
    "function_names": [
      "compute_user_ssl_type_valid",
      "compute_user_ssl_type_configured",
      "compute_user_ssl_type_restricted",
      "compute_user_ssl_type_enforced",
      "compute_user_ssl_type_compliant"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "When SSL/TLS is enforced then clients which do not use SSL will not be able to connect. If the server is not configured for SSL/TLS then accounts for which SSL/TLS is mandatory will not be able to connect.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html 2. https://dev.mysql.com/doc/refman/5.7/en/alter-user.html#alter-user-tls 3. https://dev.mysql.com/doc/refman/5.7/en/connection- options.html#option_general_ssl"
  },
  {
    "id": "8.3",
    "title": "Set Maximum Connection Limits for Server and per User",
    "assessment": "Manual",
    "description": "Limiting concurrent connections to a MySQL server can be used to reduce risk of Denial of Service (DoS) attacks performed by exhausting connection resources.",
    "rationale": "Limiting the number of concurrent sessions at the server and per user level helps to reduce the risk of DoS attacks. MySQL provides mechanisms to limit the number of simultaneous connections that can be made at the server level or by any given account.",
    "audit": "To check global (default) concurrent-sessions settings in the MySQL database server, to check the per user default run the query: SELECT VARIABLE_NAME, VARIABLE_VALUE FROM performance_schema.global_variables WHERE VARIABLE_NAME LIKE 'max_%connections'; If the value of max_user_connections is 0 this means there is \u201cno limit\u201d. If the value of max_connections is not set, there is no limit. Also check the values on a per user basis run the following: select user, host, max_user_connections from mysql.user where user not like 'mysql.%' and user not like 'root'; If the value is 0 this means the global value of max_user_connections applies. If no limits are configured this is a fail.",
    "remediation": "Connect to the MySQL Database as an administrator. For example, to set the global default per user to 50 run the command: SET PERSIST max_user_connections=50; To control the maximum number of clients the server permits to connect simultaneously, set the max_connections system variable:  SET PERSIST max_connections=1000; Additionally, this max user connections can be set per user as well as for a given period of time period using CREATE or ALTER. For example: ALTER USER 'fred'@'localhost' WITH MAX_CONNECTIONS_PER_HOUR 5 MAX_USER_CONNECTIONS 2; Default Value: The default value of max_connections is 151, max_user_connections is 0 (unlimited, thus limited by max_connections). References: 1. https://dev.mysql.com/doc/refman/5.7/en/user-resources.html 2. https://dev.mysql.com/doc/refman/5.7/en/connection-interfaces.html#connection- interfaces-volume-management  9 Replication Everything related to replicating data from one server to another.",
    "function_names": [
      "mysql_server_max_connections_limited",
      "mysql_user_max_connections_limited",
      "mysql_server_connection_quota_configured",
      "mysql_user_connection_quota_configured",
      "mysql_server_dos_protection_enabled",
      "mysql_user_dos_protection_enabled"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/user-resources.html 2. https://dev.mysql.com/doc/refman/5.7/en/connection-interfaces.html#connection- interfaces-volume-management  9 Replication Everything related to replicating data from one server to another."
  },
  {
    "id": "9.1",
    "title": "Ensure Replication Traffic is Secured",
    "assessment": "Manual",
    "description": "The replication traffic between servers should be secured. Security measures should include ensuring the confidentiality and integrity of the traffic, and performing mutual authentication between the servers before performing replication.",
    "rationale": "The replication traffic should be secured as it gives access to all transferred information and might leak passwords. Impact: When the replication traffic is not secured someone might be able to capture passwords and other sensitive information when sent to the replica.",
    "audit": "Check if the replication traffic is using one or more of the following to provide confidentiality and integrity for the traffic, and mutual authentication for the servers: \u2022 A private network \u2022 A VPN \u2022 SSL/TLS \u2022 A SSH Tunnel",
    "remediation": "Secure the network traffic using one or more technologies to provide confidentiality and integrity for the traffic, and mutual authentication for the servers.",
    "function_names": [
      "compute_replication_traffic_encrypted",
      "compute_replication_traffic_mutual_auth_enabled",
      "compute_replication_traffic_integrity_verified",
      "compute_replication_traffic_confidentiality_ensured",
      "compute_replication_traffic_tls_enabled",
      "compute_replication_traffic_secure_protocol_enabled",
      "compute_replication_traffic_authentication_required"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS on Linux \u2022  Level 1 - MySQL RDBMS",
    "impact": "When the replication traffic is not secured someone might be able to capture passwords and other sensitive information when sent to the replica."
  },
  {
    "id": "9.2",
    "title": "Ensure 'MASTER_SSL_VERIFY_SERVER_CERT' Is Set to 'YES' or '1'",
    "assessment": "Automated",
    "description": "In the MySQL SLAVE context the setting MASTER_SSL_VERIFY_SERVER_CERT indicates whether the SLAVE should verify the MASTER's certificate. This configuration item may be set to Yes or No, and unless SSL has been enabled on the SLAVE, the value will be ignored.",
    "rationale": "When SSL is in use certificate verification is important to authenticate the party to which a connection is being made. In this case, the SLAVE (client) should verify the MASTER's (server's) certificate to authenticate the MASTER prior to continuing the connection. Impact: When using CHANGE MASTER to, be aware of the following: \u2022 SLAVE processes need to be stopped prior to executing CHANGE MASTER to. \u2022 Use of CHANGE MASTER to starts new relay logs without keeping the old ones unless explicitly told to keep them. \u2022 When CHANGE MASTER to is invoked, some information is dumped to the error log (previous values for MASTER_HOST, MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS). \u2022 Invoking CHANGE MASTER to will implicitly commit any ongoing transactions in the session where the CHANGE MASTER to was run, but not all ongoing transactions on the database.",
    "audit": "To assess this recommendation, issue the following statement: select ssl_verify_server_cert from mysql.slave_master_info; Verify the value of ssl_verify_server_cert is 1.",
    "remediation": "To remediate this setting you must use the CHANGE MASTER to command.  STOP SLAVE; -- required if replication was already running CHANGE MASTER to MASTER_SSL_VERIFY_SERVER_CERT=1; START SLAVE; -- required if you want to restart replication References: 1. https://dev.mysql.com/doc/refman/5.7/en/change-master-to.html",
    "function_names": [
      "mysql_slave_master_ssl_verify_server_cert_enabled",
      "mysql_slave_master_ssl_verify_server_cert_configured",
      "mysql_slave_master_ssl_verify_server_cert_set_yes",
      "mysql_slave_master_ssl_verify_server_cert_set_1",
      "mysql_slave_master_ssl_verify_server_cert_secure_value"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "When using CHANGE MASTER to, be aware of the following: \u2022 SLAVE processes need to be stopped prior to executing CHANGE MASTER to. \u2022 Use of CHANGE MASTER to starts new relay logs without keeping the old ones unless explicitly told to keep them. \u2022 When CHANGE MASTER to is invoked, some information is dumped to the error log (previous values for MASTER_HOST, MASTER_PORT, MASTER_LOG_FILE, and MASTER_LOG_POS). \u2022 Invoking CHANGE MASTER to will implicitly commit any ongoing transactions in the session where the CHANGE MASTER to was run, but not all ongoing transactions on the database.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/change-master-to.html"
  },
  {
    "id": "9.3",
    "title": "Ensure 'master_info_repository' Is Set to 'TABLE'",
    "assessment": "Automated",
    "description": "The master_info_repository setting determines to where a SLAVE logs MASTER status and connection information. The options are FILE or TABLE. Note also that this setting is associated with the sync_master_info setting as well.",
    "rationale": "The password which the client uses is stored in the MASTER info repository, which by default is a plaintext file. The TABLE MASTER info repository is a bit safer, but with filesystem access it's still possible to gain access to the password the SLAVE is using.",
    "audit": "Execute the following SQL statement to assess this recommendation: SHOW GLOBAL VARIABLES LIKE 'master_info_repository'; The result should be TABLE instead of FILE. Note: There also should not be a master.info file in the datadir.",
    "remediation": "Perform the following actions to remediate this setting: 1. Open the MySQL configuration file (my.cnf) 2. Locate master_info_repository 3. Set the master_info_repository value to TABLE Note: If master_info_repository does not exist, add it to the configuration file. Default Value: FILE References: 1. https://dev.mysql.com/doc/refman/5.7/en/replication-options- replica.html#sysvar_master_info_repository",
    "function_names": [
      "database_replication_master_info_repository_table",
      "database_replication_master_info_repository_configured",
      "database_replication_master_info_repository_not_file",
      "database_replication_master_info_repository_secure",
      "database_replication_master_info_repository_compliant"
    ],
    "profile_applicability": "\u2022  Level 2 - MySQL RDBMS \u2022  Level 2 - MySQL RDBMS on Linux",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/replication-options- replica.html#sysvar_master_info_repository"
  },
  {
    "id": "9.4",
    "title": "Ensure 'super_priv' is Not Set to 'Y' for Replication Users",
    "assessment": "Automated",
    "description": "The SUPER privilege found in the mysql.user table governs the use of a variety of MySQL features. These features include, CHANGE MASTER TO, KILL, mysqladmin kill option, PURGE BINARY LOGS, SET GLOBAL, mysqladmin debug option, logging control, and more.",
    "rationale": "The SUPER privilege allows principals to perform many actions, including view and terminate currently executing MySQL statements (including statements used to manage passwords). This privilege also provides the ability to configure MySQL, such as enable/disable logging, alter data, disable/enable features. Limiting the accounts that have the SUPER privilege reduces the chances that an attacker can exploit these capabilities. Impact: When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "audit": "Execute the following SQL statement to audit this setting: select user, host from mysql.user where user='repl' and Super_priv = 'Y'; No rows should be returned. Note: Substitute your replication user's name for repl in the above query.",
    "remediation": "Execute the following steps to remediate this setting: 1. Enumerate the replication users found in the result set of the audit procedure 2. For each replication user, issue the following SQL statement (replace repl with your replication user's name):  REVOKE SUPER ON *.* FROM 'repl'; References: 1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_super 2. https://dev.mysql.com/doc/refman/5.7/en/show-slave-status.html",
    "function_names": [
      "database_user_no_super_privilege",
      "mysql_user_super_priv_disabled",
      "replication_user_super_priv_not_set",
      "database_replication_user_no_admin_privileges",
      "mysql_user_super_privilege_restricted"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux",
    "impact": "When the SUPER privilege is denied to a given user, that user will be unable to take advantage of certain capabilities, such as certain mysqladmin options.",
    "references": "1. https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html#priv_super 2. https://dev.mysql.com/doc/refman/5.7/en/show-slave-status.html"
  },
  {
    "id": "9.5",
    "title": "Ensure No Replication Users Have Wildcard Hostnames",
    "assessment": "Automated",
    "description": "MySQL can make use of host wildcards when granting permissions to users on specific databases. For example, you may grant a given privilege to ' <user> '@'%'.",
    "rationale": "Avoiding the use of wildcards within hostnames helps control the specific locations from which a given user may connect to and interact with the database.",
    "audit": "Execute the following SQL statement to assess this recommendation: SELECT user, host FROM mysql.user WHERE user='repl' AND host = '%'; Ensure no rows are returned.",
    "remediation": "Perform the following actions to remediate this setting: 1. Enumerate all users returned after running the audit procedure 2. Either ALTER the user's host to be specific or DROP the user",
    "function_names": [
      "mysql_user_no_wildcard_hostnames",
      "mysql_replication_user_hostname_restricted",
      "mysql_user_hostname_specific",
      "mysql_replication_user_no_wildcard_host",
      "mysql_user_hostname_not_wildcard"
    ],
    "profile_applicability": "\u2022  Level 1 - MySQL RDBMS \u2022  Level 1 - MySQL RDBMS on Linux"
  }
]