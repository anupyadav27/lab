[
  {
    "id": "1.1",
    "title": "Ensure the appropriate MongoDB software version/patches are installed",
    "assessment": "Manual",
    "description": "The MongoDB installation version, along with the patch level, should be the most recent that is compatible with the organization's operational needs. In addition, regularly view latest minor security patch updates for security vulnerability fixes (CVE Related) from MongoDB website: https://www.mongodb.com/alerts",
    "rationale": "Using the most recent MongoDB software version along with all applicable patches, helps limit the possibilities for vulnerabilities in the software. The installation version and/or patches applied should be selected according to the needs of the organization. At a minimum, the software version should be supported.",
    "audit": "On Ubuntu: Run the following command from within the MongoDB shell to determine if the MongoDB software version complies with your organization\u2019s operational needs: mongo --version db.version() #Inside mongo console On Windows: Navigate to the Installation directory of Mongo DB on the server and run below command mongod.exe --version",
    "remediation": "Upgrade to the latest version of the MongoDB software: 1. Backup the data set. 2. Download the binaries for the latest MongoDB revision from the MongoDB Download Page and store the binaries in a temporary location. The binaries download as compressed files that extract to the directory structure used by the MongoDB installation. 3. Shutdown the MongoDB instance. 4. Replace the existing MongoDB binaries with the downloaded binaries. 5. Restart the MongoDB instance. Default Value: Patches are not installed by default. References: 1. https://www.mongodb.com/docs/v7.0/installation/ 2. https://www.mongodb.com/docs/v7.0/release-notes/7.0/#std-label-release-notes- 7.0 3. https://www.mongodb.com/download-center#community 4. https://www.mongodb.com/support-policy 5. https://www.mongodb.com/alerts",
    "function_names": [
      "mongodb_instance_version_current",
      "mongodb_instance_patches_applied",
      "mongodb_instance_security_updates_enabled",
      "mongodb_instance_cve_patches_installed",
      "mongodb_instance_version_compatible",
      "mongodb_instance_patch_level_verified"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/installation/ 2. https://www.mongodb.com/docs/v7.0/release-notes/7.0/#std-label-release-notes- 7.0 3. https://www.mongodb.com/download-center#community 4. https://www.mongodb.com/support-policy 5. https://www.mongodb.com/alerts"
  },
  {
    "id": "2.1",
    "title": "Ensure Authentication is configured",
    "assessment": "Automated",
    "description": "This setting ensures that all clients, users, servers are required to authenticate before being granted access to the MongoDB database. Authentication is the process of verifying the identity of a client. When access control, i.e. authorization, is enabled, MongoDB requires all clients to authenticate themselves in order to determine their access. from MongoDB documentation Authentication Mechanisms MongoDB supports a number of authentication mechanisms that clients can use to verify their identity. These mechanisms allow MongoDB to integrate into your existing authentication system. MongoDB supports multiple authentication mechanisms: \u2022 SCRAM (Default) \u2022 x.509 Certificate Authentication. Certificate Authority For production use, your MongoDB deployment should use valid certificates generated and signed by a certificate authority. You or your organization can generate and maintain an independent certificate authority, or use certificates generated by third-party TLS/SSL vendors. In addition to supporting the aforementioned mechanisms, MongoDB Enterprise also supports the following mechanisms: \u2022 LDAP proxy authentication \u2022 Kerberos authentication.",
    "rationale": "Failure to authenticate clients, users, servers can enable unauthorized access to the MongoDB database and can prevent tracing actions back to their sources. It's highly recommended that password length and complexity also be in-place. When performing the traditional user/password authentication against MongoDB there is not in-place intrinsic password complexity check and there is no LOCKING mechanism with multiple failure logins. So, MongoDB is prone to brute force attacks compared to other database systems.",
    "audit": "Run the following command to verify whether an authorization is enabled on the MongoDB server. On Ubuntu: cat /etc/mongod.conf | grep \u201cauthorization\u201d On Windows: type mongod.conf | findstr \u201cauthorization\u201d The value for authorization must be set to enabled. To authenticate using the mongo shell use the following approach \u2022 Use the mongo command-line authentication options (--username, --password, and --authenticationDatabase) when connecting to the mongod or mongos instance Or \u2022 Connect first to the mongod or mongos instance, and then run the authenticate command or the db.auth() method against the authentication database.",
    "remediation": "The authentication mechanism should be implemented before anyone accesses the MongoDB Server. To enable the authentication mechanism: \u2022 Start the MongoDB instance without authentication. mongod --port 27017 --dbpath /data/db1 Or mongod.exe --port 27017 --dbpath db1 \u2022 Create the system user administrator, ensuring that its password meets organizationally-defined password in terms of length and complexity requirements as there is no in-place locking mechanism for multiple failed login attempts against MongoDB. use admin db.createUser( { user: \"MongoAdmin\", pwd: \"password\", roles: [ { role: \"root\", db: \"admin\" } ] } ) \u2022 Open mongod.conf and change for authorization value to enabled: security: authorization: \"enabled\" \u2022 Restart the MongoDB instance service mongod restart Default Value: By default, authorization is set to disable. References: 1. https://www.mongodb.com/docs/v7.0/core/authentication/",
    "function_names": [
      "mongodb_instance_authentication_enabled",
      "mongodb_instance_scram_auth_enabled",
      "mongodb_instance_x509_auth_enabled",
      "mongodb_instance_ldap_auth_enabled",
      "mongodb_instance_kerberos_auth_enabled",
      "mongodb_instance_ca_certificate_valid",
      "mongodb_instance_tls_certificate_valid",
      "mongodb_instance_auth_mechanism_configured",
      "mongodb_instance_client_auth_required",
      "mongodb_instance_production_ca_certificate_used"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/authentication/"
  },
  {
    "id": "2.2",
    "title": "Ensure that MongoDB does not bypass authentication via the localhost exception",
    "assessment": "Automated",
    "description": "MongoDB should not be set to bypass authentication via the localhost exception. The localhost exception allows the user to enable authorization before creating the first user in the system. When active, the localhost exception allows all connections from the localhost interface to have full access to that instance. The exception applies only when there are no users created in the MongoDB instance. Note: This recommendation only applies when there are no users created in the MongoDB instance.",
    "rationale": "Disabling this exception will prevent unauthorized local access to the MongoDB database. It will also ensure the traceability of each database activity to a specific user. Localhost Exception allows direct connect to Mongod\u2019s without any UN/PW.",
    "audit": "Run the following command to extract the information about enableLocalhostAuthBypass setting on Configuration File. On Ubuntu: cat /etc/mongod.conf |grep \"enableLocalhostAuthBypass\" On Windows: type mongod.conf | findstr \"enableLocalhostAuthBypass\" The value for enableLocalhostAuthBypass must be false.",
    "remediation": "To disable local authentication on the MongoDB database. Type OS Console Command mongod --setParameter enableLocalhostAuthBypass=0 or To manually configure use the setParameter option in the mongo configuration file to set it to false. setParameter: enableLocalhostAuthBypass: false Default Value: By default, localhost exception value (enableLocalhostAuthBypass) is true. References: 1. https://www.mongodb.com/docs/v7.0/core/localhost-exception/",
    "function_names": [
      "mongodb_instance_localhost_auth_bypass_disabled",
      "mongodb_instance_auth_required_all_connections",
      "mongodb_instance_no_localhost_exception",
      "mongodb_instance_auth_enabled_before_user_creation",
      "mongodb_instance_full_access_restricted_localhost"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/localhost-exception/"
  },
  {
    "id": "2.3",
    "title": "Ensure authentication is enabled in the sharded cluster",
    "assessment": "Automated",
    "description": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster. With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster. For Production Environment : x.509 certificate authentication with secure TSL/SSL connection must be used for authentication. For Development Purpose : Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.",
    "rationale": "Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
    "audit": "Based on recommendations \u2022 PEMKeyFile, clusterFile, CAFile must be configured. \u2022 clusterAuthMode should be set to x509 \u2022 authenticationMechanisms should be set to MONGODB-X509. To Check That your Current MongoDB is configured for sharding setup, execute the following command: sh.status() OR db.printShardingStatus() Run the following command to verify that the certificate-based authentication is configured: On Ubuntu: cat /etc/mongod.conf | grep \u201cPEMKeyFile\u201d cat /etc/mongod.conf | grep \"CAFile\" cat /etc/mongod.conf | grep \"clusterFile\" cat /etc/mongod.conf | grep \"clusterAuthMode\" cat /etc/mongod.conf | grep \u201cauthenticationMechanisms:\u201d On Windows: type mongod.conf | findstr \u201cPEMKeyFile\u201d type mongod.conf | findstr \u201cCAFile\u201d type mongod.conf | findstr \u201cclusterFile\u201d type mongod.conf | findstr \u201cclusterAuthMode\u201d type mongod.conf | findstr \u201cauthenticationMechanisms:\u201d  Run the following command to verify that the key file-based authentication is configured: ( Only for Development Purpose ) On Ubuntu: cat /etc/mongod.conf | grep \u201ckeyFile=\u201d On Windows: type mongod.conf | findstr \u201ckeyFile\u201d",
    "remediation": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords. MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password. Change the configuration file /etc/mongod.conf on each host, adding the following rows: net: port: 27017 tls: mode: requireSSL PEMKeyFile: /etc/mongodb/ssl/server1.pem CAFile: /etc/mongodb/ssl/mongoCA.crt clusterFile: /etc/mongodb/ssl/server1.pem security: authorization: enabled clusterAuthMode: x509 Restart the daemon sudo service mongodb restart  To enable authentication in the sharded cluster, perform the following steps:( Only for Development Purpose ) \u2022 Generate A Key File \u2022 On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file\u2019s path and then start the component with this command: keyFile = /srv/mongodb/keyfile \u2022 When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file\u2019s path. Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/core/security-transport-encryption/#std- label-transport-encryption 2. https://www.mongodb.com/docs/v7.0/reference/security/ 3. https://www.mongodb.com/docs/v7.0/tutorial/deploy-shard-cluster/",
    "function_names": [
      "mongodb_cluster_authentication_enabled",
      "mongodb_cluster_keyfile_authentication_enabled",
      "mongodb_cluster_x509_authentication_enabled",
      "mongodb_cluster_tls_ssl_enabled",
      "mongodb_cluster_production_authentication_enabled",
      "mongodb_cluster_development_authentication_enabled",
      "mongodb_cluster_secure_connection_enabled",
      "mongodb_cluster_credentials_required",
      "mongodb_cluster_keyfile_configured",
      "mongodb_cluster_x509_certificate_configured"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/security-transport-encryption/#std- label-transport-encryption 2. https://www.mongodb.com/docs/v7.0/reference/security/ 3. https://www.mongodb.com/docs/v7.0/tutorial/deploy-shard-cluster/"
  },
  {
    "id": "3.1",
    "title": "Ensure least privilege for database accounts",
    "assessment": "Manual",
    "description": "MongoDB grants access to data and commands through \"role-based\" approach, MongoDB is shipped with built-in roles that provide the different levels of access commonly needed in a database system. In addition, you can create custom-roles. The following roles provide the ability to assign any user any privilege on any database, which means that users with one of these roles can assign themselves any privilege on any database: dbOwner role, when scoped to the admin database userAdmin role, when scoped to the admin database userAdminAnyDatabase role",
    "rationale": "Ensuring highly privileged Roles are granted only for database administrators, and roles are not scoped to \"admin\" databases will reduce attack surface and follows the least privilege principle.",
    "audit": "To check accounts with database roles scoped in \"admin\" database, use the following query: db.system.users.find( {\"roles.role\":{$in:[\"dbOwner\",\"userAdmin\",\"userAdminAnyDatabase\"]},\"roles.db\" : \"admin\" } )",
    "remediation": "If any accounts were listed with built in-roles: dbOwner userAdmin userAdminAnyDatabase in \"admin\" database role then drop them. References: 1. https://www.mongodb.com/docs/v7.0/reference/built-in-roles/",
    "function_names": [
      "mongodb_account_least_privilege",
      "mongodb_role_no_admin_privileges",
      "mongodb_user_no_db_owner_role",
      "mongodb_user_no_user_admin_role",
      "mongodb_user_no_user_admin_any_database_role",
      "mongodb_custom_role_no_admin_privileges",
      "mongodb_builtin_role_no_admin_privileges"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/reference/built-in-roles/"
  },
  {
    "id": "3.2",
    "title": "Ensure that role-based access control is enabled and configured appropriately",
    "assessment": "Manual",
    "description": "Role-based access control (RBAC) is a method of regulating access to resources based on the roles of individual users within an enterprise. A user is granted one or more roles that determine the user\u2019s access to database resources and operations. Outside of role assignments, the user has no access to the system. MongoDB can use RBAC to govern access to MongoDB systems. MongoDB does not enable authorization by default.",
    "rationale": "When properly implemented, RBAC enables users to carry out a wide range of authorized tasks by dynamically regulating their actions according to flexible functions. This allows an organization to control employees\u2019 access to all database tables through RBAC.",
    "audit": "Connect to MongoDB with the appropriate privileges and run the following command: Identify users' roles and privileges: > db.getUser() > db.getRole() Verify that the appropriate role or roles have been configured for each user.",
    "remediation": "1. Establish roles for MongoDB. 2. Assign the appropriate privileges to each role. 3. Assign the appropriate users to each role. 4. Remove any individual privileges assigned to users that are now addressed by the roles. 5. See the reference below for more Information. References: 1. https://www.mongodb.com/docs/v7.0/tutorial/manage-users-and-roles/",
    "function_names": [
      "mongodb_database_rbac_enabled",
      "mongodb_database_default_admin_removed",
      "mongodb_database_user_roles_assigned",
      "mongodb_database_custom_roles_defined",
      "mongodb_database_privilege_escalation_prevented",
      "mongodb_database_role_separation_enforced",
      "mongodb_database_anonymous_access_disabled",
      "mongodb_database_localhost_exception_removed"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/tutorial/manage-users-and-roles/"
  },
  {
    "id": "3.3",
    "title": "Ensure that MongoDB is run using a non-privileged, dedicated service account",
    "assessment": "Manual",
    "description": "The MongoDB service should not be run using a privileged account such as 'root' because this unnecessarily exposes the operating system to high risk.",
    "rationale": "Using a non-privileged, dedicated service account restricts the database from accessing the critical areas of the operating system which are not required by the MongoDB. This will also mitigate the potential for unauthorized access via a compromised, privileged account on the operating system.",
    "audit": "Run the following command to get listing of all mongo instances, the PID number, and the PID owner. ps -ef | grep -E \"mongos|mongod\"",
    "remediation": "1. Create a dedicated user for performing MongoDB database activity. 2. Set the Database data files, the keyfile, and the SSL private key files to only be readable by the mongod/mongos user. 3. Set the log files to only be writable by the mongod/mongos user and readable only by root. Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/tutorial/manage-users-and-roles/",
    "function_names": [
      "mongodb_service_account_non_privileged",
      "mongodb_service_account_dedicated",
      "mongodb_service_account_no_root",
      "mongodb_service_account_secure_permissions",
      "mongodb_service_account_least_privilege"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/tutorial/manage-users-and-roles/"
  },
  {
    "id": "3.4",
    "title": "Ensure that each role for each MongoDB database is needed and grants only the necessary privileges",
    "assessment": "Manual",
    "description": "Reviewing all roles periodically and eliminating unneeded roles as well as unneeded privileges from necessary roles helps minimize the privileges that each user has.",
    "rationale": "Although role-based access control (RBAC) has many advantages for regulating access to resources, over time some roles may no longer be needed, and some roles may grant privileges that are no longer needed.",
    "audit": "Perform the following command to view all roles on the database on which the command runs, including both built-in and user-defined roles, as well as the privileges granted by each role. Ensure that only necessary roles are listed and only the necessary privileges are listed for each role. db.runCommand( { rolesInfo: 1, showPrivileges: true, showBuiltinRoles: true } )",
    "remediation": "To revoke specified privileges from the user-defined role on the database where the command is run. The revokePrivilegesFromRole command has the following syntax: References: 1. https://www.mongodb.com/docs/v7.0/reference/privilege-actions/#mongodb- authaction-revokeRole 2. https://www.mongodb.com/docs/v7.0/core/authorization/#std-label-privileges Additional Information: You must have the dropRole action on a database to drop a role from that database.",
    "function_names": [
      "mongodb_role_unused_removed",
      "mongodb_role_privileges_minimized",
      "mongodb_role_privileges_least_required",
      "mongodb_role_privileges_reviewed_periodically",
      "mongodb_role_unnecessary_removed",
      "mongodb_role_privileges_no_excessive_access",
      "mongodb_role_privileges_necessary_only",
      "mongodb_role_access_rights_minimized"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/reference/privilege-actions/#mongodb- authaction-revokeRole 2. https://www.mongodb.com/docs/v7.0/core/authorization/#std-label-privileges Additional Information: You must have the dropRole action on a database to drop a role from that database."
  },
  {
    "id": "3.5",
    "title": "Review Superuser/Admin Roles",
    "assessment": "Manual",
    "description": "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function.",
    "rationale": "Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.",
    "audit": "Superuser roles provide the ability to assign any user any privilege on any database, which means that users with one of these roles can assign themselves any privilege on any database: db.runCommand( { rolesInfo: \"dbOwner\" } ) db.runCommand( { rolesInfo: \"userAdmin\" } ) db.runCommand( { rolesInfo: \"userAdminAnyDatabase\" } ) Root role provides access to the operations and all the resources of the readWriteAnyDatabase, dbAdminAnyDatabase, userAdminAnyDatabase, clusterAdmin roles, restore combined. db.runCommand( { rolesInfo: \"readWriteAnyDatabase\" } ) db.runCommand( { rolesInfo: \"dbAdminAnyDatabase\" } ) db.runCommand( { rolesInfo: \"userAdminAnyDatabase\" } ) db.runCommand( { rolesInfo: \"clusterAdmin\" } ) Cluster Administration Roles are used for administering the whole system rather than just a single database. db.runCommand( { rolesInfo: \"hostManager\" } )",
    "remediation": "To remove a user from one or more roles on the current database. References: 1. https://www.mongodb.com/docs/v7.0/core/security-user-defined-roles/ 2. https://www.mongodb.com/docs/v7.0/reference/method/#std-label-role- management-methods",
    "function_names": [
      "iam_role_no_admin_privileges",
      "iam_role_least_privilege",
      "iam_role_superuser_restricted",
      "iam_role_privilege_review_required",
      "iam_role_admin_access_audited",
      "iam_role_privilege_escalation_prevented",
      "iam_role_privilege_boundary_enforced",
      "iam_role_admin_privileges_reviewed",
      "iam_role_privilege_assignment_minimized",
      "iam_role_admin_privileges_justified"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/security-user-defined-roles/ 2. https://www.mongodb.com/docs/v7.0/reference/method/#std-label-role- management-methods"
  },
  {
    "id": "4.1",
    "title": "Ensure legacy TLS protocols are disabled",
    "assessment": "Automated",
    "description": "Only modern TLS protocols should be enabled in MongoDB for all client connections and upstream connections. Removing legacy TLS and SSL protocols (SSL 3.0, TLS 1.0 and 1.1), and enabling emerging and stable TLS protocols (TLS 1.2, and TLS 1.3), ensures users are able to take advantage of strong security capabilities and protects them from insecure legacy protocols.",
    "rationale": "Why disable TLS 1.0: TLS 1.0 was deprecated from use when PCI DSS Compliance mandated that it not be used for any applications processing credit card numbers in June 2018. Why disable TLS 1.1: Because of the increased security associated with higher versions of TLS, TLS 1.0 should be disabled.",
    "audit": "To verify that the server uses disables legacy TLS protocols you should check the disabledProtocols directive, run the following commands: mongod --config /etc/mongod.conf Review for disabledProtocols as part of the output shown below: net: tls: mode: requireTLS certificateKeyFile: /etc/ssl/mongodb.pem CAFile: /etc/ssl/caToValidateClientCertificates.pem disabledProtocols: TLS1_0,TLS1_1",
    "remediation": "Make changes to configuration file, to configure your mongod or mongos instance to disable legacy protocols, shut down the instance and update the configuration file with the following setting: net: tls: mode: requireTLS certificateKeyFile: /etc/ssl/mongodb.pem CAFile: /etc/ssl/caToValidateClientCertificates.pem disabledProtocols: TLS1_0,TLS1_1 Start mongod or mongos instance with the configuration file. mongod --config /etc/mongod.conf Default Value: TLS1_0, TLS1_1, TLS1_2 Note: Starting in version 4.0.4 (and 3.6.9)TLS1_3 is added to the default value. References: 1. https://www.mongodb.com/docs/v7.0/core/security-transport-encryption/ 2. https://www.mongodb.com/docs/v7.0/release-notes/4.0/#std-label-4.0-disable-tls",
    "function_names": [
      "mongodb_connection_tls_1_2_enabled",
      "mongodb_connection_legacy_tls_disabled",
      "mongodb_upstream_tls_1_2_enabled",
      "mongodb_upstream_legacy_tls_disabled",
      "mongodb_connection_tls_1_3_enabled",
      "mongodb_upstream_tls_1_3_enabled",
      "mongodb_connection_ssl_3_0_disabled",
      "mongodb_upstream_ssl_3_0_disabled",
      "mongodb_connection_tls_1_0_disabled",
      "mongodb_connection_tls_1_1_disabled",
      "mongodb_upstream_tls_1_0_disabled",
      "mongodb_upstream_tls_1_1_disabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/security-transport-encryption/ 2. https://www.mongodb.com/docs/v7.0/release-notes/4.0/#std-label-4.0-disable-tls"
  },
  {
    "id": "4.2",
    "title": "Ensure Weak Protocols are Disabled",
    "assessment": "Automated",
    "description": "Servers can be configured to disable specific TLS/SSL protocol versions which may be vulnerable to exploitation and/or lack features which improve the level of security as provided by newer versions of the protocol.",
    "rationale": "The TLSv1.0 protocol is vulnerable to the BEAST attack when used in CBC mode (October 2011). Unfortunately, the TLSv1.0 uses CBC modes for all of the block mode ciphers, which only leaves the RC4 streaming cipher which is also weak and is not recommended. Therefore, it is recommended that the TLSv1.0 protocol be disabled. The TLSv1.1 protocol does not support Authenticated Encryption with Associated Data (AEAD) which is designed to simultaneously provide confidentiality, integrity, and authenticity. The NIST SP 800-52r2 guidelines for TLS configuration require that TLS 1.2 is configured with FIPS-based cipher suites be supported by all government TLS servers and clients and requires support of TLS 1.3 by January 1, 2024. A September 2018 IETF draft also depreciates the usage of TLSv1.0 and TLSv1.1 as shown in the references. Impact: If an attempt to connect using a disabled protocol is made the connection attempt will fail and may have unanticipated impact on clients attempting to establish the connection.",
    "audit": "To verify that the server disable TLS v1.0 and v1.1, run one of the following commands: \u2022 On Ubuntu: cat /etc/mongod.conf | grep \u2013A20 \u2018net\u2019 | grep \u2013A10 \u2018ssl\u2019 | grep \u2018disabledProtocols\u2019 \u2022 On Windows: type mongod.conf | findstr \u2013A20 \u2018net\u2019 | findstr \u2013A10 \u2018ssl\u2019 | findstr \u2018disabledProtocols\u2019 If TLS1_0,TLS1_1 is not included in the string returned by either of these commands this is a fail.",
    "remediation": "For mongod (\u201cPrimary daemon process for the MongoDB system\u201d) In the configuration file /etc/mongod.conf, set the disabledProtocols option to to include TLS1_0,TLS1_1: net: ssl: mode: requireSSL PEMKeyFile: /etc/ssl/mongodb.pem CAFile: /etc/ssl/caToValidateClientCertificates.pem disabledProtocols: TLS1_0,TLS1_1 And restart monogdb instance with mongod --config /etc/mongod.conf Or mongod --sslDisabledProtocols `TLS1_0,TLS1_1 Default Value: TLS1_0 if TLS 1.1+ is available on the system. References: 1. https://www.mongodb.com/docs/v7.0/release-notes/4.0/#std-label-4.0-disable-tls 2. https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb- setting-net.ssl.disabledProtocols Additional Information: On macOS, you cannot disable TLS1_1 and leave both TLS1_0 and TLS1_2 enabled. You must also disable at least one of the other two; for example, TLS1_0,TLS1_1.",
    "function_names": [
      "compute_ssl_certificate_weak_protocols_disabled",
      "compute_load_balancer_weak_protocols_disabled",
      "cloud_cdn_distribution_weak_protocols_disabled",
      "compute_instance_weak_protocols_disabled",
      "compute_api_gateway_weak_protocols_disabled",
      "compute_ssl_policy_weak_protocols_disabled",
      "compute_ssl_listener_weak_protocols_disabled",
      "compute_ssl_endpoint_weak_protocols_disabled",
      "compute_ssl_connection_weak_protocols_disabled",
      "compute_ssl_cipher_weak_protocols_disabled"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "impact": "If an attempt to connect using a disabled protocol is made the connection attempt will fail and may have unanticipated impact on clients attempting to establish the connection.",
    "references": "1. https://www.mongodb.com/docs/v7.0/release-notes/4.0/#std-label-4.0-disable-tls 2. https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb- setting-net.ssl.disabledProtocols Additional Information: On macOS, you cannot disable TLS1_1 and leave both TLS1_0 and TLS1_2 enabled. You must also disable at least one of the other two; for example, TLS1_0,TLS1_1."
  },
  {
    "id": "4.3",
    "title": "Ensure Encryption of Data in Transit TLS or SSL (Transport Encryption)",
    "assessment": "Automated",
    "description": "Use TLS or SSL to protect all incoming and outgoing connections. This should include using TLS or SSL to encrypt communication between the mongod and mongos components of a MongoDB client as well as between all applications and MongoDB. MongoDB supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of MongoDB\u2019s network traffic. TLS/SSL ensures that MongoDB network traffic is only readable by the intended client. Please note: As of MongoDB version 4.2 SSL has been deprecated. Also, starting in MongoDB version 4.0, MongoDB disables support for TLS 1.0 encryption on systems where TLS 1.1+ is available.",
    "rationale": "This prevents sniffing of cleartext traffic between MongoDB components or performing a man-in-the-middle attack for MongoDB.",
    "audit": "To verify that the server requires SSL or TLS (net.tls.mode value set to requireTLS), run one of the following commands: On Ubuntu: cat /etc/mongod.conf | grep \u2013A20 \u2018net\u2019 | grep \u2013A10 \u2018tls\u2019 | grep \u2018mode\u2019 On Windows: type mongod.conf | findstr \u2013A20 \u2018net\u2019 | findstr \u2013A10 \u2018tls\u2019 | findstr \u2018mode\u2019",
    "remediation": "Configure MongoDB servers to require the use of SSL or TLS to encrypt all MongoDB network communications. To implement SSL or TLS to encrypt all MongoDB network communication, perform the following steps: For mongod (\u201cPrimary daemon process for the MongoDB system\u201d) In the configuration file /etc/mongod.conf, set the PEMKeyFile option to the certificate file\u2019s path and then start the component with this command: net: tls: mode: requireTLS certificateKeyFile: /etc/ssl/mongodb.pem CAFile: /etc/ssl/caToValidateClientCertificates.pem And restart monogdb instance with mongod --config /etc/mongod.conf Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/tutorial/configure-ssl/ 2. https://www.mongodb.com/docs/v7.0/tutorial/configure-ssl-clients/ 3. https://www.mongodb.com/docs/v7.0/tutorial/upgrade-cluster-to-ssl/ 4. https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb- setting-net.tls.clusterAuthX509.attributes Additional Information: ----------------------------------------------------------------------------- Value    |                           Description ------------+---------------------------------------------------------------- disabled    |  The server does not use TLS. ------------+---------------------------------------------------------------- allowTLS    |  Connections between servers do not use TLS. For incoming connections, |   the server accepts both TLS and non-TLS. | | ------------+---------------------------------------------------------------- preferTLS   |  Connections between servers use TLS. For incoming connections, the server |  accepts both TLS and non-TLS. | | ------------+---------------------------------------------------------------- requireTLS  |  The server uses and accepts only TLS encrypted connections. | -----------------------------------------------------------------------------",
    "function_names": [
      "mongodb_instance_tls_encryption_enabled",
      "mongodb_instance_ssl_deprecated_disabled",
      "mongodb_instance_tls_1_0_disabled",
      "mongodb_instance_tls_1_1_plus_enabled",
      "mongodb_instance_network_traffic_encrypted",
      "mongodb_instance_client_communication_encrypted",
      "mongodb_instance_application_communication_encrypted",
      "mongodb_instance_tls_certificate_valid",
      "mongodb_instance_tls_protocol_min_version_1_1"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/tutorial/configure-ssl/ 2. https://www.mongodb.com/docs/v7.0/tutorial/configure-ssl-clients/ 3. https://www.mongodb.com/docs/v7.0/tutorial/upgrade-cluster-to-ssl/ 4. https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb- setting-net.tls.clusterAuthX509.attributes Additional Information: ----------------------------------------------------------------------------- Value    |                           Description ------------+---------------------------------------------------------------- disabled    |  The server does not use TLS. ------------+---------------------------------------------------------------- allowTLS    |  Connections between servers do not use TLS. For incoming connections, |   the server accepts both TLS and non-TLS. | | ------------+---------------------------------------------------------------- preferTLS   |  Connections between servers use TLS. For incoming connections, the server |  accepts both TLS and non-TLS. | | ------------+---------------------------------------------------------------- requireTLS  |  The server uses and accepts only TLS encrypted connections. | -----------------------------------------------------------------------------"
  },
  {
    "id": "4.4",
    "title": "Ensure Federal Information Processing Standard (FIPS) is enabled",
    "assessment": "Automated",
    "description": "The Federal Information Processing Standard (FIPS) is a computer security standard used to certify software modules and libraries that encrypt and decrypt data securely. You can configure MongoDB to run with a FIPS 140-2 certified library for OpenSSL. FIPS is a property of the encryption system and not the access control system. However, the environment requires FIPS compliant encryption and access control. Organizations must ensure that the access control system uses only FIPS-compliant encryption.",
    "rationale": "FIPS is an industry standard which dictates how data should be encrypted at rest and during transmission.",
    "audit": "On Ubuntu: To verify that the server uses FIPS Mode (net.tls.FIPSMode value set to true), run following commands: mongod --config /etc/mongod.conf net: tls: FIPSMode: true Or To verify FIPS mode is running, check the server log file for a message that FIPS is active: FIPS 140-2 mode activated On Windows: Check FIPSMode is true type mongod.conf | findstr \u201cFIPSMode\"",
    "remediation": "Configuring FIPS mode, ensure that your certificate is FIPS compliant. Run mongod or mongos instance in FIPS mode. Make changes to configuration file, to configure your mongod or mongos instance to use FIPS mode, shut down the instance and update the configuration file with the following setting: net: tls: FIPSMode: true Start mongod or mongos instance with a configuration file. mongod --config /etc/mongod.conf Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/tutorial/configure-fips/",
    "function_names": [
      "mongodb_instance_fips_enabled",
      "mongodb_encryption_fips_compliant",
      "mongodb_access_control_fips_required",
      "mongodb_openssl_fips_certified",
      "mongodb_security_fips_140_2_enabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/tutorial/configure-fips/"
  },
  {
    "id": "4.5",
    "title": "Ensure Encryption of Data at Rest",
    "assessment": "Manual",
    "description": "Encryption of data at rest must be enabled to ensure compliance with security and privacy standards including HIPAA, PCI-DSS, and FERPA. Encryption at rest, when used in conjunction with transport encryption and good security policies that protect relevant accounts, passwords, and encryption keys.",
    "rationale": "Unauthorized users, such as intruders who are attempting security attacks, cannot read the data from storage and back up media unless they have the master encryption key to decrypt it.",
    "audit": "To verify that the server requires TLS (net.tls.mode value set to requireTLS), run one of the following commands: On Ubuntu: cat /etc/mongod.conf | grep --enableEncryption 'yes' | grep -- encryptionKeyFile '<path to keyfile>' On Windows: type mongod.conf | findstr --enableEncryption 'yes' | findstr -- encryptionKeyFile '<path to keyfile>'",
    "remediation": "It is recommended to enable the data at rest encryption to protect the data. Protecting Data at Rest Including following steps. \u2022 Generating a master key. \u2022 Generating keys for each database. \u2022 Encrypting data with the database keys. \u2022 Encrypting the database keys with the master key. Only the master key is external to the server and requires external management. To manage the master key, MongoDB\u2019s encrypted storage engine supports two key management options: \u2022 Integration with a third-party key management appliance via the Key Management Interoperability Protocol (KMIP). Recommended \u2022 Use of local key management via a keyfile. The encryption occurs transparently in the storage layer; i.e. all data files are fully encrypted from a filesystem perspective, and data only exists in an unencrypted state in memory and during transmission. To enable Encryption on Database follow below step mentioned in below Link https://docs.mongodb.com/manual/tutorial/configure-encryption/ Rotation of Key is also important. This can be enabled by following mentioned steps in below link. https://docs.mongodb.com/manual/tutorial/rotate-encryption-key/ References: 1. https://www.mongodb.com/docs/v7.0/core/security-encryption-at-rest/ Additional Information: Available in MongoDB Enterprise only.",
    "function_names": [
      "s3_bucket_encryption_enabled",
      "ebs_volume_encryption_enabled",
      "rds_instance_encryption_enabled",
      "dynamodb_table_encryption_enabled",
      "cloudtrail_log_encryption_enabled",
      "cloudwatch_log_encryption_enabled",
      "elasticache_redis_encryption_enabled",
      "elasticache_memcached_encryption_enabled",
      "efs_filesystem_encryption_enabled",
      "lambda_function_encryption_enabled",
      "sqs_queue_encryption_enabled",
      "sns_topic_encryption_enabled",
      "cloudfront_distribution_encryption_enabled",
      "backup_vault_encryption_enabled",
      "ec2_ami_encryption_enabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/security-encryption-at-rest/ Additional Information: Available in MongoDB Enterprise only."
  },
  {
    "id": "5.1",
    "title": "Ensure that system activity is audited",
    "assessment": "Automated",
    "description": "Track access and changes to database configurations and data. MongoDB Enterprise includes a system auditing facility that can record system events (e.g. user operations, connection events) on a MongoDB instance. These audit records permit forensic analysis and allow administrators to verify proper controls.",
    "rationale": "System level logs can be handy while troubleshooting an operational problem or handling a security incident.",
    "audit": "To verify that system activity is being audited for MongoDB, run the following command to confirm the auditLog.destination value is set correctly: On Ubuntu: cat /etc/mongod.conf |grep \u2013A4 \"auditLog\" | grep \"destination\" On Windows: type mongod.conf | findstr \u2013A4 \"auditLog\" | findstr \"destination\"",
    "remediation": "Set the value of auditLog.destination to the appropriate value from the following options: syslog To enable auditing and print audit events to syslog mongod --dbpath data/db --auditDestination syslog console To enable auditing and print audit events to standard output (i.e., stdout) mongod --dbpath data/db --auditDestination console Json File To enable auditing and print audit events to a file in JSON format. Printing audit events to file in JSON format degrades server performance more than printing to a file in BSON format. mongod --dbpath data/db --auditDestination file --auditFormat JSON -- auditPath data/db/auditLog.json Bson File To enable auditing and print audit events to a file in BSON binary format mongod --dbpath data/db --auditDestination file --auditFormat BSON -- auditPath data/db/auditLog.bson Default Value: Not configured References: 1. http://docs.mongodb.org/manual/tutorial/configure-auditing/",
    "function_names": [
      "mongodb_instance_audit_logging_enabled",
      "mongodb_instance_audit_events_captured",
      "mongodb_instance_audit_retention_configured",
      "mongodb_instance_audit_logs_encrypted",
      "mongodb_instance_audit_logs_immutable",
      "mongodb_instance_audit_logs_centralized",
      "mongodb_instance_audit_logs_access_restricted",
      "mongodb_instance_audit_logs_integrity_verified"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. http://docs.mongodb.org/manual/tutorial/configure-auditing/"
  },
  {
    "id": "5.2",
    "title": "Ensure that audit filters are configured properly",
    "assessment": "Manual",
    "description": "MongoDB Enterprise supports auditing of various operations. When enabled, the audit facility, by default, records all auditable operations as detailed in Audit Event Actions, Details, and Results. To specify which events to record, the audit feature includes the -- auditFilter option. This check is only for Enterprise editions.",
    "rationale": "All operations carried out on the database are logged. This helps in backtracking and tracing any incident that occurs.",
    "audit": "To verify that audit filters are configured on MongoDB as per the organization\u2019s requirements, run the following command: On Ubuntu: cat /etc/mongod.conf |grep \u2013A10 \"auditLog\" | grep \"filter\" On Windows: type mongod.conf | findstr \u2013A10 \"auditLog\" | findstr \"filter\"",
    "remediation": "Set the audit filters based on the organization\u2019s requirements. Default Value: Not configured References: 1. https://docs.mongodb.com/manual/reference/audit-message/ 2. https://docs.mongodb.com/manual/tutorial/configure-audit-filters/",
    "function_names": [
      "mongodb_audit_log_filter_enabled",
      "mongodb_audit_log_filter_configured",
      "mongodb_audit_log_filter_enterprise_edition",
      "mongodb_audit_log_filter_custom_events",
      "mongodb_audit_log_filter_default_disabled",
      "mongodb_audit_log_filter_operations_restricted",
      "mongodb_audit_log_filter_event_actions_defined",
      "mongodb_audit_log_filter_minimal_privileges",
      "mongodb_audit_log_filter_sensitive_operations",
      "mongodb_audit_log_filter_compliance_standard"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/manual/reference/audit-message/ 2. https://docs.mongodb.com/manual/tutorial/configure-audit-filters/"
  },
  {
    "id": "5.3",
    "title": "Ensure that logging captures as much information as possible",
    "assessment": "Automated",
    "description": "The SystemLog.quiet option stops logging of information such as: \u2022 connection events \u2022 authentication events \u2022 replication sync activities \u2022 evidence of some potentially impactful commands being run (eg: drop, dropIndexes, validate) This information should be logged whenever possible. This check is only for Enterprise editions.",
    "rationale": "The use of SystemLog.quiet makes troubleshooting problems and investigating possible security incidents much more difficult.",
    "audit": "To verify that the SystemLog: quiet=false option is disabled (value of false), run the following command: On Ubuntu: cat /etc/mongod.conf |grep \"quiet\" On Windows: type mongod.conf | findstr \"quiet\"",
    "remediation": "Set `SystemLog: quiet: false` to false in the /etc/mongod.conf file to disable it. References: 1. https://docs.mongodb.com/manual/reference/configuration- options/#systemLog.quiet",
    "function_names": [
      "mongodb_database_logging_quiet_disabled",
      "mongodb_database_logging_verbose_enabled",
      "mongodb_database_audit_events_captured",
      "mongodb_database_connection_logging_enabled",
      "mongodb_database_authentication_logging_enabled",
      "mongodb_database_replication_logging_enabled",
      "mongodb_database_command_logging_enabled",
      "mongodb_database_enterprise_logging_compliance"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/manual/reference/configuration- options/#systemLog.quiet"
  },
  {
    "id": "5.4",
    "title": "Ensure that new entries are appended to the end of the log file",
    "assessment": "Automated",
    "description": "By default, new log entries will overwrite old entries after a restart of the mongod or Mongols service. Enabling the systemLog.logAppend setting causes new entries to be appended to the end of the log file rather than overwriting the existing content of the log when the mongos or mongod instance restarts.",
    "rationale": "Allowing old entries to be overwritten by new entries instead of appending new entries to the end of the log may destroy old log data that is needed for a variety of purposes.",
    "audit": "To verify that new log entries will be appended to the end of the log file after a restart (systemLog: logAppend: true value set to true), run the following command: On Ubuntu: cat /etc/mongod.conf | grep \"logAppend\" On Windows: type mongod.conf | findstr \"logAppend\"",
    "remediation": "Set `systemLog: logAppend: true` to true in the /etc/mongod.conf file. References: 1. https://docs.mongodb.com/manual/reference/configuration- options/#systemLog.logAppend",
    "function_names": [
      "mongodb_log_append_enabled",
      "mongodb_system_log_append_enabled",
      "mongodb_log_rotation_append_enabled",
      "mongodb_log_file_append_only",
      "mongodb_log_append_on_restart"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/manual/reference/configuration- options/#systemLog.logAppend"
  },
  {
    "id": "6.1",
    "title": "Ensure that MongoDB uses a non-default port",
    "assessment": "Automated",
    "description": "Changing the default port used by MongoDB makes it harder for attackers to find the database and target it.",
    "rationale": "Standard ports are used in automated attacks and by attackers to verify which applications are running on a server. Impact: Hackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to \"fly under the radar\". This is just to avoid detection, other than that there is no added safety by using a different port.",
    "audit": "To verify the port number used by MongoDB, execute the following command and ensure that the port number is not 27017: On Ubuntu: cat /etc/mongod.conf |grep \u201cport\u201d On Windows: type mongod.conf | findstr \u201cport\u201d",
    "remediation": "Change the port for MongoDB server to a number other than 27017. In mongod.conf edit the below lines # network interfaces net: port: $Orginasation Defined port bindIp: $Orginasation Defined IP References: 1. https://docs.mongodb.com/v5.0/reference/default-mongodb-port/",
    "function_names": [
      "mongodb_instance_non_default_port",
      "mongodb_instance_default_port_disabled",
      "mongodb_network_non_standard_port",
      "mongodb_connection_custom_port",
      "mongodb_endpoint_port_not_default"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "impact": "Hackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to \"fly under the radar\". This is just to avoid detection, other than that there is no added safety by using a different port.",
    "references": "1. https://docs.mongodb.com/v5.0/reference/default-mongodb-port/"
  },
  {
    "id": "6.2",
    "title": "Ensure that operating system resource limits are set for MongoDB",
    "assessment": "Manual",
    "description": "Operating systems provide ways to limit and control the usage of system resources such as threads, files, and network connections on a per-process and per-user basis",
    "rationale": "These ulimits prevent a single user from consuming too many system resources.",
    "audit": "To verify the resource limits set for MongoDB, run the following commands. Extract the process ID for MongoDB: ps -ef | grep mongod View the limits associated with that process number: cat /proc/1322/limits",
    "remediation": "Every deployment may have unique requirements and settings. Recommended thresholds and settings are particularly important for MongoDB deployments: \u2022 f (file size): unlimited \u2022 t (cpu time): unlimited \u2022 v (virtual memory): unlimited [1] \u2022 n (open files): 64000 \u2022 m (memory size): unlimited [1] [2] \u2022 u (processes/threads): 64000 Restart the mongod and mongos instances after changing the ulimit settings to ensure that the changes take effect. Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/reference/ulimit/ 2. https://docs.mongodb.com/manual/reference/ulimit/",
    "function_names": [
      "mongodb_process_thread_limits_set",
      "mongodb_process_file_limits_set",
      "mongodb_process_network_limits_set",
      "mongodb_user_thread_limits_set",
      "mongodb_user_file_limits_set",
      "mongodb_user_network_limits_set",
      "mongodb_resource_limits_all_set",
      "mongodb_system_resource_limits_configured"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/reference/ulimit/ 2. https://docs.mongodb.com/manual/reference/ulimit/"
  },
  {
    "id": "6.3",
    "title": "Ensure that server-side scripting is disabled if not needed",
    "assessment": "Manual",
    "description": "MongoDB supports the execution of JavaScript code for certain server-side operations: mapReduce, group, $where, $accumulator, and $function aggregation operations that allow users to define custom aggregation expressions. If you do not use these operations, server-side scripting should be disabled.",
    "rationale": "If server-side scripting is not needed and is not disabled, this introduces unnecessary risk which may allow an attacker to take advantage of insecure coding. Impact: Disabling server-side scripting will block all server-side scripts from executing.",
    "audit": "If server-side scripting is not required, verify that it is disabled (javascriptEnabled value of false) using the following command: On Ubuntu: cat /etc/mongod.conf | grep \u2013A10 \"security\" | grep \"javascriptEnabled\" On Windows: type mongod.conf | findstr \u2013A10 \"security\" | findstr \"javascriptEnabled\"",
    "remediation": "If server-side scripting is not required, for mongod instance disable it by using the -- noscripting option on the command line, or setting security.javascriptEnabled to false in the configuration file. Starting in MongoDB 4.4 this is also applicable to mongos. Default Value: Enabled References: 1. https://www.mongodb.com/docs/v7.0/core/server-side-javascript/ 2. https://docs.mongodb.com/manual/core/server-side-javascript/#disable-server- side-js",
    "function_names": [
      "mongodb_instance_server_side_scripting_disabled",
      "mongodb_database_javascript_execution_disabled",
      "mongodb_collection_mapreduce_disabled",
      "mongodb_aggregation_custom_functions_disabled",
      "mongodb_operation_server_side_code_disabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "impact": "Disabling server-side scripting will block all server-side scripts from executing.",
    "references": "1. https://www.mongodb.com/docs/v7.0/core/server-side-javascript/ 2. https://docs.mongodb.com/manual/core/server-side-javascript/#disable-server- side-js"
  },
  {
    "id": "7.1",
    "title": "Ensure appropriate key file permissions are set",
    "assessment": "Manual",
    "description": "In the Shared Cluster, the certificate or keyfile is utilized for authentications. Implementing proper file permissions on the certificate or keyfile will prevent unauthorized access to it.",
    "rationale": "Protecting the certificate/keyfile strengthens authentication in the sharded cluster and prevents unauthorized access to the MongoDB database.",
    "audit": "Find the location of certificate/keyfile using the following commands: On Ubuntu: cat /etc/mongod.conf | grep \u201ckeyFile:\u201d cat /etc/mongod.conf | grep \u201cPEMKeyFile:\u201d cat /etc/mongod.conf | grep \u201cCAFile:\u201d On Windows: type mongod.conf | findstr \u201ckeyFile:\u201d type mongod.conf | findstr \u201cPEMKeyFile:\u201d type mongod.conf | findstr \u201cCAFile:\u201d Check the permission of the file using: ls -l certificate_file_locations ls -l keyfile_locations",
    "remediation": "Set the keyFile ownership to mongodb user and remove other permissions by executing these commands: chmod 600 /keyfile sudo chown mongodb:mongodb /keyfile Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/tutorial/deploy-replica-set-with-keyfile- access-control/",
    "function_names": [
      "compute_certificate_file_permissions_restricted",
      "compute_keyfile_permissions_restricted",
      "compute_certificate_file_owner_correct",
      "compute_keyfile_owner_correct",
      "compute_certificate_file_group_restricted",
      "compute_keyfile_group_restricted",
      "compute_certificate_file_world_readable_disabled",
      "compute_keyfile_world_readable_disabled"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/tutorial/deploy-replica-set-with-keyfile- access-control/"
  },
  {
    "id": "7.2",
    "title": "Ensure appropriate database file permissions are set.",
    "assessment": "Manual",
    "description": "MongoDB database files need to be protected using file permissions.",
    "rationale": "This will restrict unauthorized users from accessing the database.",
    "audit": "To verify that the permissions for the MongoDB database file are configured securely, run the following commands. Find out the database location using the following command: On Ubuntu: cat /etc/mongod.conf |grep \"dbpath\" or cat /etc/mongod.conf | grep \"dbPath\" Use the database location as part of the following command to view and verify the permissions set for the database file: Example: $ stat -c '%a' /var/lib/mongodb On Windows: type mongod.conf | findstr \"dbpath\" Use the database location as part of the following command to view and verify the permissions set for the database file: icacls \"dbpath\"",
    "remediation": "Set ownership of the database file to mongodb user and remove other permissions using the following commands: chmod 770 /var/lib/mongodb chown mongodb:mongodb /var/lib/mongodb Default Value: Not configured References: 1. https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb- setting-storage.dbPath",
    "function_names": [
      "mongodb_database_file_permissions_restricted",
      "mongodb_data_directory_owner_set",
      "mongodb_data_directory_group_set",
      "mongodb_data_directory_permissions_secure",
      "mongodb_config_file_permissions_restricted",
      "mongodb_log_file_permissions_restricted",
      "mongodb_keyfile_permissions_restricted",
      "mongodb_data_directory_world_writable_disabled",
      "mongodb_data_directory_world_readable_disabled",
      "mongodb_data_directory_strict_owner_permissions"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://www.mongodb.com/docs/v7.0/reference/configuration-options/#mongodb- setting-storage.dbPath"
  }
]