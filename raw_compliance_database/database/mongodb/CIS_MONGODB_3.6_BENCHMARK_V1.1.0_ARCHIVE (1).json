[
  {
    "id": "1.1",
    "title": "Ensure the appropriate MongoDB software version/patches are installed",
    "assessment": "Manual",
    "description": "The MongoDB installation version, along with the patch level, should be the most recent that is compatible with the organization's operational needs.",
    "rationale": "Using the most recent MongoDB software version along with all applicable patches, helps limit the possibilities for vulnerabilities in the software. The installation version and/or patches applied should be selected according to the needs of the organization. At a minimum, the software version should be supported.",
    "audit": "On Ubuntu: Run the following command from within the MongoDB shell to determine if the MongoDB software version complies with your organization\u2019s operational needs: > db.version() On Windows: Navigate to the Installation directory of Mongo DB on the server and run below command mongod.exe --version",
    "remediation": "Upgrade to the latest version of the MongoDB software:  10 | P a g e 1. Backup the data set. 2. Download the binaries for the latest MongoDB revision from the MongoDB Download Page and store the binaries in a temporary location. The binaries download as compressed files that extract to the directory structure used by the MongoDB installation. 3. Shutdown the MongoDB instance. 4. Replace the existing MongoDB binaries with the downloaded binaries. 5. Restart the MongoDB instance. Default Value: Patches are not installed by default. References: 1. https://docs.mongodb.com/v3.6/tutorial/upgrade-revision/ 2. https://docs.mongodb.com/v3.6/release-notes/ 3. https://www.mongodb.com/download-center#community 4. https://www.mongodb.com/support-policy",
    "function_names": [
      "mongodb_instance_version_current",
      "mongodb_instance_patches_updated",
      "mongodb_instance_version_compatible",
      "mongodb_instance_patches_recent",
      "mongodb_instance_version_supported"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/upgrade-revision/ 2. https://docs.mongodb.com/v3.6/release-notes/ 3. https://www.mongodb.com/download-center#community 4. https://www.mongodb.com/support-policy"
  },
  {
    "id": "2.1",
    "title": "Ensure Authentication is configured",
    "assessment": "Automated",
    "description": "This setting ensures that all clients, users, servers are required to authenticate before being granted access to the MongoDB database. Authentication is the process of verifying the identity of a client. When access control, i.e. authorization, is enabled, MongoDB requires all clients to authenticate themselves in order to determine their access. To authenticate as a user, you must provide a username, password, and the authentication database associated with that user.",
    "rationale": "Failure to authenticate clients, users, servers can enable unauthorized access to the MongoDB database and can prevent tracing actions back to their sources.",
    "audit": "Run the following command to verify whether an authorization is enabled on the MongoDB server. On Ubuntu: cat /etc/mongod.conf | grep \u201cauthorization\u201d On Windows: type mongod.conf | findstr \u201cauthorization\u201d The value for authorization must be set to enabled. To authenticate using the mongo shell use the following approach  12 | P a g e \u2022 Use the mongo command-line authentication options (--username, --password, and --authenticationDatabase) when connecting to the mongod or mongos instance Or \u2022 Connect first to the mongod or mongos instance, and then run the authenticate command or the db.auth() method against the authentication database.",
    "remediation": "The authentication mechanism should be implemented before anyone accesses the MongoDB Server. To enable the authentication mechanism: \u2022 Start the MongoDB instance without authentication. mongod --port 27017 --dbpath /data/db1 Or mongod.exe --port 27017 --dbpath db1 \u2022 Create the system user administrator, ensuring that its password meets organizationally-defined password complexity requirements. use admin db.createUser( { user: \"siteUserAdmin\", pwd: \"password\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ] } ) \u2022 Open mongod.conf and change for authorization value to enabled: security: authorization: \"enabled\" \u2022 Restart the MongoDB instance service mongodb restart Default Value: By default, authorization is set to disable. References:  13 | P a g e 1. https://docs.mongodb.com/v3.6/core/authentication/",
    "function_names": [
      "mongodb_database_authentication_enabled",
      "mongodb_user_authentication_required",
      "mongodb_client_authentication_enabled",
      "mongodb_server_authentication_enabled",
      "mongodb_access_control_enabled",
      "mongodb_authentication_database_configured",
      "mongodb_user_password_required",
      "mongodb_authentication_mechanism_configured"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "13 | P a g e 1. https://docs.mongodb.com/v3.6/core/authentication/"
  },
  {
    "id": "2.2",
    "title": "Ensure that MongoDB does not bypass authentication via the localhost exception",
    "assessment": "Automated",
    "description": "MongoDB should not be set to bypass authentication via the localhost exception. The localhost exception allows the user to enable authorization before creating the first user in the system. When active, the localhost exception allows all connections from the localhost interface to have full access to that instance. The exception applies only when there are no users created in the MongoDB instance. Note: This recommendation only applies when there are no users created in the MongoDB instance.",
    "rationale": "Disabling this exception will prevent unauthorized local access to the MongoDB database. It will also ensure the traceability of each database activity to a specific user. Localhost Exception allows direct connect to Mongod\u2019s without any UN/PW.",
    "audit": "Run the following command to extract the information about enableLocalhostAuthBypass setting on Configuration File. On Ubuntu: cat /etc/mongod.conf |grep \"enableLocalhostAuthBypass\" On Windows: type mongod.conf | findstr \"enableLocalhostAuthBypass\" The value for enableLocalhostAuthBypass must be false.",
    "remediation": "To disable local authentication on the MongoDB database. Type OS Console Command mongod --setParameter enableLocalhostAuthBypass=0  15 | P a g e or To manually configure use the setParameter option in the mongo configuration file to set it to false. setParameter: enableLocalhostAuthBypass: false Default Value: By default, localhost exception value (enableLocalhostAuthBypass) is true. References: 1. https://docs.mongodb.com/v3.6/reference/parameters/#param.enableLocalhostA uthBypass",
    "function_names": [
      "mongodb_instance_authentication_required",
      "mongodb_instance_localhost_exception_disabled",
      "mongodb_instance_no_unauthenticated_access",
      "mongodb_instance_first_user_required",
      "mongodb_instance_auth_bypass_protected"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/parameters/#param.enableLocalhostA uthBypass"
  },
  {
    "id": "2.3",
    "title": "Ensure authentication is enabled in the sharded cluster",
    "assessment": "Manual",
    "description": "Authentication is enabled in a sharded cluster when the certificate or key files are created and configured for all components. This ensures that every client that accesses the cluster must provide credentials, to include MongoDB instances that access each other within the cluster. With keyfile authentication, each mongod or mongos instance in the sharded cluster uses the contents of the keyfile as the shared password for authenticating other members in the deployment. Only mongod or mongos instances with the correct keyfile can join the sharded cluster. For Production Environment : x.509 certificate authentication with secure TSL/SSL connection must be used for authentication. For Development Purpose : Key file can be used as an authentication mechanism between the shared cluster. Keyfiles are bare-minimum forms of security and are best suited for testing or development environments.",
    "rationale": "Enforcing a key or certificate on a sharded cluster prevents unauthorized access to the MongoDB database and provides traceability of database activities to a specific user or component. A MongoDB sharded cluster can enforce user authentication as well as internal authentication of its components to secure against unauthorized access.",
    "audit": "Based on recommendations \u2022 PEMKeyFile, clusterFile, CAFile must be configured. \u2022 clusterAuthMode should be set to x509 \u2022 authenticationMechanisms should be set to MONGODB-X509.  17 | P a g e Run the following command to verify that the certificate-based authentication is configured: On Ubuntu: cat /etc/mongod.conf | grep \u201cPEMKeyFile\u201d cat /etc/mongod.conf | grep \"CAFile\" cat /etc/mongod.conf | grep \"clusterFile\" cat /etc/mongod.conf | grep \"clusterAuthMode\" cat /etc/mongod.conf | grep \u201cauthenticationMechanisms:\u201d On Windows: type mongod.conf | findstr \u201cPEMKeyFile\u201d type mongod.conf | findstr \u201cCAFile\u201d type mongod.conf | findstr \u201cclusterFile\u201d type mongod.conf | findstr \u201cclusterAuthMode\u201d type mongod.conf | findstr \u201cauthenticationMechanisms:\u201d  Run the following command to verify that the key file-based authentication is configured: ( Only for Development Purpose ) On Ubuntu: cat /etc/mongod.conf | grep \u201ckeyFile=\u201d On Windows: type mongod.conf | findstr \u201ckeyFile\u201d",
    "remediation": "To authenticate to servers, clients can use x.509 certificates instead of usernames and passwords. MongoDB supports x.509 certificate authentication for use with a secure TLS/SSL connection. The x.509 client authentication allows clients to authenticate to servers with certificates rather than with a username and password. Change the configuration file /etc/mongod.conf on each host, adding the following rows: net: port: 27017 ssl: mode: requireSSL PEMKeyFile: /etc/mongodb/ssl/server1.pem CAFile: /etc/mongodb/ssl/mongoCA.crt clusterFile: /etc/mongodb/ssl/server1.pem security:  18 | P a g e authorization: enabled clusterAuthMode: x509 Restart the daemon sudo service mongodb restart  To enable authentication in the sharded cluster, perform the following steps:( Only for Development Purpose ) \u2022 Generate A Key File \u2022 On each component in the shared cluster, enable authentication by editing the configuration file /etc/mongod.conf. Set the keyFile option to the key file\u2019s path and then start the component with this command: keyFile = /srv/mongodb/keyfile \u2022 When starting the component, set --keyFile option, which is an option for both mongos instances and mongod instances. Set the --keyFile to the key file\u2019s path. Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/tutorial/enforce-keyfile-access-control-in- existing-sharded-cluster-no-downtime/ 2. https://docs.mongodb.com/v3.6/tutorial/enforce-keyfile-access-control-in- existing-sharded-cluster/ 3. https://docs.mongodb.com/v3.6/tutorial/configure-x509-member-authentication/",
    "function_names": [
      "mongodb_cluster_authentication_enabled",
      "mongodb_cluster_keyfile_authentication_enabled",
      "mongodb_cluster_x509_authentication_enabled",
      "mongodb_cluster_tls_ssl_enabled",
      "mongodb_cluster_production_authentication_secure",
      "mongodb_cluster_development_authentication_secure"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/enforce-keyfile-access-control-in- existing-sharded-cluster-no-downtime/ 2. https://docs.mongodb.com/v3.6/tutorial/enforce-keyfile-access-control-in- existing-sharded-cluster/ 3. https://docs.mongodb.com/v3.6/tutorial/configure-x509-member-authentication/"
  },
  {
    "id": "3.1",
    "title": "Ensure that Role-based access control (RBAC) is enabled and configured",
    "assessment": "Manual",
    "description": "Role-based access control (RBAC) is a method of regulating access to resources based on the roles of individual users within an enterprise. A user is granted one or more roles that determine the user\u2019s access to database resources and operations. Outside of role assignments, the user has no access to the system. MongoDB can use RBAC to govern access to MongoDB systems. MongoDB does not enable authorization by default.",
    "rationale": "When properly implemented, RBAC enables users to carry out a wide range of authorized tasks by dynamically regulating their actions according to flexible functions. This allows an organization to control employees\u2019 access to all database tables through RBAC.",
    "audit": "Connect to MongoDB with the appropriate privileges and run the following command: mongo --port 27017 -u <username> -p password --authenticationDatabase <database_name> Identify users' roles and privileges: > db.getUser() > db.getRole() Verify that the appropriate role or roles have been configured for each user.",
    "remediation": "1. Establish roles for MongoDB. 2. Assign the appropriate privileges to each role. 3. Assign the appropriate users to each role.  21 | P a g e 4. Remove any individual privileges assigned to users that are now addressed by the roles. 5. See the reference below for more information. References: 1. https://docs.mongodb.com/v3.6/tutorial/manage-users-and-roles/ 2. https://docs.mongodb.com/v3.6/core/authorization/",
    "function_names": [
      "mongodb_role_based_access_enabled",
      "mongodb_user_role_assigned",
      "mongodb_default_auth_disabled",
      "mongodb_rbac_configuration_valid",
      "mongodb_resource_access_restricted",
      "mongodb_operation_permission_defined",
      "mongodb_enterprise_rbac_enabled",
      "mongodb_system_access_role_based"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/manage-users-and-roles/ 2. https://docs.mongodb.com/v3.6/core/authorization/"
  },
  {
    "id": "3.2",
    "title": "Ensure that MongoDB only listens for network connections on authorized interfaces",
    "assessment": "Automated",
    "description": "Ensuring that MongoDB runs in a trusted network environment involves limiting the network interfaces on which MongoDB instances listen for incoming connections. Any untrusted network connections should be dropped by MongoDB. Firewalls allow administrators to filter and control access to a system by providing granular control over network communications. For administrators of MongoDB, the following capabilities are important: \u2022 Limiting incoming traffic on a specific port to specific systems \u2022 Limiting incoming traffic from untrusted hosts. On Linux systems, the iptables interface provides access to the underlying netfilter firewall. On Windows systems, netsh command line interface provides access to the underlying Windows Firewall.",
    "rationale": "This configuration blocks connections from untrusted networks, leaving only systems on authorized and trusted networks able to attempt to connect to the MongoDB. If not configured, this may lead to unauthorized connections from untrusted networks to MongoDB.",
    "audit": "On Ubuntu: 1. Verify that network exposure is limited, review the settings in the MongoDB configuration file: cat /etc/mongod.conf |grep \u2013A12 \u201cnet\u201d | grep \u201cbindIp\" 2. Verify the relevant network settings on the Linux system itself: iptables \u2013L  23 | P a g e On Windows: type mongod.conf | findstr \u201cbindIp\"",
    "remediation": "Configure the MongoDB configuration file to limit its exposure to only the network interfaces on which MongoDB instances should listen for incoming connections. Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/tutorial/configure-linux-iptables-firewall/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-windows-netsh-firewall/ 3. https://docs.mongodb.com/v3.6/core/security-network/",
    "function_names": [
      "mongodb_instance_authorized_interfaces_only",
      "mongodb_network_restricted_to_trusted",
      "mongodb_firewall_incoming_traffic_limited",
      "mongodb_port_access_restricted",
      "mongodb_untrusted_hosts_blocked",
      "mongodb_iptables_rules_configured",
      "mongodb_netsh_firewall_configured",
      "mongodb_listener_interface_authorized",
      "mongodb_network_connection_filtered",
      "mongodb_incoming_connection_restricted"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/configure-linux-iptables-firewall/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-windows-netsh-firewall/ 3. https://docs.mongodb.com/v3.6/core/security-network/"
  },
  {
    "id": "3.3",
    "title": "Ensure that MongoDB is run using a Least Privileges, dedicated service account",
    "assessment": "Manual",
    "description": "The MongoDB service should not be run using a privileged account such as 'root' because this unnecessarily exposes the operating system to high risk. This setting ensures that the monogd service runs as a least-privileged user.",
    "rationale": "Using a non-privileged, dedicated service account restricts the database from accessing the critical areas of the operating system which are not required by MongoDB. This will also mitigate the potential for unauthorized access via a compromised, privileged account on the operating system. Anyone who has been a victim of viruses, worms, and other malicious software (malware) will appreciate the security principle of \u201cleast privilege.\u201d If all processes ran with the minial set of privileges needed to perform the user's tasks, it would be more difficult for malware to infect a machine and propagate to other machines.",
    "audit": "Run the following command to get listing of all mongo instances, the PID number, and the PID owner. On Ubuntu: ps -ef | grep -E \"mongos|mongod\" ps -aef | grep mongod On Windows: TASKLIST /V | findstr mongo",
    "remediation": "1. Create a user which is only used for running Mongodb and directly related processes. This user must not have administrative rights to the system. Steps to create user  25 | P a g e useradd -m -d /home/mongodb -s /bin/bash -g mongodb -u 1234 mongodb 2. Set the Database data files, the keyfile, and the SSL private key files to only be readable by the mongod/mongos user and then set ownership to mongodb user only sudo chown -R mongodb:mongodb /data/db 3. Set the log files to only be writable by the mongod/mongos user and readable only by root. Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/tutorial/manage-users-and-roles/",
    "function_names": [
      "mongodb_service_account_least_privileges",
      "mongodb_service_account_dedicated",
      "mongodb_service_account_no_root",
      "mongodb_service_account_non_privileged",
      "mongodb_service_account_minimal_permissions"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/manage-users-and-roles/"
  },
  {
    "id": "3.4",
    "title": "Ensure that each role for each MongoDB database is needed and grants only the necessary privileges",
    "assessment": "Manual",
    "description": "Reviewing all roles periodically and eliminating unneeded roles as well as unneeded privileges from necessary roles helps minimize the privileges for each user.",
    "rationale": "Although role-based access control (RBAC) has many advantages for regulating access to resources, over time, some roles may no longer be needed, and some roles may grant privileges that are no longer needed.",
    "audit": "Perform the following command to view all roles, including both built-in and user-defined roles as well as the privileges granted by each role, on the database on which the command runs. Ensure that only necessary roles are listed, and only the necessary privileges are listed for each role. db.runCommand( { rolesInfo: 1, showPrivileges: true, showBuiltinRoles: true } )",
    "remediation": "Revoke specified privileges from the user-defined role on the database where the command is run. The revokePrivilegesFromRole command has the following syntax: { revokePrivilegesFromRole: \"<role>\", privileges: [ { resource: { <resource> }, actions: [ \"<action>\", ... ] }, ... ], }  27 | P a g e References: 1. https://docs.mongodb.com/v3.6/reference/method/db.revokePrivilegesFromRole / 2. https://docs.mongodb.com/v3.6/reference/method/db.revokePrivilegesFromRole /#db.revokePrivilegesFromRole Additional Information: You must have the dropRole action on a database to drop a role from that database.",
    "function_names": [
      "mongodb_role_unused_identify",
      "mongodb_role_privileges_minimized",
      "mongodb_role_privileges_review_periodic",
      "mongodb_role_unused_remove",
      "mongodb_role_privileges_excessive_revoke",
      "mongodb_role_privileges_least_privilege",
      "mongodb_role_privileges_audit_over_90d",
      "mongodb_role_privileges_necessary_only"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/method/db.revokePrivilegesFromRole / 2. https://docs.mongodb.com/v3.6/reference/method/db.revokePrivilegesFromRole /#db.revokePrivilegesFromRole Additional Information: You must have the dropRole action on a database to drop a role from that database."
  },
  {
    "id": "3.5",
    "title": "Review User-Defined Roles",
    "assessment": "Manual",
    "description": "Reviewing all roles periodically and removing all users from those roles who do not require them helps minimize the privileges for each user. Important Roles which should be reviewed periodically. \u2022 createRole: Creates a role and specifies its privileges. \u2022 dropRole: Deletes the user-defined role. \u2022 grantPrivilegesToRole: Assigns privileges to a user-defined role. \u2022 grantRolesToRole: Specifies roles from which a user-defined role inherits privileges. \u2022 updateRole: Updates a user-defined role.",
    "rationale": "Although role-based access control (RBAC) has many advantages for regulating access to resources, over time some users may be assigned roles which are no longer necessary, e.g. a user changing jobs within the organization. Users who have excessive privileges pose an unnecessary risk to the organization.",
    "audit": "Check each role for each database using one of the following commands. To specify a role from the current database, specify the role by its name: db.runCommand( { rolesInfo: \"<rolename>\" } ) To specify a role from another database, specify the role by a document that specifies the role and database: db.runCommand( { rolesInfo: { role: \"<rolename>\", db: \"<database>\" } } )",
    "remediation": "To remove a user from one or more roles on the current database, use the following command:  29 | P a g e >use dbName >db.revokeRolesFromUser(\"<username>\",[<roles>]) References: 1. https://docs.mongodb.com/v3.6/reference/method/db.revokeRolesFromUser/ 2. https://docs.mongodb.com/v3.6/reference/privilege-actions/ 3. https://docs.mongodb.com/v3.6/reference/command/nav-role-management/ Additional Information: Logged-in user must have the revokeRole action on a database to revoke a role on that database. Also, roleInfo works for both user-defined roles and built-in roles.",
    "function_names": [
      "iam_role_no_unnecessary_users",
      "iam_role_periodic_review",
      "iam_role_privileges_minimized",
      "iam_role_privileges_reviewed",
      "iam_role_inheritance_reviewed",
      "iam_role_creation_audited",
      "iam_role_deletion_audited",
      "iam_role_privilege_grant_audited",
      "iam_role_inheritance_grant_audited",
      "iam_role_update_audited"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/method/db.revokeRolesFromUser/ 2. https://docs.mongodb.com/v3.6/reference/privilege-actions/ 3. https://docs.mongodb.com/v3.6/reference/command/nav-role-management/ Additional Information: Logged-in user must have the revokeRole action on a database to revoke a role on that database. Also, roleInfo works for both user-defined roles and built-in roles."
  },
  {
    "id": "3.6",
    "title": "Review Superuser/Admin Roles",
    "assessment": "Manual",
    "description": "Roles provide several advantages that make it easier to manage privileges in a database system. Security administrators can control access to their databases in a way that mirrors the structure of their organizations (they can create roles in the database that map directly to the job functions in their organizations). The assignment of privileges is simplified. Instead of granting the same set of privileges to each individual user in a particular job function, the administrator can grant this set of privileges to a role representing that job function and then grant that role to each user in that job function. The following roles provide the ability to assign any user any privilege on any database, which means that users with one of these roles can assign themselves any privilege on any database: \u2022 dbOwner role, when scoped to the admin database \u2022 userAdmin role, when scoped to the admin database \u2022 userAdminAnyDatabase role",
    "rationale": "Reviewing the Superuser/Admin roles within a database helps minimize the possibility of privileged unwanted access.",
    "audit": "Superuser roles provide the ability to assign any user any privilege on any database, which means that users with one of these roles can assign themselves any privilege on any database: db.runCommand( { rolesInfo: \"dbOwner\" } ) db.runCommand( { rolesInfo: \"userAdmin\" } ) db.runCommand( { rolesInfo: \"userAdminAnyDatabase\" } ) Root role provides access to the operations and all the resources of the readWriteAnyDatabase, dbAdminAnyDatabase, userAdminAnyDatabase, clusterAdmin roles, restore combined.  31 | P a g e db.runCommand( { rolesInfo: \"readWriteAnyDatabase\" } ) db.runCommand( { rolesInfo: \"dbAdminAnyDatabase\" } ) db.runCommand( { rolesInfo: \"userAdminAnyDatabase\" } ) db.runCommand( { rolesInfo: \"clusterAdmin\" } ) Cluster Administration Roles are used for administering the whole system rather than just a single database. db.runCommand( { rolesInfo: \"hostManager\" } )",
    "remediation": "To remove a user from one or more roles on the current database. use <dbName> db.revokeRolesFromUser( \"<usernamem>\", [ <roles> ]) References: 1. https://docs.mongodb.com/v3.6/reference/built-in-roles/ 2. https://docs.mongodb.com/v3.6/reference/method/db.revokeRolesFromUser/",
    "function_names": [
      "iam_role_no_superuser_privileges",
      "iam_role_no_admin_privileges",
      "iam_role_no_db_owner_privileges",
      "iam_role_no_user_admin_privileges",
      "iam_role_no_user_admin_any_database",
      "iam_role_minimal_privileges",
      "iam_role_no_admin_database_scope",
      "iam_role_no_privilege_escalation",
      "iam_role_no_cross_database_privileges",
      "iam_role_no_unrestricted_privileges"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/built-in-roles/ 2. https://docs.mongodb.com/v3.6/reference/method/db.revokeRolesFromUser/"
  },
  {
    "id": "4.1",
    "title": "Ensure Encryption of Data in Transit TLS/SSL (Transport Encryption)",
    "assessment": "Automated",
    "description": "Use TLS or SSL to protect all incoming and outgoing connections. This should include using TLS or SSL to encrypt communication between the mongod and mongos components of a MongoDB client as well as between all applications and MongoDB. MongoDB supports TLS/SSL (Transport Layer Security/Secure Sockets Layer) to encrypt all of MongoDB\u2019s network traffic. TLS/SSL ensures that MongoDB network traffic is only readable by the intended client.",
    "rationale": "This prevents sniffing of cleartext traffic between MongoDB components or performing a man-in-the-middle attack for MongoDB.",
    "audit": "To verify that the server requires SSL or TLS (net.ssl.mode value set to requireSSL), run one of the following commands: On Ubuntu: cat /etc/mongod.conf | grep \u2013A20 \u2018net\u2019 | grep \u2013A10 \u2018ssl\u2019 | grep \u2018mode\u2019 On Windows: type mongod.conf | findstr \u2013A20 \u2018net\u2019 | findstr \u2013A10 \u2018ssl\u2019 | findstr \u2018mode\u2019",
    "remediation": "Configure MongoDB servers to require the use of SSL or TLS to encrypt all MongoDB network communications. To implement SSL or TLS to encrypt all MongoDB network communication, perform the  33 | P a g e following steps: For mongod (\u201cPrimary daemon process for the MongoDB system\u201d) In the configuration file /etc/mongod.conf, set the PEMKeyFile option to the certificate file\u2019s path and then start the component with this command: ssl: mode: requireSSL PEMKeyFile: /etc/ssl/mongodb.pem CAFile: /etc/ssl/ca.pem And restart monogdb instance with mongod --config /etc/mongod.conf Or mongod --sslMode requireSSL --sslPEMKeyFile /etc/ssl/mongodb.pem --sslCAFile /etc/ssl/ca.pem Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/core/security-transport-encryption/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-ssl/ 3. https://docs.mongodb.com/v3.6/tutorial/configure-ssl-clients/ 4. https://docs.mongodb.com/v3.6/tutorial/configure-x509-client-authentication/ 5. https://docs.mongodb.com/v3.6/tutorial/configure-x509-member-authentication/ Additional Information: ----------------------------------------------------------------------------- Value    |                           Description ------------+---------------------------------------------------------------- disabled    |  The server does not use TLS/SSL. ------------+---------------------------------------------------------------- allowSSL    |  Connections between servers do not use TLS/SSL. For incoming |  connections, the server accepts both TLS/SSL and |  non-TLS/non-SSL.  34 | P a g e ------------+---------------------------------------------------------------- preferSSL   |  Connections between servers use TLS/SSL. For incoming |  connections, the server accepts both TLS/SSL and |  non-TLS/non-SSL. ------------+---------------------------------------------------------------- requireSSL  |  The server uses and accepts only TLS/SSL encrypted |  connections. -----------------------------------------------------------------------------",
    "function_names": [
      "mongodb_instance_tls_enabled",
      "mongodb_connection_encryption_enabled",
      "mongodb_network_traffic_encrypted",
      "mongodb_client_communication_tls_enabled",
      "mongodb_application_connection_ssl_enabled",
      "mongodb_component_communication_encrypted",
      "mongodb_data_transit_encryption_enabled",
      "mongodb_tls_certificate_valid",
      "mongodb_ssl_protocol_enabled",
      "mongodb_network_encryption_required"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/core/security-transport-encryption/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-ssl/ 3. https://docs.mongodb.com/v3.6/tutorial/configure-ssl-clients/ 4. https://docs.mongodb.com/v3.6/tutorial/configure-x509-client-authentication/ 5. https://docs.mongodb.com/v3.6/tutorial/configure-x509-member-authentication/ Additional Information: ----------------------------------------------------------------------------- Value    |                           Description ------------+---------------------------------------------------------------- disabled    |  The server does not use TLS/SSL. ------------+---------------------------------------------------------------- allowSSL    |  Connections between servers do not use TLS/SSL. For incoming |  connections, the server accepts both TLS/SSL and |  non-TLS/non-SSL.  34 | P a g e ------------+---------------------------------------------------------------- preferSSL   |  Connections between servers use TLS/SSL. For incoming |  connections, the server accepts both TLS/SSL and |  non-TLS/non-SSL. ------------+---------------------------------------------------------------- requireSSL  |  The server uses and accepts only TLS/SSL encrypted |  connections. -----------------------------------------------------------------------------"
  },
  {
    "id": "4.2",
    "title": "Ensure Federal Information Processing Standard (FIPS) is enabled",
    "assessment": "Automated",
    "description": "The Federal Information Processing Standard (FIPS) is a computer security standard used to certify software modules and libraries that encrypt and decrypt data securely. You can configure MongoDB to run with a FIPS 140-2 certified library for OpenSSL. FIPS is a property of the encryption system and not the access control system. However, the environment requires FIPS compliant encryption and access control. Organizations must ensure that the access control system uses only FIPS-compliant encryption.",
    "rationale": "FIPS is an industry standard which dictates how data should be encrypted at rest and during transmission.",
    "audit": "On Ubuntu: To verify that the server uses FIPS Mode (net.ssl.FIPSMode value set to true), run following commands: mongod --config /etc/mongod.conf net: ssl: FIPSMode: true Or To verify FIPS mode is running, check the server log file for a message that FIPS is active: FIPS 140-2 mode activated On Windows: Check FIPSMode is true type mongod.conf | findstr \u201cFIPSMode\"",
    "remediation": "36 | P a g e Configuring FIPS mode, ensure that your certificate is FIPS compliant. Run mongod or mongos instance in FIPS mode. Make changes to configuration file, to configure your mongod or mongos instance to use FIPS mode, shut down the instance and update the configuration file with the following setting: net: ssl: FIPSMode: true Start mongod or mongos instance with a configuration file. mongod --config /etc/mongod.conf Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/tutorial/configure-fips/",
    "function_names": [
      "mongodb_instance_fips_enabled",
      "mongodb_cluster_fips_enabled",
      "mongodb_encryption_fips_compliant",
      "mongodb_tls_fips_140_2_enabled",
      "mongodb_access_control_fips_required",
      "mongodb_openssl_fips_certified",
      "mongodb_security_fips_mode_enabled",
      "mongodb_data_encryption_fips_compliant",
      "mongodb_network_fips_encryption_enabled",
      "mongodb_cryptography_fips_standard_applied"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/configure-fips/"
  },
  {
    "id": "4.3",
    "title": "Ensure Encryption of Data at Rest",
    "assessment": "Manual",
    "description": "Encryption of data at rest must be enabled to ensure compliance with security and privacy standards including HIPAA, PCI-DSS, and FERPA. Encryption at rest, when used in conjunction with transport encryption and good security policies that protect relevant accounts, passwords, and encryption keys.",
    "rationale": "Unauthorized users, such as intruders who are attempting security attacks, cannot read the data from storage and back up media unless they have the master encryption key to decrypt it.",
    "audit": "",
    "remediation": "It is recommended to enable the data at rest encryption to protect the data. Protecting Data at Rest Including following steps. \u2022 Generating a master key. \u2022 Generating keys for each database. \u2022 Encrypting data with the database keys. \u2022 Encrypting the database keys with the master key. Only the master key is external to the server and requires external management. To manage the master key, MongoDB\u2019s encrypted storage engine supports two key management options: \u2022 Integration with a third-party key management appliance via the Key Management Interoperability Protocol (KMIP). Recommended \u2022 Use of local key management via a keyfile. The encryption occurs transparently in the storage layer; i.e. all data files are fully encrypted from a filesystem perspective, and data only exists in an unencrypted state in memory and during transmission. To enable Encryption on Database follow below step mentioned in below Link  38 | P a g e https://docs.mongodb.com/v3.6/tutorial/configure-encryption/ Rotation of Key is also important. This can be enabled by following mentioned steps in below link. https://docs.mongodb.com/v3.6/tutorial/rotate-encryption-key/ References: 1. https://docs.mongodb.com/v3.6/core/security-encryption-at-rest/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-encryption/ Additional Information: Available in MongoDB Enterprise only.",
    "function_names": [
      "cloudtrail_trail_encryption_enabled",
      "s3_bucket_encryption_enabled",
      "ebs_volume_encryption_enabled",
      "rds_instance_encryption_enabled",
      "dynamodb_table_encryption_enabled",
      "efs_filesystem_encryption_enabled",
      "cloudfront_distribution_encryption_enabled",
      "elasticache_cluster_encryption_enabled",
      "redshift_cluster_encryption_enabled",
      "sqs_queue_encryption_enabled",
      "sns_topic_encryption_enabled",
      "lambda_function_encryption_enabled",
      "ec2_instance_encryption_enabled",
      "backup_vault_encryption_enabled",
      "kms_key_rotation_enabled"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/core/security-encryption-at-rest/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-encryption/ Additional Information: Available in MongoDB Enterprise only."
  },
  {
    "id": "5.1",
    "title": "Ensure that system activity is audited",
    "assessment": "Automated",
    "description": "Track access and changes to database configurations and data. MongoDB Enterprise includes a system auditing facility that can record system events (e.g. user operations, connection events) on a MongoDB instance. These audit records permit forensic analysis and allow administrators to verify proper controls.",
    "rationale": "System level logs can be handy while troubleshooting an operational problem or handling a security incident.",
    "audit": "To verify that system activity is being audited for MongoDB, run the following command to confirm the auditLog.destination value is set correctly: On Ubuntu: cat /etc/mongod.conf |grep \u2013A4 \"auditLog\" | grep \"destination\" On Windows: type mongod.conf | findstr \u2013A4 \"auditLog\" | findstr \"destination\"",
    "remediation": "Set the value of auditLog.destination to the appropriate value from the following options: Syslog To enable auditing and print audit events to syslog mongod --dbpath data/db --auditDestination syslog  40 | P a g e Console To enable auditing and print audit events to standard output (i.e., stdout) mongod --dbpath data/db --auditDestination console Json File To enable auditing and print audit events to a file in JSON format. Printing audit events to file in JSON format degrades server performance more than printing to a file in BSON format. mongod --dbpath data/db --auditDestination file --auditFormat JSON -- auditPath data/db/auditLog.json Bson File To enable auditing and print audit events to a file in BSON binary format mongod --dbpath data/db --auditDestination file --auditFormat BSON -- auditPath data/db/auditLog.bson Default Value: By default, Audit Logs are not configured. References: 1. https://docs.mongodb.com/v3.6/tutorial/configure-auditing/",
    "function_names": [
      "mongodb_instance_audit_logging_enabled",
      "mongodb_database_activity_audited",
      "mongodb_user_operations_audited",
      "mongodb_connection_events_audited",
      "mongodb_audit_log_retention_enabled",
      "mongodb_audit_log_encryption_enabled",
      "mongodb_audit_log_all_events_captured",
      "mongodb_audit_log_forensic_analysis_enabled"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/configure-auditing/"
  },
  {
    "id": "5.2",
    "title": "Ensure that audit filters are configured properly",
    "assessment": "Automated",
    "description": "MongoDB Enterprise supports auditing of various operations. When enabled, the audit facility, by default, records all auditable operations as detailed in Audit Event Actions, Details, and Results. To specify which events to record, the audit feature includes the -- auditFilter option. This check is only for Enterprise editions.",
    "rationale": "All operations carried out on the database are logged. This helps in backtracking and tracing any incident that occurs.",
    "audit": "To verify that audit filters are configured on MongoDB as per the organization\u2019s requirements, run the following command: On Ubuntu: cat /etc/mongod.conf |grep \u2013A10 \"auditLog\" | grep \"filter\" On Windows: type mongod.conf | findstr \u2013A10 \"auditLog\" | findstr \"filter\"",
    "remediation": "Set the audit filters based on the organization\u2019s requirements. Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/reference/audit-message/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-audit-filters/",
    "function_names": [
      "mongodb_audit_log_filter_enabled",
      "mongodb_audit_log_filter_configured",
      "mongodb_audit_log_filter_all_events",
      "mongodb_audit_log_filter_custom_events",
      "mongodb_audit_log_filter_enterprise_edition",
      "mongodb_audit_log_filter_operations_specified",
      "mongodb_audit_log_filter_default_disabled",
      "mongodb_audit_log_filter_event_actions_defined"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/audit-message/ 2. https://docs.mongodb.com/v3.6/tutorial/configure-audit-filters/"
  },
  {
    "id": "5.3",
    "title": "Ensure that logging captures as much information as possible",
    "assessment": "Automated",
    "description": "The SystemLog.quiet option stops logging of information such as: \u2022 connection events \u2022 authentication events \u2022 replication sync activities \u2022 evidence of some potentially impactful commands being run (eg: drop, dropIndexes, validate) This information should be logged whenever possible. This check is only for Enterprise editions.",
    "rationale": "The use of SystemLog.quiet makes troubleshooting problems and investigating possible security incidents much more difficult.",
    "audit": "To verify that the SystemLog.quiet option is disabled (i.e.; false), run the following command: On Ubuntu: cat /etc/mongod.conf |grep \"quiet\" On Windows: type mongod.conf | findstr \"quiet\"",
    "remediation": "Set SystemLog.quiet to false in the /etc/mongod.conf file to disable it. systemLog: quiet: false References:  45 | P a g e 1. https://docs.mongodb.com/v3.6/reference/configuration- options/#systemLog.quiet Additional Information: systemLog.quiet is not recommended for production systems as it may make tracking problems during particular connections much more difficult.",
    "function_names": [
      "mongodb_instance_system_log_quiet_disabled",
      "mongodb_instance_logging_verbose_enabled",
      "mongodb_instance_authentication_events_logged",
      "mongodb_instance_connection_events_logged",
      "mongodb_instance_replication_sync_logged",
      "mongodb_instance_impactful_commands_logged",
      "mongodb_instance_enterprise_logging_enabled"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "45 | P a g e 1. https://docs.mongodb.com/v3.6/reference/configuration- options/#systemLog.quiet Additional Information: systemLog.quiet is not recommended for production systems as it may make tracking problems during particular connections much more difficult."
  },
  {
    "id": "5.4",
    "title": "Ensure that new entries are appended to the end of the log file",
    "assessment": "Automated",
    "description": "By default, new log entries will overwrite old entries after a restart of the mongod or mongos service. Enabling the systemLog.logAppend setting causes new entries to be appended to the end of the log file rather than overwriting the existing content of the log when the mongod or mongos instance restarts.",
    "rationale": "Allowing old entries to be overwritten by new entries instead of appending new entries to the end of the log may destroy old log data that is needed for a variety of purposes.",
    "audit": "To verify that new log entries will be appended to the end of the log file after a restart (systemLog.logAppend value set to true), run the following command: On Ubuntu: cat /etc/mongod.conf | grep -A10 'systemLog' | grep 'logAppend' On Windows: type mongod.conf | findstr -A10 'systemLog' | findstr 'logAppend'",
    "remediation": "Set systemLog.logAppend to true in the /etc/mongod.conf file. References: 1. https://docs.mongodb.com/v3.6/reference/configuration- options/#systemLog.logAppend",
    "function_names": [
      "mongodb_log_append_enabled",
      "mongodb_system_log_append_enabled",
      "mongodb_log_append_no_overwrite",
      "mongodb_log_append_on_restart",
      "mongodb_system_log_append_no_overwrite"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/configuration- options/#systemLog.logAppend"
  },
  {
    "id": "6.1",
    "title": "Ensure that MongoDB uses a non-default port",
    "assessment": "Automated",
    "description": "Changing the default port used by MongoDB makes it harder for attackers to find the database and target it.",
    "rationale": "Standard ports are used in automated attacks and by attackers to verify which applications are running on a server. Impact: Hackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to \"fly under the radar\". This is just to avoid detection, other than that there is no added safety by using a different port.",
    "audit": "To verify the port number used by MongoDB, execute the following command and ensure that the port number is not 27017: On Ubuntu: cat /etc/mongod.conf |grep \u201cport\u201d On Windows: type mongod.conf | findstr \u201cport\u201d",
    "remediation": "Change the port for MongoDB server to a number other than 27017. References:  49 | P a g e 1. https://docs.mongodb.com/v3.6/reference/default-mongodb-port/",
    "function_names": [
      "mongodb_instance_non_default_port",
      "mongodb_instance_port_not_default",
      "mongodb_instance_custom_port_used",
      "mongodb_instance_default_port_avoided"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "impact": "Hackers frequently scan IP addresses for commonly used ports, so it's not uncommon to use a different port to \"fly under the radar\". This is just to avoid detection, other than that there is no added safety by using a different port.",
    "references": "49 | P a g e 1. https://docs.mongodb.com/v3.6/reference/default-mongodb-port/"
  },
  {
    "id": "6.2",
    "title": "Ensure that operating system resource limits are set for MongoDB",
    "assessment": "Manual",
    "description": "Operating systems provide ways to limit and control the usage of system resources such as threads, files, and network connections on a per-process and per-user basis",
    "rationale": "These ulimits prevent a single user from consuming too many system resources.",
    "audit": "To verify the resource limits set for MongoDB, run the following commands. Extract the process ID for MongoDB: ps -ef|grep mongod View the limits associated with that process number: cat /proc/1322/limits",
    "remediation": "Every deployment may have unique requirements and settings. Recommended thresholds and settings are particularly important for MongoDB deployments: \u2022 f (file size): unlimited \u2022 t (cpu time): unlimited \u2022 v (virtual memory): unlimited [1] \u2022 n (open files): 64000 \u2022 m (memory size): unlimited [1] [2] \u2022 u (processes/threads): 64000  51 | P a g e Restart the mongod and mongos instances after changing the ulimit settings to ensure that the changes take effect. Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/reference/ulimit/#recommended-ulimit-settings",
    "function_names": [
      "compute_mongodb_resource_limits_set",
      "compute_mongodb_thread_limits_set",
      "compute_mongodb_file_limits_set",
      "compute_mongodb_network_limits_set",
      "compute_mongodb_process_limits_set",
      "compute_mongodb_user_limits_set",
      "compute_mongodb_system_resource_limits_set"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/ulimit/#recommended-ulimit-settings"
  },
  {
    "id": "6.3",
    "title": "Ensure that server-side scripting is disabled if not needed",
    "assessment": "Manual",
    "description": "MongoDB supports the execution of JavaScript code for certain server-side operations: mapReduce, group, and $where. If you do not use these operations, server-side scripting should be disabled.",
    "rationale": "If server-side scripting is not needed and is not disabled, this introduces unnecessary risk which may allow an attacker to take advantage of insecure coding.",
    "audit": "If server-side scripting is not required, verify that it is disabled (javascriptEnabled value of false) using the following command: On Ubuntu: cat /etc/mongod.conf | grep \u2013A10 \"security\" | grep \"javascriptEnabled\" On Windows: type mongod.conf | findstr \u2013A10 \"security\" | findstr \"javascriptEnabled\"",
    "remediation": "If server-side scripting is not required, disable it by using the --noscripting option on the command line. Default Value: Enabled References: 1. https://docs.mongodb.com/v3.6/reference/configuration- options/#security.javascriptEnabled",
    "function_names": [
      "mongodb_instance_server_side_scripting_disabled",
      "mongodb_database_javascript_execution_disabled",
      "mongodb_cluster_mapreduce_disabled",
      "mongodb_collection_group_operation_disabled",
      "mongodb_query_where_clause_disabled",
      "mongodb_instance_unused_scripting_features_disabled",
      "mongodb_server_side_operations_restricted",
      "mongodb_instance_javascript_disabled_if_unused"
    ],
    "profile_applicability": "\u2022  Level 2 - MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/reference/configuration- options/#security.javascriptEnabled"
  },
  {
    "id": "7.1",
    "title": "Ensure authentication file permissions are set correctly",
    "assessment": "Manual",
    "description": "In the Shared Cluster, the certificate or keyfile is utilized for authentications. Implementing proper file permissions on the certificate or keyfile will prevent unauthorized access to it.",
    "rationale": "Protecting the certificate/keyfile strengthens authentication in the sharded cluster and prevents unauthorized access to the MongoDB database.",
    "audit": "Find the location of certificate/keyfile using the following commands: On Ubuntu: cat /etc/mongod.conf | grep \u201ckeyFile:\u201d cat /etc/mongod.conf | grep \u201cPEMKeyFile:\u201d cat /etc/mongod.conf | grep \u201cCAFile:\u201d On Windows: type mongod.conf | findstr \u201ckeyFile:\u201d type mongod.conf | findstr \u201cPEMKeyFile:\u201d type mongod.conf | findstr \u201cCAFile:\u201d Check the permission of the file using: ls -l certificate_file_locations ls -l keyfile_locations",
    "remediation": "Set the keyFile ownership to mongodb user and remove other permissions by executing these commands:  55 | P a g e chmod 600 /keyfile sudo chown mongodb:mongodb /keyfile Default Value: Not configured References: 1. https://docs.mongodb.com/v3.6/tutorial/enforce-keyfile-access-control-in- existing-replica-set/",
    "function_names": [
      "compute_authentication_file_permissions_restricted",
      "compute_certificate_file_permissions_restricted",
      "compute_keyfile_permissions_restricted",
      "compute_shared_cluster_auth_file_permissions_restricted",
      "compute_auth_file_owner_read_only",
      "compute_auth_file_group_read_only",
      "compute_auth_file_world_read_disabled",
      "compute_auth_file_owner_write_only",
      "compute_auth_file_group_write_disabled",
      "compute_auth_file_world_write_disabled"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "1. https://docs.mongodb.com/v3.6/tutorial/enforce-keyfile-access-control-in- existing-replica-set/"
  },
  {
    "id": "7.2",
    "title": "Ensure that database file permissions are set correctly",
    "assessment": "Manual",
    "description": "MongoDB database files need to be protected using file permissions.",
    "rationale": "This will restrict unauthorized users from accessing the database.",
    "audit": "To verify that the permissions for the MongoDB database file are configured securely, run the following commands. Find out the database location using the following command: On Ubuntu: cat /etc/mongod.conf |grep \"dbpath\" On Windows: type mongod.conf | findstr \"dbpath\" Use the database location as part of the following command to view and verify the permissions set for the database file: ls \u2013l /var/lib/mongodb",
    "remediation": "Set ownership of the database file to mongodb user and remove other permissions using the following commands: chmod 770 /var/lib/mongodb sudo chown mongodb:mongodb /var/lib/mongodb Default Value: Not configured References:  57 | P a g e 1. https://docs.mongodb.com/v3.6/reference/configuration-options/#storage.dbPath",
    "function_names": [
      "mongodb_database_file_permissions_correct",
      "mongodb_data_directory_permissions_restricted",
      "mongodb_file_ownership_valid",
      "mongodb_file_group_ownership_valid",
      "mongodb_file_permissions_no_world_writable",
      "mongodb_file_permissions_no_world_readable",
      "mongodb_file_permissions_owner_read_only",
      "mongodb_file_permissions_group_read_only",
      "mongodb_file_permissions_strict_mode_enabled",
      "mongodb_file_permissions_secure_umask_applied"
    ],
    "profile_applicability": "\u2022  Level 1- MongoDB",
    "references": "57 | P a g e 1. https://docs.mongodb.com/v3.6/reference/configuration-options/#storage.dbPath"
  }
]